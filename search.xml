<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《为何爱会伤人》 -- 武志红</title>
      <link href="article/book/book_1_%E3%80%8A%E4%B8%BA%E4%BD%95%E7%88%B1%E4%BC%9A%E4%BC%A4%E4%BA%BA%E3%80%8B/"/>
      <url>article/book/book_1_%E3%80%8A%E4%B8%BA%E4%BD%95%E7%88%B1%E4%BC%9A%E4%BC%A4%E4%BA%BA%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>这只是测试一下功能</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HDFS分布式文件系统小结</title>
      <link href="article/2021/article_4_HDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B0%8F%E7%BB%93/"/>
      <url>article/2021/article_4_HDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="hdfs概念">HDFS概念</h2><h3 id="hdfs定义">HDFS定义</h3><p>HDFS是Hadoop的一个分布式文件系统，全称叫Hadoop Distributed File System。</p><h3 id="hdfs特点">HDFS特点</h3><h4 id="高容错性">高容错性</h4><p>HDFS 可以稳定运行在商用硬件集群上，有冗余副本，心跳机制，安全模式等功能<br>支持元数据快照，将失效的集群回滚到之前一个正常的时间点上。<br></p><h4 id="大数据集存储">大数据集存储</h4><p>一个磁盘无法放下的 GB 或 TB 的文件，HDFS将它分成小块（block）存储。<br></p><h4 id="一致性模型write-once-read-many">一致性模型（<strong>write-once-read-many</strong>）</h4><p>HDFS 通常是一次写入，多次读取，不支持随机写操作，可以在文件末尾追加。<br></p><h4 id="适合于分布式计算">适合于分布式计算</h4><p>一般的计算需要将数据输入到程序中，网络传输大文件比较慢。<br>HDFS则是提供接口将计算先放到每块数据中执行，最后再将结果合并。</p><h3 id="与hadoop关系">与Hadoop关系</h3><p><a href="#lXVXT">Hadoop是一个分布式系统基础架构</a>，其中核心组件有HDFS，MapReduce，YARN。<br></p><h2 id="hdfs架构">HDFS架构</h2><h3 id="架构图">架构图</h3><p><img src="/img/mypost/2021/4-1.png" alt="image.png"></p><h3 id="主从结构">主从结构</h3><p>由一个Namenode和一定数目的Datanodes组成。<br><br><br>Namenode是一个中心服务，</p><ul><li>负责管理文件系统的Namespace；</li><li>数据块到具体Datanode节点的映射和数据块到文件的映射；</li><li>负责执行文件系统的Namespace操作，比如打开、关闭、重命名文件或目录；</li></ul><p><br>集群中的Datanode一般是一个节点一个</p><ul><li>负责管理它所在节点上数据的存储；</li><li>负责处理文件系统客户端的读写请求；</li><li>在Namenode调度下进行数据块的创建、删除和复制；</li><li>周期性的上报心跳信号和块状态报告到Namenode；</li></ul><br><h2 id="hdfs数据存储">HDFS数据存储</h2><p><img src="/img/mypost/2021/4-2.png" alt="image.png"></p><h3 id="分块存储">分块存储</h3><p>一个大文件存储到HDFS上，会被分成多个Block。目前HDFS分块默认为128M，支持修改。<br>如果文件大小没有到达块的最小空间，该文件只会占据自己本身空间大小。</p><h3 id="备份机制">备份机制</h3><p>HDFS默认备份3份，存储在不同的Datanode节点中。<br>每个文件的数据块大小和副本系数都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。</p><h3 id="机架感知">机架感知</h3><p><img src="/img/mypost/2021/4-3.png" alt="image.png"><br>为了防止当整个机架失效时数据的丢失，Datanode一般会分布在不同的机架上。<br>另外可以在读取数据的时候计算最近的副本的距离，尽量使用同一个机架上的Block。<br></p><p><br>首先通过管理员手动配置机器与机架的关系，一般是维护一个map，将脚本文件配置在配置文件中。<br></p><h3 id="fsimage-和-editlog">FsImage 和 EditLog</h3><ul><li><strong>EditLog</strong>：保存元数据更改记录，一个文件只记录一段时间的信息。</li><li><strong>FsImage</strong>：保存文件系统目录树以及文件和 block 的对应关系，理解为元数据镜像文件，某个时刻整个 HDFS 系统文件信息的快照；</li></ul><p>只有在NameNode重启时，edit logs才会合并到fsimage文件中，从而得到一个文件系统的最新快照。但是在产品集群中NameNode是很少重启的，这也意味着当NameNode运行了很长时间后，edit logs文件会变得很大<br></p><ul><li><strong>SecondaryNameNode</strong>：定期合并NameNode的edit logs到fsimage文件中</li></ul><p><img src="/img/mypost/2021/4-4.png" alt="image.png"></p><blockquote><ol><li>触发检查点（定期/定多少事务记录）</li><li>触发 checkpoint，NameNode 停止向 edits 中写新的记录，另外生成一个 edits.new 文件，将新的事务记录在此文件中</li><li>SecondaryNameNode 通过 HTTP 请求，从 NameNode 下载 fsimage 和 edits 文件，合并生成 fsimage.chkpoint 文件；</li><li>SecondaryNameNode 再将新生成的 fsimage.chkpoint 上传到 NameNode 并重命名为 fsimage，直接覆盖旧的 fsimage，实际上中间的过程还有一些 MD5 完整性校验，检查文件上传下载后是否完整；</li><li>将 edits.new 文件重命名为 edits 文件，旧的 edits 文件已经合并到 fsimage；</li></ol></blockquote><h2 id="hdfs文件读写">HDFS文件读写</h2><p><br>运行在HDFS上的应用和普通的应用不同，需要流式访问它们的数据集。HDFS的设计中更多的考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。POSIX标准设置的很多硬性约束对HDFS应用系统不是必需的。为了提高数据的吞吐量，在一些关键方面对POSIX的语义做了一些修改。<br></p><h3 id="hdfs中的block-packet-chunk">HDFS中的block、packet、chunk</h3><h4 id="block">block</h4><p>文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。<br></p><h4 id="packet">packet</h4><p>packet是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。<br></p><h4 id="chunk">chunk</h4><p>chunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br></p><h3 id="读数据过程">读数据过程</h3><p><img src="/img/mypost/2021/4-7.jpg" alt="image"></p><h3 id="写数据过程">写数据过程</h3><p><img src="/img/mypost/2021/4-8.jpg" alt="image"></p><h2 id="参考资料">参考资料</h2><h3 id="hadoop官方文档v33版本"><a href="https://hadoop.apache.org/docs/r3.3.0/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Simple_Coherency_Model" target="_blank" rel="external">Hadoop官方文档V3.3版本 </a></h3><h3 id="大数据之-hdfs-图文详解"><a href="https://www.sysapi.com/article/485784.html" target="_blank" rel="external">大数据之 HDFS 图文详解</a></h3><h3 id="分布式文件系统架构对比"><a href="https://juejin.cn/post/6844903630991032327" target="_blank" rel="external">分布式文件系统架构对比</a></h3><h3 id="分布式存储glusterfs"><a href="https://www.jianshu.com/p/2098d0617939" target="_blank" rel="external">分布式存储glusterfs</a></h3><h3 id="机架感知概念及配置实现"><a href="https://blog.csdn.net/wypersist/article/details/79797559" target="_blank" rel="external">机架感知概念及配置实现</a></h3><h3 id="tfs的原理与使用"><a href="https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fa4HlcuA" target="_blank" rel="external">TFS的原理与使用</a></h3><h3 id="hadoop数据完整性与checksum校验原理"><a href="https://blog.csdn.net/lb812913059/article/details/79718303" target="_blank" rel="external">Hadoop数据完整性与CheckSum校验原理</a></h3><h3 id="hdfs读写流程"><a href="https://blog.csdn.net/whdxjbw/article/details/81072207" target="_blank" rel="external">HDFS读写流程</a></h3><h3 id="crush算法的原理与实现"><a href="https://zhuanlan.zhihu.com/p/58888246" target="_blank" rel="external">CRUSH算法的原理与实现</a></h3><h3 id="hadoop个人分享"><a href="https://coding-pages-bucket-3440936-7810273-13586-512516-1300444322.cos-website.ap-shanghai.myqcloud.com/tags/#HADOOP" target="_blank" rel="external">Hadoop个人分享</a></h3><h2 id="附件">附件</h2><h3 id="文件系统简介">文件系统简介</h3><p>文件系统是计算机中一个非常重要的组件，为存储设备提供一致的访问和管理方式。<br><strong>可移植操作系统接口</strong>（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。<br></p><h4 id="通用属性">通用属性</h4><p>数据是以文件的形式存在，提供 Open、Read、Write、Seek、Close 等API 进行访问；<br>文件以树形目录进行组织，提供原子的重命名（Rename）操作改变文件或者目录的位置<br></p><h4 id="单机文件系统">单机文件系统</h4><p>windows：FAT/FAT32/NTFS，linux：EXT2/EXT3/EXT4/XFS/BtrFS，mac：<a href="https://developer.apple.com/support/downloads/Apple-File-System-Reference.pdf" target="_blank" rel="external">APFS </a><br></p><h4 id="单机文件系统挑战">单机文件系统挑战</h4><ul><li>共享：无法同时为分布在多个机器中的应用提供访问，于是有了 NFS 协议，可以将单机文件系统通过网络的方式同时提供给多个机器访问。</li><li>容量：无法提供足够空间来存储数据，数据只好分散在多个隔离的单机文件系统里。</li><li>性能：无法满足某些应用需要非常高的读写性能要求，应用只好做逻辑拆分同时读写多个文件系统。</li><li>可靠性：受限于单个机器的可靠性，机器故障可能导致数据丢失。</li><li>可用性：受限于单个操作系统的可用性，故障或者重启等运维操作会导致不可用。</li></ul><h3 id="开源分布式架构对比">开源分布式架构对比</h3><table><thead><tr><th>分布式文件系统</th><th>开发语言</th><th>使用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="https://hadoop.apache.org/docs/r3.3.0/" target="_blank" rel="external">HDFS</a></td><td>JAVA</td><td>大文件存储，大数据分析</td><td><br>1. 经典<br>1. 大数据场景有优势<br>1. 用户数量大<br>1. 资料丰富<br>1. 高吞吐<br></td><td><br>1. 不通用，并不提供完整的POSIX语义<br>1. 小文件性能较差<br>1. 只支持追加写<br>1. 不能低延迟<br></td></tr><tr><td><a href="https://docs.gluster.org/en/latest/" target="_blank" rel="external">GlusterFS</a></td><td>C</td><td>大文件存储场景</td><td><br>1. 老牌分布式文件系统<br>1. 应用众多<br>1. 云存储和流媒体<br>1. 没有元数据服务器的设计，无单点故障<br></td><td><br>1. 扩容、缩容时影响的服务器较多<br>1. 小文件性能较差<br></td></tr><tr><td><a href="https://docs.ceph.com/en/latest/cephfs/" target="_blank" rel="external">CephFS</a></td><td>C++</td><td>单机群大中小文件</td><td><br>1. crush算法比较有特点<br>1. ceph架构支持块存储，对象存储，文件存储<br></td><td><br>1. 不够成熟稳定，问题较多<br>1. 读写效率不高<br></td></tr><tr><td><a href="https://moosefs.com/products/#moosefs" target="_blank" rel="external">MooseFS</a></td><td>C</td><td>单机群大中小文件</td><td><br>1. 通过fuse支持了标准的posix，实现通用的文件系统<br></td><td><br>1. 社区不活跃<br>1. Master Server本身的性能瓶颈<br></td></tr><tr><td><a href="https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fatYIIqc" target="_blank" rel="external">TFS</a></td><td>C++</td><td>主要设计用于小于1MB的小文件</td><td><br>1. 解决分布式文件系统小文件的问题<br></td><td><br>1. 文档不全<br>1. 使用较为困难<br></td></tr></tbody></table><h3 id=""></h3><h3 id="为什么要设置block为128m">为什么要设置Block为128M</h3><ol><li>如果块设置过大<ul><li>从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；</li><li>mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。</li></ul></li><li>如果块设置过小<ul><li>存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；</li><li>文件块过小，寻址时间增大，导致程序一直在找block的开始位置。</li></ul></li></ol><blockquote><ol><li>HDFS中平均寻址时间大概为10ms；</li><li>经过前人的大量测试发现，寻址时间为传输时间的1%时，为最佳状态；<br>    所以最佳传输时间为10ms/0.01=1000ms=1s</li><li>目前磁盘的传输速率普遍为100MB/s；</li></ol></blockquote><h3 id="网络拓扑机器之间的距离">网络拓扑机器之间的距离</h3><p><img src="/img/mypost/2021/4-5.png" alt="image.png"><br>D1,R1 都是交换机，最底层是 datanode。则 H1 的<br>rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid<br>信息可以通过 <a href="http://topology.script.file.name" target="_blank" rel="external">topology.script.file.name</a> 配置。有了这些 rackid 信息<br>就可以计算出任意两台 datanode 之间的距离。<br><br><br>1.distance(/D1/R1/H1,/D1/R1/H1)=0  相同的 datanode<br>2.distance(/D1/R1/H1,/D1/R1/H2)=2  同一 rack 下的不同 datanode<br>3.distance(/D1/R1/H1,/D1/R1/H4)=4  同一 IDC(互联网数据中心<br></p><h3 id="hadoop2x架构图">hadoop2.x架构图</h3><p><img src="/img/mypost/2021/4-6.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HADOOP </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020总结 -- 稳中求进</title>
      <link href="article/2021/article_1_2020%E6%80%BB%E7%BB%93-%E7%A8%B3%E4%B8%AD%E6%B1%82%E8%BF%9B/"/>
      <url>article/2021/article_1_2020%E6%80%BB%E7%BB%93-%E7%A8%B3%E4%B8%AD%E6%B1%82%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这个总结会迟到但不会缺席。放个音乐会更配哦~</p><p>2020年已很快过去，今年过的格外稳<br>外部环境有一部分原因，疫情/公司/生活让我感受到一丝压抑；<br>内部因素也导致有些懒懒的，内心毫无波澜、保持最低期望。<br>但稳也能学到很多，积累很多，等待质变。</p><p>以下主题不分先后轻重。</p><h2 id="工作">工作</h2><p>今年还是在大搜车的一年，年初在家工作了一个月才来到公司，</p><p>当时还信心满满，虽然一些团队的资深大佬都纷纷跳槽。</p><p>然后就经历了三次团队和领导的更换，感觉好起来了就换一拨，可能没碰上好运气，<br>个人认为这个也是一直很难有职场稳步提升的一个致命点。</p><p>今年以来一直先是做了一段时间数据平台项目，后面又转到做数据BI项目，从零开始的BI项目足够做很长时间。</p><p>由于在数据中心呆了一段时间，各个项目都有交互。<br>对新项目，对整体数据流程等都比较清楚，所以干起来也不是特别费脑力。</p><p>新项目或者新版本基本可以独立hold住，包括后续还可以探讨一些技术上的方案和给一些建议。</p><p>但环境使然，技术这边比较难以做出成绩。</p><p>上半年心内还挺急的，希望能做出些成绩蹭上一波薪资和等级的上升，但年中并没有想象中的回报，<br>所以有了一波打击，回想当时的内心还是挺不甘心的，也是有了换工作的想法。</p><p>年中那会儿算起来也才正式工作一年，项目接触还不够多，java也就学了半年，所以碰了几次壁，印象中找到了上海的一家和杭州的几家小公司。</p><p>又是一些打击让我放弃，这次是跳槽工资都达不到我内心的希望，感觉是30%以内就别跳槽了，还不如在继续干一段时间。</p><p>后面在九十月份也陆续找了一些小公司，当时的想法是碰上好的就去了，碰不上也继续在这儿做下去。<br>保持一种面试的压迫感，随时准备一些面试基础知识与问题。</p><p>年底了当时也是在稍微投一些简历，之前有一个同事去了阿里生态，所以也是留了点印象。<br>后面收到了那家公司的电话面试，就让自己在挑战一把，在杭州去阿里也是一个不错的选择。</p><h2 id="生活">生活</h2><p>今年由于疫情，没有远行。<br>租房一直挺合适的，也没有更换这个翡翠城小房间。</p><p>只在杭州内和朋友稍微走了走。</p><p>卖葡萄也是生活一部分了，今年公司人流动大，生意就不行了，只卖了两拨，百多箱的样子。</p><p>这个事情一般自己尽力就好，做生意的脑袋并不特别发达。</p><p>平淡的生活也需要挑战，今年日常增加羽毛球的运动，进行了虐人的徒步挑战，<br>第一次参加了半程马拉松，第一次进行了滑雪。</p><p>羽毛球主要是公司组织的，也是一星期一次基本不落下，同时也认识一些朋友<br>虽然球技基本也稳定在一般水平</p><p>徒步则比较偶然，碰上了喜欢徒步的朋友，就约着一起去，穿越了七尖，<br>准备好了装备，走了两天，翻山越岭也是比较艰险的一次体验。</p><p>马拉松是我酝酿了很久的，老早以前也想去参加下。<br>杭马报名但没抽签上，就参加了梦想小镇的马拉松，也是比较近。<br>今年一直以来都有在小区跑步的习惯，一般跑个几公里锻炼。<br>参加过程比较顺利，单人跑完了全程20多公里。</p><p>滑雪是也是一些朋友拉着一起去了，想想好像都是有朋友组织，交一群朋友还是挺重要的。<br>滑的是双板，摔了几跤也是会滑小的直道下坡了。</p><p>最好的生活是平平淡淡。</p><h2 id="技术">技术</h2><p>今年总体还是在Java和后端上做耕耘，副业是写chrome插件，改进博客。</p><p>19年转Java的选择在现在看来也是没有错的，确实多了更多机会，（其实也没什么选择余地，都是一步步走过来）<br>环境使然与人的主观能动性共同作用😆</p><p>年初还希望在大数据上有所建树，但可能环境因素吧，并不都往想的方向发展，还没开始就结束了的那种。</p><p>再后来调整了思路，也默默把自己简历写成了Java开发。</p><p>在这个行业这个职位，总是得逼着自己学习，不然也跟不上脚步。<br>只要工作中使了劲，基本在工作项目中学到的也足够自己喝一壶</p><p>另外在业余时间或项目间隙也总得弄点东西写，规划自己的产品。</p><p>我选择的是chrome插件，这个在前几年也尝试过，但也只是简单的demo。</p><p>然后也是一些突发奇想，把老的demo拿出来好好的改造了一下，成为了现在的<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">web robot</a></p><p>断断续续写了大半年，也算是一个不少功能的插件，在一定场景下可以发挥特别的作用，已有<strong>51</strong>个star。</p><p>后续想要的话还可以继续改进这个插件</p><p>另外有兴趣会开辟小程序、小游戏等的轻量开发。</p><p>博客也是一直在维护，一方面是写文章记录，另一方面是优化展示，<br>发觉更多元素，改进原有博客主题，引入新的技术实现等。</p><p>今年博客完成了<strong>26</strong>篇，大致有<strong>3.5</strong>万字。前面hive/hadoop多些，后面插件的多些。<br>截至2021.02已有<strong>9476</strong>访问量，<strong>5318</strong>访问人次</p><p>github也有<strong>128</strong> contributions in 2020，同时多个50多个star，主要为插件的。</p><h2 id="情感">情感</h2><p>这个主题比较悲伤🙄。</p><p>希望是美好的，现实是残酷的。</p><p>今年来说，重点心思没有放在找女朋友这件事上，</p><p>个人还是比较在意一段感情的，所以不会轻易开始，更不希望轻易结束。（内心也是有点害怕和抗拒的）</p><p>可能我希望这是一个水到渠成的事情，但这个目前来说有点无法做到这样。</p><p>认识的人也不是特别的多，说得上话的也没几个。</p><p>还有目前也不算在杭州扎稳脚跟，还是一个漂流瓶。</p><h2 id="家">家</h2><p>家庭伴随着亲情，我个人看来也是需要好好打理的。</p><p>自己这个年纪了，也是有下一辈的人了，奶奶辈、父母辈也都老了，处于四世同堂的第二级。</p><p>也不想他们老来担负特别大的压力，独立自主这个想法到是一直伴随着我，<br>由此而在大城市打拼。</p><p>辛苦了半辈子，家里人的身体也不是特别好，去年、今年以来也特别突出。</p><p>貌似也没有特别好的办法，只能多检查检查，或者考虑保险这种。</p><p>家在余姚比较近，不过现在也大概节日回去下或者周末空了回去下。</p><p>频率不高但也常常能见，也是挺舒服的一个状态。</p><p>家的一些原因还促使我早点买车，家里也在农村交通不好，买车可以回家方便，先看着，可能是一个下面的规划。</p><h2 id="理财">理财</h2><p>理财是一个长久在干的事情，都快算是第二收入了，当然正负不一定。</p><p>今年算是行情不错的一年，大家都有得赚，我也是赶上了几波，投的钱来说赚的也是20多个点</p><p>年初还是空仓，赶上了节后的大跌买入，后来就一直赚的不错。</p><p>在年中已经投入比较多了，也赶上了一波6-7月的行情，当时天天大涨也是没见过这阵仗，逐步卖一点，留下了收益。</p><p>后面下半年就是起起伏伏，没什么盈亏。</p><p>更新了<a href="/article/money/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/">我的理财篇</a>也是记录了今年以来的买卖交易。</p><p>原先主要是大盘，一些白酒类，电子类。但都没拿住，早早地抛了。</p><p>后来逐步买入了那个半导体类，现在也是半导体大户。</p><p>但半导体短期来说还是很难干出成绩的一件事情，虽然国家一直会支持这个产业。</p><p>个人的投资目前总结的方法论还不是特别多，很多凭感觉，</p><p>但感觉也是基于看了很多文章，新闻，大V等渠道影响下得出的。</p><p>后面最好还是有一套实体方法，且不断改进那种，相信慢慢也会有思路。</p><h2 id="精神食粮">精神食粮</h2><p>主要讲讲日常闲时的消磨方式。</p><p>手游王者荣耀还是一个在玩的主要游戏，并不特别看重等级，玩起来比较随性。</p><p>平常会有一些同事一起开黑玩，也是有输有赢的娱乐局。</p><p>电脑端由于是mac电脑近来也都玩的少了，回忆玩过一段时间饥荒，也是比较喜欢生存这类型。</p><p>弹钢琴还是一个比较重要的自娱自乐项目，虽然弹得并不多也不好，<br>但偶尔找到自己喜欢的旋律和谱子还是可以一试。</p><p>另外B站的视频，一些短的电视剧，动漫(只剩秦时明月了)也在追进，<br>电影到是不怎么热衷了，保留一份期待吧。<br>直播到是还每天看一点，主要是游戏直播，当做看以前电视那样看，形看神不看。</p><p>书籍实体书今年到是都没怎么看，网文小说、有声小说到是看了一些，<br>另外就是一些技术书籍了，也是啃了一部分。</p><h2 id="规划">规划</h2><p>有个潜移默化中变化的思想就是准备好好留在杭州打拼了。</p><p>刚毕业后的我可能还是一个选择阶段，那时的选择很多，或杭州或宁波甚至上海。<br>在杭州待了一年，慢慢的转变为了杭州可以的话就在杭州先待几年，别的地有好的也可以考虑。<br>再然后转变为有长久在杭州的打算。</p><p>一个是思想的转变是 也不把搬到其他城市作为一种背井离乡，这也可以是家族的发展，或者你自己成为了根。</p><p>另外也是杭州这边也可以有让我留下来的资本和勇气。（有说房价高，但你亦可以有不买房留下来的勇气）</p><p>希望能有一次旅游，国内就行，有伴最好，或者和家里人一起。<br>顺便做回飞机，20多年还没坐过那。<br>（看上去简单，还得提前个几个月规划好时间地点人物，也不是说走就走的人）</p><p>希望能保持一个锻炼，还是以慢跑为主。</p><p>下半年在可以摇到号的情况下可以考虑买个车，没有的话也可以适当考虑电动车或二手车，<br>虽然目前还是可以但没必要的状态，养车也得一定的费用，但也有时是很有用，顺便当做练练手。</p><p>新的一年已经在阿里乌鸫工作，伴随而来的是新的机遇和挑战。<br>而这次我很稳，相信自己能适应职场的节奏，能顶住技术的更迭，能开拓更广的视野。</p><h2 id="最后">最后</h2><p>2020是我第二个本命年，随着年龄的增长，有些东西和思想还是在悄然发生变化。<br>继续好好的拥抱自己，拥抱人生。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采坑备忘录</title>
      <link href="article/bug_review/"/>
      <url>article/bug_review/</url>
      
        <content type="html"><![CDATA[<h2 id="jetbrains破解">jetbrains破解</h2><p>从官网下载idea/pycharm 2019.3前的版本。</p><p>网上搜索jetbrains-agent-latest下载。</p><p>将jar文件拖入idea、pycharm即可。</p><h2 id="hexo锚点失效为undefined">hexo锚点失效为undefined</h2><p>修改如下文件，</p><blockquote><p>node_modules/hexo-toc/lib/filter.js</p></blockquote><p>将29-31替换为</p><blockquote><p>$title.attr(‘id’, id);</p></blockquote><h2 id="无底洞">无底洞</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web Robot使用教程(终极版)</title>
      <link href="article/2021/article_3_WEB_ROBOT%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3(%E7%BB%88%E6%9E%81%E7%89%88)/"/>
      <url>article/2021/article_3_WEB_ROBOT%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3(%E7%BB%88%E6%9E%81%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文为<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">Web Robot</a>插件使用教程终极版</p><p>融合所有前面版本迭代的功能，包括有用的没用的</p><p>当前文档教程的Web Robot版本 V2.2.0</p><p><img src="/img/mypost/2021/1-1.jpg" alt="image"></p><h1 id="教程">教程</h1><h2 id="下载与安装">下载与安装</h2><p>因为一些权限因素，本插件目前没有上到chrome商店，需通过源码安装</p><h3 id="下载">下载</h3><p>首先到github的仓库 <a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">https://github.com/webgjc/web_robot</a></p><p>将仓库克隆到本地</p><blockquote><p>git clone <a href="https://github.com/webgjc/web_robot.git" target="_blank" rel="external">https://github.com/webgjc/web_robot.git</a></p></blockquote><h3 id="安装">安装</h3><p>打开chrome浏览器，访问 <a href="chrome://extensions/" target="_blank" rel="external">chrome://extensions/</a></p><p>点击开启开发者模式（右上角）</p><p>加载已解压的扩展程序，选择本地的仓库代码，即可完成。</p><p>完成后可关闭开发者模式。</p><h2 id="事务相关操作">事务相关操作</h2><p>事务在Web Robot中表示一系列浏览器操作的集合。</p><p>如自动化表单填写，自动化签到，自动化去广告。</p><p>配置事务/导入事务是使用插件的第一步。</p><h3 id="导入事务">导入事务</h3><p><img src="/img/mypost/2021/1-2.jpg" alt="image"></p><p>如果有别人已经配置好的并导出的成熟事务，<br>或者想直接体验一下github上的演示用例<a href="https://github.com/webgjc/web_robot#%E6%BC%94%E7%A4%BA%E7%94%A8%E4%BE%8B" target="_blank" rel="external">Web Robot演示用例</a></p><p>可以直接导入即可体验浏览器自动化的乐趣。</p><p>点开插件面板，点击 导入事务</p><p>复制如上面演示用例中的一长json字符串。点击确认即可。</p><h3 id="新增事务">新增事务</h3><p><img src="/img/mypost/2021/1-3.jpg" alt="image"></p><p>如果要自己进行自定义的配置，首先第一步是新增事务。</p><p>点击 新增事务，填写事务的名称（不能有重复）</p><p>选择事务的类型</p><ul><li>流程事务：通过页面元素定义事件，支持运行，受控运行，添加看板等；</li><li>并发爬虫事务：页面级的爬虫，支持并发，定时运行，数据添加看板等；</li><li>源码事务：源码注入，支持自定义代码，自定义注入地址；</li><li>受控事务：键盘鼠标的录制，支持录制，回放；</li></ul><p>选择好后 点击确认 即创建了一个空的事务。</p><h3 id="重命名上移删除">重命名/上移/删除</h3><p><img src="/img/mypost/2021/1-4.jpg" alt="image"></p><p>一些一般性的操作</p><ul><li>重命名已创建的事务</li></ul><p>点击事务右边操作列表中的 重命名</p><p>输入新的名字 确认即可。</p><ul><li>移动事务在列表中的上下位置</li></ul><p>点击上移，即可与上面一个事务交换位置</p><ul><li>删除事务</li></ul><p>点击删除，二次确认后即可删除。(删除不可复原)</p><h3 id="导出事务">导出事务</h3><p>如果想要讲一个已经制作完成的事务分享给别人</p><p>点击导出，出现导出成功。</p><p>表示已经复制到 <strong>剪切板</strong>，再其他地方直接粘贴即可。</p><h2 id="本地客户端相关启动与使用">本地客户端相关，启动与使用</h2><p><strong>重点：本地客户端只影响部分插件功能的使用。</strong><br><strong>大部分情况下不需要用到！详情看<a href="#%E5%8F%97%E6%8E%A7%E6%A6%82%E5%BF%B5">受控概念</a>，<a href="#%E7%88%AC%E8%99%AB%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%85%B3">爬虫本地相关</a></strong></p><p>为了实现浏览器插件能与本地进行<strong>数据交互</strong>，<br>同时在一些插件无法实现的功能（如控制键盘鼠标）上通过本地python来实现。</p><p>这边写了一个简单的<strong>python web</strong>服务，插件通过 <strong>HTTP</strong> 访问接口来交互。</p><h3 id="启动与使用">启动与使用</h3><p><img src="/img/mypost/2021/1-5.jpg" alt="image"></p><p>首先机器上需要有python3的环境，或者创建一个python3的虚拟环境。</p><p>到插件仓库的跟目录</p><p>有一个依赖库的文件在 <strong>py/requirements.txt</strong></p><p>下载依赖</p><blockquote><p>pip install -r py/requirements.txt</p></blockquote><p>启动web服务</p><blockquote><p>bash <a href="http://main.sh" target="_blank" rel="external">main.sh</a> start</p></blockquote><p>或</p><blockquote><p>python py/web.py</p></blockquote><p><strong>注</strong>：main.sh中还有一些可配置操作，可用下面命令查看</p><blockquote><p>bash <a href="http://main.sh" target="_blank" rel="external">main.sh</a></p></blockquote><h3 id="受控概念">受控概念</h3><p>插件中一直穿插一个名词受控，包括受控事务，流程事务的受控运行。</p><p>这边受控表示对鼠标键盘进行控制。</p><ul><li>受控事务：录制鼠标键盘操作，控制鼠标键盘还原操作</li><li>流程事务受控运行：流程事务是由浏览器元素定义的事件，通过控制鼠标键盘来还原事件（一般运行是通过js还原事件）</li></ul><p>由于Chrome插件本身不能实现这个操作，</p><p>因此这边都由本地python来实现控制鼠标键盘。</p><p>由此受控相关的都会用到与本地进行数据交互。</p><p><strong>注</strong>：Mac中控制键鼠需要进行 <strong>安全与隐私</strong> 的配置<br>如用iTerm开的web服务，则需要配置 <strong>隐私 - 辅助功能 - 支持iTerm控制您的电脑</strong></p><h3 id="爬虫本地相关">爬虫本地相关</h3><p>具体爬虫信息可到 <a href="#%E5%B9%B6%E5%8F%91%E7%88%AC%E8%99%AB%E4%BA%8B%E5%8A%A1">并发爬虫事务</a> 查看</p><p>这边由于页面爬虫在完成数据获取之后需要将数据发出去。</p><p>这边是在web服务中开了一个数据接收的接口，</p><p>插件爬到的数据按一定的切割数量分批次进行接口发送。</p><p>web服务受到数据后，存储到本地文件，并进行整合。</p><p><strong>数据存储于 /py/crawler/</strong></p><h2 id="流程事务">流程事务</h2><p><img src="/img/mypost/2021/1-6.jpg" alt="image"></p><p>创建一个流程事务后，点击事务的名称即进入事务的详情配置页</p><p>流程事务由 <strong>多个浏览器事件</strong> 组成。</p><p>每个事件可以是如开关某页面，点击某元素，输入某值。</p><h3 id="事件详情">事件详情</h3><p><img src="/img/mypost/2021/1-7.jpg" alt="image"></p><p>一个事件包含</p><ul><li>元素：唯一选择器；</li><li>操作：点击，设值，开关页面；</li><li>等待时间：与前一个事件中间间隔的时间；</li><li>dom检查：由于一些元素是异步/延时创建的，开启dom检查则在运行前可以保证这个元素一定存在，否则自旋。</li><li>其他一些不固定选项(一些特殊事件有)</li></ul><h4 id="事件操作说明">事件操作说明</h4><p>click：点击某个元素</p><p>value：可以在一般浏览器输入框中设值（输入需要设值的值）<br>如果你需要在运行前才设值这边的输入值，可以将这边设值为${value}，则在点击运行会弹出让你输入value的值</p><p>mouseover：鼠标移动到上面事件</p><p>refresh：刷新当前页面</p><p>pagejump：当前页面跳转，需要设值页面url</p><p>newpage：打开一个新页面，需要设值页面url<br><strong>注</strong>：第一个事件如果是新开页面且选择在后台打开，这样整个事务都会在后台运行</p><p>getvalue：取页面元素的文本，取到后保留在运行参数中，可用来后续设值，也可作为爬虫的数据。（需要设值一个取到后保存的key）<br>（如取到第一个页面的元素设为 title(key)，然后打卡第二个页面，设值输入框为title值，则会用刚才设值的title）</p><p>getcustomvalue：取document结果，或js函数结果，用处同上。（需要设值两个，一个作为取值key，一个为表达式）<br>如取document.title可以取到页面的标题。</p><p>closepage：关闭当前页面</p><p>onlyshow：看板特殊事件操作，将当前页面只保留选择的元素，其他所有都隐藏。</p><p>sendmessgae: 发送消息，默认为发送系统消息，也可以走浏览器alert消息。</p><h3 id="确定唯一元素">确定唯一元素</h3><p>定义页面事件的第一步都是确定一个页面元素。</p><p>这边有多种方法，通用的为 <strong>一般选择器 + 第n个</strong> 来表述唯一元素(如 body&amp;0)</p><h4 id="添加事件">添加事件</h4><p><img src="/img/mypost/2021/1-8.jpg" alt="image"></p><p>点击添加事件，进入一般选择器配置页，可配置 <strong>标签选择器</strong> 或 <strong>自由选择器</strong></p><ul><li>标签选择器<br>选择一个标签：如body，div</li></ul><p>然后会出现一个列表，表示页面中有多少个这样的标签。（div&amp;0，div&amp;1）</p><p>鼠标移动上去后，页面会相应定位到这个元素上，并出现红色蒙版。</p><p>点击确认一个想要的元素。</p><p><img src="/img/mypost/2021/1-10.jpg" alt="image"></p><ul><li>自由选择器<br>选择了自由选择器，会出现一个输入框，可以自己输入想要的选择器，</li></ul><p>回车之后也会出现一个相同的列表，(选择器&amp;0，选择器&amp;1)</p><p>鼠标移动和点击确认同上。</p><h4 id="页面录制不推荐">页面录制（不推荐）</h4><p>点击页面录制，这边暂时只支持单页面中的 <strong>英文设值</strong> 和 <strong>点击事件</strong>的录制。</p><p>录制完成后，可以点击完成录制</p><p>事件列表页会出现已经录制的所有事件。</p><h4 id="页面添加事件推荐使用">页面添加事件（推荐使用）</h4><p><img src="/img/mypost/2021/1-9.jpg" alt="image"></p><p>打开一个页面，点击页面添加事件。</p><p>然后在鼠标移回页面可以看到在移动到每个元素上时，都会出现一个粉色边框。</p><p>单机之后，会出现一个列表，表示当前最子元素，和其父元素，一直到跟元素。</p><p>点击选择一个想要的元素选择器</p><p>进入事件配置页，进行事件的配置。</p><h3 id="运行说明">运行说明</h3><p><img src="/img/mypost/2021/1-11.jpg" alt="image"></p><p>流程事务包含：运行，定时运行，受控运行，轮播 四种模式</p><h4 id="运行">运行</h4><p>采用后台运行模式，使用js和chrome接口还原事件。</p><p>可直接点击运行，无其他依赖。</p><h4 id="定时运行">定时运行</h4><p><img src="/img/mypost/2021/1-12.jpg" alt="image"></p><p>配置模式分两种：每日hh:mm，每隔n分钟</p><p>如写 15:00 表示每日15点运行一次。</p><p>写 5m 则表示每5分钟运行一次。</p><p>运行按当天开始算。</p><p>运行具体会有一些时间上的出入。</p><p>运行可以配置失败重试。（失败重试有多次运行的风险）</p><h4 id="受控运行">受控运行</h4><p>采用控制本地鼠标键盘还原事件。（事件操作为 点击，设值）</p><p>需依赖本地web服务开启。</p><h4 id="轮播">轮播</h4><p>运行完一次后直接进行下一次运行。</p><h2 id="并发爬虫事务">并发爬虫事务</h2><p><img src="/img/mypost/2021/1-13.jpg" alt="image"></p><p>顾名思义这个事务要做的事情就是页面级的爬虫，适合爬一些小批量数据，同时可以突破一些反扒限制(因为就和人打开没啥区别)</p><p>这边对于爬虫配置的抽象为：</p><ul><li>一批需要爬的地址：可以自己填，批量填，或接口获取；</li><li>每个页面中需要爬的信息配置：配置一个流程事务，getvalue等的作为爬取数据事件；</li><li>并发量配置：这边使用iframe实现；</li><li>是否后台运行配置：后台运行则是新开chrome，并最小化的运行；</li><li>发送数据/保存数据：可发送到本地接收，或就存在插件信息存储中；</li></ul><h3 id="配置爬虫">配置爬虫</h3><p>点击爬虫事务的名称，进入爬虫配置页</p><h4 id="url配置">url配置</h4><p>两种配置方式</p><p>可自行配置地址，一行一个，<br>也可直接配置成批量模式，如下的地址，则表示pn=0 到 pn=10的是个页面<br><a href="https://www.baidu.com/s?wd=test&amp;pn=%7B0-10%7D" target="_blank" rel="external">https://www.baidu.com/s?wd=test&amp;pn={0-10}</a></p><p>可从接口获取<br>在本地web服务这边写了一个demo。具体外部接口获取地址需要自行实现一个接口。</p><p>接口调用时返回地址，如果没有了则返回空即可。</p><p>兼容场景如地址上带有一些时间戳，加密字符等特殊符号</p><h4 id="爬取数据配置">爬取数据配置</h4><p>类似于配置流程事务，先通过一个方式选择一个唯一元素选择器。</p><p>然后配置事件操作，延时，dom检查等。</p><p>这边一般用getvalue，getcustomvalue事件操作。</p><p>（一般可以设置延时为0，开启dom检查）</p><h4 id="其他">其他</h4><p>后台运行：不开启使用当前浏览器开一个新tab来爬取数据，<br>开启后使用新开一个chrome，并最小化来运行，并在结束后关闭。</p><p>定时运行：同上流程事务定时运行</p><h2 id="源码事务">源码事务</h2><p><img src="/img/mypost/2021/1-14.jpg" alt="image"></p><p>提供源码注入的基本实现。</p><p>注：代码中可以获取document，但不能获取原页面中的js变量。</p><p>另附可以自定义在哪些页面注入。</p><p>同时也支持运行，定时运行，开启注入。</p><h3 id="配置事务">配置事务</h3><p>点击事务名称进入配置页，</p><p>首先选择注入的 <strong>匹配地址</strong>，默认为全地址。</p><p>然后<strong>写要注入的代码</strong>，可以使用jquery。</p><p>保存后，<strong>开启注入</strong>则是生效。</p><h2 id="受控事务">受控事务</h2><p><img src="/img/mypost/2021/1-15.jpg" alt="image"></p><p>实现了鼠标键盘的录制和还原。</p><p>由本地python实现，插件提供数据交互。</p><h3 id="配置事务">配置事务</h3><p>点击事务名称，进入配置页</p><p>首先配置要打开的网页。</p><p>点击 <strong>录制操作</strong>，进入录制</p><p>录制完，键盘按esc结束录制</p><p>点击 <strong>受控运行</strong> 则是回放刚刚的录制</p><h2 id="我的看板">我的看板</h2><p><img src="/img/mypost/2021/1-16.jpg" alt="image"></p><p>我的看板这边默认覆盖使用的是浏览器的新tab页。</p><p>当然也可以主动关闭，使用命令</p><blockquote><p>bash <a href="http://main.sh" target="_blank" rel="external">main.sh</a> close_dashboard</p></blockquote><p>要在开启的话</p><blockquote><p>bash <a href="http://main.sh" target="_blank" rel="external">main.sh</a> close_dashboard</p></blockquote><p>目前看板包含两种内容：</p><ul><li>单独一个页面元素的展示；</li><li>爬虫数据表格的展示；</li></ul><p>添加页面元素到看板，实际使用的是流程事务，<br>条件则为 事务的第一个事件为 <strong>当前页跳转</strong>， 最后一个事件为 <strong>元素唯一展示</strong></p><p>符合条件的在主页会出现添加到看板选项。</p><p>并发爬虫事务也有一个操作是添加看板，点击则可以将爬到的数据到看板以表格展示。</p><h3 id="看板操作与排版">看板操作与排版</h3><p><img src="/img/mypost/2021/1-18.jpg" alt="image"></p><p>将鼠标移动到看板中间的最上面，会出现排版，重置操作</p><p>点击排版，每块元素都会变成绿色，可以调整大小与位置，或者点击删除</p><p>调整完后点击保存按钮可以保存。</p><p>点击重置则会还原到最初的位置与大小。</p><h3 id="简单看板模式">简单看板模式</h3><p><img src="/img/mypost/2021/1-17.jpg" alt="image"></p><p>在主页点击开关开启，开启简单看板模式后，就不可以自己配置事务。</p><p>点击页面添加看板，就可以到页面中选择元素。</p><p>同上粉色边框展示选中元素。</p><p>点击确认后，选择一个选择器。</p><p>选择器列表还是从 最子元素，往上的所有父元素。</p><p>已到选择器上会出现红色蒙版。</p><p>在点击后，则会出现确认添加到看板，</p><p>确认则可以直接将这个元素添加到看板。</p><p>同时也会生成一个流程事务（只是看不到）</p><h1 id="演示用例">演示用例</h1><p>复制下面的json字符串，走导入事务的流程即可</p><h3 id="基本操作">基本操作</h3><p>实现效果：打开百度，设置搜索为天气，点击搜索</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"基本操作"</span>,<span class="attr">"case_process"</span>:[&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"newpage"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=test"</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"value"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#kw"</span>,<span class="attr">"value"</span>:<span class="string">"天气"</span>,<span class="attr">"wait"</span>:<span class="string">"2"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#su"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"process"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="取值事件">取值事件</h3><p>实现效果：打开我的博客主页，获取标题，打开百度，搜索获取到的标题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"取值事件用例"</span>,<span class="attr">"case_process"</span>:[&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"newpage"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"http://blog.ganjiacheng.cn/"</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"getvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"HTML.macos.desktop.landscape &gt; BODY &gt; NAV.navbar.navbar-default.navbar-custom.navbar-fixed-top &gt; DIV.container-fluid &gt; DIV.navbar-header.page-scroll &gt; A.navbar-brand"</span>,<span class="attr">"value"</span>:<span class="string">"title"</span>,<span class="attr">"wait"</span>:<span class="string">"3"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"pagejump"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=test"</span>,<span class="attr">"wait"</span>:<span class="string">"2"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"value"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#kw"</span>,<span class="attr">"value"</span>:<span class="string">"title"</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#su"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"process"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="百度去广告源码事务">百度去广告(源码事务)</h3><p>实现效果：百度去广告</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"百度去广告"</span>,<span class="attr">"case_process"</span>:[],<span class="attr">"case_sourcecode"</span>:<span class="string">"Array.from(\n            document.querySelectorAll('#content_left&gt;div'))\n            .forEach(el =&gt; \n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\n        );\nsetInterval(() =&gt; &#123;\n    try&#123;\n        Array.from(\n            document.querySelectorAll('#content_left&gt;div'))\n            .forEach(el =&gt; \n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\n        )\n    &#125; catch(e)&#123;&#125;\n&#125;, 1000)\n"</span>,<span class="attr">"case_type"</span>:<span class="string">"sourcecode"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">"baidu.com.*"</span>,<span class="attr">"start_inject"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="定时喝水源码事务">定时喝水(源码事务)</h3><p>实现效果：每60分钟发出alert提醒喝水</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"定时喝水"</span>,<span class="attr">"case_process"</span>:[],<span class="attr">"case_sourcecode"</span>:<span class="string">"alert(\"你该喝水咯\")"</span>,<span class="attr">"case_type"</span>:<span class="string">"sourcecode"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"last_runtime"</span>:<span class="number">1599706892179</span>,<span class="attr">"runtime"</span>:<span class="string">"60m"</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="值选择器用例">值选择器用例</h3><p>实现效果：div{xx}可以选择值为xx的div标签，适用于页面元素匹配的补充</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"值选择器用例"</span>,<span class="attr">"case_process"</span>:[&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"newpage"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"http://blog.ganjiacheng.cn/"</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"a&#123;About&#125;"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"2"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"a&#123;Archives&#125;"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"2"</span>&#125;,&#123;<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"a&#123;Home&#125;"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"2"</span>&#125;],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"process"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="并发爬虫事务用例爬取百度搜索前10页的每页前三条结果">并发爬虫事务用例(爬取百度搜索前10页的每页前三条结果)</h3><p>实现效果：爬取百度搜索test前10页的前三条标题</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"爬虫用例"</span>,<span class="attr">"case_process"</span>:[],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"paral_crawler"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"paral_crawler"</span>:&#123;<span class="attr">"api"</span>:<span class="string">"http://127.0.0.1:12580/crawler/"</span>,<span class="attr">"apicb"</span>:<span class="literal">false</span>,<span class="attr">"cc"</span>:<span class="number">5</span>,<span class="attr">"data"</span>:[],<span class="attr">"fetch"</span>:[&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">"new Date()"</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"getcustomvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"时间"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"getvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"h3"</span>,<span class="attr">"value"</span>:<span class="string">"标题1"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"1"</span>,<span class="attr">"opera"</span>:<span class="string">"getvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"h3"</span>,<span class="attr">"value"</span>:<span class="string">"标题2"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"2"</span>,<span class="attr">"opera"</span>:<span class="string">"getvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"h3"</span>,<span class="attr">"value"</span>:<span class="string">"标题3"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;],<span class="attr">"freq"</span>:<span class="number">1</span>,<span class="attr">"send"</span>:<span class="literal">false</span>,<span class="attr">"urlapi"</span>:<span class="string">"http://127.0.0.1:12580/crawler/url/"</span>,<span class="attr">"urls"</span>:[<span class="string">"https://www.baidu.com/s?wd=test&amp;pn=&#123;0-10&#125;0"</span>]&#125;,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="后台运行流程事务-消息通知用例">后台运行流程事务 + 消息通知用例</h3><p>实现效果：流程事务在后台运行，打开百度，搜索天气，点击搜搜，获取到天气的框中的值，发送系统消息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"case_name"</span>:<span class="string">"后台运行+消息发送"</span>,<span class="attr">"case_process"</span>:[&#123;<span class="attr">"bgopen"</span>:<span class="literal">true</span>,<span class="attr">"check"</span>:<span class="literal">false</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"newpage"</span>,<span class="attr">"sysmsg"</span>:<span class="literal">false</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=test"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"value"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#kw"</span>,<span class="attr">"value"</span>:<span class="string">"天气"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"click"</span>,<span class="attr">"tag"</span>:<span class="string">"INPUT#su"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"bgopen"</span>:<span class="literal">false</span>,<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"getvalue"</span>,<span class="attr">"tag"</span>:<span class="string">"DIV#content_left &gt; DIV.result-op.c-container.xpath-log &gt; DIV.op_weather4_twoicon_container_div &gt; DIV.op_weather4_twoicon &gt; A.op_weather4_twoicon_today.OP_LOG_LINK"</span>,<span class="attr">"value"</span>:<span class="string">"key"</span>,<span class="attr">"wait"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"bgopen"</span>:<span class="literal">false</span>,<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"sendmessage"</span>,<span class="attr">"sysmsg"</span>:<span class="literal">true</span>,<span class="attr">"tag"</span>:<span class="string">"DIV#wrapper_wrapper"</span>,<span class="attr">"value"</span>:<span class="string">"天气：$&#123;key&#125;"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"process"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"fail_rerun"</span>:<span class="literal">false</span>,<span class="attr">"last_runtime"</span>:<span class="number">1611820796375</span>,<span class="attr">"runtime"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原博客迁移与复原（2017-2018）</title>
      <link href="article/2021/article_2_%E5%8E%9F%E5%8D%9A%E5%AE%A2%E5%A4%A7%E8%BF%81%E7%A7%BB2017-2018/"/>
      <url>article/2021/article_2_%E5%8E%9F%E5%8D%9A%E5%AE%A2%E5%A4%A7%E8%BF%81%E7%A7%BB2017-2018/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>找回了2017-2018年写的所有东西。<a href="/archive/">快速跳转</a></p><p>是之前学生时代写的项目与代码，回想很多经历，也感慨万千。</p><h2 id="sql源文件-到-json">SQL源文件 到 JSON</h2><p>最近在离职阶段，在整理文件时突然发现了原来博客的源文件（一直以为找不到了）</p><p>之前博客是使用的wordpress，使用了一个服务器，搭了php环境，数据则存储在mysql。</p><p>这次找回的是sql导出文件。</p><p>然后本地起了一个docker的mysql服务，</p><p>分析了下其中的sql，找到了wordpress文章对应的表xxx_posts</p><p>然后使用navicat导出这个表成json的kv格式，便于后续处理。</p><h2 id="从-wordpress-到-hexo">从 wordpress 到 hexo</h2><p>因为原来的wordpress使用的html来存储文章。</p><p>hexo这边支持markdown格式，但同时对html标签也能兼容</p><p>先写一个python脚本，读取一下上面的json文件，过滤非publish的文章。</p><p>然后取出 post_date , post_title , post_content 信息。</p><p>转为下面这样的markdown文件到 source/_posts 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">catalog: true</span><br><span class="line">date: 日期</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">内容</span><br></pre></td></tr></table></figure><h2 id="处理hexo格式错误">处理hexo格式错误</h2><p>由于hexo将 { { ， } } ， { #作为关键字</p><p>会导致hexo s启动时候报错</p><p>因此在这两个关键字中间加个空格，就可以临时处理掉这个问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL中关于统计某列最新不同值的方法</title>
      <link href="article/2020/article_35_sql%E4%B8%AD%E5%85%B3%E4%BA%8E%E7%BB%9F%E8%AE%A1%E6%9F%90%E5%88%97%E6%9C%80%E6%96%B0%E4%B8%8D%E5%90%8C%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>article/2020/article_35_sql%E4%B8%AD%E5%85%B3%E4%BA%8E%E7%BB%9F%E8%AE%A1%E6%9F%90%E5%88%97%E6%9C%80%E6%96%B0%E4%B8%8D%E5%90%8C%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这边来看一个sql中统计某列最新不同值的方法。<br>直接说上面这个比较难以理解，具体场景举例如：</p><ul><li>用户访问记录表，统计最近访问的不同的n个用户</li><li>操作记录表，统计最近不同的n个操作</li></ul><p>看似简单实际上只通过简单的一层sql无法实现。</p><p>这边用实操演示，三种可用的实现方式。</p><h2 id="实操">实操</h2><p>这边来实际操作下，为了方便这边用MYSQL为例</p><h3 id="准备数据">准备数据</h3><p>这个表表示用户资源访问记录表，其中有主键id，用户id，资源id，访问时间。<br>用户每访问一次资源则记录加一条。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`user_resource_history`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'id'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">    <span class="string">`resource_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'资源id'</span>,</span><br><span class="line">    <span class="string">`date_created`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span> <span class="string">'用户资源访问记录表'</span>;</span><br></pre></td></tr></table></figure><p>导入一些数据，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'2020-12-24 02:03:17'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'2020-12-25 02:03:41'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">'2020-12-26 02:04:30'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="string">'2020-12-27 02:04:35'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'2020-12-29 02:04:41'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'2020-12-30 02:05:39'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'2020-12-30 02:05:47'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">'2020-12-30 02:07:53'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_resource_history (<span class="keyword">id</span>, user_id, resource_id, date_created) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="string">'2020-12-30 02:12:58'</span>);</span><br></pre></td></tr></table></figure><p>大致数据为<br><img src="/img/mypost/article35_1.jpg" alt="jpg"></p><h3 id="目标">目标</h3><p><strong>统计用户1的最近访问的3个不同资源和访问时间</strong></p><h3 id="分析思路">分析思路</h3><p>首先考虑select的where过滤user_id=1，</p><p>然后因为是3个不同资源，得按资源分组，得到类似于下面的kv结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    资源id: [这个资源的所有访问时间]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后从时间数组中挑选出最近的时间。就得到如下表：</p><table><thead><tr><th>资源id</th><th style="text-align:center">最近访问时间</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">2020-12-31 02:12:58</td></tr></tbody></table><p>最后再按最近访问时间倒排序即可得到 ：用户1的最近访问的3个不同资源和访问时间</p><h3 id="mysql实现">MYSQL实现</h3><p>再具体实现过程中，因为不存在数组这个，所以略有不同。</p><h4 id="第一种实现">第一种实现</h4><p>第一种通过rank()函数实现，这个得在Mysql8.0才有这个函数<br>它的语法是如下，这个意思就是按这个分区字段分类，按排序字段排序，产生一个排名字段rk</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rank() over (</span><br><span class="line">    partition by 分区字段</span><br><span class="line">    order by 排序字段 desc</span><br><span class="line">) as rk</span><br></pre></td></tr></table></figure><p>整体实现如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外层筛选排名为第一名的数据，表示不同资源最近一条</span></span><br><span class="line"><span class="keyword">select</span> resource_id, date_created <span class="keyword">from</span> (</span><br><span class="line">    <span class="comment">-- 筛选用户，根据时间倒排序，</span></span><br><span class="line">    <span class="comment">-- 然后加一列排名</span></span><br><span class="line">    <span class="comment">-- 根据资源id分区（每个资源都有自己的排名，1-n），</span></span><br><span class="line">    <span class="comment">-- 时间倒排排名（最近时间排名为1，后面往上加））</span></span><br><span class="line">    <span class="keyword">select</span> resource_id,</span><br><span class="line">            date_created,</span><br><span class="line">            <span class="keyword">rank</span>() <span class="keyword">over</span> (</span><br><span class="line">                <span class="keyword">partition</span> <span class="keyword">by</span> resource_id</span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span> date_created <span class="keyword">desc</span></span><br><span class="line">                ) <span class="keyword">as</span> rk</span><br><span class="line">    <span class="keyword">from</span> user_resource_history</span><br><span class="line">    <span class="keyword">where</span> user_id = <span class="number">1</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> date_created <span class="keyword">desc</span></span><br><span class="line">) t1 <span class="keyword">where</span> t1.rk = <span class="number">1</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="第二种实现">第二种实现</h4><p>因为在mysql5.x中都不能用rank函数，所有这边有另一种奇妙的实现，</p><p>整体还是实现上面的排名，通过case when的方式。</p><p>sql如下：</p><p>首先将原表按照resource_id，date_created排序，这样就可以将同样的resource_id归到一起，且按照时间倒序。</p><p>然后增加一列排名，排名的实现：</p><p>先定义两个变量，这边是curRank，preRank<br>curRank这边表示的是上一个资源id，<br>preRank表示的是排名</p><p>当从上往下遍历时，当preBank = resource_id时，curRank赋值为1，（表示每个新资源排名从1开始）<br>当preRank != resource_id时，curRank += 1，  （同一个资源内，每次排名自增）</p><p>产生排名后外层筛选排名为1的，再重新按时间进行倒排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> resource_id, date_created <span class="keyword">from</span> (</span><br><span class="line">   <span class="keyword">select</span> resource_id,</span><br><span class="line">          date_created,</span><br><span class="line">          <span class="keyword">case</span></span><br><span class="line">              <span class="keyword">when</span> @preRank = resource_id <span class="keyword">then</span> @curRank := @curRank + <span class="number">1</span></span><br><span class="line">              <span class="keyword">when</span> @preRank := resource_id <span class="keyword">then</span> @curRank := <span class="number">1</span></span><br><span class="line">              <span class="keyword">end</span> <span class="keyword">as</span> rk</span><br><span class="line">   <span class="keyword">from</span> (</span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">id</span>, resource_id, date_created <span class="keyword">from</span> user_resource_history</span><br><span class="line">            <span class="keyword">where</span> user_id = <span class="number">1</span></span><br><span class="line">            <span class="keyword">order</span> <span class="keyword">by</span> resource_id, date_created <span class="keyword">desc</span></span><br><span class="line">        ) t1,</span><br><span class="line">        (<span class="keyword">select</span> @curRank := <span class="number">0</span>, @preRank := <span class="literal">null</span>) t2</span><br><span class="line">) t3 <span class="keyword">where</span> rk=<span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> date_created <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="第三种实现">第三种实现</h4><p>这个实现需要建的时候按有自增id主键的建表，<br>且时间是按数据库自增的，这样id的最大值表示的就是最新时间。</p><p>首先按照资源id聚合，查看的是max(id)，因为最大id行就表示该资源最近时间行。得到一批id</p><p>然后在用in这批id则可以得到每个资源最近时间的表，在按时间倒排序一下，</p><p>就可以得到结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> resource_id, date_created</span><br><span class="line"><span class="keyword">from</span> user_resource_history</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>)</span><br><span class="line">    <span class="keyword">from</span> user_resource_history</span><br><span class="line">    <span class="keyword">where</span> user_id = <span class="number">1</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> resource_id</span><br><span class="line">) <span class="keyword">order</span> <span class="keyword">by</span> date_created <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="时间测试估计">时间测试估计</h3><p>由于这边测试数据比较少，<br>大致结果为第一种40ms，第二种70ms，第三种40ms</p><p>三种中，第二种总体比较慢，因为多层一次子查询。</p><h3 id="其他想法">其他想法</h3><p>当然在真实前提场景可变的情况下，可以直接另建一张表，表示用户最近访问不同资源表。</p><p>每次访问资源时，除了更新记录表，也可以更新用户最近访问资源表。</p><p>或者定时将记录表更新至最近访问资源表。</p><h2 id="最后">最后</h2><p>sql还是有学习空间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient的Cookie策略引发的隐藏bug定位与修复</title>
      <link href="article/2020/article_34_httpClient%E7%9A%84cookie%E7%AD%96%E7%95%A5%E5%BC%95%E5%8F%91%E7%9A%84%E9%9A%90%E8%97%8Fbug%E5%AE%9A%E4%BD%8D/"/>
      <url>article/2020/article_34_httpClient%E7%9A%84cookie%E7%AD%96%E7%95%A5%E5%BC%95%E5%8F%91%E7%9A%84%E9%9A%90%E8%97%8Fbug%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>本文记录一次大概历时半年也没排查出来，时有时无的隐藏bug。<br>大致现象是：<strong>一个用户能访问到别人权限的资源(用户串/权限串)</strong>。<br>中间考虑过线程不安全，包的问题，Threadlocal没清除并线程复用导致等，<br>最终还是排查到是Httpclient的连接池的Cookie策略。<br>这个点在开发时特别容易被人忽略。</p><h2 id="场景还原">场景还原</h2><h3 id="背景说明">背景说明</h3><p>首先大致说下这问题和中间涉及的系统</p><p>如下有一个业务系统，<br>他依赖用户系统提供用户信息，权限系统提供权限信息<br><img src="/img/mypost/article34_1.jpg" alt="jpg"></p><p>如下是主要流程，当访问接口时，业务系统的拦截器会去用户系统校验登录，<br>将用户信息和cookie保存到threadlocal中，<br>当也需要权限信息时，则将保存的cookie取出来去调用权限系统，获取这个用户的权限信息。</p><p><img src="/img/mypost/article34_2.jpg" alt="jpg"></p><h3 id="主要问题">主要问题</h3><p>问题就出现在这中间 ：<br><strong>进入用户系统的是用户A，但当他访问权限系统返回的权限却是用户B的</strong><br><strong>且此问题不可稳定复现，出现概率不高</strong></p><h2 id="排查过程">排查过程</h2><h3 id="线程不安全问题">线程不安全问题</h3><p>由于这边Springboot的Bean用的是单例模式，<br>所以如果一个类定义了一个Hashmap的属性，多个线程之间存取就会出现串的问题</p><p>考虑如有部分权限信息存在Hashmap，导致多线程之间取到了他人的。</p><p>这个在 review了代码 和 打印了日志 后基本可以排除掉。</p><h3 id="threadlocal没清除">Threadlocal没清除</h3><p>由于Tomcat管理线程池会复用线程，也就是你的线程在这次请求用了以后，下次还会被别的请求用到，</p><p>如果没有清除Threadlocal的话，下次请求中还会保留着你的信息。</p><p>这个在经过业务排查之后，</p><p>可以确定在出错的场景下的请求也都会走用户校验将Threadlocal的value重新set一遍，</p><p>因为被覆盖了，就不会存在用了上一个未清除的线程的信息。<br>（虽然remove确实是该加的，但并不是导致这个问题真正原因）</p><h3 id="问题收紧">问题收紧</h3><p>通过加日志看输入输出，最后将问题收缩到一个函数里，</p><p>如下代码，在打印请求头的时候还可以看到是用户A的cookie，但打印返回却是用户B的权限信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求头</span></span><br><span class="line">List&lt;Header&gt; headers = getHeaders();</span><br><span class="line"><span class="comment">// 打印头</span></span><br><span class="line">logger.info(JSONObject.toJSONString(headers));</span><br><span class="line"><span class="comment">// 调用权限系统</span></span><br><span class="line">String resp = HttpUtils.sendPostRequest(<span class="string">"权限系统接口"</span>, headers);</span><br><span class="line"><span class="comment">// 打印返回</span></span><br><span class="line">logger.info(resp);</span><br></pre></td></tr></table></figure><p>所以最后是考虑原本最不会出问题的发送请求的util出了问题。<br>（原本想一个util总不会保留啥东西吧，不就是每次封装新的header请求嘛）</p><p>不看不知道，一看还挺有东西。</p><h3 id="最终定位">最终定位</h3><p>看下边的代码，则是HttpUtil的一部分，定义了一个多线程的http连接管理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// httpclient定义 用的是org.apache.commons.httpclient</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpClient httpClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个多线程的管理器，</span></span><br><span class="line">    <span class="comment">// 可以设置最大连接，超时等</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        MultiThreadedHttpConnectionManager connectionManager = <span class="keyword">new</span> MultiThreadedHttpConnectionManager();</span><br><span class="line">        httpClient = <span class="keyword">new</span> HttpClient(connectionManager);</span><br><span class="line">        httpClient.getHttpConnectionManager().getParams().setMaxTotalConnections(MAX_CONN);</span><br><span class="line">        httpClient.getHttpConnectionManager().getParams().setSoTimeout(MAX_TIME_OUT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个想必基本就会想到这个错误大概是怎么发生的了。</p><p>如下图，httpclient中有两个线程C和D，<br>C处理了用户A的登录，确处理了用户B的权限<br>D处理了用户B的登录，确处理用户A的权限<br>由此导致了开头的问题。</p><p><img src="/img/mypost/article34_3.jpg" alt="jpg"></p><h2 id="真正原因与解决">真正原因与解决</h2><p>经过一定上面的排查已经确定了问题出现的地方为<br><strong>httpclient的多线程管理中保留了上次请求留下的cookie，并在下次请求时默认带上了。<br>由于这个多线程并与tomcat管理的处理http请求的多线程独立管理，所以存在交叉的情况。</strong></p><p>这边要解决他则需要httpclient不保留cookie即可，每次使用外部带进去的cookie</p><p>看了下httpclient可配置的参数，在</p><blockquote><p>org.apache.commons.httpclient.params.HttpMethodParams</p></blockquote><p>有一个CookiePolicy</p><blockquote><p>org.apache.commons.httpclient.cookie.CookiePolicy</p></blockquote><p>稍微看下可以发现他可配的一些cookie策略。<br>这边default是RFC2109</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    CookiePolicy.registerCookieSpec(DEFAULT, RFC2109Spec.class);</span><br><span class="line">    CookiePolicy.registerCookieSpec(RFC_2109, RFC2109Spec.class);</span><br><span class="line">    CookiePolicy.registerCookieSpec(RFC_2965, RFC2965Spec.class);</span><br><span class="line">    CookiePolicy.registerCookieSpec(BROWSER_COMPATIBILITY, CookieSpecBase.class);</span><br><span class="line">    CookiePolicy.registerCookieSpec(NETSCAPE, NetscapeDraftSpec.class);</span><br><span class="line">    CookiePolicy.registerCookieSpec(IGNORE_COOKIES, IgnoreCookiesSpec.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜了下RFC2109这个是个什么鬼</p><p>它是个http状态管理协议，具体可以到这看<a href="https://datatracker.ietf.org/doc/rfc2109/" target="_blank" rel="external">https://datatracker.ietf.org/doc/rfc2109/</a></p><p>这边引用他摘要的一段话</p><blockquote><p>This document specifies a way to create a stateful session with HTTP<br>requests and responses.  It describes two new headers, Cookie and<br>Set-Cookie, which carry state information between participating<br>origin servers and user agents.</p></blockquote><p>就是它用cookie来管理一个有状态的会话。</p><p><strong>所以在一个httpclient线程访问登录接口，因为在response header中有set-cookie，它将这个cookie当做一个会话保留了下来。<br>然后线程并没有销毁被其他请求复用，被理解为还是同一个会话，则外部传入的header并没有被应用上。</strong></p><h3 id="修复">修复</h3><p>修复十分方便，只要将这个cookie策略改为IGNORE_COOKIES即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);</span><br></pre></td></tr></table></figure><h2 id="一句话">一句话</h2><p>最致命的问题总在就在你觉得不可能有问题的地方。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网页可视化圈选的一些实现思路</title>
      <link href="article/2020/article_33_%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9C%88%E9%80%89%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
      <url>article/2020/article_33_%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9C%88%E9%80%89%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>可视化圈选是一个较为特别的场景，一般在定义页面事件与埋点的时候用的比较多，<br>这边来讨论下网页中可视化圈选的实现思路。<br>体验的话可以到插件<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">WEB-ROBOT</a></p><p>效果：<br><img src="/img/mypost/robot_demo1.gif" alt="demo"></p><h2 id="概览">概览</h2><p>完成可视化圈选大致分为以下几个步骤</p><ul><li>捕获鼠标移动事件</li><li>给出当前元素的可视化反馈</li><li>点击选中元素</li><li>转换当前元素的唯一选择器</li></ul><p>这边实现大致不同点为，选择器是当前元素和所有父节点元素。<br>最后还需另外选择一下想要的元素。<br>好处是多了一些会漏掉节点，上面的只能是默认最子节点。</p><h2 id="实现">实现</h2><h3 id="事件捕获">事件捕获</h3><p>首先确定要重写的监听事件为 mouseover(鼠标移到元素上)，click(点击元素);</p><p>在移动的时候，target为当前元素，需要有一个样式变化。<br>同时需要之前的元素样式给去掉。</p><p>然后在点击的时候则需要获取到当前元素和他所有父元素的筛选器。<br>表示已经选中了该字段</p><p>下面通过代码来解释<br>也可以直接将这部分代码跑在浏览器console中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接选择dom，圈选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">direct_select_dom</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last_dom; <span class="comment">// 上个元素 </span></span><br><span class="line">    <span class="keyword">let</span> last_dom_border;  <span class="comment">// 记录之前的一些css样式</span></span><br><span class="line">    <span class="keyword">let</span> last_dom_boxshadow;</span><br><span class="line">    <span class="keyword">let</span> last_dom_zindex;</span><br><span class="line">    <span class="comment">// 监听鼠标移入</span></span><br><span class="line">    <span class="built_in">document</span>.onmouseover = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 阻止事件冒泡和阻止默认事件</span></span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">if</span> (e.target.id === <span class="string">"robot_frame"</span> || e.target.id === <span class="string">"robot_select"</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 存一下样式</span></span><br><span class="line">        <span class="keyword">let</span> tmp = e.target.style.border;</span><br><span class="line">        <span class="keyword">let</span> tmp1 = e.target.style.boxShadow;</span><br><span class="line">        <span class="keyword">let</span> tmp2 = e.target.style.zIndex;</span><br><span class="line">        <span class="comment">// 当前选中的元素设置为选中样式</span></span><br><span class="line">        e.target.style.border = <span class="string">"solid 2px #ffa3a3"</span>;</span><br><span class="line">        e.target.style.boxShadow = <span class="string">"0px 0px 8px 8px #ffa3a3"</span>;</span><br><span class="line">        e.target.style.zIndex = <span class="number">999</span>;</span><br><span class="line">        <span class="comment">// 将老元素样式还原</span></span><br><span class="line">        <span class="keyword">if</span> (last_dom !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            last_dom.style.border = last_dom_border;</span><br><span class="line">            last_dom.style.boxShadow = last_dom_boxshadow;</span><br><span class="line">            last_dom.style.zIndex = last_dom_zindex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前元素设为老元素</span></span><br><span class="line">        last_dom = e.target;</span><br><span class="line">        last_dom_border = tmp;</span><br><span class="line">        last_dom_boxshadow = tmp1;</span><br><span class="line">        last_dom_zindex = tmp2;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 重写点击事件</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(</span><br><span class="line">        <span class="string">"click"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 阻止原事件和事件冒泡</span></span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            <span class="comment">// 这边为获取这个元素和他父元素的所有的选择器</span></span><br><span class="line">            <span class="keyword">let</span> dom = e.target;</span><br><span class="line">            <span class="keyword">let</span> selectors = [];</span><br><span class="line">            <span class="keyword">while</span> (dom.parentElement.parentElement) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dom.clientWidth &gt; <span class="number">0</span> &amp;&amp; dom.clientHeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过dom转选择器的转换函数</span></span><br><span class="line">                    <span class="keyword">let</span> selector = dom_to_selector(<span class="built_in">document</span>, dom)</span><br><span class="line">                    selectors.push(<span class="string">`<span class="subst">$&#123;selector[<span class="number">0</span>]&#125;</span>&amp;<span class="subst">$&#123;selector[<span class="number">1</span>]&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 遍历所有父节点</span></span><br><span class="line">                dom = dom.parentElement;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 回调</span></span><br><span class="line">            cb &amp;&amp; cb(selectors, e);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 关键，在事件捕获阶段就执行，而不是冒泡阶段</span></span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dom转selector">dom转selector</h3><p>这个在baidu基本搜不到这个话题，在google有一些。<br>这边大致说几个实现</p><h4 id="当前节点遍历">当前节点遍历</h4><p>这个是最初的思路为，</p><p>对一个dom的选择器来说，id优先，class次之，最后是tag</p><p>首先以这些为选择器进行querySelectorAll操作，得到一批符合的节点，然后在遍历选择得到当前相等的节点。</p><p>结构模式为</p><blockquote><p>#id / .class / tag</p></blockquote><blockquote><p>document.querySelectorAll(selector)[n]</p></blockquote><p>优点是获取方便，<br>但特别依赖dom有唯一id或者class，<br>在tag的时候选择器很容易变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_selector</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> selector;</span><br><span class="line">    <span class="keyword">if</span> (dom.id) &#123;</span><br><span class="line">        selector = <span class="string">`<span class="subst">$&#123;dom.nodeName&#125;</span>[id="<span class="subst">$&#123;dom.id&#125;</span>"]`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dom.class) &#123;</span><br><span class="line">        selector = <span class="string">`<span class="subst">$&#123;dom.nodeName&#125;</span>[class="<span class="subst">$&#123;dom.className&#125;</span>"]`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        selector = <span class="string">`<span class="subst">$&#123;dom.nodeName&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nodelist = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> nodelist) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodelist[i] === dom) &#123;</span><br><span class="line">            <span class="keyword">return</span> [selector, i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历父节点使用nth-child">遍历父节点使用nth-child</h4><p>这个的思路为先得到这个节点在他父节点的第几个节点，<br>然后父节点继续向上递归，直到body或html节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_selector</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    names = [];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> cursorElement = el;</span><br><span class="line">        <span class="keyword">while</span> (cursorElement !== <span class="literal">null</span>) &#123;</span><br><span class="line">            ++index;</span><br><span class="line">            cursorElement = cursorElement.previousElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        names.unshift(el.tagName + <span class="string">":nth-child("</span> + index + <span class="string">")"</span>);</span><br><span class="line">        el = el.parentElement;</span><br><span class="line">    &#125; <span class="keyword">while</span> (el !== <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> names.join(<span class="string">" &gt; "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构模式为</p><blockquote><p>HTML:nth-child(1) &gt; BODY:nth-child(2) &gt; DIV:nth-child(1)</p></blockquote><blockquote><p>document.querySelectorAll(selector)</p></blockquote><h4 id="结合优化版">结合优化版</h4><p>首先还是确定当前节点的选择定位，</p><p>如果是id，则可以确定他是全局唯一的，直接使用，</p><p>如果是class或者tag，则将这个作为他在父节点中的选择器，（替换上面的nth-child）</p><p>递归他的父节点，直到body</p><p>最后再在全局使用上面的选择器确定他是第几个</p><p>这样做优化点与第一个比走了递归父节点的模式，可以在tag和class时更加精确。<br>与第二个比加入了id直接确定的模式，也改进了使用nth-child在动态数据节点不精确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dom_to_selector</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> names = [];</span><br><span class="line">    <span class="keyword">let</span> dombak = dom;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dom || !dom.parentElement) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 有id就直接用id</span></span><br><span class="line">        <span class="keyword">if</span> (dom.id &amp;&amp; <span class="built_in">isNaN</span>(<span class="built_in">Number</span>(dom.id[<span class="number">0</span>]))) &#123;</span><br><span class="line">            names.unshift(<span class="string">`<span class="subst">$&#123;dom.tagName&#125;</span>#<span class="subst">$&#123;dom.id&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp;</span><br><span class="line">            <span class="keyword">let</span> classNames = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dom.classList.length; i++) &#123;</span><br><span class="line">                classNames.push(dom.classList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 有class用class，否则tag</span></span><br><span class="line">            <span class="keyword">if</span> (classNames.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="string">`<span class="subst">$&#123;dom.tagName&#125;</span>.<span class="subst">$&#123;classNames.join(<span class="string">"."</span>)&#125;</span>`</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = <span class="string">`<span class="subst">$&#123;dom.tagName&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            names.unshift(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归父节点</span></span><br><span class="line">        dom = dom.parentElement;</span><br><span class="line">    &#125; <span class="keyword">while</span> (dom !== <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">let</span> selector = names.join(<span class="string">" &gt; "</span>);</span><br><span class="line">    <span class="keyword">let</span> nodes = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodes[i] === dombak) &#123;</span><br><span class="line">            <span class="keyword">return</span> [selector, i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构模式为</p><blockquote><p>“BODY &gt; ARTICLE &gt; DIV.container &gt; DIV.row &gt; DIV.col…iner &gt; FIGURE.highlight.js &gt; DIV.table-responsive”, 0</p></blockquote><p>或者如</p><blockquote><p>“H2#id”, 0</p></blockquote><p>使用</p><blockquote><p>document.querySelectorAll(selector)[n]</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome插件 web_robot之我的看板</title>
      <link href="article/2020/article_31_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT%E4%B9%8B%E6%88%91%E7%9A%84%E7%9C%8B%E6%9D%BF/"/>
      <url>article/2020/article_31_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT%E4%B9%8B%E6%88%91%E7%9A%84%E7%9C%8B%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这次是web-robot这个插件的2.0的迭代。<br>主要实现了基于事务的看板。也实现了简易看板模式。<br>（看板为浏览器新标签页）</p><p>看板截图<br><img src="/img/mypost/web_robot_dashboard.jpg" alt="dashboard"></p><p>这几个元素分别来自于</p><ul><li>百度天气：<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94" target="_blank" rel="external">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></li><li>天天基金：<a href="https://fund.eastmoney.com/" target="_blank" rel="external">https://fund.eastmoney.com/</a></li><li>微博热搜：<a href="https://s.weibo.com/top/summary?cate=realtimehot" target="_blank" rel="external">https://s.weibo.com/top/summary?cate=realtimehot</a></li><li>知乎热门：<a href="https://www.zhihu.com/hot" target="_blank" rel="external">https://www.zhihu.com/hot</a></li><li>web_robot：<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">https://github.com/webgjc/web_robot</a></li></ul><h2 id="插件的一些定义">插件的一些定义</h2><p>粒度从细到广</p><ul><li>事件：一个浏览器<strong>动作</strong>，比如点击，设值，开关页面等。</li><li>事务：多个<strong>事件</strong>的合集，可以整体运行一套流程。如打开页面，设值xx，点击xx，关闭页面/展示到看板。</li><li>看板：多个<strong>事务</strong>的合集。每个事务表示看板上一个元素。</li></ul><h2 id="看板使用">看板使用</h2><p>首先github上下载源码</p><blockquote><p>git clone <a href="https://github.com/webgjc/web_robot.git" target="_blank" rel="external">https://github.com/webgjc/web_robot.git</a></p></blockquote><p>chrome浏览器点击右边更多，更多工具，扩展程序<br>或访问</p><blockquote><p>chrome://extensions/</p></blockquote><p>开启开发者模式，点击加载已解压的扩展程序<br>选择刚刚克隆下来的文件夹，确认即可</p><p>点开插件如下：</p><p><img src="/img/mypost/web_robot_1201.jpg" alt="web_robot"></p><h3 id="关闭看板">关闭看板</h3><p>看板默认为开启状态，如果想要关闭</p><p>将插件源码中跟目录下的 <strong>manifest.json</strong> 中最下方的这块删掉，<br>重新加载一下插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;chrome_url_overrides&quot;: &#123;</span><br><span class="line">    &quot;newtab&quot;: &quot;html/newtab.html&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简易模式">简易模式</h3><p>点击 开启简单看板模式</p><p>这边以百度天气为例：</p><p>打开：<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94" target="_blank" rel="external">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></p><p>如下：<br><img src="/img/mypost/web_robot_baidutianqi.jpg" alt="baidutianqi"></p><p>点开插件<br><img src="/img/mypost/web_robot_jiandankanban.jpg" alt="jiandankanban"></p><p>点击页面添加看板，鼠标在页面移动可以看到粉色边框</p><p><img src="/img/mypost/web_robot_xuanze.jpg" alt="web_robot_xuanze"></p><p>点击后可以看到选择器列表，从上往下分别是子元素到父元素的选择器</p><p><img src="/img/mypost/web_robot_xuanzeqi.jpg" alt="web_robot_xuanzeqi"></p><p>移动选择器可以在页面看到对应的粉色蒙版</p><p>点击后，点击确认添加到看板，则可以将对应选择的元素加到看板中<br>打开新页，就可以看到刚刚加的元素。</p><p>将鼠标移到页面上面中间，则会出现排版和重置。</p><p><img src="/img/mypost/web_robot_new_tab.jpg" alt="web_robot_new_tab"></p><p>点击排版可以配置一个元素框的大小。<br>(不会改变内部元素的大小，只改变看的框)</p><p>可以调整位置和大小，或者删除元素。</p><p><img src="/img/mypost/web_robot_paiban.jpg" alt="web_robot_paiban.jpg"></p><p>多加几个即可达到页面初的效果。</p><h3 id="复杂模式">复杂模式</h3><p>参考<br><a href="/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/">教程1，最初教程</a><br><a href="/article/article_21_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT/">教程2，进阶教程</a></p><p>添加到看板对事务的要求为</p><ul><li>流程事务</li><li>第一个事件为当页跳转 pagejump</li><li>最后一个事件为唯一展示 onlyshow</li></ul><p>中间可以添加各种点击设值事件。</p><p>定义完后，重新打开插件，可看到定义的事务有一个选项叫<br>添加看板，点击后则可以将对应元素加到看板中。</p><p><img src="/img/mypost/web_robot_add_dshb.jpg" alt="web_robot_add_dshb"></p><p>这边以加一个live2d为例，效果如下</p><p><img src="/img/mypost/web_robot_live2d1.jpg" alt="web_robot_live2d1"></p><p>可以直接复制导入这个配置食用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"add_dashboard"</span>:<span class="literal">true</span>,<span class="attr">"case_name"</span>:<span class="string">"live2d"</span>,<span class="attr">"case_process"</span>:[&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"pagejump"</span>,<span class="attr">"tag"</span>:<span class="string">"body"</span>,<span class="attr">"value"</span>:<span class="string">"http://blog.ganjiacheng.cn/"</span>,<span class="attr">"wait"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="attr">"check"</span>:<span class="literal">true</span>,<span class="attr">"expr"</span>:<span class="string">""</span>,<span class="attr">"n"</span>:<span class="string">"0"</span>,<span class="attr">"opera"</span>:<span class="string">"onlyshow"</span>,<span class="attr">"tag"</span>:<span class="string">"#live2d-widget"</span>,<span class="attr">"value"</span>:<span class="string">""</span>,<span class="attr">"wait"</span>:<span class="string">"0.5"</span>&#125;],<span class="attr">"case_sourcecode"</span>:<span class="string">""</span>,<span class="attr">"case_type"</span>:<span class="string">"process"</span>,<span class="attr">"control_url"</span>:<span class="string">""</span>,<span class="attr">"sourcecode_url"</span>:<span class="string">".*"</span>&#125;</span><br></pre></td></tr></table></figure><p>自行定义的话首先在插件主页中 新增一个流程事务。</p><p>然后点进去详情，新增一个当页跳转事件，跳转 <a href="http://blog.ganjiacheng.cn/" target="_blank" rel="external">http://blog.ganjiacheng.cn/</a> 这个地址</p><p>然后新增一个唯一展示事件，找到live2d的标签，这里是 #live2d-widget，定义为唯一展示onlyshow</p><p>定义完如下</p><p><img src="/img/mypost/web_robot_live2d.jpg" alt="web_robot_live2d"></p><p>保存后在主页中点击添加到看板</p><p>后续看板中的管理和上面简易模式一致。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机</title>
      <link href="article/2020/article_23_java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>article/2020/article_23_java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>记录总结一下 java 虚拟机的部分知识，知识主要来自于书籍《深入理解 java 虚拟机》。<br>组织形式会以小标题 &amp; 内容解答组成。</p><h2 id="内存管理机制">内存管理机制</h2><h3 id="虚拟机内存如何划分">虚拟机内存如何划分</h3><p>主要有程序计数器，虚拟机栈，本地方法栈，Java 堆，方法区</p><ul><li>程序计数器：当前线程执行的字节码行号指示</li><li>虚拟机栈：java 方法执行的信息（局部变量表，操作栈，动态链接，方法出口等）</li><li>本地方法栈：native 方法执行的信息</li><li>Java 堆：存放对象实例。垃圾收集主要区域，所有线程共享</li><li>方法区：类信息，常量，静态变量，即时编译后代码等</li></ul><h3 id="内存溢出的情况">内存溢出的情况</h3><ul><li>虚拟机栈，本地方法栈无法申请到更多内存。</li><li>Java 堆没有内存完成实例分配或者堆无法扩展。</li><li>方法区无法满足内存分配需求，运行时常量池超出内存限制。</li><li>直接内存大于物理内存限制</li></ul><h3 id="判断对象存活方法">判断对象存活方法</h3><ul><li>引用计数法：对象有引用到的地方就计数+1，引用失效-1。不能解决循环引用的问题</li><li>根搜索算法：Gcroot 对象为起点，向下搜索，不可达的可判定为可回收<br>引用分类：强引用，软引用，弱引用，虚引用</li></ul><h3 id="垃圾回收算法">垃圾回收算法</h3><ul><li>标记清除法：标记所有要回收的对象，然后统计清除。（效率不高，会产生不连续内存碎片）</li><li>复制算法：分两块内存，一块用完了将活着的对象复制到另一块，然后清除这一块</li><li>标记-整理算法：标记清除后将对象都整理到一端</li><li>分代收集算法：java 堆分为新生代(一个 Eden 区，2 个 Survivor 区，8：1：1)和老年代，新生代使用复制算法，老年代使用标记清除</li></ul><h3 id="垃圾收集器">垃圾收集器</h3><ul><li>Serial 收集器：单线程，client 模式新生代收集器</li><li>ParNew 收集器：多线程版 Serial 收集器，server 模式下首选新生代收集器</li><li>Parallel Scavenge 收集器：多线程新生代收集器，控制吞吐量</li><li>CMS 收集器：以获取最短回收停顿时间为目标</li><li>G1 收集器：基于标记-整理</li></ul><h3 id="内存分配与回收策略">内存分配与回收策略</h3><ul><li>对象优先在新生代 Eden 区中分配</li><li>大于 PretunureSizeThreshold 设置的大对象直接在老年代中分配</li><li>长期存活的对象将进入老年代，每次 minor gc 后年龄计数器+1，直到大于年龄阈值</li><li>动态对象年龄判定，相同年龄对象大禹 survivor 空间一半，大于等于该年龄的对象进入老年代</li><li>晋升到老年代的空间大于老年代剩余空间，则 full gc；小于的话如果允许担保失败，则 minor gc，否则 full gc；</li></ul><h3 id="jdk-命令行工具">jdk 命令行工具</h3><ul><li>jps：列出正在允许的 java 虚拟机进程和主类名</li><li>jstat：监控虚拟机各种允许状态（-gc,-class）</li><li>jinfo：实时查看调整虚拟机参数</li><li>jmap：生成堆转储快照</li><li>jhat：分析 jmap 生成的快照</li><li>jstack：生成虚拟机当前时刻线程快照</li></ul><h3 id="jdk-可视化工具">jdk 可视化工具</h3><ul><li>jconsole</li><li>jvisualvm</li></ul><h2 id="虚拟机执行子系统">虚拟机执行子系统</h2>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷一下剑指offer题</title>
      <link href="article/2020/offer_1_%E5%89%91%E6%8C%87offer%E6%80%9D%E8%B7%AF/"/>
      <url>article/2020/offer_1_%E5%89%91%E6%8C%87offer%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>题库地址：<a href="https://leetcode-cn.com/problemset/lcof/" target="_blank" rel="external">https://leetcode-cn.com/problemset/lcof/</a></p><h3 id="数组中重复的数字">数组中重复的数字</h3><p>放到set判断</p><h3 id="二维数组中的查找">二维数组中的查找</h3><p>二位数组左下角作为开始点，target比当前大的话往有移动，target比当前小的话往上移动，只到不能移动或者找到target</p><h3 id="替换空格">替换空格</h3><p>字符串遍历替换空格并拼接</p><h3 id="从尾到头打印链表">从尾到头打印链表</h3><p>链表从头到尾取出，放到栈中，再从栈中取出打印</p><h3 id="重建二叉树">重建二叉树</h3><p>前序遍历节点为根节点，将中序遍历分为左子树和右子树，由此递归</p><h3 id="用两个栈实现队列">用两个栈实现队列</h3><p>先往栈1加元素，当遇到删除的时候，判断栈2存不存在元素，不存在则将栈1弹入到栈2，存在则删除栈2最上面元素。</p><h3 id="斐波那契数列">斐波那契数列</h3><p>a, b = b, a+b</p><h3 id="青蛙跳台阶问题">青蛙跳台阶问题</h3><p>一阶或两阶表示f(n) = f(n-1) + f(n-2)<br>同斐波那契</p><h3 id="旋转数组的最小数字">旋转数组的最小数字</h3><p>二分查找，中间值比右边大则在右边，比右边小则在左边，相等则右边向左位移</p><h3 id="矩阵中的路径">矩阵中的路径</h3><p>dfs</p><h3 id="机器人的运动范围">机器人的运动范围</h3><p>bfs</p><h3 id="剪绳子">剪绳子</h3><p>剪长度为3最优先，将绳子变成3a+b，b分情况讨论</p><h3 id="剪绳子-ii">剪绳子 II</h3><p>同上+取余</p><h3 id="二进制中1的个数">二进制中1的个数</h3><p>数与1进行&amp;操作，使用移位操作&gt;&gt;</p><h3 id="数值的整数次方">数值的整数次方</h3><p>将n转为2进制 x^9 转为 x^(1<em>1)<em>x^(2</em>0)<em>x^(4</em>0)<em>x^(8</em>0)<br>二进制从尾向头遍历，遍历中x</em>=x，为1增乘到结果中</p><h3 id="打印从1到最大的n位数">打印从1到最大的n位数</h3><p>直接打印1 - 10^n-1</p><h3 id="删除链表的节点">删除链表的节点</h3><p>遍历链表节点，相等的话node.next=node.next.next</p><h3 id="正则表达式匹配">正则表达式匹配</h3><h3 id="表示数值的字符串">表示数值的字符串</h3><p>有限状态自动机</p><h3 id="调整数组顺序使奇数位于偶数前面">调整数组顺序使奇数位于偶数前面</h3><p>左右指针，左边遇到偶数和右边遇到奇数进行交换</p><h3 id="链表中倒数第k个节点">链表中倒数第k个节点</h3><p>左右指针</p><h3 id="反转链表">反转链表</h3><p>next = cur.next<br>cur.next = prev<br>prev = cur<br>cur = next</p><h3 id="合并两个排序的链表">合并两个排序的链表</h3><p>新链表，迭代两个链表往里加</p><h3 id="树的子结构">树的子结构</h3><p>先序遍历a，判断两个树是否全等</p><h3 id="二叉树的镜像">二叉树的镜像</h3><p>left,right = func(right), func(left)</p><h3 id="对称的二叉树">对称的二叉树</h3><p>func(l.left, r.right) and func(l.right, r.left)</p><h3 id="顺时针打印矩阵">顺时针打印矩阵</h3><p>一次遍历一圈</p><h3 id="包含min函数的栈">包含min函数的栈</h3><p>用另一个栈，栈顶存储最小值</p><h3 id="栈的压入-弹出序列">栈的压入、弹出序列</h3><p>每压入一个数，都进行循环判断出栈</p><h3 id="从上到下打印二叉树">从上到下打印二叉树</h3><p>bfs</p><h3 id="从上到下打印二叉树-ii">从上到下打印二叉树 II</h3><p>bfs</p><h3 id="从上到下打印二叉树-iii">从上到下打印二叉树 III</h3><p>bfs</p><h3 id="二叉搜索树的后序遍历序列">二叉搜索树的后序遍历序列</h3><p>最后一个为根节点，小的在左侧，大的在右侧，由此递归</p><h3 id="二叉树中和为某一值的路径">二叉树中和为某一值的路径</h3><p>先序遍历，记下路径和总和</p><h3 id="复杂链表的复制">复杂链表的复制</h3><p>深拷贝</p><h3 id="二叉搜索树与双向链表">二叉搜索树与双向链表</h3><h3 id="序列化二叉树">序列化二叉树</h3><h3 id="字符串的排列">字符串的排列</h3><p>dfs, 交换字符位置，剪枝</p><h3 id="数组中出现次数超过一半的数字">数组中出现次数超过一半的数字</h3><p>相同数+1，不相同数-1，最后留下的数</p><h3 id="最小的k个数">最小的k个数</h3><p>快排，左侧如果数量为k则返回，如果大于k则继续快排 // 小顶堆</p><h3 id="数据流中的中位数">数据流中的中位数</h3><h3 id="连续子数组的最大和">连续子数组的最大和</h3><p>局部和，全局和</p><h3 id="1~n整数中1出现的次数">1～n整数中1出现的次数</h3><p>0-h<em>d 1-h</em>d+l+1 2-h*d+d</p><h3 id="数字序列中某一位的数字">数字序列中某一位的数字</h3><p>位数d<em>9，找到数字在的位的第n个，找到在哪个数10</em>*(d-1)+(n-1)//d，找到在这个数的第几个(n-1)%d</p><h3 id="把数组排成最小的数">把数组排成最小的数</h3><p>基于xy &gt; yx 则 x&gt;y进行排序，连接</p><h3 id="把数字翻译成字符串">把数字翻译成字符串</h3><p>dfs</p><h3 id="礼物的最大价值">礼物的最大价值</h3><p>动态规划，左上开始，每格+=max(左，上)</p><h3 id="最长不含重复字符的子字符串">最长不含重复字符的子字符串</h3><p>双指针+hash表，i=max(dic[s[j]], i) j=max(res, j-i)</p><h3 id="丑数">丑数</h3><p>三个指针a,b,c指向0位1，分别乘2,3,5取min，与min相等的往后+1位</p><h3 id="第一个只出现一次的字符">第一个只出现一次的字符</h3><p>哈希表，遍历两次字符</p><h3 id="数组中的逆序对">数组中的逆序对</h3><h3 id="两个链表的第一个公共节点">两个链表的第一个公共节点</h3><p>双指针，一个链表到结尾了返回头，直到相交或一起为null</p><h3 id="在排序数组中查找数字-i">在排序数组中查找数字 I</h3><p>二分找到数字，然后向左向右找</p><h3 id="0~n-1中缺失的数字">0～n-1中缺失的数字</h3><p>二分看数字和index对不对应</p><h3 id="二叉搜索树的第k大节点">二叉搜索树的第k大节点</h3><p>反向中序遍历，到底k个</p><h3 id="二叉树的深度">二叉树的深度</h3><p>后序遍历，层序遍历</p><h3 id="平衡二叉树">平衡二叉树</h3><p>先序遍历，根据深度判断</p><h3 id=""></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>改版博客我的部分</title>
      <link href="article/2020/article_22_%E6%94%B9%E7%89%88%E6%88%91%E7%9A%84%E9%83%A8%E5%88%86/"/>
      <url>article/2020/article_22_%E6%94%B9%E7%89%88%E6%88%91%E7%9A%84%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>原博客主要定位为技术博客，因此都是一些技术分享上的文章；</p><p>本次将引入很多其他元素，博客不仅仅记录下技术上的改变，也能反映音乐，阅读，理财，生活等方面的变化，因此主目录部分还是原来的文章，在侧边栏将 FRIENDS 改为了 MINE，同时定向到了各个不同的版块；</p><p>为了留下更多自己的足迹，为了更好的自己；</p><h2 id="我的音乐"><a href="/article/music_1_%E9%9F%B3%E4%B9%90%E7%AF%87/">我的音乐</a></h2><p>音乐主要还是平常敲代码就喜欢听纯音乐，<br>听到好听的便可以记录下来。</p><p>另外也学过一点钢琴，有兴致了谈两手也可以留存下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">音乐自得其乐</span><br><span class="line">1. 分享音乐与感受</span><br><span class="line">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure><h2 id="我的阅读"><a href="/book/">我的阅读</a></h2><p>工作以后阅读确实少了不少，拿不起书或者 kindle</p><p>这个版本和上次的没变，但也希望不限制阅读种类，<br>如技术类的数据也可以留下印记</p><p>另外可以在部分阅读后实时记录</p><h2 id="我的理财"><a href="/article/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/">我的理财</a></h2><p>钱还是最重要的，除了工作收入感觉也只有这些被动收入可以补贴一下了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class="line">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class="line">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class="line">2. 在一些节点回顾性总结</span><br><span class="line">3. 发现或总结一些方法论</span><br><span class="line">4. 理财工具，分析工具的创造</span><br><span class="line">5. 数据挖掘和分析</span><br><span class="line">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure><h2 id="我的生活"><a href="/article/life_1_%E7%94%9F%E6%B4%BB%E7%AF%87/">我的生活</a></h2><p>虽然活的不那么精彩，但也值得自己回忆与记录生活的点点滴滴</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">本栏主要用于分享人生大小事和体悟</span><br><span class="line">人生总是在不断放下，但也要好好记录</span><br><span class="line">1. 突发奇想</span><br><span class="line">2. 吃喝玩乐</span><br><span class="line">3. 生活变动</span><br><span class="line">4. 人生节点</span><br><span class="line">5. 朝花朝拾</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome插件 web_robot</title>
      <link href="article/2020/article_21_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT/"/>
      <url>article/2020/article_21_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>2020-08-23 暂停频繁的更新，等待新的 idea 出现</li></ul><p>这边是 web_robot 持续更新教程，</p><p>对于基本的安装，导入，基础使用，请参照<a href="/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/">V1.0 版本教程</a></p><p>对于 V1.0 版本以外的功能这边都会做提醒与说明,目前版本 1.8.2</p><p><img src="/img/mypost/robot_pic.jpg" alt="插件图"></p><h2 id="先看演示">先看演示</h2><h3 id="演示流程事务">演示流程事务</h3><p><img src="/img/mypost/robot_demo1.gif" alt="演示1"></p><h3 id="演示源码事务">演示源码事务</h3><p><img src="/img/mypost/robot_demo2.gif" alt="演示2"></p><h3 id="演示受控事务">演示受控事务</h3><p><img src="/img/mypost/robot_demo3.gif" alt="演示3"></p><h2 id="事务模式">事务模式</h2><p>新建事务的时候可以选择三种事务</p><ul><li>流程事务</li><li>源码事务</li><li>受控事务</li></ul><h3 id="流程事务">流程事务</h3><p>之前 V1.0 做的就是流程事务，使用 dom 元素定义一个事件流程然后按流程执行。</p><h4 id="定义事件">定义事件</h4><p>一个流程事务会包含很多事件，每个事件由 dom 元素，动作，延时等组成。</p><p>定义事件目前可以选择两种方式，</p><p>一种是在插件中进行，</p><p>这边包含两种筛选器，自由筛选器(V1.4.0)和标签筛选器</p><p>筛选元素时可以自动对页面元素进行定位(V1.3.1)<br><img src="/img/mypost/robot_event.jpg" alt="robot"><br><img src="/img/mypost/robot2.jpg" alt="robot"></p><p>点进一个事务里，选择页面添加<br>然后在页面里点击任意位置，就会获取到 dom 节点并在右上角产生以下配置<br>(1.8.0) 支持可视化圈选定义事件<br><img src="/img/mypost/keshihuaquanxuan.gif" alt="robot"></p><p>(1.7.1) 支持页面直接录制事件，支持点击事件和英文设值事件。</p><p>动作目前可选择的有</p><ul><li>点击（click）</li><li>设值（value）</li><li>刷新（refresh）</li><li>当页跳转（pagejump）</li><li>取值 (getvalue) (v1.7.0)</li><li>鼠标移入 (mouseover) (v1.6.3)</li></ul><p>设值支持参数配置(v1.4.0)，可以填写${参数}，<br>这样在运行事务的时候就会出现需要填写对应的参数</p><h4 id="运行事务">运行事务</h4><p>他包括以下四种运行模式</p><ul><li>运行</li><li>轮播</li><li>受控运行</li><li>定时运行</li></ul><p>运行采用将事件发送到浏览器后台，浏览器后台与当前页面交互运行，使用浏览器事件还原配置的流程事件</p><p>轮播采用在插件页面直接与当前打开的浏览器页面交互运行，运行完一次后立即进行下一次。</p><p>受控运行(V1.2)运行与本地客户端中，插件将事件发送到浏览器后台，浏览器后台运行每个事件发送到本地客户端，客户端使用键盘鼠标还原事件。</p><p>定时运行(V1.6.0)支持两种模式，定时运行需要浏览器在前台，且打开关注一个空白页。</p><ul><li>15:00 按每天的 15:00 运行</li><li>10m 每 10 分钟运行一次</li></ul><h3 id="源码事务">源码事务</h3><p>源码事务是 V1.1 版本加的，功能为使用源码自行定义注入。</p><p>源码只支持直接运行。由插件将代码注入到页面。</p><p><img src="/img/mypost/robot3.jpg" alt="robot"></p><h3 id="受控事务">受控事务</h3><p>受控事务为 V1.3 版本加的，功能为使用本地客户端服务监听鼠标键盘事件，然后还原鼠标键盘事件。</p><p>受控事务可以配置一个受控地址</p><p>在进行录制操作的时候回新开 tab 打开受控地址，然后录制操作，按 ESC 结束录制</p><p>受控运行受控事务的时候同样也会打开受控地址，然后会还原刚刚录制的操作。</p><p><img src="/img/mypost/robot4.jpg" alt="robot"></p><h2 id="本地客户端的开启">本地客户端的开启</h2><p><strong>目前只在 mac 上做了配置，其他环境暂不知</strong></p><p>首选本地需要有 python3 环境，获取虚拟环境</p><p>py 文件下有需要的包文件 requirements.txt<br>下载包</p><blockquote><p>pip install -r py/requirements.txt</p></blockquote><p>开启 pythonweb</p><blockquote><p>python py/web.py</p></blockquote><p>看到监听 12580 端口即开启成功。</p><p>所有受控运行，受控事务都需要依赖本地客户端的开启</p>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hadoop-MapReduce实现稀疏矩阵乘法</title>
      <link href="article/2020/article_20_hadoop-mapreduce%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
      <url>article/2020/article_20_hadoop-mapreduce%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>之前关于 hadoop，也就试过一个 wordcount，这次来学习一下用 mapreduce 实现矩阵乘法，体会一下里面的思路过程。</p><h1 id="预备">预备</h1><h2 id="开发环境准备">开发环境准备</h2><p>第一次开发 MapReduce 程序可以看下这边的环境准备<br><a href="#mapreduce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">开发环境准备</a></p><h2 id="mapreduce">MapReduce</h2><p>关于 MapReduce 这边只用到最基础的，因此了解一下<a href="http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html" target="_blank" rel="external">wordcount</a>也就能知道最基础的思想。</p><ul><li>Map 将每行数据转为 key,value 的格式;</li><li>shuffle 会将相同 key 的 value 放到一个数组迭代器里变为 key，values[];</li><li>Reduce 读取数据并做计算处理;</li></ul><h2 id="数据存储">数据存储</h2><p>因为针对的是稀疏的大矩阵，直接按矩阵格式存储会产生很多 0，<br>因此这边采用了 x, y ,v 的格式，x，y 表示坐标(从 0，0 开始)，v 表示数值</p><h2 id="测试数据">测试数据</h2><p>为了方便这边就用 int 的数据来测试，且只准备了一个小矩阵，但原理一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// matA 4x3</span><br><span class="line">1  2  3</span><br><span class="line">4  5  0</span><br><span class="line">7  8  9</span><br><span class="line">10 11 12</span><br><span class="line"></span><br><span class="line">// matB 3x2</span><br><span class="line">10 15</span><br><span class="line">0  2</span><br><span class="line">11 9</span><br></pre></td></tr></table></figure><p>转为 x, y, v 的格式后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// matA</span><br><span class="line">0,0,1</span><br><span class="line">0,1,2</span><br><span class="line">0,2,3</span><br><span class="line">1,0,4</span><br><span class="line">1,1,5</span><br><span class="line">2,0,7</span><br><span class="line">2,1,8</span><br><span class="line">2,2,9</span><br><span class="line">3,0,10</span><br><span class="line">3,1,11</span><br><span class="line">3,2,12</span><br><span class="line"></span><br><span class="line">// matB</span><br><span class="line">0,0,10</span><br><span class="line">0,1,15</span><br><span class="line">1,1,2</span><br><span class="line">2,0,11</span><br><span class="line">2,1,9</span><br><span class="line"></span><br><span class="line">// 计算结果数组C</span><br><span class="line">0,043</span><br><span class="line">0,146</span><br><span class="line">1,040</span><br><span class="line">1,170</span><br><span class="line">2,0169</span><br><span class="line">2,1202</span><br><span class="line">3,0232</span><br><span class="line">3,1280</span><br></pre></td></tr></table></figure><p>将两个文件存到项目根目录/input 下</p><h1 id="三种实现">三种实现</h1><p>这边要讨论三种实现，思想上稍稍不同。</p><p>下面矩阵名以 A，B，C 替代，表示 AxB=C。<br>A 为 mxl<br>B 为 lxn<br>C 为 mxn</p><h2 id="基础的矩阵相乘">基础的矩阵相乘</h2><p>关于矩阵相乘，一般的就会考虑到 A 的行点乘以 B 的列为 C 的一个值，<br>所以最先考虑的是将 A 的第 i 行和 B 的第 i 列的数据放到一个 mapreduce 的 key 中，key 值为计算结果在 C 中的坐标。<br>然后考虑 A 的每行数据需要在 B 的每列用到，用到的地方都需要拷贝一份数据到对应 key 中，B 同样，就是 map 部分逻辑。<br>例如 A 的第一格数据 0,0,1，他会在与 B 的第一列，第二列点乘的时候用到成为 C 的第一行的一部分，就将它加到 key(0,0)(0,1)中。</p><p>例如上面的测试数据，这么做以后得到的 key,value 为，就是 map 部分<br>value 的第一个区分矩阵，第二个是 A 的列\B 的行，第三个表示值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0,0</span><br><span class="line">matB,2,11</span><br><span class="line">matB,0,10</span><br><span class="line">matA,0,1</span><br><span class="line">matA,1,2</span><br><span class="line">matA,2,3</span><br><span class="line"></span><br><span class="line">0,1</span><br><span class="line">matA,0,1</span><br><span class="line">matA,1,2</span><br><span class="line">matA,2,3</span><br><span class="line">matB,0,15</span><br><span class="line">matB,2,9</span><br><span class="line">matB,1,2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 reduce 阶段，将 A 的列与 B 的行相等的计算乘积并相加的到 C 的一格的结果。</p><p>盗一张图，可以很清楚的表示这个过程，他这个的定义 1，1 为开始点<br><img src="/img/mypost/mapreduce_show.jpg" alt="mapreduce_show"></p><p>来看具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: CALC A*B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: ganjiacheng@souche.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/23 10:57 上午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATA = <span class="string">"matA"</span>; <span class="comment">// 矩阵名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATB = <span class="string">"matB"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_R = <span class="number">4</span>; <span class="comment">// A矩阵行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_C = <span class="number">3</span>; <span class="comment">// A矩阵列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXB_C = <span class="number">2</span>; <span class="comment">// B矩阵列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            String line = text.toString();</span><br><span class="line">            String[] lineData = line.split(<span class="string">","</span>);</span><br><span class="line">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName(); <span class="comment">// 矩阵分别存两个文件，获取文件名判断是哪个矩阵</span></span><br><span class="line">            <span class="keyword">if</span>(MATA.equals(fileName))&#123;</span><br><span class="line">                <span class="comment">// A矩阵时，遍历B的列，将值放到点乘会用到的对应key中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MATRIXB_C; i++) &#123;</span><br><span class="line">                    <span class="comment">// 返回key value的结果</span></span><br><span class="line">                    outputCollector.collect(</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s"</span>, lineData[<span class="number">0</span>], i)),</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, MATA, lineData[<span class="number">1</span>], lineData[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(MATB.equals(fileName)) &#123;</span><br><span class="line">                <span class="comment">// B同样</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MATRIXA_R; i++) &#123;</span><br><span class="line">                    outputCollector.collect(</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s"</span>, i, lineData[<span class="number">1</span>])),</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, MATB ,lineData[<span class="number">0</span>], lineData[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reduce部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 初始化0数组存储对应相乘的值</span></span><br><span class="line">            <span class="keyword">int</span>[] valA = <span class="keyword">new</span> <span class="keyword">int</span>[MATRIXA_C];</span><br><span class="line">            <span class="keyword">int</span>[] valB = <span class="keyword">new</span> <span class="keyword">int</span>[MATRIXA_C];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class="line">                valA[i] = <span class="number">0</span>;</span><br><span class="line">                valB[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将value按第二个值的index存入数组</span></span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                String item = iterator.next().toString();</span><br><span class="line">                String[] itemData = item.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(MATA.equals(itemData[<span class="number">0</span>])) &#123;</span><br><span class="line">                    valA[Integer.parseInt(itemData[<span class="number">1</span>])] = Integer.parseInt(itemData[<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(MATB.equals(itemData[<span class="number">0</span>])) &#123;</span><br><span class="line">                    valB[Integer.parseInt(itemData[<span class="number">1</span>])] = Integer.parseInt(itemData[<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 数组乘积求求和得到C一个位置的值</span></span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class="line">                result += valA[i] * valB[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 写入结果</span></span><br><span class="line">            outputCollector.collect(text, <span class="keyword">new</span> Text(Integer.toString(result)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 这个是为了重复运行自动删除输出目录</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Path outpath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义任务</span></span><br><span class="line">        JobConf jobConf = <span class="keyword">new</span> JobConf(Matrix.class);</span><br><span class="line">        jobConf.setJobName(<span class="string">"matrix"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义输入输出类型</span></span><br><span class="line">        jobConf.setOutputKeyClass(Text.class);</span><br><span class="line">        jobConf.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义mapreduce过程</span></span><br><span class="line">        jobConf.setMapperClass(Map.class);</span><br><span class="line">        jobConf.setReducerClass(Reduce.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义输入输出路径</span></span><br><span class="line">        FileInputFormat.addInputPath(jobConf, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(jobConf, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行任务</span></span><br><span class="line">        JobClient.runJob(jobConf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分块矩阵乘法">分块矩阵乘法</h2><p>上面的方法有个问题是在 Map 过程中 A 的每个数据要扩大 B 列倍，B 的每个数据要扩大 A 行倍，数据较为冗余。</p><p>一种优化方式是将矩阵分块。<br>分块的计算原理如下<br><img src="/img/mypost/juzhengfenkuai.jpg" alt="juzhengfenkuai"></p><p>分块后如果是 k 个分为一块，数据大致可以减少 k 倍，</p><p>map 的时候按 C 的结果大块进行取 key，同时将需要进行对应计算的 A 列块和 B 行块划分到一起，reduce 的时候进行对应的块的矩阵计算。</p><p>这边举例以 2 个为一块，矩阵切分后如下，A 为 2x2，B 为 2x1<br>C 即为 2x1，shuffle 后的的 key 原本会有 6 个，现在只需要 4 个，且每个数量也减少了</p><p>如下将 1 2 4 5 和 10 15 0 2 （DIV *_ 2 _ 2）的块划到一起并在第一层 reduce 做计算，返回的 key 为对应行列<br>然后第二层 mapreduce 将计算结果合并累加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1  2  | 3</span><br><span class="line">4  5  | 0</span><br><span class="line">---------</span><br><span class="line">7  8  | 9</span><br><span class="line">10 11 | 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10 15</span><br><span class="line">0  2</span><br><span class="line">-----</span><br><span class="line">11 9</span><br><span class="line"></span><br><span class="line">// shuffle后的数据格式</span><br><span class="line">0,0,0</span><br><span class="line">matB,0,0,10</span><br><span class="line">matB,0,1,15</span><br><span class="line">matB,1,1,2</span><br><span class="line">matA,0,0,1</span><br><span class="line">matA,0,1,2</span><br><span class="line">matA,1,0,4</span><br><span class="line">matA,1,1,5</span><br><span class="line">0,1,0</span><br><span class="line">matA,0,2,3</span><br><span class="line">matB,2,0,11</span><br><span class="line">matB,2,1,9</span><br><span class="line">1,0,0</span><br><span class="line">matB,0,0,10</span><br><span class="line">matB,0,1,15</span><br><span class="line">matB,1,1,2</span><br><span class="line">matA,2,0,7</span><br><span class="line">matA,2,1,8</span><br><span class="line">matA,3,0,10</span><br><span class="line">matA,3,1,11</span><br><span class="line">1,1,0</span><br><span class="line">matA,2,2,9</span><br><span class="line">matA,3,2,12</span><br><span class="line">matB,2,0,11</span><br><span class="line">matB,2,1,9</span><br></pre></td></tr></table></figure><p>上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: ganjiacheng@souche.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/24 10:29 上午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockMatrix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATA = <span class="string">"matA"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATB = <span class="string">"matB"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_R = <span class="number">4</span>; <span class="comment">// A矩阵行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_C = <span class="number">3</span>; <span class="comment">// A矩阵列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXB_C = <span class="number">2</span>; <span class="comment">// B矩阵列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>; <span class="comment">// 每多少个分块</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            String line = text.toString();</span><br><span class="line">            String[] lineData = line.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">int</span> row = Integer.parseInt((lineData[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">int</span> col = Integer.parseInt((lineData[<span class="number">1</span>]));</span><br><span class="line">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class="line">            <span class="keyword">if</span>(MATA.equals(fileName))&#123;</span><br><span class="line">                <span class="comment">// 分块后key只需要存分好的大块的位置和A列B行对应值，</span></span><br><span class="line">                <span class="comment">// value需要全部位置和值</span></span><br><span class="line">                <span class="comment">// 保证每块shuffle后数据量都只有 DIV**2 * 2</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.ceil(<span class="number">1.0</span> * MATRIXB_C / DIV); i++) &#123;</span><br><span class="line">                    outputCollector.collect(</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, row/DIV, col/DIV, i)),</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s,%s"</span>, MATA, row, col, lineData[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(MATB.equals(fileName)) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.ceil(<span class="number">1.0</span> * MATRIXA_R / DIV); i++) &#123;</span><br><span class="line">                    outputCollector.collect(</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, i, row/DIV, col/DIV)),</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s,%s"</span>, MATB, row, col, lineData[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 将A和B的x,y,v分别存储</span></span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; listB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                String value = iterator.next().toString();</span><br><span class="line">                String[] data = value.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(MATA.equals(data[<span class="number">0</span>])) &#123;</span><br><span class="line">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class="number">1</span>]), Integer.parseInt(data[<span class="number">2</span>]), Integer.parseInt(data[<span class="number">3</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(MATB.equals(data[<span class="number">0</span>])) &#123;</span><br><span class="line">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class="number">1</span>]), Integer.parseInt(data[<span class="number">2</span>]), Integer.parseInt(data[<span class="number">3</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历A和B A的y和B的x相等的做乘积存入map，</span></span><br><span class="line">            <span class="comment">// key为A的x和B的y，value为乘积或乘积的累积</span></span><br><span class="line">            HashMap&lt;String, Integer&gt; valueMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class="line">                <span class="keyword">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(itemA.get(<span class="number">1</span>).equals(itemB.get(<span class="number">0</span>))) &#123;</span><br><span class="line">                        String key = String.format(<span class="string">"%s,%s"</span>, itemA.get(<span class="number">0</span>), itemB.get(<span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">if</span>(!valueMap.containsKey(key)) &#123;</span><br><span class="line">                            valueMap.put(key, itemA.get(<span class="number">2</span>) * itemB.get(<span class="number">2</span>));</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            valueMap.put(key, valueMap.get(key) + itemA.get(<span class="number">2</span>) * itemB.get(<span class="number">2</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每个key都取一遍就是C</span></span><br><span class="line">            <span class="keyword">for</span>(String key: valueMap.keySet()) &#123;</span><br><span class="line">                outputCollector.collect(<span class="keyword">new</span> Text(key), <span class="keyword">new</span> Text(Integer.toString(valueMap.get(key))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续需要接一个累加的mapreduce，这个与下面的列行乘法相同，见下方。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列行相乘">列行相乘</h2><p>这个的思想基本和第二种的 reduce 部分差不多，但这个不是利用 hashmap 来自己合并，而用两次 mapreduce 来实现。找到 A 的列与 B 的行值相等的两个值进行乘积作为值，取 A 的行与 B 的列作为 Key，然后将同样 key 的 value 相加就可以得到结果。</p><p>这个需要分两步 MapReduce，<br>第一步 Mapreduce 是取相等的列行相乘得值，key 为对应的行列<br>第二步 MapReduce 是将相等的 key 相加，得到 C 的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: ganjiacheng@souche.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/24 1:46 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LhMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATA = <span class="string">"matA"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MATB = <span class="string">"matB"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_R = <span class="number">4</span>; <span class="comment">// A矩阵行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXA_C = <span class="number">3</span>; <span class="comment">// A矩阵列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MATRIXB_C = <span class="number">2</span>; <span class="comment">// B矩阵列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            String line = text.toString();</span><br><span class="line">            String[] lineData = line.split(<span class="string">","</span>);</span><br><span class="line">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class="line">            <span class="keyword">if</span>(MATA.equals(fileName))&#123;</span><br><span class="line">                <span class="comment">// 将A的y作为key</span></span><br><span class="line">                outputCollector.collect(</span><br><span class="line">                        <span class="keyword">new</span> Text(lineData[<span class="number">1</span>]),</span><br><span class="line">                        <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, MATA, lineData[<span class="number">0</span>], lineData[<span class="number">2</span>])));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(MATB.equals(fileName)) &#123;</span><br><span class="line">                <span class="comment">// 将B的x作为key</span></span><br><span class="line">                outputCollector.collect(</span><br><span class="line">                        <span class="keyword">new</span> Text(lineData[<span class="number">0</span>]),</span><br><span class="line">                        <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s,%s"</span>, MATB, lineData[<span class="number">1</span>], lineData[<span class="number">2</span>])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; listB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                String value = iterator.next().toString();</span><br><span class="line">                System.out.println(value);</span><br><span class="line">                String[] data = value.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(MATA.equals(data[<span class="number">0</span>])) &#123;</span><br><span class="line">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class="number">1</span>]), Integer.parseInt(data[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(MATB.equals(data[<span class="number">0</span>])) &#123;</span><br><span class="line">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class="number">1</span>]), Integer.parseInt(data[<span class="number">2</span>])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// shuffle同样key的AB全排列并做乘积，</span></span><br><span class="line">            <span class="comment">// 返回key为C的坐标，value为一部分乘积，后续要做累加</span></span><br><span class="line">            <span class="keyword">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class="line">                <span class="keyword">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class="line">                    outputCollector.collect(</span><br><span class="line">                            <span class="keyword">new</span> Text(String.format(<span class="string">"%s,%s"</span>, itemA.get(<span class="number">0</span>), itemB.get(<span class="number">0</span>))),</span><br><span class="line">                            <span class="keyword">new</span> Text(Integer.toString(itemA.get(<span class="number">1</span>) * itemB.get(<span class="number">1</span>))));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面的mapreduce做累加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SumMap</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 取出第一次输出的结果</span></span><br><span class="line">            String[] line = text.toString().split(<span class="string">"\t"</span>);</span><br><span class="line">            outputCollector.collect(<span class="keyword">new</span> Text(line[<span class="number">0</span>]), <span class="keyword">new</span> Text(line[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SumReducer</span> <span class="keyword">extends</span> <span class="title">MapReduceBase</span> <span class="keyword">implements</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// 累加</span></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                sum += Integer.parseInt(iterator.next().toString());</span><br><span class="line">            &#125;</span><br><span class="line">            outputCollector.collect(text, <span class="keyword">new</span> Text(Integer.toString(sum)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这边跑了两个mapreduce</span></span><br><span class="line">    <span class="comment">// 需要有第三个参数 第二次输出的路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Path outpath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Path outpath1 = <span class="keyword">new</span> Path(args[<span class="number">2</span>]);</span><br><span class="line">        FileSystem fileSystem1 = outpath1.getFileSystem(conf);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem1.exists(outpath1))&#123;</span><br><span class="line">            fileSystem1.delete(outpath1, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JobConf jobConf = <span class="keyword">new</span> JobConf(LhMatrix.class);</span><br><span class="line">        jobConf.setJobName(<span class="string">"block matrix"</span>);</span><br><span class="line"></span><br><span class="line">        jobConf.setOutputKeyClass(Text.class);</span><br><span class="line">        jobConf.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        jobConf.setMapperClass(LhMatrix.Map.class);</span><br><span class="line">        jobConf.setReducerClass(LhMatrix.Reduce.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.setInputPaths(jobConf, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(jobConf, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        JobClient.runJob(jobConf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JobConf jobConf1 = <span class="keyword">new</span> JobConf(LhMatrix.class);</span><br><span class="line">        jobConf1.setJobName(<span class="string">"block matrix sum"</span>);</span><br><span class="line">        jobConf1.setOutputKeyClass(Text.class);</span><br><span class="line">        jobConf1.setOutputValueClass(Text.class);</span><br><span class="line">        jobConf1.setMapperClass(LhMatrix.SumMap.class);</span><br><span class="line">        jobConf1.setReducerClass(LhMatrix.SumReducer.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(jobConf1, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(jobConf1, <span class="keyword">new</span> Path(args[<span class="number">2</span>]));</span><br><span class="line">        JobClient.runJob(jobConf1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结">小结</h1><ul><li>第一种基本的矩阵乘法，实现比较直接，主要问题在于 map 的时候数据复制了 n 份，导致 shuffle 的数据过大；另一个是每个 reduce 的时候获得的数据量为 m+n，且需要转存到内存中，可能会导致存储不下。</li><li>第二种分块相乘，将数据复制分数减少了 DIV 倍，同时一个 reduce 的数据量在 DIV*_2 _ 2 的大小；麻烦的是需要控制的就是 DIV 取合适的值。</li><li>第三种列行相乘，这边实现的是直接在全集上进行列行分，其实也可以在分块后进行列行，这边的每个 reduce 也是会有 m+n 的数据进来内存中，分块后再按列行划分就是步骤会多了点，也是可以的。</li></ul><p><strong>感觉最为关键的一步是在 map 的时候对数据进行合理的计算划分与分发，就如同这边对矩阵的分块/列行对应分发(什么作为 key)，不同的 key 划分对应的计算量和中间过程数据完全不同。划分完后的每块 reduce 的计算基本是水到渠成的事情，都是一些累加或点乘的事情。</strong></p><h1 id="mapreduce-开发环境">MapReduce 开发环境</h1><p>这边因为本地装的 hadoop2.7.3 版本，<br>因此新建 maven 项目，使用了 2.7.3 的依赖包，不过运行可以不依赖本地</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开 idea 的运行配置，<br>新建 Application 的配置，</p><p>Main class 填写如下；<br>arguments 参数填写如下，第一个为 mvn 打包后的 jar，<br>第二个为运行的类，<br>后面两个为类的参数，表示输入输出路径(这边相对路径是相对项目根目录)<br><img src="/img/mypost/mapreduce_configure.jpg" alt="mapreduce_configure"></p><p>然后直接点运行即可，debug 也可以</p><h1 id="感谢">感谢</h1><ul><li><a href="http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html" target="_blank" rel="external">MapReduce 官方教程</a></li><li><a href="https://blog.csdn.net/xyilu/article/details/9066973" target="_blank" rel="external">MapReduce 实现大矩阵乘法</a></li><li><a href="https://blog.csdn.net/wzhg0508/article/details/17475573" target="_blank" rel="external">一些算法的 MapReduce 实现——矩阵分块乘法计算</a></li><li><a href="https://www.cnblogs.com/Decmber/p/5491920.html" target="_blank" rel="external">列行相乘法</a></li><li><a href="https://wenku.baidu.com/view/bd3da325cf84b9d528ea7a96.html" target="_blank" rel="external">高度可伸缩的稀疏矩阵乘法</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HADOOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TABLE-MAKER</title>
      <link href="article/2020/article_19_chrome%E6%8F%92%E4%BB%B6-%E4%B8%87%E8%83%BD%E8%A1%A8%E6%A0%BC/"/>
      <url>article/2020/article_19_chrome%E6%8F%92%E4%BB%B6-%E4%B8%87%E8%83%BD%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本次依旧发布一款浏览器插件–万能表格。</p><p>说说为什么万能，其一，因为它可以接入任意的 GET 接口数据或其他文本(html/text…)数据来源，且无跨域限制，且一些需要 cookie 的接口或网站访问数据时也会带上 cookie。<br>其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json 解析用就直接用 key，文本解析就用正则表达式。<br>其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到 url 地址上，再反映到数据上。</p><h2 id="案例展示">案例展示</h2><p><img src="/img/mypost/tablemaker_jjjz.jpg" alt="tablemaker_jjjz"></p><p><img src="/img/mypost/tablemaker_weather.jpg" alt="tablemaker_weather"></p><h1 id="软件使用教程">软件使用教程</h1><h2 id="软件下载与导入">软件下载与导入</h2><h3 id="源码下载导入">源码下载导入</h3><p>软件源码的 github 地址为<br><a href="https://github.com/webgjc/table_maker" target="_blank" rel="external">https://github.com/webgjc/table_maker</a></p><p>首先将代码克隆到本地</p><blockquote><p>git clone <a href="https://github.com/webgjc/table_maker.git" target="_blank" rel="external">https://github.com/webgjc/table_maker.git</a></p></blockquote><p>然后打开 chrome 点开右上角三个点的地方，<br>选择更多工具 ==&gt; 扩展程序；</p><p>因为是源码，开启右上角的开发者模式<br>开发者模式，(在完毕后可以关闭开发者模式)</p><p>然后点击左上角的 <strong>加载已解压的扩展程序</strong>，<br>选择刚刚 clone 下来的目录</p><p>下图表示已经加载进来了</p><p><img src="/img/mypost/table_maker.jpg" alt="table_maker"></p><p>然后浏览器右上角也有这个插件的小图标</p><p>就表示导入完成。</p><h3 id="软件商店下载">软件商店下载</h3><p>暂不支持</p><h2 id="软件使用">软件使用</h2><p>点开浏览器右上角的 <strong>$</strong> 小图标，会见到如下主页</p><p><img src="/img/mypost/tablemaker_main.jpg" alt="tablemaker_main"></p><p>目前该插件只支持一个表的制作与展示。</p><h3 id="导入数据体验">导入数据体验</h3><p>数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data_type"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="attr">"data_url"</span>: <span class="string">"http://fund.eastmoney.com/&#123;ID&#125;.html"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"data_parser"</span>: <span class="string">"funCur-FundName\"&gt;(.*?)&lt;/span&gt;"</span>,</span><br><span class="line">            <span class="attr">"field_name"</span>: <span class="string">"基金名称"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"data_parser"</span>: <span class="string">"gz_gszzl\"&gt;(.*?)&lt;/span&gt;"</span>,</span><br><span class="line">            <span class="attr">"field_name"</span>: <span class="string">"净值估算"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"keys"</span>: [<span class="string">"110022"</span>, <span class="string">"003634"</span>],</span><br><span class="line">    <span class="attr">"table_name"</span>: <span class="string">"基金今日估值"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码<br>(这边用的天天基金网的基金详情页面，实时数据有延迟)</p><p>可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下</p><p><img src="/img/mypost/tablemaker_jjjz.jpg" alt="tablemaker_jjjz"></p><p>后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。</p><p>每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。</p><h3 id="制作自己的表格-text-解析">制作自己的表格 TEXT 解析</h3><p>接下来就是最重要的部分 – 制作万能表格</p><h4 id="基金净值表">基金净值表</h4><p>这里以制作上面基金实时净值表为例。</p><h4 id="确定表格数据源">确定表格数据源</h4><p>首先要确定好要制作的表格的数据来源。</p><p>比如这里找到了 <a href="http://fund.eastmoney.com/" target="_blank" rel="external">天天基金网</a>，<br>它查看一个基金详情的的地址页如下：</p><blockquote><p><a href="http://fund.eastmoney.com/%7BID%7D.html" target="_blank" rel="external">http://fund.eastmoney.com/{ID}.html</a></p></blockquote><p>{ID}表示基金的代码，虽然是 html 格式的返回，但也可以正则来解析，正合适我们这里所需要的。</p><p>点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。</p><h4 id="确定需要解析的字段">确定需要解析的字段</h4><p>这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)</p><p>到某个基金的详情的 html 页面，打开浏览器调试，或查看源码。</p><p>找到这个数据的来源，这边看到在 html 源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据</p><p>基金名称源码对应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"funCur-Tit"</span>&gt;</span>基金名称：<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"funCur-FundName"</span>&gt;</span>易方达消费行业股票<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正则解析方式为</p><blockquote><p>funCur-FundName&quot;&gt;(.*?)&lt;/span&gt;</p></blockquote><p>基金实时估值部分源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"remindicon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fundDetail-main"</span>&gt;</span><span class="comment">&lt;!-- 档案 start --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fundInfoItem"</span>&gt;</span><span class="comment">&lt;!--开放式基金收益率模块--&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dataOfFund"</span>&gt;</span><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dataItem01"</span>&gt;</span><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sp01"</span>&gt;</span>净值估算<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"gz_gztime"</span>&gt;</span>(20-05-20 10:01)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"infoTips"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tipsBubble"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">"dataNums"</span>&gt;</span><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"floatleft"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ui-font-large ui-color-green ui-num"</span> <span class="attr">id</span>=<span class="string">"gz_gsz"</span>&gt;</span>3.1764<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">"gz_icon"</span> <span class="attr">class</span>=<span class="string">"gzdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"floatleft fundZdf"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ui-font-middle ui-color-green ui-num"</span> <span class="attr">id</span>=<span class="string">"gz_gszze"</span>&gt;</span>0.0086<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ui-font-middle ui-color-green ui-num"</span> <span class="attr">id</span>=<span class="string">"gz_gszzl"</span>&gt;</span>-0.27%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正则解析方式为</p><blockquote><p>gz_gszzl&quot;&gt;(.*?)&lt;/span&gt;</p></blockquote><p><strong>插件上的操作为</strong></p><p>主页点击修改表格，点击确定并修改列</p><p>点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下</p><p><img src="/img/mypost/tablemaker_lie.jpg" alt="tablemaker_lie"></p><p>当然这边也提供了测试解析的功能</p><p>点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。</p><p>点击返回返回主页，列就会渲染出来。</p><h4 id="最终效果和主页操作">最终效果和主页操作</h4><p>制作完的主页如下，没有数据但加的列已经有了</p><p><img src="/img/mypost/tablemaker_kongzhu.jpg" alt="tablemaker_kongzhu"></p><p>主页上可以增加主键，表示增加一行数据</p><p>增加主键就相当于一个关注的基金。</p><p>比如增加 110022, 003634 这两个基金代码作为主键，就制作成了上面的直接导入数据的表格</p><p><img src="/img/mypost/tablemaker_jjjz.jpg" alt="tablemaker_jjjz"></p><p>双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。</p><h3 id="制作自己的表格-json-解析">制作自己的表格 JSON 解析</h3><h4 id="城市天气表">城市天气表</h4><p>这边 JSON 解析举的例子为 城市天气列表</p><h4 id="数据来源">数据来源</h4><p>首先找到所需数据源接口</p><p>这边使用国家的</p><blockquote><p><a href="http://www.weather.com.cn/data/cityinfo/%7BID%7D.html" target="_blank" rel="external">http://www.weather.com.cn/data/cityinfo/{ID}.html</a></p></blockquote><p>{ID}表示城市代码，代码列表在下面有<br><a href="https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html" target="_blank" rel="external">https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html</a></p><p>天气格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;weatherinfo&quot;: &#123;</span><br><span class="line">        &quot;city&quot;: &quot;北京&quot;,</span><br><span class="line">        &quot;cityid&quot;: &quot;101010100&quot;,</span><br><span class="line">        &quot;temp1&quot;: &quot;18℃&quot;,</span><br><span class="line">        &quot;temp2&quot;: &quot;31℃&quot;,</span><br><span class="line">        &quot;weather&quot;: &quot;多云转阴&quot;,</span><br><span class="line">        &quot;img1&quot;: &quot;n1.gif&quot;,</span><br><span class="line">        &quot;img2&quot;: &quot;d2.gif&quot;,</span><br><span class="line">        &quot;ptime&quot;: &quot;18:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑表格</p><p>表名使用 城市天气表，<br>数据源填写 <a href="http://www.weather.com.cn/data/cityinfo/%7BID%7D.html" target="_blank" rel="external">http://www.weather.com.cn/data/cityinfo/{ID}.html</a><br>数据格式 json</p><h4 id="设置列解析">设置列解析</h4><p>json 解析比较简单，直接使用 key.key.key</p><p>举例如下：<br>要解析城市名，则新增字段，名称填城市， 解析方式就写</p><blockquote><p>weatherinfo.city</p></blockquote><p>要解析城市天气，则新增字段，解析方式就写</p><blockquote><p>weatherinfo.weather</p></blockquote><h4 id="最终效果展示">最终效果展示</h4><p>主页操作同上 TEXT 解析的表格</p><p><img src="/img/mypost/tablemaker_weather.jpg" alt="tablemaker_weather"></p><h2 id="软件开发说明">软件开发说明</h2><p>浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。</p><p>本次插件主要利用的是 在 popup.js 或者 background.js 可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。</p><p>至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。</p><h3 id="重点关注部分代码">重点关注部分代码</h3><p>主要代码在 popup.js 中，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json解析，解析格式为：key.key.key</span></span><br><span class="line"><span class="comment">// 根据每个key去获取对应的值</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deal_json_parser</span>(<span class="params">url, key, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> fetch(key_replace(url, key))</span><br><span class="line">        .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            rowdata = [key];</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> fields) &#123;</span><br><span class="line">                tmpdata = data;</span><br><span class="line">                fields[i][<span class="string">"data_parser"</span>].split(<span class="string">"."</span>).map(<span class="function">(<span class="params">fieldkey</span>) =&gt;</span> &#123;</span><br><span class="line">                    tmpdata = tmpdata[fieldkey];</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    <span class="built_in">Object</span>.prototype.toString.call(tmpdata) ===</span><br><span class="line">                    <span class="string">"[object Object]"</span></span><br><span class="line">                ) &#123;</span><br><span class="line">                    rowdata.push(<span class="built_in">JSON</span>.stringify(tmpdata));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rowdata.push(tmpdata || <span class="string">""</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rowdata;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值</span></span><br><span class="line"><span class="comment">// 也就是(.*?)的部分</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deal_text_parser</span>(<span class="params">url, key, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> fetch(key_replace(url, key))</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            rowdata = [key];</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> fields) &#123;</span><br><span class="line">                rowdata.push(</span><br><span class="line">                    data.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(fields[i][<span class="string">"data_parser"</span>]))[<span class="number">1</span>]</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rowdata;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染主页的数据，使用异步</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".mainbody"</span>).html(<span class="string">""</span>);</span><br><span class="line">    $(<span class="string">".table_head"</span>).html(data[<span class="string">"table_name"</span>]);</span><br><span class="line">    headstr = <span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">    headstr += <span class="string">"&lt;td&gt;主键&lt;/td&gt;"</span>;</span><br><span class="line">    data[<span class="string">"fields"</span>].map(</span><br><span class="line">        (field) =&gt; (headstr += <span class="string">"&lt;td&gt;"</span> + field[<span class="string">"field_name"</span>] + <span class="string">"&lt;/td&gt;"</span>)</span><br><span class="line">    );</span><br><span class="line">    headstr += <span class="string">"&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">    $(<span class="string">".mainhead"</span>).html(headstr);</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> data[<span class="string">"keys"</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> row;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[<span class="string">"data_type"</span>] === <span class="string">"json"</span>) &#123;</span><br><span class="line">                row = <span class="keyword">await</span> deal_json_parser(</span><br><span class="line">                    data[<span class="string">"data_url"</span>],</span><br><span class="line">                    data[<span class="string">"keys"</span>][key],</span><br><span class="line">                    data[<span class="string">"fields"</span>]</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                row = <span class="keyword">await</span> deal_text_parser(</span><br><span class="line">                    data[<span class="string">"data_url"</span>],</span><br><span class="line">                    data[<span class="string">"keys"</span>][key],</span><br><span class="line">                    data[<span class="string">"fields"</span>]</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            row = [data[<span class="string">"keys"</span>][key]];</span><br><span class="line">            data[<span class="string">"fields"</span>].map(<span class="function">(<span class="params">field</span>) =&gt;</span> row.push(<span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        htmlstr = <span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">        row.map(<span class="function">(<span class="params">value</span>) =&gt;</span> (htmlstr += <span class="string">"&lt;td&gt;"</span> + value + <span class="string">"&lt;/td&gt;"</span>));</span><br><span class="line">        htmlstr +=</span><br><span class="line">            <span class="string">"&lt;td&gt;&lt;a href='#' id='move_up' key='"</span> +</span><br><span class="line">            key +</span><br><span class="line">            <span class="string">"'&gt;上移&lt;/a&gt; &lt;a href='#' id='delete_value' key='"</span> +</span><br><span class="line">            key +</span><br><span class="line">            <span class="string">"'&gt;删除&lt;/a&gt;&lt;/td&gt;"</span>;</span><br><span class="line">        htmlstr += <span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">        $(<span class="string">".mainbody"</span>).append(htmlstr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感谢">感谢</h1><ul><li><a href="http://www.materializecss.cn/about.html" target="_blank" rel="external">materializecss</a></li><li><a href="https://developer.chrome.com/extensions" target="_blank" rel="external">官方轮子</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="external">插件教程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB-ROBOT</title>
      <link href="article/2020/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>article/2020/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>这边主要介绍一款个人自行开发的chrome插件 web-robot，<br>这边讲解的是他的V1.0版本，<br>包括它的开始设计，使用教程，实现思路和细节。<br>源码的github地址是在<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">https://github.com/webgjc/web_robot</a></p><h1 id="软件设计">软件设计</h1><p>关于这个软件的初始设计定位，这边将他定位为<strong>网页自动化链路管理执行</strong>；<br>类似模拟自动化测试，但不会有结果校验。</p><p>创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。</p><p>软件主要要包括的有以下一些：</p><ul><li>网页元素的可视化筛选；</li><li>筛选的元素加上动作与延时变成一个事件；</li><li>多个事件形成一个事务流程；</li><li>主界面可以管理多个事务，进行事务的运行、轮播、分享等；</li></ul><p>软件风格大致按使用的前端ui框架的极简风格走；</p><h1 id="软件使用教程">软件使用教程</h1><h2 id="下载与导入">下载与导入</h2><h3 id="源码下载导入">源码下载导入</h3><p>源码github地址：<a href="https://github.com/webgjc/web_robot" target="_blank" rel="external">https://github.com/webgjc/web_robot</a></p><p>首先到github上将源码clone到本地 / 下载解压也可以</p><blockquote><p>git clone <a href="https://github.com/webgjc/web_robot.git" target="_blank" rel="external">https://github.com/webgjc/web_robot.git</a></p></blockquote><p>然后打开chrome点开右上角三个点的地方，<br>选择更多工具 ==》扩展程序；</p><p>因为是源码，开启右上角的开发者模式<br><img src="/img/mypost/kaifazhemoshi.jpg" alt="开发者模式"></p><p>然后点击左上角的加载已解压的扩展程序，<br>选择刚刚clone下来的目录</p><p>下面表示已经加载进来了<br><img src="/img/mypost/robot.jpg" alt="robot"></p><p>且右上角出现这个小图标<br><img src="/img/mypost/robot_small.jpg" alt="robot"></p><p><strong>重要：右键这个小图标，</strong><br><strong>可读取和更改的网站数据，</strong><br><strong>选择 在所有网站上；</strong></p><p>至此已经完成下载和导入啦！😋</p><h3 id="从chrome商店下载导入">从chrome商店下载导入</h3><p>暂时没有上线chrome应用商店</p><h3 id="版本更新">版本更新</h3><p>首先更新本地代码</p><blockquote><p>git pull</p></blockquote><p><strong>然后重复上面的 加载已解压的扩展程序 的操作</strong>。</p><h2 id="软件使用">软件使用</h2><h3 id="新建事务">新建事务</h3><p>首先新建一个事务<br><img src="/img/mypost/robot_shiwu.jpg" alt="robot"></p><p>这边建一个test为例子<br><img src="/img/mypost/robot_main.jpg" alt="robot"></p><h3 id="筛选器">筛选器</h3><p>点击 test 进入 过程添加页</p><p>点击添加过程，进入筛选器页面<br><img src="/img/mypost/robot_shaixuanqi.jpg" alt="robot"></p><p>这边支持按 html标签 / class / id 筛选</p><p>下面都进行举例</p><h4 id="html标签筛选">html标签筛选</h4><p>选择一个html标签，a(链接), body, div等<br>下方会展示一个列表，表示页面中该元素有几个。<br>鼠标移到列表每个上面，<br>页面对应元素将会渲染一个蒙版到以便正确定位选择。</p><p>这是选择body的时候<br><img src="/img/mypost/robot_htmltag.jpg" alt="robot"></p><p>这是选择div的时候<br><img src="/img/mypost/robot_htmltag2.jpg" alt="robot"></p><h4 id="class-id-筛选">class / id 筛选</h4><p>首先在选择标签列表的下列菜单中<br>选择 第一个 class/id选择器<br>然后会出现一个输入框输入对应的class或id</p><p>class选择器需要以.开头，如：.xxx<br>id选择器需要以#开头，如：#xxx</p><p>选好后按回车，如果有对应的选择器，将会展示一个列表,<br>后续操作同html标签，鼠标移到列表上会渲染蒙版<br><img src="/img/mypost/robot_classtag.jpg" alt="robot"></p><h3 id="单个事件">单个事件</h3><p>用筛选器选中好一个元素后<br>将会进入事件编辑页面<br><img src="/img/mypost/robot_shijian.jpg" alt="robot"></p><p>(如想改变元素，可以按最上面的元素返回)</p><p>这边的选择操作可以选的有：</p><ul><li>click – 点击</li><li>value – 设值</li><li>refresh – 刷新</li><li>pagejump – 当页url跳转</li></ul><p>然后输入 执行前等待时间 / 和上一步执行中间间隔时间</p><p>可以测试运行当前事件，也可以把事件添加到事务流程中。</p><h3 id="流程事件管理">流程事件管理</h3><p>添加后会返回流程页，<br>如下加了一条，等待一秒后，(click)点击第一个&lt;a&gt;标签</p><p><img src="/img/mypost/robot_liuch.jpg" alt="robot"></p><p>如下表示，<br>等待一秒后，(click)点击第一个&lt;a&gt;标签的链接，<br>再等待一秒后，往第一个input输入框里赋值 你好</p><p><img src="/img/mypost/robot_liuch2.jpg" alt="robot"></p><p>可以选择继续添加，<br>可以选择返回主页，<br>可以测试运行单个事件，<br>可以删除单个事件；</p><h3 id="事务管理">事务管理</h3><p>继续到主页</p><p>事务支持新增，删除，运行，轮播，导出，导入</p><p><img src="/img/mypost/robot_main.jpg" alt="robot"></p><h4 id="运行事务">运行事务</h4><p>运行主要是按定好的流程运行每个事件，<br>运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。</p><h4 id="轮播事务">轮播事务</h4><p>轮播表示的是循环运行，运行完一次后立即进行下一次。<br>中间的间隔是第一个事件的等待时间。<br>由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。</p><h4 id="导入导出事务">导入导出事务</h4><p>点击导出，事务的信息会自动保存到剪切板，复制给他人即可；</p><p>点击导入，将他人复制的事务信息导入即可；</p><h3 id="常见问题说明">常见问题说明</h3><blockquote><p>筛选器失效</p></blockquote><p>有时候页面与浏览器插件的连接会失效或过期，<br>这个时候可以刷新页面，然后重新打开这个插件页面。</p><h1 id="软件开发过程">软件开发过程</h1><h2 id="其他准备知识">其他准备知识</h2><p>关于chrome插件的开发，请看<a href="https://developer.chrome.com/extensions" target="_blank" rel="external">官网教程</a>或<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="external">其他教程</a></p><h2 id="软件开发设计">软件开发设计</h2><p>这个浏览器插件包括以下几部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">配置文件</span><br><span class="line">manifest.json</span><br><span class="line"></span><br><span class="line">样式文件夹</span><br><span class="line">/css</span><br><span class="line"></span><br><span class="line">html文件，主要放了popup.html，也就是这个插件管理页</span><br><span class="line">/html</span><br><span class="line"></span><br><span class="line">存放图片</span><br><span class="line">/images</span><br><span class="line"></span><br><span class="line">存放js</span><br><span class="line">主要实现的包括popup.js(管理页的后端)</span><br><span class="line">和background.js(浏览器的后端)</span><br><span class="line">/js</span><br></pre></td></tr></table></figure><h2 id="部分代码说明">部分代码说明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据存储</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_my_robot</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    chrome.storage.local.get([<span class="string">"my_robot"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) callback(res.my_robot)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据存储</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_my_robot</span>(<span class="params">new_robot, callback</span>) </span>&#123;</span><br><span class="line">    chrome.storage.local.set(&#123; <span class="string">"my_robot"</span>: new_robot &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) callback()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    chrome.tabs.query(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> port = chrome.tabs.connect(tabs[<span class="number">0</span>].id, &#123; <span class="attr">name</span>: <span class="string">"robot"</span> &#125;);</span><br><span class="line">        callback(port)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前tab执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exectab</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    chrome.tabs.query(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">        callback(tabs[<span class="number">0</span>].id)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接要执行的js代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jscode</span>(<span class="params">process</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> exec_code = <span class="string">"(function()&#123; \n"</span>;</span><br><span class="line">    <span class="keyword">if</span>(process[<span class="string">"tag"</span>].startsWith(<span class="string">"."</span>)) &#123;</span><br><span class="line">        exec_code += <span class="string">'var robot_node = document.getElementsByClassName("'</span> + process[<span class="string">"tag"</span>].substring(<span class="number">1</span>) + <span class="string">'")['</span> + process[<span class="string">"n"</span>] + <span class="string">'];'</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(process[<span class="string">"tag"</span>].startsWith(<span class="string">"#"</span>)) &#123;</span><br><span class="line">        exec_code += <span class="string">'var robot_node = document.getElementById("'</span> + process[<span class="string">"tag"</span>].substring(<span class="number">1</span>) + <span class="string">'");'</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        exec_code += <span class="string">'var robot_node = document.getElementsByTagName("'</span> + process[<span class="string">"tag"</span>] + <span class="string">'")['</span> + process[<span class="string">"n"</span>] + <span class="string">'];'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (process[<span class="string">"opera"</span>] == <span class="string">"click"</span>) &#123;</span><br><span class="line">        exec_code += <span class="string">"robot_node.click();"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process[<span class="string">"opera"</span>] == <span class="string">"value"</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 为react兼容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exec_code += <span class="string">"let lastValue = robot_node.value;"</span></span><br><span class="line">        exec_code += <span class="string">"robot_node.value=\""</span> + process[<span class="string">"value"</span>] + <span class="string">"\";"</span>;</span><br><span class="line">        exec_code += <span class="string">"let event = new Event('input', &#123; bubbles: true &#125;);"</span>;</span><br><span class="line">        exec_code += <span class="string">"event.simulated = true;"</span>;</span><br><span class="line">        exec_code += <span class="string">"let tracker = robot_node._valueTracker;"</span>;</span><br><span class="line">        exec_code += <span class="string">"if (tracker) &#123; tracker.setValue(lastValue); &#125;\n"</span>;</span><br><span class="line">        exec_code += <span class="string">"robot_node.dispatchEvent(event);"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process[<span class="string">"opera"</span>] == <span class="string">"refresh"</span>) &#123;</span><br><span class="line">        exec_code += <span class="string">"window.location.reload();"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process[<span class="string">"opera"</span>] == <span class="string">"pagejump"</span>) &#123;</span><br><span class="line">        exec_code += <span class="string">"window.location.href=\""</span> + process[<span class="string">"value"</span>] + <span class="string">"\";"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exec_code += <span class="string">"\n&#125;)();"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(exec_code)</span><br><span class="line">    <span class="keyword">return</span> exec_code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据存储数据更新主页</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refresh_cases</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    get_my_robot(<span class="function"><span class="params">my_robot</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (my_robot == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            set_my_robot(&#123;&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> cases = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> my_robot) &#123;</span><br><span class="line">                <span class="keyword">let</span> one_case = &#123;&#125;</span><br><span class="line">                one_case[<span class="string">"case_name"</span>] = i;</span><br><span class="line">                one_case[<span class="string">"content"</span>] = my_robot[i];</span><br><span class="line">                <span class="keyword">let</span> tr = <span class="string">'&lt;tr id='</span> + i + <span class="string">'&gt; \</span></span><br><span class="line"><span class="string">                            &lt;td&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="#" class="case_name"&gt;'</span> + i + <span class="string">'&lt;/a&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/td&gt; \</span></span><br><span class="line"><span class="string">                            &lt;td&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="#" class="run_case"&gt;运行&lt;/a&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="#" class="del_case"&gt;删除&lt;/a&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="#" class="lun_case"&gt;轮播&lt;/a&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="#" class="export_case" data-clipboard-text='</span> + <span class="built_in">JSON</span>.stringify(one_case) + <span class="string">'&gt;导出&lt;/a&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/td&gt; \</span></span><br><span class="line"><span class="string">                        &lt;/tr&gt;'</span>;</span><br><span class="line">                cases = cases + tr;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">"#cases"</span>).html(cases);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">'.export_case'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新单个事务的流程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refresh_process</span>(<span class="params">case_name</span>) </span>&#123;</span><br><span class="line">    get_my_robot(<span class="function"><span class="params">my_robot</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = my_robot[case_name];</span><br><span class="line">        <span class="keyword">var</span> process_li = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> lili = <span class="string">'&lt;li class="collection-item" id="process-'</span> + i + <span class="string">'"&gt; \</span></span><br><span class="line"><span class="string">                            &lt;div class="row "&gt; \</span></span><br><span class="line"><span class="string">                                &lt;div class="col s6 "&gt;标签：'</span> + data[i][<span class="string">"tag"</span>] + <span class="string">'&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                                &lt;div class="col s6 "&gt;#：'</span> + data[i][<span class="string">"n"</span>] + <span class="string">'&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;div class="row "&gt; \</span></span><br><span class="line"><span class="string">                                &lt;div class="col s6 "&gt;操作：'</span> + data[i][<span class="string">"opera"</span>] + <span class="string">'&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                                &lt;div class="col s6 "&gt;等待：'</span> + data[i][<span class="string">"wait"</span>] + <span class="string">'秒&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;div class="row "&gt; \</span></span><br><span class="line"><span class="string">                                &lt;div class="col s12 "&gt;赋值：'</span> + data[i][<span class="string">"value"</span>] + <span class="string">'&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/div&gt; \</span></span><br><span class="line"><span class="string">                            &lt;div class="row "&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="# "&gt; \</span></span><br><span class="line"><span class="string">                                    &lt;div class="col s6" id="process_test_run" &gt;test&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                                &lt;/a&gt; \</span></span><br><span class="line"><span class="string">                                &lt;a href="# "&gt; \</span></span><br><span class="line"><span class="string">                                    &lt;div class="col s6 " id="process_del"&gt;删除&lt;/div&gt; \</span></span><br><span class="line"><span class="string">                                &lt;/a&gt; \</span></span><br><span class="line"><span class="string">                            &lt;/div&gt; \</span></span><br><span class="line"><span class="string">                        &lt;/li&gt; '</span>;</span><br><span class="line">            process_li = process_li + lili;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"#process_list"</span>).html(process_li);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选器</span></span><br><span class="line">    <span class="keyword">var</span> tag_types = [<span class="string">"class/id选择器"</span>, <span class="string">"a"</span>, <span class="string">"body"</span>, <span class="string">"button"</span>, <span class="string">"div"</span>, <span class="string">"i"</span>, <span class="string">"img"</span>, <span class="string">"input"</span>, <span class="string">"li"</span>, <span class="string">"p"</span>, <span class="string">"span"</span>, <span class="string">"td"</span>, <span class="string">"textarea"</span>, <span class="string">"tr"</span>, <span class="string">"ul"</span>, <span class="string">"h1"</span>, <span class="string">"h2"</span>, <span class="string">"h3"</span>, <span class="string">"h4"</span>, <span class="string">"h5"</span>];</span><br><span class="line">    <span class="comment">// 操作</span></span><br><span class="line">    <span class="keyword">var</span> operas = [<span class="string">"click"</span>, <span class="string">"value"</span>, <span class="string">"refresh"</span>, <span class="string">"pagejump"</span>];</span><br><span class="line">    <span class="keyword">var</span> case_name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> init_select = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    refresh_cases();</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'.modal'</span>).modal();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接当前页面</span></span><br><span class="line">    exectab(<span class="function"><span class="params">tab_id</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行事务，调用background</span></span><br><span class="line">        $(<span class="string">"#cases"</span>).on(<span class="string">"click"</span>, <span class="string">".run_case"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> case_name = $(<span class="keyword">this</span>).parent().parent().attr(<span class="string">"id"</span>);</span><br><span class="line">            <span class="keyword">var</span> save_run = $(<span class="keyword">this</span>).parent().html();</span><br><span class="line">            <span class="keyword">var</span> that = $(<span class="keyword">this</span>).parent();</span><br><span class="line">            that.html(<span class="string">"运行中"</span>);</span><br><span class="line">            get_my_robot(<span class="function"><span class="params">my_robot</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> bg = chrome.extension.getBackgroundPage();</span><br><span class="line">                bg.execute(my_robot[case_name], tab_id);</span><br><span class="line">                <span class="keyword">var</span> process_wait = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class="line">                    process_wait = process_wait + my_robot[case_name][i][<span class="string">"wait"</span>] * <span class="number">1000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    that.html(save_run);</span><br><span class="line">                &#125;, process_wait)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 轮播事务</span></span><br><span class="line">        $(<span class="string">"#cases"</span>).on(<span class="string">"click"</span>, <span class="string">".lun_case"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> case_name = $(<span class="keyword">this</span>).parent().parent().attr(<span class="string">"id"</span>);</span><br><span class="line">            <span class="keyword">var</span> save_run = $(<span class="keyword">this</span>).parent().html();</span><br><span class="line">            <span class="keyword">var</span> that = $(<span class="keyword">this</span>).parent();</span><br><span class="line">            that.html(<span class="string">"运行中"</span>);</span><br><span class="line">            get_my_robot(<span class="function"><span class="params">my_robot</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> process_wait = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; <span class="number">100</span>; n++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class="line">                        process_wait = process_wait + my_robot[case_name][i][<span class="string">"wait"</span>] * <span class="number">1000</span>;</span><br><span class="line">                        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            chrome.tabs.executeScript(tab_id, &#123; <span class="attr">code</span>: jscode(my_robot[case_name][i]) &#125;);</span><br><span class="line">                        &#125;, process_wait);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    that.html(save_run);</span><br><span class="line">                &#125;, process_wait);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 导入事务</span></span><br><span class="line">        $(<span class="string">"#cases"</span>).on(<span class="string">"click"</span>, <span class="string">".export_case"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).html(<span class="string">"导出成功"</span>);</span><br><span class="line">            <span class="keyword">var</span> that = $(<span class="keyword">this</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                that.html(<span class="string">"导出"</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="感谢">感谢</h1><ul><li><a href="http://www.materializecss.cn/about.html" target="_blank" rel="external">materializecss</a></li><li><a href="https://developer.chrome.com/extensions" target="_blank" rel="external">官方轮子</a></li><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="external">插件教程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIVE源码学习-hivehook尝试表血缘与字段血缘的解析</title>
      <link href="article/2020/article_16_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-hivehook%E5%B0%9D%E8%AF%95%E8%A1%80%E7%BC%98%E8%A7%A3%E6%9E%90/"/>
      <url>article/2020/article_16_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-hivehook%E5%B0%9D%E8%AF%95%E8%A1%80%E7%BC%98%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>hive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个</p><ul><li><p>driver run的时候</p></li><li><p>执行计划semanticAnalyze前后</p></li><li><p>查询放入job之前</p></li><li><p>exec前后</p></li><li><p>执行失败时</p></li></ul><p>下面引用一份完整的hive中hook的流程，包括相应的配置项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Driver.run()</span><br><span class="line"></span><br><span class="line">=&gt; HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)</span><br><span class="line"></span><br><span class="line">=&gt; Driver.compile()</span><br><span class="line"></span><br><span class="line">=&gt; HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)</span><br><span class="line"></span><br><span class="line">=&gt; SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)</span><br><span class="line"></span><br><span class="line">=&gt; HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)</span><br><span class="line"></span><br><span class="line">=&gt; <span class="function">QueryString <span class="title">redactor</span><span class="params">(hive.exec.query.redactor.hooks)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>=&gt; QueryPlan Generation</span><br><span class="line"></span><br><span class="line">=&gt; Authorization</span><br><span class="line"></span><br><span class="line">=&gt; Driver.execute()</span><br><span class="line"></span><br><span class="line">=&gt; ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)</span><br><span class="line"></span><br><span class="line">=&gt; TaskRunner</span><br><span class="line"></span><br><span class="line">=&gt; <span class="keyword">if</span> failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)</span><br><span class="line"></span><br><span class="line">=&gt; ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)</span><br><span class="line"></span><br><span class="line">=&gt; HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)</span><br></pre></td></tr></table></figure><h2 id="血缘解析">血缘解析</h2><p>这边要举的具体例子为利用hive自带的血缘解析写一个hook。</p><p>首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息</p><p>因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。</p><p>新建一个maven项目,引用hive-exec，版本按照hive的来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>直接上代码，表和字段级直接都放里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.hooks.HookContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.hooks.LineageInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.metastore.api.Table;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: ganjiacheng@souche.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/4 3:18 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLineagehook</span> <span class="keyword">implements</span> <span class="title">ExecuteWithHookContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(MyLineagehook.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出表</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; inputTables;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入表</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; outputTables;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字段血缘 Map </span></span><br><span class="line">    <span class="comment">// key为输出字段，value为来源字段数组</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ArrayList&lt;String&gt;&gt; fieldLineage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLineagehook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inputTables = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        outputTables = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        fieldLineage = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理表的格式为 库.表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">dealOutputTable</span><span class="params">(Table table)</span> </span>&#123;</span><br><span class="line">        String dbName = table.getDbName();</span><br><span class="line">        String tableName = table.getTableName();</span><br><span class="line">        <span class="keyword">return</span> dbName != <span class="keyword">null</span> ? String.format(<span class="string">"%s.%s"</span>, dbName, tableName) : tableName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理输出字段的格式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">dealDepOutputField</span><span class="params">(LineageInfo.DependencyKey dependencyKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());</span><br><span class="line">            String field = dependencyKey.getFieldSchema().getName();</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, tableName, field);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"deal dep output field error"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理来源字段的格式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">dealBaseOutputField</span><span class="params">(LineageInfo.BaseColumnInfo baseColumnInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());</span><br><span class="line">            String field = baseColumnInfo.getColumn().getName();</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, tableName, field);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"deal base output field error"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要重写的方法，入口，</span></span><br><span class="line">    <span class="comment">// 血缘的信息在hookContext.getLinfo()</span></span><br><span class="line">    <span class="comment">// 结构是集合，每个是一个map，代表一个字段的血缘，</span></span><br><span class="line">    <span class="comment">// 每个map的key为输出字段，value为来源字段</span></span><br><span class="line">    <span class="comment">// 处理表血缘就直接忽略字段，因为存在set里就避免重复</span></span><br><span class="line">    <span class="comment">// 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(HookContext hookContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;LineageInfo.DependencyKey, LineageInfo.Dependency&gt; dep: hookContext.getLinfo().entrySet())&#123;</span><br><span class="line">            <span class="comment">// 表血缘</span></span><br><span class="line">            Optional.ofNullable(dep.getKey())</span><br><span class="line">                    .map(LineageInfo.DependencyKey::getDataContainer)</span><br><span class="line">                    .map(LineageInfo.DataContainer::getTable)</span><br><span class="line">                    .map(<span class="keyword">this</span>::dealOutputTable)</span><br><span class="line">                    .ifPresent(outputTables::add);</span><br><span class="line">            Optional.ofNullable(dep.getValue())</span><br><span class="line">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class="line">                    .ifPresent(items -&gt; items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)</span><br><span class="line">                            .map(LineageInfo.TableAliasInfo::getTable)</span><br><span class="line">                            .map(<span class="keyword">this</span>::dealOutputTable)</span><br><span class="line">                            .forEach(inputTables::add));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字段血缘</span></span><br><span class="line">            String column = Optional.ofNullable(dep.getKey())</span><br><span class="line">                    .map(<span class="keyword">this</span>::dealDepOutputField)</span><br><span class="line">                    .map(aimField -&gt; &#123;</span><br><span class="line">                        fieldLineage.put(aimField, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                        <span class="keyword">return</span> aimField;</span><br><span class="line">                    &#125;).orElse(<span class="keyword">null</span>);</span><br><span class="line">            Optional.ofNullable(dep.getValue())</span><br><span class="line">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class="line">                    .ifPresent(items -&gt; items.stream()</span><br><span class="line">                            .map(<span class="keyword">this</span>::dealBaseOutputField)</span><br><span class="line">                            .forEach(item -&gt; &#123;</span><br><span class="line">                                fieldLineage.get(column).add(item);</span><br><span class="line">                            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"来源表:"</span>);</span><br><span class="line">        System.out.println(inputTables);</span><br><span class="line">        System.out.println(<span class="string">"输出表:"</span>);</span><br><span class="line">        System.out.println(outputTables);</span><br><span class="line">        System.out.println(<span class="string">"字段血缘:"</span>);</span><br><span class="line">        System.out.println(fieldLineage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法">使用方法</h2><p>编译后生成jar文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">启动hive</span><br><span class="line">&gt;hive</span><br><span class="line"></span><br><span class="line">添加jar包</span><br><span class="line">&gt;add jar xxx.jar;</span><br><span class="line"></span><br><span class="line">设置hook</span><br><span class="line">&gt;set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;</span><br><span class="line"></span><br><span class="line">运行一个insert语句</span><br></pre></td></tr></table></figure><p>效果展示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> myuser_info</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    m.id <span class="keyword">AS</span> <span class="keyword">id</span>,</span><br><span class="line">    m.name <span class="keyword">AS</span> <span class="keyword">name</span>,</span><br><span class="line">    mp.phone <span class="keyword">AS</span> phone,</span><br><span class="line">    me.email <span class="keyword">AS</span> email</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    myuser m</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        *</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        myuser_phone</span><br><span class="line">) mp</span><br><span class="line"><span class="keyword">ON</span> m.id=mp.id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    myuser_email me</span><br><span class="line"><span class="keyword">ON</span> m.id=me.id</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">来源表:</span><br><span class="line">[default.myuser_phone, default.myuser_email, default.myuser]</span><br><span class="line">输出表:</span><br><span class="line">[default.myuser_info]</span><br><span class="line">字段血缘:</span><br><span class="line">&#123;default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>这边的实现比直接用antlr4解析方便很多，代码量也比较少。</p><p>这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。</p><p>还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。</p><p>这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于antlr4实现hiveSQL的解析[表血缘和字段血缘]</title>
      <link href="article/2020/article_14_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E8%A1%A8%E8%A1%80%E7%BC%98%E5%92%8C%E5%AD%97%E6%AE%B5%E8%A1%80%E7%BC%98/"/>
      <url>article/2020/article_14_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E8%A1%A8%E8%A1%80%E7%BC%98%E5%92%8C%E5%AD%97%E6%AE%B5%E8%A1%80%E7%BC%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>关于 HiveSQL 血缘，一般表示的就是 hive 数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义 SQL 任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。</p><p>有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。</p><p>代码实现参考：<a href="https://github.com/webgjc/sql-parser/" target="_blank" rel="external">https://github.com/webgjc/sql-parser/</a></p><h2 id="实现思路">实现思路</h2><p>一般来说比较直接的实现方式是 hivehook 的 LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了 hive 自带的 antlr3 的 hql 解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用 hivehook 实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。</p><p>这边就考虑用 antlr4 配合 hive 内部的 Hplsql.g4 直接实现一个血缘的解析。实现方式还是 visit 模式。</p><h3 id="表血缘">表血缘</h3><p>首先表血缘是比较之间简单的，比如对于一个 insert 来说，目标表永远只有一个，来源表是 select 中所有 from 的真实表。</p><h3 id="字段血缘">字段血缘</h3><p>对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。</p><p>这边最后的考虑是将每个 select 剥离出来存成一个 object，其中包括来源表(来源子 select 则为 null)，select 字段，父 select 的 Index(第一层则为 null)。在解析完成后所有 select 的 object 存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。</p><h2 id="show-code">SHOW CODE</h2><h3 id="表血缘">表血缘</h3><p>首先定义好结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表名的结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableNameModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line">    <span class="keyword">private</span> String tableName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dealNameMark</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.startsWith(<span class="string">"`"</span>) &amp;&amp; name.endsWith(<span class="string">"`"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> name.substring(<span class="number">1</span>, name.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TableNameModel <span class="title">parseTableName</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">        TableNameModel tableNameModel = <span class="keyword">new</span> TableNameModel();</span><br><span class="line">        String[] splitTable = tableName.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">if</span>(splitTable.length == <span class="number">2</span>) &#123;</span><br><span class="line">            tableNameModel.setDbName(splitTable[<span class="number">0</span>]);</span><br><span class="line">            tableNameModel.setTableName(splitTable[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(splitTable.length == <span class="number">1</span>) &#123;</span><br><span class="line">            tableNameModel.setTableName(splitTable[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tableNameModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表血缘结构，对单个sql</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveTableLineageModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输出的表名</span></span><br><span class="line">    <span class="keyword">private</span> TableNameModel outputTable;</span><br><span class="line">    <span class="comment">// 输入的表名列表</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;TableNameModel&gt; inputTables;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表血缘主要过程，监听 insert 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSQLTableLineage</span> <span class="keyword">extends</span> <span class="title">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TableNameModel outputTable;</span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;TableNameModel&gt; inputTables = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// visitInsert获取insert的table_name节点，作为目标输出表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitInsert_stmt</span><span class="params">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">         outputTable = Optional.ofNullable(ctx)</span><br><span class="line">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .map(TableNameModel::parseTableName)</span><br><span class="line">                .orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitInsert_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取from真实表，加到来源表的Set里</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitFrom_table_clause</span><span class="params">(HplsqlParser.From_table_clauseContext ctx)</span> </span>&#123;</span><br><span class="line">        Optional.ofNullable(ctx)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .map(TableNameModel::parseTableName)</span><br><span class="line">                .map(inputTables::add);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitFrom_table_clause(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiveTableLineageModel <span class="title">getTableLineage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HiveTableLineageModel hiveTableLineageModel = <span class="keyword">new</span> HiveTableLineageModel();</span><br><span class="line">        hiveTableLineageModel.setOutputTable(outputTable);</span><br><span class="line">        hiveTableLineageModel.setInputTables(inputTables);</span><br><span class="line">        <span class="keyword">return</span> hiveTableLineageModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段血缘">字段血缘</h3><p>定义结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字段名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldNameModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line">    <span class="keyword">private</span> String tableName;</span><br><span class="line">    <span class="keyword">private</span> String fieldName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带过程的表字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldNameWithProcessModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line">    <span class="keyword">private</span> String tableName;</span><br><span class="line">    <span class="keyword">private</span> String fieldName;</span><br><span class="line">    <span class="keyword">private</span> String process;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析单个select中存储字段和别名</span></span><br><span class="line"><span class="comment">// 如：select a+b as c from table;</span></span><br><span class="line"><span class="comment">// 存储数据为 fieldNames:[a,b] alias:c process:a+b</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveFieldLineageSelectItemModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; fieldNames;</span><br><span class="line">    <span class="keyword">private</span> String alias;</span><br><span class="line">    <span class="keyword">private</span> String process;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析单个select后的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveFieldLineageSelectModel</span> </span>&#123;</span><br><span class="line">    Integer id; <span class="comment">// index</span></span><br><span class="line">    Integer parentId; <span class="comment">// 父id，第一层select为null</span></span><br><span class="line">    TableNameModel fromTable; <span class="comment">// 来源表，来源子select则为null</span></span><br><span class="line">    String tableAlias; <span class="comment">// 表别名</span></span><br><span class="line">    List&lt;HiveFieldLineageSelectItemModel&gt; selectItems; <span class="comment">// select字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 血缘结果结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveFieldLineageModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FieldNameModel targetField; <span class="comment">// 目标字段</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;FieldNameModel&gt; sourceFields; <span class="comment">// 来源字段列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段血缘主要过程,主要针对的是 insert 语句，<br>但一般的 select 也是可以用的，因为是把最外层 select 的字段作为结果字段,<br>有一个限制是中间不能有 select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。<br>中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSQLFieldLineage</span> <span class="keyword">extends</span> <span class="title">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TableNameModel outputTable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; hiveFieldSelects = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; selectParentKeyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String thisSelectId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sourceSQL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for select Item</span></span><br><span class="line">    <span class="keyword">private</span> HiveFieldLineageSelectItemModel selectItemModel;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HiveFieldLineageSelectItemModel&gt; selectFields = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Boolean startSelectItem = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HiveSQLFieldLineage</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceSQL = sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">subSourceSql</span><span class="params">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sourceSQL.substring(</span><br><span class="line">                parserRuleContext.getStart().getStartIndex(),</span><br><span class="line">                parserRuleContext.getStop().getStopIndex() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert解析结果表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitInsert_stmt</span><span class="params">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        outputTable = Optional.ofNullable(ctx)</span><br><span class="line">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .map(TableNameModel::parseTableName)</span><br><span class="line">                .orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitInsert_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析select每个selectItem里用到字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitExpr</span><span class="params">(HplsqlParser.ExprContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(startSelectItem) &#123;</span><br><span class="line">            Optional.ofNullable(ctx)</span><br><span class="line">                    .map(HplsqlParser.ExprContext::expr_atom)</span><br><span class="line">                    .map(HplsqlParser.Expr_atomContext::ident)</span><br><span class="line">                    .map(ParseTree::getText)</span><br><span class="line">                    .ifPresent(s -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!StringUtils.isNumeric(s)) &#123;</span><br><span class="line">                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitExpr(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitSelect_list_item</span><span class="params">(HplsqlParser.Select_list_itemContext ctx)</span> </span>&#123;</span><br><span class="line">        startSelectItem = <span class="keyword">true</span>;</span><br><span class="line">        selectItemModel = <span class="keyword">new</span> HiveFieldLineageSelectItemModel();</span><br><span class="line">        selectItemModel.setFieldNames(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        Optional.ofNullable(ctx)</span><br><span class="line">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .ifPresent(selectItemModel::setProcess);</span><br><span class="line">        Optional.ofNullable(ctx)</span><br><span class="line">                .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class="line">                .map(HplsqlParser.Select_list_aliasContext::ident)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .ifPresent(selectItemModel::setAlias);</span><br><span class="line">        Object visit = <span class="keyword">super</span>.visitSelect_list_item(ctx);</span><br><span class="line">        selectFields.add(selectItemModel);</span><br><span class="line">        <span class="keyword">return</span> visit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * from语句，处理于所有selectItem结束</span></span><br><span class="line"><span class="comment">     * 对上面解析出的字段名中的表别名进行处理 如t0.field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitFrom_clause</span><span class="params">(HplsqlParser.From_clauseContext ctx)</span> </span>&#123;</span><br><span class="line">        startSelectItem = <span class="keyword">false</span>;</span><br><span class="line">        HashMap&lt;String, List&lt;HiveFieldLineageSelectItemModel&gt;&gt; fieldItems = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(HiveFieldLineageSelectItemModel item: selectFields) &#123;</span><br><span class="line">            HashMap&lt;String, HashSet&lt;String&gt;&gt; aliasSet = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String field: item.getFieldNames()) &#123;</span><br><span class="line">                String[] sp = field.split(<span class="string">"\\."</span>);</span><br><span class="line">                <span class="keyword">if</span>(sp.length == <span class="number">2</span>)&#123;</span><br><span class="line">                    String key = thisSelectId + <span class="string">"_"</span> + sp[<span class="number">0</span>];</span><br><span class="line">                    aliasSet.computeIfAbsent(key, t -&gt; <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">                    aliasSet.get(key).add(sp[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sp.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">boolean</span> flat = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(String k: selectParentKeyMap.values()) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k.startsWith(thisSelectId + <span class="string">"_"</span>)) &#123;</span><br><span class="line">                            aliasSet.computeIfAbsent(k, t -&gt; <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">                            aliasSet.get(k).add(sp[<span class="number">0</span>]);</span><br><span class="line">                            flat=<span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flat) &#123;</span><br><span class="line">                        String key = thisSelectId + <span class="string">"_"</span>;</span><br><span class="line">                        aliasSet.computeIfAbsent(key, t -&gt; <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">                        aliasSet.get(key).add(sp[<span class="number">0</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(String key: aliasSet.keySet()) &#123;</span><br><span class="line">                fieldItems.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                HiveFieldLineageSelectItemModel selectItemModel = <span class="keyword">new</span> HiveFieldLineageSelectItemModel();</span><br><span class="line">                selectItemModel.setFieldNames(aliasSet.get(key));</span><br><span class="line">                selectItemModel.setAlias(item.getAlias());</span><br><span class="line">                selectItemModel.setProcess(item.getProcess());</span><br><span class="line">                <span class="keyword">if</span>(selectItemModel.getFieldNames().size() == <span class="number">1</span> &amp;&amp; selectItemModel.getAlias() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());</span><br><span class="line">                &#125;</span><br><span class="line">                fieldItems.get(key).add(selectItemModel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String key: fieldItems.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hiveFieldSelects.get(key) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitFrom_clause(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进入select前</span></span><br><span class="line"><span class="comment">     * 解析每个select存信息并另存父子关系</span></span><br><span class="line"><span class="comment">     * 父子来源于from subSelect, join subSelect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitSelect_stmt</span><span class="params">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        List&lt;HplsqlParser.Fullselect_stmt_itemContext&gt; selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();</span><br><span class="line">        <span class="keyword">for</span>(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) &#123;</span><br><span class="line">            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = <span class="keyword">new</span> HiveFieldLineageSelectModel();</span><br><span class="line">            Integer thisId = selectItem.getStart().getStartIndex();</span><br><span class="line">            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();</span><br><span class="line">            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class="line">                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class="line">                    .orElse(<span class="keyword">null</span>);</span><br><span class="line">            Optional.ofNullable(fromTableNameClause)</span><br><span class="line">                    .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .map(TableNameModel::parseTableName)</span><br><span class="line">                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);</span><br><span class="line">            Optional.ofNullable(fromTableNameClause)</span><br><span class="line">                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class="line">                    .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class="line"></span><br><span class="line">            Optional.ofNullable(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class="line">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class="line"></span><br><span class="line">            String alias = hiveFieldLineageSelectModel.getTableAlias();</span><br><span class="line">            String thisKey = String.format(<span class="string">"%s_%s"</span>, thisId, alias == <span class="keyword">null</span> ? <span class="string">""</span>: alias);</span><br><span class="line">            hiveFieldLineageSelectModel.setId(thisKey + <span class="string">""</span>);</span><br><span class="line">            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));</span><br><span class="line">            hiveFieldLineageSelectModel.setSelectItems(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);</span><br><span class="line"></span><br><span class="line">            Optional.ofNullable(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class="line">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class="line">                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class="line">                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class="line">                    .ifPresent(subSelects -&gt;</span><br><span class="line">                            subSelects.forEach(item -&gt;</span><br><span class="line">                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));</span><br><span class="line"></span><br><span class="line">            List&lt;HplsqlParser.From_join_clauseContext&gt; fromJoinClauses = Optional.ofNullable(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class="line">                    .orElse(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">for</span>(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) &#123;</span><br><span class="line">                HiveFieldLineageSelectModel joinSelect = <span class="keyword">new</span> HiveFieldLineageSelectModel();</span><br><span class="line">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class="line">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class="line">                        .map(RuleContext::getText)</span><br><span class="line">                        .map(TableNameModel::parseTableName)</span><br><span class="line">                        .ifPresent(joinSelect::setFromTable);</span><br><span class="line">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class="line">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class="line">                        .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class="line">                        .map(RuleContext::getText)</span><br><span class="line">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class="line"></span><br><span class="line">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class="line">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class="line">                        .map(RuleContext::getText)</span><br><span class="line">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class="line"></span><br><span class="line">                String jalias = joinSelect.getTableAlias();</span><br><span class="line">                String jkey = String.format(<span class="string">"%s_%s"</span>, thisId, jalias == <span class="keyword">null</span> ? <span class="string">""</span>: jalias);</span><br><span class="line">                joinSelect.setId(jkey);</span><br><span class="line">                joinSelect.setParentId(selectParentKeyMap.get(thisId));</span><br><span class="line">                joinSelect.setSelectItems(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                hiveFieldSelects.put(jkey, joinSelect);</span><br><span class="line"></span><br><span class="line">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class="line">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class="line">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class="line">                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class="line">                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class="line">                        .ifPresent(subSelects -&gt;</span><br><span class="line">                                subSelects.forEach(item -&gt;</span><br><span class="line">                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitSelect_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理每个子select进入前，</span></span><br><span class="line"><span class="comment">     * 初始化selectItem相关的变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitSubselect_stmt</span><span class="params">(HplsqlParser.Subselect_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        thisSelectId = ctx.getStart().getStartIndex() + <span class="string">""</span>;</span><br><span class="line">        selectFields = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitSubselect_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HiveFieldLineageSelectModel&gt; hiveFieldSelectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换HashMap存储为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transSelectToList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String key: hiveFieldSelects.keySet()) &#123;</span><br><span class="line">            hiveFieldSelectList.add(hiveFieldSelects.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目标字段</span></span><br><span class="line"><span class="comment">     * 也就是parentId为null的最外层select的字段别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;FieldNameModel&gt; <span class="title">getTargetFields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; items = hiveFieldSelectList.stream()</span><br><span class="line">                .filter(item -&gt; item.getParentId() == <span class="keyword">null</span>)</span><br><span class="line">                .map(HiveFieldLineageSelectModel::getSelectItems)</span><br><span class="line">                .map(fields -&gt; fields.stream()</span><br><span class="line">                        .map(HiveFieldLineageSelectItemModel::getAlias)</span><br><span class="line">                        .collect(Collectors.toList()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; item: items) &#123;</span><br><span class="line">            res.addAll(item);</span><br><span class="line">        &#125;</span><br><span class="line">        res = res.stream().distinct().collect(Collectors.toList());</span><br><span class="line">        List&lt;FieldNameModel&gt; fieldNameModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String i: res) &#123;</span><br><span class="line">            FieldNameModel fieldNameModel = <span class="keyword">new</span> FieldNameModel();</span><br><span class="line">            <span class="keyword">if</span>(outputTable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fieldNameModel.setDbName(outputTable.getDbName());</span><br><span class="line">                fieldNameModel.setTableName(outputTable.getTableName());</span><br><span class="line">            &#125;</span><br><span class="line">            fieldNameModel.setFieldName(i);</span><br><span class="line">            fieldNameModels.add(fieldNameModel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fieldNameModels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;FieldNameWithProcessModel&gt; sourceFields;</span><br><span class="line">    <span class="keyword">private</span> String fieldProcess = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归按每个字段从外到内寻找每个字段的来源</span></span><br><span class="line"><span class="comment">     * 逻辑为最外的字段别名，父id -&gt; 匹配子id别名 -&gt;</span></span><br><span class="line"><span class="comment">     * -&gt; 如果是来源是表，存储，如果来源是子select，继续递归</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findFieldSource</span><span class="params">(String targetField, String parentId)</span> </span>&#123;</span><br><span class="line">        hiveFieldSelectList.forEach(select -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>((parentId == <span class="keyword">null</span> &amp;&amp; select.getParentId() == <span class="keyword">null</span>) ||</span><br><span class="line">                    (select.getParentId() != <span class="keyword">null</span> &amp;&amp; select.getParentId().equals(parentId))) &#123;</span><br><span class="line">                <span class="keyword">if</span>(select.getSelectItems() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(select.getFromTable() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class="line">                                    fieldProcess = selectItem.getProcess();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class="line">                                    findFieldSource(field, select.getId());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class="line">                                    fieldProcess = selectItem.getProcess();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class="line">                                    FieldNameWithProcessModel fieldNameWithProcessModel = <span class="keyword">new</span> FieldNameWithProcessModel();</span><br><span class="line">                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());</span><br><span class="line">                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());</span><br><span class="line">                                    fieldNameWithProcessModel.setFieldName(field);</span><br><span class="line">                                    fieldNameWithProcessModel.setProcess(fieldProcess);</span><br><span class="line">                                    sourceFields.add(fieldNameWithProcessModel);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取字段血缘列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;HiveFieldLineageModel&gt; <span class="title">getHiveFieldLineage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        transSelectToList();</span><br><span class="line">        List&lt;FieldNameModel&gt; targetFields = getTargetFields();</span><br><span class="line">        List&lt;HiveFieldLineageModel&gt; hiveFieldLineageModelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(FieldNameModel targetField: targetFields) &#123;</span><br><span class="line">            HiveFieldLineageModel hiveFieldLineageModel = <span class="keyword">new</span> HiveFieldLineageModel();</span><br><span class="line">            hiveFieldLineageModel.setTargetField(targetField);</span><br><span class="line">            sourceFields = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            fieldProcess = <span class="string">""</span>;</span><br><span class="line">            findFieldSource(targetField.getFieldName(), <span class="keyword">null</span>);</span><br><span class="line">            hiveFieldLineageModel.setSourceFields(sourceFields);</span><br><span class="line">            hiveFieldLineageModelList.add(hiveFieldLineageModel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hiveFieldLineageModelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取sql解析处理后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; <span class="title">getHiveFieldSelects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiveFieldSelects;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><p>举一个简单的 sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> db_test.table_result</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t1.id,</span><br><span class="line">    t2.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        id1 + id2 <span class="keyword">AS</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        db_test.table1</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">id</span>,</span><br><span class="line">            sourcename <span class="keyword">AS</span> <span class="keyword">name</span></span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            db_test.table2</span><br><span class="line">    )</span><br><span class="line">) t2</span><br><span class="line"><span class="keyword">ON</span> t1.id=t2.id</span><br></pre></td></tr></table></figure><p>解析后的表血缘</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"inputTables"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">            <span class="attr">"tableName"</span>: <span class="string">"table2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">            <span class="attr">"tableName"</span>: <span class="string">"table1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"outputTable"</span>: &#123;</span><br><span class="line">        <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">        <span class="attr">"tableName"</span>: <span class="string">"table_result"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析后的字段血缘</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"sourceFields"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">                <span class="attr">"fieldName"</span>: <span class="string">"id1"</span>,</span><br><span class="line">                <span class="attr">"process"</span>: <span class="string">"id1 + id2"</span>,</span><br><span class="line">                <span class="attr">"tableName"</span>: <span class="string">"table1"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">                <span class="attr">"fieldName"</span>: <span class="string">"id2"</span>,</span><br><span class="line">                <span class="attr">"process"</span>: <span class="string">"id1 + id2"</span>,</span><br><span class="line">                <span class="attr">"tableName"</span>: <span class="string">"table1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"targetField"</span>: &#123;</span><br><span class="line">            <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"id"</span>,</span><br><span class="line">            <span class="attr">"tableName"</span>: <span class="string">"table_result"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"sourceFields"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">                <span class="attr">"fieldName"</span>: <span class="string">"sourcename"</span>,</span><br><span class="line">                <span class="attr">"process"</span>: <span class="string">"sourcename"</span>,</span><br><span class="line">                <span class="attr">"tableName"</span>: <span class="string">"table2"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"targetField"</span>: &#123;</span><br><span class="line">            <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"name"</span>,</span><br><span class="line">            <span class="attr">"tableName"</span>: <span class="string">"table_result"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="引用说明">引用说明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">antlr4.version</span>&gt;</span>4.7.2<span class="tag">&lt;/<span class="name">antlr4.version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.RuleContext;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="comment">// 基于Hplsql.g4文件生成的, 使用antlr4-maven-plugin</span></span><br><span class="line"><span class="keyword">import</span> xxx.HplsqlBaseVisitor;</span><br><span class="line"><span class="keyword">import</span> xxx.HplsqlParser;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HQL解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIVE源码学习-执行计划Operators和优化Optimizers</title>
      <link href="article/2020/article_15_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92Operators%E5%92%8C%E4%BC%98%E5%8C%96Optimizers/"/>
      <url>article/2020/article_15_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92Operators%E5%92%8C%E4%BC%98%E5%8C%96Optimizers/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑执行">逻辑执行</h2><h3 id="首先看下之前的总体处理流程">首先看下之前的总体处理流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class="line">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class="line">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class="line"></span><br><span class="line">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure><p>hive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。</p><h3 id="首先看一个命令explain-sql">首先看一个命令explain {SQL}</h3><p>可以打印出执行sql对应的OperatorTree,<br>效果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; explain select count(1) from test_user group by `name`;</span><br><span class="line">OK</span><br><span class="line">STAGE DEPENDENCIES:</span><br><span class="line">  Stage-1 is a root stage</span><br><span class="line">  Stage-0 depends on stages: Stage-1</span><br><span class="line"></span><br><span class="line">STAGE PLANS:</span><br><span class="line">  Stage: Stage-1</span><br><span class="line">    Map Reduce</span><br><span class="line">      Map Operator Tree:</span><br><span class="line">          TableScan</span><br><span class="line">            alias: test_user</span><br><span class="line">            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Select Operator</span><br><span class="line">              expressions: name (type: string)</span><br><span class="line">              outputColumnNames: name</span><br><span class="line">              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              Group By Operator</span><br><span class="line">                aggregations: count(1)</span><br><span class="line">                keys: name (type: string)</span><br><span class="line">                mode: hash</span><br><span class="line">                outputColumnNames: _col0, _col1</span><br><span class="line">                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                Reduce Output Operator</span><br><span class="line">                  key expressions: _col0 (type: string)</span><br><span class="line">                  sort order: +</span><br><span class="line">                  Map-reduce partition columns: _col0 (type: string)</span><br><span class="line">                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                  value expressions: _col1 (type: bigint)</span><br><span class="line">      Reduce Operator Tree:</span><br><span class="line">        Group By Operator</span><br><span class="line">          aggregations: count(VALUE._col0)</span><br><span class="line">          keys: KEY._col0 (type: string)</span><br><span class="line">          mode: mergepartial</span><br><span class="line">          outputColumnNames: _col0, _col1</span><br><span class="line">          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">          Select Operator</span><br><span class="line">            expressions: _col1 (type: bigint)</span><br><span class="line">            outputColumnNames: _col0</span><br><span class="line">            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            File Output Operator</span><br><span class="line">              compressed: false</span><br><span class="line">              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              table:</span><br><span class="line">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class="line">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class="line">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class="line"></span><br><span class="line">  Stage: Stage-0</span><br><span class="line">    Fetch Operator</span><br><span class="line">      limit: -1</span><br><span class="line">      Processor Tree:</span><br><span class="line">        ListSink</span><br><span class="line"></span><br><span class="line">Time taken: 1.999 seconds, Fetched: 52 row(s)</span><br></pre></td></tr></table></figure><p>对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator<br><img src="/img/mypost/operator.png" alt="operator"></p><h3 id="继续跟踪大法从driver的compile开始">继续跟踪大法，从Driver的compile开始</h3><p>定位到下面这行，进入</p><blockquote><p>sem.analyze(tree, ctx);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyze</span><span class="params">(ASTNode ast, Context ctx)</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    analyzeInternal(ast); <span class="comment">//进入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analyzeInternal</span><span class="params">(ASTNode ast, PlannerContext plannerCtx)</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Generate Resolved Parse tree from syntax tree</span></span><br><span class="line">    LOG.info(<span class="string">"Starting Semantic Analysis"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!genResolvedParseTree(ast, plannerCtx)) &#123; <span class="comment">// 这边将每个AST节点转换为query block，跟进去看看</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. Gen OP Tree from resolved Parse Tree</span></span><br><span class="line">    Operator sinkOp = genOPTree(ast, plannerCtx); <span class="comment">//生成OperatorTree</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 7. Perform Logical optimization</span></span><br><span class="line">    <span class="comment">// 进行了查询优化</span></span><br><span class="line">    Optimizer optm = <span class="keyword">new</span> Optimizer();</span><br><span class="line">    optm.setPctx(pCtx);</span><br><span class="line">    optm.initialize(conf);</span><br><span class="line">    pCtx = optm.optimize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">genResolvedParseTree</span><span class="params">(ASTNode ast, PlannerContext plannerCtx)</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 4. continue analyzing from the child ASTNode.</span></span><br><span class="line">    Phase1Ctx ctx_1 = initPhase1Ctx();</span><br><span class="line">    preProcessForInsert(child, qb);</span><br><span class="line">    <span class="keyword">if</span> (!doPhase1(child, qb, ctx_1, plannerCtx)) &#123; <span class="comment">//这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充</span></span><br><span class="line">      <span class="comment">// if phase1Result false return</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    getMetaData(qb); <span class="comment">//从元数据获取上面explain中如下信息</span></span><br><span class="line">                  <span class="comment">//table: input，output，serde等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doPhase1</span><span class="params">(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span> (ast.getToken().getType()) &#123; <span class="comment">//判断AST节点类型</span></span><br><span class="line">        <span class="keyword">case</span> HiveParser.TOK_SELECTDI:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> HiveParser.TOK_SELECT:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> HiveParser.TOK_WHERE:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">case</span> HiveParser.TOK_INSERT_INTO:</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟上面的genOPTree，跳转到genPlan</p><p>genPlan是一次如下的深度优先遍历生成树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Operator <span class="title">genPlan</span><span class="params">(QB parent, QBExpr qbexpr)</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) &#123;</span><br><span class="line">      <span class="keyword">boolean</span> skipAmbiguityCheck = viewSelect == <span class="keyword">null</span> &amp;&amp; parent.isTopLevelSelectStarQuery();</span><br><span class="line">      <span class="keyword">return</span> genPlan(qbexpr.getQB(), skipAmbiguityCheck);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.UNION) &#123;</span><br><span class="line">      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());</span><br><span class="line">      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),</span><br><span class="line">          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Operator <span class="title">genPlan</span><span class="params">(QB qb)</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> genPlan(qb, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Operator <span class="title">genPlan</span><span class="params">(QB qb, <span class="keyword">boolean</span> skipAmbiguityCheck)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String alias : qb.getSubqAliases()) &#123;</span><br><span class="line">      QBExpr qbexpr = qb.getSubqForAlias(alias);</span><br><span class="line">      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化器">优化器</h2><p>上面也已经涉及到优化器optimizer，</p><h3 id="optimizer的主要功能">optimizer的主要功能</h3><blockquote><p>（1）将多 multiple join 合并为一个 multi-way join；<br>（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；<br>（3）消减不必要的列；<br>（4）在表扫描操作中推行使用断言（predicate）；<br>（5）对于已分区的表，消减不必要的分区；<br>（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。</p></blockquote><h3 id="追踪optimizerinitialize">追踪Optimizer.initialize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(HiveConf hiveConf)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 往这里添加优化器，默认加下面两个，其他的根据conf配置添加</span></span><br><span class="line">    transformations = <span class="keyword">new</span> ArrayList&lt;Transform&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the additional postprocessing transformations needed if</span></span><br><span class="line">    <span class="comment">// we are translating Calcite operators into Hive operators.</span></span><br><span class="line">    transformations.add(<span class="keyword">new</span> HiveOpConverterPostProc());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the transformation that computes the lineage information.</span></span><br><span class="line">    transformations.add(<span class="keyword">new</span> Generator());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ParseContext <span class="title">optimize</span><span class="params">()</span> <span class="keyword">throws</span> SemanticException </span>&#123;</span><br><span class="line">    <span class="comment">// 执行每个优化器Transform的transform信息进行</span></span><br><span class="line">    <span class="comment">// ParseContext的优化</span></span><br><span class="line">    <span class="keyword">for</span> (Transform t : transformations) &#123;</span><br><span class="line">        pctx = t.transform(pctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未完待续join-operator">未完待续，join operator</h2>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIVE源码学习--实现一个自定义的HIVE序列化与反序列化器</title>
      <link href="article/2020/article_13_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89HIVE%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>article/2020/article_13_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89HIVE%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>hive有一个serde模块，其中就有很多的序列化器和反序列化器，</p><ul><li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li><li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li></ul><p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>hive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p><h2 id="实操">实操</h2><h3 id="数据准备">数据准备</h3><p>这边序列化一个比较简单的格式,<br>但对于其他的道理是一样的，一行对应于表格的一行数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1,name=&quot;jack&quot;,age=20</span><br><span class="line">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure><h3 id="新建项目myserde">新建项目myserde</h3><p>新建maven项目，引入hive-serde模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-serde<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: ganjiacheng@souche.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerde</span> <span class="keyword">extends</span> <span class="title">AbstractSerDe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储字段名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; columnNames;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储字段类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class="line">    <span class="keyword">private</span> ObjectInspector objectInspector;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</span><br><span class="line">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class="line">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class="line">        columnNames = Arrays.asList(columnNameString.split(<span class="string">","</span>));</span><br><span class="line">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class="line"></span><br><span class="line">        List&lt;ObjectInspector&gt; columnOIs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ObjectInspector oi;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class="line">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class="line">            columnOIs.add(oi);</span><br><span class="line">        &#125;</span><br><span class="line">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载的方法，直接调用上面的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(@Nullable Configuration configuration, Properties properties)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initialize(configuration, properties, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class="line">    <span class="comment">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Writable <span class="title">serialize</span><span class="params">(Object o, ObjectInspector objInspector)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</span><br><span class="line">        Object[] arr = (Object[]) o;</span><br><span class="line">        List&lt;String&gt; tt = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            tt.add(String.format(<span class="string">"%s=%s"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Text(StringUtils.join(tt, <span class="string">","</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerDeStats <span class="title">getSerDeStats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class="line">    <span class="comment">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class="line">    <span class="comment">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(Writable writable)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</span><br><span class="line">        Text text = (Text) writable;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String[] cols = text.toString().split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span>(String col: cols) &#123;</span><br><span class="line">            String[] item = col.split(<span class="string">"="</span>);</span><br><span class="line">            map.put(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Object&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class="line">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class="line">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class="line">            <span class="keyword">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class="line">                <span class="keyword">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class="line">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class="line">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectInspector <span class="title">getObjectInspector</span><span class="params">()</span> <span class="keyword">throws</span> SerDeException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectInspector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigurationErrors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getConfigurationErrors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldStoreFieldsInMetastore</span><span class="params">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建表与调试">建表与调试</h3><p>编译完刚才的项目后<br>打开本地hive<br>引入刚才开发的包</p><blockquote><p>add jar (项目路径)/target/xxx.jar</p></blockquote><p>建表，这里row format改为自己的序列化器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> <span class="string">`test_serde`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="keyword">string</span>,</span><br><span class="line">    <span class="string">`age`</span> <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'cn.ganjiacheng.MySerde'</span></span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure><p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p><blockquote><p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p></blockquote><p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>这边多了引号，到时候可以中间处理去掉即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select * from test_serde;</span><br><span class="line">OK</span><br><span class="line">1&quot;jack&quot;20</span><br><span class="line">2&quot;john&quot;30</span><br><span class="line">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure><p>再尝试插入一条数据，就会走serialize方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class="line">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class="line">Total jobs = 3</span><br><span class="line">Launching Job 1 out of 3</span><br><span class="line">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class="line">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class="line">Ended Job = job_local853094563_0001</span><br><span class="line">Stage-4 is selected by condition resolver.</span><br><span class="line">Stage-3 is filtered out by condition resolver.</span><br><span class="line">Stage-5 is filtered out by condition resolver.</span><br><span class="line">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class="line">Loading data to table default.test_serde</span><br><span class="line">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class="line">MapReduce Jobs Launched:</span><br><span class="line">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">Time taken: 13.902 seconds</span><br><span class="line"></span><br><span class="line">hive&gt; select * from test_serde;</span><br><span class="line">OK</span><br><span class="line">3qwe40</span><br><span class="line">1&quot;jack&quot;20</span><br><span class="line">2&quot;john&quot;30</span><br><span class="line">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure><p>来到hadoop确认一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class="line">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure><h2 id="关于开发时的debug">关于开发时的debug</h2><p>和部署hive后hive的hive clidriver的debug类似</p><p>首先开启</p><blockquote><p>hive --debug</p></blockquote><p>会显示正监听8000端口</p><p>然后在idea上打开myserde的项目，配置一个Remote，<br>host为loclahost，port为8000<br>use module为当前用到的module</p><p>在代码中间比如deserialize方法中打上断点，开启remote</p><p>然后hive命令行就会进入命令行模式</p><blockquote><p>add jar (项目路径)/target/xxx.jar<br>use default;<br>select * from test_serde;</p></blockquote><p>就会触发进入我们打在deserialize上的断点。</p><h2 id="学习借鉴">学习借鉴</h2><ul><li><a href="https://www.jianshu.com/p/9c43f03b97e7" target="_blank" rel="external">Hive系列之SerDe</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于antlr4实现HQL的解析[格式化]</title>
      <link href="article/2020/article_12_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>article/2020/article_12_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p><p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p><p>代码实现参考：<a href="https://github.com/webgjc/sql-parser/" target="_blank" rel="external">https://github.com/webgjc/sql-parser/</a></p><h2 id="设计思路">设计思路</h2><p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p><p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p><ol><li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li><li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li></ol><h2 id="实现思路">实现思路</h2><p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p><h3 id="主select部分">主SELECT部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">visitSelect_stmt</span><span class="params">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class="line">    <span class="comment">// 处理with子句</span></span><br><span class="line">    <span class="comment">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class="line">    <span class="comment">// 格式化每个子select</span></span><br><span class="line">    <span class="comment">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class="line">    <span class="comment">// 用当前格式化后的select替换掉标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select字段">SELECT字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getSelectItem</span><span class="params">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理case when的情况</span></span><br><span class="line">    <span class="comment">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="from来源">FROM来源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFromTableClause</span><span class="params">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理子select</span></span><br><span class="line">    <span class="comment">// 处理table来源的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFromJoin</span><span class="params">(HplsqlParser.From_join_clauseContext ctx, <span class="keyword">int</span> kong)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理from join的情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="where条件">WHERE条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeWhereExpr</span><span class="params">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理where的条件</span></span><br><span class="line">    <span class="comment">// 需要用到递归，树如下</span></span><br><span class="line">                     bool_expr</span><br><span class="line">                         |</span><br><span class="line">        bool_expr      operator     bool_expr</span><br><span class="line">            |                           |</span><br><span class="line">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字大小写处理">关键字大小写处理</h3><p>对于关键字的处理，本次不做详述，主要放在外面。<br>从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p><blockquote><p>HplsqlLexer lexer = new HplsqlLexer(input);<br>lexer.getAllTokens();</p></blockquote><h3 id="sql注释">sql注释</h3><p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p><h2 id="结果展示">结果展示</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> user_table ut <span class="keyword">left</span> <span class="keyword">join</span> test_table tt <span class="keyword">on</span> ut.id = tt.id)) <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">id</span> &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">id</span>,</span><br><span class="line">            <span class="keyword">name</span></span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            user_table ut</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">            test_table tt</span><br><span class="line">        <span class="keyword">ON</span> ut.id = tt.id</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="keyword">id</span> &gt; <span class="number">1</span> <span class="keyword">AND</span></span><br><span class="line">    <span class="keyword">id</span> &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="附录">附录</h2><p>完整代码</p><p>注释在代码中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSQLFormatter</span> <span class="keyword">extends</span> <span class="title">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sourceSQL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String formattedSQL = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> firstSelect = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HiveSQLFormatter</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceSQL = sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">subSourceSql</span><span class="params">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sourceSQL.substring(</span><br><span class="line">                parserRuleContext.getStart().getStartIndex(),</span><br><span class="line">                parserRuleContext.getStop().getStopIndex() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加空占位，主要为了缩进</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">addKongFormat</span><span class="params">(String s, Integer n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%"</span> + (s.length() + n * <span class="number">4</span>) + <span class="string">"s"</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存某个select的层级，key为startIndex</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; ceng = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; boolExpr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; boolExprOperator = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeWhereExpr</span><span class="params">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bool_exprContext.children.size() == <span class="number">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class="number">2</span>) &#123;</span><br><span class="line">            makeWhereExpr(bool_exprContext.bool_expr(<span class="number">0</span>));</span><br><span class="line">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class="number">1</span>).getStart().getStartIndex(),</span><br><span class="line">                    bool_exprContext.bool_expr(<span class="number">1</span>).getStop().getStopIndex() + <span class="number">1</span>));</span><br><span class="line">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class="line">                    bool_exprContext.getStop().getStopIndex()+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// select from 相关</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFromTableClause</span><span class="params">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class="line">        StringBuilder tmpSelect = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Optional.of(from_clauseContext)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class="line">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class="number">1</span>))</span><br><span class="line">                .ifPresent(tmpSelect::append);</span><br><span class="line">        <span class="comment">// from 子select(</span></span><br><span class="line">        Optional.of(from_clauseContext)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class="line">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class="line">                .ifPresent(tmpSelect::append);</span><br><span class="line">        <span class="comment">// 添加子select标记</span></span><br><span class="line">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class="line">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(fromSubIndex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmpSelect.append(<span class="string">"\n&#123;SELECT"</span>).append(fromSubIndex).append(<span class="string">"&#125;"</span>);</span><br><span class="line">            ceng.put(fromSubIndex, kong + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// )</span></span><br><span class="line">        Optional.of(from_clauseContext)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class="line">                .map(ParseTree -&gt; <span class="string">"\n"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class="line">                .ifPresent(tmpSelect::append);</span><br><span class="line">        <span class="comment">// from别名</span></span><br><span class="line">        Optional.of(from_clauseContext)</span><br><span class="line">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class="line">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class="line">                .map(ParserRuleContext -&gt; <span class="string">" "</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class="line">        <span class="keyword">return</span> tmpSelect.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  select 字段相关</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSelectItem</span><span class="params">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;String&gt; itemRes = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isCase = Optional.of(selectItem)</span><br><span class="line">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class="line">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class="line">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class="line">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class="line">                    StringBuilder tmpbuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    List&lt;String&gt; tmps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    Optional.of(expr_case_searchedContext)</span><br><span class="line">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class="line">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class="string">"\n"</span>, kong + <span class="number">1</span>))</span><br><span class="line">                            .map(tmpbuilder::append);</span><br><span class="line">                    Optional.of(expr_case_searchedContext)</span><br><span class="line">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class="line">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class="line">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class="string">" "</span> +</span><br><span class="line">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class="string">" "</span> +</span><br><span class="line">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class="string">" "</span> +</span><br><span class="line">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class="number">2</span>));</span><br><span class="line">                                &#125;</span><br><span class="line">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class="string">"\n"</span>));</span><br><span class="line">                            &#125;);</span><br><span class="line">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class="line">                            .map(ParseTree -&gt; <span class="string">"\n"</span> + addKongFormat(ParseTree.getText() +</span><br><span class="line">                                    <span class="string">" "</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class="number">1</span>).getText(), kong + <span class="number">2</span>))</span><br><span class="line">                            .map(tmpbuilder::append);</span><br><span class="line">                    Optional.of(expr_case_searchedContext)</span><br><span class="line">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class="line">                            .map(ParseTree -&gt; <span class="string">"\n"</span> + addKongFormat(ParseTree.getText(), kong + <span class="number">1</span>))</span><br><span class="line">                            .map(tmpbuilder::append);</span><br><span class="line">                    Optional.of(selectItem)</span><br><span class="line">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class="line">                            .map(select_list_aliasContext -&gt; <span class="string">"\n"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class="number">1</span>))</span><br><span class="line">                            .map(tmpbuilder::append);</span><br><span class="line">                    itemRes.set(tmpbuilder.toString());</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;).orElse(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isCase) &#123;</span><br><span class="line">            Optional.of(selectItem)</span><br><span class="line">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> itemRes.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getLateralView</span><span class="params">(HplsqlParser.Lateral_clause_itemContext ctx, <span class="keyword">int</span> kong)</span> </span>&#123;</span><br><span class="line">        StringBuilder lateralView = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        lateralView.append(<span class="string">" "</span>);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        lateralView.append(<span class="string">"\n"</span>);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class="line">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class="number">1</span>))</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        lateralView.append(<span class="string">" "</span>);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class="line">                .map(ParserRuleContext -&gt; <span class="string">"\n"</span> + ParserRuleContext.getText())</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class="line">                .map(ParserRuleContext -&gt; <span class="string">" "</span> + subSourceSql(ParserRuleContext))</span><br><span class="line">                .map(lateralView::append);</span><br><span class="line">        <span class="keyword">return</span> lateralView.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFromJoin</span><span class="params">(HplsqlParser.From_join_clauseContext ctx, <span class="keyword">int</span> kong)</span> </span>&#123;</span><br><span class="line">        StringBuilder fromjoinSQL = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class="line">                .map(from_join_type_clauseContext -&gt; <span class="string">"\n"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class="string">"\n"</span></span><br><span class="line">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class="string">"\n"</span></span><br><span class="line">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class="string">" "</span></span><br><span class="line">                        + subSourceSql(ctx.bool_expr()))</span><br><span class="line">                .map(fromjoinSQL::append);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class="line">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class="string">"\n"</span></span><br><span class="line">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class="line">                ).map(fromjoinSQL::append);</span><br><span class="line">        <span class="keyword">return</span> fromjoinSQL.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitSelect_stmt</span><span class="params">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class="line">        <span class="comment">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class="line">        <span class="keyword">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class="line">        String thisSelect = String.format(<span class="string">"&#123;SELECT%s&#125;"</span>, gstartIndex);</span><br><span class="line">        <span class="keyword">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class="line">            formattedSQL += thisSelect;</span><br><span class="line">            firstSelect = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder fullSelect = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// with语句</span></span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class="line">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class="line">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class="string">" "</span>)</span><br><span class="line">                .map(fullSelect::append);</span><br><span class="line">        Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class="line">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class="line">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class="line">                        item -&gt; item.ident().getText() + <span class="string">" "</span> +</span><br><span class="line">                                item.T_AS().getText() + <span class="string">"\n"</span> +</span><br><span class="line">                                item.T_OPEN_P().getText() + <span class="string">""</span> +</span><br><span class="line">                                String.format(<span class="string">"\n&#123;SELECT%s&#125;"</span>, item.select_stmt().getStart().getStartIndex()) + <span class="string">"\n"</span> +</span><br><span class="line">                                item.T_CLOSE_P().getText()</span><br><span class="line">                ).toArray(), <span class="string">",\n"</span>)).map(fullSelect::append);</span><br><span class="line">        <span class="comment">// 遍历子select添加位置标记</span></span><br><span class="line">        Integer gkong = ceng.get(gstartIndex) == <span class="keyword">null</span> ? <span class="number">0</span>: ceng.get(gstartIndex);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class="line">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class="line">            fullSelect.append(String.format(<span class="string">"&#123;SELECT%s&#125;"</span>, startIndex));</span><br><span class="line">            ceng.put(startIndex, gkong);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; selectSize - <span class="number">1</span>) &#123;</span><br><span class="line">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class="line">                fullSelect.append(<span class="string">"\n"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 格式化每个子select并替换标记</span></span><br><span class="line">        formattedSQL = formattedSQL.replace(String.format(<span class="string">"&#123;SELECT%s&#125;"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class="line">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class="line">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class="line">            Integer kong = ceng.get(thisIndex) == <span class="keyword">null</span> ? <span class="number">0</span>: ceng.get(thisIndex);</span><br><span class="line">            StringBuilder tmpSelect = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="comment">// select</span></span><br><span class="line">            tmpSelect.append(addKongFormat(</span><br><span class="line">                    subSelect.T_SELECT().getText(),</span><br><span class="line">                    kong)).append(<span class="string">"\n"</span>);</span><br><span class="line">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class="line">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class="line">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class="string">"\n"</span>, kong+<span class="number">1</span>))</span><br><span class="line">                    .map(tmpSelect::append);</span><br><span class="line">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class="line">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class="line">                    .map(select_list_itemContexts -&gt;</span><br><span class="line">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class="line">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class="string">",\n"</span>) + <span class="string">"\n"</span>).map(tmpSelect::append);</span><br><span class="line">            <span class="comment">// from</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class="line">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class="string">"\n"</span>, kong))</span><br><span class="line">                    .map(tmpSelect::append);</span><br><span class="line">            <span class="comment">// from 表</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class="line">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class="line">                    .map(tmpSelect::append);</span><br><span class="line">            <span class="comment">// join语句</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class="line">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class="line">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class="number">0</span> ?</span><br><span class="line">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class="line">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class="string">""</span>): <span class="string">""</span>)</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class="line">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class="line">                    .map(lateral_clause_itemContexts -&gt; <span class="string">"\n"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class="line">                            item -&gt; getLateralView(item, kong)).toArray(), <span class="string">"\n"</span>))</span><br><span class="line">                    .map(tmpSelect::append);</span><br><span class="line">            <span class="comment">// where</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class="line">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class="line">                    .map(ParseTree -&gt; <span class="string">"\n"</span> + addKongFormat(ParseTree.getText() + <span class="string">"\n"</span>, kong))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// where条件</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class="line">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class="line">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class="line">                        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(t == boolExpr.size() -<span class="number">1</span>)&#123;</span><br><span class="line">                                result.add(boolExpr.get(t));</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                result.add(boolExpr.get(t) + <span class="string">" "</span> + boolExprOperator.get(t));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        boolExpr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        boolExprOperator = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class="number">1</span>)).toArray(), <span class="string">"\n"</span>));</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">// group by</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class="line">                    .map(ParserRuleContext -&gt; <span class="string">"\n"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class="string">" "</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// group by 字段</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class="line">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class="line">                    .map(exprContexts -&gt; <span class="string">"\n"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class="keyword">this</span>::subSourceSql).toArray(), <span class="string">", "</span>), kong + <span class="number">1</span>))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// having 语句</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class="line">                    .map(having_clauseContext -&gt; <span class="string">"\n"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// order by</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class="line">                    .map(ParserRuleContext -&gt; <span class="string">"\n"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class="string">" "</span> + ParserRuleContext.T_BY(), kong))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// order by 字段</span></span><br><span class="line">            Optional.of(subSelect)</span><br><span class="line">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class="line">                    .map(ParserRuleContext -&gt; <span class="string">"\n"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class="line">                            RuleContext::getText).toArray(), <span class="string">", "</span>), kong + <span class="number">1</span>))</span><br><span class="line">                    .ifPresent((tmpSelect::append));</span><br><span class="line">            <span class="comment">// order by 参数</span></span><br><span class="line">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class="line">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class="line">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class="number">0</span> ? <span class="string">"\n"</span> + ParserRuleContext.get(<span class="number">0</span>).getText() : <span class="string">""</span>).ifPresent(tmpSelect::append);</span><br><span class="line">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class="line">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class="line">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class="number">0</span> ? <span class="string">"\n"</span> + ParserRuleContext.get(<span class="number">0</span>).getText() : <span class="string">""</span>).ifPresent(tmpSelect::append);</span><br><span class="line">            <span class="comment">// select 参数</span></span><br><span class="line">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class="line">                    .map(ParserRuleContext -&gt; <span class="string">"\n"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class="line">                    .ifPresent(tmpSelect::append);</span><br><span class="line">            formattedSQL = formattedSQL.replace(String.format(<span class="string">"&#123;SELECT%s&#125;"</span>, thisIndex), tmpSelect.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitSelect_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HQL解析 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客新增两个功能模块</title>
      <link href="article/2020/article_11_%E6%96%B0%E5%A2%9E%E4%B8%A4%E4%B8%AA%E5%8A%9F%E8%83%BD/"/>
      <url>article/2020/article_11_%E6%96%B0%E5%A2%9E%E4%B8%A4%E4%B8%AA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="入口">入口</h2><p>在主页侧边栏的FRIENDS模块中，</p><p>新增了<a href="http://piano.ganjiacheng.cn/" target="_blank" rel="external">我的钢琴屋</a> 和 <a href="/book/">我的阅读室</a></p><p>下面分别来阐述</p><h2 id="我的钢琴屋">我的钢琴屋</h2><p>这个是挂在github上的一个静态页面，github地址为</p><blockquote><p><a href="https://github.com/webgjc/tan8" target="_blank" rel="external">https://github.com/webgjc/tan8</a>【如侵权可下线】</p></blockquote><p>主要功能为练习和收听钢琴曲</p><h3 id="实现">实现</h3><p>其中包括一个flash播放器和一个数据列表</p><p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p><p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p><p>数据存储为json格式，在打开页面时直接加载</p><p>表单使用的是bootstrap-table</p><h2 id="我的阅读室">我的阅读室</h2><p>这个主要是为了能催自己多看看书，不迷茫。</p><p>每次看一本书也会记录下看书的笔记和感想。</p><h3 id="实现">实现</h3><p>这个是在原博客基础上的进行的一部分改造，</p><p>在主题源文件下layout/<br>新增book.ejs</p><p>在source/下新增book/ book/index.md<br>在头上加上</p><blockquote><p>layout: “book”</p></blockquote><p>这样就可以新增一个页面和路由到/book/</p><p>然后在_posts中主动区分一下一般页面和书评页面，<br>我这边实现是在头部加上</p><blockquote><p>book: true</p></blockquote><p>然后在book.ejs中,<br>对于每个post的处理前加上过滤,<br>然后就可以自己对书籍文章进行排版和构建，<br>比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class="line">    &lt;% if (post.book)&#123; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure><p>同时在主题下/layout/index.ejs<br>也加上过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class="line">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure><h2 id="最后一席话">最后一席话</h2><p>在工作以后，忙碌奔波之间，<br>读书不易，弹琴也不易，<br>为自己的坚持加个油；</p>]]></content>
      
      
      
        <tags>
            
            <tag> OTHER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIVE源码学习--从CliDriver跟踪整个执行流程</title>
      <link href="article/2020/article_10_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E4%BB%8ECliDriver%E8%B7%9F%E8%B8%AA%E6%95%B4%E4%B8%AA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>article/2020/article_10_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E4%BB%8ECliDriver%E8%B7%9F%E8%B8%AA%E6%95%B4%E4%B8%AA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p><p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p><h2 id="准备工作">准备工作</h2><p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p><p>本次hive调试版本都为1.2.1。</p><h2 id="show-code">SHOW CODE</h2><p>先借鉴一份整体的流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class="line">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class="line">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class="line"></span><br><span class="line">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure><p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>断点打在其中的main函数的</p><blockquote><p>int ret = new CliDriver().run(args);</p></blockquote><p>启动debug。</p><p>追踪到run函数，run中上面就是一些初始化类的操作<br>追踪到最后的executeDriver。</p><p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p><p>如果是有命令执行的时候<br>executeDriver中主要是读取每一行，到分号为止并执行</p><blockquote><p>ret = cli.processLine(line, true); //line为执行sql</p></blockquote><p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>下面真正进入执行的为</p><blockquote><p>ret = processCmd(command);</p></blockquote><p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p><blockquote><p>ret = processLocalCmd(cmd, proc, ss);</p></blockquote><p>找到processLocalCmd的</p><blockquote><p>ret = qp.run(cmd).getResponseCode();</p></blockquote><p>继续进入 run 的 runInternal, 找到</p><blockquote><p>ret = compileInternal(command);</p></blockquote><p>进入compileInternal 的 compile<br>compile这边比较重要，重点看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ASTNode tree = pd.parse(command, ctx); <span class="comment">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class="line">...</span><br><span class="line">SessionState.get().initTxnMgr(conf); <span class="comment">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class="line">...</span><br><span class="line">hook.preAnalyze(hookCtx, tree); <span class="comment">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class="line">sem.analyze(tree, ctx); <span class="comment">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class="line">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后继续跳回到runInternal，执行至，进入</p><blockquote><p>ret = execute();</p></blockquote><p>然后执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PRE_EXEC_HOOK <span class="comment">//执行hook</span></span><br><span class="line">DriverContext driverCxt = <span class="keyword">new</span> DriverContext(ctx); <span class="comment">//初始化运行容器</span></span><br><span class="line">driverCxt.prepare(plan);</span><br><span class="line"><span class="comment">// Add root Tasks to runnable</span></span><br><span class="line"><span class="keyword">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class="line">    driverCxt.addToRunnable(tsk); <span class="comment">//添加running任务，任务会进入一个队列</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">TaskRunner tskRun = driverCxt.pollFinished(); <span class="comment">// poll已经完成了的任务, 加到hookContext</span></span><br><span class="line">hookContext.addCompleteTask(tskRun);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class="line">... </span><br><span class="line"><span class="comment">// 遍历子任务加到running</span></span><br><span class="line"><span class="keyword">if</span> (tsk.getChildTasks() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class="line">            driverCxt.addToRunnable(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用POST_EXEC_HOOK</span></span><br><span class="line"><span class="comment">// 然后计算了一波cpu是使用情况</span></span><br><span class="line">plan.setDone(); <span class="comment">//完成</span></span><br></pre></td></tr></table></figure><h2 id="特别感谢">特别感谢</h2><ul><li><a href="https://blog.csdn.net/wzq6578702/article/list/3" target="_blank" rel="external">csdn大佬</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hadoop与hive的单节点部署和开发调试[mac]</title>
      <link href="article/2020/article_9_%E6%9C%AC%E5%9C%B0hadoop%E4%B8%8Ehive%E7%9A%84%E9%83%A8%E7%BD%B2-mac/"/>
      <url>article/2020/article_9_%E6%9C%AC%E5%9C%B0hadoop%E4%B8%8Ehive%E7%9A%84%E9%83%A8%E7%BD%B2-mac/</url>
      
        <content type="html"><![CDATA[<h1 id="预备">预备</h1><p>这边部署的<br>hadoop版本为 <a href="http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/" target="_blank" rel="external">2.7.3</a><br>hive版本为 <a href="http://archive.apache.org/dist/hive/hive-1.2.1/" target="_blank" rel="external">1.2.1</a><br>注:src为源码包</p><h1 id="hadoop搭建">Hadoop搭建</h1><h2 id="解压进入配置目录">解压，进入配置目录</h2><blockquote><p>tar zxvf hadoop-2.7.3.tar.gz<br>cd hadoop-2.7.3/etc/hadoop</p></blockquote><h2 id="修改配置">修改配置</h2><p>core-site.xml，hdfs-site.xml， mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># core-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># hdfs-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># mapred-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置免密登录">配置免密登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1。 设置自己的mac允许远程登录：</span><br><span class="line">  首先我们打开系统偏好设置–&gt;共享</span><br><span class="line">  我们将远程登录、所有用户勾选</span><br><span class="line"></span><br><span class="line">2. 设置免密码</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod og-wx ~/.ssh/authorized_keys</span><br><span class="line">chmod 750 $HOME</span><br><span class="line"></span><br><span class="line">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure><h2 id="启动hadoop">启动hadoop</h2><p>先format namenode</p><blockquote><p>hadoop namenode -format</p></blockquote><blockquote><p>./hadoop-2.7.3/sbin/start-all.sh</p></blockquote><h2 id="验证安装成功">验证安装成功</h2><p>jps查看namenode 和 datanode等正常启动</p><p>执行 WordCount<br>在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input<br>hadoop fs -mkdir -p /data/out<br>上传文本文件<br>hadoop fs -put a.txt /data/input<br>执行 wordcount<br>hadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p><h2 id="访问界面">访问界面</h2><p>Resourcemanager 界面 <a href="http://127.0.0.1:8088" target="_blank" rel="external">http://127.0.0.1:8088</a><br>hadoop提供的web页面 <a href="http://127.0.0.1:50070" target="_blank" rel="external">http://127.0.0.1:50070</a><br>查看 hdfs 界面 <a href="http://127.0.0.1:50070/explorer.html#/" target="_blank" rel="external">http://127.0.0.1:50070/explorer.html#/</a><br>访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p><h1 id="hive搭建">Hive搭建</h1><h2 id="解压文件">解压文件</h2><blockquote><p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p></blockquote><h2 id="修改配置">修改配置</h2><p>先复制一份默认的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd apache-hive-1.2.1-bin</span><br><span class="line">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class="line">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure><p>修改hive-site.xml中的部分peoperty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:java.io.tmpdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/Users/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>system:user.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># mysql地址localhost</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"># mysql的驱动</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"># 用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"># 密码</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="装好mysql">装好Mysql</h2><p>放一个mysql jdbc连接的jar包到 hive的lib下</p><p>创建一个库用作metastore存储</p><h2 id="初始化metastore">初始化Metastore</h2><blockquote><p>./bin/schematool -dbType mysql -initSchema</p></blockquote><h2 id="启动hive">启动hive</h2><p>./bin/hive</p><h1 id="hive源码调试">Hive源码调试</h1><p>下载hive中的src包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class="line">cd apache-hive-1.2.1-src</span><br><span class="line">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure><p>在刚刚装好的开启远程调试模式</p><blockquote><p>hive --debug</p></blockquote><p>他会显示<br>Listening for transport dt_socket at address: 8000</p><p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p><p>添加一个Configuraiton Remote<br>host写127.0.0.1<br>port写刚刚的8000<br>包选择hive-cli</p><p>在org/apache/hadoop/hive/cli/CliDriver.java<br>中找main函数，并在run()行加上断点</p><p>点击debug就可以看到运行到断点处</p><h2 id="特别感谢">特别感谢</h2><ul><li>本次文章来源特别感谢mayanbo同学。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
            <tag> HADOOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hiveSQL执行日志的收集</title>
      <link href="article/2020/article_8_hiveSQL%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97%E7%9A%84%E6%94%B6%E9%9B%86/"/>
      <url>article/2020/article_8_hiveSQL%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97%E7%9A%84%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p><p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p><h2 id="实现">实现</h2><h3 id="jdbc部分日志">jdbc部分日志</h3><p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p><p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive</span><br><span class="line"><span class="keyword">from</span> TCLIService.ttypes <span class="keyword">import</span> TOperationState</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">conn = hive.connect(host=host, port=port, username=user,  database=<span class="string">'default'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步执行hql</span></span><br><span class="line">cursor.execute(<span class="string">'''select count(1) from table'''</span>, async_=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取执行日志</span></span><br><span class="line"><span class="comment"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class="line"><span class="comment"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class="line">status = cursor.poll().operationState</span><br><span class="line">application_id = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">while</span> status <span class="keyword">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class="line">    logs = cursor.fetch_logs()</span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> logs:</span><br><span class="line">        print(message)</span><br><span class="line">        match_res = re.findall(<span class="string">r'App id (.*?)\)'</span>, message)</span><br><span class="line">        <span class="keyword">if</span> len(match_res) &gt; <span class="number">0</span>:</span><br><span class="line">            application_id = match_res[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    status = cursor.poll().operationState</span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class="line">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class="line">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class="line">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class="line">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class="line">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure><h3 id="进度和mapreduce信息">进度和mapreduce信息</h3><p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p><p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def poll(self, get_progress_update=True):</span><br><span class="line">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class="line">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class="line">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class="line">    .. note::</span><br><span class="line">        This is not a part of DB-API.</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class TGetOperationStatusResp(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Attributes:</span><br><span class="line">     - status</span><br><span class="line">     - operationState</span><br><span class="line">     - sqlState</span><br><span class="line">     - errorCode</span><br><span class="line">     - errorMessage</span><br><span class="line">     - taskStatus</span><br><span class="line">     - operationStarted</span><br><span class="line">     - operationCompleted</span><br><span class="line">     - hasResultSet</span><br><span class="line">     - progressUpdateResponse</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>tabulate为画表格库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">poll = cursor.poll()</span><br><span class="line">status = poll.operationState</span><br><span class="line">application_id = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">while</span> status <span class="keyword">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class="line">    arr = []</span><br><span class="line">    <span class="comment"># 获取poll中的progressUpdateResponse</span></span><br><span class="line">    <span class="comment"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class="line">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class="line">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class="line">    print(tabulate(arr, tablefmt=<span class="string">'grid'</span>))</span><br><span class="line">    print(<span class="string">"progress: &#123;&#125;%"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class="number">100</span>, <span class="number">2</span>)))</span><br><span class="line">    poll = cursor.poll()</span><br><span class="line">    status = poll.operationState</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/img/mypost/pyhiveprogress.png" alt="pyhiveprogress"></p><h3 id="全部conrainer日志">全部conrainer日志</h3><p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p><blockquote><p>yarn logs -applicationId {applicationId}</p></blockquote><blockquote><p>yarn logs -containerId {containerId}</p></blockquote><p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p><blockquote><p>org.apache.hadoop.yarn.client.cli.LogsCLI</p></blockquote><p>函数追踪的路径如下</p><blockquote><p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p></blockquote><p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p><blockquote><p><a href="http://host" target="_blank" rel="external">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class="line">          .path(<span class="string">"ws"</span>).path(<span class="string">"v1"</span>).path(<span class="string">"cluster"</span>)</span><br><span class="line">          .path(<span class="string">"apps"</span>).path(appId).path(<span class="string">"appattempts"</span>)</span><br><span class="line">          .accept(MediaType.APPLICATION_JSON);</span><br><span class="line">response = builder.get(ClientResponse.class);</span><br><span class="line">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class="line">    .getJSONObject(<span class="string">"appAttempts"</span>);</span><br><span class="line">JSONArray requests = json.getJSONArray(<span class="string">"appAttempt"</span>);</span><br></pre></td></tr></table></figure><p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>这边记录下containerId和nodeHttpAddress</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"appAttempts"</span>: &#123;</span><br><span class="line">        <span class="attr">"appAttempt"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"startTime"</span>: <span class="number">1585100799481</span>,</span><br><span class="line">                <span class="attr">"finishedTime"</span>: <span class="number">1585100821657</span>,</span><br><span class="line">                <span class="attr">"containerId"</span>: <span class="string">"container_e45_000001"</span>,</span><br><span class="line">                <span class="attr">"nodeHttpAddress"</span>: <span class="string">"host:port"</span>,</span><br><span class="line">                <span class="attr">"nodeId"</span>: <span class="string">"host:port"</span>,</span><br><span class="line">                <span class="attr">"logsLink"</span>: <span class="string">"http://host:port/node/containerlogs/conta801/hive"</span>,</span><br><span class="line">                <span class="attr">"blacklistedNodes"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"appAttemptId"</span>: <span class="string">"appattempt_15840200001"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后追踪另一条路，又可以发现它获取日志的地方</p><blockquote><p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WebResource webResource = webServiceClient</span><br><span class="line">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class="line">ClientResponse response =</span><br><span class="line">    webResource.path(<span class="string">"ws"</span>).path(<span class="string">"v1"</span>).path(<span class="string">"node"</span>).path(<span class="string">"containers"</span>)</span><br><span class="line">        .path(containerIdStr).path(<span class="string">"logs"</span>)</span><br><span class="line">        .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure><p>这边的地址拼接如下</p><blockquote><p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p></blockquote><p>访问后可以获取到如下信息<br>containerLogInfo里面每个都是日志文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"containerId"</span>: <span class="string">"container_e455_01"</span>,</span><br><span class="line">        <span class="attr">"nodeId"</span>: <span class="string">"hadoop-4355"</span>,</span><br><span class="line">        <span class="attr">"containerLogInfo"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"fileName"</span>: <span class="string">"dag_1584028893195_0587_1.dot"</span>,</span><br><span class="line">                <span class="attr">"fileSize"</span>: <span class="string">"1631"</span>,</span><br><span class="line">                <span class="attr">"lastModifiedTime"</span>: <span class="string">"Wed Mar 25 09:47:03 +0800 2020"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"fileName"</span>: <span class="string">"directory.info"</span>,</span><br><span class="line">                <span class="attr">"fileSize"</span>: <span class="string">"18349"</span>,</span><br><span class="line">                <span class="attr">"lastModifiedTime"</span>: <span class="string">"Wed Mar 25 09:47:03 +0800 2020"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            ......</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"logAggregationType"</span>: <span class="string">"AGGREGATED"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p><blockquote><p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p></blockquote><p>至此已获取到全部日志。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
            <tag> YARN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hiveserver2与hiveSQL的执行</title>
      <link href="article/2020/article_7_hiveserver2%E4%B8%8EHQL%E7%9A%84%E6%89%A7%E8%A1%8C/"/>
      <url>article/2020/article_7_hiveserver2%E4%B8%8EHQL%E7%9A%84%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p><p>这边演示python的实现和java的实现</p><h2 id="实现">实现</h2><h3 id="python">python</h3><p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive</span><br><span class="line"></span><br><span class="line">// 连接</span><br><span class="line">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class="string">'default'</span>)</span><br><span class="line"></span><br><span class="line">// 获取游标和执行sql</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">"show tables"</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">// 数据和表头</span><br><span class="line">data = cursor.fetchall()</span><br><span class="line">columns = cursor.description</span><br></pre></td></tr></table></figure><h3 id="java">java</h3><p>java的jdbc连接使用的是java.sql.*，<br>还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>这边先定义结果数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSqlResultModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 表头</span></span><br><span class="line">    List&lt;JSONArray&gt; meta;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    List&lt;JSONArray&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度</span></span><br><span class="line">    Integer count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表头</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字段名</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 精度</span></span><br><span class="line">    Integer precision;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小数位数</span></span><br><span class="line">    Integer scale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveClientUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 驱动</span></span><br><span class="line"><span class="comment">    * 默认队列</span></span><br><span class="line"><span class="comment">    * jdbc地址</span></span><br><span class="line"><span class="comment">    * 用户名</span></span><br><span class="line"><span class="comment">    * 密码</span></span><br><span class="line"><span class="comment">    * 前置sql</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String DRIVERNAME = <span class="string">"org.apache.hive.jdbc.HiveDriver"</span>;</span><br><span class="line">    <span class="keyword">private</span> String QUEUE = <span class="string">"default"</span>;</span><br><span class="line">    <span class="keyword">private</span> String hiveurl;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造的时候初始化上面的配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HiveClientUtil</span><span class="params">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiveurl = String.format(<span class="string">"jdbc:hive2://%s:%s/%s"</span>, host, port, database);</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.defaultPreSql = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.defaultPreSql.add(String.format(<span class="string">"SET tez.queue.name=%s"</span>, QUEUE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行前置sql</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execPreSql</span><span class="params">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class="line">        presqls.forEach(presql -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.execute(presql);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"前置SQL执行失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 运行sql</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiveSqlResultModel <span class="title">execute</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execute(sql, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 运行前置sql和主sql</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiveSqlResultModel <span class="title">execute</span><span class="params">(String sql, List&lt;String&gt; presqls)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"sql执行初始化失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主sql加载</span></span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行前置配置sql</span></span><br><span class="line">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class="line">        <span class="keyword">if</span>(presqls != <span class="keyword">null</span>) &#123;</span><br><span class="line">            execPreSql(preparedStatement, presqls);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取执行结果，表头，列数量</span></span><br><span class="line">        ResultSet result = preparedStatement.executeQuery();</span><br><span class="line">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class="line">        <span class="keyword">int</span> columnCount = metaData.getColumnCount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取表头数据并转换</span></span><br><span class="line">        HiveSqlResultModel hiveSqlResultModel = <span class="keyword">new</span> HiveSqlResultModel();</span><br><span class="line">        List&lt;JSONArray&gt; metas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">            HiveSqlResultColumnModel columnModel = <span class="keyword">new</span> HiveSqlResultColumnModel();</span><br><span class="line">            columnModel.setName(metaData.getColumnName(i));</span><br><span class="line">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"DECIMAL"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class="line">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class="line">                columnModel.setScale(metaData.getScale(i));</span><br><span class="line">            &#125;</span><br><span class="line">            metas.add(columnModel.toJsonArray());</span><br><span class="line">        &#125;</span><br><span class="line">        hiveSqlResultModel.setMeta(metas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理每行数据，并计数</span></span><br><span class="line">        List&lt;JSONArray&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(result.next()) &#123;</span><br><span class="line">            JSONArray rowData = <span class="keyword">new</span> JSONArray();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                rowData.add(result.getString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            data.add(rowData);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        hiveSqlResultModel.setCount(count);</span><br><span class="line">        hiveSqlResultModel.setData(data);</span><br><span class="line">        <span class="keyword">return</span> hiveSqlResultModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
            <tag> JAVA </tag>
            
            <tag> PYTHON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于antlr4实现HQL的解析[元数据]</title>
      <link href="article/2020/article_6_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E5%85%83%E6%95%B0%E6%8D%AE/"/>
      <url>article/2020/article_6_%E5%9F%BA%E4%BA%8Eantlr4%E5%AE%9E%E7%8E%B0HQL%E7%9A%84%E8%A7%A3%E6%9E%90-%E5%85%83%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p><p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p><p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p><p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p><p>代码实现参考：<a href="https://github.com/webgjc/sql-parser/" target="_blank" rel="external">https://github.com/webgjc/sql-parser/</a></p><h2 id="前期准备">前期准备</h2><ul><li>antlr4安装看<a href="https://www.antlr.org/" target="_blank" rel="external">这里官方教程</a></li><li>idea的插件 ANTLR v4 grammar plugin</li><li>sql的解析文件 <a href="https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4" target="_blank" rel="external">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li></ul><p>起个java项目，加上dependency antlr4-runtime 和<br>plugin antlr4-maven-plugin(可以在编译的时候将g4<br>文件生成lexer和parser等文件)</p><h2 id="具体实现">具体实现</h2><p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href="https://abcdabcd987.com/notes-on-antlr4/" target="_blank" rel="external">这里</a>。<br>这边以visitor模式实现。</p><h3 id="g4分析">g4分析</h3><p>hplsql.g4文件中创表语句相关的主要为下面一些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 创表语句入口 (create ... 表名 表来源)</span><br><span class="line">create_table_stmt :</span><br><span class="line">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class="line">// (... 字段 ... 表配置)</span><br><span class="line">create_table_definition :</span><br><span class="line">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class="line">create_table_columns_item :</span><br><span class="line">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class="line">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">// 表其他相关配置 (备注 分区 行格式 存储类型 存储位置 表属性)</span><br><span class="line">create_table_options_hive_item :</span><br><span class="line">    (T_COMMENT string)?</span><br><span class="line">    create_table_hive_partitioned_by_clause?</span><br><span class="line">    create_table_hive_row_format?</span><br><span class="line">    create_table_hive_stored?</span><br><span class="line">    create_table_hive_location?</span><br><span class="line">    create_table_hive_tblproperties?</span><br><span class="line">     ;</span><br></pre></td></tr></table></figure><h3 id="实现思路">实现思路</h3><p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr4-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-visitor<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-listener<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>antlr4<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p><h3 id="表字段相关定义">表字段相关定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveFieldMetadata</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fieldName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dataType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fieldComment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表相关定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveTableMetadata</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tableName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tableType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tableComment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String partition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String rowFormat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String store;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性(压缩格式)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码实现说明">源码实现说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSQLTableMetadata</span> <span class="keyword">extends</span> <span class="title">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HiveTableMetadata tableMetadata = <span class="keyword">new</span> HiveTableMetadata();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sourceSQL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存原始sql</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HiveSQLTableMetadata</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceSQL = sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取原始sql</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">subSourceSql</span><span class="params">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sourceSQL.substring(</span><br><span class="line">                parserRuleContext.getStart().getStartIndex(),</span><br><span class="line">                parserRuleContext.getStop().getStopIndex() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理备注中的引号</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">dealComment</span><span class="params">(String comment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(comment != <span class="keyword">null</span> &amp;&amp; comment.length() &gt;= <span class="number">2</span></span><br><span class="line">                &amp;&amp; comment.startsWith(<span class="string">"\'"</span>) &amp;&amp; comment.endsWith(<span class="string">"\'"</span>))&#123;</span><br><span class="line">            comment = comment.substring(<span class="number">1</span>, comment.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理表名字段名中的``</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">dealNameMark</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.startsWith(<span class="string">"`"</span>) &amp;&amp; name.endsWith(<span class="string">"`"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> name.substring(<span class="number">1</span>, name.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到字段信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTableField</span><span class="params">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class="line">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class="line">        List&lt;HiveFieldMetadata&gt; fields = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        itemContexts.forEach(item -&gt; &#123;</span><br><span class="line">            HiveFieldMetadata field = <span class="keyword">new</span> HiveFieldMetadata();</span><br><span class="line">            field.setFieldName(Optional.of(item)</span><br><span class="line">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .map(<span class="keyword">this</span>::dealNameMark)</span><br><span class="line">                    .orElse(<span class="keyword">null</span>));</span><br><span class="line">            String type = Optional.of(item)</span><br><span class="line">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .orElse(<span class="keyword">null</span>);</span><br><span class="line">            String typeLen = Optional.of(item)</span><br><span class="line">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .orElse(<span class="string">""</span>);</span><br><span class="line">            field.setDataType(type != <span class="keyword">null</span> ? type + typeLen : <span class="keyword">null</span>);</span><br><span class="line">            field.setFieldComment(Optional.of(item)</span><br><span class="line">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class="line">                    .map(RuleContext::getText)</span><br><span class="line">                    .map(<span class="keyword">this</span>::dealComment)</span><br><span class="line">                    .orElse(<span class="keyword">null</span>));</span><br><span class="line">            fields.add(field);</span><br><span class="line">        &#125;);</span><br><span class="line">        tableMetadata.setFields(fields);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取表其他属性信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTableOption</span><span class="params">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class="line">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class="line">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class="line">                .map(RuleContext::getText)</span><br><span class="line">                .map(<span class="keyword">this</span>::dealComment)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class="line">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class="line">                .map(<span class="keyword">this</span>::subSourceSql)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行入口，重写visit create表</span></span><br><span class="line">    <span class="comment">// 获取到表相关信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">visitCreate_table_stmt</span><span class="params">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class="line">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class="line">        <span class="keyword">if</span>(tbNameTree.size() == <span class="number">3</span> &amp;&amp; tbNameTree.get(<span class="number">1</span>).getText().equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">            tableMetadata.setDbName(tbNameTree.get(<span class="number">0</span>).getText());</span><br><span class="line">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class="number">2</span>).getText()));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class="number">0</span>).getText()));</span><br><span class="line">        &#125;</span><br><span class="line">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class="line">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class="line">                .map(ParseTree::getText)</span><br><span class="line">                .orElse(<span class="keyword">null</span>));</span><br><span class="line">        setTableField(ctx);</span><br><span class="line">        setTableOption(ctx);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.visitCreate_table_stmt(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取全部创表信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiveTableMetadata <span class="title">getTableMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tableMetadata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用实现">调用实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取解析树</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ParseTree <span class="title">getParseTree</span><span class="params">(String sourceSQL)</span> </span>&#123;</span><br><span class="line">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class="line">    HplsqlLexer lexer = <span class="keyword">new</span> HplsqlLexer(input);</span><br><span class="line">    CommonTokenStream tokenStream = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">    HplsqlParser parser = <span class="keyword">new</span> HplsqlParser(tokenStream);</span><br><span class="line">    <span class="keyword">return</span> parser.program();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HiveTableMetadata <span class="title">getHiveTableMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HiveSQLTableMetadata visitor = <span class="keyword">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class="line">    visitor.visit(getParseTree(sourceSQL));</span><br><span class="line">    <span class="keyword">return</span> visitor.getTableMetadata();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><p>原始sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> db_test.test_user (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'id'</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">    age <span class="built_in">int</span> <span class="keyword">comment</span> <span class="string">'年龄'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">comment</span> <span class="string">'测试用户表'</span></span><br><span class="line">partitioned <span class="keyword">by</span> (ds <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'分区'</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line"><span class="literal">NULL</span> DEFINED <span class="keyword">AS</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE</span><br><span class="line">LOCATION <span class="string">'/user/hive/warehouse/db_test.db/test_user'</span>;</span><br></pre></td></tr></table></figure><p>解析后的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"dbName"</span>: <span class="string">"db_test"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataType"</span>: <span class="string">"int"</span>,</span><br><span class="line">            <span class="attr">"fieldComment"</span>: <span class="string">"id"</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"id"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataType"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"fieldComment"</span>: <span class="string">"姓名"</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"name"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"dataType"</span>: <span class="string">"int"</span>,</span><br><span class="line">            <span class="attr">"fieldComment"</span>: <span class="string">"年龄"</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"age"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"location"</span>: <span class="string">"LOCATION '/user/hive/warehouse/db_test.db/test_user'"</span>,</span><br><span class="line">    <span class="attr">"partition"</span>: <span class="string">"partitioned by (ds string comment '分区')"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"rowFormat"</span>: <span class="string">"ROW FORMAT DELIMITED\nNULL DEFINED AS \"\""</span>,</span><br><span class="line">    <span class="attr">"store"</span>: <span class="string">"STORED AS TEXTFILE"</span>,</span><br><span class="line">    <span class="attr">"tableComment"</span>: <span class="string">"测试用户表"</span>,</span><br><span class="line">    <span class="attr">"tableName"</span>: <span class="string">"test_user"</span>,</span><br><span class="line">    <span class="attr">"tableType"</span>: <span class="string">"external"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HQL解析 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 元数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive与mysql元数据的快速采集</title>
      <link href="article/2020/article_5_hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/"/>
      <url>article/2020/article_5_hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="hive元数据采集">Hive元数据采集</h2><p>首先以hive举例，</p><p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>但因为这样每个都要执行就很慢。</p><blockquote><p>DESCRIBE FORMATTED {tablename}</p></blockquote><p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>想了解详细结构可以移步<a href="https://www.jianshu.com/p/420ddb3bde7f" target="_blank" rel="external">Hive MetaStore的结构</a>。</p><p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p><p>下面是Metastore获取库，表，字段的具体操作：</p><ul><li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li><li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li><li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li><li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li></ul><ul><li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li><li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li><li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li><li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li></ul><p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p><h2 id="mysql元数据采集">Mysql元数据采集</h2><p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p><p>information_schema的结构大致见<a href="https://www.jianshu.com/p/c08fe8e01c0a" target="_blank" rel="external">这里</a></p><p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p><blockquote><p>database_id = 2<br>database_name = db_test</p></blockquote><p>取表数据数据</p><blockquote><p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>form <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p></blockquote><p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p><blockquote><p>insert into back_table<br>(db_id, table_name, table_type)<br>values<br>(‘test’, ‘db_test’, ‘test’, ‘test’)<br>on duplicate key update<br>table_name=values(table_name),<br>table_type=values(table_type);</p></blockquote><p>然后直接完成对后端元数据的同步。字段同理。</p><p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p><h2 id="关于实时采集">关于实时采集</h2><p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p><p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p><p>然后这里再来考虑一下实时采集的方案。</p><p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p><p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p><p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p><p>mysql开启binlog见<a href="https://www.jianshu.com/p/5870cf1affb6" target="_blank" rel="external">这里</a></p><p>canal连接mysql接受binlog并把数据投递到kafka见<a href="https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart" target="_blank" rel="external">这里官方教程</a>(安装教程也在这里)</p><p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>这里用java实现实现了一个消费kafka的demo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ganjiacheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: again</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span>: 935669873@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String topic = <span class="string">"mysqldata"</span>;</span><br><span class="line">        String groupID = <span class="string">"lalal"</span>;</span><br><span class="line"></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, groupID);</span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"earliest"</span>);</span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class="line">                    System.out.println(String.format(<span class="string">"offset = %s, key = %s, value = %s"</span>, record.offset(), record.key(), record.value()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启canal的flatMessage为true，拿到的数据为json格式，<br>从value里解析json数据如下，能拿到database和table。<br>之后就可以进行元数据采集。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"database"</span>: <span class="string">"canal"</span>,</span><br><span class="line">    <span class="attr">"es"</span>: <span class="number">1586092113000</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"isDdl"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"mysqlType"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"old"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"pkNames"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"sql"</span>: <span class="string">"sql sql sql"</span>,</span><br><span class="line">    <span class="attr">"sqlType"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"table"</span>: <span class="string">"table_name"</span>,</span><br><span class="line">    <span class="attr">"ts"</span>: <span class="number">1586092904217</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"CREATE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> 元数据 </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pynput实现鼠标键盘操作的记录与还原</title>
      <link href="article/2020/article_4_pynput%E5%AE%9E%E7%8E%B0%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C%E7%9A%84%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
      <url>article/2020/article_4_pynput%E5%AE%9E%E7%8E%B0%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C%E7%9A%84%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>这次实现的记录和还原的操作包括</p><ul><li>鼠标移动，滚动，左右键</li><li>键盘的按下，松开</li></ul><h2 id="前期准备">前期准备</h2><p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>具体包详细接口与使用说明看如下图：<br><img src="/img/mypost/pynput.png" alt="图"></p><h2 id="具体实现">具体实现</h2><p>使用python3编写，在mac环境下运行良好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pynput</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseRecord</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    记录键盘鼠标事件值json文件，</span></span><br><span class="line"><span class="string">    包括鼠标移动，滚动，左右键</span></span><br><span class="line"><span class="string">    键盘按下，放开</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start_time = <span class="number">0</span></span><br><span class="line">        self.mouse_list = []</span><br><span class="line">        self.running = <span class="keyword">True</span></span><br><span class="line">        self.save_file = <span class="string">"mouselist.json"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> time.time() - self.start_time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_click</span><span class="params">(self, x, y, button, pressed)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        click事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.running:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pressed:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        self.mouse_list.append(&#123;</span><br><span class="line">            <span class="string">"opera"</span>: <span class="string">"click"</span>,</span><br><span class="line">            <span class="string">"posix"</span>: x,</span><br><span class="line">            <span class="string">"posiy"</span>: y,</span><br><span class="line">            <span class="string">"button"</span>: str(button),</span><br><span class="line">            <span class="string">"stime"</span>: self.get_time()</span><br><span class="line">        &#125;)</span><br><span class="line">        print(x, y, button, pressed)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_move</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        鼠标移动事件，加个随机减少存储</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">2</span>) == <span class="number">1</span>:</span><br><span class="line">            self.mouse_list.append(&#123;</span><br><span class="line">                <span class="string">"opera"</span>: <span class="string">"move"</span>,</span><br><span class="line">                <span class="string">"posix"</span>: x,</span><br><span class="line">                <span class="string">"posiy"</span>: y,</span><br><span class="line">                <span class="string">"stime"</span>: self.get_time()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_scroll</span><span class="params">(self, x, y, dx, dy)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        鼠标滚动事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.mouse_list.append(&#123;</span><br><span class="line">            <span class="string">"opera"</span>: <span class="string">"scroll"</span>,</span><br><span class="line">            <span class="string">"posix"</span>: x,</span><br><span class="line">            <span class="string">"posiy"</span>: y,</span><br><span class="line">            <span class="string">"scrollx"</span>: dx,</span><br><span class="line">            <span class="string">"scrolly"</span>: dy,</span><br><span class="line">            <span class="string">"stime"</span>: self.get_time()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_key_press</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class="line"><span class="string">        按下esc的时候退出监听</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> key == pynput.keyboard.Key.esc:</span><br><span class="line">            self.running = <span class="keyword">False</span></span><br><span class="line">            mouse = pynput.mouse.Controller()</span><br><span class="line">            mouse.click(pynput.mouse.Button.left)</span><br><span class="line">            <span class="keyword">return</span> self.running</span><br><span class="line">        <span class="keyword">if</span> str(key) != <span class="string">"&lt;0&gt;"</span>:</span><br><span class="line">            self.mouse_list.append(&#123;</span><br><span class="line">                <span class="string">"opera"</span>: <span class="string">"press"</span>,</span><br><span class="line">                <span class="string">"key"</span>: str(key).strip(<span class="string">"'"</span>),</span><br><span class="line">                <span class="string">"stime"</span>: self.get_time()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_key_release</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        键盘释放事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> str(key) != <span class="string">"&lt;0&gt;"</span>:</span><br><span class="line">            self.mouse_list.append(&#123;</span><br><span class="line">                <span class="string">"opera"</span>: <span class="string">"release"</span>,</span><br><span class="line">                <span class="string">"key"</span>: str(key).strip(<span class="string">"'"</span>),</span><br><span class="line">                <span class="string">"stime"</span>: self.get_time()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouse_listen</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        开启鼠标监听</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class="keyword">as</span> listener:</span><br><span class="line">            listener.join()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">key_listen</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        开启键盘监听</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class="keyword">as</span> listener:</span><br><span class="line">            listener.join()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        运行监听，结束后保存为json文件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.start_time = time.time()</span><br><span class="line">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class="line">        t2 = threading.Thread(target=self.key_listen)</span><br><span class="line">        t1.start()</span><br><span class="line">        t2.start()</span><br><span class="line">        t1.join()</span><br><span class="line">        t2.join()</span><br><span class="line">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class="string">"w"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseRecover</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    还原键盘鼠标事件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start_time = <span class="number">0</span></span><br><span class="line">        self.mouse = pynput.mouse.Controller()</span><br><span class="line">        self.keyboard = pynput.keyboard.Controller()</span><br><span class="line">        self.buttons = &#123;</span><br><span class="line">            <span class="string">"Button.left"</span>: pynput.mouse.Button.left,</span><br><span class="line">            <span class="string">"Button.right"</span>: pynput.mouse.Button.right</span><br><span class="line">        &#125;</span><br><span class="line">        self.read_file = <span class="string">"mouselist.json"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_click</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理鼠标点击事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.mouse.position = (record.get(<span class="string">"posix"</span>), record.get(<span class="string">"posiy"</span>))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        self.mouse.click(self.buttons.get(record.get(<span class="string">"button"</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_move</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理鼠标移动事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.mouse.position = (record.get(<span class="string">"posix"</span>), record.get(<span class="string">"posiy"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_scroll</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理鼠标滚动事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.mouse.position = (record.get(<span class="string">"posix"</span>), record.get(<span class="string">"posiy"</span>))</span><br><span class="line">        self.mouse.scroll(record.get(<span class="string">"scrollx"</span>), record.get(<span class="string">"scrolly"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_key_press</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理键盘按下事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> record.get(<span class="string">"key"</span>).startswith(<span class="string">"Key"</span>):</span><br><span class="line">            self.keyboard.press(eval(record.get(<span class="string">"key"</span>), &#123;&#125;, &#123;</span><br><span class="line">                <span class="string">"Key"</span>: pynput.keyboard.Key</span><br><span class="line">            &#125;))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.keyboard.press(record.get(<span class="string">"key"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_key_release</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        处理键盘释放事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> record.get(<span class="string">"key"</span>).startswith(<span class="string">"Key"</span>):</span><br><span class="line">            self.keyboard.release(eval(record.get(<span class="string">"key"</span>), &#123;&#125;, &#123;</span><br><span class="line">                <span class="string">"Key"</span>: pynput.keyboard.Key</span><br><span class="line">            &#125;))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.keyboard.release(record.get(<span class="string">"key"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        读取json文件，执行事件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = json.load(open(self.read_file, <span class="string">"r"</span>))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">"opera"</span>) == <span class="string">"click"</span>:</span><br><span class="line">                self.deal_click(item)</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">"opera"</span>) == <span class="string">"move"</span>:</span><br><span class="line">                self.deal_move(item)</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">"opera"</span>) == <span class="string">"scroll"</span>:</span><br><span class="line">                self.deal_scroll(item)</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">"opera"</span>) == <span class="string">"press"</span>:</span><br><span class="line">                self.deal_key_press(item)</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">"opera"</span>) == <span class="string">"release"</span>:</span><br><span class="line">                self.deal_key_release(item)</span><br><span class="line">            time.sleep(item.get(<span class="string">"stime"</span>) - self.start_time)</span><br><span class="line">            self.start_time = item.get(<span class="string">"stime"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#记录事件</span></span><br><span class="line">    t = MouseRecord()</span><br><span class="line">    t.run()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行事件</span></span><br><span class="line">    <span class="comment"># tt = MouseRecover()</span></span><br><span class="line">    <span class="comment"># tt.run()</span></span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><ul><li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li><li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li></ul><h2 id="后期遐想">后期遐想</h2><ul><li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li></ul><h2 id="参考友军">参考友军</h2><ul><li><a href="https://www.jianshu.com/p/11a8e75f5170" target="_blank" rel="external">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PYTHON </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讲讲元数据</title>
      <link href="article/2020/article_3_%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/"/>
      <url>article/2020/article_3_%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>做了一些元数据的系统，分享一些相关的理解与体会。<br>掺杂个人理解与实操历史，不一定是最佳实践。</p><h2 id="元数据定义">元数据定义</h2><p>元数据一般指的是 <strong>定义数据的数据</strong>。</p><p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p><ul><li>比如mysql的每个实例会默认有一个叫information_schema的库；</li><li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li></ul><p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p><h2 id="元数据采集">元数据采集</h2><p>首先进行元数据的采集和整合。这边都以hive举例。</p><p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p><ul><li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>同时也保留一种手动触发方式，可以让用户手动同步库或表。</li></ul><ul><li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href="https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4" target="_blank" rel="external">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li></ul><ul><li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>其他一些业务元数据采取批量导出导入和页面上维护。</li></ul><h2 id="元数据平台">元数据平台</h2><p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>在接口上实现对一些业务元数据的校正和使用说明。<br>定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p><p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p><h2 id="元数据应用">元数据应用</h2><p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>比如在控制数据权限时，需要用到表字段的策略；<br>比如在即时查询时用户需要查看库表字段信息来完成sql；<br>比如在数据监控与数据质量中，也需要用到元数据；</p><h2 id="参考友军">参考友军</h2><ul><li><a href="https://tech.youzan.com/youzan-metadata/" target="_blank" rel="external">有赞元数据</a></li><li><a href="https://dbaplus.cn/news-73-2143-1.html" target="_blank" rel="external">饿了么元数据</a></li><li><a href="https://www.zhihu.com/question/20679872/answer/54883263" target="_blank" rel="external">知乎一个关于元数据的回答</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 元数据 </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理晒晒老博客</title>
      <link href="article/2020/article_2_%E6%95%B4%E7%90%86%E6%99%92%E6%99%92%E8%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>article/2020/article_2_%E6%95%B4%E7%90%86%E6%99%92%E6%99%92%E8%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前写过些博客，文章没直接保留，代码都还留着；<br>这边对之前的做简单论述和总结。<br>git地址：<a href="https://github.com/webgjc/blog" target="_blank" rel="external">https://github.com/webgjc/blog</a></p><h2 id="content">content</h2><h3 id="修改桌面背景图片"><a href="https://github.com/webgjc/blog/tree/master/change_background_exe" target="_blank" rel="external">修改桌面背景图片</a></h3><ul><li>使用python实现，从网上获取<a href="https://bing.ioliu.cn/" target="_blank" rel="external">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li></ul><h3 id="dfs的几个demo"><a href="https://github.com/webgjc/blog/tree/master/dfs_demo" target="_blank" rel="external">dfs的几个demo</a></h3><ul><li>dfs.py包含了全排，八皇后问题<br>river.py为和尚妖怪过河问题<br>shudu.py为解数独问题</li></ul><h3 id="dlib人脸识别svm分类"><a href="https://github.com/webgjc/blog/tree/master/dlib_face" target="_blank" rel="external">dlib人脸识别+svm分类</a></h3><ul><li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li></ul><h3 id="flask-mongodb-gunicorn-demo"><a href="https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn" target="_blank" rel="external">flask mongodb gunicorn demo</a></h3><ul><li>flask mongodb尝试</li></ul><h3 id="前端许愿墙效果"><a href="https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect" target="_blank" rel="external">前端许愿墙效果</a></h3><ul><li>前端效果</li></ul><h3 id="在线双人五子棋"><a href="https://github.com/webgjc/blog/tree/master/gobang_online" target="_blank" rel="external">在线双人五子棋</a></h3><ul><li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li></ul><h3 id="梯度下降法"><a href="https://github.com/webgjc/blog/tree/master/gradient_descent_method" target="_blank" rel="external">梯度下降法</a></h3><ul><li>写了下梯度下降的效果demo</li></ul><h3 id="手持弹幕效果"><a href="https://github.com/webgjc/blog/tree/master/handheld_barrage" target="_blank" rel="external">手持弹幕效果</a></h3><ul><li>前端效果</li></ul><h3 id="聪明钱股票策略"><a href="https://github.com/webgjc/blog/tree/master/joinquant_smart_money" target="_blank" rel="external">聪明钱–股票策略</a></h3><ul><li>在聚宽回测平台运行</li></ul><h3 id="扫雷js版"><a href="https://github.com/webgjc/blog/tree/master/js_mine_clearance" target="_blank" rel="external">扫雷js版</a></h3><ul><li>js版扫雷</li></ul><h3 id="手动实现kmeans聚类算法"><a href="https://github.com/webgjc/blog/tree/master/kmeans_hand" target="_blank" rel="external">手动实现kmeans聚类算法</a></h3><ul><li>python手动实现了下kmeans</li></ul><h3 id="knn分类算法mnist为例"><a href="https://github.com/webgjc/blog/tree/master/knn_mnist" target="_blank" rel="external">KNN分类算法（mnist为例）</a></h3><ul><li>knn demo</li></ul><h3 id="loading动画"><a href="https://github.com/webgjc/blog/tree/master/loading_demo" target="_blank" rel="external">loading动画</a></h3><ul><li>loading动画</li></ul><h3 id="逻辑回归二分类"><a href="https://github.com/webgjc/blog/tree/master/logistic_classification" target="_blank" rel="external">逻辑回归二分类</a></h3><ul><li>手动实现逻辑回归二分类</li></ul><h3 id="数字杭电模拟登录python版php版"><a href="https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university" target="_blank" rel="external">数字杭电模拟登录（python版+PHP版）</a></h3><ul><li>数字杭电模拟登陆(目前不一定可靠)</li></ul><h3 id="matplotlib-画图"><a href="https://github.com/webgjc/blog/tree/master/matplotlib_draw" target="_blank" rel="external">matplotlib 画图</a></h3><ul><li>matplotlib画图demo</li></ul><h3 id="mcts做五子棋ai"><a href="https://github.com/webgjc/blog/tree/master/mcts_gobang" target="_blank" rel="external">mcts做五子棋ai</a></h3><ul><li>python实现了下五子棋，并用macts算法进行了ai模拟</li></ul><h3 id="node-express-mongodb-demo"><a href="https://github.com/webgjc/blog/tree/master/node_express_mongodb" target="_blank" rel="external">node express mongodb demo</a></h3><ul><li>node express demo</li></ul><h3 id="非线性拟合和非线性逻辑回归"><a href="https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic" target="_blank" rel="external">非线性拟合和非线性逻辑回归</a></h3><ul><li>python手动实现拟合和回归</li></ul><h3 id="swoole-你画我猜"><a href="https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess" target="_blank" rel="external">swoole 你画我猜</a></h3><ul><li>php的swoole的socket实现你画我猜</li></ul><h3 id="唐诗词云"><a href="https://github.com/webgjc/blog/tree/master/poet_word_cloud" target="_blank" rel="external">唐诗词云</a></h3><ul><li>python的wordcloud实现唐诗的词云</li></ul><h3 id="ppython的使用"><a href="https://github.com/webgjc/blog/tree/master/ppython" target="_blank" rel="external">ppython的使用</a></h3><ul><li>ppython主要是php调用python程序</li></ul><h3 id="php-rsa加密"><a href="https://github.com/webgjc/blog/tree/master/rsa_php" target="_blank" rel="external">php rsa加密</a></h3><ul><li>php rsa加密</li></ul><h3 id="简单线性回归"><a href="https://github.com/webgjc/blog/tree/master/simple_linear_regression" target="_blank" rel="external">简单线性回归</a></h3><ul><li>线性回归demo</li></ul><h3 id="php实现soap调用"><a href="https://github.com/webgjc/blog/tree/master/soap_php" target="_blank" rel="external">PHP实现SOAP调用</a></h3><ul><li>php soap</li></ul><h3 id="svm分类"><a href="https://github.com/webgjc/blog/tree/master/svm_classification" target="_blank" rel="external">svm分类</a></h3><ul><li>svm分类</li></ul><h3 id="tensorflow写mnist分类"><a href="https://github.com/webgjc/blog/tree/master/tensorflow_mnist" target="_blank" rel="external">tensorflow写mnist分类</a></h3><ul><li>tensorflow写mnist分类</li></ul><h3 id="threejs-demo"><a href="https://github.com/webgjc/blog/tree/master/three_js_demo" target="_blank" rel="external">threejs demo</a></h3><ul><li>three js demo</li></ul><h3 id="tts人机聊天应用"><a href="https://github.com/webgjc/blog/tree/master/tts_chat_demo" target="_blank" rel="external">tts人机聊天应用</a></h3><ul><li>tts人机聊天应用</li></ul><h3 id="简单验证码的识别"><a href="https://github.com/webgjc/blog/tree/master/verification_code_recognition" target="_blank" rel="external">简单验证码的识别</a></h3><ul><li>简单验证码的识别</li></ul><h3 id="web-worker-demo"><a href="https://github.com/webgjc/blog/tree/master/web_worker" target="_blank" rel="external">web worker demo</a></h3><ul><li>web worker demo</li></ul><h3 id="微信小程序购物功能示例"><a href="https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo" target="_blank" rel="external">微信小程序购物功能示例</a></h3><ul><li>微信小程序购物功能示例</li></ul><h3 id="微信小程序文字联系方式二维码"><a href="https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code" target="_blank" rel="external">微信小程序–文字/联系方式二维码</a></h3><ul><li>微信小程序–文字/联系方式二维码</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> OTHER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又双叒叕建博客</title>
      <link href="article/2019/article_1_%E5%8F%88%E5%8F%8C%E5%8F%92%E5%8F%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>article/2019/article_1_%E5%8F%88%E5%8F%8C%E5%8F%92%E5%8F%95%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p><p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p><p>开篇就以博客搭建过程为主要内容。</p><h2 id="工具准备">工具准备</h2><blockquote><p>git, node, github账号, vscode(非必备), 域名(非必备)</p></blockquote><p>这里需要自行搜索学习安装了</p><h2 id="动手搭建">动手搭建</h2><blockquote><p>贴个官方地址<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p></blockquote><p>这里就不跟着官方教程走了，不过大同小异</p><p>先到 <a href="https://hexo.io/themes/" target="_blank" rel="external">主题页</a> 找个喜欢的主题</p><p>这里选了 <a href="https://github.com/huweihuang/hexo-theme-huweihuang" target="_blank" rel="external">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 下载hexo命令行工具</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"># 创建文件夹</span><br><span class="line">mkdir blog</span><br><span class="line"></span><br><span class="line"># 下载主题到该文件夹</span><br><span class="line">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class="line"></span><br><span class="line"># 下载依赖包</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>文件组织结构大致如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/_config.xml</span><br><span class="line">主要配置文件</span><br><span class="line"></span><br><span class="line">/source</span><br><span class="line">存放文章 ./_posts</span><br><span class="line">图片 ./img</span><br><span class="line"></span><br><span class="line">/themes</span><br><span class="line">主题的一些模板文件</span><br><span class="line"></span><br><span class="line">/scaffolds</span><br><span class="line">一些脚手架，原生就在</span><br><span class="line"></span><br><span class="line">/node_modules</span><br><span class="line">外部依赖的模块</span><br><span class="line"></span><br><span class="line">/db.json</span><br><span class="line">存储服务器解析出来的临时文章数据</span><br><span class="line"></span><br><span class="line">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure><p>先到github建立自己的仓库，就长下面这样<br><img src="/img/mypost/github.png" alt="github"></p><p>然后对主题的_config.xml一些配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class="line">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class="line">url: http://ganjiacheng.cn/</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置主题，/theme/下的子目录文件夹</span><br><span class="line">theme: huweihuang</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 侧边栏的一些配置</span><br><span class="line">sidebar: true    </span><br><span class="line">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class="line">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class="line">widgets:  </span><br><span class="line">- featured-tags</span><br><span class="line">- short-about</span><br><span class="line">- recent-posts</span><br><span class="line">- friends-blog</span><br><span class="line">- archive</span><br><span class="line">- category</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># markdown编译器的一些配置</span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true</span><br><span class="line">    xhtmlOut: false</span><br><span class="line">    breaks: true</span><br><span class="line">    linkify: true</span><br><span class="line">    typographer: true</span><br><span class="line">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure><p>这里有配置背景图<br>推荐一个常用的<a href="https://bing.ioliu.cn/" target="_blank" rel="external">壁纸网站</a></p><p>下面是一些命令行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 新建文章</span><br><span class="line">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class="line"></span><br><span class="line"># 删除临时数据库</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 编译为html</span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"># 开启server</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="使用vscode写文章">使用vscode写文章</h2><p>打开建立的项目文件夹</p><p>在/source/_posts/下新建md文件为新文章</p><p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>其他可选择的也有写文章的hexo插件 <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="external">hexo-admin</a></p><p>command+shift+p 搜索markdown open preview to the side</p><p>就可以在左边写右边实时查看效果了</p><p>推荐一个自己记录最简markdown手册 <a href="https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md" target="_blank" rel="external">markdown手册</a></p><p>在markdown文件开头加上一些文章的必备信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;标题&quot;</span><br><span class="line">date: 1999-01-01 00:00:00</span><br><span class="line">subtitle: &quot;副标题&quot;</span><br><span class="line">header-img: &quot;/img/图片.jpg&quot;</span><br><span class="line">tags:</span><br><span class="line">- 标签</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后开始写文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此处省略一万字</span><br></pre></td></tr></table></figure><h2 id="介绍一些插件">介绍一些插件</h2><p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p><p>也有一些主题也内置了一些插件，直接配置即可。</p><p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p><h3 id="访问次数插件">访问次数插件</h3><p>这里试用下 <a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">不蒜子</a> 来做访问次数。</p><p>编辑 /_config.yml 在最后加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>找到/themes/主题名/layout/_partial/footer.ejs</p><p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class="line">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>下面这个是页面访问次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="评论插件">评论插件</h3><p>这里使用的是<a href="https://valine.js.org/" target="_blank" rel="external">valine</a> 和 <a href="https://leancloud.cn/" target="_blank" rel="external">leancloud</a></p><p>valine是前端部分嵌入组件，leancloud来存储信息</p><p>注册等步骤就不贴了,看<a href="https://valine.js.org/quickstart.html" target="_blank" rel="external">这里</a></p><p>说下嵌入的部分，在/themes/主题名/post.ejs</p><p>找个合适的标签下面加入，基本就和上面文章对齐就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class="line">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Valine(&#123;</span><br><span class="line">        el: &apos;#vcomments&apos;,</span><br><span class="line">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class="line">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class="line">        notify:false, </span><br><span class="line">        verify:false, </span><br><span class="line">        avatar:&apos;mp&apos;, </span><br><span class="line">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p><p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p><p>敲黑板，下面是重点👇😁😁</p><blockquote><p>左边妹子的插件就搜下 <a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d" target="_blank" rel="external">hexo live2d</a></p></blockquote><h2 id="域名配置">域名配置</h2><p>最后来了解一下上传到github后域名配置。</p><p>在 hexo deploy 前</p><p>配置 /source/CNAME, 写解析后的域名</p><p>在买域名的域名管理处进行域名解析</p><p>记录类型CNAME =&gt; <a href="http://xn--github-ud6jy198a.github.io" target="_blank" rel="external">github账号.github.io</a></p><p>就可以通过域名访问啦！</p><h2 id="多终端同步">多终端同步</h2><p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p><p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p><p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">项目根目录下/</span><br><span class="line"># 引入git</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 设置远程地址</span><br><span class="line">git remote add origin git地址</span><br><span class="line"></span><br><span class="line"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"></span><br><span class="line"># 添加.gitignore，加入</span><br><span class="line">public/</span><br><span class="line">.vscode</span><br><span class="line">node_modules</span><br><span class="line"></span><br><span class="line"># git三连</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>终端使用写博客前先clone / pull一下，</p><p>写完deploy后 再 git三连就行</p><h2 id="拓展内容">拓展内容</h2><p>自建主题</p><p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p><p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>然后修改_config.yml的主题配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主题下主要文件结构</span><br><span class="line">/layout # 主要布局，样式文件</span><br><span class="line">/source # 外部js css等</span><br><span class="line">_config.yml # 配置文件</span><br></pre></td></tr></table></figure><p>数据主要靠模板的方式加载，其他还是和原生js差不多</p><p>贴个不错的<a href="https://www.cnblogs.com/yyhh/p/11058985.html" target="_blank" rel="external">教程</a></p><h2 id="最后一席话">最后一席话</h2><p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p><p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p><p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p><p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p><p>希望这个博客可以坚持久一些~</p>]]></content>
      
      
      
        <tags>
            
            <tag> OTHER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回校之路</title>
      <link href="article/2018/article_28_%E5%9B%9E%E6%A0%A1%E4%B9%8B%E8%B7%AF/"/>
      <url>article/2018/article_28_%E5%9B%9E%E6%A0%A1%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>晚六下班，走上回校之路。<a id="more"></a></p><p>同是在杭州，工作在杭的这一端，学校在杭的另一端。</p><p>公交堵在半路，饥肠辘辘之际，</p><p>是不是该总结些什么。</p><p>上一篇记得是是工作之初，现在已然是老司机上路。</p><p>工作内容，于我来说虽然大部分是运维，小部分是自己摸索性开发，但也不至于太抗拒。也就是之前所想的广度上增加了一些，仿佛很少感受自己在纵向有多少进步，说不定还在退步。凉凉与我同在。</p><p>工作还是有了解了更多的人，见识了更多的事。但工作期间真正能接触的圈子也寥寥无几，而前期默认又放弃了晚间的活动而待在公司更为加剧，或成为朋友，或成为路人，遵从内心，绝不违和。总有身不由己的事，积极追逐的事，事事交错之间，自己独立之思想或许更为宝贵。独立思考自己的身边小事，独立思考自己的人生大事…</p><p>弹琴这件事情作为除了工作为数不多一直在做的事，另一件也就农药了，这里也就不述什么游戏高端操作咯。能看明白琴谱且长进了速度，慢慢弹且多练几遍，流行谱子的选段还是能弹下来的。目标便是看谱弹，看样还很遥远，这事从来不急，反正只弹给自己听。</p><p>这回回学校就大四老学长了，时光如逝，我的大学生活外人看来普普通通，但我已无悔的付出过，不能兼济天下，但足以独善其身。常和同学口头拌嘴&quot;你怎么这么优秀&quot;，虽然没有奖状的耀眼，但大学从没停止对优秀的追求，希望这份自以为的优秀常伴人生。</p><p>学校里还剩的也就个毕业设计了，于我应该不会太难，也是给大学个圆满的句号，下次怕不是毕业典礼咯。</p><p>没有很多后面的安排，甚至连几天的都没。出去玩也走不远，都懒得动了；换工作也没这必要性，坐等底线咯；工作外的生活平平淡淡，假装平淡是真。在社会的大潮中随风飘摇，不知谁主沉浮。</p><p>在这儿工作，周末回家还是比较奢侈，路上得花个678个小时，自己弄得累。也就大大小小的节日，马上是国庆，之后就要过年咯。虽然是周边城市，觉得在杭州也都是异乡人，和东北的西北的也没多大差别，一种独自在外打拼感，一种空手起家迷茫感。</p><p>不再很多的思考工作价值论，发现有高学历的朋友也会有同样的困惑，怕是人生大都如此，不去想反而无忧。自己的隐形价值观可能都是可体会但不能言说的，或者说说了但别人谁又能真正理解呢。子非鱼安知鱼之乐。</p><p>头发长了，也该剪了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>写个基于screen和expect的服务器管理小工具</title>
      <link href="article/2018/article_27_%E5%86%99%E4%B8%AA%E5%9F%BA%E4%BA%8Escreen%E5%92%8Cexpect%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>article/2018/article_27_%E5%86%99%E4%B8%AA%E5%9F%BA%E4%BA%8Escreen%E5%92%8Cexpect%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>日常管理的服务器如果很多，总会感觉连完这个连那个，要么要重复输入用户密码，要么在如xshell中的一个长列表中找寻所需的服务器。比较难受就自己写个工具来连接多台服务器，并用screen保持会话。<a id="more"></a></p><p>先配环境，此处默认centos咯。</p><pre>yum install -y screenyum install -y expect</pre><p>由于ssh连接要输入用户密码，因此得写expect脚本。</p><p>先创建一个ssh.conf用来放需要连接的服务器,格式为</p><pre>name1 root@192.168.1.1 password1name2 root@192.168.1.2 password2</pre><p><a href="http://xn--expectscreen-ix4ssno35buqji53cpr3aut6dks0b.sh" target="_blank" rel="external">同目录下写个expect脚本screen.sh</a>，修改其权限为755.</p><pre>chmod 755 screen.sh</pre><p>主要功能为创建screen，登录用户名密码。</p><div class="highlight"><pre> 1 #!/bin/expect -f  2  3 set timeout 30 4  5 set fid [open screen.conf r] 6 while {[gets $fid line] &gt;= 0} { 7     set name [lindex $line 0] 8     set port [lindex $line 1] 9     set pwd [lindex $line 2]10     spawn screen -S $name ssh $port11     expect {12         "*yes/no" { send "yes\r"; exp_continue }13         "*password:" { send "$pwd\r" } 14     }15     expect { 16         "Last login*" {17             send "\01d"18         }19     }20     puts "$name | $port added"21 }</pre>再在同目录下创建个start.sh<p>用于检测有哪些会话没起来写入screen.conf,再调用screen.sh重启一遍。</p><div class="highlight"><pre> 1 #!/bin/bash 2  3 while true 4 do 5  6     rm -rf screen.conf 7  8     n=0 9 10     while read ll11     do12         name=`echo $ll |awk '{print $1}'`13         ss=`screen -ls |grep "\.$name"`14         if [ ${ #ss} -lt 5 ];then15             echo $ll &gt;&gt; screen.conf16             n=`expr $n + 1`17         fi18     done &lt; ssh.conf19 20     if [ $n -gt 0 ];then21        ./screen.sh22     fi23 24     rm -rf screen.conf25     sleep 1026 done</pre>运行：<pre>nohup start.sh &gt;&gt; screen.log 2&gt;&amp;1 &amp;</pre></div><div class="highlight"><p>以前嫌弃没机器，性能不行，现在手头机器太多也都是烦恼呢。</p></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用virsh进行虚拟机管理</title>
      <link href="article/2018/article_26_%E7%94%A8virsh%E8%BF%9B%E8%A1%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/"/>
      <url>article/2018/article_26_%E7%94%A8virsh%E8%BF%9B%E8%A1%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>最近做运维，觉得学得比较实用点的技能就是管理虚拟机了。<a id="more"></a></p><p>这里使用的环境是已经装了centos的物理机上。</p><p>首先配置所需库，用yum下载就可以</p><pre>yum -y install qemu-kvm qemu-key-tools virt-manager libvirt virt-install python-virtinst bridge-utilsyum -y install kvm qemu libvirt virt-viewer qemu-systemyum -y install libguestfs-tools</pre><p>在/home下mkdir创建一个vm文件夹用于存放img镜像</p><pre>qemu-img create -f qcow2 /home/vm/名称.img 容量(例：100G)</pre><p>当然还得有需要准备要装的系统的iso镜像</p><p>下面命令为安装虚拟机，参数分别为：虚拟机名称，cpu，内存，iso镜像路径，img镜像路径，vnc端口</p><pre>virt-install \--name name \--vcpus=2 \--ram 2048 \--cdrom=/home/CentOS-7-x86_64-DVD-1511.iso –disk \path=/home/gjc/CentOS7_DVD1511.img \--graphics vnc,listen=0.0.0.0,port=5910</pre><p>安装完的虚拟机配置文件在/etc/libvirt/qemu/xxx.xml，可以修改配置文件在virsh define xxx一下就可以更新配置。</p><p>下载打开软件tightVNC，输入对应的ip和port，连接进行对应系统的图形化安装。</p><p>这里以linux centos7.2图形安装为例：</p><p>选择Install Centos Linux7 进入下一步</p><p>配置时间为北京时间，看左下角时间可能有偏差，调整一下</p><p>进入Software Selection，左边选择Virtualization Host，右边选择virtualization Platform和Development Tools。</p><p>下面一个是磁盘分区，在物理机装的话分一下</p><pre>/boot 分 2g，/swap 分 16g，/ 分 100g，其他给/home</pre><p>虚拟机的话自动分配就行。</p><p>然后是配置网络，IPv4 Setting中add一个写ip（写和主机ip最后一个端不同就行），子网掩码（255.255.255.0），网关(和主机网关一样)。写一个常用的dns服务器。</p><p>IPV6设置ignore</p><p>点击install就开始安装</p><p>然后设置root用户的密码，就可以等待安装完成。</p><p>虚拟机和主机通过桥连。</p><p>主机网络配置：在/etc/sysconfig/network-scripts/下加一个ifcfg-br0网卡，配置连接方式为桥连，其他与之前配置的网卡一样。</p><p>改之前的网卡的BRIDGE为br0，其他ipv4设置的一些都可以去掉。</p><p>虚拟机的话就之前安装时写的网络配置就行。</p><p>以下是virsh日常管理操作</p><pre>列出running的虚拟机 (--all)为所有虚拟机virsh list开关虚拟机virsh start namevirsh shutdown name/numvirsh destroy name/num删除虚拟机，删除前需关闭virsh undefine name虚拟机快照(很有用)virsh snapshot-list name/num虚拟机快照回退，回退后要到具体的机器上校准时间virsh snapshot-revert name/num snapid删除快照virsh snapshot-delete name/num snapid克隆虚拟机virt-clone -o 克隆虚拟机名称 -n 目标虚拟机名称 -f 路径/name.img</pre><p>下面是克隆虚拟机的全部过程脚本</p><pre>name=clone1 #虚拟机名称port=5901 # vnc端口ip=192.168.199.63 #虚拟机网卡ipdir=/home/vm/ #img路径virsh destroy base #基础虚拟机叫baserm -rf $dir$name.imgvirt-clone -o base -n $name -f $dir$name.img #克隆virt-copy-out -d $name /etc/sysconfig/network-scripts/ifcfg-eth0 ./sed -i "s/IPADDR=.<em>/IPADDR=\"$ip\"/" ifcfg-eth0 #改网卡virt-copy-in -d $name ./ifcfg-eth0 /etc/sysconfig/network-scripts/rm -rf ./ifcfg-eht0sed -i "s/&lt;graphics.</em>//" /etc/libvirt/qemu/$name.xml #改配置virsh define /etc/libvirt/qemu/$name.xmlvirsh start $name #重启virsh start base</pre><p>其中用的较多的就是克隆和快照，一个方便复制机器，一个方便回到过去。</p><p>掌握这两个日常虚拟机管理就基本无压力咯。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>试试树莓派，反正也是python</title>
      <link href="article/2018/article_25_%E8%AF%95%E8%AF%95%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%8C%E5%8F%8D%E6%AD%A3%E4%B9%9F%E6%98%AFpython/"/>
      <url>article/2018/article_25_%E8%AF%95%E8%AF%95%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%8C%E5%8F%8D%E6%AD%A3%E4%B9%9F%E6%98%AFpython/</url>
      
        <content type="html"><![CDATA[<p>学校一个课程用到，在linux实现一个qt界面来控制几个硬件功能：摄像头，温湿度，超声波测距，红绿灯。<a id="more"></a></p><p>安装对应库，运行代码前就是要把器件连到对应的引脚上。</p><pre>#coding:utf-8#author:!@#$%^&amp;*()_+gansterfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication,QLCDNumber,QVBoxLayout,QGridLayout,QCheckBox,QPushButtonfrom PyQt5.QtGui import QPixmap,QImagefrom PyQt5.QtCore import QThread,Qt,pyqtSignalfrom picamera.array import PiRGBArrayfrom picamera import PiCameraimport RPi.GPIO as GPIOimport numpy as npimport sysimport timeimport cv2import osGPIO.setmode(GPIO.BCM)GPIO.setup(16, GPIO.OUT)  #红GPIO.setup(20,GPIO.OUT)  #黄GPIO.setup(21,GPIO.OUT) #绿#超声波测距端口Trig_Pin = 5Echo_Pin = 6GPIO.setup(Trig_Pin, GPIO.OUT, initial = GPIO.LOW)GPIO.setup(Echo_Pin, GPIO.IN)#温湿度端口channel = 4#温湿度def get_temp():    data = []    j = 0    GPIO.setup(channel, GPIO.OUT)    GPIO.output(channel, GPIO.LOW)    time.sleep(0.02)    GPIO.output(channel, GPIO.HIGH)    GPIO.setup(channel, GPIO.IN)    while GPIO.input(channel) == GPIO.LOW:        continue    while GPIO.input(channel) == GPIO.HIGH:        continue    while j &lt; 40:        k = 0        while GPIO.input(channel) == GPIO.LOW:            continue        while GPIO.input(channel) == GPIO.HIGH:            k += 1            if k &gt; 100:                break        if k &lt; 8:            data.append(0)        else:            data.append(1)        j += 1    humidity_bit = data[0:8]    humidity_point_bit = data[8:16]    temperature_bit = data[16:24]    temperature_point_bit = data[24:32]    check_bit = data[32:40]    humidity = 0    humidity_point = 0    temperature = 0    temperature_point = 0    check = 0       for i in range(8):        humidity += humidity_bit[i] * 2 ** (7-i)        humidity_point += humidity_point_bit[i] * 2 ** (7-i)        temperature += temperature_bit[i] * 2 ** (7-i)        temperature_point += temperature_point_bit[i] * 2 ** (7-i)        check += check_bit[i] * 2 ** (7-i)       tmp = humidity + humidity_point + temperature + temperature_point       if check == tmp:        return [temperature,humidity]    else:        return [0,0]    GPIO.cleanup()#超声波测距def get_dis():    GPIO.output(Trig_Pin, GPIO.HIGH)    time.sleep(0.00015)    GPIO.output(Trig_Pin, GPIO.LOW)    while not GPIO.input(Echo_Pin):        pass    t1 = time.time()    while GPIO.input(Echo_Pin):        pass    t2 = time.time()    return round((t2-t1)*340*100/2,2)#qt视图模块class Example(QWidget):    def __init__(self):        super().__init__()        #初始化视图        self.initUI()        #线程，用于更新摄像头图像        self.sum = Sum()        self.sum.sinOut.connect(self.update_img)        self.sum.start()          self.r = 0        self.g = 0        self.y = 0        self.show()          def initUI(self):              #加入按钮，复选框，lcd，并绑定事件        hbox = QGridLayout(self)        self.lbl = QLabel(self)        self.lcd1 = QLCDNumber(self)        self.lcd2 = QLCDNumber(self)        self.cb1 = QCheckBox('red',self)        self.cb2 = QCheckBox('yellow',self)        self.cb3 = QCheckBox('green',self)        self.cb1.stateChanged.connect(self.changecb1)        self.cb2.stateChanged.connect(self.changecb2)        self.cb3.stateChanged.connect(self.changecb3)        self.btn = QPushButton(self)        self.btn.setText("start")        self.btn.clicked.connect(self.update_num)        self.lcd3 = QLCDNumber(self)        self.btn1 = QPushButton(self)        self.btn1.setText("dis start")        self.btn1.clicked.connect(self.update_dis)        hbox.addWidget(self.lbl,0,0,1,3)        hbox.addWidget(self.lcd1,1,0,1,1)        hbox.addWidget(self.lcd2,1,1,1,1)        hbox.addWidget(self.cb1,3,0,1,1)        hbox.addWidget(self.cb2,3,1,1,1)        hbox.addWidget(self.cb3,3,2,1,1)        hbox.addWidget(self.btn,1,2,1,1)        hbox.addWidget(self.lcd3,2,0,1,2)        hbox.addWidget(self.btn1,2,2,1,1)        self.setLayout(hbox)    #更新图像    def update_img(self,im):        height, width, bytesPerComponent= im.shape        bytesPerLine = bytesPerComponent* width        cv2.cvtColor(im, cv2.COLOR_BGR2RGB,im)        self.image= QImage(im.data, width, height, bytesPerLine, QImage.Format_RGB888)        self.lbl.setPixmap(QPixmap.fromImage(self.image))    #更新温湿度    def update_num(self):        #res = os.popen("python temp.py")        #li = list(map(int,res.read().strip().split(",")))        li = get_temp()        print(li)        self.lcd1.display(li[0])        self.lcd2.display(li[1])    #更新距离    def update_dis(self):        self.lcd3.display(get_dis())    #更新复选框    def changecb1(self):        if self.r == 0:            GPIO.output(16,GPIO.HIGH)            self.r = 1        else:            GPIO.output(16,GPIO.LOW)            self.r = 0    def changecb2(self):        if self.y == 0:            GPIO.output(20,GPIO.HIGH)            self.y = 1        else:            GPIO.output(20,GPIO.LOW)            self.y = 0    def changecb3(self):        if self.g == 0:            GPIO.output(21,GPIO.HIGH)            self.g = 1        else:            GPIO.output(21,GPIO.LOW)            self.g = 0#线程，用于更新图像class Sum(QThread):    sinOut = pyqtSignal(np.ndarray)    def __init__(self):        super().__init__()        self.camera = PiCamera()        self.camera.resolution = (640, 480)        self.camera.framerate = 32        self.rawCapture = PiRGBArray(self.camera, size=(640, 480))    def run(self):           for frame in self.camera.capture_continuous(self.rawCapture, format="bgr", use_video_port=True):            image = frame.array            self.sinOut.emit(image)            self.rawCapture.truncate()            self.rawCapture.seek(0)            time.sleep(0.2)#主函数if __name__ == '__main__':    app = QApplication(sys.argv)    ex = Example()    sys.exit(app.exec_())</pre><p>作为电子专业，单片机，FPGA，树莓派都玩了，也差不多无憾了。</p><p>但也说不定是最后一次接触硬件方面的东西了呢。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>上班，上班</title>
      <link href="article/2018/article_24_%E4%B8%8A%E7%8F%AD%EF%BC%8C%E4%B8%8A%E7%8F%AD/"/>
      <url>article/2018/article_24_%E4%B8%8A%E7%8F%AD%EF%BC%8C%E4%B8%8A%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<p>生活总是要过的，班也总是要上的。<a id="more"></a></p><p>上班一周，虽然也是第二次上班了，但感受还是很不一样的。</p><p>开始有些顾虑，顾虑后面的发展与自我的价值。</p><p>之前很多事情来的突然，求职，面试，租房，搬家，上班，都只能凭着自己的感觉走。</p><p>不知道自己第六感的感觉是对是错，或许需要些时日能看出。</p><p>虽然知道事情总是会水到渠成，自己能做的也只能是放平心态。</p><p>公司不大不小，不好说啥，不求带来什么大的改变，做好自己的吧。</p><p>尽快融入集体把，按经验来看我还是个比较容易融入的人。</p><p>选择性的交一些朋友，没有理由，靠的都是眼缘吧。</p><p>技术上的拓展目测大部分还是在于广度，看今后的博文或许能反应。</p><p>也是有水平厉害的人在周边，或许我的学习动力还不够。</p><p>这甚至让我怀疑老了还能不能做不做技术。</p><p>租的房子虽然小而北，有机会可以尝试装饰一下不同风格。</p><p>合租的朋友也是缘分，希望可以有机会交流人生，谈谈理想。</p><p>小区离工作地方还有1.5公里路，天气凉走走也挺好，天热还是比较蓝瘦的。</p><p>有决心了就买个电动轮，还可以开辟远一些的生活活动区域。</p><p>公司加班有顿饭，没啥大事基本上也就加了，或许这少了些本可以做的生活上的事情。</p><p>暂时还没想到能开辟啥其他生活上的事情，之后再看，如做饭，健身等。</p><p>练琴看来是要规划一下每天的时间，定点才有执行率。</p><p>目前还没好好计划周末，看来是可以规划规划，当然回家也是需要滴。</p><p>感情可以先放一放，我或许需要安定一下再来考虑。</p><p>也不知道我所谓的安定是啥，在这个巨大的城市里。是物质的追求如房车吗，内心尽量着不同意这个观念。但也没其他观点。</p><p>仿佛是需要一定程度的认识和了解才会有追求的想法，还没到相亲的地步，也基本不会有一见钟情的杂想。</p><p>因此这个对于我这种小圈子的人是比较难的，比较不会刻意。</p><p>在学校说起来还就大三，咋这么社会了呢，毕竟还有一大部分追求着考研的学术路的学子呢。回头自己的这些个实习的过程确实有影响着自己的思想。</p><p>出来后大部分人说你还年轻，还有说可以去北上广闯闯，我需要梁静茹。</p><p>仿佛一般的暖文书籍已经治愈不了我了，看来需要一些其他风格的书籍。</p><p>近期再找找书籍，每天上班放在桌边，能看一小会，算作工作期间小有的娱乐。</p><p>关于开头讲的自我价值，希望在工作中可以领悟到，而不是工作几年后觉得自己做的都是无用功，到时候从头再来就比现在晚多了。</p><p>看到一些文章讲心灵上或许减少一些对赞美的需求和对物质的抱怨更容易发现自己的价值。</p><p>后面的发展谁知道呢，一些在学校时小清新的目标转而模糊，面对现实，该咋地咋地呗。就像那个演讲------别让任何人打乱你的人生节奏，自己能做的仅仅就是BE PATIENT。</p><p>近期貌似少有去旅行，或许有机会好好策划一下所谓的毕业旅行，给自己一个出去的理由。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>打造基金小数据库</title>
      <link href="article/2018/article_23_%E6%89%93%E9%80%A0%E5%9F%BA%E9%87%91%E5%B0%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>article/2018/article_23_%E6%89%93%E9%80%A0%E5%9F%BA%E9%87%91%E5%B0%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>买过些基金，想着也可以自己打造个管理基金的，这会儿先弄来个基金数据库。<a id="more"></a></p><p>基金数据来自于chinafund。</p><p>先前准备：配置好mongodb的环境和下载好pymongo库且使用默认配置</p><p>用于获取数据：<a href="http://jj.py" target="_blank" rel="external">jj.py</a></p><pre>#coding:utf-8#author:~!@#$%^&amp;*()_+gansterimport io import reimport sys import jsonimport requestsimport datetimeimport pandas as pdfrom bs4 import BeautifulSoupimport timesys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')req = requests.Session()today = datetime.datetime.today().strftime("%Y-%m-%d")#获取单个基金历史净值#只能用于开放基金#返回数据dataframedef get_jjjz(code,start="2018-01-01",end=today):    data = {        "startdate": start,        "enddate": today,        "code": code    }    resp = req.post("http://info.chinafund.cn/fund/"+code+"/jjjz/",data=data)    htmlstr = resp.text    print(htmlstr,file=open("test.html","w",encoding="utf-8"))    arrstr = re.findall(r"fundlsjz = (.*);",htmlstr)[0].replace("\'","\"")    jsondata = json.loads(arrstr)    data = pd.DataFrame(jsondata,columns=["date","dwjz","ljjz"])    return data#代码 简称 分类 单位净值 累计净值 日增值 日增长 周增 月增 季增 半年增 年增#获取当日所有基金净值,月增长等#返回数据dataframe,日期stringdef get_day_info():    htmlstr = req.get("http://data.chinafund.cn/?WebShieldDRSessionVerify=b1U3PfdG5OPHxthA5c4k")    htmlstr.encoding="gbk"    #保存html    #print(htmlstr.text,file=open("test.html","w",encoding="utf-8"))    soup = BeautifulSoup(htmlstr.text,"lxml")    date = soup.title.get_text()[10:20]    node = soup.find_all("table",{"id":"tablesorter"})[0]    trnode = node.find_all("tr")    data = []    for i in range(1,len(trnode)):        tdnodes = trnode[i].find_all("td")        tmp = [tdnodes[2].get_text(),tdnodes[3].get_text(),tdnodes[4].img["src"][-5],tdnodes[5].get_text(),tdnodes[6].get_text(),tdnodes[7].get_text(),tdnodes[8].get_text(),tdnodes[9].get_text(),tdnodes[10].get_text(),tdnodes[11].get_text(),tdnodes[12].get_text(),tdnodes[13].get_text()]        data.append(tmp)    res = pd.DataFrame(data,columns=["code","name","cate","dwjz","ljjz","rzzhi","rzzha","zhz","yz","jz","bnz","nz"])    return res,date#获取开放基金列表#jj_list.csv为上面获取的当日基金code列#注：当日基金中为全部基金，开放基金只有一部分。def get_jj_list():    return pd.read_csv("jj_list1.csv",index_col=0)    #make jj_list    '''    res = []    jj_list = pd.read_csv("jj_list.csv")    resp = req.get("http://info.chinafund.cn/")    resp.encoding="gbk"    soup = BeautifulSoup(resp.text,"lxml")    for n in range(1,24):        divnode = soup.find_all("div",{"id":"kfjj_"+str(n)})[0]        trnodes = divnode.find_all("tr")        for i in range(1,len(trnodes)):            tdnodes = trnodes[i].find_all("td")            tmp = [tdnodes[0].get_text(),tdnodes[1].get_text()]            try:                tmp.append(int(jj_list[jj_list["code"]==int(tmp[0])]["cate"].values[0]))            except:                tmp.append(0)            res.append(tmp)    data = pd.DataFrame(res,columns=["code","name","cate"])    '''#保存为csv格式def save_csv(data,filename="nofilename"):    data.to_csv(filename+".csv",encoding='utf_8_sig')#计算关注基金涨跌幅#返回listdef jj_zdf(code,start):    tmp = get_jjjz(code,start=start)    dwjz = tmp["dwjz"]    first = dwjz[len(tmp)-1]    zdf = ((dwjz-first)/first).tolist()[::-1]    return zdf#计算关注股票的涨跌幅#返回字典，key为基金codedef jj_follow_zdf(follow):    zdfs = {}    for jj in follow:        print(jj[0])        try:            zdfs[jj[0]] = jj_zdf(jj[0],jj[1])        except:            print("error:"+jj[0])        time.sleep(10)    return zdfs#以类别筛选基金#1-股票型，2-指数型，3-混合型，4-债券型，5-QDIIdef jj_select_cate(category="2"):    jj_list,_ = get_day_info()    return jj_list[jj_list['cate']==category]#筛选指数型基金并获取一个月涨跌幅def jj_test():    jjs = jj_select_cate(2)    follow = []    for i in jjs["code"]:        follow.append([str(i).zfill(6),"2018-05-07"])    print(json.dump(jj_follow_zdf(follow),open("test.json","w")))</pre><p>用于数据库插入：<a href="http://jjdb.py" target="_blank" rel="external">jjdb.py</a></p><pre>from pymongo import MongoClientimport datetimeimport jjclient = MongoClient()DB = client.jj#检查时间是否今天（今天是否是交易日）def check_time(date):    today = datetime.date.today().strftime("%Y-%m-%d")    if date == today:        return True    else:        return False#str转换成floatdef trans_float(num):    try:        res = float(num)    except:        res = float(0)    return res#插入日期和单位净值def insert_data(data,date):    for i in range(len(data)):        collection = DB[data.iloc[i]["code"]]        posts = {"_id":date,"value":trans_float(data.iloc[i]["dwjz"])}        collection.insert_one(posts)#主函数def main():    data,date = jj.get_day_info()    if check_time(date):        insert_data(data,date)    else:        returnif __name__ == "__main__":    main()</pre><p>为了每天定时运行，这里顺便来学一下linux的crontab</p><pre>#修改crontab配置文件crontab -e</pre><pre>示例：前五个分别为分(0-59) 时(0-23) 天(1-31) 月(1-12) 星期(0-6) 后面是命令&gt;&gt;之后是log文件2&gt;&amp;1表示正确错误的log都打印到log文件* * * * * /usr/local/bin/python3 /home/jjdb.py &gt;&gt; /root/test/test.log 2&gt;&amp;1</pre><p>修改完保存就能用。</p><p>这里只做了进净值存储，后期还可以做一些基金管理，统计分析之类的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视频运动检测尝试</title>
      <link href="article/2018/article_22_%E8%A7%86%E9%A2%91%E8%BF%90%E5%8A%A8%E6%A3%80%E6%B5%8B%E5%B0%9D%E8%AF%95/"/>
      <url>article/2018/article_22_%E8%A7%86%E9%A2%91%E8%BF%90%E5%8A%A8%E6%A3%80%E6%B5%8B%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>这里主要尝试一个用背景减除法实现运动检测<a id="more"></a></p><p>视频是yuv格式，这里讲一下yuv的格式读取。用二进制读取yuv文件，从开头开始前w<em>h个字符的ascii码则是第一帧的灰度图（8位int），后面第w//2</em>h//2*2个字符存的是rgb信息。然后开始是第二帧。</p><p>这里基本思路就是每次更新背景，然后做差分，然后优化噪声。</p><p>直接上代码</p><pre>import cv2import osimport numpy as npclass AnimTest():    def __init__(self):        self.bg = None    #存背景，用int16        self.n = 0        #用于计数第几张图    def resolution(self, w, h):        self.w = w        self.h = h        self.im = np.zeros((h,w))   #差分去噪处理后的返回矩阵    def cell_split(self, row, col):          self.r = self.h // row     #每格高        self.c = self.w // col     #每格宽        # draw        '''        for i in range(self.r-1, self.h-1, self.r):            self.im[i] = 0        for j in range(self.c-1, self.w-1, self.c):            tmp = self.im.T            tmp[j] = 0        self.im = tmp.T        '''    def dir_region(self, x, y, x1, y1):        #计算真实的左上，右下坐标        self.x = self.c * x                 self.y = self.r * y        self.x1 = self.c * x1 - 1        self.y1 = self.r * y1 - 1        #print(self.x,self.y,self.x1,self.y1)        #draw        '''        for i in range(self.c * x,self.c * x1):            self.im[self.y][i] = 255            self.im[self.y1][i] = 255        for i in range(self.r * y,self.r * y1):            self.im[i][self.x] = 255            self.im[i][self.x1] = 255        '''    def set_threshold(self, t, s):        self.t = t        self.s = s    def yuv_process(self,im):        if self.bg is None:            self.bg = im.astype(np.int16)        #self.im = np.abs(self.bg-im)        '''        for i in range(self.x,self.x1):            for j in range(self.y,self.y1):                if im[i][j]&gt;self.bg[i][j]:                    self.im[i][j] = im[i][j]-self.bg[i][j]                else:                    self.im[i][j] = self.bg[i][j]-im[i][j]                if self.im[i][j] &lt; 20:                    self.im[i][j] = 0        '''        #self.im = self.fgbg.apply(im)        #背景数据得新背景        self.n += 1        tmpbg = (self.bg / self.n).astype(np.uint8)  #背景除次数，转为uint8格式        #优化图像与背景差分后的图像        self.im = cv2.absdiff(im,tmpbg)            #做差        self.im[np.where(self.im&lt;50)] = 0          #二值        self.im[np.where(self.im&gt;=50)] = 255        #mean = self.im.mean()        #var = self.im.std()        #print(mean,var)        #self.im[np.where(np.abs(self.im - mean) - 2.0 * var &gt; 0)] = 255        #self.im[np.where(self.im != 255)] = 0        #背景迭代更新储存背景数据        #im[np.where(self.im==255)] = 0        self.bg = self.bg + im                    #背景叠加        #print(self.bg[0][0])        #print(im.dtype)        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))      #膨胀或腐蚀大小        #self.im = cv2.erode(self.im,kernel)        #膨胀        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))        #self.im = cv2.dilate(self.im,kernel)       #腐蚀        #self.im = cv2.morphologyEx(self.im, cv2.MORPH_OPEN, kernel)    #开运算        #这里没返回，直接到展示show()    def show(self,i):        res=cv2.resize(self.im,(192*5,108*5),interpolation = cv2.INTER_CUBIC)        cv2.imshow('image', res)        cv2.waitKey(20)        #print(i)        #cv2.imwrite("tmp/"+str(i)+".jpg",self.im)def readYuvFile1(fp,width,height):    uv_width=width//2    uv_height=height//2    Y=np.zeros((height,width),np.uint8,'C')    for m in range(height):        for n in range(width):            Y[m,n]=ord(fp.read(1))    fp.read(uv_height*uv_width*2)    return Yif __name__ == "__main__":     #fgbg = cv2.bgsegm.createBackgroundSubtractorMOG()       #opencv 封装的一些背景减除方法MOG，MOG2等    #下载图    '''    width = 1920    height = 1080    fp = open("雨+夜+马路1_1920x1080.yuv",'rb+')    for i in range(100):        print(i)        data = readYuvFile(fp,width,height)        Y=data[0]        cv2.imwrite("image/"+str(i)+".jpg",Y)    '''    #初始化    t = AnimTest()    width = 1920    height = 1080    t.resolution(width,height)    t.cell_split(108,192)    t.dir_region(0,0,108,192)    t.set_threshold(10,50)    #处理展示，这里直接用的下载好的图    for i in range(100):        #im = readYuvFile1(fp,width,height)        im = cv2.imread("image/"+str(i)+".jpg",0)        t.yuv_process(im)        t.show(i)</pre><p>效果如下：</p><img class="alignnone size-medium wp-image-671" src="/img/uploads/2018/06/微信图片_20180606185250-300x169.png" alt="" width="300" height="169"><p>对于室内人物移动效果还是可以的，但对于不位移或有遮挡干扰等效果还是不行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>花 与 字 （持续更新）</title>
      <link href="article/2018/article_16_%E8%8A%B1%20%E4%B8%8E%20%E5%AD%97%20%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>article/2018/article_16_%E8%8A%B1%20%E4%B8%8E%20%E5%AD%97%20%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>如有雷同，纯属巧合。</p><a id="more"></a><ul> <li>封闭的修炼 与 随性的创作</li></ul>常常想着要提升自己，又由很多闭门修炼的别人家的故事的影响，也想尝试一把。<p>常常会憋出病来，或许就是前者的一般结局，主要由于不太规律的饮食习惯和作息，一个人常常就会如此。</p><p>随性创作则是在日常生活的基础上有空便随性的想一些事情，有时候便会有特别的灵感。然后在对此进行特别的记录与操作。</p><p>本人较为喜欢走走路然后想着事情，或许就会得到最佳的解决方案。</p><ul> <li>所谓的原则 与 我可以将就</li></ul>主要还是本人租房时的一些所遇，如果你不准确的定一个上线和下线，你将难以租到想要的房子，因为总会有更好看的价格贵些，更便宜的设施差些，而那些推荐你的人总会推荐更贵的，一次次下压你的底线。<p>如果这时候你讲一句 我可以将就，那相当于你的底线进一步得到了下降，他还可以推荐给你更好一些的，价格也就贵一丢丢。然后你又要考虑将就不将就呢。</p><p>而定下原则即对于各种指标定好上下限，无论怎么诱惑你也不能超过这个原则，则你马上就能找到与原则相应的目标。</p><ul> <li>有车 与 没车</li></ul>看到一个说法：有说有车没车是完全不一样的人生，而豪车和二手车对人生来说差不了多少。暂时接纳这个观点，虽然还没到买车的地步。公共交通出行对于我一个人来说是没什么，但身边总不止我一个人，还有我家人，甚至未来的女友孩子。我想在路上有一个独立的小空间供聊聊天，出门再也不用看天气，说旅行就旅行等都是车带来的享受。暂定个小目标买车！<ul> <li>规划的是 与 非</li></ul>规划真是个奇妙的东西，之前我还一直觉得规划好的事情做起来比较顺手，可以去除自身的焦虑，如每天要干什么（如今天规划明天，上午的我有课，下午弹会琴，晚上看直播，随机写代码）。<p>没想到心内的焦虑也有一部分是规划产生的。就比如我大学的6月份，找着实习的机会，但只能暑假才开始入职，这个本是对暑假以及日后的一种规划，没想到很快找着了，但想着一个月后一定会去那里工作反而产生一种既想去又想去后会发生的事情的焦虑，所以这个我觉得在我入职前都会伴随着这种心绪，影响肯定是坏的，至少在一个月里坏了我不少心情与增加了不少压力。</p><p>猜测可能日常的你可调的规划是好的（如你要看一本书，你可以规划这周看完，但你看不完也没人管），带压力的强制的规划是自己给自己找麻烦（如你想着去考个英语46级，考试临近你的焦虑自然便产生了，而且是递增的）。或许：船到桥头自然直才是最好的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一小波面经</title>
      <link href="article/2018/article_20_%E4%B8%80%E5%B0%8F%E6%B3%A2%E9%9D%A2%E7%BB%8F/"/>
      <url>article/2018/article_20_%E4%B8%80%E5%B0%8F%E6%B3%A2%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<p>这是一波2018年456月间找暑假及应届生实习时的面试经验记录。<a id="more"></a></p><p>第一个面到的是海康威视。</p><p>投的是测试开发岗。我个人对测试开发的态度是工具可能没用过，学起来就好了。编程基础还是在的，掌握起来不难，所以比较自信。</p><p>发邮箱投了回复的很快，没两天就笔试，然后面试。笔试比较简单就一个工具的使用(打包安装包)，当然是看不懂他初始的代码，但根据报错信息也改对了。</p><p>我因为特殊情况也实际表态了要暑假入职。然而没过两天还是收到面试邀请了。不出意外他们招人很急，(这么快肯定急呀)。面试过程也没多墨迹，简单了解简历上的经历后，让当场看段代码说出功能，这段应该是他们正在用的吧，各个函数还得深入进去也比较复杂(不是逻辑上的复杂，而是不在那个情景中你知道他要干嘛)，我有些犹豫，因为我想明白的是他整个main的目的，而不是只是把ifelse逻辑说一说，就一直询问着，然后就没了，直接拒绝了。总的30分钟。</p><p>想来他们是要急招的，而我要暑假入职，这点和hr就我明说了，如果因为这点被t，那我是不服的。当然如果我超级符合要求他们也可以等，但我本来也不是做测试的(谁tm大学本科学测试啊)，肯定不会很符合啊，都要学起来的。总的来说给我感觉就很随意，这场面试本来就注定失败。抬走，下一个。</p><hr><p>阿里。投的是新零售的算法实习岗，先有初步测验(性格测验)，然后等了近一个月，才开放了在线笔试，中间还莫名有个笔试模拟题，感觉没啥帮助，只让我感受一下难度。在线笔试，30分钟11个选择题，每个题都不是瞄一眼可得到结果的(对我这种小白来说)，涉及算法复杂度，机器学习基础概念，概率论，长到不想读的题，算也算不出的题，题目读不懂的题等。笔试还有两道编程题，时间1h，我的两个题都是用dfs解决的，第一时间想不到好的方法就暴力的遍历，当然其中剪枝做得好其实也不慢。本地运行可以了放上去运行竟然0%通过，那时时间也不多了也就没想着再改算法了，草草交卷。</p><hr><p>大华。投的是测试实习岗，因为算法岗都要研究生以上，投了也没软用。我恰好参加了个他们公司弄的软件挑战赛(初赛比的是基础的算法解题，类似leetcode,在博客前几篇有具体讲述)，又恰好进了复赛(也就可以免笔试资格)，待续～</p><hr><p>蘑菇街。投的是算法实习岗。投了以后两星期以内参加了在线笔试，但他那个笔试系统是在牛客网上的，题库应该也是牛客网提供。有些题甚至有些眼熟，哈哈。笔试有选择题，简答题，编程题。难度比阿里肯定简单些，而且如果你日常在牛客网刷题，那些个题很多能熟悉。然后一个月没消息，只能说雷声大雨点小。</p><hr><p>还有一些较小公司的，没有这么多复杂的环节，发了简历都是直接上来技术面试，我觉得倒是对于自己来说比较轻松（讨厌刁难人的笔试，首先我做的你看不看我不知道，参考多少也不知道，但我还得拼命做，死了脑细胞做完了直接拒绝/接受面试等权利都在你手上，仿佛我只有等结果的份？难道真是在笔试中学习不足，这就和你是啥啥就该干啥啥的一个套路。如年轻人就该多吃苦）。</p><p>默安科技；投的是python开发，没几天hr就来了电，也没聊什么，直接就让换个时间技术电话面试。晚9点左右的电话面试（看来他们9点还没下班啊！！），我也没特地准备，该知道的就说，不知道的直接回不知道（拖着反而尴尬）。几类问题吧：简介，项目经验（问各个用到的技术点以及拓展，比如我说用了mongodb，就问你mongodb和mysql对比），数据结构（二叉树，问了从上往下遍历递归版非递归版；链表，问了如何确定中间点，快慢指针法），算法（了解的几个排序，具体的说了快排的思路），linux（问了看端口监听，看进程的命令），计算机网络（问了ping的协议，tcp/udp的区别）；    总的来说问的不是特别难，在我说不会时也不会特地刁难，总长在25分钟不到，竟然问了这么多问题，很紧凑，目的明确，不拖泥带水（觉得这个对于面试者和被面试者都很重要）。隔天收到offer。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svm的一些理解---《机器学习》周志华</title>
      <link href="article/2018/article_21_svm%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3---%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E5%91%A8%E5%BF%97%E5%8D%8E/"/>
      <url>article/2018/article_21_svm%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3---%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E5%91%A8%E5%BF%97%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<p>svm的一些笔记，自己的一些见解，挑了自己能看懂的部分，点击看原图。<a id="more"></a></p><p><a href="/img/uploads/2018/05/IMG20180512230730.jpg"><img class="alignnone wp-image-641 size-large" src="/img/uploads/2018/05/IMG20180512230730-768x1024.jpg" alt="" width="525" height="700"></a></p><p><a href="/img/uploads/2018/05/IMG20180512230754.jpg"><img class="alignnone wp-image-642 size-large" src="/img/uploads/2018/05/IMG20180512230754-768x1024.jpg" alt="" width="525" height="700"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>练手c语言算法二</title>
      <link href="article/2018/article_19_%E7%BB%83%E6%89%8Bc%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E4%BA%8C/"/>
      <url>article/2018/article_19_%E7%BB%83%E6%89%8Bc%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>大华2018软件挑战赛，这里是后五题。<a id="more"></a></p><p>6.视频编解码。16进制的数存储，加些简单的判断（开头判断，结尾判断，中间舍去部分判断）。</p><pre>#include "stdio.h"int main(){    int T,k,x=0,y=0,tmp=0;    scanf("%d",&amp;T);    int res[10000],ns[T];    for(k=0;k&lt;T;k++){        int n,i,start=0,t=0;        scanf("%d",&amp;n);        int nums[n];        for(i=0;i&lt;n;i++){            scanf("%x",&amp;nums[i]);        }        for(i=0;i&lt;n-3;i++){            if(start==5 &amp;&amp; nums[i-2]==0 &amp;&amp; nums[i-1]==0 &amp;&amp; nums[i]==03 &amp;&amp; nums[i+1]==0){                continue;            }            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==0){                start=1;            }            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==5){                start=0;            }            if(start&gt;=1 &amp;&amp; start&lt;=4){                start++;            }            if(start==5){                res[x]=nums[i];                x++;                t++;            }        }        ns[k] = t;    }    for(k=0;k&lt;T;k++){        for(y=0;y&lt;ns[k];y++){            printf("%x ",res[y+tmp]);        }        tmp += ns[k];        printf("\n");    }}</pre><p>7.不重复最长子串长度。也是状态转移，一个变量指在子串左边，一个在右边移动。另外用一个数组存位置和判断值是否存在。</p><pre>#include "stdio.h"#define max(a,b) ((a)&gt;(b)?(a):(b))int main(){    int T,k;    scanf("%d",&amp;T);    int res[T];    for(k=0;k&lt;T;k++){        int l1,i,tmp,ml=0,left=0,m=0;        char s[100],asc[26];        scanf("%s",&amp;s);        for(l1=0;s[l1]!='\0';++l1);        for(i=0;i&lt;26;i++){            asc[i]=-1;        }        for(i=0;i&lt;l1;i++){            tmp = s[i]-97;            if(asc[tmp]==-1 || asc[tmp]&lt;left){                asc[tmp]=i;            }else{                left=asc[tmp]+1;                asc[tmp]=i;            }            m = max(i-left+1,m);        }        res[k]=m;    }    for(k=0;k&lt;T;k++){        printf("%d\n",res[k]);    }}</pre><p>8.二进制位数和等于十进制位数和。这边就暴力的每个算过来判断是不是这种数。</p><pre>#include "stdio.h"int judge(n){    int b=n,tmp=0;    while(b!=0)    {        tmp+=b%2;        b=b/2;    }    b=n;    while(b!=0){        tmp-=b%10;        b=b/10;    }    if(tmp==0){        return 1;    }else{        return 0;    }}int main(){    int T,k;    scanf("%d",&amp;T);    int result[T];    for(k=0;k&lt;T;k++){        int n,i,res=0;        scanf("%d",&amp;n);        for(i=1;i&lt;=n;i++){            res+=judge(i);        }        result[k]=res;    }    for(k=0;k&lt;T;k++){        printf("%d\n",result[k]);    }}</pre><p>9.买卖交易。这个和leetcode上有个讲股票买卖的差不多，就每次后面比前面大的话就卖出买入就可以。</p><pre>#include "stdio.h"int calc(int *nums,int n){    int i,res=0;    for(i=0;i&lt;n-1;i++){        res += nums[i+1]&gt;nums[i]?nums[i+1]-nums[i]:0;    }    return res;}int main(){    int T,k,n,i;    scanf("%d",&amp;T);    int res[T];    scanf("%d",&amp;n);    int nums[n];    for(k=0;k&lt;T;k++){        for(i=0;i&lt;n;i++){            scanf("%d",&amp;nums[i]);        }        res[k] = calc(nums,n);    }    for(k=0;k&lt;T;k++){        printf("%d\n",res[k]);    }}</pre><p>10.二叉树右视图，主要还是用先序构建二叉树，右视图的话就是右子树优先遍历即可。</p><pre>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt;typedef int   ElemType;typedef struct BiTNode{    ElemType   data;    struct BiTNode*lChild, *rChild;}BiTNode, *BiTree;int i=0,maxdepth=0,al=0;int res[100],nums[100];int CreateBiTree(BiTree *T,char *s){    ElemType ch;    ch = s[i];    i++;    if(ch=='#'){        *T = NULL;    }else{        *T = (BiTree)malloc(sizeof(BiTNode));        if (!(*T)) exit(-1);        (*T)-&gt;data = ch-'0';        CreateBiTree(&amp;(*T)-&gt;lChild,s);        CreateBiTree(&amp;(*T)-&gt;rChild,s);    }    return 1;}void calc(BiTree T, int depth){    if(depth&gt;maxdepth){        res[maxdepth+al] = T-&gt;data;        maxdepth = depth;    }    if(T-&gt;rChild!=NULL) calc(T-&gt;rChild, depth+1);    if(T-&gt;lChild!=NULL) calc(T-&gt;lChild, depth+1);}int main(void){    int t,k,all=0;    scanf("%d",&amp;t);    BiTree T;    for(k=0;k&lt;t;k++){        i=0;        T = NULL;        maxdepth=0;        char s[1000];        scanf("%s",&amp;s);        CreateBiTree(&amp;T,s);        calc(T,1);        al+=maxdepth;        nums[k]=maxdepth;    }    for(i=0;i&lt;t;i++){        for(k=0;k&lt;nums[i];k++){            printf("%d",res[k+all]);        }        all+=nums[i];        printf("\n");    }}</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>练手c语言算法一</title>
      <link href="article/2018/article_18_%E7%BB%83%E6%89%8Bc%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E4%B8%80/"/>
      <url>article/2018/article_18_%E7%BB%83%E6%89%8Bc%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>大华2018年软件挑战赛初赛题</p><p><a href="/img/uploads/2018/05/%E5%88%9D%E8%B5%9B.xlsx">初赛　十道题，题目此在</a>，主要讲讲自己的思路，这里是前五题。<a id="more"></a></p><p>１.不相邻最大子序和。不相邻所以奇偶分开写状态转移，然后取两者较大值。类似于leetcode中house robber。</p><pre>#include "stdio.h"#define max(a,b) ((a)&gt;(b)?(a):(b))int calc(int *nums,int n){    int a=0,b=0,i;    for(i=0;i&lt;n;i++){        if(i%2 == 0){            a = max(b,a+nums[i]);        }else{            b = max(a,b+nums[i]);        }    }    return max(a,b);}int main(){    int T,i,n,j;    scanf("%d",&amp;T);    int res[T];    for(i=0;i&lt;T;i++){        scanf("%d",&amp;n);        int nums[n];        for(j=0;j&lt;n;j++){            scanf("%d",&amp;nums[j]);        }        res[i] = calc(nums,n);    }    for(i=0;i&lt;T;i++){        printf("%d\n",res[i]);    }}</pre><p>2.链表部分翻转。我还是用数组实现的，翻转就是遍历前一半的长度，和后一半换一下。然后在数组分割的每部分调用这个翻转完成。</p><pre>#include "stdio.h"void reverse(int *arr,int n,int start){    int m=(n+1)/2+start,i,j,tmp;    for(i=start;i&lt;m;i++){        j=n+2*start-i-1;        tmp=arr[i];        arr[i]=arr[j];        arr[j]=tmp;    }}int main(){    int n,i,j,k,l,T,z=0,tmp=0;    scanf("%d",&amp;T);    int res[1000],kk[10];    for(k=0;k&lt;T;k++){        j=0;        scanf("%d",&amp;n);        kk[k] = n;        int nums[n];        for(i=0;i&lt;n;i++){            scanf("%d",&amp;nums[i]);        }        scanf("%d",&amp;l);        while(j+l&lt;=n){            reverse(nums,l,j);            j+=l;        }        reverse(nums,n-j,j);        for(i=0;i&lt;n;i++){            res[z+i]=nums[i];        }        z+=n;    }    for(k=0;k&lt;T;k++){        for(i=tmp;i&lt;kk[k]+tmp;i++){            printf("%d ",res[i]);        }        tmp+=kk[k];        printf("\n");    }}</pre><p>3.霍夫曼编码，这里有参考网上的算法代码，<a href="https://blog.csdn.net/wtfmonking/article/details/17150499" target="_blank" rel="external">参考地址</a>，也不用造轮子啦。</p><pre>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef int ElemType;struct BTreeNode{    struct BTreeNode* left;    struct BTreeNode* right;    ElemType data;};void PrintBTree_int(struct BTreeNode* BT){    if (BT != NULL)    {        printf("%d", BT-&gt;data);        if (BT-&gt;left != NULL || BT-&gt;right != NULL)        {            printf("(");            PrintBTree_int(BT-&gt;left);            if (BT-&gt;right != NULL)                printf(",");            PrintBTree_int(BT-&gt;right);            printf(")");        }    }}struct BTreeNode* CreateHuffman(ElemType a[], int n){    int i, j;    struct BTreeNode **b, *q;    b = malloc(n*sizeof(struct BTreeNode));    for (i = 0; i &lt; n; i++)    {        b[i] = malloc(sizeof(struct BTreeNode));        b[i]-&gt;data = a[i];        b[i]-&gt;left = b[i]-&gt;right = NULL;    }    for (i = 1; i &lt; n; i++)    {        int k1 = -1, k2;        for (j = 0; j &lt; n; j++)        {            if (b[j] != NULL &amp;&amp; k1 == -1)            {                k1 = j;                continue;            }            if (b[j] != NULL)            {                k2 = j;                break;            }        }        for (j = k2; j &lt; n; j++)        {            if (b[j] != NULL)            {                if (b[j]-&gt;data &lt; b[k1]-&gt;data)                {                    k2 = k1;                    k1 = j;                }                else if (b[j]-&gt;data &lt; b[k2]-&gt;data)                    k2 = j;            }        }        q = malloc(sizeof(struct BTreeNode));        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;        q-&gt;left = b[k1];        q-&gt;right = b[k2];        b[k1] = q;        b[k2] = NULL;    }    free(b);    return q;}ElemType WeightPathLength(struct BTreeNode* FBT, int len){    if (FBT == NULL)        return 0;    else    {        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)            return FBT-&gt;data * len;        else            return WeightPathLength(FBT-&gt;left,len+1)+WeightPathLength(FBT-&gt;right,len+1);    }}int res[26][100];void HuffManCoding(struct BTreeNode* FBT, int len,int n,int *idx){    static int a[10];    if (FBT != NULL)    {        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)        {            int i;            res[idx[n-FBT-&gt;data]][0]=len;            for (i = 0; i &lt; len; i++)                res[idx[n-FBT-&gt;data]][i+1]=a[i];        }        else{            a[len] = 0;            HuffManCoding(FBT-&gt;left, len + 1,n,idx);            a[len] = 1;            HuffManCoding(FBT-&gt;right, len + 1,n,idx);        }    }}const int* par = 0;int compare(const void* p1, const void* p2){    int a = *(int*)p1;    int b = *(int*)p2;    if (par[a] &gt; par[b])        return 1;    else if (par[a] == par[b])        return 0;    else        return -1;}void sort_index(const int ar[], int index[], int num){    par = ar;    qsort(index, num, sizeof(int), &amp;compare);}int main(){    int T,k,kl=0,z=0;    scanf("%d",&amp;T);    int rrr[10000],lll[T];    for(k=0;k&lt;T;k++){        int i,l,n=0,j,tmp,midx=0,mm=0,ll=0;        int asc[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};        char s[100];        scanf("%s",s);        for(l=0;s[l]!='\0';++l);        for(i=0;i&lt;l;i++){            asc[s[i]-65]++;        }        ElemType* a;        struct BTreeNode* fbt;        for(i=0;i&lt;26;i++){            if(asc[i]!=0){                n++;            }        }        int idxs[n];        for(j=0;j&lt;n;j++){            mm=0;            midx=0;            for(i=0;i&lt;26;i++){                if(asc[i]&gt;mm){                    mm=asc[i];                    midx=i;                }            }            idxs[j]=midx;            asc[midx]=0;        }        a = malloc(n*sizeof(ElemType));        for (i = 0; i &lt; n; i++)            a[i]=n-i;        fbt = CreateHuffman(a, n);        HuffManCoding(fbt, 0, n, idxs);        for(i=0;i&lt;l;i++){            tmp = s[i]-65;            for(j=1;j&lt;res[tmp][0]+1;j++){                rrr[kl] = res[tmp][j];                kl++;                ll++;            }        }        lll[k] = ll;    }    kl=0;    for(k=0;k&lt;T;k++){        for(z=0;z&lt;lll[k];z++){            printf("%d",rrr[z+kl]);        }        kl+=lll[k];        printf("\n");    }}</pre><p>４.子串出现次数。也就用比较老土的办法一个个比较过去，如果对应上count+1，对不上就再回到原来后一个位置继续比较。</p><pre>#include "stdio.h"int pp(char *s1,char *s2,int l1,int l2){    int count=0,i,j=0;    for(i=0;i&lt;l1;i++){        if(s1[i]==s2[j]){            j++;            if(j==l2){                count++;                i=i-j+1;                j=0;            }        }else{            i=i-j;            j=0;        }    }    return count;}int main(){    int T,k;    scanf("%d",&amp;T);    int res[T];    for(k=0;k&lt;T;k++){        int count = 0,i,l1,l2;        char s1[100],s2[100];        scanf("%s",&amp;s1);        scanf("%s",&amp;s2);        for(l1=0;s1[l1]!='\0';++l1);        for(l2=0;s2[l2]!='\0';++l2);        res[k] = pp(s1,s2,l1,l2);    }    for(k=0;k&lt;T;k++){        printf("%d\n",res[k]);    }}</pre><p>5.吃金币游戏。这个我也没通过。本人思路是先找第一个点，然后遍历和它连接的下一步可行点，然后每个点在递归运行，这个是dfs主要部分。剪枝的话：如果在两步以外又回到走过的点就是形成环舍去，两步以内或没走过可行；同一路同方向不重复走（考虑他下一个递归讲将和之前完全一模一样）。结果：每次求该路径的金币数，取最大值。</p><pre>#include "stdio.h"#define max(a,b) ((a)&gt;(b)?(a):(b))int x=1;int line_his[10000]={0};int line_dir[10000];int maxV=0;int check(int n){    int i;    for(i=x-2;i&gt;=x-3;i--){        if(line_his[i]==n){            return 1;        }    }    for(i=x-4;i&gt;=0;i--){        if(line_his[i]==n){            return 0;        }    }    return 1;}int get_road(int *arr,int r,int n,int *tmp){    int t=0,i;    for(i=0;i&lt;r*3;i+=3){        if(arr[i]==n || arr[i+1]==n){            tmp[t]=arr[i]==n?arr[i+1]:arr[i];            t++;        }    }    return t;}int get_value(int *arr,int r,int n1,int n2){    int i;    for(i=0;i&lt;r*3;i+=3){        if(arr[i]==n1 &amp;&amp; arr[i+1]==n2){            return arr[i+2];        }        if(arr[i]==n2 &amp;&amp; arr[i+1]==n1){            return arr[i+2];        }    }}int calc_v(int *arr,int r,int p){    int tmp = 0,i;    int his[10000]={};    for(i=0;i&lt;x-1;i++){        if(his[line_his[i]*p+line_his[i+1]]!=1){            tmp+=get_value(arr,r,line_his[i],line_his[i+1]);        }        his[line_his[i]*p+line_his[i+1]]=1;        his[line_his[i]+line_his[i+1]*p]=1;    }    return tmp;}/*int check_all(int p){    int i,j,in=0;    for(i=0;i&lt;p;i++){        for(j=0;j&lt;x;j++){            if(i==line_his[j]){                in++;                break;            }        }    }    if(in==p){        return 1;    }else{        return 0;    }}*/int dfs(int *arr,int r,int p,int n){    int i,t,tt;    int tmp[10000];    //if(check_all(p)){    tt = calc_v(arr,r,p);    maxV = max(maxV,tt);    t = get_road(arr,r,n,tmp);    for(i=0;i&lt;t;i++){        if(line_dir[n*p+tmp[i]]==1){            continue;        }        line_his[x]=tmp[i];        line_dir[n*p+tmp[i]]=1;        x++;        if(check(tmp[i]))            dfs(arr,r,p,tmp[i]);        line_his[x]=-1;        line_dir[n*p+tmp[i]]=-1;        x--;    }    return maxV;}int main(){    int T,k;    scanf("%d",&amp;T);    int result[T];    for(k=0;k&lt;T;k++){        maxV=0;        x=1;        int p,r,i,t;        scanf("%d",&amp;p);        scanf("%d",&amp;r);        int arr[r*3];        for(i=0;i&lt;r*3;i++){            scanf("%d",&amp;arr[i]);        }        result[k] = dfs(arr,r,p,0);    }    for(k=0;k&lt;T;k++){        printf("%d\n",result[k]);    }}</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>整理下二叉树</title>
      <link href="article/2018/article_17_%E6%95%B4%E7%90%86%E4%B8%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>article/2018/article_17_%E6%95%B4%E7%90%86%E4%B8%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>在leetcode遇到二叉树就卡机，恶补下这种数据结构，想想都难。<a id="more"></a></p><p>首先是节点构建和插入，这里的插入形式用来下面排序，小的在左，大的在右。</p><pre>class Node():    def __init__(self, val=None, left= None, right=None):        self.val = val        self.left = left        self.right = right    def add(self, val):        if val &lt; self.val:            if self.left is None:                self.left = Node(val)            else:                self.left.add(val)        else:            if self.right is None:                self.right = Node(val)            else:                self.right.add(val)</pre><p>然后是三种遍历方式</p><pre>#先序def front(root,res=[]):    if root == None:        return    res.append(root.val)    front(root.left,res)    front(root.right,res)    return res#中序（这个的得到的便是排序后的数组）def middle(root,res=[]):    if root == None:        return    front(root.left,res)    res.append(root.val)    front(root.right,res)    return res#后序def end(root,res=[]):    if root == None:        return    front(root.left,res)    front(root.right,res)    res.append(root.val)    return res</pre><p>下面是一些应用</p><p>1.判断二叉树是否是左右镜像的</p><p>思路：输入根节点左右两个节点，判断两节点是否相同，然后递归判断左节点的左节点和右节点的右节点 以及 左节点的右节点和右节点的左节点。</p><pre>def judge(left,right):    if left is None and right is None:        return True    if (left is None and right is not None) or (right is None and left is not None) or right.val != left.val:        return False    return judge(left.left,right.right) and judge(left.right,right.left)</pre><p>2.二叉树最大深度</p><p>思路：左右节点分别设一个长度，进入深一层长度就加一，返回的是两者之间大的一方，也就的到所有路径深度中最大的一个。</p><pre>def depth(root):    if root is None:        return 0    l = depth(root.left)    r = depth(root.right)    return max([l,r])+1</pre><p>3.左右翻转二叉树</p><p>思路：也就是把二叉树中所有的左右节点都换一下便可。</p><pre>def invertTree(root):    if root is None:        return None    if root.left:        invertTree(root.left)    if root.right:        invertTree(root.right)    root.left,root.right = root.right,root.left    return root</pre><p>4.二叉树右往左的叠加和</p><p>思路：设立一个全局的和，对于每个节点都加上这个和，然后更新和，把节点从右往左遍历便是把中序遍历反一下。</p><pre>sum = 0def bst(self,root):    if root is None:        return    self.bst(root.right)    root.val += sum    sum = root.val    self.bst(root.left)</pre><p>5.最长子树长度，可不过根节点</p><p>思路：在最大深度的基础上，添加一个变量来计算每次的左右子树和。</p><pre>res = 0def depth(self,root):    if root is None:        return 0    l = self.depth(root.left)    r = self.depth(root.right)    res = max(res,l+r)    return max([l,r])+1</pre><p>6.判断一个树是否是另一个的子树</p><p>思路：对主树递归所有节点，只要有一个是子树成立便可。每次在递归检查子树与主树是否相同，这里所有节点都要一样。</p><pre>class Solution(object):    def isSubtree(self, s, t):        if not s or not t:            return not s and not t        if self.check(s,t):            return True        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)        def check(self,s,t):        if not s or not t:            return not s and not t        if s.val != t.val:            return False        return self.check(s.left,t.left) and self.check(s.right,t.right)</pre><p>7.合并二叉树</p><p>思路：遍历两个二叉树的节点，把和加到一个二叉树上</p><pre>def mergeTrees(self, t1, t2):    if t1 is not None and t2 is not None:        t1.left = self.mergeTrees(t1.left,t2.left)        t1.right = self.mergeTrees(t1.right,t2.right)        t1.val += t2.val        return t1    return t1 if t2 is None else t2</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手搓一个kmeans聚类</title>
      <link href="article/2018/article_15_%E6%89%8B%E6%90%93%E4%B8%80%E4%B8%AAkmeans%E8%81%9A%E7%B1%BB/"/>
      <url>article/2018/article_15_%E6%89%8B%E6%90%93%E4%B8%80%E4%B8%AAkmeans%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>起意是在看一些招聘算法机器学习面经的时候有看到好几次让直接写一个kmeans。之前用sklearn试过这个聚类算法，这次也来手写实现一下。<a id="more"></a></p><pre>import randomimport matplotlib.pyplot as plt#生成点def make_points():    points = []    for i in range(100):        points.append([random.random()*10,random.random()*10])        points.append([random.random()*-10,random.random()*-10])        points.append([random.random()*10,random.random()*-10])        points.append([random.random()*-10,random.random()*10])    return points#计算距离，这里用欧式距离，也可以换其他距离def calc_distance(p1,p2):    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5#转置def listT(arr):    return list(map(list, zip(*arr)))#主算法部分，递归实现def kmeans(points,cate_num,cate_mid=None,n=0,nmax=100):    #初始化中心点    if cate_mid == None:        cate_mid = [points[i] for i in range(cate_num)]    category = {}    #初始化类别    for i in range(cate_num):        category[i] = []    #计算每个点与中心点的距离，去最小值，划入那个中心点的类中    for point in points:        dis = [calc_distance(point,i) for i in cate_mid]        category[dis.index(min(dis))].append(point)    #转置得到每类点的x和y，并求平均。    ch_cate_mid = []    for i in category:        tmpx,tmpy = listT(category[i])        count = len(tmpx)        ch_cate_mid.append([sum(tmpx)/count,sum(tmpy)/count])    #n为次数，次数达到后返回类别与点    if n &gt;= nmax:        return category    else:        return kmeans(points,cate_num,ch_cate_mid,n+1)if __name__ == "__main__":    #运行kmeans    points = make_points()    cate_num = 4    category = kmeans(points,cate_num)    #画图部分    color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']    for i in category:        xy = listT(category[i])        plt.plot(xy[0],xy[1],color[i]+".")    #plt.show()    plt.savefig("kmeans.png")</pre><p>效果展示：</p><p><a href="/img/uploads/2018/04/test.png"><img class="alignnone wp-image-601 size-medium" src="/img/uploads/2018/04/test-300x225.png" alt="" width="300" height="225"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手持弹幕效果--网页版</title>
      <link href="article/2018/article_14_%E6%89%8B%E6%8C%81%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C--%E7%BD%91%E9%A1%B5%E7%89%88/"/>
      <url>article/2018/article_14_%E6%89%8B%E6%8C%81%E5%BC%B9%E5%B9%95%E6%95%88%E6%9E%9C--%E7%BD%91%E9%A1%B5%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>看到抖音上手持弹幕的效果，想想应该不复杂，也可以自己在浏览器实现一个。主要问题在于怎么把浏览器上面的搜索框去掉而实现一种伪全屏。结尾有彩蛋。<a id="more"></a></p><p>效果暂时可以在<a href="https://ganjiacheng.cn/danmu.html">https://ganjiacheng.cn/danmu.html</a> 查看。</p><p>直接上代码，在其中论述方法。</p><pre> &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;    &lt;title&gt;手持弹幕&lt;/title&gt;    &lt;style type="text/css"&gt;        *{            margin: 0px;            padding: 0px;        }        html,body{            height: 100%;            width: 100%;            overflow: hidden;            background: #000;        }        #txt{            overflow: visible;            white-space: nowrap;            transform-origin: 0% 0%;            transform: rotate(90deg);        }        #config{            position: absolute;            bottom: 0px;            width: 100%;        }        #config input{            display: block;            width: 100%;            padding: .375rem .75rem;            font-size: 1rem;            line-height: 1.5;            color: #495057;            background-color: #fff;            background-clip: padding-box;            border: 1px solid #ced4da;            border-radius: .25rem;            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;        }        #config button{            width: 23.5%;            display: inline-block;            font-weight: 400;            text-align: center;            white-space: nowrap;            vertical-align: middle;            -webkit-user-select: none;            -moz-user-select: none;            -ms-user-select: none;            user-select: none;            border: 1px solid transparent;            padding: .375rem .75rem;            font-size: 1rem;            line-height: 1.5;            border-radius: .25rem;            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;            color: #fff;            background-color: transparent;            background-image: none;            border-color: #343a40;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="txt"&gt;点一下屏幕进入设置&lt;/div&gt;    &lt;div id="config" style="display:none;"&gt;        &lt;input type="text" placeholder="输入文本,tip:上拉一下就可全屏" id="txtContent"&gt;        &lt;input type="text" placeholder="输入颜色rgb，格式如:125 125 125" id="color"&gt;        &lt;button id="turnLeft"&gt;左移&lt;/button&gt;        &lt;button id="turnRight"&gt;右移&lt;/button&gt;        &lt;button id="bigger"&gt;增大&lt;/button&gt;        &lt;button id="smaller"&gt;减小&lt;/button&gt;        &lt;button id="quicker"&gt;加快&lt;/button&gt;        &lt;button id="slower"&gt;减慢&lt;/button&gt;        &lt;button id="changeFont"&gt;字体&lt;/button&gt;        &lt;button id="stunt"&gt;特技&lt;/button&gt;    &lt;/div&gt;    &lt;script type="text/javascript"&gt;        //获取到所需dom        var txt = document.getElementById("txt");        var config = document.getElementById("config");        var txtContent = document.getElementById("txtContent");        var color = document.getElementById("color");        var turnLeft = document.getElementById("turnLeft");        var turnRight = document.getElementById("turnRight");        var bigger = document.getElementById("bigger");        var smaller = document.getElementById("smaller");        var quicker = document.getElementById("quicker");        var slower = document.getElementById("slower");        var changeFont = document.getElementById("changeFont");        var stunt = document.getElementById("stunt");        var height = document.body.clientHeight;        var width = document.body.clientWidth;        var state = 0;        var v = 10;        var k = 0;        //初始化设置，下面改起来方便些        txt.style.marginTop = height+"px";        txt.style.fontSize = "380px";        txt.style.marginLeft = "450px";        txt.style.color = "rgba(255,255,255,1)"        config.onclick = function(){            state = 1;        }        //显隐设置栏，消除搜索框也是无意间发现。        //由于加了设置栏大于一屏然后可以上拉，上拉后搜索框会折叠。        //然后在点击消除设置栏，一些浏览器就会自动占满屏，有些浏览器好像下面会有一栏空。        document.body.onclick = function(e){            if(state != 1){                config.style.display = config.style.display == "none" ? "block" : "none";            }            state = 0;        }        //绑定设置输入框和按钮操作        txtContent.onchange = function(){            txt.innerHTML = this.value            txt.style.marginTop = height + "px";        }        color.onchange = function(){            colors = this.value.split(" ");            txt.style.color = "rgba("+colors[0]+","+colors[1]+","+colors[2]+",1)";            txt.style.marginTop = height + "px";        }        turnLeft.onclick = function(){            txt.style.marginLeft = parseInt(txt.style.marginLeft) - 10 + "px";        }        turnRight.onclick = function(){            txt.style.marginLeft = parseInt(txt.style.marginLeft) + 10 + "px";        }        bigger.onclick = function(){            txt.style.fontSize = parseInt(txt.style.fontSize) + 10 + "px";        }        smaller.onclick = function(){            console.log(txt.style.fontSize)            txt.style.fontSize = parseInt(txt.style.fontSize) - 10 + "px";            console.log(txt.style.fontSize)        }        quicker.onclick = function(){            v += 2        }        slower.onclick = function(){            v -= 2        }        changeFont.onclick = function(){            fonts = ["SimSun","SimHei","Microsoft YaHei","Microsoft JhengHei","NSimSun","PMingLiU","MingLiU","DFKai-SB","FangSong","KaiTi","FangSong_GB2312","KaiTi_GB2312","：STHeiti","STKaiti","STSong","STFangsong","LiSu","YouYuan","STXihei","STKaiti","STKaiti","STSong","STZhongsong","STZhongsong","STFangsong","FZYaoti","STZhongsong","STCaiyun","STHupo","STLiti","STXingkai","STXinwei"]            txt.style.fontFamily = fonts[k];            k+=1;        }        stunt.onclick = function(){            alert("要什么特技呢");            return        }        //设置字体移动        function move(){            txt.style.marginTop = parseInt(txt.style.marginTop) - v + "px";            if(parseInt(txt.style.marginTop) &lt;= -parseInt(txt.style.fontSize)*txt.innerHTML.length) txt.style.marginTop = height + "px";            window.requestAnimationFrame(move);        }        window.requestAnimationFrame(move);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果展示：<a href="/img/uploads/2018/04/微信图片_20180406103608.png"><img class="alignnone wp-image-595 size-medium" src="/img/uploads/2018/04/微信图片_20180406103608-150x300.png" alt="" width="150" height="300"></a></p><p>再来聊聊我对于自身前端的发展意向；</p><p>自身没有太多精力去看一些工程上的问题（比如浏览器适配，框架，css预处理等），所以大部分我会专注于效果的实现（由于网页展示起来比较方便）。</p><p>使用的多数也会在原生js行列，偶尔用个jquery，必要时看一些包的使用（如之前markdown解析器）。</p><p>随性写些启发性前端代码，可能是逻辑上的sao操作，可能是效果上的模仿或涂鸦，，可能是我未知新技术上的demo，and so on；我自己的手机跑的动就好啦。</p><p>就这样了吗，恩，然后就没有然后了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>沉迷深搜，来做个解数独的</title>
      <link href="article/2018/article_13_%E6%B2%89%E8%BF%B7%E6%B7%B1%E6%90%9C%EF%BC%8C%E6%9D%A5%E5%81%9A%E4%B8%AA%E8%A7%A3%E6%95%B0%E7%8B%AC%E7%9A%84/"/>
      <url>article/2018/article_13_%E6%B2%89%E8%BF%B7%E6%B7%B1%E6%90%9C%EF%BC%8C%E6%9D%A5%E5%81%9A%E4%B8%AA%E8%A7%A3%E6%95%B0%E7%8B%AC%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>还记得以前高中默默盯着数独的能看半天，然后还一个个凑，这回来彻底解决一下这个问题。顺便理清一下深度优先搜索的设计流程。<a id="more"></a></p><p>首先数独规则自行了解，这里做最基础的9宫格数独。</p><p>拿到数独题，分一部分已知点和一部分未知点，未知点的状态是有限的，每个点都不能与横竖加九宫格内的数重复，因此可以根据这个遍历所有状态。</p><pre>深度优先搜索设计for 上一个点的可用状态：    尝试下点    进入下一个点（递归）    还原下点(回溯)</pre><pre>剪枝过程一大部分都在获取可用状态中去掉了（上一步下错的话，总有下一步会出现无可用状态）然后还要限制的是到最终点停止</pre><pre>判断成功只要数独状态中全部下满了，就是成功了</pre><pre>class ShuDu():    #初始化数独长度，数独空点位置    def __init__(self,state):        self.STATE = state        self.N = len(self.STATE[0])        self.ZERO = [[i,j] for i in range(self.N) for j in range(self.N) if self.STATE[i][j] == 0]        self.hasAnswer = 0    #获取空点的可用状态    def get_state(self,n):        tmp_state = []        for i in range(self.N):            tmp_state.append(self.STATE[self.ZERO[n][0]][i])            tmp_state.append(self.STATE[i][self.ZERO[n][1]])        tmp_ny = int(self.ZERO[n][0] / 3)        tmp_nx = int(self.ZERO[n][1] / 3)        for i in range(tmp_ny * 3, tmp_ny * 3 + 3):            for j in range(tmp_nx * 3, tmp_nx * 3 + 3):                tmp_state.append(self.STATE[i][j])        '''        if self.ZERO[n][0] == self.ZERO[n][1]:            for i in range(self.N):                tmp_state.append(self.STATE[i][i])        if self.ZERO[n][0] + self.ZERO[n][1] == 8:            for i in range(self.N):                tmp_state.append(self.STATE[i][self.N-1-i])        '''        return [i for i in range(1,self.N+1) if i not in list(set(tmp_state))]    #深度优先搜索部分    def dfs(self,k=0):        if "0" not in str(self.STATE):            self.hasAnswer = 1            for i in range(self.N):                print(self.STATE[i])        if k &gt;= len(self.ZERO) or self.hasAnswer == 1:            return        for i in self.get_state(k):            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = i            self.dfs(k+1)            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = 0if __name__ == "__main__":    #据说是最难数独，0代表空的点    state = [[8,0,0,0,0,0,0,0,0],             [0,0,3,6,0,0,0,0,0],             [0,7,0,0,9,0,2,0,0],             [0,5,0,0,0,7,0,0,0],             [0,0,0,0,4,5,7,0,0],             [0,0,0,1,0,0,0,3,0],             [0,0,1,0,0,0,0,6,8],             [0,0,8,5,0,0,0,1,0],             [0,9,0,0,0,0,4,0,0]]    s = ShuDu(state)    #秒秒钟解出来    s.dfs()</pre><pre>结果为：[8, 1, 2, 7, 5, 3, 6, 4, 9][9, 4, 3, 6, 8, 2, 1, 7, 5][6, 7, 5, 4, 9, 1, 2, 8, 3][1, 5, 4, 2, 3, 7, 8, 9, 6][3, 6, 9, 8, 4, 5, 7, 2, 1][2, 8, 7, 1, 6, 9, 5, 3, 4][5, 2, 1, 9, 7, 4, 3, 6, 8][4, 3, 8, 5, 2, 6, 9, 1, 7][7, 9, 6, 3, 1, 8, 4, 5, 2]</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊深度优先搜索算法及应用</title>
      <link href="article/2018/article_11_%E8%81%8A%E8%81%8A%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>article/2018/article_11_%E8%81%8A%E8%81%8A%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>之前看算法书对于深搜一直是一个坎，有点难以理解或者理解了一些但没法下手写，这回来重新探讨一下个人目前的理解及解决方案。文章从全排入手，到解决八皇后，和尚妖怪过河等问题。<a id="more"></a></p><p>首先，看一个全排序，传入一个数组（其中有n个可不等长的数组），得到的结果是其中每个数组取一个数组成的新数组的集合，如下</p><pre>result=[0]*3arr=[[1,2,3],[4,5],[7,8,9]]res=[]#算法部分，遍历其中每个数组，在result保存临时一个数组。#copy是因为append只是插入了一个类似指针，而result内容会变，因此要用copy换一个地址。def dfs(arr, depth):    global res    for i in range(len(arr[depth])):        result[depth] = arr[depth][i]        if depth != len(arr) - 1:            dfs(arr, depth + 1)        else:            res.append(result.copy())dfs(arr,0)print(res)#结果为[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [3, 4, 7], [3, 4, 8], [3, 4, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9]]</pre><p>在来看个升级版，一个数组如[1,2,3,4,5]的全排，这里for中递归的思路则和上次基本不一样，用的是交换，遍历完所有可能的交换值，但因为只有一个数组，所以交换完保存数后还得在交换回来，也就是递归下面一行和上面一行的区别。</p><pre>COUNT=0  res=[]#for第一次是0和所有交换，递归后是1和所有的交换#但运行过程则会0和0换，之后跳到递归中1和1换，直到最后，得到第一情况，也就是没换，这时begin=end#然后回退一步，那时begin应该是end-1，所以最后两个换下，又得到一种情况。#就这样回退到最初的for，就可以遍历所有交换情况def perm(n,begin,end):      global COUNT,res    if begin&gt;=end:          res.append(n)    else:          i=begin          for num in range(begin,end):              n[num],n[i]=n[i],n[num]             perm(n.copy(),begin+1,end)            n[num],n[i]=n[i],n[num]N=4n=[i for i in range(N)]perm(n,0,len(n))print(res)</pre><p>然后看几个应用，基本也是自己学了之后用上去！</p><p>第一个，九宫格中文输入得到输入项的所有组合。用到上面第一个全排序，只需要把输入转换成已按按键的字母数组。如</p><pre>arr=[[a,b,c],[c,d,e],[g,h,i]]</pre><p>第二个，八皇后，也就是8*8棋盘上放8个皇后，每个皇后横竖左斜右斜都不能有其他皇后。总共有92中情况。这里的解法便是先得到长为8的数组的全排，在逐个检验，当然检验是有技巧的。</p><pre>#这里把数组如[1,2,3,4,5,6,7,8]下标作为棋盘x，值作为棋盘y#因为横竖都不在线上，所以求全排#然后检查的就是左斜右斜便可#全排，请看前面的讲解COUNT=0  def perm(n,begin,end):      global COUNT,res    if begin&gt;=end:          res.append(n)    else:          i=begin          for num in range(begin,end):              n[num],n[i]=n[i],n[num]             perm(n.copy(),begin+1,end)            n[num],n[i]=n[i],n[num]res=[]N=8n=[i for i in range(N)]perm(n,0,len(n))#检验的是数组中有没有重复值def check(l):    return len(set(l))==len(l)result = []#左斜的位置x-y相同的会在一条线上，右斜的位置x+y相同的会在一条线上。#由此检验for i in res:    s = [i[j]+j for j in range(N)]    c = [i[j]-j for j in range(N)]    if check(s) and check(c):        print(i)        result.append(i)#得到92个解print(len(result))</pre><p>最后一个应用：和尚与妖怪过河问题。</p><p>问题大致是河左岸有三个妖怪三个和尚，要全部过河到右岸，有一条能载两人的船，只要左岸或右岸妖怪数大于和尚数，妖怪就会把和尚吃掉。需得所有简单解法（中间不包括重复循环步骤）。</p><p>关键点和上面的其实是差不多，只是比较难抽象出遍历的东西，一不小心就会死在中间的死循环。</p><pre>class River():    def __init__(self):        self.ship = 1 #1--左岸，-1--右岸        self.left = [3,3] #和尚，妖怪        self.right = [0,0] #和尚，妖怪        #状态改变只有这五种和取反后的五种        self.change = [ [-1, -1],                        [-2, 0],                        [0, -2],                        [-1, 0],                        [0, -1]]        #保存上一个状态，直接排除一样的来回        self.lastState = -1        #如果遍历是一棵树，保存的则根到某个枝条        self.lineHis = [[3, 3, 0, 0, 1]]    #改变状态    def move(self,n):        self.left = [self.left[i]+self.ship*self.change[n][i] for i in range(2)]        self.right = [self.right[i]-self.ship*self.change[n][i] for i in range(2)]        self.ship = -self.ship        self.lastState = n    #获取下一步可移动点，比如只有一个怪兽在左岸，就要排除两个妖怪过河的方案，这个剪枝很重要。    def getState(self):        states = []        if self.ship == 1:            state = self.left        else:            state = self.right        for i in range(len(self.change)):            if min(state[0]+self.change[i][0],state[1]+self.change[i][1])&gt;=0:                states.append(i)        return states    #主算法部分，断掉妖怪大于和尚的分支。    #在遍历中，最重要的一步就是在这条支线上，如果这一种状态之前出现过，就不要继续深入。    def dfs(self):        if self.left==[0,0] and self.right==[3,3]:            print(self.lineHis)            return         elif (self.left[1]&gt;self.left[0] and self.left[0]!=0) or (self.right[1]&gt;self.right[0] and self.right[0]!=0):            return        else:            states = self.getState()            for i in states:                if i != self.lastState:                    self.move(i)                    self.lineHis.append(self.left+self.right+[self.ship])                    if self.lineHis[-1] not in self.lineHis[0:-1]:                        self.dfs()                    self.move(i)                    self.lineHis.pop()        if __name__ == "__main__":    s = River()    s.dfs()    #可得4个最简解。</pre><p>总结：深度优先搜索主要部分是提炼出搜索的树，然后好坏在于剪枝。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫--钢琴曲谱</title>
      <link href="article/2018/article_12_%E7%88%AC%E8%99%AB--%E9%92%A2%E7%90%B4%E6%9B%B2%E8%B0%B1/"/>
      <url>article/2018/article_12_%E7%88%AC%E8%99%AB--%E9%92%A2%E7%90%B4%E6%9B%B2%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<p>最近学钢琴，也经常会用到曲谱，但网上大多数曲谱不清晰，或者清晰的要vip。因此研究下某曲谱网站，进行爬取vip才能下载的曲谱并组合为pdf。<a id="more"></a></p><p>可以在<a href="http://123.206.217.190:8888" target="_blank" rel="external">http://123.206.217.190:8888</a>试用效果</p><p>下面的是python3.x代码，在window可直接本地运行，在linux做一些注释中的修改。</p><pre>#coding:utf-8import requestsfrom bs4 import BeautifulSoupimport osimport sysimport iofrom PIL import Imagefrom reportlab.lib.pagesizes import A4, landscapefrom reportlab.pdfgen import canvasimport timeimport randomsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')#输入弹琴吧所需琴谱的网址#把网址变成手机访问的网址req = requests.Session()url=""#url = "http://www.tan8.com/yuepu-58546.html"state=Truewhile state:    url = input("输入弹琴吧钢琴曲网址：\n")    if url.find("-m.html")==-1:        url = url.replace(".html","-m.html")        imgdir = "tmpimgtan8/"    if url.find("-m.html")==-1:        print("请输入正确网址")    else:        imgdir = "tmpimgtan8/"        state=Falseif not os.path.exists(imgdir):    os.mkdir("tmpimgtan8")#爬下来解析出mp3，图片地址#保存MP3，图片resp = req.get(url)soup=BeautifulSoup(resp.text,"lxml")#windows可以用这个中文名做文件名title = soup.find_all("title")[0].text.replace(" ","").replace("/","")#linux用下面的随机数做文件名#title = str(int(random.random()*8999)+1000)mp3 = soup.find_all("source")[0]["src"]mreq = req.get(mp3)print(title)with open(title+".mp3","wb") as f:    f.write(mreq.content)    f.close()picul = soup.find_all("ul",{"class":"swiper-wrapper"})[0]images = picul.find_all("img")for i in images:    imgurl = req.get(i['src'])    with open(imgdir+".".join(i['src'].split(".")[-2:]),"wb") as f:        f.write(imgurl.content)        f.close()files=os.listdir(imgdir)if "Thumbs.db" in files:    files.remove("Thumbs.db")#把图片连接成pdff_pdf = title+".pdf"(w, h) = landscape(A4)c = canvas.Canvas(f_pdf, pagesize = (h,w))for file in files:    c.drawImage(imgdir+file,0,0,h,w)    c.showPage()    os.remove(imgdir+file)c.save()try:    os.rmdir("tmpimgtan8")except:    print("请手动删除 tmpimgtan8")</pre><p>同时，还顺手写了个web服务的代码。</p><p>可以到<a href="https://github.com/webgjc/blog" target="_blank" rel="external">https://github.com/webgjc/blog</a>的tan8/查看。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在线接口测试及生成文档</title>
      <link href="article/2018/article_10_%E5%9C%A8%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/"/>
      <url>article/2018/article_10_%E5%9C%A8%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>由于每次更改后端接口都要经过测试，然后又要去修改接口文档，就想着能不能整合这两步，为了自己能灵活修改，便自己来写个。</p><p><a href="https://github.com/webgjc/ApiTestToMd" target="_blank" rel="external">https://github.com/webgjc/ApiTestToMd</a><a id="more"></a></p><p>这次的代码有点多，就不直接展示了，放在github上，也可方便下载使用。</p><p> </p><p>写写思路及主要用到的工具：</p><p>后端使用flask框架，requests作为接口测试，增加了百度翻译api作为参数翻译，另外写了一些文件的接口。</p><p>前端使用bootstrap4作为测试接口页面的主要ui。测试记录存在sessionStorage里，只是刷新标签并不会使记消失。</p><p>前端接口文档编辑主要从sessionStorage获取到记录，用固定格式产生md文本，参数使用百度api翻译一下，再用了marked.js把md转成html文件，md和html分居左右也可以边改边看效果。</p><p>之后又增加了文件保存读取的效果，可以复用上次改下的接口文档。</p><p>html的效果就是css，借鉴于<a href="http://coolaf.com/tool/md" target="_blank" rel="external">http://coolaf.com/tool/md</a></p><p>就这么多功能，前前后后改了一星期左右，没有很多难点，但有些细节也是实际用了才发现去改，可能功能还能完善，差不多作为一个日常小工具也足够啦。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>庆祝博客一周年！！</title>
      <link href="article/2018/article_9_%E5%BA%86%E7%A5%9D%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4%EF%BC%81%EF%BC%81/"/>
      <url>article/2018/article_9_%E5%BA%86%E7%A5%9D%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4%EF%BC%81%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>博客不知不觉已经一周年咯。</p><p>一年写了50+篇文章，coding也基本未间断。</p><p>在去年还未知的技术走向今年也将看到沉淀。</p><p>这次主要将要完成一个的一个事情便是 将博客已有的一些技术和代码较为完善的转存到github上。</p><p>一方面是收集零散的片段，另一方面是整理注释代码。</p><p>为以后做简单的借鉴与留念。</p><p>github地址是<a href="https://github.com/webgjc/blog" target="_blank" rel="external">https://github.com/webgjc/blog</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>扫雷js版</title>
      <link href="article/2018/article_8_%E6%89%AB%E9%9B%B7js%E7%89%88/"/>
      <url>article/2018/article_8_%E6%89%AB%E9%9B%B7js%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>是老早之前写的，今天整理系统文件发现了这个扫雷，也是小惊喜，小看了下还挺有趣哈！<a id="more"></a></p><p>直接上代码，具体在代码中注释。</p><p>主要看点有两块，一个是从n个整数随机产生不重复的m个随机整数,m&lt;n</p><p>另一个就是自动搜寻周边不是雷的区域，也就是点了一个不是雷有时会显现一大片。</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=no" /&gt;    &lt;title&gt;扫雷&lt;/title&gt;    &lt;style type="text/css"&gt;        *{            color: black;            margin:0px;            padding:0px;        }        html,body{            -webkit-tap-highlight-color: transparent;            -webkit-touch-callout: none;            -webkit-user-select: none;            text-decoration: none;            height: 100%;        }        .con div{            height: 40px;            margin-left: 0.2%;            width: 11%;            display: inline-block;            border: solid 1px #000;            position: absolute;            line-height: 50px;            text-align: center;            color:red;        }        .ti{            position: absolute;            bottom: 12%;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="contain" class="con"&gt;&lt;/div&gt;    &lt;div class="ti"&gt;已花时间：&lt;span id="time"&gt;0&lt;/span&gt;秒&lt;/div&gt;    &lt;script type="text/javascript"&gt;        var leiRes=new Array(),nums=new Array();        var Lei=1,i,jk,G=81,res=1,clickNum=0,num=0;        //随机产生区间内的随机数        function setRandomNum(min,max){            return Math.floor(Math.random()*(max-min+1)+min);        }        //搜寻周边8个点        function NotLeiNum(n){            var z=Math.floor(n/9),x=n%9,leiNum=0;            var arr=new Array();            if(z-1&gt;=0){                arr.push((z-1)*9+x);            }            if(z+1&lt;9){                arr.push((z+1)*9+x);            }            if(x-1&gt;=0){                arr.push(z*9+x-1);            }            if(x+1&lt;9){                arr.push(z*9+x+1);            }            if(x-1&gt;=0&amp;&amp;z-1&gt;=0){                arr.push((z-1)*9+x-1);            }            if(x-1&gt;=0&amp;&amp;z+1&lt;9){                arr.push((z+1)*9+x-1);            }            if(x+1&lt;9&amp;&amp;z-1&gt;=0){                arr.push((z-1)*9+x+1);            }            if(x+1&lt;9&amp;&amp;z+1&lt;9){                arr.push((z+1)*9+x+1);            }            for(i=0;i&lt;arr.length;i++){                if(leiRes[arr[i]]==1){                    leiNum++;                }            }            return leiNum;        }        //搜寻周边四个点        function NotLei(n){            var z=Math.floor(n/9),x=n%9,leiNum=0;            var arr=new Array();            if(z-1&gt;=0){                arr.push((z-1)*9+x);            }            if(z+1&lt;9){                arr.push((z+1)*9+x);            }            if(x-1&gt;=0){                arr.push(z*9+x-1);            }            if(x+1&lt;9){                arr.push(z*9+x+1);            }            for(i=0;i&lt;arr.length;i++){                if(leiRes[arr[i]]==1){                    leiNum++;                }            }            if(leiNum&lt;1){                if(NotLeiNum(n)==0){                    document.getElementById(n).innerHTML=0;                    document.getElementById(n).style.backgroundColor="#84EFFF";                    document.getElementById(n).style.color="#000";                    return 1;                }            }            return 0;        }        //递归判断周边四个点        function judgeLei(n,dir){            var z=Math.floor(n/9),x=n%9,leiNum=0;            var arr=new Array();            switch(dir){                case 1:                if(z-1&gt;=0&amp;&amp;leiRes[(z-1)*9+x]==0){                    if(NotLei((z-1)*9+x)){                        judgeLei((z-1)*9+x,1);                    }                }                                case 2:                if(z+1&lt;9&amp;&amp;leiRes[(z+1)*9+x]==0){                    if(NotLei((z+1)*9+x)){                        judgeLei((z+1)*9+x,2);                    }                }                                case 3:                if(x-1&gt;=0&amp;&amp;leiRes[z*9+x-1]==0){                    if(NotLei(z*9+x-1)){                        judgeLei(z*9+x-1,3);                    }                }                                case 4:                if(x+1&lt;9&amp;&amp;leiRes[z*9+x+1]==0){                    if(NotLei(z*9+x+1)){                        judgeLei(z*9+x+1,4);                    }                }            }        }        //初始化        for(i=0;i&lt;G;i++){            nums[i]=i;            j=Math.floor(i/9),k=i%9;            leiRes[i]=0;            var ele=document.createElement("div");            ele.setAttribute("id",i);            document.getElementById("contain").appendChild(ele);            document.getElementById(i).setAttribute("style","top:"+j*40+"px;"+"left:"+k*11+"%");        }        //n个整数获取m个不相等整数        //思路为例存有0-100的数组，首先随机获取一个整数，然后这个整数作为下标与数组下标0的数交换位置，进行下一步从数组下标1-100中在获取数        for(i=0;i&lt;Lei;i++){            r=setRandomNum(i,G-1);            var temp=nums[i];            nums[i]=nums[r];            nums[r]=temp;            leiRes[nums[i]]=1;        }        //主游戏环节，为所有节点绑定事件        var sl=document.getElementById("contain").childNodes;        for(i=0;i&lt;sl.length;i++){            sl[i].onclick=function(){                for(j=0;j&lt;Lei;j++){                    if(this.id==nums[j]){                        res=0;                        document.getElementById(this.id).innerHTML="雷";                        alert('游戏失败');                        if(confirm("确认重新开始游戏?")){                            window.location.reload();                        }                    }                }                if(res==1){                    var n = NotLeiNum(this.id);                    document.getElementById(this.id).innerHTML=n;                    document.getElementById(this.id).style.backgroundColor="#84EFFF";                    document.getElementById(this.id).style.color="#000";                    if(n==0){                        judgeLei(this.id,1);                        /*judgeLei(this.id,2);                        judgeLei(this.id,3);                        judgeLei(this.id,4);*/                    }                }                seledNum=document.getElementById("contain").childNodes;                for(i=0;i&lt;seledNum.length;i++){                    if(seledNum[i].innerHTML==""){                        num++;                    }                }                if(num==Lei){                    alert("你成功啦");                }else{                    num=0;                }            }        }        //计时器        var n=0;        function addtime(){            n++;            document.getElementById("time").innerHTML=n;        }        setInterval("addtime()",1000);        &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node+express+mongodb初试</title>
      <link href="article/2018/article_7_node+express+mongodb%E5%88%9D%E8%AF%95/"/>
      <url>article/2018/article_7_node+express+mongodb%E5%88%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>新尝试另一个语言node.js和框架express，记录一些基本的操作与技巧。<a id="more"></a></p><p>此次最大的不同是node.js是异步的，有些操作就不那么直观。</p><p>这里在linux centos做测试。前提先安装好node.js和npm。</p><p>这里也类似上次flask完成一个登陆与增删改操作的接口。</p><p>先用命令行直接生成一个项目</p><pre class="language-sh"><code class="language-sh" translate="no">npm install express-generator -gexpress --view=pug myapp</code>cd myapp &amp;&amp; npm install npm start<code class="language-sh" translate="no"></code></pre><p>app.js主文件</p><pre>//最后两个为session所需库，还有mongodb库，需自行下载//npm install --save express-session,session-file-store,mongodbvar express = require('express');var path = require('path');var favicon = require('serve-favicon');var logger = require('morgan');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');var session = require('express-session');var FileStore = require('session-file-store')(session);#引入路由文件var RetInfo = require("./common/retinfo");var index = require('./routes/index');var users = require('./routes/users');var manage = require('./routes/manage');var app = express();// view engine setupapp.set('views', path.join(__dirname, 'views'));app.set('view engine', 'pug');//解析请求body// uncomment after placing your favicon in /public//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));app.use(logger('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: false }));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));//开启并设置sessionapp.use(session({    secret: 'chyingp',    store: new FileStore(),    saveUninitialized: false,    resave: false,    cookie: {        maxAge: 24*60*60*1000    }}));//绑定路由，中间件app.use('/', index);app.use('/users', users);//不设置的则下面的路由都会运行这个函数app.use(function(req,res,next) {    var sess = req.session;    var loginUser = sess.loginUser;    if(loginUser===undefined) return res.json(RetInfo.error("login out"));    next();});//绑定另一个中间件，需登录后app.use('/manage',manage);//错误处理// catch 404 and forward to error handlerapp.use(function(req, res, next) {  var err = new Error('Not Found');  err.status = 404;  next(err);});// error handlerapp.use(function(err, req, res, next) {  // set locals, only providing error in development  res.locals.message = err.message;  res.locals.error = req.app.get('env') === 'development' ? err : {};  // render the error page  res.status(err.status || 500);  res.render('error');});module.exports = app;</pre><p>根目录下 新建一个文件夹common/用于存放通用函数，下面写了两种形式。</p><p>common/retinfo.js 用于接口返回数据</p><pre>module.exports = {    response : function(sts,msg) {        return {"sts":sts,"msg":msg}    },    success : function() {        return this.response(1,"success")    },    error : function(msg) {        return this.response(-1,msg)    },    dberr : function(msg) {        return this.response(-1,"db error");    }}</pre><p>common/mongodb.js 用于数据库操作,这里使用了promise，因为mongodb操作后会有回调函数，不方便调用，写成promise就可以用then进行下去。</p><pre>//use for mongodb database var MongoClient = require('mongodb').MongoClient;function Mongodb(dbName, colName){    this.dbName = dbName;    this.colName = colName;    this.url = 'mongodb://localhost:27017/';    this.fetch = function(params){        //回调函数里没法获取到外部的this，所以再定义一下that        var that = this;        return new Promise(function(resolve, reject, notufy) {            MongoClient.connect(that.url, function(err, db){                if(err) reject(err);                var dbo = db.db(that.dbName);                dbo.collection(that.colName).find(params).toArray(function(err, res){                    if(err) reject(err);                    resolve(res);                    db.close();                });            });        });    };    this.save = function(params){        var that = this;        return new Promise(function(resolve, reject, notufy){            MongoClient.connect(that.url, function(err, db){                if(err) reject(err);                var dbo = db.db(that.dbName);                dbo.collection(that.colName).insertOne(params, function(err, res){                    if(err) reject(err);                    resolve(res);                    db.close();                });            });        });    };    this.delete = function(params){        var that = this;        return new Promise(function(resolve, reject, notufy){            MongoClient.connect(that.url, function(err, db){                if(err) reject(err);                var dbo = db.db(that.dbName);                dbo.collection(that.colName).deleteOne(params, function(err, res){                    if(err) reject(err);                    resolve(res);                    db.close();                });            });        });    }    this.update = function(whparams,params){        var that = this;        return new Promise(function(resolve, reject, notufy){            MongoClient.connect(that.url, function(err, db){                if(err) reject(err);                var dbo = db.db(that.dbName);                dbo.collection(that.colName).updateOne(whparams, {$set:params}, function(err, res){                    if(err) reject(err);                    resolve(res);                    db.close();                });            });        });    }}module.exports = Mongodb;</pre><p>然后编写中间件routes/users.js</p><pre>var express = require('express');var router = express.Router();var RetInfo = require("../common/retinfo");//登录router.get('/login', function(req, res, next) {    username = req.query.username;    password = req.query.password;        if(!username || !password) return res.json(RetInfo.error("lack of params"));    if(username == "admin" &amp;&amp; password == "admin"){                req.session.regenerate(function(err) {            if(err) return res.json(RetInfo.error("login error"));            req.session.loginUser = username;            return res.json(RetInfo.success());        });    }else{        return res.json(RetInfo.error("username or password error"));    }});//登出router.get("/loginout", function(req, res, next) {    req.session.destroy(function(err) {        if(err) return res.json(RetInfo.error("login out error"));        return res.json(RetInfo.success());    });})module.exports = router;</pre><p>routes/manage.js  这里写了一般的增删改操作</p><pre>var express = require('express');var router = express.Router();var RetInfo = require("../common/retinfo");var Mongo = require("../common/mongodb");DB_POSTS = new Mongo("test_database","posts");//获取数据router.get("/",function(req, res, next){    DB_POSTS.fetch({}).then((data)=&gt;{        return res.send(data);    },(err)=&gt;{        return res.send(RetInfo.error(err.message));    });})//增加.post("/",function(req, res, next){    DB_POSTS.save(req.body).then((data)=&gt;{        return res.send(RetInfo.success());    },(err)=&gt;{        return res.send(RetInfo.error(err.message));    });})//删除.delete("/",function(req, res, next){    data={"_id":req.query.id}    DB_POSTS.delete(data).then((data)=&gt;{        return res.send(data)    },(err)=&gt;{        return res.send(RetInfo.error(err.message))    });})//修改.put("/",function(req, res, next){    const params = req.body;    DB_POSTS.update({"_id":params.id},params).then((data)=&gt;{        return res.send(RetInfo.success());    },(err)=&gt;{        return res.send(RetInfo.error(err.message));    })})module.exports = router;</pre><p>运行的话可以有很多方法</p><pre>一般运行npm startdebug模式DEBUG=myapp:* npm start开发修改后自动重启nodemon app.js后台一直运行forever start ./bin/www</pre><p>后言：对于js语法 es6等还比较生疏，并没有涉及，可能有待改进，但总怕麻烦。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python一个人机聊天的应用</title>
      <link href="article/2018/article_6_Python%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%BA%E8%81%8A%E5%A4%A9%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>article/2018/article_6_Python%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%BA%E8%81%8A%E5%A4%A9%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在上次tts的基础上，这次来完成一个完整的聊天应用。流程为记录音频–读取音频–语音识别（使用百度api）–文本对话（使用图灵机器人api）–tts。<a id="more"></a></p><p>其余的就直接在代码中解释：</p><pre>#python3.x#aip是百度语言识别AI库，可以到百度免费使用from pyaudio import PyAudio,paInt16import numpy as npfrom datetime import datetimeimport wavefrom aip import speechimport requestsimport pyttsx#封装成类class Chat(object):    """docstring for Chat"""    def __init__(self):        pass          #保存二进制数据成wav文件（这里主要是对直接使用二进制还有问题）    def save_wave_file(self,filename, data):        wf = wave.open(filename, 'wb')        wf.setnchannels(1)        wf.setsampwidth(2)        wf.setframerate(8000)        wf.writeframes(b"".join(data))        wf.close()    #获取用户输入并保存音频，主要借鉴下面网址    #<a href="http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5" target="_blank" rel="external">http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5</a>    def get_audio(self):        NUM_SAMPLES = 2000        SAMPLING_RATE = 8000        LEVEL = 1500        COUNT_NUM = 20        SAVE_LENGTH = 5        pa = PyAudio()        stream = pa.open(format=paInt16, channels=1, rate=SAMPLING_RATE, input=True, frames_per_buffer=NUM_SAMPLES)        save_count = 0        save_buffer = []        while True:            string_audio_data = stream.read(NUM_SAMPLES)            audio_data = np.fromstring(string_audio_data, dtype=np.short)            large_sample_count = np.sum(audio_data&gt;LEVEL)            print(np.max(audio_data))            if large_sample_count&gt;COUNT_NUM:                save_count = SAVE_LENGTH            else:                save_count -= 1            if save_count &lt; 0:                save_count = 0            if save_count &gt; 0:                save_buffer.append(string_audio_data)            else:                if len(save_buffer) &gt; 0:                    filename = "tmp.wav"                     self.save_wave_file(filename, save_buffer)                    return    #用百度api语音识别，这里需要填写的三个参数是在百度AI得到    def trans_audio_to_words(self):        s = speech.AipSpeech("参数1","参数2","参数3")        f = open("tmp.wav","rb")        res = s.asr(speech=f.read(),format="wav",rate=8000,options={'lan':'zh'})        print(res)        if res['err_no']==0:            return res['result']        else:            return ""    #获取图灵机器人的谈话交互数据，这里要写key，在图灵机器人得到    def connect_robot(self,info):        data = {            "key":"参数key",            "info":info,            "usid":"123456",        }        res = requests.post("http://www.tuling123.com/openapi/api",data=data)        res_data = res.json()        print(res_data)        if res_data['code']==100000:            return res_data['text']        else:            return "不能识别"    #使用tts读返回文字    def tts(self,words):        engine = pyttsx.init()        engine.say(words)        engine.runAndWait()#类使用方法if __name__=='__main__':    chat = Chat()    while True:        chat.get_audio()        words = chat.trans_audio_to_words()        if words == "":            print("error")        else:            rres = chat.connect_robot(words)            chat.tts(rres)</pre><p style="text-align: left;">虽然效果不好，反应比较慢，但做完整个流程还是比较惊喜的。</p><p style="text-align: left;">另一个缺点便是语音识别效果不是很好，一个可能得改进音频输入，另一个可能百度api就这点识别率或者并没写对参数。</p><p style="text-align: left;">但不需要触发关键词，直接便可以开始聊天。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用python完成文本转音频(tts)</title>
      <link href="article/2018/article_5_%E7%94%A8python%E5%AE%8C%E6%88%90%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91(tts)/"/>
      <url>article/2018/article_5_%E7%94%A8python%E5%AE%8C%E6%88%90%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91(tts)/</url>
      
        <content type="html"><![CDATA[<p>用 python完成tts的话一般会用pyttsx库，但一般pip下载的话会有各种报错。所以这里找了实际试了可用的github上几个改编的库。<a id="more"></a></p><p>对于python3.x版本，选择 <a href="https://github.com/jpercent/pyttsx" target="_blank" rel="external">https://github.com/jpercent/pyttsx</a> ，来完成tts，但python3版本的目前还没发现有保存为音频文件的，只能直接发出声音。代码如下：</p><pre>import pyttsxengine = pyttsx.init()engine.say("你好")engine.runAndWait()</pre><p>对于python2.7版本，可以选择<a href="https://github.com/hick/pyttsx" target="_blank" rel="external">https://github.com/hick/pyttsx</a>来完成tts，他可以让文本转为声音并且可以下载保存为wav文件。</p><p>完成tts还需要pywin32，可以到这里下载对应版本，<a href="https://github.com/mhammond/pywin32/releases" target="_blank" rel="external">https://github.com/mhammond/pywin32/releases</a>，试过目前没错。</p><p>这里使用的环境是在windows8，python2.7版本。如果要读中文的话可以在 控制面板–轻松使用–语音识别–文本到语音转换，看看有没有中文语音库。</p><p>当然还需要准备一个文本文件，在windows，首先把文本转为utf-8格式，具体做法是用记事本打开txt文件，文件–另存为–在编码里选utf-8，保存；</p><p>前戏完成，然后运行下面代码：</p><pre>#coding:utf-8import pyttsx#读取txt文件(txt必须为utf-8编码)s=open("filename.txt").read()#解码为unicodec=s.decode("utf-8")#初始化ttsengine = pyttsx.init()#直接发出声音#engine.say(u"你好")#保存为文件engine.rec(c,"filename.wav")</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宽客初探---策略之旅</title>
      <link href="article/2018/article_4_%E5%AE%BD%E5%AE%A2%E5%88%9D%E6%8E%A2---%E7%AD%96%E7%95%A5%E4%B9%8B%E6%97%85/"/>
      <url>article/2018/article_4_%E5%AE%BD%E5%AE%A2%E5%88%9D%E6%8E%A2---%E7%AD%96%E7%95%A5%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p>既然已经接触了股票类金融，便也尝试一下宽客的滋味，至少python编程还是在的，在聚宽创了个号，了解基本的几个股票概念，便开始实践。<a id="more"></a></p><p>看了很多知乎，雪球大v的文章，了解到<strong>量化</strong>大多也是条充满荆棘的道路，然而这种路走多了好像也习惯了，（绝望多了也享受绝望的感觉了）&lt;-这种feeling很奇妙。不试试咋么知道呢，反正还没到头脑发热的程度，大不了重头再来呗。</p><p>家里人谈股色变，但好像我没咋受影响，自己的路自己走，也没有太多包袱。</p><p>可能我注定不会是一个专精的程序员，从web前端到后台，再到机器学习神经网络；从js到php，再到python，然后到现在写写量化策略。是种历练吧。</p><p>开始说第一个策略把，策略叫聪明钱，注解还是在代码里展示：</p><pre># 导入函数库import jqdataimport numpy as npimport randomimport datetime# 初始化函数，设定基准等等def initialize(context):    # 设定沪深300作为基准    set_benchmark('000300.XSHG')    # 开启动态复权模式(真实价格)    set_option('use_real_price', True)    # 输出内容到日志 log.info()    # 过滤掉order系列API产生的比error级别低的log    log.set_level('order', 'error')    ### 股票相关设定 ###    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')    #运行，这里按天回测    run_daily(trade, "every_bar")#下面三个是过滤器，过滤停牌，摘牌，st的股票def paused_filter(security_list):    current_data=get_current_data()    security_list=[stock for  stock in security_list if not current_data[stock].paused]    return security_list    def delisted_filter(security_list):    current_data=get_current_data()    security_list=[stock for stock in security_list if not '退' in current_data[stock].name]    return security_listdef st_filter(security_list):    current_data=get_current_data()    security_list=[stock for stock in security_list if not current_data[stock].is_st]    return security_list#主要交易def trade(context):    #选择股票，并用一些财务数据简单过滤，挑中100个    stock_to_choose=get_fundamentals(query(        valuation.code,valuation.pe_ratio,        valuation.pb_ratio,valuation.market_cap,        indicator.eps,indicator.inc_net_profit_annual    ).filter(        valuation.pe_ratio&lt;400,        valuation.pe_ratio&gt;0,        indicator.eps&gt;0.1,        indicator.inc_net_profit_annual&gt;0.2,        indicator.roe&gt;2    ).order_by(        valuation.pb_ratio.asc()    ).limit(        100    ), date=None)    #过滤股票    stockpool=list(stock_to_choose['code'])    stockpool=paused_filter(stockpool)    stockpool=delisted_filter(stockpool)    stockpool=st_filter(stockpool)    #选择在每周周五交易    if context.current_dt.weekday()==4:                all_q={"stock":[],"q":[]}        #遍历股票池        for stock in stockpool:            #按分钟获取20天的历史数据---收盘价，成交量，成交额            df=attribute_history(stock,240*20,'1m',['close','volume','money'])            #计算单笔的平均价格            vwap_all = df['money'].sum()/df['volume'].sum()            #计算涨跌幅，定义聪明因子s=涨跌幅除以根号成交量            data_return=df['close'].pct_change()            df["smart"]=np.abs(data_return)/np.sqrt(df['volume'])            #过滤            df = df[(df['smart']&gt;0) &amp; (df['smart']&lt;np.inf)]            #按聪明因子s排序            df=df.sort("smart",ascending=False)            #计算成交量累积和            df["accumvol"]=df['volume'].cumsum()            if len(df["accumvol"].values)==0:                continue            #获取总和的前百分之20            high_acc=df["accumvol"].values[-1]*0.2            tmp = df[df['accumvol'] &lt;= high_acc]                        if tmp['volume'].sum()==0:                continue            #截取的单笔的均价            vwap_smart = tmp['money'].sum()/tmp['volume'].sum()            #均价相比较            all_q['stock'].append(stock)            all_q['q'].append(vwap_smart/vwap_all)        #获取前百分之2        tmp_q=pd.DataFrame(all_q)        q_min=tmp_q["q"].quantile(0)        q_max=tmp_q["q"].quantile(0.02)        my_q=tmp_q[tmp_q["q"]&gt;=q_min][tmp_q["q"]&lt;q_max]        my_stk=my_q['stock'].values        #获取持仓的股票代码        slist=list(context.portfolio.positions.keys())        #不符合的卖出        for stk in slist:            if stk not in my_stk:                order_target_value(stk, 0)        #符合的买进        buy_list=[]        for stock in my_stk:            if stock not in slist:                buy_list.append(stock)        if len(buy_list)==0:            Cash=context.portfolio.available_cash        else:            Cash=context.portfolio.available_cash/len(buy_list)            for  stock in buy_list:                order_target_value(stock,Cash)</pre><p>回测结果：</p><p><a href="/img/uploads/2018/01/微信图片_20180131184240.png"><img class="alignnone wp-image-528 size-full" src="/img/uploads/2018/01/微信图片_20180131184240.png" alt="" width="1019" height="401"></a></p><p>这个策略在16年的时候还是可以的，但在17年回测的时候就不太行了。也了解了策略必须要经常更替，一个策略不可能长时间保持高收益。</p><p>策略来源：<a href="https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7" target="_blank" rel="external">https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蒙特卡洛树搜索(mcts)实践--还是五子棋吧</title>
      <link href="article/2018/article_3_%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2(mcts)%E5%AE%9E%E8%B7%B5--%E8%BF%98%E6%98%AF%E4%BA%94%E5%AD%90%E6%A3%8B%E5%90%A7/"/>
      <url>article/2018/article_3_%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2(mcts)%E5%AE%9E%E8%B7%B5--%E8%BF%98%E6%98%AF%E4%BA%94%E5%AD%90%E6%A3%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>看AlphaZero的时候看到这个mcts，因为需要用他来产生棋局进行训练。比较神奇，就小小探究一下。这边做一个五子棋mcts AI。<a id="more"></a></p><p>mcts按我目前的理解也就是在目前的情况下（根节点），随机产生下一步的节点，之后进行随机模拟至产生一个结果，把结果反馈于当前节点与之前的节点，这样模拟n次以后，得到根节点的下一步的各个节点的A/B，A为结果获胜的次数，B为访问次数。<img class="" src="https://upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" data-original-src="//upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png" data-original-width="200" data-original-height="72" data-original-format="image/png" data-original-filesize="6109">用公式计算就可以得到各个节点的收益，得到收益最大的节点并进行选中。盗图如下，不过图中有多层节点，需计算也就更大。</p><img class="alignleft" src="https://upload-images.jianshu.io/upload_images/42741-e566dddb28a8f525.png"><p> </p><p>直接上代码</p><pre>from math import *import random#python3#如果要改写其他游戏，主要编写下面这个class就可以class Chess:    #初始化游戏状态    def __init__(self,cl):        self.cl=cl        self.all_n=cl*cl        self.playerJustMoved = 2        self.place=[0]*self.all_n    #复制游戏状态作为子节点    def Clone(self):        st = Chess(self.cl)        st.playerJustMoved = self.playerJustMoved        st.place=self.place[:]        return st    #进行游戏的下一步    def DoMove(self,state):        self.playerJustMoved = 3 - self.playerJustMoved        self.place[state]=self.playerJustMoved    #获取游戏可移动状态    def GetMoves(self):        """ Get all possible moves from this state.        """        return [i for i in range(self.all_n) if self.place[i] == 0]    #检查是否游戏结束    def checkout(self):        for i in range(self.all_n):            if self.place[i]!=0 and self.check(i):                return True        return False    #检查五子棋    def check(self,z):        y=int(z/self.cl)        x=z-y*self.cl        mid=self.place[x+y*self.cl]        if (x&lt;2 and y&lt;2) or (x&lt;2 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&lt;2):            return False        elif x&lt;2 or x&gt;self.cl-3:            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:                return True        elif y&lt;2 or y&gt;self.cl-3:            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:                return True        else:            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:                return True            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:                return True            if mid==self.place[x-1+(y-1)*self.cl] and mid==self.place[x-2+(y-2)*self.cl] and mid==self.place[x+1+(y+1)*self.cl] and mid==self.place[x+2+(y+2)*self.cl]:                return True            if mid==self.place[x-1+(y+1)*self.cl] and mid==self.place[x-2+(y+2)*self.cl] and mid==self.place[x+1+(y-1)*self.cl] and mid==self.place[x+2+(y-2)*self.cl]:                return True    #得到游戏结果，这边主要得到模拟结果用作反馈    def GetResult(self, playerjm):        """ Get the game result from the viewpoint of playerjm.         """        for i in range(self.all_n):            if self.place[i]!=0 and self.check(i):                   if self.place[i] == playerjm:                    return 1.0                else:                    return 0.0        if self.GetMoves() == []:            return 0.5 # draw        assert False#mcts算法节点部分class Node:    """ A node in the game tree. Note wins is always from the viewpoint of playerJustMoved.        Crashes if state not specified.    """    def __init__(self, move = None, parent = None, state = None):        self.move = move # the move that got us to this node - "None" for the root node        self.parentNode = parent # "None" for the root node        self.childNodes = []        self.wins = 0        self.visits = 0        self.untriedMoves = state.GetMoves() # future child nodes        self.playerJustMoved = state.playerJustMoved # the only part of the state that the Node needs later            def UCTSelectChild(self):        """ Use the UCB1 formula to select a child node. Often a constant UCTK is applied so we have            lambda c: c.wins/c.visits + UCTK * sqrt(2*log(self.visits)/c.visits to vary the amount of            exploration versus exploitation.        """        s = sorted(self.childNodes, key = lambda c: c.wins/c.visits + sqrt(2*log(self.visits)/c.visits))[-1]        return s        def AddChild(self, m, s):        """ Remove m from untriedMoves and add a new child node for this move.            Return the added child node        """        n = Node(move = m, parent = self, state = s)        self.untriedMoves.remove(m)        self.childNodes.append(n)        return n        def Update(self, result):        """ Update this node - one additional visit and result additional wins. result must be from the viewpoint of playerJustmoved.        """        self.visits += 1        self.wins += result    def __repr__(self):        return "[M:" + str(self.move) + " W/V:" + str(self.wins) + "/" + str(self.visits) + " U:" + str(self.untriedMoves) + "]"    def TreeToString(self, indent):        s = self.IndentString(indent) + str(self)        for c in self.childNodes:             s += c.TreeToString(indent+1)        return s    def IndentString(self,indent):        s = "\n"        for i in range (1,indent+1):            s += "| "        return s    def ChildrenToString(self):        s = ""        for c in self.childNodes:             s += str(c) + "\n"        return s#mcts算法模拟部分def UCT(rootstate, itermax, verbose = False):    """ Conduct a UCT search for itermax iterations starting from rootstate.        Return the best move from the rootstate.        Assumes 2 alternating players (player 1 starts), with game results in the range [0.0, 1.0]."""    rootnode = Node(state = rootstate)    for i in range(itermax):        node = rootnode        state = rootstate.Clone()        # Select        while node.untriedMoves == [] and node.childNodes != []: # node is fully expanded and non-terminal            node = node.UCTSelectChild()            state.DoMove(node.move)        # Expand        if node.untriedMoves != []: # if we can expand (i.e. state/node is non-terminal)            m = random.choice(node.untriedMoves)             state.DoMove(m)            node = node.AddChild(m,state) # add child and descend tree        # Rollout - this can often be made orders of magnitude quicker using a state.GetRandomMove() function        while state.GetMoves() != []: # while state is non-terminal            state.DoMove(random.choice(state.GetMoves()))        # Backpropagate        while node != None: # backpropagate from the expanded node and work back to the root node            node.Update(state.GetResult(node.playerJustMoved)) # state is terminal. Update node with result from POV of node.playerJustMoved            node = node.parentNode    # Output some information about the tree - can be omitted    #if (verbose): print rootnode.TreeToString(0)    #else: print rootnode.ChildrenToString()    #print(rootnode.childNodes)    return sorted(rootnode.childNodes, key = lambda c: c.visits)[-1].move # return the move that was most visited#主函数                def UCTPlayGame():    itermax=5000#每一步迭代的次数，越多越准确,但这边只有单分支，应该会有一个上限    length=8#棋盘长宽    res=["_"]*length*length    state = Chess(length)    save_state=""    while (not state.checkout() and state.GetMoves()!=[]):        if state.playerJustMoved == 1:            m = UCT(rootstate = state, itermax = itermax, verbose = False) #2            print("电脑2下子("+str(m-int(m/length)*length)+" "+str(int(m/length))+")")            res[m]="X"        else:            m = UCT(rootstate = state, itermax = itermax, verbose = False) #1            print("电脑1下子("+str(m-int(m/length)*length)+" "+str(int(m/length))+")")            #如果想自己和电脑下就注释掉上面两行，再去掉下面两个注释。            #my=input("您下子(格式如:3 4)\n").split(" ")            #m=int(my[0])+int(my[1])*length            res[m]="O"        print("Best Move: " + str(m) + "\n")        for i in range(length):            print(" ".join(res[length*i:length*(i+1)]))        state.DoMove(m)    if state.GetResult(state.playerJustMoved) == 1.0:        print("Player " + str(state.playerJustMoved) + " wins!")    elif state.GetResult(state.playerJustMoved) == 0.0:        print("Player " + str(3 - state.playerJustMoved) + " wins!")    else: print("Nobody wins!")if __name__ == "__main__":    """ Play a single game to the end using UCT for both players.     """    UCTPlayGame()</pre><p>实验结果：</p><p>以8*8棋盘为例，在每步迭代几千次之后，电脑就基本可以学会档这个技能，但电脑要赢这边还是有点困难，没有多步的规划。</p><p>有时候也会莫名下到棋盘边上的点，想想棋盘边上的点赢的概率应该低吧。这个可能步数不够或者模拟有问题。实验如下图：</p><img class="alignnone size-full wp-image-518" src="/img/uploads/2018/01/微信图片_20180126111340.png" alt="" width="132" height="174"><p>灵感来源：<a href="https://zhuanlan.zhihu.com/p/32089487" target="_blank" rel="external">知乎某讲篇AlphaZero的文章<br></a></p><p>算法代码借鉴：<a href="http://mcts.ai" target="_blank" rel="external">mcts.ai</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析之基础画图</title>
      <link href="article/2018/article_2_python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE/"/>
      <url>article/2018/article_2_python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>之前由于每次有数据用python画图都要找找其他资料和手册，顾这里做一些总结，用于方便查找与快捷使用！这里主要用matplotlib.pyplot。<a id="more"></a></p><pre>import numpy as npimport matplotlib.pyplot as plt#得到测试点x=np.linspace(-5,5,50)y=np.sin(x)z=2*x#设置画板大小plt.figure(figsize=(6,6))#用plot画图,前两个参数为数据的x和y值#第三个参数为三个属性的结合：颜色如(b，g，r)+标记如(.，o，,)+连线如(-，--，-.)#label为线条说明，markersize为标记大小，linewidth为连线大小plt.plot(x,y,"go-",label="yyy",markersize=2,linewidth=1)plt.plot(x,z,"b.-",label="zzz")#坐标轴显示范围plt.axis([-5,5,-5,5])#设置坐标轴刻度plt.xticks([-5,0,5])plt.yticks([-5,0,5],["bad","normal","good"])#坐标轴说明plt.xlabel("x axis")plt.ylabel("y axis")#图标题plt.title("this is title")#显示线条说明plt.legend()#显示网格plt.grid(True)#做标注plt.annotate("con",xy=(0,0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dict(arrowstyle='-&gt;', connectionstyle="arc3,rad=.2"))#做注释plt.text(x,y,"con",fondict={'size':16,'color':'r'})#画图plt.show()</pre><p>上面的plot可做散点也可作连线图，要做复杂的散点图也可以用plt.scatter</p><p>下面再试一试常用的柱状图</p><pre>import numpy as npimport matplotlib.pyplot as plt#得到测试点x=np.linspace(0,5,10)y=np.sin(x)z=2*x#画柱状图plt.bar(x,z,width=0.1,bottom=None,align='center')#画柱状大小的描述for i,j in zip(x,z):    plt.text(i,j,"%.2f"%j,ha='center',va='bottom')plt.show()</pre><p>再来尝试绘制一个饼图，这里引用<a href="https://www.jianshu.com/p/0a76c94e9db7" target="_blank" rel="external">https://www.jianshu.com/p/0a76c94e9db7</a></p><pre>from matplotlib import pyplot as plt #调节图形大小，宽，高plt.figure(figsize=(6,9))#定义饼状图的标签，标签是列表labels = [u'第一部分',u'第二部分',u'第三部分']#每个标签占多大，会自动去算百分比sizes = [60,30,10]colors = ['red','yellowgreen','lightskyblue']#将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙explode = (0.05,0,0)patches,l_text,p_text = plt.pie(sizes,explode=explode,labels=labels,colors=colors, labeldistance = 1.1,autopct = '%3.1f%%',shadow = False, startangle = 90,pctdistance = 0.6)#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数#shadow，饼是否有阴影#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看#pctdistance，百分比的text离圆心的距离#patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本#改变文本的大小#方法是把每一个text遍历。调用set_size方法设置它的属性for t in l_text:    t.set_size=(30)for t in p_text:    t.set_size=(20)# 设置x，y轴刻度一致，这样饼图才能是圆的plt.axis('equal')plt.legend()plt.show()</pre><p>先用matplotlib做这些基础的图形，之后亦可用seaborn做些更好看的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2017总结咯</title>
      <link href="article/2018/article_1_2017%E6%80%BB%E7%BB%93%E5%92%AF/"/>
      <url>article/2018/article_1_2017%E6%80%BB%E7%BB%93%E5%92%AF/</url>
      
        <content type="html"><![CDATA[<p>之前的博客多数以技术为主，今后将加入Life板块，用以记录生活，随笔，杂念～</p><p>首篇就做一篇2017年总结，也算有东西写，不ga聊。<a id="more"></a></p><p>2017上半年，我大二上，还当着宿管会技术部的部长，事情也是一大堆。</p><p>开年印象比较深刻的是我作为主负责人之一的项目在上线前一刻被pass了，这可能也是后来我离开宿管原因之一。</p><p>我找了半个女朋友，咋么这么说呢，至少那时候没有确定关系吧，聊得挺开的，也经常一起吃饭看电影，或许是我自嗨吧。事实如此，到暑假便忙的说话都少了，九月自然分开。对于感情好像没什么多说的，都靠感觉呗。</p><p>上半年技术部中我还在积极的培训与探讨下任的问题，这件事也算在5月份落地。</p><p>技术上由于之前想好了转python，上半年开始接触到一些机器学习的内容，也找到了可靠的图像方面的导师，但下半年还是没有坚持下去，中间也做了一段时间爬虫，这可能不是主要原因，我觉得还是内心平静不下来学习，经常是一个人钻牛角尖，借一句话：便纵有千种风情，更与何人说。</p><p>6月份参加了数学建模校赛，好像二等奖吧，就进了集训队，暑假集训忙的不可开交，七月集训完，我选择了退出，当时的考虑是体验过付出过便好，回报拿奖什么都不在乎，二来我希望在机器学习方面多深入一点。现在回头来看我应该也不会后悔吧，反正都是让我更上一层的，经历越丰富越好。</p><p>下半年，一个比较担心的事情是技术部名义上的存在。没有事情与可替代一定会来，虽然退出了，但毕竟也是一手带过来的，希望能有好ending吧。</p><p>之后也就是忙了一个月上面说的爬虫，总共也有爬下百g的图片和数据吧。后来觉得这是个耗时不讨好的活（爬下来的数据不是给我自己用，也没报酬）便不干了。</p><p>11，12月，事情不多每天水水，琢磨着找个实习罢，很幸运还能有内推机会，参加了网易前端面试，虽然没过，然后又来到了现在所在公司，做着python后端和数据处理。虽然都以前端名义投的简历，当时也没多想具体找什么工作，没有强求吧。现在看来其实也没什么，自身的进步在于自身而不在于所在的公司和工作吧。</p><p>在一家小做互联网金融的公司，接触很多股票方面的、我觉得也算一个了解的机会，本来可能很难接触到的一些，现在可能就在眼前，就看自己去学习。至于后端应该问题不大，对于我还比较轻松。不确定能长久做下去，但在做的时候有进步就好吧，不管是技术还是其他领域。</p><p>2018-01-01</p><p>临山开往杭州的汽车上</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flask+mongodb+gunicron初试</title>
      <link href="article/2017/article_48_flask+mongodb+gunicron%E5%88%9D%E8%AF%95/"/>
      <url>article/2017/article_48_flask+mongodb+gunicron%E5%88%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>最近接触些python后端开发，记录下所用到的一些技术。<a id="more"></a></p><p>flask，这个在他的官网里也有详细文档，这里简单论述一个登录+后台管理的例子。</p><pre>#引入一个蓝图，蓝图封装一些接口from lantu import simple_pagefrom flask import Flask,render_template,request,session,redirect,url_forimport jsonimport hashlib#定义app，secret_key主要在生成session时候用app=Flask(__name__)app.secret_key='gjc'#绑定蓝图app.register_blueprint(simple_page)#主页跳转到登录@app.route('/')def index():    return redirect(url_for('login'))#登录判断session，有则跳转到主页@app.route("/login")def login():    if "username" not in session:        return render_template('login.html')    else:        return redirect(url_for('simple_page.main'))#登录验证接口@app.route("/login/loginYz",methods=['POST'])def loginyz():    psd=hashlib.sha256()    psd.update('root'.encode('utf-8'))    if request.form['username']!='root':        res={            "state":"1001",            "result":"username error"        }        return json.dumps(res)    elif psd.hexdigest()!=request.form['password']:        res={            "state":"1002",            "result":"password error"        }        return json.dumps(res)    else:        session['username'] = request.form['username']        res={            "state":"1000",            "result":"success",            "linkTo":"/main"        }        return json.dumps(res) #登出接口，删除session@app.route("/loginout")def loginout():    session.pop('username', None)    return redirect(url_for('login'))#开始出程序if __name__=='__main__':    app.run("0.0.0.0",debug=True)</pre><p>上面绑定的蓝图</p><pre>from flask import Blueprint,render_template,abort,session,requestfrom jinja2 import TemplateNotFoundfrom pymongo import MongoClientimport json#连接mongodb数据库client=MongoClient()db=client.test_databaseposts=db.posts#定义一个蓝图simple_page=Blueprint('simple_page',__name__,template_folder='templates')#管理主页@simple_page.route("/main")def main():    if "username" in session:        data={}        data['username']=session['username']        data['info']=[post for post in posts.find()]        return render_template("main.html",data=data)    else:        return render_template('login.html')#增加数据@simple_page.route("/main/add",methods=['POST'])def add():    post={        "name":request.form['name'],        "email":request.form['email'],        "phone":request.form['tel'],        "more":request.form['more']    }    if posts.insert_one(post).inserted_id!="":        return json.dumps({"state":"1000","result":"success"})    else:        return json.dumps({"state":"1004","result":"insert error"})#删除数据@simple_page.route("/main/dele",methods=['POST'])def dele():    result=posts.delete_one({"name":request.form['name']})    if result.deleted_count&gt;0:        return json.dumps({"state":"1000","result":request.form['name']})    else:        return json.dumps({"state":"1005","result":"delete error"})#修改数据@simple_page.route("/main/edit",methods=['POST'])def edit():    result=posts.update_one({"name":request.form['org_name']},{"$set":{        "name":request.form['ch_name'],        "email":request.form['ch_email'],        "phone":request.form['ch_phone'],        "more":request.form['ch_more']    } })    if result.matched_count!=0:        return json.dumps({"state":"1000","result":request.form['ch_name']})    else:        return json.dumps({"state":"1006","result":"edit error"})    #return json.dumps({"state":"1000","result":result.matched_count})</pre><p>关于前端页面这里不做展示了，接下来使用gunicorn运行该flask程序</p><p>首先可以配置一下gunicorn的config，<a href="http://xn--flasktouchconfig-4l9yvvf013d3guf.py" target="_blank" rel="external">flask项目touch一个config.py</a>，复制如下内容，当然也可以自行修改配置，内容也可以在<a href="https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py" target="_blank" rel="external">这里</a>下载。</p><pre>bind = '0.0.0.0:8000'backlog = 2048workers = 1worker_class = 'sync'worker_connections = 1000timeout = 30keepalive = 2spew = Falsedaemon = Falsepidfile = Noneumask = 0user = Nonegroup = Nonetmp_upload_dir = Noneerrorlog = '-'loglevel = 'info'accesslog = '-'access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'proc_name = Nonedef post_fork(server, worker):    server.log.info("Worker spawned (pid: %s)", worker.pid)def pre_fork(server, worker):    passdef pre_exec(server):    server.log.info("Forked child, re-executing.")def when_ready(server):    server.log.info("Server is ready. Spawning workers")def worker_int(worker):    worker.log.info("worker received INT or QUIT signal")    ## get traceback info    import threading, sys, traceback    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])    code = []    for threadId, stack in sys._current_frames().items():        code.append("\n# Thread: %s(%d)" % (id2name.get(threadId,""),            threadId))        for filename, lineno, name, line in traceback.extract_stack(stack):            code.append('File: "%s", line %d, in %s' % (filename,                lineno, name))            if line:                code.append("  %s" % (line.strip()))    worker.log.debug("\n".join(code))def worker_abort(worker):    worker.log.info("worker received SIGABRT signal")</pre><p>然后运行</p><pre>gunicorn -c config.py main:app</pre><p>就可以多线程运行flask程序啦！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>不会停下的setInterval</title>
      <link href="article/2017/article_47_%E4%B8%8D%E4%BC%9A%E5%81%9C%E4%B8%8B%E7%9A%84setInterval/"/>
      <url>article/2017/article_47_%E4%B8%8D%E4%BC%9A%E5%81%9C%E4%B8%8B%E7%9A%84setInterval/</url>
      
        <content type="html"><![CDATA[<p>关于定时器，如果把浏览器最小化或者看其他页面的时候，页面都会处于未激活状态，也就是对于chrome定时器会变1s运行一次，手机定时器则会直接暂停。<a id="more"></a></p><p>比如运行如下代码，页面切到后台的话，定时器chrome会变一秒变一次，手机则会暂停。</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;test js&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type="text/javascript"&gt;        var time=0;        setInterval(function(){            time++;            document.write(time+" ");            document.title=time+" ";        },100);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>然后先尝试一个web worker实现的不停下的setInterval，类似于让定时器部分js在后台运行，这样就可以一直运行定时器，前台收到msg展示即可。下面是html部分</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type="text/javascript"&gt;        var worker = new Worker("worker.js");        // 向worker.js发送信息        worker.postMessage( 'hello world' );        // 接收从worker.js发送的信息，存储在event.data中        worker.onmessage = function(event){            document.write(event.data+" ");            document.title=event.data+" ";        }        // 报错信息        worker.onerror=function(error){            console.log(error.filename,error.lineno,error.message);        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>下面是web worker的js部分。</p><pre>onmessage = function(event){    var data = event.data;    var time=0;    setInterval(function(){        // 向前端页面发送信息        postMessage(time);        time++;    }, 100)}</pre><p>再来一种比较奇妙的实现，主要参考<a href="https://imququ.com/post/ios-none-freeze-timer.html" target="_blank" rel="external">这里</a>。</p><p>通过mate的refresh和setInterval的配合实现。不过这个好像最小只能实现一秒。</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="refresh" content="2" id="refresh"&gt;    &lt;title&gt;123&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script type="text/javascript"&gt;        var meta = document.getElementById("refresh");        var time = 0;        setInterval(function() {            meta.content = meta.content;            document.title=time+" ";            document.write(time+" ");            time++;        }, parseInt(meta.content / 2) * 1000);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>最后再扯扯这个问题的初衷，一次面试被问到页面定时器显示时间由于会停止，后台运行（最小化）后回来时间不对了怎么办。</p><p>这个容易调入上面的陷阱，想着怎么让定时器持续运行，其实只要setInterval获取系统时间便可以。即使停了回来也会运行一次获取到系统时间。代码如下</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;time&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="time"&gt;&lt;/div&gt;    &lt;script type="text/javascript"&gt;        setInterval(function(){            document.getElementById("time").innerHTML=new Date().toString();        },1000);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>That’s all；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swoole初试，作为一个你画我猜的websocket server</title>
      <link href="article/2017/article_46_swoole%E5%88%9D%E8%AF%95%EF%BC%8C%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E7%9A%84websocket%20server/"/>
      <url>article/2017/article_46_swoole%E5%88%9D%E8%AF%95%EF%BC%8C%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%BD%A0%E7%94%BB%E6%88%91%E7%8C%9C%E7%9A%84websocket%20server/</url>
      
        <content type="html"><![CDATA[<p>swoole也是一个php比较强大的扩展，可以实现高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket。这里实现一个WebSocket的server端的你画我猜。自我觉得还是踩坑之旅，生产环节用还是值得斟酌。<a id="more"></a></p><p>安装环节这里不多叙述，linux上按<a href="https://wiki.swoole.com/wiki/page/6.html" target="_blank" rel="external">这里</a>的进行就可以，插一句修改php.ini那个只要加在第一行就行。</p><p>然后touch一个php文件，这里命名为drawguess.php。具体内容解释在代码注释中。还有结尾彩蛋。</p><pre>&lt;?php//创建全局变量表，这里用于存储用户id，1024为最大容量。$table = new swoole_table(1024);$table-&gt;column('fd', swoole_table::TYPE_INT);$table-&gt;create();//定义server$server = new swoole_websocket_server("0.0.0.0", 9501);$server-&gt;table = $table;//这里定义答案$anstr="苹果,李子,梨子,榴莲,香蕉,橙子,番茄,柿子,葡萄,水蜜桃,核桃,哈密瓜,西瓜,菠萝,蓝莓,草莓,释迦,杨桃,椰子,板栗,樱桃,荔枝,龙眼,青梅,山楂,柠檬,金桔,芒果,坚果,胡桃,枇杷";$ansarr=split(",", $anstr);$ran=rand(0,count($ansarr));$ans=$ansarr[$ran];//全局计数，不同进程之间共享$startGame=new swoole_atomic(0);$players=new swoole_atomic(999);$k=new swoole_atomic(0);//定义open事件，把用户id加入表中//push为推送数据到客户端,这里广播需要用foreach实现。$server-&gt;on('open', function($server, $req) {    global $ans,$players,$startGame;    $server-&gt;table-&gt;set($req-&gt;fd, array('fd' =&gt; $req-&gt;fd));    if(count($server-&gt;table)==1){        $data=json_encode(array("start"=&gt;"-2","data"));        $server-&gt;push($req-&gt;fd,$data);    }    if(count($server-&gt;table)==$players-&gt;get()){        if($startGame-&gt;get()==0){            $startGame-&gt;set(1);            foreach ($server-&gt;table as $u) {                if($u['fd']==$req-&gt;fd){                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"1","ans"=&gt;$ans));                    $server-&gt;push($u['fd'],$data);                }else{                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"0"));                    $server-&gt;push($u['fd'],$data);                }            }        }    }});//定义接受到数据触发事件。//这里主逻辑为接受getdata数据，解析，start为状态，/*-4---时间到0事件-3---第一个玩家选择人数-2---第一个玩家进入事件-1---玩家到齐，开始游戏事件0----touchstart事件1----touchmove事件2----设置线条宽度3----设置橡皮宽度4----清空事件5----设置颜色事件6----答案提交事件，判断成功与否*/$server-&gt;on('message', function($server, $frame) {    //$server-&gt;push($frame-&gt;fd, $frame-&gt;data);    global $ans,$ansarr,$players,$k;    $getdata=json_decode($frame-&gt;data);    if($getdata-&gt;start==-4){        $ran=rand(0,count($ansarr));        $ans=$ansarr[$ran];        $i=0;        foreach($server-&gt;table as $u) {            if($i&lt;$k-&gt;get()){                $i++;            }else{                $player=$u["fd"];                $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());                break;            }        }        foreach ($server-&gt;table as $u) {                if($u['fd']==$player){                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"1","ans"=&gt;$ans));                    $server-&gt;push($u['fd'],$data);                }else{                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"0"));                    $server-&gt;push($u['fd'],$data);                }            }    }    if($getdata-&gt;start==-3){        $players-&gt;set(intval($getdata-&gt;players));    }else{        if($getdata-&gt;start==6){            echo $getdata-&gt;answer;        }        if($getdata-&gt;start==6 &amp;&amp; $getdata-&gt;answer==$ans){            foreach ($server-&gt;table as $u) {                $res=array("start"=&gt;"6","win"=&gt;$frame-&gt;fd);                $server-&gt;push($u['fd'], json_encode($res));//消息广播给所有客户端                }              $ran=rand(0,count($ansarr));            $ans=$ansarr[$ran];            $i=0;            foreach($server-&gt;table as $u) {                if($i&lt;$k-&gt;get()){                    $i++;                }else{                    $player=$u["fd"];                    $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());                    break;                }            }            foreach ($server-&gt;table as $u) {                if($u['fd']==$player){                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"1","ans"=&gt;$ans));                    $server-&gt;push($u['fd'],$data);                }else{                    $data=json_encode(array("start"=&gt;"-1","draw"=&gt;"0"));                    $server-&gt;push($u['fd'],$data);                }            }        }else{            foreach ($server-&gt;table as $u) {                $server-&gt;push($u['fd'], $frame-&gt;data);//消息广播给所有客户端            }             }    }});//定义关闭websocket事件$server-&gt;on('close', function($server, $fd) {    echo "client-{$fd} is closed\n";     global $startGame;    $server-&gt;table-&gt;del($fd);    if(count($server-&gt;table)==1){        $startGame-&gt;set(0);    }});//开启server$server-&gt;start();</pre><p>再附上前端代码。</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,minimum-scale=1.0" name="viewport" &gt;    &lt;title&gt;draw and guess&lt;/title&gt;    &lt;style type="text/css"&gt;        html,body{            padding: 0px;            margin: 0px;            -webkit-tap-highlight-color:rgba(0,0,0,0);        }        canvas{            border: solid 1px black;        }        input{            border: none;            border-bottom: solid 1px black;            line-height: 20px;            font-size: 20px;            height: 25px;            outline:none;            border-radius: 0px;            width: 70%;        }        button{            height: 30px;            width: 20%;            background-color: rgba(255,255,255,0.5);            border: solid 1px black;            border-radius: 10px;            outline: none;        }        .sel li{            list-style: none;            display: inline-block;            width: 23%;        }        .color{            position: absolute;            width: 100%;            margin-top: -140px;        }        .red{            width: 100%;            position: relative;            top: 0px;        }        .green{            width: 100%;            position: relative;            top:30px;        }        .blue{            width: 100%;            position: relative;            top: 60px;        }        .ky{            width: 20px;            height: 20px;            border-radius: 20px;            background-color: black;            position: absolute;        }        .jd{            position: absolute;            margin-top: 4px;            border: solid 1px black;            width: 80%;            height: 10px;            border-radius: 10px;        }        .colorz{            position: absolute;            right: 10%;        }        .showcol{            width: 50px;            height: 20px;            margin: 5px;            border:solid 1px black;            background-color: #000;        }        .bs li{            list-style: none;            width: 50px;            height: 20px;        }        .bsdiv{            position: absolute;            margin-top: -140px;            margin-left: 25%;        }        .ans{            position: absolute;            top: 0px;            right: 5px;        }        .error{            position: absolute;            top: 0;            left: 5px;        }        .showinfo{            position: absolute;            top: 0px;            width: 100%;            text-align: center;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="ans" id="answer"&gt;&lt;/div&gt;    &lt;div class="error" id="error"&gt;&lt;/div&gt;    &lt;div class="showinfo" id="showinfo"&gt;123&lt;/div&gt;    &lt;canvas id="can" width="600" height="600"&gt;not support&lt;/canvas&gt;    &lt;div class="color" id="col" style="display:none;"&gt;        &lt;div class="showcol" id="showcolor"&gt;&lt;/div&gt;        &lt;div class="red"&gt;            &lt;div class="jd"&gt;&lt;/div&gt;            &lt;div class="ky" id="redmove"&gt;&lt;/div&gt;            &lt;div class="colorz"&gt;r&lt;/div&gt;        &lt;/div&gt;        &lt;div class="green"&gt;            &lt;div class="jd"&gt;&lt;/div&gt;            &lt;div class="ky" id="greenmove"&gt;&lt;/div&gt;            &lt;div class="colorz"&gt;g&lt;/div&gt;        &lt;/div&gt;        &lt;div class="blue"&gt;            &lt;div class="jd"&gt;&lt;/div&gt;            &lt;div class="ky" id="bluemove"&gt;&lt;/div&gt;            &lt;div class="colorz"&gt;b&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="sel"&gt;        &lt;ul&gt;            &lt;li id="colorblock"&gt;颜色&lt;/li&gt;            &lt;li id="bsblock" style="margin-left:-10px;"&gt;                &lt;select name="" id="selbs"&gt;                    &lt;option value="" disabled selected="selected"&gt;画笔&lt;/option&gt;                    &lt;option value="1"&gt;1&lt;/option&gt;                    &lt;option value="2"&gt;2&lt;/option&gt;                    &lt;option value="3"&gt;3&lt;/option&gt;                    &lt;option value="4"&gt;4&lt;/option&gt;                    &lt;option value="5"&gt;5&lt;/option&gt;                    &lt;option value="6"&gt;6&lt;/option&gt;                    &lt;option value="7"&gt;7&lt;/option&gt;                    &lt;option value="8"&gt;8&lt;/option&gt;                &lt;/select&gt;            &lt;/li&gt;            &lt;li style="margin-right:10px;"&gt;                &lt;select name="" id="xpsel"&gt;                    &lt;option value="" disabled selected="selected"&gt;橡皮&lt;/option&gt;                    &lt;option value="0"&gt;取消&lt;/option&gt;                    &lt;option value="1"&gt;1&lt;/option&gt;                    &lt;option value="2"&gt;2&lt;/option&gt;                    &lt;option value="3"&gt;3&lt;/option&gt;                    &lt;option value="4"&gt;4&lt;/option&gt;                    &lt;option value="5"&gt;5&lt;/option&gt;                    &lt;option value="6"&gt;6&lt;/option&gt;                    &lt;option value="7"&gt;7&lt;/option&gt;                    &lt;option value="8"&gt;8&lt;/option&gt;                &lt;/select&gt;            &lt;/li&gt;            &lt;li id="clear"&gt;清空&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;    &lt;input type="text" id="ans"&gt;    &lt;button class="btn" id="sub"&gt;提交&lt;/button&gt;    &lt;script type="text/javascript"&gt;        showinfo("您已进入游戏，请等待");        var wsServer = 'ws://123.206.217.190:9501';        var ws = new WebSocket(wsServer);        var can=document.getElementById("can");        var color=document.getElementById("col");        var rm=document.getElementById("redmove");        var gm=document.getElementById("greenmove");        var bm=document.getElementById("bluemove");        var showcol=document.getElementById("showcolor");        var bsdiv=document.getElementById("bsdiv");        var sub=document.getElementById("sub");        var colorclicked=0;        var colorshow=[0,0,0];        var lineWidth=1;        var xpWidth=0;        var myturn=0;        var players=0;        var deadtime=60;        var timejishu;        var cvs=can.getContext("2d");        var whmin = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;        var w=can.width=whmin-2;        var h=can.height=whmin-2;        color.addEventListener('touchstart',stcolor,{passive:false});        color.addEventListener('touchmove',chcolor,{passtive:false});        rm.addEventListener('touchstart',colormove,{passive:false});        gm.addEventListener('touchstart',colormove,{passive:false});        bm.addEventListener('touchstart',colormove,{passive:false});        ws.onopen=function(e){            can.addEventListener('touchstart',sendstart,{passive:false});            can.addEventListener('touchmove',sendmove,{passive:false});            function sendstart(e){                e.preventDefault();                let data={"start":"0","coor":[e.touches[0].clientX,e.touches[0].clientY]};                if(myturn==1){                    ws.send(JSON.stringify(data));                }            }            function sendmove(e){                e.preventDefault();                let data={"start":"1","coor":[e.touches[0].clientX,e.touches[0].clientY]};                if(myturn==1){                    ws.send(JSON.stringify(data));                }            }        }        ws.onmessage=function(e){            var con=JSON.parse(e.data);            switch(con.start){                case "-2":                    console.log(con)                    players=prompt("请选择玩家人数");                    let data={"start":"-3","players":players};                    ws.send(JSON.stringify(data));                    break                case "-1":                    if(con.draw=="1"){                        console.log(timejishu)                        showinfo("该你画咯");                        document.getElementById("answer").innerHTML=con.ans;                        timejishu=setInterval(function(){                            deadtime--;                            if(deadtime&lt;55){                                document.getElementById("showinfo").innerHTML=deadtime;                            }                            if(deadtime==0){                                let data={"start":"-4"};                                ws.send(JSON.stringify(data));                                deadtime=60;                                clearInterval(timejishu);                            }                        },1000);                        myturn=1;                    }else{                        showinfo("游戏开始");                        document.getElementById("answer").innerHTML="";                        if(timejishu!=undefined){                            clearInterval(timejishu);                        }                        myturn=0;                    }                    break                case "0":                    tstart(con.coor[0],con.coor[1]);                    break                case "1":                    move(con.coor[0],con.coor[1]);                    break                case "2":                    lineWidth=con.lineWidth;                    break;                case "3":                    xpWidth=con.xpWidth;                    break;                case "4":                    cvs.clearRect(0,0,w,h);                     break;                case "5":                    colorshow=con.color;                    break;                case "6":                    if(con.win!=undefined){                        alert(con.win+" win!");                        deadtime=60;                    }else{                        document.getElementById("error").innerHTML="error:\n"+con.answer;                    }            }        }                document.getElementById("colorblock").onclick=function(){            if(color.style.display=="none"){                color.style.display="block";                this.innerHTML="确认";            }else{                color.style.display="none";                let data={"start":"5","color":colorshow};                if(myturn==1){                    ws.send(JSON.stringify(data));                }                this.innerHTML="颜色";            }        }        document.getElementById("selbs").onchange=function(){            let data={"start":"2","lineWidth":this.value};            if(myturn==1){                ws.send(JSON.stringify(data));            }        }        document.getElementById("xpsel").onchange=function(){            let data={"start":"3","xpWidth":this.value};            if(myturn==1){                ws.send(JSON.stringify(data));            }        }        document.getElementById("clear").onclick=function(){            if(myturn==1){                ws.send(JSON.stringify({"start":"4"}));              }        }        sub.onclick=function(){            var ans=document.getElementById("ans").value;            let data={"start":"6","answer":ans};            ws.send(JSON.stringify(data));        }        function showinfo(info){            document.getElementById("showinfo").innerHTML=info;        }        function tstart(x,y){            //e.preventDefault();            cvs.beginPath();            cvs.moveTo(x,y);        }        function move(x,y){            //e.preventDefault();            if(xpWidth!=0){                cvs.clearRect(x-xpWidth*2,y-xpWidth*2,xpWidth*4,xpWidth*4);            }else{                cvs.lineTo(x,y);                cvs.lineWidth=lineWidth*2;                cvs.lineCap='round';                cvs.lineJoin="round";                cvs.strokeStyle="rgb("+colorshow[0]+","+colorshow[1]+","+colorshow[2]+")";                cvs.stroke();            }        }        function stcolor(e){            e.preventDefault();        }        function chcolor(e){            e.preventDefault();            if(e.targetTouches[0].clientX&lt;window.innerWidth*0.8){                this.children[colorclicked].children[1].style.left=e.targetTouches[0].clientX+"px";                colorshow[colorclicked-1]=parseInt(e.targetTouches[0].clientX/(window.innerWidth*0.8)*255)            }            showcol.style.backgroundColor="rgb("+colorshow[0]+","+colorshow[1]+","+colorshow[2]+")";        }        function colormove(e){            e.preventDefault();            if(this.id=="redmove"){                colorclicked=1;            }else if(this.id=="greenmove"){                colorclicked=2;            }else{                colorclicked=3;            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>运行的话，服务器端</p><pre>php drawguess.php</pre><p>客户端，swoole的http服务器的话这里不做叙述，可使用python2.x作为http服务器</p><pre>python -m SimpleHTTPServer 80</pre><p>或者python3.x</p><pre><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="o">.</span><span class="n">server</span> <span class="mi">80</span></pre><p>特别说明，这里还会有个bug，回答问题时有正确答案判断为错误，感觉是编码问题，然后这个服务器端运行的时候也是如果有输出中文的话也会输出乱码。有看到改php.ini什么为utf-8，好像也没效果。</p><p>另一个若是开发阶段，经常改服务器端，但每次去找pid并kill比较麻烦，因此可以写个shell命令来自动做一步。</p><pre>#!/bin/shkill `lsof -t -i:此处写server的端口`sleep 2php 此处写绝对路径/drawguess.phpsleep 1netstat -ntlp</pre><p>swoole值得探究的可能还很多，然而确实踩坑。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决各种问题集</title>
      <link href="article/2017/article_45_%E8%A7%A3%E5%86%B3%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E9%9B%86/"/>
      <url>article/2017/article_45_%E8%A7%A3%E5%86%B3%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>python篇：</p><p>1.windows上，在pip install xxx失败的时候怎么办？</p><p>答：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p><a id="more"></a><p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p><p>一种：</p><pre>import pippip.main(['install','ModuleName'])</pre><p>另一种：</p><pre class="lang-py prettyprint prettyprinted"><code><span class="pln">python3 </span><span class="pun">-</span><span class="pln">m pip install whlName</span></code></pre><p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p><pre>import io import sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre><p>4.requests爬到的中文网页输出在windows cmd会出错</p><pre>res=requests.get(url)res.encoding='gbk'print(res.text)</pre><p>5.cv2.imread读取中文路径出错</p><pre>#读取im = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)#写入cv2.imencode('.jpg',res)[1].tofile(file)</pre><p>6.sublime字体高低不齐</p><p>下载安装字体 <a href="http://cloud.alphadn.com/blog/yahei-consolas.zip" target="_blank" rel="external">http://cloud.alphadn.com/blog/yahei-consolas.zip</a><br>修改user_setting中的font_face为</p><pre>"font_face": "YaHei Consolas Hybrid",</pre><p>7.windows上编写的shell文件在linux运行报错</p><pre>vim file.sh:set ff=unix</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用编程小操作</title>
      <link href="article/2017/article_9_%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%93%8D%E4%BD%9C/"/>
      <url>article/2017/article_9_%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>包括，批量重命名，待更新。。。</p><p>1.批量重命名  <a href="http://changeName.py" target="_blank" rel="external">changeName.py</a></p><pre>import osf=os.listdir("./")f.remove("changeName.py")j=0for i in f: os.renames(i,str(j)+".jpg") j+=1</pre><p>2.实现数组next并循环—js版</p><pre>(now+1)%array.length</pre><p>3.python字典自动初始化为0</p><pre>from collections import defaultdictd=defaultdict(int)d['count']+=1</pre><p>4.linux+windows 查看端口监听并kill</p><pre>#linuxnetstat -apn|grep 8000或者ps -aux|grep 8000kill -9 pid#windowsnetstat -ano|findstr 3000netstat -ano</pre><p>5.linux开启防火墙</p><pre>firewall-cmd --zone=public --add-port=8892/tcp --permanentsystemctl restart firewalld</pre><p>6.linux下python后台运行</p><pre>nohup python -u filename.py &gt; filename.out 2&gt;&amp;1 &amp;tail -f filename.out</pre><p>7.git add，git commit提交错误</p><pre>git statusgit reset HEAD</pre><pre>git loggit reset --soft commit_id</pre><p>如果使用hard reset 了</p><pre>git refloggit reset --hard 前面的id</pre><p>8.linux查看文件行数（windows可用git bash）</p><pre>cat code.py | wc -l</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sublime装个google翻译的package</title>
      <link href="article/2017/article_44_sublime%E8%A3%85%E4%B8%AAgoogle%E7%BF%BB%E8%AF%91%E7%9A%84package/"/>
      <url>article/2017/article_44_sublime%E8%A3%85%E4%B8%AAgoogle%E7%BF%BB%E8%AF%91%E7%9A%84package/</url>
      
        <content type="html"><![CDATA[<p>原以为翻译这种包package control就可以解决，还是有许多问题出现，所以记录一下。顺便了解一下sublime包文件结构，毕竟也是python写的！<a id="more"></a></p><p>这里引用的是github上的一个<a href="https://github.com/mullnerz/SublimeText-Google-Translate-Plugin" target="_blank" rel="external">google 翻译包</a>，这是另一个人改过的，主要更新了google的api，他的原作是在<a href="https://github.com/MTimer/SublimeText-Google-Translate-Plugin" target="_blank" rel="external">这里</a>。</p><p>这里的操作皆为windows平台下，首先用git</p><pre><code>git clone https://github.com/MTimer/SublimeText-Google-Translate-Plugin 'Inline Google Translate'</code></pre><p>打开sublime，点击preferences-&gt;browse packages。把clone下来的文件复制到这里，文件名必须为 Inline Google Translate。</p><p>直接使用当然还会有问题，这里首先是使用代理的问题，由于gwf，需要通过代理来访问google api。因此在preferences-&gt;package setting-&gt;google translate-&gt;setting user中，添加以下，proxy部分添加自己电脑使用的代理的协议和端口，这里使用的是shadowsocks的默认的http和端口。</p><pre>{         "source_language": "", // 默认是 '自动检测'    "target_language": "zh-CN", // 默认是 en  英文    "target_type": "html",  // 输出格式，plain 或者 html 格式    "proxy_enable": "yes",  // 开启或关闭代理    "proxy_type": "http", // socks4 或者 socks5 或者 http    "proxy_host": "127.0.0.1",  // 比如 127.0.0.1    "proxy_port": "1080"    // 比如 9050}</pre><p>到这里可以尝试选中一行单词，按下ctrl+alt+g，如果有效果，则前面部分完成了；如果没效果，则按ctrl+~看命令行输出的错误。</p><p>这个包还有另一个问题就是如果选择多行只会翻译第一行。因此对其中的python代码做一定的修改。<a href="http://xn--goTranslate-7k1t.py" target="_blank" rel="external">在goTranslate.py</a> 第一个run函数部分</p><pre>def run(self, edit, proxy_enable = settings.get("proxy_enable"), proxy_type = settings.get("proxy_type"), proxy_host = settings.get("proxy_host"), proxy_port = settings.get("proxy_port"), source_language = settings.get("source_language"), target_language = settings.get("target_language")):        if not source_language:            source_language = settings.get("source_language")        if not target_language:            target_language = settings.get("target_language")        if not proxy_enable:            proxy_enable = settings.get("proxy_enable")        if not proxy_type:            proxy_type = settings.get("proxy_type")        if not proxy_host:            proxy_host = settings.get("proxy_host")        if not proxy_port:            proxy_port = settings.get("proxy_port")        target_type = settings.get("target_type")        for region in self.view.sel():            if not region.empty():                v = self.view                selection = v.substr(region).encode('utf-8')                print(selection)                translate = GoogleTranslate(proxy_enable, proxy_type, proxy_host, proxy_port, source_language, target_language)                #主要改了这下面部分，使用分行获取翻译结果并合并                tmp=[]                if not target_language:                    self.view.run_command("go_translate_to")                    return                                          else:                    for line in selection.split(b"\n"):                        tmp.append(translate.translate(line, target_type))                    result="\n".join(tmp)                v.replace(edit, region, result)                if not source_language:                    detected = 'Auto'                else:                    detected = source_language                sublime.status_message(u'Done! (translate '+detected+' --&gt; '+target_language+')')</pre><p>完成保存sublime就会自动重新加载包。</p><p>之后再可以试试多行的效果。</p><p>另外插一个就是快捷键，由于这里的ctrl+alt+g一般一只手操作不来，所以也想自定义一下。</p><p>以文本的形式打开同目录下的Default (Windows).sublime-keymap。改第一个keys的内容便是修改快捷键，我这里修改为了ctrl+alt+z，因为ctrl+z可以回撤一步，两个便可以配合使用。</p><p>这里涉及到了sublime包的一些编写和使用，感觉也并不是十分复杂，必要也可以自己写个！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用node.js的socket.io实现双人五子棋对战</title>
      <link href="article/2017/article_28_%E7%94%A8node.js%E7%9A%84socket.io%E5%AE%9E%E7%8E%B0%E5%8F%8C%E4%BA%BA%E4%BA%94%E5%AD%90%E6%A3%8B%E5%AF%B9%E6%88%98/"/>
      <url>article/2017/article_28_%E7%94%A8node.js%E7%9A%84socket.io%E5%AE%9E%E7%8E%B0%E5%8F%8C%E4%BA%BA%E4%BA%94%E5%AD%90%E6%A3%8B%E5%AF%B9%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>websocket也没啥好讲的，就一可以实现长连接的协议，其中也有三次握手之说。具体的也不去探究了，这里用node.js做后端来实现与前端js的websocket连接。并完成一个简易的联机游戏。<a id="more"></a></p><p>首先参考这个<a href="https://socket.io/" target="_blank" rel="external">socket.io的网址</a>，参考get start可得到一些安装的基本步骤，这里默认已经安装好node.js以及npm，具体操作包括如下</p><pre>npm init</pre><pre><code>npm install --save express@4.15.2</code></pre><pre><code>npm install --save socket.io</code></pre><p>之后要进行的是服务器的编写，保存为index.js</p><pre>//引入必要库var app=require('express')();var http=require('http').Server(app);var io=require('socket.io')(http);//n用于保存连接数目，now用于保存当前落子玩家var n=0;var now=0;//加载html文件app.get('/',function(req,res){    res.sendFile(__dirname + '/index.html');})//websocket连接操作io.on('connection',function(socket) {    n++;    //断开连接操作    socket.on('disconnect',function(){        n--;        console.log('out');    });    //收到消息，触发指定事件，并传送得到的消息    socket.on('msg',function(info){        console.log(now)        if(info[2]!=now &amp;&amp; n&gt;=2){            io.emit('message',{for:info})            now=info[2];        }    })});//打开http服务器http.listen(3000,function(){    console.log('start')})</pre><p>接下来要编辑的是html文件，同目录下保存为index.html</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;五子棋&lt;/title&gt;    &lt;style type="text/css"&gt;        canvas{            border:solid 1px black;            background-color: #5b7d7d;            -webkit-tap-highlight-color:rgba(0,0,0,0)        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;canvas id="can" width="600" height="800"&gt;not support&lt;/canvas&gt;    &lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.min.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        //获取canvas，设置宽高        //获取屏宽和高并设置小的一方为棋盘长度        var can = document.getElementById('can');        var x = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;        var w = can.width = x-20;        var h = can.height = x-20;        var con = can.getContext('2d');        var nowIn=1;        var alreadyIn=[];        var blackIn=[];        var whiteIn=[];        var local=Math.random();        //画线，做棋盘。        function drawline(con,color,stepx,stepy){            con.strokeStyle=color;            con.lineWidth=1;            for(var i=stepx+0.5;i&lt;can.width;i+=stepx){                con.beginPath();                con.moveTo(i,0);                con.lineTo(i,h);                con.stroke();            }            for(var i=stepy+0.5;i&lt;can.height;i+=stepy){                con.beginPath();                con.moveTo(0,i);                con.lineTo(w,i);                con.stroke();            }        }        //画棋子        function drawqi(x,y,color){            con.beginPath();            con.fillStyle=color;            con.arc(x*w/15,y*w/15,w/38,0,2*Math.PI);            con.stroke();            con.fill();            con.closePath();        }        //判断胜利，这里采用逐子判断。        function judgeWin(chess){            for(var i=0;i&lt;chess.length;i++){                sp=chess[i].split(",")                if(sp[0]&gt;=2 &amp;&amp; sp[1]&gt;=2){                    if($.inArray((parseInt(sp[0])-1)+","+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])-2)+","+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+1)+","+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+2)+","+(parseInt(sp[1])+2),chess)!=-1){                        return true;                    }                    if($.inArray((parseInt(sp[0])-1)+","+(parseInt(sp[1])),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])-2)+","+(parseInt(sp[1])),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+1)+","+(parseInt(sp[1])),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+2)+","+(parseInt(sp[1])),chess)!=-1){                        return true;                    }                    if($.inArray((parseInt(sp[0]))+","+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0]))+","+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0]))+","+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0]))+","+(parseInt(sp[1])+2),chess)!=-1){                        return true;                    }                    if($.inArray((parseInt(sp[0])-1)+","+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])-2)+","+(parseInt(sp[1])+2),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+1)+","+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;                    $.inArray((parseInt(sp[0])+2)+","+(parseInt(sp[1])-2),chess)!=-1){                        return true;                    }                }            }            return false        }        //触发画线，连接websocket        drawline(con,'lightgray',w/15,h/15);        var socket=io();        //canvas点击事件，获取最近的一个落子点坐标，发送事件。        can.onclick=function(e){            mx=Math.round(e.offsetX/w*15);            my=Math.round(e.offsetY/w*15);            if($.inArray((mx*15+my),alreadyIn)==-1){                socket.emit('msg',[mx,my,local])            }        }        //服务器返回触发事件，接收消息并展示给已连接用户        socket.on('message',function(msg){            mx=msg.for[0]            my=msg.for[1]                        alreadyIn.push(mx*15+my);            if(nowIn==0){                draw=drawqi(mx,my,"#000");                blackIn.push([mx,my].toString())                if(judgeWin(blackIn)){                    alert("black win");                }            }else{                draw=drawqi(mx,my,"#fff");                whiteIn.push([mx,my].toString());                if(judgeWin(whiteIn)){                    setTimeout(alert("white win"),500);                }            }            nowIn=1-nowIn;        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果图：<img class="alignnone size-medium wp-image-437" src="/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png" alt="" width="298" height="300"></p><p>一般看看socket.io的文档便可以get到一点websocket的灵感，之后就可以自行拓展。</p><p>当然这还是websocket最基础的一部分，之后有待进一步探索。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用python写个自动改壁纸的桌面程序</title>
      <link href="article/2017/article_43_%E7%94%A8python%E5%86%99%E4%B8%AA%E8%87%AA%E5%8A%A8%E6%94%B9%E5%A3%81%E7%BA%B8%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/"/>
      <url>article/2017/article_43_%E7%94%A8python%E5%86%99%E4%B8%AA%E8%87%AA%E5%8A%A8%E6%94%B9%E5%A3%81%E7%BA%B8%E7%9A%84%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>忍无可忍桌面壁纸软件的广告了，终于决定自己写个，总体逻辑上也并不复杂。</p><p>先是随机爬取某bing站的壁纸图片，调用win32接口改桌面壁纸，之后用tk的桌面程序来获取用户输入时间间隔，最后封装成exe使得更通用，在后台运行以及加个图标。<a id="more"></a>不说了，直接上代码。</p><p>由于是python3.x，库win32api库可能下载会有问题。建议直接去<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="external">这里</a>手动下载安装。</p><pre>#coding:utf-8#python3.5#windowsfrom PIL import Imageimport win32api,win32con,win32gui  import re,os  import requestsfrom io import BytesIOfrom bs4 import BeautifulSoupimport tkinterimport randomimport mathimport timeimport redef set_wallpaper_from_bmp(bmp_path):      #打开指定注册表路径      reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER,"Control Panel\\Desktop",0,win32con.KEY_SET_VALUE)      #最后的参数:2拉伸,0居中,6适应,10填充,0平铺      win32api.RegSetValueEx(reg_key, "WallpaperStyle", 0, win32con.REG_SZ, "2")      #最后的参数:1表示平铺,拉伸居中等都是0      win32api.RegSetValueEx(reg_key, "TileWallpaper", 0, win32con.REG_SZ, "0")      #刷新桌面      win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,bmp_path, win32con.SPIF_SENDWININICHANGE)    def set_wallpaper(bgimg):      #把图片格式统一转换成bmp格式,并放在源图片的同一目录      #注意地址必须是绝对地址    new_bmp_path="C:/backgroundPicture/wallpaper.bmp"    bmpImage = Image.open(BytesIO(bgimg))    bmpImage.save(new_bmp_path, "BMP")      set_wallpaper_from_bmp(new_bmp_path)  def getPicurl():    #爬虫部分，主要从这个网站随机取页随机取壁纸，返回图片二进制。    req=requests.Session()    resp=req.get("https://bing.ioliu.cn/?p=1")    soup=BeautifulSoup(resp.text,"lxml")    pageall=soup.find_all("span")[-1].get_text()    maxpage=int(pageall.split("/")[1].strip())    ran=math.floor(random.random()*maxpage)+1    resp1=req.get("https://bing.ioliu.cn?p="+str(ran))    soup1=BeautifulSoup(resp1.text,"lxml")    allimg=soup1.find_all("img")    ran1=math.floor(random.random()*len(allimg))    resp2=req.get("https://bing.ioliu.cn"+allimg[ran1].next_sibling['href'])    url=re.findall(r'src="http(.*?)"',resp2.text)[0]    image=req.get("http"+url)    return image.contentdef inputint():    #获取用户输入的时间    global t    try:        t = int(var.get().strip())    except:        t = 30    root.destroy()if __name__ == '__main__':      t=0    if not os.path.exists('C:/backgroundPicture/'):        os.mkdir("C:/backgroundPicture/")    root = tkinter.Tk(className='请输入间隔时间(按分钟计)')  # 弹出框框名    root.geometry('350x60')     # 设置弹出框的大小 w x h    var = tkinter.StringVar()   # 这即是输入框中的内容    var.set(30) # 通过var.get()/var.set() 来 获取/设置var的值    entry1 = tkinter.Entry(root, textvariable=var)  # 设置"文本变量"为var    entry1.pack()   # 将entry"打上去"    btn1 = tkinter.Button(root, text='确认', command=inputint)     # 按下此按钮(Input), 触发inputint函数    btn1.pack(side='bottom')    root.mainloop()    #一直运行并用sleep间隔    while True:        bgimg=getPicurl()        set_wallpaper(bgimg)        time.sleep(int(t*60))</pre><p>关于打包成exe，在python3有个pyinstaller，直接用pip安装就行。</p><p>使用方式是以下，-F打包单个文件，-w不显示命令窗口，-i图标</p><pre>pyinstaller -F -w -i bitbug_favicon.ico filename.py</pre><p>以上便是自动换桌面壁纸，另附这里添加一个功能，就是在程序运行时用按键触发换壁纸。要做的便是另写一个线程做按键监听。这里用pyHook做按键监听，关于pyhook的安装，不能简单用pip，不然用按键监听的时候会有一个bug。</p><p>参考：<a href="https://blog.csdn.net/dongfuguo/article/details/70226384#reply" target="_blank" rel="external">https://blog.csdn.net/dongfuguo/article/details/70226384#reply</a></p><pre>from ctypes import *import pyHookimport pythoncomimport threadingdef onKeyboardEvent(event):    global lt    #96为1左边那个按键，这里写法是双击    if event.Ascii==96:        if time.time()-lt&lt;2:            bgimg=getPicurl()            set_wallpaper(bgimg)        else:            lt=time.time()    return Truedef task0():    hm = pyHook.HookManager()    hm.KeyDown = onKeyboardEvent    hm.HookKeyboard()    pythoncom.PumpMessages()def task1():    global t    while True:        bgimg=getPicurl()        set_wallpaper(bgimg)        time.sleep(int(t*60))threads = []    t1 = threading.Thread(target=task0)    threads.append(t1)    t0 = threading.Thread(target=task1)    threads.append(t0)    for i in range(2):        threads[i].start()    for i in range(2):        threads[i].join()</pre><p>这段代码结合上面部分便可以完成一个自动换桌面且可按键手动换桌面的程序。</p><p>最后贴一下应用程序<a href="http://pan.baidu.com/s/1c1YXoje" target="_blank" rel="external">下载地址。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫技术栈小结</title>
      <link href="article/2017/article_42_%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B0%8F%E7%BB%93/"/>
      <url>article/2017/article_42_%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>做了接近一个月爬虫，中间爬到数据多的爬过唯品会，dpchallenge，frilly。百度图片和1688也是取了一部分数据来。这里做一些爬虫技术总结记录，包括基本的requests使用，json，bs4，OrderedDict，下载图片，多进程以及post一个数组。<a id="more"></a></p><p>首先，基本的爬虫以唯品会（这里以女装做示范），主要用以接口获取json数据，json解析，json格式化。</p><p>首先获取一下他的分类列表，由于返回的是callback里的函数，便去掉前后一些字符然后json格式化。</p><pre>req=requests.Session()cateurl='https://category.vip.com/ajax/getCategory.php?callback=getCategory&amp;tree_id=117'pplist=req.get(cateurl).textppjson=json.loads(pplist[12:-1])pparr=ppjson['data'][0]['children'][0]['children']</pre><p>之后访问分类的具体页面，用一点正则到他的js里解析出productIds，解析json，然后再通过里面的每个productid的拼接构成一个url，获取到商品服装信息（这里可得缩略图）。再进入服装详情页，得到商品大图。</p><pre>for item in pparr:    searchurl='https://category.vip.com/'+item['url']        sec1=req.get(searchurl        jsonpic=re.findall(r'"productIds":(.*?),"',sec1.text)        piclist=json.loads(jsonpic[0])        for n in range(2):            productIds='%2C'.join(map(str,piclist[50*n:(n+1)*50]))            resp=req.get('https://category.vip.com/ajax/mapi.php?service=product_info&amp;productIds='+productIds+'&amp;warehouse=VIP_SH')            projson=json.loads(resp.text)            if cate &gt; -5:                for j in projson['data']['products']:                    detail=req.get('https://detail.vip.com/detail-'+str(j['brandId'])+'-'+str(j['productId'])+'.html?f=ad')                    match=re.findall(r'&lt;a href="(.*?)" class="J-mer-bigImgZoom"&gt;',detail.text)                    for url in match:                        print(url)</pre><p>插一个从网页下载图片到本地的小技巧</p><pre>img=req.get(imageurl).contentwith open('test.jpg','wb') as f:    f.write(img)    f.close()</pre><p><a href="http://dpchallenge.com" target="_blank" rel="external">dpchallenge.com</a>，这是个摄影网站，除了爬图片还得爬摄影信息及评论，主要靠beautifulsoup和正则解析html文本。</p><p>这里先爬了信息，其中也包括图片地址。之后在把所有图下载下来。</p><p>这里做一部分beautifulsoup的记录</p><pre>soup=BeautifulSoup(response.text,"lxml")source_url=soup.find_all('标签',{'属性':'值(写True则代表有这个属性)'</pre><p>另一个这里要注意的便是OrderedDict，由于python的object读取显示出来时会乱序或者并不是按写入的顺序显示的。所以需要用OrderedDict作代替</p><pre>from collections import OrderedDicttest=OrderedDict()test["c"]="1"test["b"]="2"test["a"]="3"print(test)</pre><p>最后这里在做一下爬虫期间所用的多进程的简单使用，这里用到了进程池以及进程锁：</p><pre>from multiprocessing import Pool,Managerdef func(n,lock):    with lock:        print(n)if __name__=="__main__":    pool=Pool()    lock=Manager().Lock()    for i in range(10):        pool.apply_async(func, (i,lock))#这边也可以加回调    pool.close()    pool.join()</pre><p>最后考虑一个post时发现的问题，也是平常可能会忽略而出错的。</p><p><a href="http://test.ganjiacheng.cn/testspider/test.php%E6%98%AF%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9Epost%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8E%A5%E5%8F%A3" target="_blank" rel="external">http://test.ganjiacheng.cn/testspider/test.php是一个返回post数据的接口</a></p><p>在js的jquery的ajax里，</p><pre>$.post("./test.php",{du:"0",data:["1","2","3"]},function(data){    console.log(data)})//结果：{"du":"0","data":["1","2","3"]}</pre><p>而在python里</p><pre>import requestsimport jsonpost_data={    "du":"0",    "data":["1","2","3"],}res=requests.post('http://test.ganjiacheng.cn/testspider/test.php',data=post_data)print(res.json())#结果：{'du': '0', 'data': '3'}</pre><p>也便是数组形式如[]在post传输过程是不能保持的，上面的post_data传输的信息形式应该如du=0&amp;data%5B%5D=1&amp;data%5B%5D=2&amp;data%5B%5D=3。</p><p>后来用了拼接的方法来解决这个问题。</p><p>有待提升的地方，在有较多js操作及判断的网页中，要爬到对应信息需进行复刻同样的js操作，首先要读懂js，再来要自己实现一遍，对于综合能力要求还是比较高的。对于1688这种检测到爬虫的一些行为后会需要你登录后进行操作，虽然登录后通过chrome拿到cookie是可以使用的，但可能会有时限等限制。还有待探索！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用google的GAE部署kindle的自动推送</title>
      <link href="article/2017/article_41_%E7%94%A8google%E7%9A%84GAE%E9%83%A8%E7%BD%B2kindle%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/"/>
      <url>article/2017/article_41_%E7%94%A8google%E7%9A%84GAE%E9%83%A8%E7%BD%B2kindle%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>偶然在github看到一个<a href="https://github.com/cdhigh/kindleear/" target="_blank" rel="external">kindleear</a>，发现可以在google的gea配置推送到kindle，便来试试，这里记下最简单的几步操作。<a id="more"></a></p><p>具体可以参考网页—<a href="https://bookfere.com/post/19.html" target="_blank" rel="external">https://bookfere.com/post/19.html</a></p><p>首先，到google的<a href="https://console.developers.google.com/project?hl=zh-cn" target="_blank" rel="external">https://console.developers.google.com/project?hl=zh-cn</a>创建一个新项目。</p><p>之后在<a href="https://console.cloud.google.com/" target="_blank" rel="external">https://console.cloud.google.com/</a>这里便可以看到已创建的项目（或者选择到已创建的项目）。</p><p>在点击右上角 &gt;_ 这个按钮打开云端shell命令行。运行下面命令</p><pre class=" language-bash"><code class=" language-bash">gcloud beta app create</code></pre><p>完成后，在运行下面命令</p><pre class=" language-bash"><code class=" language-bash"><span class="token function">rm</span> -f uploader.sh* <span class="token operator">&amp;&amp;</span> \<span class="token function">wget</span> https://raw.githubusercontent.com/kindlefere/KindleEar-Uploader/master/uploader.sh <span class="token operator">&amp;&amp;</span> \<span class="token function">chmod</span> +x uploader.sh <span class="token operator">&amp;&amp;</span> \./uploader.sh</code></pre><p>输入你的 Gmail 地址和已有的项目ID，就完成了创建。</p><p>完成后打开https://项目ID.appspot.com/ 就可以访问到配置界面</p><p>用admin，admin登录，里面进行kindle以及订阅的一些设置。（可以选择每日自动推送）</p><p><strong>注：</strong>登录不了或者订阅打不开的话喝杯咖啡等一会儿就会好。</p><p><strong>以下两步必做</strong></p><p><strong>注：要在亚马逊设备—kindle—设置—已认可的发件人电子邮箱列表，把刚刚的gmail加进去</strong></p><p><strong>注：发送出现wrong SRC_EMAIL错误，点项目主页的左上角菜单—App引擎—设置—Email API 已获授权的发件人，添加自己的gmail即可</strong></p><p>具体效果：</p><p><img class="alignnone size-medium wp-image-415" src="/img/uploads/2017/10/IMG_3516-225x300.jpg" alt="" width="225" height="300"><img class="alignnone size-medium wp-image-414" src="/img/uploads/2017/10/IMG_3517-225x300.jpg" alt="" width="225" height="300"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬进数字杭电python篇</title>
      <link href="article/2017/article_40_%E7%88%AC%E8%BF%9B%E6%95%B0%E5%AD%97%E6%9D%AD%E7%94%B5python%E7%AF%87/"/>
      <url>article/2017/article_40_%E7%88%AC%E8%BF%9B%E6%95%B0%E5%AD%97%E6%9D%AD%E7%94%B5python%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>上次有的<a href="https://ganjiacheng.cn/blog/?p=63">php篇数字杭电模拟登陆</a>，不过由于如今没有了验证码，可能会出点小错误，因此用python再来进进出出一遍。</p><p>此次主要还是熟悉一下python requests的使用以及对网站cookie变化的准确捕捉。post的参数以及header也是这里的重点部分，其他还能加点简单的正则。<a id="more"></a></p><p>具体细节在代码注释里：</p><pre>import requestsimport re#先访问一次登录网站得到lt（lt后面必须，且一次性使用）def getHduCookie():    resp=requests.get('http://cas.hdu.edu.cn/cas/login')    m = re.search(r'name=\"lt\" value=(.*?) /&gt;', resp.text)    lt=m.group()[17:-4]    return lt#模拟登陆用户名为学号，密码为md5加密后的密码，返回跳转链接def simLogin(lt):    password=hashlib.md5(psd.encode('utf-8')).hexdigest()    params={        'encodedService':'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',        'service':'http://i.hdu.edu.cn/dcp/index.jsp',        'username':xh,        'password':password,        'lt':lt    }    resp=requests.post('http://cas.hdu.edu.cn/cas/login?service=http://jxgl.hdu.edu.cn/index.aspx',params=params)    m=re.search(r'href="(.*?)"',resp.text)    return m.group()[6:-1]#去临时链接获取一次cookie并保存请求def jxglPage(url):    req=requests.Session()    resp0=req.get(url)    req.headers={        'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',        'Referer':'http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113',        'Accept-Encoding': 'gzip, deflate',        'Content-Type':'application/x-www-form-urlencoded',    }    return req#这里的例子是获取选课列表def classList(req):    data=''#这里是post的一大串字符，可从浏览器获取    url='http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113'    resp=req.post(url,data=data)    resp.encoding='gbk'    print(resp.text)#主程序，设置学号密码并运行if __name__=='__main__':    xh='学号'    psd='密码'    lt=getHduCookie()    tmpurl=simLogin(lt)    req=jxglPage(tmpurl)    classList(req)</pre><p>学习为主，连我都不信。</p><p>温馨提醒：此片不要与<a href="https://ganjiacheng.cn/blog/?p=368">hack验证二维码篇</a>结合搞事情啦！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python cv2图像处理小结</title>
      <link href="article/2017/article_39_python%20cv2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/"/>
      <url>article/2017/article_39_python%20cv2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>这里做图像处理初学的一个阶段性小结。从简单的读写到复杂点的开闭运算。还有一些用到过的边缘提取，垂直水平投影等方法。<a id="more"></a></p><p>首先是读写和展示</p><pre>import cv2#imread第二个参数不写默认是rgb彩色，有0读取到的就是黑白二值图im = cv2.imread("image.jpg",0)#写入文件cv2.imwrite("img.jpg",im)#展示cv2.imshow("imageName",im)cv2.waitKey(0)</pre><p>一般复制粘贴的话可以用numpy，因为cv2本身图像保存的就是一个np矩阵。</p><p>这里的注意点就是先是y再是x。</p><pre>crop = im[y:y+height,x:x+width]</pre><p>改尺寸</p><pre>res = cv2.resize(im,(width, height), interpolation = cv2.INTER_CUBIC)</pre><p>灰度，二值（手动阀值和自动阀值）</p><pre>im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)#第二个参数为手动阀值retval,im_hb = cv2.threshold(im_gray, 120, 255, cv2.THRESH_BINARY) #自动阀值#这里255是二值中的高值，cv2.ADAPTIVE_THRESH_MEAN_C可以用cv2.ADAPTIVE_THRESH_GAUSSIAN_C#cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV是黑白相反的#最后两个参数可以调整来改变黑白区域im_hb = cv2.adaptiveThreshold(im_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 1)</pre><p>膨胀，腐蚀，开闭运算，待尝试（形态学梯度、顶帽、黑帽）</p><pre>#首先定义一个核，一般矩形用的多kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))#膨胀腐蚀是对图中白色部分而言，膨胀便是白色变多，腐蚀是白色变少#腐蚀eroded = cv2.erode(img,kernel)#膨胀dilated = cv2.dilate(img,kernel) #闭运算=先膨胀后腐蚀closed = cv2.morphologyEx(im, cv2.MORPH_CLOSE, kernel) #开运算=先腐蚀后膨胀open = cv2.morphologyEx(im, cv2.MORPH_OPEN, kernel)</pre><p>mser连通域检测，原理貌似是把图像看做高低起伏的地形，然后往下灌水。</p><pre>#图片如果底色比较单一就能用来截出内容，这里需要自己控制_min_areamser = cv2.MSER_create(_min_area=1800)regions, boxes = mser.detectRegions(im_hb)for box in boxes:    x, y, w, h = box    cv2.rectangle(im, (x,y),(x+w, y+h), (255, 0, 0), 2)</pre><p>垂直，水平投影做分割，这里没找到直接可用的接口，就自己实现</p><pre>#首先需要的是一张二值图im，以白底黑字为例division=np.array([[255.0]*width]*height)#水平投影，可以用来确定字的上下边缘for i in range(im.shape[0]):     n=0     for j in range(im.shape[1]):         if closed[i][j]==0:             division[i][n]=0             n+=1#垂直投影，可以用来确定字的左右边缘已经字符中间的空隙for i in range(im.shape[1]):    n=0    for j in range(im.shape[0]):        if division[j][i]==0:            division[height-1-n][i]=0            n+=1</pre><p>边缘检测，尝试了findContours和sobel算子和canny算子</p><pre>#这里也需要二值图imcontours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)cv2.drawContours(img,contours,-1,(0,0,255),3)</pre><pre>x = cv2.Sobel(im,cv2.CV_16S,1,0)  y = cv2.Sobel(im,cv2.CV_16S,0,1)  absX = cv2.convertScaleAbs(x)absY = cv2.convertScaleAbs(y)  dst = cv2.addWeighted(absX,0.5,absY,0.5,0)</pre><pre>#最大最小阀值canny = cv2.Canny(im, 50, 150)</pre><p>入门至此把，python写起来还比较方便，至于最后还得上c++。</p><p>真实中图像各异，总的还得实践出真知！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>three.js第四发，粒子与第一视角的尝试</title>
      <link href="article/2017/article_38_three.js%E7%AC%AC%E5%9B%9B%E5%8F%91%EF%BC%8C%E7%B2%92%E5%AD%90%E4%B8%8E%E7%AC%AC%E4%B8%80%E8%A7%86%E8%A7%92%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>article/2017/article_38_three.js%E7%AC%AC%E5%9B%9B%E5%8F%91%EF%BC%8C%E7%B2%92%E5%AD%90%E4%B8%8E%E7%AC%AC%E4%B8%80%E8%A7%86%E8%A7%92%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><a href="http://test.ganjiacheng.cn/3d/test3d5.html" target="_blank" rel="external">点这里先看效果</a>，会有点晕，毕竟第一视角。</p><p>其中的大致思路：首先是舞台， 摄像机，渲染器。然后有一个clock，用于更新摄像机位置时候。<a id="more"></a>FirstPersonControls用于制作第一视角的，后面也设置了许多参数。createSprites函数中先是创造了点云的几何和材料，然后把向量点加进去，最后在把点云加到舞台。通过渲染持续创造点云，为所有点云改变位置。</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;test3d3&lt;/title&gt;    &lt;style type="text/css"&gt;        body{            margin: 0;            overflow: hidden;        }        #stats{            position: absolute;            left: 0;            top: 0;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="stats"&gt;&lt;/div&gt;    &lt;div id="webgl"&gt;&lt;/div&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/three.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/stats.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/FirstPersonControls.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        function init(){            var clock = new THREE.Clock();            var stats=initStats();            var scene=new THREE.Scene();            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);            camera.position.set(0,0,0);            camera.lookAt(scene.position);                        var renderer=new THREE.WebGLRenderer();            renderer.setClearColor(0x000000);            renderer.setSize(window.innerWidth,window.innerHeight);            renderer.shadowMapEnable=true;            var camControls = new THREE.FirstPersonControls(camera);            camControls.lookSpeed = 0.4;            camControls.movementSpeed = 20;            camControls.noFly = true;            camControls.lookVertical = true;            camControls.constrainVertical = true;            camControls.verticalMin = 1.0;            camControls.verticalMax = 2.0;            camControls.lon = -180;            camControls.lat = 180;            function createSprites(){                pic="image/Sam"+Math.floor(Math.random()*10)+".jpg";                var texture=THREE.ImageUtils.loadTexture(pic);                var geom=new THREE.Geometry();                var material=new THREE.PointCloudMaterial({                    size:4,                    transparent:true,                    map: texture,                    blending: THREE.AdditiveBlending,                    color:0x5fe0ff,                });                var range=500;                for(var i=0;i&lt;500;i++){                    var particle=new THREE.Vector3(Math.random() * range - range / 2, Math.random() * range + range / 5, Math.random() * range - range / 2);                    geom.vertices.push(particle);                    var color=new THREE.Color(0x00ff00);                    color.setHSL(color.getHSL().h,color.getHSL().s,Math.random()*color.getHSL().l);                    geom.colors.push(color);                }                cloud=new THREE.PointCloud(geom,material);                cloud.sortParticles=true;                scene.add(cloud);            }            function fulldown(){                scene.children.pop();            }            createSprites();                        document.getElementById("webgl").appendChild(renderer.domElement);            renderer.render(scene,camera);                        var step=0;            var v=0;            function rendererScene(){                stats.update();                var delta = clock.getDelta();                camControls.update(delta);                step+=2;                if(step%100==0){                    createSprites();                }                for(var i=0;i&lt;scene.children.length;i++){                    scene.children[i].position.y-=2;                }                requestAnimationFrame(rendererScene);                renderer.render(scene,camera);            }            function initStats(){                var stats=new Stats();                stats.setMode(0);                document.getElementById("stats").appendChild(stats.domElement);                return stats;            }            rendererScene();        }        window.onload=init;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果是不断有数字掉落，这种还可以模拟下雨下雪之类。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hack个验证码验证多字符连接识别与切割识别的优劣</title>
      <link href="article/2017/article_37_hack%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E9%AA%8C%E8%AF%81%E5%A4%9A%E5%AD%97%E7%AC%A6%E8%BF%9E%E6%8E%A5%E8%AF%86%E5%88%AB%E4%B8%8E%E5%88%87%E5%89%B2%E8%AF%86%E5%88%AB%E7%9A%84%E4%BC%98%E5%8A%A3/"/>
      <url>article/2017/article_37_hack%E4%B8%AA%E9%AA%8C%E8%AF%81%E7%A0%81%E9%AA%8C%E8%AF%81%E5%A4%9A%E5%AD%97%E7%AC%A6%E8%BF%9E%E6%8E%A5%E8%AF%86%E5%88%AB%E4%B8%8E%E5%88%87%E5%89%B2%E8%AF%86%E5%88%AB%E7%9A%84%E4%BC%98%E5%8A%A3/</url>
      
        <content type="html"><![CDATA[<p>有个多个字符识别的需求，想是要切割还是字符连接整个一起识别，所以就找了一个验证码来做对比尝试。这个验证码很简单，<a href="http://jxgl.hdu.edu.cn/CheckCode.aspx" target="_blank" rel="external">验证码链接</a>，<a id="more"></a>就中规中矩<img class="alignnone size-full wp-image-379" src="/img/uploads/2017/07/00126-1.png" alt="" width="60" height="22">，</p><p>简单贴一下验证码爬下来的代码</p><pre>import requestsfrom PIL import Imagefrom io import BytesIOfrom threading import Threadheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}class Mythread(Thread):    def __init__(self,num):        Thread.__init__(self)        self.num=num    def run(self):        while True:              req = requests.get("http://jxgl.hdu.edu.cn/CheckCode.aspx",headers=headers)            im=Image.open(BytesIO(req.content))            im.save("croptest/"+str(self.num)+".png")threads=[]for j in range(10):    for i in range(10):        t=Mythread(i+10*j)        t.start()        print(i+10*j)</pre><p>之后做了去重，标记，测试正式开始</p><p>首先用不切割整体识别的方法，像素转换成黑白二值整个作为输入，输出为5个数，每个数10类的拼接，总共50类，每十个数中的1值为图中所对应的数。</p><p>先用tensorflow构建了cnn，对于cnn模型，中间并没有做很多改动，只进行了输入输出的调整。写了个输入函数把图像转换成输入数据，写了个训练函数对模型进行训练，由于样本较少，也只进行了不多的训练次数。又写了个测试函数用来爬取新图片对模型进行测试</p><pre>import tensorflow as tfimport osimport numpy as npimport cv2number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']char_Len=5*len(number)dirname=os.listdir('dealyzm/')dirname.remove('Thumbs.db')def weight_varible(shape):    initial = tf.truncated_normal(shape, stddev=0.1)    return tf.Variable(initial)def bias_variable(shape):    initial = tf.constant(0.1, shape=shape)    return tf.Variable(initial)def conv2d(x, W):    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')def max_pool_2x2(x):    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')# parasW_conv1 = weight_varible([5, 5, 1, 32])b_conv1 = bias_variable([32])# conv layer-1x = tf.placeholder(tf.float32, [None, 1320])x_image = tf.reshape(x, [-1, 22, 60, 1])h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)h_pool1 = max_pool_2x2(h_conv1)# conv layer-2W_conv2 = weight_varible([5, 5, 32, 64])b_conv2 = bias_variable([64])h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)h_pool2 = max_pool_2x2(h_conv2)# full connectionshape = h_pool2.get_shape().as_list()dim = 1for d in shape[1:]:    dim *= dW_fc1 = weight_varible([dim, 1024])b_fc1 = bias_variable([1024])h_pool2_flat = tf.reshape(h_pool2, [-1, dim])h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)# dropoutkeep_prob = tf.placeholder(tf.float32)h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)# output layer: softmaxW_fc2 = weight_varible([1024, char_Len])b_fc2 = bias_variable([char_Len])y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)y_ = tf.placeholder(tf.float32, [None, char_Len])# model trainingcross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)sess=tf.InteractiveSession()tf.global_variables_initializer().run()def getRanPic(num):    image=[]    name=[]    for i in range(num):        tmpname=[0]*char_Len        filename=dirname[int(np.random.random()*len(dirname))]        im=cv2.imread("dealyzm/"+filename,0)/255.0        im=im.reshape(-1)        for i in range(5):            tmpname[number.index(filename[i])+len(number)*i]=1        image.append(im)        name.append(tmpname)    return image,namedef trainFirst():    saver = tf.train.Saver()    for _ in range(400):        batch_xs,batch_ys=getRanPic(20)        tmp,loss=sess.run([train_step,cross_entropy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})        if _%20==0:            batch_xs,batch_ys=getRanPic(20)            correct_prediction=tf.equal(tf.argmax(tf.reshape(y_conv, [-1, 5, 10]),2),tf.argmax(tf.reshape(y_, [-1, 5, 10]),2))            accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))            acc_test=sess.run(accuracy,feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})            print("loss:"+str(loss)+" acc_train:"+str(acc_test))    saver.save(sess, 'model/testyzm-cnn.model', global_step=_)def test():    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}    req = requests.get("http://jxgl.hdu.edu.cn/CheckCode.aspx",headers=headers)    im=np.array(Image.open(BytesIO(req.content)))    ret,im_hb=cv2.threshold(im,127,255,cv2.THRESH_BINARY)    img=[im_hb.reshape(-1)/255]    name=[[0]*50]    saver = tf.train.Saver()    with tf.Session() as sess:        batch_xs,batch_ys=img,name        path = 'model/testyzm-cnn.model-' + str(399)        saver.restore(sess, path)        predict = tf.argmax(tf.reshape(y_conv, [-1, 5, 10]), 2)        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})        res=''.join(map(str,pre[0]))        print(res)    cv2.imshow("image",im)    cv2.waitKey(0)train=0if train==0:    trainFirst()else:    test()</pre><p>测试结果便是整个对于自身的拟合效果还算可以，能达到90%以上，而对于test时的外来数据的表现不是很好，只有30%左右。</p><p>第二个模型，首先对样本进行了分割，把每张图的5个数分开来。</p><pre>from PIL import Imageimport osd=os.listdir("dealyzm/")k=0for i in d:    file=Image.open("dealyzm/"+i)    for j in range(5):        crop=file.crop((9*j+5,4,9*j+14,18))        crop.save("crop/"+i[j]+str(k)+".png")    k+=1</pre><p>然后继续构建模型，只是调整了输入输出基本原理和上面一样</p><pre>import tensorflow as tfimport numpy as npimport osimport cv2import requestsfrom PIL import Imagefrom io import BytesIOdef weight_varible(shape):    initial = tf.truncated_normal(shape, stddev=0.1)    return tf.Variable(initial)def bias_variable(shape):    initial = tf.constant(0.1, shape=shape)    return tf.Variable(initial)def conv2d(x, W):    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')def max_pool_2x2(x):    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')# parasW_conv1 = weight_varible([5, 5, 1, 32])b_conv1 = bias_variable([32])# conv layer-1x = tf.placeholder(tf.float32, [None, 126])x_image = tf.reshape(x, [-1, 9, 14, 1])h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)h_pool1 = max_pool_2x2(h_conv1)# conv layer-2W_conv2 = weight_varible([5, 5, 32, 64])b_conv2 = bias_variable([64])h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)h_pool2 = max_pool_2x2(h_conv2)# full connectionshape = h_pool2.get_shape().as_list()dim = 1for d in shape[1:]:    dim *= dW_fc1 = weight_varible([dim, 1024])b_fc1 = bias_variable([1024])h_pool2_flat = tf.reshape(h_pool2, [-1, dim])h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)# dropoutkeep_prob = tf.placeholder(tf.float32)h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)# output layer: softmaxW_fc2 = weight_varible([1024, 10])b_fc2 = bias_variable([10])y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)y_ = tf.placeholder(tf.float32, [None, 10])# model trainingcross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)correct_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))sess=tf.InteractiveSession()tf.global_variables_initializer().run()dirname=os.listdir("crop/")dirname.remove("Thumbs.db")def getRanPic(num):    image=[]    name=[]    for i in range(num):        tmpname=[0]*10        filename=dirname[int(np.random.random()*len(dirname))]        im=cv2.imread("crop/"+filename,0)/255.0        im=im.reshape(-1)        tmpname[int(filename[0])]=1        image.append(im)        name.append(tmpname)    return image,namedef trainFirst():    saver = tf.train.Saver()    for _ in range(1000):        batch_xs,batch_ys=getRanPic(50)        train_step.run(feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})        if _%50==0:            batch_xs,batch_ys=getRanPic(50)            loss,acc=sess.run([cross_entropy,accuracy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})            print("loss:"+str(loss)+" acc_train:"+str(acc))    saver.save(sess, 'model/next-crop-yzm-cnn.model', global_step=_)def test(file):    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}    req = requests.get("http://jxgl.hdu.edu.cn/CheckCode.aspx",headers=headers)    im=Image.open(BytesIO(req.content))    img=[]    name=[]    for i in range(5):        crop=np.array(im.crop((9*i+5,4,9*i+14,18)))        ret,im_hb=cv2.threshold(crop,127,255,cv2.THRESH_BINARY)        img.append(im_hb.reshape(-1)/255)        name.append([0]*10)    saver = tf.train.Saver()    with tf.Session() as sess:        batch_xs,batch_ys=img,name        path = 'model/testcropyzm-cnn.model-' + str(999)        saver.restore(sess, path)        predict = tf.arg_max(y_conv, 1)        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})    im.save("croptest/"+"".join(map(str,pre))+".png")train=1if train==0:    trainFirst()else:    test()</pre><p>结果：第二次测试的正确率能达到99%以上，对于测试数据，也能有较高的正确率（测试了100个，没错）。</p><p>对比：</p><p>元数据一样是小样本，两种方法只做了输入输出的改变，但效果对比差别很明显。后者好很多。</p><p>猜测是多元连接的参数比分割后数字的参数多得多，所以训练所需的样本也会成倍增加，其中可能会有一定的关系。</p><p>猜测由于多个连接后反向传播的时候会对所有参数进行调整，所以很难训练起来。</p><p>对于小样本的模型训练还可以继续探究。可以尝试学习到一定特征然后用生成器创造大样本从而训练多个输出模型。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫初入门实战 [aim-&gt;拉勾网]</title>
      <link href="article/2017/article_36_python%E7%88%AC%E8%99%AB%E5%88%9D%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%20%5Baim-%3E%E6%8B%89%E5%8B%BE%E7%BD%91%5D/"/>
      <url>article/2017/article_36_python%E7%88%AC%E8%99%AB%E5%88%9D%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%20%5Baim-%3E%E6%8B%89%E5%8B%BE%E7%BD%91%5D/</url>
      
        <content type="html"><![CDATA[<p>作为pythoner爬虫还是必备技能之一，说上手就上手。</p><p>入门选了个拉勾网（莫名躺枪，下手轻点）。<a id="more"></a></p><p>这次具体来讲一下爬网页走过的流程。</p><p>先在chrome打开拉勾网主页，打开开发者工具network项，点每个资源就知道他的request和reponse。主页他是直接返回的内容，所以直接去爬主页，三行搞定。</p><pre>import requestsreq=requests.get("https://www.lagou.com/")print(req.text)</pre><p>然后继续看具体的内容页，这里以杭州为例，网址是https://www.lagou.com/jobs/list_?px=new&amp;city=%E6%9D%AD%E5%B7%9E#filterBox</p><p>以同样的方式爬内容页，会发现内容页只有外标签而没有内容。</p><p>看console便会发现有ajax的痕迹，仔细看network便会发现几个json文件，通过看他的request和reponse便会知道数据是在某个json的链接里拿到的。链接为https://www.lagou.com/jobs/positionAjax.json?px=new&amp;city=%E6%9D%AD%E5%B7%9E&amp;needAddtionalResult=false</p><p>直接爬这个链接，会发现返回错误信息，应该还有点防护措施。</p><p>所以我们把自己伪装的和浏览器更像。构造一个request头</p><pre>import requestsheader={    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\E6%\9D%\AD%\E5%\B7%\9E',    'Accept-Encoding': 'gzip, deflate, br',}req=requests.post("https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false",params={"city":"杭州"},headers=header)print(req.content)</pre><p>然后能爬取到一页的数据，在进一步直接爬30页，就会发现有每分钟的每个IP5次的次数限制。ip限制就用代理呗，只要在requests里面加一个proxies的参数即可，不过好的代理确实难找，<a href="http://www.gatherproxy.com/zh/" target="_blank" rel="external">这里的还算可以</a>。</p><p>代理要加进去的话，得先爬代理网站，然后才能时时获取最新的代理并处理。</p><pre>req=requests.post(url,proxies={"https":"000.000.000.000:00","http":"000.000.000.000:00"},headers=headers,params={'city':'杭州','pn':str(page)})</pre><p>因为上面那个代理网站要翻墙，这里用另一个代理网站做测试。爬到网页后用beautifulSoup4来处理html代码。</p><pre>#coding:utf-8import requestsfrom bs4 import BeautifulSoupdef getProxyList():    res=[]    header={        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',    }    response=requests.get("http://www.xicidaili.com/nn/",headers=header)    soup=BeautifulSoup(response.text,'html.parser')    li=soup.find_all('tr',{'class':'odd'})    for item in li:        res.append(item.contents[3].string+":"+item.contents[5].string)        itemNext=item.next_sibling.next_sibling        res.append(itemNext.contents[3].string+":"+itemNext.contents[5].string)    return res</pre><p>爬到拉勾网的内容后得处理丫。因为是json格式，直接用json处理，下面是处理的代码：</p><pre>import requestsimport jsonheader={    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\E6%\9D%\AD%\E5%\B7%\9E',    'Accept-Encoding': 'gzip, deflate, br',}req=requests.get("https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false",params={"city":"杭州"},headers=header)data=json.loads(req.text)for i in data['content']['positionResult']['result']:    print(i['positionName'],i['salary'],i['workYear'],i['jobNature'],i['companyFullName'],i['companySize'],i['district'],i['createTime'])</pre><p>总结：一般的套路也就是看chrome控制台，把request和reponse弄清楚，有时候还得看他的js代码，有时候html里也会隐藏一些信息，反正无所不用。</p><p>爬网页与反爬虫总是矛和盾，作为一个写网页又爬网页的，应该能更加清楚一些套路，而在写网页的时候阻挡一些简单的爬虫入侵。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>three.js第三弹，一个可玩的魔方</title>
      <link href="article/2017/article_35_three.js%E7%AC%AC%E4%B8%89%E5%BC%B9%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%8E%A9%E7%9A%84%E9%AD%94%E6%96%B9/"/>
      <url>article/2017/article_35_three.js%E7%AC%AC%E4%B8%89%E5%BC%B9%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%8E%A9%E7%9A%84%E9%AD%94%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p>魔方对于大多数人都不陌生，也是个立方体的玩意儿。</p><p>这里就简单用three.js实现一下，复杂的还是定位，毕竟是3d的还能乱转。</p><p><a href="http://test.ganjiacheng.cn/3d/test3d2.html" target="_blank" rel="external">点击这里先看效果哦！！</a><a id="more"></a></p><p>看代码前还是先来说明：基本框架还是一样----舞台，摄像头和渲染器。</p><p>之后用faceMaterial写一个6面颜色不一样的cube，并用27个这样的cube组成魔方的基本样子。</p><p>trackballControls是摄像头控制函数，加入可以用鼠标控制其中的摄像头。</p><p>监听鼠标按下事件，按下时获取点击的三维坐标，获取在最前端的cube的name。</p><p>通过坐标计算旋转方向（这里容易脑壳疼），通过name计算同一平面的其他cube。</p><p>通过方向与平面以矩阵旋转平面内9个cube，并把旋转做成动画。</p><p>听说好文章结尾都有彩蛋~</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;title&gt;test3d&lt;/title&gt;    &lt;style type="text/css"&gt;        body{            margin: 0;            overflow: hidden;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="webgl"&gt;&lt;/div&gt;    &lt;script type="text/javascript" src="http://test.ganjiacheng.cn/3d/learning-threejs/libs/three.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="http://test.ganjiacheng.cn/3d/learning-threejs/libs/TrackballControls.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        function init(){            var scene=new THREE.Scene();            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);            camera.position.set(-20,20,20);            camera.lookAt(scene.position);            var renderer=new THREE.WebGLRenderer();            renderer.setClearColor(0xdadada);            renderer.setSize(window.innerWidth,window.innerHeight);            renderer.shadowMapEnabled=true;            var axes=new THREE.AxisHelper(2);            scene.add(axes);            var group=new THREE.Mesh();            var mats=[];            mats.push(new THREE.MeshBasicMaterial({color:0x009e60}));//g            mats.push(new THREE.MeshBasicMaterial({color:0x0051ba}));//b            mats.push(new THREE.MeshBasicMaterial({color:0xffd500}));//y            mats.push(new THREE.MeshBasicMaterial({color:0xff5800}));//j            mats.push(new THREE.MeshBasicMaterial({color:0xC41E3A}));//r            mats.push(new THREE.MeshBasicMaterial({color:0xffffff}));//w            var faceMaterial=new THREE.MeshFaceMaterial(mats);            for(var x=0;x&lt;3;x++){                for(var y=0;y&lt;3;y++){                    for(var z=0;z&lt;3;z++){                        var cubeGeom=new THREE.BoxGeometry(2.9,2.9,2.9);                        var cube=new THREE.Mesh(cubeGeom,faceMaterial);                        cube.position.set(x*3-3,y*3-3,z*3-3);                        cube.name=z+3*y+9*x;                        group.add(cube);                    }                }            }            scene.add(group);            var trackballControls=new THREE.TrackballControls(camera);            trackballControls.rotateSpeed=1.0;            trackballControls.zoomSpeed=1.0;            trackballControls.panSpeed=1.0;            document.addEventListener('mousedown',onMouseDown,false);            var clock=new THREE.Clock();            document.getElementById("webgl").appendChild(renderer.domElement);            renderer.render(scene,camera);            var test=new THREE.MeshBasicMaterial({color:0x000000});            var startMove=-1;            var moveList=[];            var rotateDirection;            var DirectionLR=true;            var j=0;            function onMouseDown(event){                if(startMove!=-1){                    return;                }                var vector=new THREE.Vector3((event.clientX/window.innerWidth)*2-1,-(event.clientY/window.innerHeight)*2+1,0.5);                vector=vector.unproject(camera);                var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());                var intersects=raycaster.intersectObjects(group.children);                if(intersects.length&gt;0){                    j=0;                    moveList=[];                    startMove=intersects[0].object.name;                    var y=scene.children[1].children[startMove].position.y;                    getRotateDirection(intersects[0].point.x,intersects[0].point.y,intersects[0].point.z);                    if(rotateDirection==1){                        for(var i=0;i&lt;27;i++){                            if(xround(scene.children[1].children[i].position.y,2)==xround(y,2)){                                moveList.push(i);                            }                        }                    }else if(rotateDirection==2){                        for(var i=0;i&lt;27;i++){                            if(xround(scene.children[1].children[i].position.x,2)==xround(scene.children[1].children[startMove].position.x,2)){                                moveList.push(i);                            }                        }                    }else if(rotateDirection=3){                        for(var i=0;i&lt;27;i++){                            if(xround(scene.children[1].children[i].position.z,2)==xround(scene.children[1].children[startMove].position.z,2)){                                moveList.push(i);                            }                        }                    }                }            }            function reset(){                startMove=-1;            }            function rotationMF(moveList){                var rotationV=DirectionLR?Math.PI/100:-Math.PI/100;                if(rotateDirection==1){                    if(j&lt;50){                        for(var i in moveList){                            var rotation = new THREE.Matrix4().makeRotationY(rotationV);                            scene.children[1].children[moveList[i]].applyMatrix(rotation);                        }                        j++;                    }else{                        reset()                    }                }else if(rotateDirection==2){                    if(j&lt;50){                        for(var i in moveList){                            var rotation = new THREE.Matrix4().makeRotationX(rotationV);                            scene.children[1].children[moveList[i]].applyMatrix(rotation);                        }                        j++;                    }else{                        reset()                    }                }else if(rotateDirection==3){                    if(j&lt;50){                        for(var i in moveList){                            var rotation = new THREE.Matrix4().makeRotationZ(rotationV);                            scene.children[1].children[moveList[i]].applyMatrix(rotation);                        }                        j++;                    }else{                        reset()                    }                }            }                        function xround(x, num){                return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);            }            function getRotateDirection(x,y,z){                function dealxyz(axis){                    for(var i=0;i&lt;3;i++){                        if(xround(axis[i],2)==-4.45 || xround(axis[i],2)==4.45){                            var fl=xround(axis.splice(i,1),2)==-4.45;                            axis[0]=axis[0]&gt;1.5?axis[0]-3:axis[0];                            axis[0]=axis[0]&lt;-1.5?axis[0]+3:axis[0];                            axis[1]=axis[1]&gt;1.5?axis[1]-3:axis[1];                            axis[1]=axis[1]&lt;-1.5?axis[1]+3:axis[1];                            var judge;                            if(i==0 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){                                rotateDirection=1;                                judge=fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);                            }else if(i==0 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){                                rotateDirection=3;                                judge=!fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){                                rotateDirection=2;                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){                                rotateDirection=3;                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){                                rotateDirection=1;                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0);                                console.log(judge);                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){                                rotateDirection=2;                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0);                            }                            return judge;                        }                    }                }                DirectionLR=!dealxyz([x,y,z]);            }            function renderScene(){                var delta=clock.getDelta();                if(startMove!=-1){rotationMF(moveList);}                trackballControls.update(delta);                requestAnimationFrame(renderScene);                renderer.render(scene,camera);            }            renderScene();        }        window.onload=init;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>这里不预览啦，主要注明的一点就是看起来比写起来真是两码事，</p><p>一开始纠结在rotation的旋转会连带转自己的坐标轴。后来慢慢发现他转的是他的children子元素，并可以创造矩阵来旋转。</p><p>本来想的很好做一个沿y轴转四个面，然后推广到x,z，只要写一套就行。现实还是安心的做完了6个面以及每个面里9个小块的分析。</p><p>本来还想着怎么能写的系统一点，可以轻松调InOut，这样就可以做多元的魔方，说不定还能研究个魔方的随机打乱和复原，好吧继续想着吧。</p><p>还有点感悟就是three.js文档虽然齐全不过问的问题确实不多，有点难搜到相似问题。搜到的时候讲的都是欧拉角，旋转矩阵，四元数这种画风。。。</p><p>three.js完结篇，，</p><p> </p><p> </p><p> </p><p>才怪</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>three.js第二波，实现类似反应堆的游戏</title>
      <link href="article/2017/article_34_three.js%E7%AC%AC%E4%BA%8C%E6%B3%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E5%8F%8D%E5%BA%94%E5%A0%86%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
      <url>article/2017/article_34_three.js%E7%AC%AC%E4%BA%8C%E6%B3%A2%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E5%8F%8D%E5%BA%94%E5%A0%86%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>一开始还就迷茫呢碰撞检测比较难，后来发现了physi.js。</p><p>也是在看three.js看到的一个库，用了web worker实现各种复杂的计算。</p><p>先<a href="http://test.ganjiacheng.cn/3d/test3d6.html" target="_blank" rel="external">点击这里看效果</a>，手机电脑支持web worker(一般都支持)的都可以运行<a id="more"></a></p><p>初次加载看起来快，实际一个用于计算的ammo.js也有1.2M，只是他在后台加载。所以可能得等一会儿。</p><p>这个本应该有个onload的，不过目前还没有发现这个函数，之后有机会在探索。</p><p>思路便是：创造一个物理舞台，摄像头和渲染器和之前一样，加一个物理平面（带摩擦和弹性），加一个普通cube并来回运动，监听click事件，click时获取普通cube的位置并创造一个物理cube，物理cube便会往下掉，加一个计分。</p><p>下面是具体代码，js文件的话在下面的路径可以找到</p><p><a href="http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js" target="_blank" rel="external">http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js</a></p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;      &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;title&gt;test3d6&lt;/title&gt;    &lt;style type="text/css"&gt;        body{            margin: 0;            overflow: hidden;        }        #stats{            position: absolute;            left: 0;            top: 0;        }        #grade{            position: absolute;            left: 50%;            margin-left: -28px;            top: 0;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="stats"&gt;&lt;/div&gt;    &lt;div id="grade"&gt;0&lt;/div&gt;    &lt;div id="webgl"&gt;&lt;/div&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/three.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/stats.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="learning-threejs/libs/physi.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        var scene;        function init(){            var stats=initStats();            Physijs.scripts.worker='learning-threejs/libs/physijs_worker.js';            var scene=new Physijs.Scene();            scene.setGravity(new THREE.Vector3(0,-50,0));            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);            camera.position.set(-30,40,40);            camera.lookAt(scene.position);                        var renderer=new THREE.WebGLRenderer();            renderer.setClearColor(0xEEEEEE);            renderer.setSize(window.innerWidth,window.innerHeight);            renderer.shadowMapEnable=true;                        var ground_material=Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff}),0.9,0.3);            var planeGeometry=new Physijs.BoxMesh(new THREE.BoxGeometry(10,1,10),ground_material,0)                        scene.add(planeGeometry);                        function addPhyCube(x=0,y=0,z=0){                var cubeGeometry=new THREE.BoxGeometry(10,2,10);                var cube=new Physijs.BoxMesh(cubeGeometry,Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff*Math.random()}),1,0));                cube.position.set(x,y,z);                scene.add(cube);            }            function addNormalCube(x=0,y=8,z=0){                var cubeGeometry=new THREE.BoxGeometry(10,2,10);                var cubeMaterial=new THREE.MeshLambertMaterial({color:0xff0000});                var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);                cube.position.set(x,y,z);                scene.add(cube);            }                        var maxy=0;            var NorNum=2;            var time=0            function refreshGrade(){                if(time==0 &amp;&amp; stats.domElement.textContent[0]==6){                    document.getElementById("webgl").onmousedown=function(){                        addPhyCube(scene.children[NorNum].position.x,scene.children[NorNum].position.y,scene.children[NorNum].position.z);                        time=2;                    }                    time=1;                }else if(time==1){                    document.getElementById("grade").innerHTML="start";                }else if(time==2){                    var len=scene.children.length;                    var maxy=0;                    for(var i=NorNum+1;i&lt;len;i++){                        maxy=scene.children[i].position.y&gt;-2&amp;&amp;Math.abs(scene.children[i].position.z)&lt;15?maxy+1:maxy;                    }                                    camera.position.y=maxy*2+40;                    scene.children[NorNum].position.y=maxy*2+5;                    document.getElementById("grade").innerHTML="score:"+maxy;                }else{                    document.getElementById("grade").innerHTML="waiting......";                }            }               var spotLight=new THREE.SpotLight(0xffffff);            spotLight.position.set(-40,60,0);            scene.add(spotLight);            spotLight.castShadow=true;                        document.getElementById("webgl").appendChild(renderer.domElement);            addNormalCube(0,8,-20);            renderer.render(scene,camera);            var step=0;            function rendererScene(){                stats.update();                refreshGrade();                last=scene.children.length-1;                step+=0.05;                scene.children[NorNum].position.z+=Math.sin(step);                requestAnimationFrame(rendererScene);                renderer.render(scene,camera);                scene.simulate();            }            function initStats(){                var stats=new Stats();                stats.setMode(0);                document.getElementById("stats").appendChild(stats.domElement);                return stats;            }            rendererScene();        }        window.onload=init;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果展示：</p><img class="alignnone size-medium wp-image-355" src="/img/uploads/2017/07/IMG_3419-169x300.png" alt="" width="169" height="300">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初试web worker，感觉是神器</title>
      <link href="article/2017/article_33_%E5%88%9D%E8%AF%95web%20worker%EF%BC%8C%E6%84%9F%E8%A7%89%E6%98%AF%E7%A5%9E%E5%99%A8/"/>
      <url>article/2017/article_33_%E5%88%9D%E8%AF%95web%20worker%EF%BC%8C%E6%84%9F%E8%A7%89%E6%98%AF%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在做3d的时候偶然发现其中用了web worker，因为要做大量的运算，如果放在js的主单线程里就会让页面卡的不行。</p><p>不信可以运行下面的Fibonacci<a id="more"></a></p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;web worker&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;button id="btn"&gt;click me&lt;/button&gt;    &lt;script type="text/javascript"&gt;        btn.onclick=function(){            alert('you clicked');        }        function fb(n){            if(n==1||n==2){                return 1;            }else{                return fb(n-1)+fb(n-2);            }        }        alert(fb(45))    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>上面代码至少让浏览器卡上个10秒，也就是按钮事件没法触发。</p><p>然后就用得到web worker咯，他创造了类似于后台运行的“多线程”，在保证主线程正常运行的情况下在后台运行计算代码。</p><p>一些限制貌似是web worker有同源限制，也无法访问主线程的dom。</p><p>下面是web worker的代码，因为要同源，要放在服务器上运行，否则会报错。</p><p>主文件index.html</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;web worker&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;button id="btn"&gt;click me&lt;/button&gt;    &lt;script type="text/javascript"&gt;        var worker=new Worker("worker.js");        worker.postMessage(45);        worker.onmessage=function(e){            alert(e.data)        }        var btn=document.getElementById("btn");        btn.onclick=function(){            alert('you clicked');        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>然后是worker.js，在同目录下</p><pre>onmessage=function(e){    function fb(n){        if(n==1||n==2){            return 1;        }else{            return fb(n-1)+fb(n-2);        }    }    postMessage(fb(e.data));}</pre><p>通过服务器运行index.html就可以啦。</p><p>比对上面的情况，效果很明显。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初试three.js，一个小demo</title>
      <link href="article/2017/article_32_%E5%88%9D%E8%AF%95three.js%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/"/>
      <url>article/2017/article_32_%E5%88%9D%E8%AF%95three.js%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/</url>
      
        <content type="html"><![CDATA[<p>之前看过一点webgl编程指南，确实很难消化。所以过段时间再来朝花夕拾。</p><p>这次直接使用webgl的一个库three.js，能更方便的实现功能。</p><p>先可以<a href="https://ganjiacheng.cn/blogdemo/threejsdemo.html">点击这里看最终效果</a>。<a id="more"></a></p><p>基本的几步就是：定义舞台，定义透视摄像机，定义渲染器，定义灯光，画爱心，填充爱心，向舞台中心增加爱心，随机向外扩散。</p><p>下面是html代码</p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;test3d3&lt;/title&gt;    &lt;style type="text/css"&gt;        body{            margin: 0;            overflow: hidden;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="webgl"&gt;&lt;/div&gt;    &lt;script type="text/javascript" src="https://threejs.org/build/three.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        function init(){            var scene=new THREE.Scene();            scene.fog=new THREE.Fog(0xffffff,15,300);            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);            camera.position.set(100,100,100);            camera.lookAt(scene.position);                        var renderer=new THREE.WebGLRenderer();            renderer.setClearColor(0xEEEEEE);            renderer.setSize(window.innerWidth,window.innerHeight);            var spotLight=new THREE.DirectionalLight(0xffffff);            spotLight.position.set(200,40,200);            scene.add(spotLight);            function drawShape(){                var shape=new THREE.Shape();                shape.moveTo(0, 0);                shape.quadraticCurveTo(-3.8, 2, 4, 9);                shape.quadraticCurveTo(11, 2, 8, 0);                shape.quadraticCurveTo(5, -1.2, 4, 2);                shape.quadraticCurveTo(3, -1.2, 0, 0);                return shape;            }            function createMesh(goem){                var meshMaterial=new THREE.MeshPhongMaterial({color:0xffffff * Math.random()});                meshMaterial.side=THREE.DoubleSide;                var mesh=THREE.SceneUtils.createMultiMaterialObject(goem,[meshMaterial]);                mesh.position.set(0,0,0);                return mesh;            }                        var vx=[1],vy=[1],vpy=[1],vpx=[1], vpz=[1];            function addinitShape(){                vx.push(Math.random()*0.02);                vy.push(Math.random()*0.02);                vpy.push(-0.15+Math.random()*0.3);                vpx.push(-0.15+Math.random()*0.3);                vpz.push(-0.15+Math.random()*0.3);                var shape=createMesh(new THREE.ShapeGeometry(drawShape()));                shape.rotation.z=Math.PI;                shape.rotation.y=Math.random()*Math.PI;                scene.add(shape);            }            for(var i=0;i&lt;100;i++){                addinitShape();            }                        setInterval(function(){                if(scene.children.length&lt;1000){                    addinitShape();                }else{                    scene.children.splice(1,1);                    vx.shift();                    vy.shift();                    vpx.shift();                    vpy.shift();                    vpz.shift();                }            },80)                        document.getElementById("webgl").appendChild(renderer.domElement);                        function rendererScene(){                for(let i=1;i&lt;scene.children.length;i++){                    scene.children[i].rotation.y += vy[i];                    scene.children[i].rotation.x += vx[i];                    scene.children[i].position.y -= vpy[i];                    scene.children[i].position.x += vpx[i];                    scene.children[i].position.z += vpz[i];                }                requestAnimationFrame(rendererScene);                renderer.render(scene,camera);            }            rendererScene();        }        window.onload=init;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>这还是three.js最基础的一部分，之后会继续加特技啦！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yolo在windows训练自己的数据集</title>
      <link href="article/2017/article_31_yolo%E5%9C%A8windows%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>article/2017/article_31_yolo%E5%9C%A8windows%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>上次讲了配置yolo，可以<a href="https://ganjiacheng.cn/blog/?p=300">戳这里</a>看哦！</p><p>这次讲讲yolo用于训练自己的数据集。<a id="more"></a></p><p>首先还是数据准备，比如人脸检测，那就先准备很多包含人脸的图片。</p><p>然后需要数据标注，也就是标出人脸在图片内的位置。这里用一个叫labelImg的工具。具体下载和使用看这里<a href="https://github.com/tzutalin/labelImg" target="_blank" rel="external">https://github.com/tzutalin/labelImg</a>。</p><p>然后在图片文件夹里运行labelImg，会有个gui界面，之后就可以对每张图片进行标注，标注完后会有一大堆xml文件产生，之后运行一个python小脚本把xml转成所需的txt。</p><p>具体操作：把xml都放到一个xml文件夹里，然后在外面新建一个obj文件夹，运行下面python代码，xml会转成txt并存入obj文件夹。</p><pre>#python3.5import osimport shutilimport xml.etree.cElementTree as ETf=os.listdir("xml/")for i in f:    filename=i[0:8]    dirname="xml/"+i    tree=ET.parse(dirname)    root = tree.getroot()    shutil.copy(filename+".jpg","obj/"+filename+".jpg")    ft=open("obj/"+filename+".txt","w")    for obj in root.findall("object"):        data=obj.find("bndbox")        wh=root.find("size")        width=int(wh.find("width").text)        height=int(wh.find("height").text)        xmin=int(data.find("xmin").text)        ymin=int(data.find("ymin").text)        xmax=int(data.find("xmax").text)        ymax=int(data.find("ymax").text)        xmid=(xmin+xmax)/2        ymid=(ymin+ymax)/2        ft.write("0 "+str(xmid/width)+" "+str(ymid/height)+" "+str((xmax-xmin)/width)+" "+str((ymax-ymin)/height)+"\n")</pre><p>然后把原图片也放在obj文件里，并把obj文件夹放到<a href="https://ganjiacheng.cn/blog/?p=300">上次项目</a>的darknetx64/data文件下。</p><p>然后在data下新建obj.names和obj.data。</p><p>obj.names写类别名，obj.data如下</p><pre>classes= 类别数目train  = data/train.txtvalid  = data/test.txtnames = data/obj.namesbackup = backup/</pre><p>然后再在data下新建train.txt和test.txt。</p><p>运行下面的代码就能把所有训练图名放到train.txt，然后也可以分一部分到test.txt。</p><pre>#python3.5import osf=os.listdir("obj/")file=open("train.txt","w")for i in f:    if i[-3:]=='jpg':        file.write("data/obj/"+i+"\n")</pre><p>然后在x64下创建yolo-obj.cfg，内容其他同yolo-voc.2.0.cfg</p><p>要改最后一个filter(224行左右)=(类别数+ 5)*5</p><p>电脑训练不起来的话也可以把第三行的subdivisions按倍数改小(默认为64，可以改32,16)</p><p>之后就可以开始训练模型咯，运行下面的代码可以开始训练</p><pre>darknet.exe detector train data/obj.data yolo-obj.cfg</pre><p>训练的时候可以看avg,一般是越低越好，趋于不变时就可以停止训练了。</p><p>每一百次会保存一次模型文件在backup文件夹里。</p><p>训练完后可以运行下面代码（xxx改为具体训练次数）来对新的图片进行检测。</p><pre>darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_xxx.weights</pre><p>这里在讲一个批量处理图片的方法。</p><p>vs里打开项目，detector.c文件，改test_detector函数，删掉输入while1和后面的input，直接改成for循环，图片名都用拼接的方法得到，比如1.jpg之类。</p><p>然后往函数里的draw_detections最后加个参数，把图片名传过去。</p><p>改image.c中draw_detections函数的参数，在用crop_image截取检测部分，用save_image保存检测出来的图像。同时去掉draw_box_width。</p><p>然后用ctrl+f搜索draw_detections，把所有用到这个函数的参数都改一下。</p><p>运行便可以批量处理图片并截取出所需部分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yolo v2在windows的配置</title>
      <link href="article/2017/article_26_yolo%20v2%E5%9C%A8windows%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>article/2017/article_26_yolo%20v2%E5%9C%A8windows%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这里讲讲yolo在windows的配置，实际操作可行，这里使用时电脑为win8.1。</p><p>开始前可以到nvidia官网先看看显卡是否支持gpu哦！<a id="more"></a></p><p>首先下载vs2015，cuda，cudnn并配置好，这里不多叙述，标准就是：能在vs创建一个cuda项目并运行他的默认导入的代码并得到结果。在下载个opencv2.4.9，这里2.49是项目需求，改其他版本的话得改代码。</p><p>之后使用了git下载github上某个大神改好后的代码</p><pre>git clone https://github.com/AlexeyAB/darknet.git</pre><p>在vs里打开项目，打开build下的darknet.sln</p><p>然后在右边项目上右键-&gt;属性，</p><p>在 vc++目录 中编辑包含目录，把opencv里的include文件夹路径添加到里面。</p><p>在 c/c++   常规    附加包含目录 中把opencv的include路径加进去，如果没有cudaToolkitIncludeDir则把cuda和cudnn的include路径加进去。</p><p>在c/c++   预处理器   预处理器定义中加上OPENCV和GPU。有报错的话也可以加上_CRT_SECURE_NO_DEPRECATE，_SCL_SECURE_NO_DEPRECATE这两个。</p><p>在链接器   常规   添加库目录中加入opencv的lib路径，如果没有cuda_Path的话加上cuda，cudnn的lib路径。</p><p>在链接器   输入   附加依赖项中加入pthreadVC2.lib（自行下载），cublas.lib，curand.lib，cudart.lib和opencv里的所有lib。</p><p>然后就可以尝试运行啦。少库的话把库的路径加进去就行。</p><p>之后就可以下载一个<a href="https://pjreddie.com/media/files/yolo.weights" target="_blank" rel="external">yolo.weights</a>，放在x64文件夹下。</p><p>在x64文件夹下运行</p><pre>darknet.exe detector test data/coco.data yolo.cfg yolo.weights -i 0 -thresh 0.2</pre><p>输入图片文件路径</p><p>配置好opencv的话就会直接展示，否则会保存成prediction.png文件。</p><p>或者运行下面的代码就会调用摄像头并时时检测。</p><pre>darknet.exe detector demo data/coco.data yolo.cfg yolo.weights</pre><p>看data/coco.name就可以知道该模型可识别的80类。</p><p>cpu上的平均8秒一张图左右，</p><p>我的920m gpu可以达到5fps，也还达不到视频标准。</p><p>下次再具体讲讲训练自己的数据。</p><p>参考地址：<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="external">https://github.com/AlexeyAB/darknet</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用ReactNative做一个简单新闻app</title>
      <link href="article/2017/article_30_%E7%94%A8ReactNative%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%96%B0%E9%97%BBapp/"/>
      <url>article/2017/article_30_%E7%94%A8ReactNative%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%96%B0%E9%97%BBapp/</url>
      
        <content type="html"><![CDATA[<p>这里先从最近看ReactNative文档发现的expo说起，因为使用expo可以直接在ios或者安卓展示ReactNative的效果，门槛突然降低了许多，因此，突发奇想试试做native app。</p><p>首先可以按照ReactNative的<a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">GetStart</a>配置完环境并完成一个hello world！<a id="more"></a></p><p>总体如果有node和npm的话就以下两步：</p><pre>npm install <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>native<span class="token operator">-</span>app</pre><pre>create<span class="token operator">-</span>react<span class="token operator">-</span>native<span class="token operator">-</span>app AwesomeProject cd AwesomeProject npm start</pre><p>然后等出现一个二维码，用手机上的expo App扫码就行，ios和安卓都行哦！</p><p>再来上新闻代码，写在文件的app.js里，这里在IOS上做尝试。</p><p>先引入之后会用到一些的组件</p><pre>import React, { Component, PropTypes } from 'react';import { AppRegistry,RefreshControl,TouchableWithoutFeedback, WebView,ActivityIndicator ,ListView, Text, Image, View, StyleSheet, TextInput, Button, Alert, ScrollView, NavigatorIOS, TouchableHighlight, FlatList } from 'react-native';</pre><p>第一个主组件，写了一个ios的导航条，内容在main组件里</p><pre> export default class Test extends Component {    constructor(props){      super(props);    }    render() {        return (            &lt;NavigatorIOS initialRoute={ {                component: main,                title: "头条",            } } style={ {                flex: 1            } }            ref="navWorkspace"            /&gt;        )    }}</pre><p>main组件，主要用到了fetch来拉取新闻，在放入ListView组件内，</p><p>其中又加了RefreshControl组件来下拉刷新，ListView的onEndReached来控制上拉加载更多。这里有个疑问，用FlatList不能实现上拉加载更多？</p><pre>class main extends Component {    constructor(props) {        super(props);        this.state = {            onEndStart: true,            totalList:[],            dataSource: null,            page:2,            refreshing:false,        };    }    fetchData(){      return fetch("http://api.dagoogle.cn/news/get-news?page=1").then((response)=&gt;response.json())    }    _onRefresh(){      this.setState({        refreshing:true      })      this.fetchData().then((responseJson)=&gt;{        var tmp=parseInt(responseJson.data[0].news_id)-parseInt(this.state.totalList[0].news_id)        if(tmp!=0){          for(let i=tmp-1;i&gt;=0;i--){              this.state.totalList.unshift(responseJson.data[i])            }          }          let ds = new ListView.DataSource({                    rowHasChanged: (r1, r2) =&gt; r1 !== r2                });        this.setState({          refreshing:false,          dataSource:ds.cloneWithRows(this.state.totalList)        })      })    }    getnews(page){      return fetch("http://api.dagoogle.cn/news/get-news?page="+page)            .then((response) =&gt; response.json())            .then((responseJson) =&gt; {                let ds = new ListView.DataSource({                    rowHasChanged: (r1, r2) =&gt; r1 !== r2                });                for(let i in responseJson.data){                  this.state.totalList.push(responseJson.data[i])                }                this.setState({                    dataSource: ds.cloneWithRows(this.state.totalList),                    onEndStart: false                })            })    }    componentDidMount() {        return fetch("http://api.dagoogle.cn/news/get-news?page=1")            .then((response) =&gt; response.json())            .then((responseJson) =&gt; {                let ds = new ListView.DataSource({                    rowHasChanged: (r1, r2) =&gt; r1 !== r2                });                this.setState({                    totalList: responseJson.data,                    dataSource: ds.cloneWithRows(responseJson.data),                    onEndStart: false                })            })    }    toend(){      if(!this.state.onEndStart){        this.getnews(this.state.page);        this.setState({          page:this.state.page+1        })      }    }    goTo(key){      this.props.navigator.push({          component: Detail,          title: '详情',          rightButtonTitle: '收藏',          passProps: { title: this.state.totalList[key].title,content:this.state.totalList[key].content,source:this.state.totalList[key].source},          onRightButtonPress: function() {alert(1)}      });    }    render() {        if (this.state.onEndStart) {            return (                &lt;ActivityIndicator style={ {flex:1,alignItems:'center',height:80} } animating={true}/&gt;            )        }        return (            &lt;ListView            refreshControl={              &lt;RefreshControl                refreshing={this.state.refreshing}                onRefresh={this._onRefresh.bind(this)}              /&gt;            }            style={ {marginTop:65} }            dataSource={this.state.dataSource}            renderRow={(item,sectionId,rowId) =&gt;               &lt;TouchableWithoutFeedback onPress={this.goTo.bind(this,rowId)}&gt;              &lt;View style={styles.list_item}&gt;                &lt;Text style={styles.list_item_font}&gt;                    {item.title}                &lt;/Text&gt;                &lt;Image source={ {                    uri: item.top_image                } } style={styles.image}/&gt;              &lt;/View&gt;              &lt;/TouchableWithoutFeedback&gt;            }            onEndReachedThreshold={150}            onEndReached={this.toend.bind(this)}            /&gt;        )    }}</pre><p>之后点击新闻跳转到详情页。下面是详情页的组件</p><pre>class Detail extends Component{  constructor(props){    super(props)  }  render(){    var html="&lt;h3 style='margin-bottom:0'&gt;"+this.props.title+"&lt;/h3&gt;"+"&lt;div style='color:gray;margin-bottom:-15;'&gt;"+this.props.source+"&lt;/div&gt;"+this.props.content;    return(        &lt;View style={ {flex:1} }&gt;          &lt;WebView source={ {html:html} }/&gt;        &lt;/View&gt;      )  }}</pre><p>样式的话写在最后StyleSheet组件中，在上面的组件内可以直接用style={<a href="http://styles.xxx" target="_blank" rel="external">styles.xxx</a>}调用样式。</p><pre>const styles = StyleSheet.create({    flex: {        flex: 1,    },    list_item1: {        marginLeft: 10,        marginRight: 10,        borderBottomWidth: 1,        borderBottomColor: '#ddd',        flex: 1,        flexDirection: 'row',        alignItems: 'center',    },    list_item: {        height:80,        marginLeft: 10,        marginRight: 10,        borderBottomWidth: 1,        borderBottomColor: '#ddd',        flex: 1,        flexDirection: 'row',        alignItems: 'center',    },    list_item_font: {        marginRight: 1,        flex: 3,        fontSize: 16,    },    image: {        flex: 1,        width: 60,        height: 60,    }});</pre><p>然后就可以</p><pre>npm start</pre><p>在手机expo里看到效果咯。</p><p>效果展示：</p><p><a href="/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png"><img class="alignnone wp-image-329 size-medium" src="/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png" alt="" width="169" height="300"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php实现RSA加密</title>
      <link href="article/2017/article_27_php%E5%AE%9E%E7%8E%B0RSA%E5%8A%A0%E5%AF%86/"/>
      <url>article/2017/article_27_php%E5%AE%9E%E7%8E%B0RSA%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>RSA加密具体细节这里就不说了可以自行搜索。这里做php实现的例子。</p><p>思路：在服务器端php先产生一个公钥给js用于加密，同时产生一个私钥用于解密并保存在session中，js获取用户输入并用公钥加密，然后将加密的字符串提交到后端，后端php用私钥解密后得到实际用户输入。<a id="more"></a></p><p>这里主要安全的一点就是信息传输过程中始终是加密后的字符串，即使被抓包也无法得到实际用户输入。</p><p>首先下载用于rsa加密的一些文件，<a href="http://pan.baidu.com/s/1o84ZXDw" target="_blank" rel="external">点击这里下载</a>。</p><p>将这个文件夹与下面的php文件放在服务器中的同目录。</p><p>下面编写文件file1.php</p><pre>&lt;?php//产生公钥与私钥@session_start();set_include_path('rsa/classes/phpseclib/');include_once('Crypt/RSA.php');$rsa = new Crypt_RSA();$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_RAW);$key = $rsa-&gt;createKey(1024);$privatekey = $key['privatekey'];$_SESSION['privatekey'] = $privatekey;$publickey = $key['publickey']['n']-&gt;toHex();?&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type="text" placeholder="要加密字符串" id="str"&gt;    &lt;button id="sub"&gt;submit&lt;/button&gt;    &lt;div id="encrypted"&gt;&lt;/div&gt;    &lt;div id="decrypted"&gt;&lt;/div&gt;    &lt;script src="//cdn.bootcss.com/jquery/3.1.0/jquery.min.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="rsa/jsbn/jsbn.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="rsa/jsbn/prng4.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="rsa/jsbn/rng.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="rsa/jsbn/rsa.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;    //js获得公钥进行加密    var publickey = "&lt;?=$publickey?&gt;";    var rsakey = new RSAKey();    rsakey.setPublic(publickey, "10001");    $("#sub").click(function(){        var enc = rsakey.encrypt($("#str").val());        $('#encrypted').html("加密后\n"+enc);        $.post('file2.php', {enc: enc}, function(data) {            $('#decrypted').html("解密后\n"+data);        });    });    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>下面是file2.php</p><pre>&lt;?php//获取私钥与加密后字符串进行解密@session_start();set_include_path('rsa/classes/phpseclib/');include_once('Crypt/RSA.php');$encrypted = $_POST['enc'];$rsa = new Crypt_RSA();$encrypted=pack('H*', $encrypted);$rsa-&gt;loadKey($_SESSION['privatekey']);$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);$decrypted = $rsa-&gt;decrypt($encrypted);echo $decrypted;</pre><p>效果展示：</p><img class="alignnone size-medium wp-image-323" src="/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg" alt="" width="300" height="93"><p>完成rsa加密咯，目前还算比较安全的一种加密，可以在一些比较重要的信息传递中使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用python的jieba,wordcloud做唐诗分析</title>
      <link href="article/2017/article_29_%E4%BD%BF%E7%94%A8python%E7%9A%84jieba,wordcloud%E5%81%9A%E5%94%90%E8%AF%97%E5%88%86%E6%9E%90/"/>
      <url>article/2017/article_29_%E4%BD%BF%E7%94%A8python%E7%9A%84jieba,wordcloud%E5%81%9A%E5%94%90%E8%AF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>首先安装好python3.x以及jieba,wordcloud库,这是前提。</p><p>然后搜罗了一份唐诗的txt文档，<a href="/img/uploads/2017/07/poetry.txt">具体看这里</a>。</p><p>思路：先用<a href="https://github.com/fxsjy/jieba" target="_blank" rel="external">jieba</a>把每首诗标题去掉，提取出正文。再jiaba.cut做分词，分完的词保存下来，再用worcloud作词云，具体可以看<a href="http://amueller.github.io/word_cloud/index.html" target="_blank" rel="external">wordcloud文档</a>。<a id="more"></a></p><p>具体代码：</p><pre>#coding:utf-8#python3.5#引入库文件from wordcloud import WordCloudimport jiebass=""f=open('poetry.txt',encoding='utf-8')#读取每首诗并去掉标题#进行分词并存储for i in f.readlines():    l=i[i.find(':')+1:-1]    s=jieba.cut(l,cut_all=False)    for j in s:        if j==':' or j=='，' or j=='。':            continue        else:            ss+=j+" "#引入中文字体文件font="C:/Windows/Fonts/simfang.ttf"#构建词云并保存#如需展示的话可以用matplotlib，具体可以看wordcloud文档word=WordCloud(width=4000,height=2000,font_path=font,max_words=2000,max_font_size=500).generate(ss)word.to_file('filename.png')</pre><p>效果展示：</p><p><a href="/img/uploads/2017/07/xxn.png"><img class="alignnone wp-image-319 size-large" src="/img/uploads/2017/07/xxn-1024x512.png" alt="" width="525" height="263"></a></p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>几个loading动画---可更新</title>
      <link href="article/2017/article_24_%E5%87%A0%E4%B8%AAloading%E5%8A%A8%E7%94%BB---%E5%8F%AF%E6%9B%B4%E6%96%B0/"/>
      <url>article/2017/article_24_%E5%87%A0%E4%B8%AAloading%E5%8A%A8%E7%94%BB---%E5%8F%AF%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>因为网络等因素，有时候浏览器加载页面时间会很长，一直让用户看着白屏幕也不好。</p><p>所以需要有loading动画来挽留用户。<a id="more"></a></p><p>这个动画可以用css实现，也可以用js实现。</p><p>这里先举两个简单的css的例子：</p><p><a href="https://ganjiacheng.cn/blogdemo/loading.html">点击这里看演示</a></p><p><a href="https://ganjiacheng.cn/blogdemo/loading1.html">另一个演示</a></p><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;loading&lt;/title&gt;    &lt;style type="text/css"&gt;        .loading{            position:relative;        }        .loading span{            position: absolute;            bottom:-40px;            width: 10px;            height: 5px;            background-color: #000;            -webkit-animation:loading 1s;            -webkit-animation-iteration-count:infinite;            animation-timing-function: linear;        }        .loading span:nth-child(2){            left: 30px;            animation-delay: .2s;        }        .loading span:nth-child(3){            left: 60px;            animation-delay: .4s;        }        .loading span:nth-child(4){            left: 90px;            animation-delay: .6s;        }        .loading span:nth-child(5){            left: 120px;            animation-delay: .8s;        }        @-webkit-keyframes loading        {            0%   {height: 5px;transform:translateY(0px);}            50%  {height: 30px;transform:translateY(15px);}            100% {height: 5px;transform:translateY(0px);}        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="loading"&gt;        &lt;span&gt;&lt;/span&gt;        &lt;span&gt;&lt;/span&gt;        &lt;span&gt;&lt;/span&gt;        &lt;span&gt;&lt;/span&gt;        &lt;span&gt;&lt;/span&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</pre><pre>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style type="text/css"&gt;        .loading,.loadingjs{            font-size: 50px;        }        .loading span{            position: absolute;        }        .loading span{            left:-10%;            width:100px;            animation:mymove 5s infinite;            animation-timing-function: cubic-bezier(0.38, 0.99, 0.45, 0.13);        }        .loading span:nth-child(2){            animation-delay:0.3s;        }        .loading span:nth-child(3){            animation-delay:0.6s;        }        .loading span:nth-child(4){            animation-delay:0.9s;        }        .loading span:nth-child(5){            animation-delay:1.2s;        }        @keyframes mymove{            from {left:-10%;}            to {left: 90%;}        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="loading" id="loading"&gt;        &lt;span&gt;.&lt;/span&gt;        &lt;span&gt;.&lt;/span&gt;        &lt;span&gt;.&lt;/span&gt;        &lt;span&gt;.&lt;/span&gt;        &lt;span&gt;.&lt;/span&gt;    &lt;/div&gt;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用dlib实现人脸检测和笑脸识别</title>
      <link href="article/2017/article_25_%E4%BD%BF%E7%94%A8dlib%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E5%92%8C%E7%AC%91%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>article/2017/article_25_%E4%BD%BF%E7%94%A8dlib%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E5%92%8C%E7%AC%91%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>人脸检测技术，在深度学习之前，特征+分类器一直是最好的选择，dlib便是用hog特征+级联分类器实现了认脸的检测，它本身是用c++写的，但也有python接口。要看具体的文档可以到<a href="http://dlib.net/" target="_blank" rel="external">dlib官网</a>，这里只实现一个简单的应用。<a id="more"></a>这是一个认脸定位+是不是笑脸的分类的应用。使用dlib定位，使用sklearn的svm来完成分类，笑脸与不笑脸是预先训练的，数据得自行准备。准备笑脸的图放在smile文件夹下，不笑的图放在no smile文件夹下。</p><pre>#python3.5#windows#author:gjcimport cv2import dlibimport numpy as npfrom sklearn import svmimport osfrom PIL import Image#获取默认摄像头cap = cv2.VideoCapture(0)#dlib加载68个点模型detector=dlib.get_frontal_face_detector()predictor_path = "shape_predictor_68_face_landmarks.dat"predictor = dlib.shape_predictor(predictor_path)data=[]label=[]#读取认脸已分类好的数据def read(dir,l):    f=os.listdir(dir)    L=len(f)-1    for i in range(L):        imgdir=dir+str(f[i])        im=Image.open(imgdir)        #draw = ImageDraw.Draw(im)        dets=detector(np.array(im),0)        if len(dets)==0:            continue        facepoint = np.array([[p.x, p.y] for p in predictor(np.array(im), dets[0]).parts()])        arr=np.zeros((20,2))        for j in range(48,68):            #draw.arc((facepoint[j][0]-5, facepoint[j][1]-5, facepoint[j][0]+5, facepoint[j][1]+5), 0, 360, fill=(55,255,155))              arr[j-48][0]=facepoint[j][0]-facepoint[27][0]            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]        arr=(arr-arr.min())/(arr.max()-arr.min())        data.append(arr.flatten())        label.append(l)read("smile/",1)read("nosmile/",0)#用svm进行分类clf = svm.SVC()clf.fit(np.array(data), label)while(1):    #读取摄像头图片    ret, frame = cap.read()    #定位    dets=detector(frame,0)    #画人脸的框    for i,d in enumerate(dets):        cv2.rectangle(frame, (int(d.left()), int(d.top())), (int(d.right()), int(d.bottom())), (0,255,0),2,0)    for i,d in enumerate(dets):        facepoint = np.array([[p.x, p.y] for p in predictor(frame, dets[i]).parts()])        #画68个点        for j in range(68):            #if facepoint[j][1]&lt;640 and facepoint[j][0]&lt;480:            #frame[facepoint[j][1]][facepoint[j][0]] = [0,0,0]            #cv2.line(frame,(facepoint[j][0],facepoint[j][1]),(facepoint[j+1][0],facepoint[j+1][1]),(155,155,155),2)            cv2.circle(frame,(facepoint[j][0],facepoint[j][1]),2,(55,255,155),2)        arr=np.zeros((20,2))        #读取特征点，归一化        for j in range(48,68):            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]        arr=(arr-arr.min())/(arr.max()-arr.min())        #svm分类判断是否笑脸        if clf.decision_function(arr.flatten().reshape(1,-1))&gt;0:            cv2.putText(frame, 'smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)          else:            cv2.putText(frame, 'No smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)      #展示处理后的图片    cv2.imshow("capture", frame)    if cv2.waitKey(1) &amp; 0xFF == ord('q'):        breakcap.release()cv2.destroyAllWindows()</pre><p>效果如下：</p><p><img class="alignnone size-medium wp-image-294" src="/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg" alt="" width="300" height="237"> <img class="alignnone size-medium wp-image-295" src="/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg" alt="" width="300" height="237"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>svm分类器---sklearn</title>
      <link href="article/2017/article_23_svm%E5%88%86%E7%B1%BB%E5%99%A8---sklearn/"/>
      <url>article/2017/article_23_svm%E5%88%86%E7%B1%BB%E5%99%A8---sklearn/</url>
      
        <content type="html"><![CDATA[<p>刚开始理解svm（支持向量机）还是挺复杂的，现在稍微有了一点思路，便写下来。由于代码实现中对于svm基本是黑盒，所以这里直接讲一下，再用代码实现。<a id="more"></a></p><p>在线性的情况下，svm就直接找一个超平面（下面就是那条线）来分割不同的两类。比如这个二分类，在超平面上的点距离这条线为0，定一侧距离这条线为正，一侧距离这条线为负，那么只要找到两类点和超平面最大的距离和就行。</p><p><a href="/img/uploads/2017/05/figure_1-2.png"><img class="alignnone wp-image-276 size-medium" src="/img/uploads/2017/05/figure_1-2-300x225.png" alt="" width="300" height="225"></a></p><pre>#python2.7#coding:utf-8#引入所需库import numpy as npimport matplotlib.pyplot as pltfrom sklearn import svm#点集和类别f=open("testSet.txt")data=[]label=[]#取点for i in f.readlines():    linearr=i.strip().split()    data.append([float(linearr[0]),float(linearr[1])])    label.append(int(linearr[2]))data=np.array(data)#建立线性模型clf = svm.SVC(kernel='linear')#训练clf.fit(data, label)#取到训练完的权值w = clf.coef_[0]a = -w[0] / w[1]#设定x坐标xx = np.linspace(-5, 5)#根据权值求得yyy = a * xx - (clf.intercept_[0]) / w[1]#画直线plt.plot(xx, yy, 'k-')#画点集plt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)plt.show()</pre><p>对于非线性的情况，个人简单的理解：如果在一维没法分类解决的问题，就放到二维去解决，同理，二维可以用三维解决。</p><p>例：下图中，圈是一类，叉是另一类。在一维点集里，没法用一个点来分别两个类别。所以升维到二维后，就发现很简单的用一条曲线就做好了分类。而找这条曲线或曲面首先就需要一个核函数。</p><p><a href="/img/uploads/2017/05/IMG_3199-e1493609643520.jpg"><img class="alignnone wp-image-274 size-medium" src="/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg" alt="" width="300" height="259"></a></p><pre>#python2.7#coding:utf-8#引入所需库import numpy as npimport matplotlib.pyplot as pltfrom sklearn import svm#这个文件创建方式<a href="https://ganjiacheng.cn/blog/?p=265">点击这里</a>f=open("testSet2.txt")data=[]label=[]#定义250000个点的二维点集xx,yy=np.meshgrid(np.linspace(-3, 3, 500),np.linspace(-3, 3, 500))#读取点for i in f.readlines():    linearr=i.strip().split()    data.append([float(linearr[0]),float(linearr[1])])    label.append(int(linearr[2]))data=np.array(data)#建立模型，核函数默认clf = svm.SVC()#训练数据clf.fit(data, label)#根据250000个点得到距离超平面距离Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])#结果转为二维Z = Z.reshape(xx.shape)#画出平面上距离超平面为0的轮廓contours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,linetypes='--')#画点集plt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)plt.show()</pre><p>结果展示：<img class="alignnone size-medium wp-image-278" src="/img/uploads/2017/05/figure_1-2-1-300x225.png" alt="" width="300" height="225"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单变量非线性拟合和逻辑回归</title>
      <link href="article/2017/article_22_%E5%8D%95%E5%8F%98%E9%87%8F%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%8B%9F%E5%90%88%E5%92%8C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
      <url>article/2017/article_22_%E5%8D%95%E5%8F%98%E9%87%8F%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%8B%9F%E5%90%88%E5%92%8C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p style="text-align: left;">之前讲过最简单的<a href="https://ganjiacheng.cn/blog/?p=43">线性拟合</a>和<a href="https://ganjiacheng.cn/blog/?p=152">逻辑回归</a>，但常常的情况并不是一条直线就能解决问题的,所以来研究一下非线性的。<a id="more"></a></p><p style="text-align: left;">总体方法还是和之前差不多的，只是改变了初始的变量的指数。首先列出式子，求cost function（代价函数，一般理解就是拟合的线与实际的点差多少距离经过处理的总和）。在根据梯度下降最小化cost function，就可以求得接近点的一组系数解，也就是下面的θ，之后就得到直线了。</p><p style="text-align: left;"><a href="/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg"><img class="alignnone wp-image-266 size-medium" src="/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg" alt="" width="225" height="300"></a></p><p style="text-align: left;">先来看非线性拟合，这里还是用for而不是矩阵来实现中间一些计算。</p><pre style="text-align: left;">#python2.7#coding:utf-8#引入相关库import numpy as npimport matplotlib.pyplot as plt#模拟产生点坐标k=int(np.random.random()*5+1)x=np.arange(-2,2,0.1)y=0for i in range(k):    y+=np.random.random()*(x**k)y+=np.random.random(len(x))#N--幂指数也就是最高x^6#这里可以改进，如果N再高计算中会出现nanN=6#这个矩阵为上面的θA=np.array([1]*N)#点的数量l=len(x)#梯度下降步长alpha=0.01#进行一千次迭代for _ in xrange(1000):    #z为cost function叠加的那部分和的矩阵    z=np.zeros(N)    #遍历每个点，计算代价和    for i in xrange(l):        sh=0        for j in xrange(N):            sh+=A[j]*x[i]**j        for m in xrange(N):            z[m]+=(sh-y[i])*x[i]**m    #直接用矩阵计算更新所有θ    A=A-alpha*z/l #下面为画图部分plt.plot(x,y,"ro")tmpx=np.linspace(-2,2)def cal(x):    tmpy=0    for i in xrange(N):        tmpy+=A[i]*x**i    return tmpytmpy=[cal(tmpx[i]) for i in range(len(tmpx))]plt.plot(tmpx,tmpy)plt.show()</pre><p style="text-align: left;">效果展示：<a href="/img/uploads/2017/04/figure_1-3-1.png"><img class="alignnone wp-image-268 size-medium" src="/img/uploads/2017/04/figure_1-3-1-300x225.png" alt="" width="300" height="225"></a></p><p style="text-align: left;">再来看非线性logistic回归。</p><p style="text-align: left;"><img class="alignnone size-medium wp-image-269" src="/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg" alt="" width="225" height="300"></p><p style="text-align: left;">这里和上面主要改变的就是多了一步sigmoid函数，还有在求cost function的时候多了一步求ln，我发现比较可靠的一种理解是为了让函数为凸函数，梯度下降可以保证取到全局最低点。再求偏导得到更新θ的式子，基本是一样的。</p><pre style="text-align: left;">#python2.7#coding:utf-8#产生点并写入文件import numpy as npf=open("testSet2.txt","w")for i in xrange(500):    a=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5    b=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5    if a**2+b**2&lt;5:        print &gt;&gt; f,str(a)+"    "+str(b)+"   0"    else:        print &gt;&gt; f,str(a)+"    "+str(b)+"   1"</pre><pre style="text-align: left;">#python2.7#coding:utf-8#引入相关库import matplotlib.pyplot as pltimport numpy as np#读取文件中的点坐标及分类f=open("testSet2.txt")#两类点坐标gdatax=[]gdatay=[]rdatax=[]rdatay=[]#类别label=[]#点坐标data=[]#代表有5个θN=5#θ的矩阵A=np.array([1]*N)#步长，这里设的比较大因为小了到不了最低点alpha=0.1#不同类的点画不同颜色的点for i in f.readlines():    linearr=i.strip().split()    data.append([float(linearr[0]),float(linearr[1])])    label.append(int(linearr[2]))    if int(linearr[2])==1:        gdatax.append(linearr[0])        gdatay.append(linearr[1])    else:        rdatax.append(linearr[0])        rdatay.append(linearr[1])l=len(label)#迭代2000次，过程和上面一样for _ in xrange(2000):    z=np.zeros(N)    for i in xrange(l):        sh=1/(1+np.exp(-A[0]-data[i][0]*A[1]-data[i][1]*A[2]-A[3]*data[i][0]**2-A[4]*data[i][1]**2))        z[0]+=sh-label[i]        z[1]+=(sh-label[i])*data[i][0]        z[2]+=(sh-label[i])*data[i][1]        z[3]+=(sh-label[i])*data[i][0]**2        z[4]+=(sh-label[i])*data[i][1]**2    A=A-alpha*z/l#下面为画图过程tmpx=[i/10.0 for i in xrange(-30,30)]tmpy=[]tmpz=[]for i in tmpx:    su=A[2]**2-4*A[4]*(A[0]+A[1]*i+A[3]*i**2)    if su&lt;0:        tmpy.append(0)        tmpz.append(0)    else:        tmpy.append((-A[2]-np.sqrt(su))/(2*A[4]))        tmpz.append((-A[2]+np.sqrt(su))/(2*A[4]))plt.plot(tmpx,tmpy)plt.plot(tmpx,tmpz)plt.plot(gdatax,gdatay,'ro',c='g')plt.plot(rdatax,rdatay,'ro',c='r')plt.show()</pre><p>效果展示：<a href="/img/uploads/2017/04/figure_1-2.png"><img class="alignnone wp-image-270 size-medium" src="/img/uploads/2017/04/figure_1-2-300x225.png" alt="" width="300" height="225"></a></p><p>致谢：<a href="http://blog.csdn.net/abcjennifer/article/details/7716281" target="_blank" rel="external">http://blog.csdn.net/abcjennifer/article/details/7716281</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow入门之mnist手写数字识别</title>
      <link href="article/2017/article_21_tensorflow%E5%85%A5%E9%97%A8%E4%B9%8Bmnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>article/2017/article_21_tensorflow%E5%85%A5%E9%97%A8%E4%B9%8Bmnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>这是<a href="https://www.tensorflow.org/" target="_blank" rel="external">tensorflow官网</a>的第一个例子，按他的做就可以在测试数据集达到91%左右的识别率。之后的cnn版本就可以在测试数据集达到98%以上的正确率。</p><p>因为直接用他的写没什么感觉，然后稍微摸索了一下mnist的内容。<a id="more"></a></p><p>下面先将mnist的55000个测试数据变成图片的形式，直观一点。</p><pre>#python3.5#windows#引入所需库import tensorflow.examples.tutorials.mnist.input_data as input_dataimport tensorflow as tffrom PIL import Image,ImageFilterimport numpy as npimport os#关掉警告,tensorflow会有op unknown的警告os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' #读取mnist数据,第一次的话会自动下载mnist=input_data.read_data_sets("MNIST_data/", one_hot=True)#将每个784*1的像素数据变成28*28,再生成图像for z in range(len(mnist.train.images)):    imgArr=mnist.train.images[z]    im=Image.new("RGB",(28,28))    for i in range(28):        for j in range(28):            r=int(imgArr[i*28+j]*255)            im.putpixel((j,i),(r,r,r))    num=np.argmax(mnist.train.labels[z])    im.save("train/"+str(z)+"_"+str(num)+".jpg","jpeg")print("finish")</pre><p>之后直接读取图像来进行训练。</p><pre>#python3.5#windowsimport tensorflow.examples.tutorials.mnist.input_data as input_dataimport tensorflow as tfimport numpy as npfrom PIL import Image,ImageFilterimport osmnists=input_data.read_data_sets("MNIST_data/", one_hot=True)os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' f=os.listdir("train/")L=len(f)-1mnist=np.zeros((L,784))label=np.zeros((L,10))#读取每个图像数据存到mnist中，类别存到label中for i in range(L):    imgdir='train/'+str(f[i])    img=Image.open(imgdir).convert("L")    mnist[i]=np.array(img.getdata())/255    label[i]=[1 if j==int(f[i].split("_")[1][:-4]) else 0 for j in range(10)]#之后的操作和tensorflow官网一样x=tf.placeholder(tf.float32,[None,784])w=tf.Variable(tf.zeros([784,10]))b=tf.Variable(tf.zeros([10]))y=tf.nn.softmax(tf.matmul(x,w)+b)y_=tf.placeholder(tf.float32,[None,10])cross_entropy=-tf.reduce_sum(y_*tf.log(y))train_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)sess=tf.InteractiveSession()tf.global_variables_initializer().run()for _ in range(1000):    rand=np.random.randint(0,L,(100,))    batch_xs=mnist[rand]    batch_ys=label[rand]    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})correct_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))print(sess.run(accuracy,feed_dict={x:mnists.test.images,y_:mnists.test.labels})</pre><p>运行结果91%左右。也算稍稍做了改变。</p><p>cnn版的还有待研究，虽然代码也很简单。先贴在这里（网上找的，兄台没记住链接不好意思）。</p><pre>import tensorflow as tffrom tensorflow.examples.tutorials.mnist import input_datadef weight_varible(shape):    initial = tf.truncated_normal(shape, stddev=0.1)    return tf.Variable(initial)def bias_variable(shape):    initial = tf.constant(0.1, shape=shape)    return tf.Variable(initial)def conv2d(x, W):    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')def max_pool_2x2(x):    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)print("Download Done!")sess = tf.InteractiveSession()# parasW_conv1 = weight_varible([5, 5, 1, 32])b_conv1 = bias_variable([32])# conv layer-1x = tf.placeholder(tf.float32, [None, 784])x_image = tf.reshape(x, [-1, 28, 28, 1])h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)h_pool1 = max_pool_2x2(h_conv1)# conv layer-2W_conv2 = weight_varible([5, 5, 32, 64])b_conv2 = bias_variable([64])h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)h_pool2 = max_pool_2x2(h_conv2)# full connectionW_fc1 = weight_varible([7 * 7 * 64, 1024])b_fc1 = bias_variable([1024])h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)# dropoutkeep_prob = tf.placeholder(tf.float32)h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)# output layer: softmaxW_fc2 = weight_varible([1024, 10])b_fc2 = bias_variable([10])y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)y_ = tf.placeholder(tf.float32, [None, 10])# model trainingcross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)correct_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))sess.run(tf.initialize_all_variables())for i in range(2000):    batch = mnist.train.next_batch(50)    if i % 100 == 0:        train_accuacy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0})        print("step %d, training accuracy %g"%(i, train_accuacy))    train_step.run(feed_dict = {x: batch[0], y_: batch[1], keep_prob: 0.5})# accuacy on testprint("test accuracy %g"%(accuracy.eval(feed_dict={x: mnist.test.images[0:2000], y_: mnist.test.labels[0:2000], keep_prob: 1.0})))</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>赛马问题</title>
      <link href="article/2017/article_20_%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/"/>
      <url>article/2017/article_20_%E8%B5%9B%E9%A9%AC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题：有25匹马，速度都不同，但每匹马的速度都是定值。现在只有5条赛道，无法计时，即每赛一场最多只能知道5匹马的相对快慢。问最少赛几场可以找出25匹马中速度最快的前5名？<a id="more"></a></p><p>写下一些个人思路。</p><p>先把25匹马分成5组，每组5匹马，跑五次。得到五次的结果。</p><p>在把5次都跑第一名的马拿出来跑一次。</p><p>然后分别标上如下图序号。箭头方向表示由慢到快。</p><p><a href="/img/uploads/2017/04/image-1.jpg"><img class="alignnone wp-image-255 size-medium" src="/img/uploads/2017/04/image-1-300x225.jpg" alt="" width="300" height="225"></a></p><p>此时可以得到11是其中跑得最快的，由于要选5匹，故可以去掉一些已经评不上的。</p><p><a href="/img/uploads/2017/04/image-2.jpg"><img class="alignnone wp-image-256 size-medium" src="/img/uploads/2017/04/image-2-300x225.jpg" alt="" width="300" height="225"></a></p><p>考虑特殊情况，要次数最少的话就得碰运气，第七次跑51，12，13，14，15或者15，21，31，41，51。如果51或者15赢了就可以得到最快的五匹马。</p><p>考虑一般情况的话，再分析图，12，21至少有一个需要选。13，22，31至少有一个需要选。所以第七次上面五匹马跑一次。</p><p>之后分类讨论，主要考虑前两名。</p><p>如果12，21是前两名，则他们为总的第二三名，由于13，22，31也至少选一个，所以其中一个最快的是总的第四名。总的还差一匹马，第八次就跑13，22，31中的另外两个加上总第四名那匹马的右边和下面两匹马。第八次跑最快的就是总的第五名。得到最快5匹马。</p><p>如果前两名是12，21中的一个加上13，22，31中的一个。则第八次跑的马为上面剩下的三个加上13，22，31种最快那匹的右边和下面那两匹马。这里得到的结果又可以分类讨论，方法和上面差不多，最差的情况也可以选出总的第四快的马。</p><p>再跑第九次，选出第五快的马。</p><p>结论：碰运气跑最快7次，一般情况跑最快8次，最慢9次。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序初探与文字二维码举例</title>
      <link href="article/2017/article_19_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E6%8E%A2%E4%B8%8E%E6%96%87%E5%AD%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%BE%E4%BE%8B/"/>
      <url>article/2017/article_19_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%9D%E6%8E%A2%E4%B8%8E%E6%96%87%E5%AD%97%E4%BA%8C%E7%BB%B4%E7%A0%81%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>最近，微信小程序开放了个人开发者，所以立刻申请了一个来试试。</p><p>小程序从之前刚出来时在开发者圈火极一时，而现在却用的不多，也有限制多的缘故，所以在开放了部分限制之后再来看他的发展吧。<a id="more"></a></p><p>这里讨论一下初探小程序的一点想法。</p><p>在<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="external">小程序手册</a>中也已经很明白了，把视图和逻辑分开，有点类似于react的虚拟dom，不直接去操作dom，而是改变数据之后自动刷新页面的渲染，使改动最小化。最初的试验感觉他的数据应该是单向绑定，也就是m-v而没有v-m。</p><p>另外，微信写了各种接近微信ui的组件供直接调用。html代替用的是wxml，这个可以看手册了解。关于css，他用的是wxss，wxss基本和css是相同的。js的话就是变化最大的地方，因为完全dom没有关系，直接操作数据就可以改变页面内容。所以在了解之后其实开发速度是很快的。</p><p>使用过后的感觉便是比起一般的网页流畅一些，但相较于app可能还有距离。</p><p>开发的话，先在微信公众平台新注册一个，选择小程序。下载开发者工具，再本地新建一个空文件夹，之后添加项目到这里面，就会自动创建一个示例demo。</p><p>这里简单做一个文字二维码的功能的小程序。</p><p>wxml部分基本直接用组件就行 ，然后绑定一下事件，如bindtap，{ {} }是从js里传入的数据。</p><pre>&lt;!--index.wxml--&gt;&lt;view class="container"&gt;  &lt;form bindsubmit="formSubmit"&gt;    &lt;view class="section"&gt;      &lt;input placeholder="请输入想说的话" auto-focus name="input"/&gt;    &lt;/view&gt;    &lt;view class='btn'&gt;      &lt;button formType="submit"&gt;提交&lt;/button&gt;    &lt;/view&gt;  &lt;/form&gt;  &lt;view class="img"&gt;    &lt;image src="{ {imgurl} }" bindtap="ch"&gt;&lt;/image&gt;  &lt;/view&gt;&lt;/view&gt;</pre><p>wxss因为和css基本一样就不写太多了，而且ui的话很多组件已经做好了。</p><pre>/**index.wxss**/.btn{  margin-top: 10%;}.section{  border-bottom:solid 1px lightgrey;  font-size:50rpx;}</pre><p>js里，getApp()从app.js和app.json获取配置信息，data便是可以传入wxml里的数据下面是两个事件，一开始的话会自动创建几个默认事件—开始加载，加载完成等等。然后可以自己添加事件。wx.xxx就是调用接口，接口具体也可以看文档。wx.request是获取服务器数据，这里首先需要到微信公众平台–设置里配置一下服务器域名，否则会报错。写多了容易发现有各种回调，所以要很清晰每一步。</p><pre>//index.js//获取应用实例var app = getApp()Page({  data: {    imgult:'',    imgfile:''  },  ch:function(e){    var that=this    if(that.data.imgfile==''){      return    }    wx.previewImage({      current: that.data.imgfile,      urls: [that.data.imgfile]     })  },  formSubmit: function(e) {    var that = this    wx.request({      url: 'https://xxx.cn/test.php',      data: {        data: e.detail.value.input ,      },      header: {          'content-type': 'application/json'      },      success: function(res) {        that.setData({          imgurl:res.data        }),        wx.downloadFile({          url: 'https://xxx.cn/EXAMPLE_TMP_SERVERPATHtest.png',          success: function(res) {            var tempFilePaths = res.tempFilePath            that.setData({                   imgfile:res.tempFilePath            })            console.log(that.data.imgfile)          }        })      }    })  },})</pre><p>服务器端用了<a href="http://phpqrcode.sourceforge.net/" target="_blank" rel="external">phpqrcode</a>来生成二维码。下面是参考代码。效果：如果是数字便生成添加联系人的二维码，如果是文字，就产生文字二维码。然后通过base64编码到返回，小程序获取到64编码的图片字符放到img中就可以直接展示。</p><pre>&lt;?phpinclude('phpqrcode/qrlib.php');include('config.php'); $tempDir = EXAMPLE_TMP_SERVERPATH; $a=$_GET['data'];if(!is_numeric($a)){    QRcode::png($a,$tempDir.'test.png',QR_ECLEVEL_L, 10);    $str = file_get_contents($tempDir.'test.png');    echo "data:image/png;base64,".base64_encode($str);}else{    $name = '';     $phone = $a;    $codeContents  = 'BEGIN:VCARD'."\n";     $codeContents .= 'FN:'.$name."\n";     $codeContents .= 'TEL;WORK;VOICE:'.$phone."\n";     $codeContents .= 'END:VCARD';     QRcode::png($codeContents, $tempDir.'test.png', QR_ECLEVEL_L, 10);     $str = file_get_contents($tempDir.'test.png');    echo "data:image/png;base64,".base64_encode($str);}</pre><p>效果展示：<a href="/img/uploads/2017/04/QQ截图20170407112928.jpg"><img class="alignnone wp-image-239 size-thumbnail" src="/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg" alt="" width="150" height="150"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python实现简单时时打印桌面程序</title>
      <link href="article/2017/article_18_python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%97%B6%E6%97%B6%E6%89%93%E5%8D%B0%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/"/>
      <url>article/2017/article_18_python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%97%B6%E6%97%B6%E6%89%93%E5%8D%B0%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这里的需求是用户在某个网页下单之后，需要打印机打出票据。</p><p>实现：用python访问一个网络接口获取需要打印的数据（json格式），之后调用系统win32print的打印接口打印出来。</p><p>时时打印的话下面用轮询并定时sleep实现。<a id="more"></a></p><p>再用Tkinter写一个桌面程序可以用来提醒并可以使程序长久运行。</p><p>之后再用py2exe把python文件变成一个exe文件方便在后台执行。</p><pre>#coding:utf-8#python2.7#引入需要的库from tkMessageBox import *from Tkinter import *import hashlibimport urllib2import jsonimport win32ui  import win32print  import win32con  import timeimport socket#定义打印机，获取内容，定义样式，打印def send_to_printer(title,txt,txt1,txt2,txt3,txt4,txt5):     hDC = win32ui.CreateDC()      hDC.CreatePrinterDC(win32print.GetDefaultPrinter())      hDC.StartDoc(title)    hDC.StartPage()    hDC.SetMapMode(win32con.MM_TWIPS)    #定义位置    ulc_x = 1000      lrc_x = 11500      lrc_y = -11500     ulc_y = -100      hDC.DrawText(txt,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)    ulc_x = 100    ulc_y = -400      hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)     ulc_x = 100    ulc_y = -2300      hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)    ulc_x = 150     ulc_y = -700      hDC.DrawText(txt2,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)     ulc_x = 150     ulc_y = -1000      hDC.DrawText(txt3,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)     #修改字体大小    font = win32ui.CreateFont({        "name": "Lucida Console",        "height": 400,        "weight": 400,    })    hDC.SelectObject(font)     ulc_x = 150     ulc_y = -1400      hDC.DrawText(txt4,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)     ulc_x = 150     ulc_y = -1800      hDC.DrawText(txt5,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)     hDC.EndPage()      hDC.EndDoc()#开一个桌面程序，提醒并在后台运行root = Tk()#设置socket超时时间socket.setdefaulttimeout(20)showinfo('信息', '打印机已成功运行')root.destroy()#下面轮询调用接口并处理数据，导入打印while 1:    #捕获所有错误，使中间不会中断    try:        #调用接口获取json并处理        response = urllib2.urlopen('http://test.com')         ret = response.read()        #print ret        res=json.loads(ret)        #处理数据这部分自定义        txt="1";txt2="2";txt3="3";txt4="4";txt5="5"        send_to_printer("title",txt,txt1,txt2,txt3,txt4,txt5)        response.close()        #5秒调用一次        time.sleep(5)    except Exception,e:          #错误处理，可以打印在log上，这里只简单的捕获        print Exception,":",e</pre><p><a href="http://xn--py2exesetup-qm8q8q0ol32bjwcy1jwmqj62bve9fpewf.py" target="_blank" rel="external">在用py2exe之前还得写另一个setup.py</a></p><pre>from distutils.core import setupimport py2exe#filename是上面写的那个python文件的文件名setup(windows=["filename.py"])</pre><p>把两个文件放在同目录下，用shift+右键，在此处打开命令行，运行</p><pre>python setup.py py2exe</pre><p>在产生的dist文件夹里有相同文件名的exe文件，可以双击直接执行，会先报一个成功运行，之后就在后台运行。</p><p>因为他会在后台一直运行着，所以关闭的话也得到任务管理器-&gt;进程里找到那个文件名的exe后台进程，把它结束掉就行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx+php下配置https</title>
      <link href="article/2017/article_17_nginx+php%E4%B8%8B%E9%85%8D%E7%BD%AEhttps/"/>
      <url>article/2017/article_17_nginx+php%E4%B8%8B%E9%85%8D%E7%BD%AEhttps/</url>
      
        <content type="html"><![CDATA[<p>本来以为配置https应该和配置http是差不多的，没想到还是出了许多问题，分享给大家。</p><p>现在市面有许多免费的ssl证书，可以找一个，本人使用了<a href="https://www.qcloud.com/product/ssl" target="_blank" rel="external">腾讯云的免费dv证书</a>。<a id="more"></a></p><p>之后就会得到两个文件，分别为test.com_bundle.crt和test.com.key</p><p>本人配置的环境是在centos，php集成环境lnmp下</p><p>先在服务器找到文件usr/local/nginx/conf/nginx.conf</p><p>之后把上述两个文件放到同一目录下，在原本的server listen 80下面新开一个server listen 443，代码如下</p><pre>server {        listen 443;        server_name test.com; #填写绑定证书的域名        ssl on;        ssl_certificate test.com_bundle.crt;        ssl_certificate_key test.com.key;        ssl_session_timeout 5m;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置        ssl_prefer_server_ciphers on;        location / {            root   /home/wwwroot/default;            index  index.html index.htm index.php;        }        location ~ [^/]\.php(/|$)            {                #这个root必须加上.                root   /home/wwwroot/default;                # comment try_files $uri =404; to enable pathinfo                try_files $uri =404;                fastcgi_pass  unix:/tmp/php-cgi.sock;                fastcgi_index index.php;                include fastcgi.conf;                #include pathinfo.conf;                #开启https                include fastcgi_params;                fastcgi_param HTTPS on;            }    }</pre><p>之后如果想要把http的都转到https去，可以在server listen 80里面location最上面加如下一段</p><pre>location / {                rewrite ^(.*) https://$host$1 permanent;        }</pre><p>之后需要远程连接服务器到命令行输入</p><pre>nginx -s reload</pre><p>最后打开浏览器访问看看效果</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>许愿墙效果（仿）</title>
      <link href="article/2017/article_16_%E8%AE%B8%E6%84%BF%E5%A2%99%E6%95%88%E6%9E%9C%EF%BC%88%E4%BB%BF%EF%BC%89/"/>
      <url>article/2017/article_16_%E8%AE%B8%E6%84%BF%E5%A2%99%E6%95%88%E6%9E%9C%EF%BC%88%E4%BB%BF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>也不知道为什么要叫许愿墙，在<a href="http://www.qdfuns.com/" target="_blank" rel="external">前端网</a>看到许多人实现了，便来实现一个自己的版本，顺便许个愿！</p><p>这里需要先看一下下面这张图，对于后面的理解很有帮助。<a id="more"></a></p><p><a href="/img/uploads/2017/03/2014091409260873.png"><img class="alignnone wp-image-213 size-medium" src="/img/uploads/2017/03/2014091409260873-300x159.png" alt="" width="300" height="159"></a></p><p>使用方法：下面代码复制到一个html文件里，之后浏览器打开就行。</p><p>具体实现在代码中注释。</p><pre>&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;&lt;/title&gt;    &lt;style type="text/css"&gt;    /*去除默认内外边距*/    * {        margin: 0px;        padding: 0px;    }    /*背景颜色*/    html,    body {        height: 100%;        background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);        background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);    }    /*画边框曲线*/    .item {        width: 200px;        height: 200px;        -webkit-border-bottom-left-radius: 20px 500px;        -webkit-border-bottom-right-radius: 500px 30px;        -webkit-border-top-right-radius: 5px 100px;        -moz-border-bottom-left-radius: 20px 500px;        -moz-border-bottom-right-radius: 500px 30px;        -moz-border-top-right-radius: 5px 100px;        box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);        -webkit-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);        -moz-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);        position: absolute;        background: #FF9FDC;        cursor: move;        z-index: 2;    }    /*文字位置和属性*/    .txt {        margin-left: 25%;        margin-top: 10%;        color: white;        font-size: 20px;        font-family: "YouYuan";    }    /*设置关闭链接位置*/    .close {        position: absolute;        bottom: 10%;        right: 10%;    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="item" id="box"&gt;        &lt;div class="txt"&gt;2017许愿墙&lt;/div&gt;        &lt;div class="txt"&gt;This is the best future&lt;/div&gt;        &lt;div class="close"&gt;&lt;a href="#" id="close"&gt;关闭&lt;/a&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;script type="text/javascript"&gt;    //理解执行函数    (function() {        //初始化变量，获取元素，设置动作        var state = 0,            X = 0,            Y = 0;        var box = document.getElementById("box");        var txt = document.getElementsByClassName("txt");        var close = document.getElementById("close");        box.onmouseup = up;        box.onmousedown = down;        box.onmousemove = move;        close.onmousedown = closeBox;        //点击关闭链接box添加隐藏属性        function closeBox(e) {            e.preventDefault();            document.getElementById("box").style.display = "none";        }        //鼠标按下设置开关state为1，在加上box距离左上的距离        function down(e) {            e.preventDefault();            state = 1;            X += e.offsetX;            Y += e.offsetY;        }        //因为点击文字也同时点击了外面的box，所以需要在点到文字的div时进行处理，把XY赋值为文字div距离外部div的左上距离        //这里需要理解一下浏览器点击子div的时候相当于也点击了父div，而且事件是从内而外触发的        for (var i in txt) {            txt[i].onmousedown = function(e) {                X = this.offsetLeft;                Y = this.offsetTop;            }        }        //松开鼠标，恢复初始值        function up() {            X = 0;            Y = 0;            state = 0;        }        //移动时，判断鼠标是否为按下。实现拖动效果        function move(e) {            if (state) {                document.getElementById("box").style.top = e.clientY - Y + "px";                document.getElementById("box").style.left = e.clientX - X + "px";            }        }    }());    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>效果预览：<a href="/img/uploads/2017/03/QQ截图20170326144840.jpg"><img class="alignnone wp-image-212 size-full" src="/img/uploads/2017/03/QQ截图20170326144840.jpg" alt="" width="285" height="265"></a></p><p> </p><p> </p><p> </p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端回忆录---下篇</title>
      <link href="article/2017/article_15_%E5%89%8D%E7%AB%AF%E5%9B%9E%E5%BF%86%E5%BD%95---%E4%B8%8B%E7%AF%87/"/>
      <url>article/2017/article_15_%E5%89%8D%E7%AB%AF%E5%9B%9E%E5%BF%86%E5%BD%95---%E4%B8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>下篇开始，对于我自己来说也就是在这边徘徊，暂时也并不能完全很好的掌握这些或深入的或新颖的知识，因为前端新东西出现的实在太快了。这里的我只大致做一个引导，如有错误请及时指出。毕竟修行在个人，还是得靠自己摸索。<a id="more"></a></p><p>我们还是再来学习js—js进阶。这里目前必读的一本书—泽卡斯的《js高级编程指南》，如果能啃下这本书，必定精进一大步。当初我也是略读读了几次，能感受到他的强大和对我的影响力。js进阶，一方面补充了很多之前遗漏的细节，另一方面代码风格，代码思想会发生变化。学学面向对象，函数式编程，异步编程等等编程思想，对于编程的效率甚至体验都会改变。当然你会发现当初的编一行试一行的考虑肯定不是最好的，应该要站在高处看问题。如果是一个成千上万行代码的任务时，需要有总体设计的眼光。推荐在看看《js设计模式》这本。这部分时间将会非常长，当然也有无数人或停滞不前，或退而自满。任何一个行业在深入之后都不会很简单，如果你是被那三个月培训出来10k以上工资吸引进入这个行业，那就得做好打持久战的准备了，不牢固的基础在这时候会被放大。所以建议还是慢慢来，急功近利很难成为真正nb的人。</p><p>以前你是一个引用库的人，现在，你已经有能力根据自己的需求自己写一个合适自己的库或者改写别人的库，而不是之前想也不想先引用进来。虽然不提倡自己造轮子，但懂得造轮子的原理还是需要的。比如jquery这个库，没必要再去复制实现一个，但同时可以看看他实现的方法------jquery源码。从中可以学到一些设计的思想，这才是轮子的原理。</p><p>在讲点js里有趣的东西，毕竟编程很无聊，但要从无聊中寻找美的东西。canvas指的是画布，在h5里也是一个新标签，他意味着你可以用js代码在一张白纸上创作，你可以从无到有创作一个张画出来，或者把一张画复制到canvas画板上操作，之后再用js加点动作，简单的动画或者游戏就可以实现，是不是很有趣呢!更强大的是这个标签加上webgl技术就可以实现3d的创作，甚至于创作3d的游戏。</p><p>接下来开始讲一个新东西—css预处理器sass。你可以编写sass语言，然后编译成可用的css。开始你可能会奇怪写css明明好好地为什么要多一步编译呢，因为css作为一门编程语言没有很好的嵌套，继承，函数等等，这就造成写css的时候写了很多重复的代码。sass就很好的解决了这个问题，它的具体安装和语法可以看<a href="http://sass.bootcss.com/docs/guide/" target="_blank" rel="external">文档</a>，它完全支持css3，所以它也可以帮你解决那些需要分浏览器写的代码。</p><p>js也有一些需要编译才能用的扩展语言，比如TypeScript，CoffeeScript，jsx等。他们对于js的语法做了一些改变使得一些人更容易上手，同时也对js一些危险的语法做了保护或更改。付出的代价就是每次更改需要多一步编译的工作。</p><p>突然会发现需要编译的地方好多，同时为了网页反应速度更快还得把加载的资源比如图片之类打包起来，js文件也可以进行压缩使文件更小。这些工作都是不复杂的机械式操作，所以我们可以找一个工具把这些直接完成，那就是现在讲的<a href="http://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="external">gulp</a>。在用他之前你先得配置好node环境----node.js和npm(node.js的包管理器)。之后再按照gulp的教程来进行操作，这里有一份gulp完成上面那些操作的模板，<a href="http://pan.baidu.com/s/1i4CpzgD" target="_blank" rel="external">点这里下载</a>，下载完后用npm安装对应的模块，然后在代码里设置正确的路径，之后就可以运行了。他会监听指定的文件，保存之后就会自动触发，自动化了很多麻烦机械的步骤。</p><p>对于node.js，前端可以了解，亦可以有研究，毕竟是用js来写。他可以用来写后台，虽说这统一了前后端语言，让前端也可以写后台，但在目前前后端分离的情况下实现的情形并不多。我当初用他的socket模块写过一个简单的聊天室，关于socket，可以了解一下tcp/ip，三次握手等。同时，推荐一本书<a href="http://www.kancloud.cn/kancloud/tealeaf-http/43837" target="_blank" rel="external">《http下午茶》</a>，他是讲http协议和一些请求之类，对于写后台还是很有帮助的。反正一般后台该有的node,js也可以实现，但技术肯定是有好有坏，在准备用node写后台之前最好了解一下node的优势和劣势。</p><p>再来讲最火的三个框架—angular2，react，vue。我的感觉是angular2企业内部用的较多，react可以用来搭建大型应用，vue适合轻量级的网页。就试过react，给我的感觉就是初始上手有点困难，可能不是很适合刚入门的开发者，稍微有点经验之后再来学习框架可能会有更深刻的理解。当初是被react的全家桶吸引，react和react native，毕竟也是google工程师开发出来的。前端组件化也是在react出现之后才有的名词，很多人认为这也是前端发展的大方向，或许是吧，个人有个人的理解。总有对比这三个框架的文章见到，一般就按需求来做选择，也没必要在一个框架上吊死。虽然可能学一个框架的成本并不低，但在用熟了之后会发现再也离不开，因为多多少少会被这个框架设计的思想所束缚。个人感觉框架是用来帮助人的，而不是束缚，在学框架的同时不要忘记语言本身。</p><p>学到这儿，我相信您已经可以自己完成之后的路了，后面更加深入的可以是前端的深入研究，可以是编程提高的算法与数据结构，也可以是服务器端的复杂逻辑与数据交互等等，后面的路更是丰富多彩，希望本篇前端之路只是一个开端。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php实现Soap调用的两种方法</title>
      <link href="article/2017/article_13_php%E5%AE%9E%E7%8E%B0Soap%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>article/2017/article_13_php%E5%AE%9E%E7%8E%B0Soap%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>php也可以通过soap（一种基于xml的协议）和webservice进行数据交互。</p><p>这里通过两种方法来讲解，一个是php的SoapClient对象，另一个是php的curl。</p><a id="more"></a><p>第一种：先要做一件事就是在php.ini中把soap扩展开了。</p><pre>extension=php_soap.dll</pre><p>然后进行php代码的编写，这里直接讲解带有header验证的soap。没有header验证的话就不需要加设置header那几行。先查看所需的xml，这里用soap12举个栗子，关注下面xml中header和body部分。</p><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;soap12:Envelope   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"&gt;  &lt;soap12:Header&gt;    &lt;HeaderName xxx="url"&gt;      &lt;username&gt;<span class="value">int</span>&lt;/username&gt;      &lt;password&gt;<span class="value">string</span>&lt;/password&gt;    &lt;/HeaderName&gt;  &lt;/soap12:Header&gt;  &lt;soap12:Body&gt;    &lt;FuncName xxx="url"&gt;       &lt;neededData&gt;data&lt;/neededData&gt;    &lt;/FuncName&gt;  &lt;/soap12:Body&gt;&lt;/soap12:Envelope&gt;</pre><pre>&lt;?php//wsdl地址$url="wsdl地址";//出现类似于<span class="pln">SOAP</span><span class="pun">-</span><span class="pln">ERROR</span><span class="pun">:</span> <span class="typ">Parsing</span><span class="pln"> WSDL</span><span class="pun">:</span> <span class="typ">Couldn</span><span class="str">'t load from的错误时加上下面这行</span>libxml_disable_entity_loader(false);//调用SoapClient对象$client=new SoapClient($url);//查看里面的函数数组print_r($client-&gt;__getFunctions());//构造header$header = new SoapHeader('上面xml里的url','HeaderName',array('username'=&gt;xxx,'password'=&gt;xxx),true);//设置header$client-&gt;__setSoapHeaders($header);//调用FuncName并传入数据$return = $client-&gt;FuncName(array('neededData'=&gt;xxx));print_r($return);</pre><p>第二种：用php的curl获取数据，之后解析xml，具体来看代码吧</p><pre>&lt;?php//用curl带着post包和header去获取数据function getData($soap_request){      //构造头信息，和第一种方法的header不一样，具体查看webservice说明。      $header = array(          "Content-type: application/soap+xml; charset=utf-8",          "Host: xxx.xxx.xxx.xxx",          "Content-length: ".strlen($soap_request),        );      $soap_do = curl_init();      curl_setopt($soap_do, CURLOPT_URL, "wsdl地址");      curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );      curl_setopt($soap_do, CURLOPT_POST,           true );      curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $soap_request);      curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);      $data = curl_exec($soap_do);      return $data;}//处理得到的xml数据function handData($result,$parentNode,$childNode){      $xml=simplexml_load_string($result);      $result = $xml-&gt;children('http://www.w3.org/2003/05/soap-envelope')        -&gt;children('url')        -&gt;$parentNode        -&gt;$childNode;      return $result;}//使用方法//下面是上面xml的字符形式，将需要传入的数据直接写成标签到xml字符里$soap_request = "&lt;?xml version......";$return = $this-&gt;getData($soap_request);//后面两个参数为返回xml的body内的两个标签名$result = $this-&gt;handData($return,FuncName,returnData);</pre><p>总结：一般来说会选择上一种，也可以先根据自己的情况来选择一种理解。毕竟具体问题具体分析，这边不能做到全部问题都概括，所以有多个解法总比唯一解好！</p><p> </p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>便捷的集体通讯录---vcf文件制作使用</title>
      <link href="article/2017/article_11_%E4%BE%BF%E6%8D%B7%E7%9A%84%E9%9B%86%E4%BD%93%E9%80%9A%E8%AE%AF%E5%BD%95---vcf%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
      <url>article/2017/article_11_%E4%BE%BF%E6%8D%B7%E7%9A%84%E9%9B%86%E4%BD%93%E9%80%9A%E8%AE%AF%E5%BD%95---vcf%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>一种情况就是新组成的一个团队，人比较多，要互相留下手机号。这种时候一个个输入到手机里就比较麻烦，所以可以制作一个vcf文件，直接导入到通讯录。</p><p>vcf文件制作软件可以到这里下载<a href="http://pan.baidu.com/s/1kVLoUTh" target="_blank" rel="external">http://pan.baidu.com/s/1kVLoUTh</a><a id="more"></a></p><p>下载后打开里面的exe文件，之后添加需要的人的信息和手机号码，点击保存通讯录就会保存到Contacts.vcf文件里。可能会发生输入名字变成问号的问题，这个时候就要现在外面写好，复制到那个框里面就可以。</p><p>使用方法：</p><p>把contacts.vcf文件通过电脑发到手机上用软件打开，或者放在云服务器上，用浏览器打开。打开后选择另外的打开方式，选择在通讯录中打开，之后便会跳转到通讯录并自动添加了所有人的电话和信息。点击储存就保存了所有人。</p><p>是不是很便捷~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>logistics回归做二分类---学习篇</title>
      <link href="article/2017/article_14_logistics%E5%9B%9E%E5%BD%92%E5%81%9A%E4%BA%8C%E5%88%86%E7%B1%BB---%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
      <url>article/2017/article_14_logistics%E5%9B%9E%E5%BD%92%E5%81%9A%E4%BA%8C%E5%88%86%E7%B1%BB---%E5%AD%A6%E4%B9%A0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>一般的logistics回归过程并不复杂，特别是在理解了梯度下降之后，梯度下降法可以参考我之前的文章，<a href="http://ganjiacheng.cn/blog/?p=148">点击这里查看</a></p><p>大致讲一下理解：<a id="more"></a></p><p>大致还是通过梯度下降把需要拟合的直线的前面的系数渐渐靠近，比如用ax+by+c=0，这条直线来进行二分类，a，b，c三个系数就是下面代码中的数组weight，每次迭代改变的就是weight。然后误差是通过把每组训练的数进行sigmoid函数  <img class="alignnone size-full wp-image-188" src="/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png" alt="" width="99" height="35">，在与之前分好的类（这里是txt文件里的-1和1）进行求差就是每次的误差值。具体代码里还有解释。</p><p>&quot;testSet.txt&quot;是《机器学习实战》里的一个例子的文件，这里引用一下，下载地址在<a href="http://pan.baidu.com/s/1pLLMJdp" target="_blank" rel="external">http://pan.baidu.com/s/1pLLMJdp</a></p><p>这个例子很考验矩阵运算，建议回顾一下线性代数哦！</p><pre>#python2.7#引入必要文件import matplotlib.pyplot as pltimport numpy as np#打开文件f=open("testSet.txt")gdatax=[]gdatay=[]rdatax=[]rdatay=[]label=[]data=[]#读取文件for i in f.readlines():    #strip()是除去开头空格，split()是以空格为间断，变成数组。    linearr=i.strip().split()    #读取坐标，这里补1.0是为了使数组长度变成3，便于之后矩阵运算    data.append([1.0,float(linearr[0]),float(linearr[1])])    #读取分类    label.append(int(linearr[2]))    #为了展示点的分布，分开读取不同类的点    if int(linearr[2])==1:        gdatax.append(linearr[0])        gdatay.append(linearr[1])    else:        rdatax.append(linearr[0])        rdatay.append(linearr[1])#使list变成numpy里的matrix矩阵dataMatrix=np.mat(data)#transpose()是矩阵的转置labelMat=np.mat(label).transpose()m,n=np.shape(dataMatrix)#梯度下降步长alpha=0.001#梯度下降次数max=500#先设定三个系数为1weights=np.ones((n,1))#梯度下降主步骤，求sigmoid，和分类对比正确性，在求新的weightsfor k in range(max):    h=1.0/(1+np.exp(-dataMatrix*weights))    error=(labelMat-h)    weights=weights+alpha*dataMatrix.transpose()*error#创建等差数列x=np.linspace(-3,3)#计算y值y=(-weights[0,0]-weights[1,0]*x)/weights[2,0]#画图plt.plot(x,y)plt.plot(gdatax,gdatay,'ro',c='g')plt.plot(rdatax,rdatay,'ro',c='r')plt.show()</pre><p>效果展示：<a href="/img/uploads/2017/03/QQ截图20170319012731.jpg"><img class="alignnone wp-image-180 size-medium" src="/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg" alt="" width="300" height="240"></a></p><p>总的来说还可以。梯度下降那块可以优化成随机梯度下降，可以进行更少的迭代获得同等的效果。</p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>梯度下降法---学习篇</title>
      <link href="article/2017/article_12_%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95---%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
      <url>article/2017/article_12_%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95---%E5%AD%A6%E4%B9%A0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>梯度下降法：一般想法就是，开始先找一个点，之后每次找下降最快的那个方向来找下一个点，直到找到最低点。</p><p>看过很多教程或者高数书上的讲解，大致就知道梯度下降是怎么回事情。但很多时候都是被众多的公式和英文名词吓到而不真正理解。<a id="more"></a></p><p>这次我们来简单理解最初的一个------单变量梯度下降，这里用梯度下降来做线性回归，也就是找一条<strong>h(x)=ax+b</strong>的线来拟合现有的点。</p><p>想象有很多点，中间有条线，所有点不可能完全在线上，相对于线都有一个误差值，所以方程可以看做<strong>h(x)=ax+b+c</strong>(c代表差值)，c=0就相当于点完全在线上。</p><p>之后再理解一个cost function的概念，看下面第二个式子，简单理解一下就是把所有<strong>c求了平方和再求平均</strong>，除以二是之后在偏导数的时候会方便点。</p><p>在下面求偏导就是把一式带入到二式然后求，结果如三四两式。那个<strong>α</strong>是步长也就是下降的快慢，过快或过慢都不好。这样算完就算一次下降，之后就反复进行就可以慢慢向需要的拟合回归线靠拢。</p><p><a href="/img/uploads/2017/03/IMG_3068.jpg"><img class="alignnone wp-image-170 size-medium" src="/img/uploads/2017/03/IMG_3068-300x225.jpg" alt="" width="300" height="225"></a>—点击查看原图</p><pre>#python2.7#产生点import numpy as npimport matplotlib.pyplot as pltx=np.arange(-2,2,0.1)y=2*x+np.random.random(len(x))#随机设定一个初始的a，ba=np.random.random()b=np.random.random()l=len(x)#步长alpha=0.01#进行1000次梯度下降，每次计算出上面求出的偏导，并在赋值给a,b。for _ in xrange(1000):    j=0    k=0    for i in xrange(l):        j+=(a*x[i]+b-y[i])*x[i]        k+=a*x[i]+b-y[i]    a=a-alpha*j/l    b=b-alpha*k/l    print a,b#画点plt.plot(x,y,"ro")#画线tmpx=np.linspace(-2,2)tmpy=tmpx*a+bplt.plot(tmpx,tmpy)plt.show()</pre><p>效果展示<img class="alignnone size-medium wp-image-163" src="/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg" alt="" width="300" height="227"></p><p>致谢：<a href="http://blog.csdn.net/abcjennifer/article/details/7691571" target="_blank" rel="external">http://blog.csdn.net/abcjennifer/article/details/7691571</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用ppython---实现python和php之间的通信</title>
      <link href="article/2017/article_10_%E4%BD%BF%E7%94%A8ppython---%E5%AE%9E%E7%8E%B0python%E5%92%8Cphp%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>article/2017/article_10_%E4%BD%BF%E7%94%A8ppython---%E5%AE%9E%E7%8E%B0python%E5%92%8Cphp%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>ppython大致是用socket来实现php和python的联络;</p><p>日常不常用，有必要时还是挺有用的。<a id="more"></a></p><p>先是用python的socket开一个端口监听，在这个端口来进行数据传输</p><p>之后php连接那个端口，向那个端口传输数据，python在接受到数据处理之后再返回结果。</p><p>这里介绍一下基本使用，先下载<a href="http://pan.baidu.com/s/1dEHgYgL" target="_blank" rel="external">http://pan.baidu.com/s/1dEHgYgL</a>。</p><p>解压之后放到服务器上。</p><p>为了长久在Linux服务器里可以运行，开个screen</p><pre>screen -S ppython</pre><p>在screen里运行,可以看到Server Startup</p><pre>python php_python.py</pre><p>之后进行写各自要执行的python代码和php代码</p><pre>#python#modulename.pydef add(x,y):    return x+y</pre><pre>&lt;?phprequire_once("php_python.php");$x=1;$y=2;$result=ppython("modulename::add",x,y);echo $result;</pre><p>官方文档：<a href="https://code.google.com/archive/p/ppython/" target="_blank" rel="external">https://code.google.com/archive/p/ppython/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python日常问答篇--更新中</title>
      <link href="article/2017/article_8_python%E6%97%A5%E5%B8%B8%E9%97%AE%E7%AD%94%E7%AF%87--%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
      <url>article/2017/article_8_python%E6%97%A5%E5%B8%B8%E9%97%AE%E7%AD%94%E7%AF%87--%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>python篇：</p><p>1.windows上，在pip install xxx失败的时候怎么办？</p><p>答：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p><a id="more"></a><p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p><p>一种：</p><pre>import pippip.main(['install','ModuleName'])</pre><p>另一种：</p><pre class="lang-py prettyprint prettyprinted"><code><span class="pln">python3 </span><span class="pun">-</span><span class="pln">m pip install whlName</span></code></pre><p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p><pre>import io import sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre><p>4.requests爬到的中文网页输出在windows cmd会出错</p><pre>res=requests.get(url)res.encoding='gbk'print(res.text)</pre><p>5.cv2.imread读取中文路径出错</p><pre>#读取im = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)#写入cv2.imencode('.jpg',res)[1].tofile(file)</pre><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端回忆录---上篇</title>
      <link href="article/2017/article_7_%E5%89%8D%E7%AB%AF%E5%9B%9E%E5%BF%86%E5%BD%95---%E4%B8%8A%E7%AF%87/"/>
      <url>article/2017/article_7_%E5%89%8D%E7%AB%AF%E5%9B%9E%E5%BF%86%E5%BD%95---%E4%B8%8A%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>前端起家，而最终还是没留在这块‘宝地’，虽然火，但也不和大波人抢饭吃啦！！</p><p>记载回忆篇教程—'老年人’的理解（这里不讲教程，而是整个的学习过程）<a id="more"></a></p><p>一款好的文本编辑器是必须先入手的，sublime是我一直在用且功能强大的文本编辑器，软件自寻，装好之后装一些插件,在工具栏Preference-&gt;Browse Packdges先安装包，之后Preference-&gt;Packdge Control-&gt;Install Packdges，搜Emmet，先下这个吧，其他看需求。（之下还有讲sublime的）</p><p>然后开始前端的部分啦！！（不理解的名词自行谷歌哦）先纠正一下外来人对于做网页的理解，可能认为网页只是图片和文字的拼接，这种理解很片面。那你的登陆信息呢？那在网页某宝怎么实现支付呢？用户在访问互联网的时候，很多是通过浏览器，而最开始的前端就是写网页用户直接看到的用到的部分。然后你得收集数据，和后端交互数据，把数据可视化，数据安全等等。甚至前端写的不好，黑客可以通过入侵网页和服务器然后用户访问了网址之后就入侵了他的电脑。当然正常也没这么吓人，但也要防患于未然。</p><p>前端最初始的部分便是html，css，js。什么其他库啊，框架啊，预处理器啊都最终会回到这三个。因为浏览器就认识这三个咯！！关于前端的亲戚------浏览器还有一些有趣的历史故事，大家可以自行发掘。</p><p>html是使用标签来组成网页内能看到的内容。有html，head，body，div，p，h1，a，img，span，input，button，form等等标签，常用的就没几个，知道每个标签的代表的意思就行。这里算是刚刚开始，所以推荐的教程是w3school。</p><p>css是网页中的用来定位，美化的html内容的。这部分和审美设计就相关啦，不过前端基础的一些也得会写。包括布局，居中，字体，盒子模型等等。一般写在head里的style标签内，用选择器来选择html元素，其内写css代码改进网页。很多情况我们会引入外部css文件，写在head的link标签里。</p><p>之后可以写一个简单页面咯，sublime里新建文件保存为xxx.html。输入html:5+tab就会生成一个html的一般模板。在其内继续补充内容。这部分需要大量的练习来熟悉和巩固使用html和css。然后，直到展示类页面基本成型。这里补充写的时候很重要的一点就是理解html块级元素和行内元素，css的定位方法。然后在写的时候进行合理的布局，而不是所有不按自己想法占位的元素，都进行浮动和绝对定位。这对于网页在其他不同大小的屏上效果展示很重要。</p><p>这里先不介绍js，先来尝试一下bootstrap这个奇妙的框架。前面写网页的经历应该会让你发现直接写一个看得过去的页面是一件略复杂的事情，然后前人为了造福后人就帮你把很多展示层面的css和js写好了，你直接引用就行。先找到bootstrap3中文官网的起步部分，在页面头部引入bootstrap的那几个文件。之后按照后面的全局css样式和组件来尝试写页面的每一部分，写起来便轻松愉快啦！！bootstrap更强的是他是移动设备优先，这个之后在述。</p><p>前面部分貌似都感觉不到自己在编程，更像是美工，然后js就来啦，js在网页里充当给网页增加动态的角色。他可以改变html和css的内容，做各种特效，处理提交的数据等等。写js就完完全全有写编程语言的感觉啦，当然这也注定了它将会是前端最难的一部分。</p><p>写js先从基本语法开始，如果接触过c一类的语言，应该很快上手，没接触过也不要紧，基础的语法并不难，很快就能搞定。js可以写在head里也可以在body最下方，大部分情况建议写在body最下方，因为同步的代码从上往下执行，这样就可以先展示html，也就是页面反应变快一些。这部分虽然简单，但在写复杂网页程序的时候往往错误就出在不经意的语法错误。细节决定成败，简单也要严谨。</p><p>上面是js作为一门语言的语法，然后作为网页里的一部分，它还能操作dom，也就是改变html和css。先通过选择器获取dom节点，之后进行操作。当然也可以直接创建dom，网页里的它可以说无所不能。react框架就是用编译成js的jsx包揽了全部页面。</p><p>这里插入一个前端开发者必备功能，这里以chrome为例，那就是会用chrome的开发者工具。我们通过打开浏览器然后按f12或者右键审查元素打开，我习惯会把网页在左边，开发者工具在右边，可以按开发者工具右上角切换。前面js的基本语法里有个console.log便是在开发者工具里的console选项里输出内容，这里可以输出一些数组，对象等等alert不能输出的内容，当然也可以在这里直接像命令行一样输入js进行调试。在elements选项里是所有html内容，network里是所有加载的资源以及获取方式，加载时间等等有用信息，这里还能看到网页header，cookie等的信息，分析别人网页的时候很有用哦。中间那一块是css部分，可以直接在这里写css，然后就能看到效果啦，这里比较强大的两个一个是写一个color:#000;点击彩色小方块，然后会有出现一个颜色板和拾色器。另一个是在写css3动画的时候，写一个速度曲线，点击小方块，会出现一个可调整二次贝塞尔曲线的速度曲线改变面板。css右边还有一个盒子模型，必要时还是挺有用的。</p><p>至此你应该已经得会写轮播图，瀑布流，分页等等网页特效，甚至于写个简单的贪吃蛇，扫雷游戏。当然这里的逻辑还是需要挺多的，想想挺简单，用原生js写起来自然会感觉到吃力。除非之前进行过编程或者算法训练，不然很容易绕在里面，感觉不上不下。之前我自己的感受就是无数自己想想的小demo死在了我代码写到一半的时候。然后会感觉很吃力，如瓶颈一般。现在想想，与其纠结于此，不如去追求更广的天空。</p><p>所以继续来学习jquery，虽然都说用这个的都是老年人，但这些话都是已经把这个库用烂了的人说的。对于一个新手，学jquery也是很重要的一环，这个部分，你会体验到快速开发的乐趣。jquery相当于帮你封装了很多又难理解又难写的原生js，然后你可以直接调用它设定的更简便的形式来写js。在html文件里引入jquery文件，一般推荐min的那个，就可以直接按jquery的语法写啦。开始的话jquery写起来速度可以达到js的好几倍，立刻爱上jquery!!如果用jquery来重写上面那些网页特效，可能会轻松很多。当然网上jquery插件和特效也数不胜数，随便上某度搜就行。前期还是建议自己先造造轮子。</p><p>这里插一个提醒，之后讲的很多东西要在服务器运行，ajax也是。所以先配置一下服务器的环境。windows下建议wamp，linux下建议<a href="https://lnmp.org/" target="_blank" rel="external">lnmp</a>。都是集成安装环境，安装完就可以直接用。然后windows用浏览器访问localhost打开www文件目录，Linux用浏览器访问公网ip会打开wwwroot文件下default文件下index.html文件。这样就可以继续进行下去啦，之后尽量把文件放服务器。如果想要了解服务器知识的话就走向了后端了哦，但前端也可以稍微了解。</p><p>然后讲一个js里神奇的东西，为什么放在jquery下面呢，因为从jquery的语法来理解他会变得简单易行，他就是ajax。它是一种对js来说跨时代的技术。如果直接用原生来实现当然也可以，但对于菜鸟时候的我晦涩难懂。所以当我看到jquery实现的ajax，jquery好感++；ajax相当于可以在页面不跳转的情况下直接与后台进行交流。看似简单，但却实用，几乎每个页面都或多或少有ajax的身影，特别是对于前后端数据交流频繁的页面。</p><p>通过ajax，再来理解这里面的要用到的其他几个东西。一个是json，它是一种数据格式，常常用于前后端数据交流。因为这种数据很轻便，前后端解析json也很简单。出现json之前很多用的是xml，相比于json，xml解析起来很复杂，现在也少用，但也可以了解。另一个是异步和回调。自行搜异步和同步区别哦，ajax默认是异步的，也就是执行ajax时不会停在这里等数据回来，而是发出了一个ajax执行的指令，然后浏览器就继续扫描执行下面的代码啦，至于ajax，浏览器不去管他什么时候执行完，因为他执行完可以调用一个函数来告诉浏览器执行完了，那个函数就是回调函数。这个弄明白对于以后写node.js很重要。</p><p>最近h5这个名词总是很火，那现在就来讲讲html5和css3，html5和css3都是在原来的基础上增加了许多内容。目前主流的浏览器基本也都支持了大部分特性，所以可以放心大胆的写，不放心就看看手册，到这里你应该是查手册和看文档的时候，而不是又看之前看过的教程，那太慢啦。h5新增了很多带语义的标签，js里也开放了很多接口。可以试试，有个大致的了解。css3也一样，增加的一些css属性，有些还非常强大，比如做个3d什么的，也可以实现。这个名词虽然被炒的很高大上的样子，但其实质还是搭在原来的基础知识之上。在基础很牢固之后再去看这些就感到得心应手咯!</p><p>看到这的你已经大致走完了入门之路，接下来的进阶才是真正考验人的时候。都说前端入门很容易，确实，自从有了jquery，js的dom操作变得容易，而jquery可能只要半天时间就能学会。而jquery现在的弊端也很明显就是dom操作太多了，导致网页反应慢。大部分的页面用前面的知识都可以做出成果，但要效果最好肯定远不止这些。接下来，就将进入进阶的时候！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode解题篇Python法1-5题</title>
      <link href="article/2017/article_6_leetcode%E8%A7%A3%E9%A2%98%E7%AF%87Python%E6%B3%951-5%E9%A2%98/"/>
      <url>article/2017/article_6_leetcode%E8%A7%A3%E9%A2%98%E7%AF%87Python%E6%B3%951-5%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>具体详细题目请到<a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">https://leetcode.com/problemset/algorithms/</a>查看</p><p>之下解法都属第一思路，大可改进。</p><p>悄悄自问一句：今天ac了吗？<a id="more"></a></p><ol><li>Two Sum</li></ol><pre>class Solution(object):    def twoSum(self, nums, target):    l=len(nums)    for i in xrange(l):        for j in xrange(l):            if(j==i):                pass            else:                if((nums[i]+nums[j])==target):                    return [i,j]</pre><ol start="2"><li>Add Two Numbers</li></ol><pre>class Solution(object):    def addTwoNumbers(self, l1, l2):        res=[]        jw=0        while(hasattr(l1,'val') or hasattr(l2,'val')):            if hasattr(l2,'val') and (not hasattr(l1,'val')):                if l2.val+jw==10:                    jw=1                    res.append(0)                else:                    res.append(l2.val+jw)                    jw=0                l2=l2.next            elif hasattr(l1,'val') and not hasattr(l2,'val'):                if l1.val+jw==10:                    jw=1                    res.append(0)                else:                    res.append(l1.val+jw)                    jw=0                l1=l1.next            else:                if l1.val+l2.val+jw&gt;=10:                    tmp=l1.val+l2.val+jw-10                    jw=1                else:                    tmp=l1.val+l2.val+jw                    jw=0                res.append(tmp)                l1=l1.next                l2=l2.next        if(jw):            res.append(1)        return res</pre><ol start="3"><li>Longest Substring Without Repeating Characters</li></ol><pre>class Solution(object):    def lengthOfLongestSubstring(self, s):        l=len(s)        res=0        tmp=0        k=1        for i in xrange(l):            for j in xrange(k,l+2):                if len(set(s[i:j]))!=j-i:                    k=j                    tmp=j-i                    break            if tmp&gt;res:                res=tmp            tmp=0            o=1        if s=='':            res=1        return res-1</pre><ol start="4"><li>Median of Two Sorted Arrays</li></ol><pre>class Solution(object):    def findMedianSortedArrays(self, nums1, nums2):        c=(nums1+nums2)        c.sort()        l=len(c)        if l%2==0:            res=(c[l/2]+c[l/2-1])*1.0/2        else:            res=(c[l/2])*1.0        return res</pre><ol start="5"><li>Longest Palindromic Substring</li></ol><pre>class Solution(object):    def longestPalindrome(self, s):        l=len(s)        tmp=0        maxl,maxr=0,0        for i in xrange(l):            m=i+1            n=i            while m&lt;l and n&gt;=0:                if s[m]==s[n]:                    if m-n+1&gt;tmp:                        tmp=m-n+1                        maxl=n                        maxr=m                    m+=1                    n-=1                else:                    break            j=i-1            k=i+1            while j&gt;=0 and k&lt;l:                if s[j]==s[k]:                    if k-j+1&gt;tmp:                        tmp=k-j+1                        maxl=j                        maxr=k                    j-=1                    k+=1                else:                    break        return s[maxl:maxr+1]</pre><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN实现手写数字0-9识别</title>
      <link href="article/2017/article_5_KNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%970-9%E8%AF%86%E5%88%AB/"/>
      <url>article/2017/article_5_KNN%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%970-9%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>KNN：我的简单理解为计算各个点到原点的距离，对于于样本数据以相差远近排序，取前面K个，属于哪个类别比较多的就当做最后分类，样本越多就越精确。<a id="more"></a></p><p>举个栗子：样本点：[a,b,c,d,e,f]，类别：[1,2,3,2,3,5]，假定a-f分别为相差从近到远；</p><p>如果K取1，那分类结果属于1，如果K取值为4，拿结果便为2。</p><p>废话不多说直接上代码：</p><pre>//KNN分类的主程序from numpy import *import operatordef classify(inX,dataSet,labels,k):    dataSetSize=dataSet.shape[0]     #获取行    diffMat=tile(inX,(dataSetSize,1))-dataSet     #=array([行数个inX])-dataSet    sqDiffMat=diffMat**2     #每个数**2    sqDistances=sqDiffMat.sum(axis=1)     #.sum()--所有数相加 .sum(axis=0)--列 .sum(axis=1)--行    distances=sqDistances**0.5    #每个数**0.5    sortedDistIndicies=distances.argsort()    #.argsort()返回排好序后的索引值    classCount={}    for i in xrange(k):        voteIlabel=labels[sortedDistIndicies[i]]        #获取由近到远的类别        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1        #.get(key,default) 对类别进行计数    sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)    #.iteritems()返回迭代器 operator.itemgetter(1)返回第一个域的值    reverse=True倒序    return sortedClassCount[0][0]    #输出频率高（靠近）的一个</pre><p>这里简单在提一下图像的处理PIL，以后会详细研究</p><pre>from PIL import Imageim=Image.open("xxx.jpg")data=im.getdata()//data里便是像素点数据</pre><p>之后要做的就是手写好一大部分的图，并用文件名来标记图所代表的数字，这些用来作为训练。</p><p>再把像素点转为numpy的矩阵，并标记好每个代表的数字。</p><p>载入新来的一张图得到矩阵，带入到上面的classify()就能得出结果，至于K应该取多少，凭经验来做判断，或者用大量数据做训练得出正确率最高的K值。</p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字杭电的模拟登陆(带验证码)</title>
      <link href="article/2017/article_4_%E6%95%B0%E5%AD%97%E6%9D%AD%E7%94%B5%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86(%E5%B8%A6%E9%AA%8C%E8%AF%81%E7%A0%81)/"/>
      <url>article/2017/article_4_%E6%95%B0%E5%AD%97%E6%9D%AD%E7%94%B5%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86(%E5%B8%A6%E9%AA%8C%E8%AF%81%E7%A0%81)/</url>
      
        <content type="html"><![CDATA[<p>对于一个学生，研究学校网站还是比较有趣滴！</p><p>Talk is cheap！Then I show the code.</p><p>下面是用php的实现，具体细节在注释里讲解<a id="more"></a></p><pre>//登录之前先获取cookie及lt(一次性使用，lt很关键)function GetCookie(){    //cookie的地址    $cookie=dirname(__FILE__).'/cookie.txt';    //curl来模拟登陆一次教务网站获取返回的页面代码    $ch = curl_init();     curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/login');     curl_setopt($ch, CURLOPT_HEADER, 0);    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    $res=curl_exec($ch);    curl_close($ch);    //用正则匹配到代码里的lt存起来    $preg = '|&lt;input type="hidden" name="lt" value=[\"](.*?)[\"] /&gt;|U';    preg_match_all($preg, $res, $arr);     $lt=$arr[1][0];    //把lt存在session里    $_SESSION['lt']=$lt;    //带着刚才的cookie在curl一次验证码的网站得到验证码图片    $ch = curl_init();     curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/Captcha.jpg');     curl_setopt($ch, CURLOPT_HEADER, 0);    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    $data=curl_exec($ch);    curl_close($ch);    //获取时间(为确保验证码唯一性)    $time=time();    //把验证码保存成jpg    file_put_contents(dirname(__FILE__).'/yzm/'.$time.'.jpg',$data);    //为了方便这里返回时间    return $time; }</pre><pre>//验证是否登录成功function VerLogin($username,$password,$yzm){    //cookie路径    $cookie=dirname(__FILE__).'/cookie.txt';    //获取在session里的lt    $lt=$_SESSION['lt'];    //构造post内容    $post_data=array(        'encodedService'=&gt;'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',        'service'=&gt;'http://i.hdu.edu.cn/dcp/index.jsp',        'serviceName'=&gt;'null',        'loginErrCnt'=&gt;'0',        'username'=&gt;$username,        'password'=&gt;md5($password),        'lt'=&gt;$lt,        'captcha'=&gt;$yzm     );    //带着cookie模拟登陆(为了防止被认出来构造的比较完整，嘻嘻)    $curl = curl_init();    curl_setopt($curl, CURLOPT_URL, "http://cas.hdu.edu.cn/cas/login");    curl_setopt($curl, CURLOPT_HEADER, 0);    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);    curl_setopt ($curl,CURLOPT_REFERER,'http://cas.hdu.edu.cn/cas/login?service=http%3A%2F%2Fi.hdu.edu.cn%2Fdcp%2Findex.jsp');    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36');     curl_setopt($curl, CURLOPT_POST, 1);    curl_setopt($curl, CURLOPT_COOKIEFILE, $cookie);    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post_data));    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);     $res=curl_exec($curl);    curl_close($curl);    //得到一个自带跳转的页面的代码(跳转过去就是登陆后的主页面了哦)    //用正则匹配跳转，如果有则返回成功，没则返回失败    preg_match_all('/window.location.href=[\"](.*)[\"]/i', $res, $results);    if($results[1][0]==null){        return false;    }else{        return true;    } }</pre><pre>//使用函数//获取cookie$time=GetCookie();//下面是验证码图片路径，根据图片得到正确验证码//$Imgdir=dirname(__file__)."/yzm/".$time.".jpg";//根据得到的验证码加上学号密码登录$stuid="15******";$password="********";$yzm="****";if(VerLogin($stuid,$password,$yzm)){    echo "登录成功";}else{    echo "登录失败";}</pre><p>个人推荐使用的是fiddler来抓包，其他的网页的登陆也可以用相同的思路来研究。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单线性回归---学习篇</title>
      <link href="article/2017/article_3_%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92---%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
      <url>article/2017/article_3_%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92---%E5%AD%A6%E4%B9%A0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>先讲回归这个概念，我的理解：如果是二维平面里，指根据现有的点拟合出直线，在用直线做分析与预测。</p><p>简单线性回归便是全部的点都在一类之下。拟合出直线用于发现其中的关系。<a id="more"></a></p><p>logistic回归是在两类里做分类，完成训练后，拟合出的直线一边各一类，新来的点就可以很轻易的分类。</p><p>softmax回归便是多分类。</p><p>这是简单线性回归的一般公式：<a href="/img/uploads/2017/03/IMG_3031.jpg"><img class="alignnone wp-image-47 size-thumbnail" src="/img/uploads/2017/03/IMG_3031-150x150.jpg" alt="" width="150" height="150"></a></p><p>然后用python进行了尝试</p><pre>#python2.7import numpy as npimport matplotlib.pyplot as pltnum=1000vectors=[]xx=0;xy=0;ex=0;ey=0for i in xrange(num):    x1=np.random.normal(0.0,0.55)    y1=x1*0.1+0.3+np.random.normal(0.0,0.03)    xx+=x1*x1    xy+=x1*y1    ex+=x1    ey+=y1    vectors.append([x1,y1])x_data=[v[0] for v in vectors]y_data=[v[1] for v in vectors]plt.plot(x_data,y_data,'ro',label='data')b=(xy-ex*ey/num)/(xx-ex*ex/num)a=ey/num-b*ex/numtmpx=[-2,0,2]tmpy=[]for i in tmpx:    tmpy.append(b*i+a)plt.plot(tmpx,tmpy)plt.legend()plt.show()</pre><img class="alignnone size-medium wp-image-49" src="/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg" alt="" width="300" height="230"><p>效果还可以，之后会对回归进行更多的优化和尝试，最小二乘法，梯度下降等等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建wordpress个人博客</title>
      <link href="article/2017/article_2_%E6%90%AD%E5%BB%BAwordpress%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>article/2017/article_2_%E6%90%AD%E5%BB%BAwordpress%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>试着写blog啦，用以分享，记录技术和生活！</p><p>本人年方21，前端起家，在向后端的php和python前进。</p><p>本次就从安装wordpress说起：<a id="more"></a></p><p>注：环境：云服务器+lnmp+域名。</p><p>1.先从官网<a href="https://cn.wordpress.org/releases/" target="_blank" rel="external">https://cn.wordpress.org/releases/</a>找了最新版本4.7.2，之后解压，复制到服务器上，打开对应域名+路径就有了。</p><p>2.在配置mysql数据库，用户名和密码。就可以生成啦！！！</p><p>3.进入也是被惊艳了，上手很快。</p><p style="text-align: left;">4.本来升级需要ftp，弄不明白就找了在wp-config.php最后插入了这些代码，之后跳过了输入ftp</p><pre style="text-align: left;"><strong>define("FS_METHOD","direct");</strong><strong>define("FS_CHMOD_DIR", 0777);</strong><strong>define("FS_CHMOD_FILE", 0777);</strong></pre><p>遇到问题：在升级翻译的时候会有------无法复制文件的错误。</p><p>在升级Akismet插件的时候会出现错误-----因为我们不能复制一些文件，升级未被安装。这通常是因为存在不一致的文件权限。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简介</title>
      <link href="article/2017/article_1_%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/"/>
      <url>article/2017/article_1_%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>我叫甘家城，来自宁波余姚，目前是杭电的一名大三学生，作为一个电子专业的学生，路过前端的崛起，也看过“最好”的php，目前写着苦短的python，咯咯咯。<br></p><h5 id="all-of-life-is-an-act-of-letting-go-but-what-hurts-the-most-is-not-taking-a-moment-to-say-goodbye">All of life is an act of letting go, but what hurts the most is not taking a moment to say goodbye.</h5><br> <p></p><p>私邮：935669873@qq.com</p><p> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>极米H3S投影仪入手体验</title>
      <link href="article/2021/article_5_H3S%E6%8A%95%E5%BD%B1%E4%BB%AA%E5%85%A5%E6%89%8B%E4%BD%93%E9%AA%8C/"/>
      <url>article/2021/article_5_H3S%E6%8A%95%E5%BD%B1%E4%BB%AA%E5%85%A5%E6%89%8B%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文是极米的H3S的上手体验与评测，也是新手入手第一个投影仪的探索与发现。</p><p>评测全凭个人主观意见，如有雷同纯属雷同。</p><h2 id="主要功能">主要功能</h2><h3 id="投影">投影</h3><p>投影仪的投影功能当然是最基本的功能，2200ANSI明流的亮度，这边主要还是看在明亮条件下和黑暗条件下的效果。</p><h3 id="梯形矫正">梯形矫正</h3><p>梯形矫正是投影仪必不可少的功能，它可以在斜着投影时自动调整回矩形，</p><p>否则就得手动调整投影仪摆放的位置和角度，很是麻烦。</p><h3 id="蓝牙">蓝牙</h3><p>投影仪的蓝牙可以连接耳机，或者连接其他蓝牙设备，如游戏手柄。</p><p>耳机总的来说连接效果还不错，</p><h3 id="音响">音响</h3><p>投影仪的音响还是挺不错的，相比于三四百的AI音箱，音质还是明显好一点的。</p><h3 id="局域网互传">局域网互传</h3><p>投影仪有文件管理系统，其中也可以连接局域网内的共享文件夹，</p><p>这就使得电脑连接投影仪特别方便</p><p>只需要将投影仪和电脑连上同一个局域网，在电脑上开启共享文件夹</p><p>并把需要的文件放到共享文件夹里，在投影仪里就可以直接打开</p><p>就比如可以看电脑里的视频，或者直接打开电脑上下载的APP</p><p>本人一开始的当贝市场APP就是这个方法下载的</p><h2 id="应用">应用</h2><p>投影仪使用的是安卓系统，所以可以装各类兼容电视版App，可以先装个当贝市场，然后通过当贝市场装别的应用。</p><h3 id="电视">电视</h3><p>电视类应用挺多的，我这边选择了 电视家APP</p><p>如果没有开VIP的话（一般不是强太多也不会去开这个），列表中的广告电视台还是比较多的</p><p>个人来说也就看下中央电视台的几个</p><h3 id="视频">视频</h3><p>默认是有一个极米的影视类应用存在，它是一个影视资源类的合集（腾讯视频，芒果TV，优酷视频），可以绑定多个VIP账号。</p><p>这边主要还是单独装了腾讯视频，现在主要还是它的资源最多</p><p>芒果TV，这个是买的时候有送一年VIP，所以装一下，其实资源不多，不过有一些刚下映的电影还是可以看下的。</p><p>优酷视频，它和手机优酷App不是一个账号体系（所以并不能通用）</p><h3 id="直播">直播</h3><p>平时没事主要还是喜欢看看直播，</p><h3 id="游戏">游戏</h3><p>投影仪自身也没说能支持游戏，但蓝牙能连接手柄，当贝市场中也有手柄游戏的版块。</p><p>这边就可以来一次尝试。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> H3S </tag>
            
            <tag> 评测 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome插件 web_robot之难点探讨</title>
      <link href="article/2020/article_32_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B9/"/>
      <url>article/2020/article_32_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT%E5%AE%9E%E7%8E%B0%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本篇主要对 WEB-ROBOT 用到的技术点和实现的探讨</p><p>将会以一个一篇文章的粒度来探讨。</p><h3 id="可视化圈选的实现">可视化圈选的实现</h3><ul><li>选中事件捕获与ui展示</li><li>反向选择器解析</li></ul><h3 id="从上层运行到下层事件的运行流程">从上层运行到下层事件的运行流程</h3><ul><li>多条事务形成联动，事务上下游，事务循环，爬虫事务（未实现）</li><li>一个事务的运行</li><li>一个事件的运行，包括前置dom检查</li><li>js事件与chrome事件封装</li></ul><h3 id="插件的通信">插件的通信</h3><ul><li>background与popup</li><li>popup与content_script</li><li>new_tab与content_script</li></ul><h3 id="关于运行模式的一些思路">关于运行模式的一些思路</h3><ul><li>一般运行</li><li>受控运行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CHROME插件 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类略知一二</title>
      <link href="article/2020/article_24_java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_24_java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这是一篇关于 Java 部分常用类的源码和实现方法的快速记录回忆篇</p><h3 id="hashmap">HashMap</h3><p>存储结构：数组 + 链表/红黑树<br>put：首先将 key 取 hashcode，移位 16 位得到 1-16 的数作为数组 index，对于不同的 key 一样的 index 存入一个单链表中，当数量比较大后存成一个红黑树，便于查找<br>get：首先将 key 进行一样的操作，得到 index，获取数组 index 的链表或者树然后进行遍历找到对应 key 的 value</p><h3 id="threadlocal">ThreadLocal</h3><p>维护一个 ThreadLocalMap，当前线程 Thread 作为 key，value 为存储的值</p><h3 id="hashset">HashSet</h3><p>维护一个 HashMap 实现</p><h3 id="synchronized-和-volatile-区别">synchronized 和 volatile 区别</h3><ul><li>volatile 是让当前变量到主存里去读取，synchronized 则是锁定当前变量；</li><li>volatile 只能用在变量级别，synchronized 可以用在变量、方法和类；</li><li>volatile 只能实现变量修改可见性，不能保证原子性，synchronized 可以保证可见性和原子性；</li><li>volatile 会让线程自旋，不会阻塞。synchronized 可能会造成阻塞；</li><li>volatile 变量不会被编译器优化，synchronized 会被优化；</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器略知一二</title>
      <link href="article/2020/article_26_%E5%AE%B9%E5%99%A8%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_26_%E5%AE%B9%E5%99%A8%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文产出关于一些容器的知识</p><h3 id="tomcat-总体架构">tomcat 总体架构</h3><ul><li>server:一个 tomcat 即一个 server</li><li>service:包含多个 connector 和一个 container，一个 server 可以有多个 service</li><li>connector:链接器，监听 socket 并交给对应 container 处理</li><li>container:执行请求并返回响应的对象，包括 engine，host，context，wrapper</li><li>engine:整个 servlet 引擎，最高层级容器对象，获取目标容器入口</li><li>host:表示虚拟主机的概念，处理来自不同地址的请求</li><li>context:表示一个独立的 web 应用</li><li>wrapper:表示 servlet 定义</li><li>executor:表示可以共享的线程池</li></ul><h3 id="tomcat-处理请求过程">tomcat 处理请求过程</h3><ul><li>endpoint 接收请求</li><li>processor 处理请求</li><li>coyoteAdapter 请求路径映射</li><li>mapper 获取匹配的执行</li><li>engine 容器入口</li><li>host 获取匹配的 host 执行</li><li>context 获取匹配的 context 执行</li><li>wrapper 获取匹配的 wrapper 执行</li><li>filterchain 执行 filter</li><li>servlet 执行 servlet</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring略知一二</title>
      <link href="article/2020/article_25_spring%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_25_spring%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文涉及 spring 的相关实现和源码解读</p><h3 id=""></h3>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络略知一二</title>
      <link href="article/2020/article_27_%E7%BD%91%E7%BB%9C%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_27_%E7%BD%91%E7%BB%9C%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文主要为网络的基础知识</p><h3 id="tcp-三次握手建立连接">tcp 三次握手建立连接</h3><ul><li>连接端发起一个 SYN 消息，SEQ=x</li><li>被连端收到后返回 SYN+ACK 消息，SEQ=y, ACK=x+1</li><li>连接端收到消息返回 ACK 消息，ACK=y+1</li></ul><p>两端都进入 Established 状态</p><h3 id="tcp-四次挥手断开连接">tcp 四次挥手断开连接</h3><ul><li>发起端发起一个 FIN 的消息，SEQ=x</li><li>接收端收到后返回 ACK 消息，表示准备断开连接，SEQ=y, ACK=x+1</li><li>接收端准备完毕，发送 FIN 消息，SEQ=y+1, ACK=x+1</li><li>发起端收到后返回 ACK 消息，SEQ=x+1, ACK=y+2</li></ul><h3 id="tcp-建立连接后的数据传输">tcp 建立连接后的数据传输</h3><ul><li>发送端发起一个数据包，SEQ=x，数据为 100B</li><li>接受端收到数据消息返回 ACK = x + 100 + 1</li><li>发送端收到后继续发送，SEQ=x+100+1，数据为 100B</li><li>接受端收到后返回 ACK = x + 200 + 2</li></ul><h3 id="tcp-连接的可靠性">tcp 连接的可靠性</h3><ul><li>tcp 会将数据截成最合适发送的数据块</li><li>当发送端发出一段数据后，会启动定时器等待回应，如果没有回应，会重新发送</li><li>tcp 会保持首部和数据的检验和</li><li>tcp 会将乱序的数据进行重新排序，返回应用层原来顺序</li><li>tcp 能控制流量，每一方都有固定大小的缓冲空间</li></ul><h3 id="tcp-如何进行拥塞控制">tcp 如何进行拥塞控制</h3><p>在拥塞控制中，发送方维持一个叫做拥塞窗口 cwnd 的状态变量，根据拥塞程度动态变化。<br>慢启动算法：一开始不发送大量数据，先试探网络拥塞程度，由小到大增加窗口，每个传输轮次后 cwnd 加倍<br>拥塞避免算法：采用线性逐渐增加拥塞窗口 cwnd<br>慢启动阀门（ssthresh）：</p><ul><li>cwnd &lt; ssthresh 慢启动算法</li><li>cwnd &gt; ssthresh 拥塞避免算法</li></ul><p>只要发现拥塞，将 ssthresh 设为一半，cwnd 设为 1</p><h3 id="tcp-流量控制">tcp 流量控制</h3><p>接收端在确认应答发送 ACK 报文的时候，将自己的即时窗口大小 rwnd 写入 TCP 头部 16 位字段的窗口大小，<br>发送端根据 ACK 报文里的窗口大小改变自己的发送速度。越大表示接收端缓冲区剩余空间越大，网络吞吐量越大。</p><h3 id="网络层级http和https区别">网络层级，http和https区别</h3><p>网络五层结构为 应用层(http) - 传输层(tcp) - 网络层(ip) - 数据链路层 - 物理层<br>https是在应用层和传输层中间添加一个ssl层</p><h3 id="http20特性">http2.0特性</h3><ul><li>头部压缩：使用HPACK算法进行压缩</li><li>二进制格式：使用更加靠近TCP/IP的二进制格式，提升解析效率</li><li>强化安全：跑在https上</li><li>多路复用：一个连接有多个请求</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql略知一二</title>
      <link href="article/2020/article_28_mysql%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_28_mysql%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文主要为 mysql 相关知识</p><h3 id="脏读不可重复读幻读">脏读，不可重复读，幻读</h3><ul><li>脏读：某个事务更新数据没有提交，另一个事务已经读取了数据</li><li>不可重复读：一个事务两次查询数据不一致，因为两次查询中间另一个事务更新了数据</li><li>幻读：一个事务两次查询数据总量不一致，因为两次中间另一个事务插入了数据</li></ul><h3 id="隔离级别">隔离级别</h3><table><thead><tr><th>隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td>读未提交(Read Uncommitted)</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>读已提交(Read Committed)</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>可重复读(Repeatable Read)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td>序列化(Serializable)</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><h3 id="innodb-锁模式">Innodb 锁模式</h3><ul><li>共享锁：允许一个事务去读一行，阻止其他事务获得相同数据集的写锁</li><li>排他锁：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和写锁。</li></ul><h3 id="innodb-加锁模式">Innodb 加锁模式</h3><ul><li>意向锁是 innodb 自动加的</li><li>update，insert，delete，innodb 会加上排他锁</li><li>普通 select 不会加锁，用到了索引的查询在索引上加行锁，否则加表锁，加锁语句如下<ul><li>共享锁：LOCK IN SHARE MODE</li><li>排他锁：FOR UPDATE</li></ul></li></ul><h3 id="索引-b-树特点">索引 B+ 树特点</h3><ul><li>有 n 个子树的非叶子节点包括 n 个关键字，不存数据只用作索引，所有数据都存在叶子节点。</li><li>所有叶子节点包含所有关键字信息，且叶子节点关键字自小而大连接。</li><li>通常在 b+树上有两个头指针，一个指向根节点，一个指向关键字最小的叶子节点。</li><li>同一个数据会在不同节点重复出现，根节点最大元素就是 b+树最大元素。</li></ul><h3 id="b树和-b-树区别">B+树和 B 树区别</h3><ul><li>B 树每个节点都存储数据，B+树只有叶子节点存储数据，所有的叶子结点使用链表相连</li><li>B 树具有 n 个关键字的节点包含（n+1）棵子树，B+树包含（n）棵子树。</li><li>B+ 树每次查找都是从根节点到叶子节点的路径</li></ul><h3 id="主键索引和一般索引的区别">主键索引和一般索引的区别</h3><p>主键索引叶子节点存放的是整行数据，非主键索引叶子节点存放的是主键的值，<br>非主键索引需要多查询一次 ID 索引树</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统略知一二</title>
      <link href="article/2020/article_30_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_30_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文涉及操作系统各种方面，包括进程，线程，协议，cpu，内存；</p><h3 id="进程调度算法">进程调度算法</h3><ul><li>先来先服务调度算法：队列</li><li>最短作业优先调度算法：时间短的先运行</li><li>高响应比优先调度算法：先计算响应比优先级，优先级高的先运行</li><li>时间片轮转调度算法：每个进程分配一个时间片段，如果在时间片段内没有执行完成，也切换进程运行，如果时间片内执行，则立即切换。</li><li>最高优先级调度算法：静态优先级 - 创建进程时确定优先级，动态优先级 - 进程优先级随时间增加而增加</li><li>多级反馈队列调度算法：设置多个队列，每个队列优先级从高到低，优先级越高时间片越短</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 知识积累 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式略知一二</title>
      <link href="article/2020/article_29_%E5%88%86%E5%B8%83%E5%BC%8F%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/"/>
      <url>article/2020/article_29_%E5%88%86%E5%B8%83%E5%BC%8F%E7%95%A5%E7%9F%A5%E4%B8%80%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文涉及分布式情况下会产生的各种问题；</p><h3 id="celery-多个-comsumor-如何实现一致性">celery 多个 comsumor 如何实现一致性</h3><p>当 celery 配合 redis，将 redis 作为消息队列时，redis 内部使用 list 的 lpush，brpop 来实现入队出队。<br>当多个 celery 消费进程来取任务时，由于 redis 内部是单线程的，不会导致消息的重复读，brpop 在没任务时会阻塞。</p><h3 id="cap-理论">cap 理论</h3><ul><li>一致性</li><li>可用性</li><li>分区容错性</li></ul><h3 id="zk-如何保证一致性">zk 如何保证一致性</h3><p>客户端的写请求都由 Leader 接收，Leader 将请求转成事务 Proposal，并向集群所有 Follower 节点发送广播请求，<br>只要有一半以上的 Follower 进行了正确的反馈 ACK，Leader 再向所有 Follower 发送 commit 请求，将上一个事务进行提交。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 知识积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIVE源码学习--实现自定义的UDF，UDAF，UDTF</title>
      <link href="article/2020/article_17_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84udf/"/>
      <url>article/2020/article_17_HIVE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84udf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>hive里有三种可以自定义实现的函数，</p><blockquote><p>自定义函数包括三种 UDF、UDAF、UDTF</p><ul><li>UDF（User-Defined-Function） 一进一出 ，既一行进一行出</li><li>UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min</li><li>UDTF（User-Defined Table-Generating Functions）一进多出，如 explore()</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> HIVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活篇</title>
      <link href="article/life/life_1_%E7%94%9F%E6%B4%BB%E7%AF%87/"/>
      <url>article/life/life_1_%E7%94%9F%E6%B4%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="换房子">换房子</h2><ul><li>2021-03-13</li></ul><p>搬家找了两个大学室友一起，叫了辆货拉拉，中间出了点岔子是搬家还得物业开出门单，特地有跑了一趟还好马上解决了。<br>从翡翠城绿萝苑换到了福鼎家园，虽然也才五公里，上班却也方便了许多，走走路10分钟就可以到达，也不用挤公交。<br>现在的单间比之前的大点，也带独卫，虽然贵了三百，也算是换工作后自己的一个福利。<br>这边离地铁会近点，最近的出门和回家也会方便许多，之前一直得坐公交。<br>在杭州也是各地住过：江干区下沙，滨江浦沿，余杭仓前，余杭闲林，余杭五常。<br>每个都是一段回忆~</p><h2 id="换工作">换工作</h2><ul><li>2021-01-25</li></ul><p>这次进的是阿里的子公司-乌鸫科技，做的事业务开发供应链方向，办公也在阿里巴巴西溪园区。面试大概经历了近一个月，从20年12月到1月，也是比较艰难还好是骑驴找马，不然容易心态不行。搜车这边挽留基本也没啥用，我这人还是认定了事情不太容易改变，特别是这种影响人生的大事，肯定经过一段时间的思想挣扎和艰难决定。原来那边主要还是薪资待遇不太行，个人也没啥发展空间。换了至少目前薪资是我认可的，发展的话不能说一定能达到预期，有两个顾虑，一个是从大数据平台开发转到了业务开发，另一个是这边并不是阿里集团，可能受限于子公司的发展，所以还是看着办，还是有一定试错成本在的。</p><h2 id="找工作123">找工作123</h2><ul><li>2020-09-20</li></ul><p>最近来说也面试了好几家，稍微一些感悟，两家一面挂的，感受到比较薄弱的环节是（网络，算法，分布式，并发，容器，框架），还有一家小公司直接去公司面了就给过的，这边其实还是问到工作中用到的一些浅显实用的部分，最后因为薪资问题被我给拒绝了，也是早有心理的预期，到不了也没什么谈的。总的来说感觉也是需要定位好自己，在转java后经过快一年的时间，目前来说这些或基础或深入的知识在实际开发中难接触到，要学习也就只能看书看资料。对充实自己来说是好的，但也得经历一定的时间。就目前的自己来说要找到一个提高自己收入的工作来说可能需要再去小一点的公司碰碰运气，可能目前的我就是适合一个灵活变动语言框架，前后端切换的团队。手头工作这边调薪的话也得是年末，现在的九到十月可以还是继续投入一些经历在面试中，继续加深自己的认知和水准吧。</p><h2 id="生活篇必读镇楼">生活篇必读镇楼</h2><ul><li>2020-08-23</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">本栏主要用于分享人生大小事和体悟</span><br><span class="line">人生总是在不断放下，但也要好好记录</span><br><span class="line">1. 突发奇想</span><br><span class="line">2. 吃喝玩乐</span><br><span class="line">3. 生活变动</span><br><span class="line">4. 人生节点</span><br><span class="line">5. 朝花朝拾</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>音乐篇</title>
      <link href="article/music/music_1_%E9%9F%B3%E4%B9%90%E7%AF%87/"/>
      <url>article/music/music_1_%E9%9F%B3%E4%B9%90%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<!-- https://github.com/newraina/mePlayer --><video src="#" controls="controls" style="width: 100%; max-height: 500px" id="movie" loop="loop">您的浏览器不支持 video 标签。</video><div class="music" id="ms"></div><h2 id="伯虎说"><a href="/music/%E4%BC%AF%E8%99%8E%E8%AF%B4.mp3">伯虎说</a></h2><h2 id="fallin-flower"><a href="/music/fallinflower.mp3">fallin flower</a></h2><h2 id="summer"><a href="/img/movie/summer.mp4">summer</a></h2><h2 id="秋的思念"><a href="/img/movie/qiudesinian.mp4">秋的思念</a></h2><h2 id="信仰-全职高手"><a href="/img/movie/xinyang.mp4">信仰-全职高手</a></h2><h2 id="someone-like-you"><a href="/img/movie/someonelikeyou.mp4">Someone like you</a></h2><h2 id="梦中的婚礼"><a href="/img/movie/mengzhongdehunli.mp4">梦中的婚礼</a></h2><h2 id="烟火里的尘埃"><a href="/img/movie/yanhuolidechenai.mp4">烟火里的尘埃</a></h2><h2 id="青石巷-片段"><a href="/img/movie/qingshixiang.mp4">青石巷 - 片段</a></h2><h2 id="海底"><a href="/img/movie/haidi.mp4">海底</a></h2><h2 id="river-flows-in-you"><a href="/img/movie/riverflowsinyou.mp4">River flows in you</a></h2><h2 id="夜的钢琴曲11"><a href="/img/movie/yedegangqinqu11.mp4">夜的钢琴曲11</a></h2><h2 id="梁祝钢琴曲"><a href="/img/movie/liangzhu.mp4">梁祝钢琴曲</a></h2><h2 id="我的纯音乐歌单">我的纯音乐歌单</h2><p><a href="https://t.kugou.com/355mda6xVV2" target="_blank" rel="external">纯音乐歌单</a>（打不开可以尝试手机打开）</p><p>很多歌带着一段感情与记忆，还是要经历过才会听得更有滋味</p><h2 id="音乐篇必读镇楼">音乐篇必读镇楼</h2><ul><li>2020-08-23</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">音乐自得其乐</span><br><span class="line">1. 分享音乐与感受</span><br><span class="line">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure><script type="text/javascript" src="/js/jquery.min.js"></script><script type="text/javascript" src="/js/meplayer.min.js"></script><script type="text/javascript">    let defaultPlay = "qiudesinian";    let movie = document.getElementById("movie");    let ms = document.getElementById("ms");    let lks = document.querySelectorAll(".post-container > h2 > a");    let mePlayerBuilder = mePlayer;    let mePlayerOperater = null;    let first = true;    function getQueryVariable(variable){       var query = window.location.search.substring(1);       var vars = query.split("&");       for (var i=0;i<vars.length;i++) {            var pair = vars[i].split("=");            if(pair[0] == variable){return decodeURI(pair[1]);}       }       return(false);    }    function playMovie(pmv, play) {        ms.style.display = "none";        movie.style.display = "block";        if(document.getElementsByTagName("audio")[0]) {            document.getElementsByTagName("audio")[0].pause()        }        movie.src=pmv.href;        if(play) {            movie.play();        }    }    function playMp3(pmp, play) {        movie.style.display = "none";        movie.pause();        ms.style.display = "block";        mePlayerBuilder({            music: {                src: pmp.href,                title: pmp.text,                author: "纯音乐请欣赏",                loop: true            },            target: '#ms',            autoplay: play        });    }    for(let i = 0; i < lks.length; i++) {        if(lks[i].className == "" && lks[i].href.endsWith("mp4")) {            lks[i].onclick = function(e){                e.preventDefault();                playMovie(lks[i], true);            }        }        if(lks[i].className == "" && lks[i].href.endsWith("mp3")) {            lks[i].onclick = function(e){                e.preventDefault();                playMp3(lks[i], true);            }        }    }    let thePlay;    if(getQueryVariable("init")) {        thePlay = getQueryVariable("init")    } else {        thePlay = defaultPlay;    }    let init = document.getElementById(thePlay);    let node = init.children[0];    if(node.href.endsWith("mp4")) {        playMovie(node, false);    }    if(node.href.endsWith("mp3")) {        playMp3(node, false);    }</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>理财篇</title>
      <link href="article/money/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/"/>
      <url>article/money/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="数据策略">数据策略</h1><p><a href="/money/strategy/">基于估值和持仓曲线的交易策略</a></p><h1 id="数据分析">数据分析</h1><h2 id="切换基金">切换基金</h2><div>    <select id="select_code"></select></div><h3 id="查看基金数据与交易">查看基金数据与交易</h3><div>    <iframe id="ifr_data" style="border: none; width: 100%; min-height: 400px"></iframe></div><h3 id="点位分布数量">点位分布数量</h3><div>    <div style="display: flex; margin-bottom: 20px">        <div style="flex: 0 0 80px">步长</div>        <input type="number" id="step" value="10">    </div>    <div style="display: flex; margin-bottom: 20px">        <div style="flex: 0 0 80px">开始时间</div>        <input type="date" id="start" value="2020-01-01">    </div>    <div style="display: flex; margin-bottom: 20px">        <div style="flex: 0 0 80px">结束时间</div>        <input type="date" id="end" value="2021-05-01">    </div>    <div style="color: red">注：除指数外，其他净值均放大了1000倍，当前位置显示为紫色</div>    <iframe id="analyse_ifr_data" style="border: none; width: 100%; min-height: 400px"></iframe></div><h1 id="个人记录">个人记录</h1><h2 id="下跌在稳住">下跌在稳住</h2><ul><li>2021-03-15<br>年初挣的钱在年后都还回去了，现在还亏了不少，仓位也比较高</li></ul><p>主要还是集中在半导体，还有不多的一些其他行业的，传媒/证券</p><p>但也想逐步转换到沪深300，做做指数比较香</p><p>黄金最近也入手了一些，主要从之前的400跌倒了350，买时成本价在365左右，<br>现在价格差不多基本持平，个人觉得跌的差不多了，也可能最低在320。</p><h2 id="整理基金实际操作记录">整理基金实际操作记录</h2><ul><li>2020-08-29</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">本次的数据来源主要是支付宝查账，</span><br><span class="line">地址为 https://consumeprod.alipay.com/record/standard.htm</span><br><span class="line">通过搜索筛选带蚂蚁财富的近三年账单，筛选出基金的买入卖出操作，</span><br><span class="line">下载为csv文件</span><br><span class="line"></span><br><span class="line">然后通过天天基金接口，获取到基金名称与代码的对应关系(有些关系还得手动补充维护)</span><br><span class="line">通过脚本转换csv到json格式，同时筛选所需的信息(基金，操作，日期)</span><br><span class="line"></span><br><span class="line">最后通过脚本将json生成markdown文本用于hexo渲染成页面</span><br></pre></td></tr></table></figure><h1 id="底部">底部</h1><h2 id="理财篇必读镇楼">理财篇必读镇楼</h2><ul><li>2020-08-23</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class="line">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class="line">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class="line">2. 在一些节点回顾性总结</span><br><span class="line">3. 发现或总结一些方法论</span><br><span class="line">4. 理财工具，分析工具的创造</span><br><span class="line">5. 数据挖掘和分析</span><br><span class="line">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure><script type="text/javascript">    Date.prototype.format = function(fmt) {         var o = {             "M+" : this.getMonth()+1,                 //月份             "d+" : this.getDate(),                    //日             "h+" : this.getHours(),                   //小时             "m+" : this.getMinutes(),                 //分             "s+" : this.getSeconds(),                 //秒             "q+" : Math.floor((this.getMonth()+3)/3), //季度             "S"  : this.getMilliseconds()             //毫秒         };         if(/(y+)/.test(fmt)) {                fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));         }        for(var k in o) {            if(new RegExp("("+ k +")").test(fmt)){                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));            }        }        return fmt;     }    let zhishu_data = [        {            code: "000001",            name: "上证指数"        }    ]    let ifr = document.getElementById("ifr_data");    let analyse_ifr = document.getElementById("analyse_ifr_data");    let scode = document.getElementById("select_code");    let analyse_step = document.getElementById("step");    let analyse_start = document.getElementById("start");    let analyse_end = document.getElementById("end");    let urlroot = "/money/fund_trace_data.html?code=";    let analyes_url = "/money/fund_analyse_distribution.html?";    let analyse_data = {        code: "000001",        step: 100,        start: `${new Date().getFullYear()-1}-${new Date().format("MM-dd")}`,        end: new Date().format("yyyy-MM-dd")    }    function init() {        ifr.src = urlroot + analyse_data.code;        analyse_step.value = analyse_data.step;        analyse_start.value = analyse_data.start;        analyse_end.value = analyse_data.end;    }    init()    // let dates = ["2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01", "2020-09-01"]    // let date_index = 0    // setInterval(() => {    //     if(date_index < dates.length) {    //         analyse_data.start = dates[date_index]    //         render_analyse()    //         date_index++    //     }    // }, 1000)    function render_analyse() {        analyse_ifr.src = analyes_url + `code=${analyse_data.code}&step=${analyse_data.step}&start=${analyse_data.start}&end=${analyse_data.end}`    }    fetch("/money/fund.json")    .then(res => res.json())    .then(data => {        let codemap = {};        zhishu_data.forEach(item => {            codemap[item["name"]] = item["code"]        })        let now = new Date();        now.setFullYear(new Date().getFullYear()-1);        data.forEach(d => {            if(new Date(d["datetime"]) > now) {                codemap[d["fund_name"]] = d["fund_code"];            }        });        let codes = Object.keys(codemap);        scode.innerHTML = codes        .map(name => `<option value=${codemap[name]}>${name}</option>`)        .join(" ");        ifr.src = urlroot + codemap[codes[0]];        analyse_data.code = codemap[codes[0]];        render_analyse();    });    analyse_step.onchange = function(e){        analyse_data.step = e.target.value        render_analyse();    }    analyse_start.onchange = function(e){        analyse_data.start = e.target.value        render_analyse();    }    analyse_end.onchange = function(e){        analyse_data.end = e.target.value        render_analyse();    }        scode.onchange = (e) => {        analyse_data.code = scode.value;        render_analyse();        ifr.src = urlroot + scode.value;    }</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
