{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"source/img/avatar/avatar.jpg","path":"img/avatar/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/github.png","path":"img/mypost/github.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/header.jpg","path":"img/article_header/header.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/pynput.png","path":"img/mypost/pynput.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.jpg.bak","path":"img/header_img/tag.jpg.bak","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3f17174b6a74b1a2ad9f447ca505d758111cc36b","modified":1573717388607},{"_id":"source/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1573709476643},{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1565959414000},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1565959414000},{"_id":"themes/huweihuang/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1565959414000},{"_id":"source/_posts/hiveSQL执行日志的收集.md","hash":"cd3c0e88b72964d35ab74575daf2cfd79a9946ae","modified":1585725985113},{"_id":"source/_posts/hiveserver2与hiveSQL的执行.md","hash":"63831effcabd6ed71fcfc1c62e5732c6ed03624f","modified":1585725982559},{"_id":"source/_posts/hive与mysql元数据的快速采集.md","hash":"58073f4b42a648313e837b047ccb4bceef0e653d","modified":1586243885660},{"_id":"source/_posts/关于spark使用ranger管理数据权限的一些尝试.md","hash":"a8bc0f54d74dfecb9b54810fe4dc81ac80e16acc","modified":1585725959031},{"_id":"source/_posts/pynput实现鼠标键盘操作的监控与还原.md","hash":"49e6504f5a24f96edfe8cf3a6ac3d41bad01adbd","modified":1585803102290},{"_id":"source/_posts/又双叒叕建博客.md","hash":"4c128c54d95256925372cfd3ee313ec4d170c2a9","modified":1585642545996},{"_id":"source/_posts/基于antlr4实现hiveSQL的解析-元数据.md","hash":"85358d4078c08fe586abd9f09012a61db18061b3","modified":1585725970393},{"_id":"source/_posts/基于antlr4实现hiveSQL的解析-格式化.md","hash":"aebbb2d89bf4c5d8dcec99745fe57320e8b1a6ae","modified":1585725967227},{"_id":"source/_posts/基于antlr4实现hiveSQL的解析-表血缘和字段血缘.md","hash":"2b1a6de03c7f0d3bfb90776a59b6a05ab6d861a7","modified":1585725964274},{"_id":"source/_posts/基于antlr4实现一个计算器.md","hash":"f1f62ba01c2c7811e62fef4285d183e136027dbd","modified":1585725961832},{"_id":"source/_posts/整理晒晒老博客.md","hash":"01b08e82243e81fd52eb5e0a82783f069a23ef41","modified":1585741886553},{"_id":"source/_posts/讲讲元数据.md","hash":"2b0e73f614d68ca465f8ff3384fce80edf5b1050","modified":1585726384580},{"_id":"source/_posts/本地hadoop与hive的部署-mac.md","hash":"25ef1abe015b028c66b571e379598b6e3b7c2126","modified":1585725955982},{"_id":"source/about/index.md","hash":"3d4cb0e6fa546c8b28fe1f176b4f59d410d90cb6","modified":1586251479017},{"_id":"source/archive/index.md","hash":"a93b0e38ac60cbbfd12998a14ffa5823f819cb52","modified":1573635762204},{"_id":"source/img/.DS_Store","hash":"f28952ddb98ce569ee5843bd5a50c36b59377648","modified":1573718348137},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1565959414000},{"_id":"source/tags/index.md","hash":"1f824dd5e3b3155cc5a7f2ce551c2e90c20bc46d","modified":1573436999687},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1565959414000},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1565959414000},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1573711106220},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1565959414000},{"_id":"themes/huweihuang/layout/index.ejs","hash":"e03f19ebc0164ecd657789edfccba707e8facc04","modified":1585724776686},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1565959414000},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1565959414000},{"_id":"themes/huweihuang/layout/post.ejs","hash":"1e29985632a33883a8bcaef940cba224c70a16af","modified":1573782383618},{"_id":"themes/huweihuang/layout/page.ejs","hash":"292e18597c1b3d2fed080ac44e89ab93b56d1506","modified":1573712463698},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1565959414000},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1565959414000},{"_id":"source/img/article_header/.DS_Store","hash":"bebd7116aad19ba812b7e4793b3741b01d8bc826","modified":1573718348132},{"_id":"source/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1573434816161},{"_id":"source/img/header_img/.DS_Store","hash":"89b6f04ed69798ff277621a0a7e83e62b5b77a26","modified":1573718348134},{"_id":"source/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1573643651388},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"720349195a5ea7b610a82ce3ce74298fb2bc7347","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"c065b8e3b48e55735be15b61ab99457e9b54fa90","modified":1573696613185},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"460729508dbf2f7a9ab101e7cb0a5541a3ec043a","modified":1573697728848},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1565959414000},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1565959414000},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1585642430532},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1585642430534},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1565959414000},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1565959414000},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1565959414000},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1565959414000},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1565959414000},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1565959414000},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1565959414000},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1565959414000},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1565959414000},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1565959414000},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1565959414000},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1565959414000},{"_id":"themes/huweihuang/source/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1573782787786},{"_id":"source/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1573717140265},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1565959414000},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1565959414000},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565959414000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1565959414000},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1565959414000},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1565959414000},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1565959414000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1565959414000},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1565959414000},{"_id":"source/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1573717157628},{"_id":"source/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1573717094913},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1565959414000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1565959414000},{"_id":"source/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1573717414429},{"_id":"source/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1584367195000},{"_id":"source/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1573717129072},{"_id":"source/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1573716891230},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1565959414000},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1565959414000},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1565959414000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1565959414000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1565959414000},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1565959414000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1565959414000},{"_id":"public/baidusitemap.xml","hash":"8fa49a9deaff976d54f4e1b9c9f45ae3c8219609","modified":1586251652738},{"_id":"public/post-sitemap.xml","hash":"a329c2f83274712b71367234fe44fe20662d64ee","modified":1586251652737},{"_id":"public/page-sitemap.xml","hash":"937dc8e02aab2e08a05e7d89363872b84506c905","modified":1586251652567},{"_id":"public/tag-sitemap.xml","hash":"fa0b4810ccb4dcb9fc533157974d99edcc28f987","modified":1586251652568},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1586178005879},{"_id":"public/sitemap.xml","hash":"cea6ee180d6ba68160c5d57ccc53f82836921530","modified":1586251652568},{"_id":"public/404.html","hash":"dcae76cfc3eaa05f85ca7d8158f153cf164197ae","modified":1586178005895},{"_id":"public/tags/index.html","hash":"7ef71ca1bd64dc85a8f8b0ae17abad8842c9a6eb","modified":1586251652950},{"_id":"public/article/hive与mysql元数据的快速采集/index.html","hash":"a6e19fcda2c29a3bc89b1689152d4bf2e4382b2e","modified":1586251652963},{"_id":"public/article/pynput实现鼠标键盘操作的监控与还原/index.html","hash":"fb75625ae0dcdc0ead8ae242ca7c73a55a65faef","modified":1586178005895},{"_id":"public/article/讲讲元数据/index.html","hash":"247bb7ce0e45874e9bfa6765f9293cb5fc121fe5","modified":1586178005895},{"_id":"public/article/整理晒晒老博客/index.html","hash":"53f04c49541c8fcddd7d60fdc9847e671d11fb58","modified":1586178005895},{"_id":"public/article/又双叒叕建博客/index.html","hash":"acd2d9acee1c6922156490a906e224341993bde8","modified":1586178005896},{"_id":"public/article/关于spark使用ranger管理数据权限的一些尝试/index.html","hash":"b6ba97270ab0b779f69694436f519c9fd47739de","modified":1586178005896},{"_id":"public/article/hiveSQL执行日志的收集/index.html","hash":"60296b1170979a7f7896249d5638724adf16ec2e","modified":1586251652950},{"_id":"public/article/hiveserver2与hiveSQL的执行/index.html","hash":"ed80c45f185b7dd388bd85930dac8979ea6153cd","modified":1586178005896},{"_id":"public/article/本地hadoop与hive的部署-mac/index.html","hash":"350b941bc7a79a25d10dffb615628dfc4bfe69d1","modified":1586251652963},{"_id":"public/article/基于antlr4实现hiveSQL的解析-表血缘和字段血缘/index.html","hash":"0393c13e223b9398b78621b926241edb85f20f56","modified":1586178005896},{"_id":"public/article/基于antlr4实现hiveSQL的解析-格式化/index.html","hash":"a6767c647d1d646e5a24991daa053e7b4d123ac7","modified":1586178005896},{"_id":"public/article/基于antlr4实现hiveSQL的解析-元数据/index.html","hash":"4e501e76045d43678f0bfeae76e4dd753a21e736","modified":1586178005896},{"_id":"public/article/基于antlr4实现一个计算器/index.html","hash":"91e64a8c55f061679b53627a0d3e0a3ccf819057","modified":1586178005896},{"_id":"public/about/index.html","hash":"4d34221befec959f59f469c0b85c38e804012a25","modified":1586251652967},{"_id":"public/archive/index.html","hash":"c59540b25ba2ca9209a25c81ba82d53ab1491abc","modified":1586251652967},{"_id":"public/index.html","hash":"a63055ec502e168c16f805488258b355a805fcfe","modified":1586251652968},{"_id":"public/page/2/index.html","hash":"c36c4344cd6be82b99c92f98e969adcf7677182b","modified":1586251652968},{"_id":"public/archives/index.html","hash":"9f436a3ce662e2e70108bd2c14891d611049aa12","modified":1586251652968},{"_id":"public/archives/archives/2/index.html","hash":"21eea525f9ef27219526fc2ba007d704f8005f7a","modified":1586251652968},{"_id":"public/archives/2000/index.html","hash":"c961aa9eb69badff85f15a1ee638a83deb10635a","modified":1586251652969},{"_id":"public/archives/2000/03/index.html","hash":"ca6c74bf598a3f62e3d639d3b1f1984174550fb1","modified":1586251652968},{"_id":"public/archives/2019/index.html","hash":"5e041a776dddb38417618e818fc40a999ab1b9a2","modified":1586251652968},{"_id":"public/archives/2019/11/index.html","hash":"0959d40677efb23dd978063595bb50fb64469c40","modified":1586251652968},{"_id":"public/archives/2020/index.html","hash":"8fbb495aa3857b5cde9e7ba0b013437e19d87184","modified":1586251652968},{"_id":"public/archives/2020/02/index.html","hash":"04d30b3e2a52cce36f5fa4d2e753709cbde85b97","modified":1586251652968},{"_id":"public/archives/2020/03/index.html","hash":"280954ea54fef0d319f416a7ab767388b576a98f","modified":1586251652968},{"_id":"public/archives/2020/04/index.html","hash":"9cb375ab9047d10a9baf8cd4049169d62892797f","modified":1586251652969},{"_id":"public/tags/Python/index.html","hash":"e1a5bc7eda179c53b49c20e1b0ebe9ef5719956f","modified":1586251652969},{"_id":"public/tags/脚本/index.html","hash":"9e06a43cb3627aa4ca3af16a72fb025a528f29cd","modified":1586251652969},{"_id":"public/tags/Other/index.html","hash":"acf33a8ab42a146f00bf4c54058875aa34dbc6d4","modified":1586251652969},{"_id":"public/tags/元数据/index.html","hash":"5e7b8942f96e2f94aea2e085b39c819fba9460f4","modified":1586251652969},{"_id":"public/tags/大数据/index.html","hash":"268890039c2ae829f9bf984e6b180351c22dc140","modified":1586251652969},{"_id":"public/tags/Mysql/index.html","hash":"dc9ceb4fc1179e00444625a6bd90dc6bf3a79105","modified":1586251652969},{"_id":"public/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1586178005913},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1586178005913},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1586178005913},{"_id":"public/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1586178005913},{"_id":"public/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1586178005913},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1586178005913},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1586178005914},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1586178005914},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1586178005914},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1586178005914},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1586178005914},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1586178005914},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1586178005914},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1586178005914},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1586178005914},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1586178005914},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1586178005914},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1586178005914},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1586178005915},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1586178005916},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1586178005916},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1586178005916},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1586178005916},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1586178005916},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1586178005916},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1586178005916},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1586178005916},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1586178005917},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1586178005917},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1586178005917},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1586178005917},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1586178005917},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1586178005917},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1586178005917},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1586178005917},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1586178005917},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1586178005917},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1586178005917},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1586178005917},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1586178005918},{"_id":"public/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1586178006177},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1586178006178},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1586178006182},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1586178006182},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1586178006182},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1586178006182},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1586178006182},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1586178006182},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1586178006183},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1586178006183},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1586178006192},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1586178006193},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1586178006193},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1586178006193},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1586178006193},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1586178006193},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1586178006193},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1586178006193},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1586178006193},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1586178006193},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1586178006193},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1586178006193},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1586178006193},{"_id":"public/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1586178006193},{"_id":"public/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1586178006193},{"_id":"public/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1586178006193},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1586178006194},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1586178006194},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1586178006195},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1586178006195},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1586178006195},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1586178006195},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1586178006196},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1586178006196},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1586178006196},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1586178006196},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1586178006197},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1586178006197},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1586178006210},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1586178006244},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1586178006254},{"_id":"public/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1586178006254},{"_id":"public/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1586178006254},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1586178006255},{"_id":"public/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1586178006255},{"_id":"public/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1586178006256},{"_id":"public/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1586178006256},{"_id":"public/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1586178006256},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1586178006320},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1586178006327},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1586178006331},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1586178006331},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1586178006333},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1586178006350},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1586178006353},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1586178006359},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1586178006366},{"_id":"source/_posts/hiveserver2与HQL的执行.md","hash":"e9e42a09f2506b7fc1d11cff9c66453c2d8c74bf","modified":1586251617153},{"_id":"source/_posts/基于antlr4实现HQL的解析-格式化.md","hash":"25c92022831da147200d9723007911963adf5020","modified":1586251597840},{"_id":"source/_posts/基于antlr4实现HQL的解析-元数据.md","hash":"3760e6f72a65b769db9fc2b39ffb821b6f32e8ed","modified":1586251565288},{"_id":"source/_posts/基于antlr4实现HQL的解析-表血缘和字段血缘.md","hash":"f928d181d5b64bfa92e1e2ce642a1fbd0893e724","modified":1586251607419},{"_id":"public/article/基于antlr4实现HQL的解析-元数据/index.html","hash":"b3d5e79b7e1a5020778b1d4b556ad6637f827d1b","modified":1586251652977},{"_id":"public/article/hiveserver2与HQL的执行/index.html","hash":"487aea2a5e6417384c620e621d3c922ea30d7870","modified":1586251652977},{"_id":"public/article/基于antlr4实现HQL的解析-表血缘和字段血缘/index.html","hash":"e28b00bd7177c8ff22bcc2a0fced3dac76e93261","modified":1586251652977},{"_id":"public/article/基于antlr4实现HQL的解析-格式化/index.html","hash":"25aaa9ea9b2bec845a6432ab2190dcfde006b9a7","modified":1586251652977},{"_id":"public/tags/HQL解析/index.html","hash":"97e8aac26cf1eaef9ee2c7057304fe9e79854539","modified":1586251652977},{"_id":"public/tags/Java/index.html","hash":"196cda416b8e70aa17abd732d14edc912dc152fc","modified":1586251652977}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-11-10T11:55:31.061Z","updated":"2019-08-16T12:43:34.000Z","path":"404.html","title":"","comments":1,"_id":"ck8ohfh690000pb0jcagx476b","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-11-11T02:00:00.000Z","description":"","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-11-11 10:00:00\ndescription: \"\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n","updated":"2020-04-07T09:24:39.017Z","path":"about/index.html","_id":"ck8ohfh760002pb0jv45xrz2u","comments":1,"content":"<h2 id=\"关于我\">关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2 id=\"技术栈历程\">技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2 id=\"联系我\">联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2>关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2>技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2>联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---","updated":"2019-11-13T09:02:42.204Z","path":"archive/index.html","_id":"ck8ohfh7a0004pb0jl269cev0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2019-11-11T01:49:59.687Z","updated":"2019-11-11T01:49:59.687Z","path":"tags/index.html","comments":1,"_id":"ck8ohfh7c0006pb0jcag5w24j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hiveSQL执行日志的收集","catalog":true,"date":"2000-03-31T08:30:21.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/hiveSQL执行日志的收集.md","raw":"---\ntitle: hiveSQL执行日志的收集\ncatalog: true\ndate: 2000-03-31 16:30:21\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"hiveSQL执行日志的收集","published":1,"updated":"2020-04-01T07:26:25.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh760003pb0jwf6vexbb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于spark使用ranger管理数据权限的一些尝试","catalog":true,"date":"2000-03-31T08:33:57.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/关于spark使用ranger管理数据权限的一些尝试.md","raw":"---\ntitle: 关于spark使用ranger管理数据权限的一些尝试\ncatalog: true\ndate: 2000-03-31 16:33:57\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"关于spark使用ranger管理数据权限的一些尝试","published":1,"updated":"2020-04-01T07:25:59.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7b0005pb0jbx8zxl7u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"pynput实现鼠标键盘操作的记录与还原","catalog":true,"date":"2020-04-01T08:19:52.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","source":"_posts/pynput实现鼠标键盘操作的监控与还原.md","raw":"---\ntitle: pynput实现鼠标键盘操作的记录与还原\ncatalog: true\ndate: 2020-04-01 16:19:52\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- Python\n- 脚本\n---\n\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","slug":"pynput实现鼠标键盘操作的监控与还原","published":1,"updated":"2020-04-02T04:51:42.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7e0007pb0jlnx9ufqa","content":"<h2 id=\"前言\">前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2 id=\"前期准备\">前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2 id=\"后期遐想\">后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2>前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2>具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2>使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2>后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n"},{"title":"又双叒叕建博客","catalog":true,"toc_nav_num":true,"date":"2019-11-13T09:05:00.000Z","subtitle":"讲讲本次建博客中间那些事","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","source":"_posts/又双叒叕建博客.md","raw":"---\ntitle: \"又双叒叕建博客\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-11-13 17:05:00\nsubtitle: \"讲讲本次建博客中间那些事\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- Other\n---\n\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","slug":"又双叒叕建博客","published":1,"updated":"2020-03-31T08:15:45.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7h0008pb0jhn6nijgg","content":"<h2 id=\"前言\">前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2 id=\"工具准备\">工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2 id=\"动手搭建\">动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 下载hexo命令行工具</span></span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 创建文件夹</span></span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># \b下载主题到该文件夹</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 下载依赖包</span></span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/_config.xml</span></span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/source</span></span><br><span class=\"line\">存放文章 <span class=\"string\">./_posts</span></span><br><span class=\"line\">图片 <span class=\"string\">./img</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/themes</span></span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/scaffolds</span></span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/node_modules</span></span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/db.json</span></span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置刚才的github仓库, 一般使用gh-pages分支</span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">  type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">  repo:</span> https:<span class=\"comment\">//github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">  branch:</span> <span class=\"params\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span></span><br><span class=\"line\"><span class=\"symbol\">url:</span> http:<span class=\"comment\">//ganjiacheng.cn/</span></span><br><span class=\"line\"><span class=\"symbol\">root:</span> /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置主题，/theme/下的子目录文件夹</span></span><br><span class=\"line\"><span class=\"symbol\">theme:</span> huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: \"&lt;your description&gt;\"</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">-<span class=\"ruby\"> featured-tags</span></span><br><span class=\"line\"><span class=\"ruby\">- short-about</span></span><br><span class=\"line\"><span class=\"ruby\">- recent-posts</span></span><br><span class=\"line\"><span class=\"ruby\">- friends-blog</span></span><br><span class=\"line\"><span class=\"ruby\">- archive</span></span><br><span class=\"line\"><span class=\"ruby\">- category</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># markdown编译器的一些配置</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文章</span></span><br><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除临时数据库</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译为html</span></span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启server</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传到github，第一次要写账号密码，后面就不用了</span></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用vscode写文章\">使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">\"标题\"</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">1999</span><span class=\"bullet\">-01</span><span class=\"bullet\">-01</span> <span class=\"number\">00</span><span class=\"string\">:00:00</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">\"副标题\"</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">\"/img/图片.jpg\"</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2 id=\"介绍一些插件\">介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3 id=\"访问次数插件\">访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center;\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            本站总访问量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-meta-divider\"</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            本站访客数<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>人</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        Viewed <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> times</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"评论插件\">评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">'//unpkg.com/valine/dist/Valine.min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"vcomments\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Valine(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#vcomments'</span>,</span><br><span class=\"line\">        appId: <span class=\"string\">'&lt;AppId&gt;'</span>, <span class=\"comment\">#这个要注册后拿到</span></span><br><span class=\"line\">        appKey: <span class=\"string\">'&lt;AppKey&gt;'</span>, <span class=\"comment\">#这个同上</span></span><br><span class=\"line\">        notify:<span class=\"literal\">false</span>, </span><br><span class=\"line\">        verify:<span class=\"literal\">false</span>, </span><br><span class=\"line\">        avatar:<span class=\"string\">'mp'</span>, </span><br><span class=\"line\">        placeholder: <span class=\"string\">'来了老弟 #markdown格式'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"info\"</span>)[<span class=\"number\">0</span>].style.display=<span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2 id=\"域名配置\">域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2 id=\"多终端同步\">多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"><span class=\"comment\"># 引入git</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置远程地址</span></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git地址</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span></span></span><br><span class=\"line\"><span class=\"bash\">git pull origin master --allow-unrelated-histories</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 添加.gitignore，加入</span></span></span><br><span class=\"line\"><span class=\"bash\">public/</span></span><br><span class=\"line\"><span class=\"bash\">.vscode</span></span><br><span class=\"line\"><span class=\"bash\">node_modules</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># git三连</span></span></span><br><span class=\"line\"><span class=\"bash\">git add .</span></span><br><span class=\"line\"><span class=\"bash\">git commit -m <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"bash\">git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2 id=\"拓展内容\">拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\"><span class=\"string\">/layout</span> <span class=\"comment\"># 主要布局，样式文件</span></span><br><span class=\"line\"><span class=\"string\">/source</span> <span class=\"comment\"># 外部js css等</span></span><br><span class=\"line\">_config.yml <span class=\"comment\"># 配置文件</span></span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2 id=\"最后一席话\">最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2>工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2>动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 下载hexo命令行工具</span></span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 创建文件夹</span></span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># \b下载主题到该文件夹</span></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 下载依赖包</span></span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/_config.xml</span></span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/source</span></span><br><span class=\"line\">存放文章 <span class=\"string\">./_posts</span></span><br><span class=\"line\">图片 <span class=\"string\">./img</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/themes</span></span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/scaffolds</span></span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/node_modules</span></span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">/db.json</span></span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置刚才的github仓库, 一般使用gh-pages分支</span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">  type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">  repo:</span> https:<span class=\"comment\">//github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">  branch:</span> <span class=\"params\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span></span><br><span class=\"line\"><span class=\"symbol\">url:</span> http:<span class=\"comment\">//ganjiacheng.cn/</span></span><br><span class=\"line\"><span class=\"symbol\">root:</span> /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 配置主题，/theme/下的子目录文件夹</span></span><br><span class=\"line\"><span class=\"symbol\">theme:</span> huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: \"&lt;your description&gt;\"</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">-<span class=\"ruby\"> featured-tags</span></span><br><span class=\"line\"><span class=\"ruby\">- short-about</span></span><br><span class=\"line\"><span class=\"ruby\">- recent-posts</span></span><br><span class=\"line\"><span class=\"ruby\">- friends-blog</span></span><br><span class=\"line\"><span class=\"ruby\">- archive</span></span><br><span class=\"line\"><span class=\"ruby\">- category</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># markdown编译器的一些配置</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文章</span></span><br><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除临时数据库</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译为html</span></span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启server</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传到github，第一次要写账号密码，后面就不用了</span></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2>使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">\"标题\"</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">1999</span><span class=\"bullet\">-01</span><span class=\"bullet\">-01</span> <span class=\"number\">00</span><span class=\"string\">:00:00</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">\"副标题\"</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">\"/img/图片.jpg\"</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2>介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3>访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center;\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            本站总访问量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-meta-divider\"</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            本站访客数<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>人</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        Viewed <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> times</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3>评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">'//unpkg.com/valine/dist/Valine.min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"vcomments\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Valine(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'#vcomments'</span>,</span><br><span class=\"line\">        appId: <span class=\"string\">'&lt;AppId&gt;'</span>, <span class=\"comment\">#这个要注册后拿到</span></span><br><span class=\"line\">        appKey: <span class=\"string\">'&lt;AppKey&gt;'</span>, <span class=\"comment\">#这个同上</span></span><br><span class=\"line\">        notify:<span class=\"literal\">false</span>, </span><br><span class=\"line\">        verify:<span class=\"literal\">false</span>, </span><br><span class=\"line\">        avatar:<span class=\"string\">'mp'</span>, </span><br><span class=\"line\">        placeholder: <span class=\"string\">'来了老弟 #markdown格式'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"info\"</span>)[<span class=\"number\">0</span>].style.display=<span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2>域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2>多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"><span class=\"comment\"># 引入git</span></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置远程地址</span></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git地址</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span></span></span><br><span class=\"line\"><span class=\"bash\">git pull origin master --allow-unrelated-histories</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 添加.gitignore，加入</span></span></span><br><span class=\"line\"><span class=\"bash\">public/</span></span><br><span class=\"line\"><span class=\"bash\">.vscode</span></span><br><span class=\"line\"><span class=\"bash\">node_modules</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># git三连</span></span></span><br><span class=\"line\"><span class=\"bash\">git add .</span></span><br><span class=\"line\"><span class=\"bash\">git commit -m <span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"bash\">git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2>拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\"><span class=\"string\">/layout</span> <span class=\"comment\"># 主要布局，样式文件</span></span><br><span class=\"line\"><span class=\"string\">/source</span> <span class=\"comment\"># 外部js css等</span></span><br><span class=\"line\">_config.yml <span class=\"comment\"># 配置文件</span></span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2>最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n"},{"title":"hive与mysql元数据的快速采集","catalog":true,"date":"2020-04-05T08:35:20.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","source":"_posts/hive与mysql元数据的快速采集.md","raw":"---\ntitle: hive与mysql元数据的快速采集\ncatalog: true\ndate: 2020-04-05 16:35:20\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n- Mysql\n---\n\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","slug":"hive与mysql元数据的快速采集","published":1,"updated":"2020-04-07T07:18:05.660Z","_id":"ck8ohfh7s000cpb0j1k6imkye","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"hive元数据采集\">Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2 id=\"mysql元数据采集\">Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2 id=\"关于实时采集\">关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2>Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2>关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"整理晒晒老博客","catalog":true,"date":"2020-02-29T08:15:00.000Z","subtitle":"整理下之前记录的一些东西","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","source":"_posts/整理晒晒老博客.md","raw":"---\ntitle: 整理晒晒老博客\ncatalog: true\ndate: 2020-02-29 16:15:00\nsubtitle: \"整理下之前记录的一些东西\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- Other\n---\n\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","slug":"整理晒晒老博客","published":1,"updated":"2020-04-01T11:51:26.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7w000hpb0j09gnep9k","content":"<h2 id=\"前言\">前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2 id=\"content\">content</h2>\n<h3 id=\"修改桌面背景图片\"><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"noopener\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3 id=\"dfs的几个demo\"><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"noopener\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3 id=\"dlib人脸识别svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"noopener\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3 id=\"flask-mongodb-gunicorn-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"noopener\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3 id=\"前端许愿墙效果\"><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"noopener\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"在线双人五子棋\"><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"noopener\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3 id=\"梯度下降法\"><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"noopener\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3 id=\"手持弹幕效果\"><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"noopener\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"聪明钱股票策略\"><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"noopener\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3 id=\"扫雷js版\"><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"noopener\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3 id=\"手动实现kmeans聚类算法\"><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"noopener\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3 id=\"knn分类算法mnist为例\"><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"noopener\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3 id=\"loading动画\"><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"noopener\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3 id=\"逻辑回归二分类\"><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"noopener\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3 id=\"数字杭电模拟登录python版php版\"><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"noopener\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3 id=\"matplotlib-画图\"><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"noopener\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3 id=\"mcts做五子棋ai\"><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"noopener\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3 id=\"node-express-mongodb-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"noopener\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3 id=\"非线性拟合和非线性逻辑回归\"><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"noopener\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3 id=\"swoole-你画我猜\"><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"noopener\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3 id=\"唐诗词云\"><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"noopener\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3 id=\"ppython的使用\"><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"noopener\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3 id=\"php-rsa加密\"><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"noopener\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3 id=\"简单线性回归\"><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"noopener\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3 id=\"php实现soap调用\"><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"noopener\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3 id=\"svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"noopener\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3 id=\"tensorflow写mnist分类\"><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"noopener\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3 id=\"threejs-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"noopener\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3 id=\"tts人机聊天应用\"><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"noopener\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3 id=\"简单验证码的识别\"><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"noopener\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3 id=\"web-worker-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"noopener\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3 id=\"微信小程序购物功能示例\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"noopener\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3 id=\"微信小程序文字联系方式二维码\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"noopener\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2>content</h2>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"noopener\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"noopener\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"noopener\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"noopener\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"noopener\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"noopener\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"noopener\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"noopener\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"noopener\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"noopener\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"noopener\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"noopener\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"noopener\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"noopener\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"noopener\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"noopener\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"noopener\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"noopener\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"noopener\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"noopener\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"noopener\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"noopener\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"noopener\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"noopener\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"noopener\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"noopener\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"noopener\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"noopener\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"noopener\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"noopener\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"noopener\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"noopener\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"noopener\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n"},{"title":"讲讲元数据","catalog":true,"date":"2020-03-31T10:47:13.000Z","subtitle":"大数据平台中元数据系统的一些见解","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","source":"_posts/讲讲元数据.md","raw":"---\ntitle: 讲讲元数据\ncatalog: true\ndate: 2020-03-31 18:47:13\nsubtitle: 大数据平台中元数据系统的一些见解\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n---\n\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","slug":"讲讲元数据","published":1,"updated":"2020-04-01T07:33:04.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7x000jpb0jm516j23j","content":"<h2 id=\"前言\">前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2 id=\"元数据定义\">元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2 id=\"元数据采集\">元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2 id=\"元数据平台\">元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2 id=\"元数据应用\">元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2>元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2>元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2>元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2>元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n"},{"title":"本地hadoop与hive的部署[mac]","catalog":true,"date":"2000-03-31T08:27:54.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/本地hadoop与hive的部署-mac.md","raw":"---\ntitle: '本地hadoop与hive的部署[mac]'\ncatalog: true\ndate: 2000-03-31 16:27:54\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"本地hadoop与hive的部署-mac","published":1,"updated":"2020-04-01T07:25:55.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8ohfh7y000mpb0ju8bok1ag","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于antlr4实现HQL的解析[元数据]","catalog":true,"date":"2020-04-07T07:24:40.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n","source":"_posts/基于antlr4实现HQL的解析-元数据.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[元数据]'\ncatalog: true\ndate: 2020-04-07 15:24:40\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- 元数据\n- Java\n---\n\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n","slug":"基于antlr4实现HQL的解析-元数据","published":1,"updated":"2020-04-07T09:26:05.288Z","_id":"ck8ph5x270000qsso0jdnz51m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\">前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2 id=\"前期准备\">前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3 id=\"g4分析\">g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创表语句入口 (create ... 表名 表来源)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_stmt </span>:</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创表来源，这边用的是是字段和表其他配置 </span></span><br><span class=\"line\"><span class=\"comment\">// (... 字段 ... 表配置)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_definition </span>:</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个字段 (字段名 类型 长度 ... 备注)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_columns_item </span>:</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_options_hive_item </span>:</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表字段相关定义\">表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码实现说明\">源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用实现\">调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2>前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2>具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3>g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创表语句入口 (create ... 表名 表来源)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_stmt </span>:</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创表来源，这边用的是是字段和表其他配置 </span></span><br><span class=\"line\"><span class=\"comment\">// (... 字段 ... 表配置)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_definition </span>:</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个字段 (字段名 类型 长度 ... 备注)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_columns_item </span>:</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span></span><br><span class=\"line\"><span class=\"attribute\">create_table_options_hive_item </span>:</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3>表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"基于antlr4实现HQL的解析[格式化]","catalog":true,"date":"2000-03-31T08:24:56.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"","source":"_posts/基于antlr4实现HQL的解析-格式化.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[格式化]'\ncatalog: true\ndate: 2000-03-31 16:24:56\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- Java\n---\n","slug":"基于antlr4实现HQL的解析-格式化","published":1,"updated":"2020-04-07T09:26:37.840Z","_id":"ck8pp8ua2000eqssohgbsuude","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于antlr4实现hiveSQL的解析[表血缘和字段血缘]","catalog":true,"date":"2000-03-31T08:25:06.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"","source":"_posts/基于antlr4实现HQL的解析-表血缘和字段血缘.md","raw":"---\ntitle: '基于antlr4实现hiveSQL的解析[表血缘和字段血缘]'\ncatalog: true\ndate: 2000-03-31 16:25:06\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n---\n","slug":"基于antlr4实现HQL的解析-表血缘和字段血缘","published":1,"updated":"2020-04-07T09:26:47.419Z","_id":"ck8pp91pa000hqssodlnmdx1y","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hiveserver2与hiveSQL的执行","catalog":true,"date":"2000-03-31T08:28:17.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"","source":"_posts/hiveserver2与HQL的执行.md","raw":"---\ntitle: hiveserver2与hiveSQL的执行\ncatalog: true\ndate: 2000-03-31 16:28:17\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- \n---\n","slug":"hiveserver2与HQL的执行","published":1,"updated":"2020-04-07T09:26:57.153Z","_id":"ck8pp9894000jqssox7k0g4hr","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck8ohfh7e0007pb0jlnx9ufqa","tag_id":"ck8ohfh7j0009pb0j7v6axoyj","_id":"ck8ohfh7w000ipb0jnvtm3o99"},{"post_id":"ck8ohfh7e0007pb0jlnx9ufqa","tag_id":"ck8ohfh7t000dpb0jlnsgzoho","_id":"ck8ohfh7x000kpb0j0l4baf2i"},{"post_id":"ck8ohfh7w000hpb0j09gnep9k","tag_id":"ck8ohfh7v000gpb0j2v150vut","_id":"ck8ohfh7z000npb0j4u33jqa3"},{"post_id":"ck8ohfh7h0008pb0jhn6nijgg","tag_id":"ck8ohfh7v000gpb0j2v150vut","_id":"ck8ohfh7z000opb0ji1s9a4rr"},{"post_id":"ck8ohfh7s000cpb0j1k6imkye","tag_id":"ck8ohfh7y000lpb0jbx7j2ydu","_id":"ck8ohfh81000spb0jvtkja33j"},{"post_id":"ck8ohfh7s000cpb0j1k6imkye","tag_id":"ck8ohfh7z000ppb0jpw2zxmwt","_id":"ck8ohfh81000tpb0ja2bwepd7"},{"post_id":"ck8ohfh7s000cpb0j1k6imkye","tag_id":"ck8ohfh80000qpb0jl2jtr2oy","_id":"ck8ohfh82000vpb0jknjzyxmf"},{"post_id":"ck8ohfh7x000jpb0jm516j23j","tag_id":"ck8ohfh7y000lpb0jbx7j2ydu","_id":"ck8ohfh82000wpb0j21hv2oui"},{"post_id":"ck8ohfh7x000jpb0jm516j23j","tag_id":"ck8ohfh7z000ppb0jpw2zxmwt","_id":"ck8ohfh82000xpb0jscwe5myi"},{"post_id":"ck8ph5x270000qsso0jdnz51m","tag_id":"ck8ohfh7y000lpb0jbx7j2ydu","_id":"ck8ph71gr0002qsso7kukljjj"},{"post_id":"ck8ph5x270000qsso0jdnz51m","tag_id":"ck8pl393x0005qsso0aw40484","_id":"ck8pl393y0006qssohwh2l5bt"},{"post_id":"ck8ph5x270000qsso0jdnz51m","tag_id":"ck8pod83f0009qssojaddkc0m","_id":"ck8pod83g000aqsson0ydkkfq"},{"post_id":"ck8pp8ua2000eqssohgbsuude","tag_id":"ck8pl393x0005qsso0aw40484","_id":"ck8pp8ua3000fqssoofl8yb46"},{"post_id":"ck8pp8ua2000eqssohgbsuude","tag_id":"ck8pod83f0009qssojaddkc0m","_id":"ck8pp8ua3000gqssohhir09rp"},{"post_id":"ck8pp91pa000hqssodlnmdx1y","tag_id":"ck8pl393x0005qsso0aw40484","_id":"ck8pp91pb000iqsso2d0qhb3a"}],"Tag":[{"name":"Python","_id":"ck8ohfh7j0009pb0j7v6axoyj"},{"name":"脚本","_id":"ck8ohfh7t000dpb0jlnsgzoho"},{"name":"Other","_id":"ck8ohfh7v000gpb0j2v150vut"},{"name":"元数据","_id":"ck8ohfh7y000lpb0jbx7j2ydu"},{"name":"大数据","_id":"ck8ohfh7z000ppb0jpw2zxmwt"},{"name":"Mysql","_id":"ck8ohfh80000qpb0jl2jtr2oy"},{"name":"SQL解析","_id":"ck8ph77x30003qssohnhc0zxa"},{"name":"HQL解析","_id":"ck8pl393x0005qsso0aw40484"},{"name":"java","_id":"ck8pm6nyl0007qssoyenhcciw"},{"name":"Java","_id":"ck8pod83f0009qssojaddkc0m"}]}}