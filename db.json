{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/html/yh.html","path":"html/yh.html","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/piano/index.html","path":"piano/index.html","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"source/img/avatar/avatar.jpg","path":"img/avatar/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/book/huozhe.jpg","path":"img/book/huozhe.jpg","modified":0,"renderable":0},{"_id":"source/img/book/shenhe.jpg","path":"img/book/shenhe.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/github.png","path":"img/mypost/github.png","modified":0,"renderable":0},{"_id":"source/img/mypost/kaifazhemoshi.jpg","path":"img/mypost/kaifazhemoshi.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot.jpg","path":"img/mypost/robot.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_classtag.jpg","path":"img/mypost/robot_classtag.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_liuch.jpg","path":"img/mypost/robot_liuch.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_liuch2.jpg","path":"img/mypost/robot_liuch2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shaixuanqi.jpg","path":"img/mypost/robot_shaixuanqi.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_main.jpg","path":"img/mypost/robot_main.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shijian.jpg","path":"img/mypost/robot_shijian.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shiwu.jpg","path":"img/mypost/robot_shiwu.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_small.jpg","path":"img/mypost/robot_small.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/yhback.js","path":"js/yhback.js","modified":0,"renderable":1},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/pyhiveprogress.png","path":"img/mypost/pyhiveprogress.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/header.jpg","path":"img/article_header/header.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/about/resume.pdf","path":"about/resume.pdf","modified":0,"renderable":0},{"_id":"source/about/甘家城后端开发简历.pdf","path":"about/甘家城后端开发简历.pdf","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/operator.png","path":"img/mypost/operator.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.jpg.bak","path":"img/header_img/tag.jpg.bak","modified":0,"renderable":0},{"_id":"source/img/mypost/pynput.png","path":"img/mypost/pynput.png","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_htmltag2.jpg","path":"img/mypost/robot_htmltag2.jpg","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_htmltag.jpg","path":"img/mypost/robot_htmltag.jpg","modified":0,"renderable":0},{"_id":"source/piano/info.json","path":"piano/info.json","modified":0,"renderable":0},{"_id":"source/img/mypost/table_maker.jpg","path":"img/mypost/table_maker.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/tablemaker_main.jpg","path":"img/mypost/tablemaker_main.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/tablemaker_jjjz.jpg","path":"img/mypost/tablemaker_jjjz.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/tablemaker_lie.jpg","path":"img/mypost/tablemaker_lie.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/tablemaker_kongzhu.jpg","path":"img/mypost/tablemaker_kongzhu.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/tablemaker_weather.jpg","path":"img/mypost/tablemaker_weather.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1565959414000},{"_id":"source/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1588687790733},{"_id":"source/favicon.ico","hash":"50a4fd70913caf8501a4f57e44c533951867300d","modified":1588574595932},{"_id":"themes/huweihuang/_config.yml","hash":"00a93beb83ba3758fd03ef60b98b3c917b9fe57f","modified":1588574988789},{"_id":"source/.DS_Store","hash":"5da1c9cff88a0350895effb792fba5a259a2e453","modified":1588073302123},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1565959414000},{"_id":"source/_posts/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","hash":"65c3b23dc993fe19304d40d57b7c65c2a4491b73","modified":1588324250260},{"_id":"source/_posts/article_11_新增两个功能.md","hash":"5419f81bfb3c39c4bc06b4de9517b19cc6b3d38c","modified":1588212363311},{"_id":"source/_posts/article_12_基于antlr4实现HQL的解析-格式化.md","hash":"b44ece57d293d338cddd242f171f63be700d9666","modified":1588394319421},{"_id":"source/_posts/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","hash":"3d9baef55a499fda34a93d5560b0d70ba948cbb2","modified":1588576715396},{"_id":"source/_posts/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘.md","hash":"e19cc46dfab61173072c2d371b0d057882e868a5","modified":1588651726619},{"_id":"source/_posts/article_15_HIVE源码学习-执行计划Operators和优化Optimizers.md","hash":"e89021c8f91004c3c0fa3cdc5ffad28f2ccdcccf","modified":1588573703045},{"_id":"source/_posts/article_16_HIVE源码学习-hivehook尝试血缘解析.md","hash":"0dc91e144bc9e463de25dcc401e8f30b45090245","modified":1588658467139},{"_id":"source/_posts/article_17_HIVE源码学习-实现自定义的udf.md","hash":"e49f30df73e18b1e046153810b5b0c9881a05860","modified":1588845362996},{"_id":"source/_posts/article_18_chrome插件-网页自动化.md","hash":"bbf5e4a78bcc536440d63c5c6ccc80dc65f0bdfb","modified":1589336092410},{"_id":"source/_posts/article_19_chrome插件-万能表格.md","hash":"432b6990b3e7ad574c3e60fa9d1826f312e7e456","modified":1589949469335},{"_id":"source/_posts/article_1_又双叒叕建博客.md","hash":"140d7035c34815b7a3bfc71747cdc5ba5dc4bfdc","modified":1588163749814},{"_id":"source/_posts/article_2_整理晒晒老博客.md","hash":"77ad7b1c909af365e80e577f7508216442f5d3c3","modified":1588163764605},{"_id":"source/_posts/article_3_讲讲元数据.md","hash":"2b0e73f614d68ca465f8ff3384fce80edf5b1050","modified":1588163886573},{"_id":"source/_posts/article_4_pynput实现鼠标键盘操作的监控与还原.md","hash":"a152cdb2d08b673fc82879403da3f0ff5443a4d6","modified":1588163905911},{"_id":"source/_posts/article_5_hive与mysql元数据的快速采集.md","hash":"7166f0455f0b15218cd21132480fa504f5d5b6bc","modified":1588163921478},{"_id":"source/_posts/article_6_基于antlr4实现HQL的解析-元数据.md","hash":"7f2268b1d3a365657a7d2944a2b99293f4fa8ead","modified":1588395534193},{"_id":"source/_posts/article_7_hiveserver2与HQL的执行.md","hash":"1096e5b9331121e1b0fdfb3f17f378d0242a7952","modified":1588163952676},{"_id":"source/_posts/article_8_hiveSQL执行日志的收集.md","hash":"502a9fc285c1a05bce9047d64dadc2319c49ad83","modified":1588163989087},{"_id":"source/_posts/article_9_本地hadoop与hive的部署-mac.md","hash":"694598f75ca99909373c6634bf8c8853050e3288","modified":1588324256535},{"_id":"source/_posts/book_1_《活着》.md","hash":"776794d3a3ca07469a030317a92b8fe6a9c80d84","modified":1588942089968},{"_id":"source/_posts/book_2_《深河》.md","hash":"caa76bdf1cb6972e5c41ce5ae9294b3f2dd3419d","modified":1588942096880},{"_id":"source/_posts/关于spark使用ranger管理数据权限的一些尝试.md","hash":"a8bc0f54d74dfecb9b54810fe4dc81ac80e16acc","modified":1585725959031},{"_id":"source/about/index.md","hash":"788c5b3a6b8f27f5d9a47ef53b9f146c5915314c","modified":1586658326459},{"_id":"source/about/resume copy.md","hash":"1d025efd60c852116529833d2661b80f1a51ad13","modified":1589866421105},{"_id":"source/about/resume.md","hash":"c7de5cc9ab14c8a8b9ea2c2bf74805363d5deb48","modified":1587532496705},{"_id":"source/archive/index.md","hash":"a93b0e38ac60cbbfd12998a14ffa5823f819cb52","modified":1588163303553},{"_id":"source/book/index.md","hash":"709e28c8977f7e6085781ddd6a0ac841cd1b895c","modified":1588394449904},{"_id":"source/about/.DS_Store","hash":"e41b4befb76d188b1184a5b79e010a1b548c5a43","modified":1588122936216},{"_id":"source/html/yh.html","hash":"af70399f5f6148cba7aea9cf78250f35ea86d64e","modified":1589935863654},{"_id":"source/img/.DS_Store","hash":"53e5100e25d2f4467521e8905fd64f95102740eb","modified":1588394075432},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1565959414000},{"_id":"source/piano/index.html","hash":"385d7aea9796491a3815bffa7598214e8acd9835","modified":1588664864515},{"_id":"source/tags/index.md","hash":"1f824dd5e3b3155cc5a7f2ce551c2e90c20bc46d","modified":1573436999687},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1565959414000},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1565959414000},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1565959414000},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1573711106220},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1565959414000},{"_id":"themes/huweihuang/layout/book.ejs","hash":"c1f6996a1df527d40c7329ca471ee40f353ae0b0","modified":1588941828206},{"_id":"themes/huweihuang/layout/index.ejs","hash":"d115b216009b595cb0765c7cfba17b519176b778","modified":1588394449907},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1565959414000},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"5d72805d3d31cc7fb3784cb04dc3f326cc13f64d","modified":1588735835204},{"_id":"themes/huweihuang/layout/page.ejs","hash":"292e18597c1b3d2fed080ac44e89ab93b56d1506","modified":1588162968840},{"_id":"themes/huweihuang/layout/post.ejs","hash":"c6a0319b26ad162b7900423fec601b66c21935c5","modified":1588407676417},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1565959414000},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1565959414000},{"_id":"source/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1573434816161},{"_id":"source/img/book/huozhe.jpg","hash":"9aad04e9902c5b06272b5eae5a2a00a523fe76ad","modified":1588165232602},{"_id":"source/img/book/shenhe.jpg","hash":"6db2dce07e93ec7b8042baa148c093029099bcf1","modified":1588941022861},{"_id":"source/img/article_header/.DS_Store","hash":"bebd7116aad19ba812b7e4793b3741b01d8bc826","modified":1573718348132},{"_id":"source/img/book/.DS_Store","hash":"9eb4e21a8e15c53f23357a84443cc362e391ad0c","modified":1588207806221},{"_id":"source/img/header_img/.DS_Store","hash":"89b6f04ed69798ff277621a0a7e83e62b5b77a26","modified":1573718348134},{"_id":"source/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1573643651388},{"_id":"source/img/mypost/kaifazhemoshi.jpg","hash":"b54a50b353bb91209b0613d4fbc82cf049408782","modified":1589284144984},{"_id":"source/img/mypost/robot.jpg","hash":"980cd39d217de071e5cb82dcbca04c863474dd49","modified":1589284342216},{"_id":"source/img/mypost/robot_classtag.jpg","hash":"c309301e3438849ed9ef7e8ce89f45f85253dbcf","modified":1589285772377},{"_id":"source/img/mypost/.DS_Store","hash":"d566071ea27560f7fc7892c58c73e7dcd2ce05f9","modified":1586480779449},{"_id":"source/img/mypost/robot_liuch.jpg","hash":"ec9c27e7febd74175497d529422897dd96b8dcf4","modified":1589331494080},{"_id":"source/img/mypost/robot_liuch2.jpg","hash":"38ba6e6810b35a754bbcd7da38eaeed4a5bc12e0","modified":1589331755010},{"_id":"source/img/mypost/robot_shaixuanqi.jpg","hash":"278810f5f8e0c797940c7b251338f9707f911119","modified":1589284952296},{"_id":"source/img/mypost/robot_main.jpg","hash":"bfdb52ea45c0c82d44e2249f143ea1f3ab1fcbda","modified":1589284878103},{"_id":"source/img/mypost/robot_shijian.jpg","hash":"b575aa87c0698c94680b4f6c868199cdbc004c09","modified":1589286033344},{"_id":"source/img/mypost/robot_shiwu.jpg","hash":"23051a2118730e3c5ccbee0354a68a0d2acae94e","modified":1589284758766},{"_id":"source/img/mypost/robot_small.jpg","hash":"f0d20b09f74b8ff709d15e49806dd509845b87b4","modified":1589284400429},{"_id":"themes/huweihuang/layout/_partial/background.ejs","hash":"d9c9769c720d0ac22a8b503eec07baace3e29a1a","modified":1589949554066},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"c065b8e3b48e55735be15b61ab99457e9b54fa90","modified":1573696613185},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"397247ebf908e48200acdbba4dea16718e111ad0","modified":1589014630463},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"460729508dbf2f7a9ab101e7cb0a5541a3ec043a","modified":1573697728848},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"f9a682fc9cefba2b1481e49cf93a275b99b724f5","modified":1586655386737},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1565959414000},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"087f6e029ccb7f45b784dbf9327c98dee430a7aa","modified":1588161942347},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1565959414000},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"f6f6a88487326976e7773f798f1c5b518e4a95d0","modified":1588687780318},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1565959414000},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1585642430532},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1585642430534},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1565959414000},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1586426195581},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1565959414000},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1565959414000},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1565959414000},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1565959414000},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1565959414000},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1565959414000},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1565959414000},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1565959414000},{"_id":"themes/huweihuang/source/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1573782787786},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1565959414000},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1565959414000},{"_id":"themes/huweihuang/source/js/yhback.js","hash":"c81f6d02ed26b74791d7e1ab275529f68c694c14","modified":1588394449909},{"_id":"source/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1573717140265},{"_id":"source/img/mypost/pyhiveprogress.png","hash":"23195421b414161860ed88ebb7b58f08b8aea18d","modified":1586426373148},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1565959414000},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1565959414000},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565959414000},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1565959414000},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1565959414000},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1565959414000},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1565959414000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1565959414000},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1565959414000},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1565959414000},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1565959414000},{"_id":"source/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1573717414429},{"_id":"source/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1573717094913},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1565959414000},{"_id":"source/about/resume.pdf","hash":"70a992368c1ae1c24f25525a5a4943a930b32c95","modified":1586867993758},{"_id":"source/about/甘家城后端开发简历.pdf","hash":"812a8c209e9d64a3c0e29fa49e35ce79dfb5782e","modified":1589866503221},{"_id":"source/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1573716891230},{"_id":"source/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1573717157628},{"_id":"source/img/mypost/operator.png","hash":"8b0b073530aea3bd2ae6297b46e7491065cbe498","modified":1588404596240},{"_id":"source/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1573717129072},{"_id":"source/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1584367195000},{"_id":"source/img/mypost/robot_htmltag2.jpg","hash":"d9f55d13e5bc2dec8ba0718d9b1e8412bc69f5cf","modified":1589285459913},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1565959414000},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1565959414000},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1565959414000},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1565959414000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1565959414000},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1565959414000},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1565959414000},{"_id":"source/img/mypost/robot_htmltag.jpg","hash":"9a1a5ff8df4664beefd7a5e9334500deb083c494","modified":1589285199712},{"_id":"source/piano/info.json","hash":"699520d1e200cc4c0f14367fd8444d09bb578ee3","modified":1588664830246},{"_id":"public/baidusitemap.xml","hash":"e9106664161a86ab79399620e2c1b60b7cdbd85d","modified":1589935981023},{"_id":"public/post-sitemap.xml","hash":"62176e2a22305c05580ef2ea25b35078c1ebf5d3","modified":1589935981023},{"_id":"public/page-sitemap.xml","hash":"9511d1b7c522b8a6493de32d3aa8351da3df3255","modified":1589935981233},{"_id":"public/tag-sitemap.xml","hash":"5a649ceb6bf4268ad6801fd85e54777f64c623b6","modified":1589935981234},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1589935981328},{"_id":"public/sitemap.xml","hash":"74fe67d15cda04adad52f54273698059a70a7290","modified":1589935981328},{"_id":"public/404.html","hash":"0199496db9fccc8de655fa9fb1075b4957227d05","modified":1589935981352},{"_id":"public/tags/index.html","hash":"1bf471b404dbb3d84b529bb6ee7db3677b1a2946","modified":1589935981352},{"_id":"public/article/article_18_chrome插件-网页自动化/index.html","hash":"c8a3afd04677936fb30366a0f6ced5959bae0af6","modified":1589935981352},{"_id":"public/article/article_19_chrome插件-万能表格/index.html","hash":"070a848e4720e90195437395b075230a5ed7de28","modified":1589935981352},{"_id":"public/article/book_2_《深河》/index.html","hash":"6f70978dfbf23c8dd11499516b54989e5b65d949","modified":1589935981352},{"_id":"public/article/book_1_《活着》/index.html","hash":"5613226458fbbaa9f44311c60e62eb0f53e8aebb","modified":1589935981352},{"_id":"public/article/article_17_HIVE源码学习-实现自定义的udf/index.html","hash":"ced6a1745670d5a8c02e5ea153d4eb43795cfd9d","modified":1589935981352},{"_id":"public/article/article_16_HIVE源码学习-hivehook尝试血缘解析/index.html","hash":"8919bcb65cde2dacb2902cc72f88c557c57b8b7c","modified":1589935981352},{"_id":"public/article/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘/index.html","hash":"544fe4ab4157f0d8cf24d5e4b0fe0402183a9985","modified":1589935981352},{"_id":"public/article/article_15_HIVE源码学习-执行计划Operators和优化Optimizers/index.html","hash":"0414707716db8d1ddb60cd0bbd613165724fa213","modified":1589935981352},{"_id":"public/article/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化/index.html","hash":"01adbed80dda94ff002d5b264df38a86cc31ba0c","modified":1589935981352},{"_id":"public/article/article_12_基于antlr4实现HQL的解析-格式化/index.html","hash":"edd423d62d6038c751919e655d3b101e79a664fe","modified":1589935981353},{"_id":"public/article/article_11_新增两个功能/index.html","hash":"335363f0d0fc1c858a6d40b059acee4c8d43e045","modified":1589935981353},{"_id":"public/article/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程/index.html","hash":"d33907b68d22b70012fd7f6a781288bbf9e7fbaf","modified":1589935981353},{"_id":"public/article/article_9_本地hadoop与hive的部署-mac/index.html","hash":"e095de62787638442e96bd6e15e90b50f82fd87d","modified":1589935981353},{"_id":"public/article/article_8_hiveSQL执行日志的收集/index.html","hash":"d7bfeb4ce0939cb63fc050b3e2e6baba89ad0392","modified":1589935981353},{"_id":"public/article/article_7_hiveserver2与HQL的执行/index.html","hash":"4de4e467fc083579c8f82b10a9dae8cf902e8e17","modified":1589935981353},{"_id":"public/article/article_6_基于antlr4实现HQL的解析-元数据/index.html","hash":"d66f1522f1f0fb7d62daf1582e27394dd8ab37d1","modified":1589935981353},{"_id":"public/article/article_5_hive与mysql元数据的快速采集/index.html","hash":"8103b2095378e5e36899cdc054ec876239f98ff4","modified":1589935981353},{"_id":"public/article/article_4_pynput实现鼠标键盘操作的监控与还原/index.html","hash":"25abb391e3f44cbc57cda18025a7d1e9f658e82e","modified":1589935981353},{"_id":"public/article/article_3_讲讲元数据/index.html","hash":"a1823fba6e0e4169df21454e6f54c53f746aa0e5","modified":1589935981353},{"_id":"public/article/article_2_整理晒晒老博客/index.html","hash":"335de88dc36ed15fb2a4897f43b4a09aeff639c8","modified":1589935981353},{"_id":"public/article/article_1_又双叒叕建博客/index.html","hash":"5e20d5f8a645b68cc7153c8b16076e02aab2026a","modified":1589935981353},{"_id":"public/article/关于spark使用ranger管理数据权限的一些尝试/index.html","hash":"ba49bc3827b10b385d4bde517a18195ea3bef9c0","modified":1589935981353},{"_id":"public/about/index.html","hash":"4633523e64316c51ae35db9485a23de02347bfe7","modified":1589935981353},{"_id":"public/about/resume copy.html","hash":"3d753ef8595daa15d03c85c913fc4f810127498d","modified":1589935981353},{"_id":"public/about/resume.html","hash":"aad768de7ff61e3481d9dba057ee3be5231ba8f9","modified":1589935981353},{"_id":"public/archive/index.html","hash":"b89550bad7c395cf375199a92b2b91c2dc3ba162","modified":1589935981353},{"_id":"public/book/index.html","hash":"bd02367ae2611b13a499f07e3c0f03e83001c962","modified":1589935981353},{"_id":"public/archives/index.html","hash":"92c1a7e4d3b5bb3a7b13133a7644bee326ac7f8b","modified":1589935981354},{"_id":"public/archives/archives/2/index.html","hash":"d01eb9661f019f6494503b7dd257e469191914b0","modified":1589935981354},{"_id":"public/archives/archives/3/index.html","hash":"28661349a7dac5931135f47c8d2edf3897f0e4b9","modified":1589935981354},{"_id":"public/archives/2000/index.html","hash":"2b77d33efef667879e8692d74df71e1a91d51f52","modified":1589935981354},{"_id":"public/archives/2000/03/index.html","hash":"f355f76a4a6a35d92adc03e54877c8421fbeec04","modified":1589935981354},{"_id":"public/archives/2019/index.html","hash":"cd675063733a0c6416c952f644c19f43b6ddf83a","modified":1589935981354},{"_id":"public/archives/2019/11/index.html","hash":"12e0602e3f59c4cff14b875c6028117dcfb735f1","modified":1589935981354},{"_id":"public/archives/2020/index.html","hash":"5bf7fa456754be1d1cee3cbb2100ba9afb12785b","modified":1589935981354},{"_id":"public/archives/2020/archives/2/index.html","hash":"97012feb8025443ad6c9f9c74f653ea16b4ac692","modified":1589935981354},{"_id":"public/archives/2020/02/index.html","hash":"91e930711e6db48fe22febd246cfd51c5e89c6c4","modified":1589935981354},{"_id":"public/archives/2020/03/index.html","hash":"f11932c5e9cd5e78fe402974bf4d505f4ee7180f","modified":1589935981354},{"_id":"public/archives/2020/04/index.html","hash":"446e1476cade68e17e385ee8a41f178d8bca80c8","modified":1589935981354},{"_id":"public/archives/2020/05/index.html","hash":"988d86268e0a4db93ed04628370f4fcb0c4c1508","modified":1589935981354},{"_id":"public/index.html","hash":"30a216d4435745e0ac2b9782d8214fbae2d266d6","modified":1589935981354},{"_id":"public/page/2/index.html","hash":"80813bfedb11c447b95b818f03e8cfafaca66c89","modified":1589935981354},{"_id":"public/page/3/index.html","hash":"41639715baeeb3556ae1a3a28cdc0a143a0940df","modified":1589935981354},{"_id":"public/tags/HIVE/index.html","hash":"5e5b2b51238232e49d10fb880c4d2d53f93f2cab","modified":1589935981354},{"_id":"public/tags/HQL解析/index.html","hash":"13159ba37a1c01169faa31dece0f4a7390c1df96","modified":1589935981354},{"_id":"public/tags/JAVA/index.html","hash":"3cf94855e8ae109e760407d14597b3f96548d652","modified":1589935981354},{"_id":"public/tags/OTHER/index.html","hash":"bda66e383db1799f36c0a1e7d102c8c6c26bce79","modified":1589935981355},{"_id":"public/tags/CHROME插件/index.html","hash":"2372230b7e54598a3391f30522dc99f6eaede600","modified":1589935981355},{"_id":"public/tags/元数据/index.html","hash":"c0a03bb0fd7dd1d9fe1d28210909de4418cab180","modified":1589935981355},{"_id":"public/tags/大数据/index.html","hash":"c17d3fc54dea644a09156d67db0227000f889618","modified":1589935981355},{"_id":"public/tags/PYTHON/index.html","hash":"3b04471e0b76e299486e6888ae06d8ba23e04918","modified":1589935981355},{"_id":"public/tags/脚本/index.html","hash":"3851de2cd316a973791ad2eeff9f03c8aeed1dbb","modified":1589935981355},{"_id":"public/tags/MYSQL/index.html","hash":"fd2faafd3fe1c0e60bb514a8ac739e499ba89976","modified":1589935981355},{"_id":"public/tags/YARN/index.html","hash":"4194edb199ad042558960aeeb2f144cbf8212b06","modified":1589935981355},{"_id":"public/tags/HADOOP/index.html","hash":"c0dd1d496d3ec80a48ac48ea932ea88621e1f5da","modified":1589935981355},{"_id":"public/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1589935981367},{"_id":"public/favicon.ico","hash":"50a4fd70913caf8501a4f57e44c533951867300d","modified":1589935981367},{"_id":"public/html/yh.html","hash":"af70399f5f6148cba7aea9cf78250f35ea86d64e","modified":1589935981367},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1589935981367},{"_id":"public/piano/index.html","hash":"385d7aea9796491a3815bffa7598214e8acd9835","modified":1589935981367},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1589935981367},{"_id":"public/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1589935981367},{"_id":"public/img/book/huozhe.jpg","hash":"9aad04e9902c5b06272b5eae5a2a00a523fe76ad","modified":1589935981367},{"_id":"public/img/book/shenhe.jpg","hash":"6db2dce07e93ec7b8042baa148c093029099bcf1","modified":1589935981367},{"_id":"public/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1589935981367},{"_id":"public/img/mypost/kaifazhemoshi.jpg","hash":"b54a50b353bb91209b0613d4fbc82cf049408782","modified":1589935981367},{"_id":"public/img/mypost/robot.jpg","hash":"980cd39d217de071e5cb82dcbca04c863474dd49","modified":1589935981367},{"_id":"public/img/mypost/robot_classtag.jpg","hash":"c309301e3438849ed9ef7e8ce89f45f85253dbcf","modified":1589935981367},{"_id":"public/img/mypost/robot_liuch.jpg","hash":"ec9c27e7febd74175497d529422897dd96b8dcf4","modified":1589935981368},{"_id":"public/img/mypost/robot_liuch2.jpg","hash":"38ba6e6810b35a754bbcd7da38eaeed4a5bc12e0","modified":1589935981368},{"_id":"public/img/mypost/robot_shaixuanqi.jpg","hash":"278810f5f8e0c797940c7b251338f9707f911119","modified":1589935981368},{"_id":"public/img/mypost/robot_main.jpg","hash":"bfdb52ea45c0c82d44e2249f143ea1f3ab1fcbda","modified":1589935981368},{"_id":"public/img/mypost/robot_shijian.jpg","hash":"b575aa87c0698c94680b4f6c868199cdbc004c09","modified":1589935981368},{"_id":"public/img/mypost/robot_small.jpg","hash":"f0d20b09f74b8ff709d15e49806dd509845b87b4","modified":1589935981368},{"_id":"public/img/mypost/robot_shiwu.jpg","hash":"23051a2118730e3c5ccbee0354a68a0d2acae94e","modified":1589935981368},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1589935981368},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1589935981368},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1589935981368},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1589935981368},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1589935981368},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1589935981368},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1589935981368},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1589935981368},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1589935981368},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1589935981368},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1589935981368},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1589935981369},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1589935981370},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1589935981370},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1589935981370},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1589935981370},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1589935981370},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1589935981370},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1589935981370},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1589935981370},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1589935981370},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1589935981370},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1589935981370},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1589935981370},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1589935981370},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1589935981370},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1589935981370},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1589935981371},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1589935981371},{"_id":"public/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1589935981553},{"_id":"public/img/mypost/pyhiveprogress.png","hash":"23195421b414161860ed88ebb7b58f08b8aea18d","modified":1589935981555},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1589935981556},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1589935981556},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1589935981556},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1589935981556},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1589935981556},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1589935981557},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1589935981557},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1589935981557},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1589935981557},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1589935981574},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1589935981574},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1589935981574},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1589935981574},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1589935981574},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1589935981574},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1589935981574},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1589935981574},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1589935981574},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1589935981575},{"_id":"public/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1589935981575},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1589935981575},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1589935981575},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1589935981575},{"_id":"public/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1589935981575},{"_id":"public/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1589935981575},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1589935981575},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1589935981575},{"_id":"public/js/yhback.js","hash":"c81f6d02ed26b74791d7e1ab275529f68c694c14","modified":1589935981576},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1589935981576},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1589935981576},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1589935981576},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1589935981576},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1589935981576},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1589935981576},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1589935981577},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1589935981577},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1589935981612},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1589935981612},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1589935981632},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1589935981649},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1589935981649},{"_id":"public/img/mypost/operator.png","hash":"8b0b073530aea3bd2ae6297b46e7491065cbe498","modified":1589935981649},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1589935981660},{"_id":"public/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1589935981660},{"_id":"public/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1589935981660},{"_id":"public/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1589935981661},{"_id":"public/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1589935981664},{"_id":"public/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1589935981664},{"_id":"public/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1589935981728},{"_id":"public/about/甘家城后端开发简历.pdf","hash":"812a8c209e9d64a3c0e29fa49e35ce79dfb5782e","modified":1589935981739},{"_id":"public/about/resume.pdf","hash":"70a992368c1ae1c24f25525a5a4943a930b32c95","modified":1589935981739},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1589935981741},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1589935981755},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1589935981764},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1589935981764},{"_id":"public/img/mypost/robot_htmltag2.jpg","hash":"d9f55d13e5bc2dec8ba0718d9b1e8412bc69f5cf","modified":1589935981775},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1589935981781},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1589935981802},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1589935981808},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1589935981810},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1589935981817},{"_id":"public/img/mypost/robot_htmltag.jpg","hash":"9a1a5ff8df4664beefd7a5e9334500deb083c494","modified":1589935981822},{"_id":"public/piano/info.json","hash":"699520d1e200cc4c0f14367fd8444d09bb578ee3","modified":1589935981853},{"_id":"source/img/mypost/tablemaker_lie.jpg","hash":"f4321bb6f2e2cd6a9187dc62441ed8a98f4d1eec","modified":1589942017214},{"_id":"source/img/mypost/tablemaker_kongzhu.jpg","hash":"409134c347ba869968bcca68672e381de5afd77e","modified":1589942354163},{"_id":"source/img/mypost/table_maker.jpg","hash":"66a4d6be2a06cbcca114933b2a0c31be9e052905","modified":1589939394553},{"_id":"source/img/mypost/tablemaker_main.jpg","hash":"ab90ef048ba167f815f7554c738f1665f792062e","modified":1589939771914},{"_id":"source/img/mypost/tablemaker_jjjz.jpg","hash":"255c8699446ba39b2407c11ecb098730cdf77fbb","modified":1589940206632},{"_id":"source/img/mypost/tablemaker_weather.jpg","hash":"05e6e07ef7c85a2c60a600b0ef08e9657a694ef6","modified":1589949131189}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-11-10T11:55:31.061Z","updated":"2019-08-16T12:43:34.000Z","path":"404.html","title":"","comments":1,"_id":"ckaemtxn00000x8sozdatz5ty","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-11-11T02:00:00.000Z","description":"","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n> [我的简历 HTML](/about/resume.html)  \n> [我的简历 PDF](/about/resume.pdf)","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-11-11 10:00:00\ndescription: \"\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n> [我的简历 HTML](/about/resume.html)  \n> [我的简历 PDF](/about/resume.pdf)","updated":"2020-04-12T02:25:26.459Z","path":"about/index.html","comments":1,"_id":"ckaemtxo10002x8so57aqmvlj","content":"<h2 id=\"关于我\">关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2 id=\"技术栈历程\">技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2 id=\"联系我\">联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<blockquote>\n<p><a href=\"/about/resume.html\">我的简历 HTML</a><br>\n<a href=\"/about/resume.pdf\">我的简历 PDF</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2>关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2>技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2>联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<blockquote>\n<p><a href=\"/about/resume.html\">我的简历 HTML</a><br>\n<a href=\"/about/resume.pdf\">我的简历 PDF</a></p>\n</blockquote>\n"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","source":"about/resume copy.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","updated":"2020-05-19T05:33:41.105Z","path":"about/resume copy.html","title":"","comments":1,"_id":"ckaemtxo60004x8soccdzfwsd","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据采集与数据地图\">元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3 id=\"自助查询与敏捷分析\">自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：大数据平台开发 / 后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！\n","source":"about/resume.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：大数据平台开发 / 后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！\n","updated":"2020-04-22T05:14:56.705Z","path":"about/resume.html","title":"","comments":1,"_id":"ckaemtxoa0007x8so3ec5ia3v","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：大数据平台开发 / 后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据采集与数据地图\">元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3 id=\"自助查询与敏捷分析\">自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：大数据平台开发 / 后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---","updated":"2020-04-29T12:28:23.553Z","path":"archive/index.html","_id":"ckaemtxoc0009x8soqq050hq6","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"book","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is book","aplayer":false,"fixed":false,"_content":"","source":"book/index.md","raw":"---\nlayout: \"book\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is book\"\naplayer: false\nfixed: false\n---","updated":"2020-05-02T04:40:49.904Z","path":"book/index.html","title":"","_id":"ckaemtxog000cx8sosnfw9htu","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2019-11-11T01:49:59.687Z","updated":"2019-11-11T01:49:59.687Z","path":"tags/index.html","comments":1,"_id":"ckaemtxpq0025x8sombvoccf2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HIVE源码学习--从CliDriver跟踪整个执行流程","catalog":true,"date":"2020-04-28T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","source":"_posts/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","raw":"---\ntitle: HIVE源码学习--从CliDriver跟踪整个执行流程\ncatalog: true\ndate: 2020-04-28 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","slug":"article_10_HIVE源码学习-从CliDriver跟踪整个执行流程","published":1,"updated":"2020-05-01T09:10:50.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxnz0001x8sowler0uaj","content":"<h2 id=\"前言\">前言</h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2 id=\"准备工作\">准备工作</h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2 id=\"show-code\">SHOW CODE</h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"特别感谢\">特别感谢</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\" target=\"_blank\" rel=\"noopener\">csdn大佬</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2>准备工作</h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2>SHOW CODE</h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2>特别感谢</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\" target=\"_blank\" rel=\"noopener\">csdn大佬</a></li>\n</ul>\n"},{"title":"基于antlr4实现HQL的解析[格式化]","catalog":true,"date":"2020-04-30T10:24:56.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","source":"_posts/article_12_基于antlr4实现HQL的解析-格式化.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[格式化]'\ncatalog: true\ndate: 2020-04-30 18:24:56\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- JAVA\n---\n\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","slug":"article_12_基于antlr4实现HQL的解析-格式化","published":1,"updated":"2020-05-02T04:38:39.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxo30003x8so82re12n1","content":"<h2 id=\"前言\">前言</h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<h2 id=\"设计思路\">设计思路</h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2 id=\"实现思路\">实现思路</h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3 id=\"主select部分\">主SELECT部分</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select字段\">SELECT字段</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"from来源\">FROM来源</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"where条件\">WHERE条件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关键字大小写处理\">关键字大小写处理</h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3 id=\"sql注释\">sql注释</h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2 id=\"结果展示\">结果展示</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\">附录</h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<h2>设计思路</h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2>实现思路</h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3>主SELECT部分</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>SELECT字段</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>FROM来源</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>WHERE条件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>关键字大小写处理</h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3>sql注释</h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2>结果展示</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2>附录</h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"HIVE源码学习--实现一个自定义的HIVE序列化与反序列化器","catalog":true,"date":"2020-05-01T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>1.2.1</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","source":"_posts/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","raw":"---\ntitle: HIVE源码学习--实现一个自定义的HIVE序列化与反序列化器\ncatalog: true\ndate: 2020-05-01 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>1.2.1</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","slug":"article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化","published":1,"updated":"2020-05-04T07:18:35.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxo90006x8so2mvrh51z","content":"<h2 id=\"前言\">前言</h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2 id=\"实操\">实操</h2>\n<h3 id=\"数据准备\">数据准备</h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建项目myserde\">新建项目myserde</h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建表与调试\">建表与调试</h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于开发时的debug\">关于开发时的debug</h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2 id=\"学习借鉴\">学习借鉴</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\" target=\"_blank\" rel=\"noopener\">Hive系列之SerDe</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2>实操</h2>\n<h3>数据准备</h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3>新建项目myserde</h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>建表与调试</h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2>关于开发时的debug</h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2>学习借鉴</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\" target=\"_blank\" rel=\"noopener\">Hive系列之SerDe</a></li>\n</ul>\n"},{"title":"HIVE源码学习-执行计划Operators和优化Optimizers","catalog":true,"date":"2020-05-02T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 逻辑执行\n\n### 首先看下之前的总体处理流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\nhive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。\n\n### 首先看一个命令explain {SQL}\n可以打印出执行sql对应的OperatorTree,  \n效果如下\n```\nhive> explain select count(1) from test_user group by `name`;\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Map Reduce\n      Map Operator Tree:\n          TableScan\n            alias: test_user\n            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n            Select Operator\n              expressions: name (type: string)\n              outputColumnNames: name\n              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n              Group By Operator\n                aggregations: count(1)\n                keys: name (type: string)\n                mode: hash\n                outputColumnNames: _col0, _col1\n                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                Reduce Output Operator\n                  key expressions: _col0 (type: string)\n                  sort order: +\n                  Map-reduce partition columns: _col0 (type: string)\n                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                  value expressions: _col1 (type: bigint)\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations: count(VALUE._col0)\n          keys: KEY._col0 (type: string)\n          mode: mergepartial\n          outputColumnNames: _col0, _col1\n          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n          Select Operator\n            expressions: _col1 (type: bigint)\n            outputColumnNames: _col0\n            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n            File Output Operator\n              compressed: false\n              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n              table:\n                  input format: org.apache.hadoop.mapred.TextInputFormat\n                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 1.999 seconds, Fetched: 52 row(s)\n```\n\n对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator\n![operator](/img/mypost/operator.png)\n\n### 继续跟踪大法，从Driver的compile开始\n定位到下面这行，进入\n>sem.analyze(tree, ctx);\n\n``` java\npublic void analyze(ASTNode ast, Context ctx) throws SemanticException {\n    ...\n    analyzeInternal(ast); //进入\n}\n```\n\n继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了\n\n``` java\nvoid analyzeInternal(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    // 1. Generate Resolved Parse tree from syntax tree\n    LOG.info(\"Starting Semantic Analysis\");\n    if (!genResolvedParseTree(ast, plannerCtx)) { // 这边将每个AST节点转换为query block，跟进去看看\n      return;\n    }\n    // 2. Gen OP Tree from resolved Parse Tree\n    Operator sinkOp = genOPTree(ast, plannerCtx); //生成OperatorTree\n    ...\n    // 7. Perform Logical optimization\n    // 进行了查询优化\n    Optimizer optm = new Optimizer();\n    optm.setPctx(pCtx);\n    optm.initialize(conf);\n    pCtx = optm.optimize();\n}\n```\n\n``` java\nboolean genResolvedParseTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    ...\n    // 4. continue analyzing from the child ASTNode.\n    Phase1Ctx ctx_1 = initPhase1Ctx();\n    preProcessForInsert(child, qb);\n    if (!doPhase1(child, qb, ctx_1, plannerCtx)) { //这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充\n      // if phase1Result false return\n      return false;\n    }\n    ...\n    getMetaData(qb); //从元数据获取上面explain中如下信息\n                  //table: input，output，serde等\n}\n```\n\n``` java\npublic boolean doPhase1(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)\n      throws SemanticException {\n    ...\n    switch (ast.getToken().getType()) { //判断AST节点类型\n        case HiveParser.TOK_SELECTDI:\n        ...\n        case HiveParser.TOK_SELECT:\n        ...\n        case HiveParser.TOK_WHERE:\n        ...\n        case HiveParser.TOK_INSERT_INTO:\n        ...\n        ...\n    }\n}\n```\n\n继续跟上面的genOPTree，跳转到genPlan\n\ngenPlan是一次如下的深度优先遍历生成树\n\n``` java\nprivate Operator genPlan(QB parent, QBExpr qbexpr) throws SemanticException {\n    if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) {\n      boolean skipAmbiguityCheck = viewSelect == null && parent.isTopLevelSelectStarQuery();\n      return genPlan(qbexpr.getQB(), skipAmbiguityCheck);\n    }\n    if (qbexpr.getOpcode() == QBExpr.Opcode.UNION) {\n      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());\n      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());\n\n      return genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),\n          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);\n    }\n}\n\npublic Operator genPlan(QB qb) throws SemanticException {\n    return genPlan(qb, false);\n}\n\npublic Operator genPlan(QB qb, boolean skipAmbiguityCheck)\n      throws SemanticException {\n    for (String alias : qb.getSubqAliases()) {\n      QBExpr qbexpr = qb.getSubqForAlias(alias);\n      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));\n    }\n    ...\n}\n```\n\n## 优化器\n\n上面也已经涉及到优化器optimizer，  \n\n### optimizer的主要功能\n>（1）将多 multiple join 合并为一个 multi-way join；  \n>（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；  \n>（3）消减不必要的列；   \n>（4）在表扫描操作中推行使用断言（predicate）；  \n>（5）对于已分区的表，消减不必要的分区；  \n>（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。\n\n\n### 追踪Optimizer.initialize\n``` java\npublic void initialize(HiveConf hiveConf) {\n    // 往这里添加优化器，默认加下面两个，其他的根据conf配置添加\n    transformations = new ArrayList<Transform>();\n\n    // Add the additional postprocessing transformations needed if\n    // we are translating Calcite operators into Hive operators.\n    transformations.add(new HiveOpConverterPostProc());\n\n    // Add the transformation that computes the lineage information.\n    transformations.add(new Generator());\n    ...\n}\n\npublic ParseContext optimize() throws SemanticException {\n    // 执行每个优化器Transform的transform信息进行\n    // ParseContext的优化\n    for (Transform t : transformations) {\n        pctx = t.transform(pctx);\n    }\n    return pctx;\n}\n```\n\n## 未完待续，join operator","source":"_posts/article_15_HIVE源码学习-执行计划Operators和优化Optimizers.md","raw":"---\ntitle: HIVE源码学习-执行计划Operators和优化Optimizers\ncatalog: true\ndate: 2020-05-02 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 逻辑执行\n\n### 首先看下之前的总体处理流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\nhive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。\n\n### 首先看一个命令explain {SQL}\n可以打印出执行sql对应的OperatorTree,  \n效果如下\n```\nhive> explain select count(1) from test_user group by `name`;\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Map Reduce\n      Map Operator Tree:\n          TableScan\n            alias: test_user\n            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n            Select Operator\n              expressions: name (type: string)\n              outputColumnNames: name\n              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n              Group By Operator\n                aggregations: count(1)\n                keys: name (type: string)\n                mode: hash\n                outputColumnNames: _col0, _col1\n                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                Reduce Output Operator\n                  key expressions: _col0 (type: string)\n                  sort order: +\n                  Map-reduce partition columns: _col0 (type: string)\n                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                  value expressions: _col1 (type: bigint)\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations: count(VALUE._col0)\n          keys: KEY._col0 (type: string)\n          mode: mergepartial\n          outputColumnNames: _col0, _col1\n          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n          Select Operator\n            expressions: _col1 (type: bigint)\n            outputColumnNames: _col0\n            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n            File Output Operator\n              compressed: false\n              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n              table:\n                  input format: org.apache.hadoop.mapred.TextInputFormat\n                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 1.999 seconds, Fetched: 52 row(s)\n```\n\n对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator\n![operator](/img/mypost/operator.png)\n\n### 继续跟踪大法，从Driver的compile开始\n定位到下面这行，进入\n>sem.analyze(tree, ctx);\n\n``` java\npublic void analyze(ASTNode ast, Context ctx) throws SemanticException {\n    ...\n    analyzeInternal(ast); //进入\n}\n```\n\n继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了\n\n``` java\nvoid analyzeInternal(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    // 1. Generate Resolved Parse tree from syntax tree\n    LOG.info(\"Starting Semantic Analysis\");\n    if (!genResolvedParseTree(ast, plannerCtx)) { // 这边将每个AST节点转换为query block，跟进去看看\n      return;\n    }\n    // 2. Gen OP Tree from resolved Parse Tree\n    Operator sinkOp = genOPTree(ast, plannerCtx); //生成OperatorTree\n    ...\n    // 7. Perform Logical optimization\n    // 进行了查询优化\n    Optimizer optm = new Optimizer();\n    optm.setPctx(pCtx);\n    optm.initialize(conf);\n    pCtx = optm.optimize();\n}\n```\n\n``` java\nboolean genResolvedParseTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    ...\n    // 4. continue analyzing from the child ASTNode.\n    Phase1Ctx ctx_1 = initPhase1Ctx();\n    preProcessForInsert(child, qb);\n    if (!doPhase1(child, qb, ctx_1, plannerCtx)) { //这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充\n      // if phase1Result false return\n      return false;\n    }\n    ...\n    getMetaData(qb); //从元数据获取上面explain中如下信息\n                  //table: input，output，serde等\n}\n```\n\n``` java\npublic boolean doPhase1(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)\n      throws SemanticException {\n    ...\n    switch (ast.getToken().getType()) { //判断AST节点类型\n        case HiveParser.TOK_SELECTDI:\n        ...\n        case HiveParser.TOK_SELECT:\n        ...\n        case HiveParser.TOK_WHERE:\n        ...\n        case HiveParser.TOK_INSERT_INTO:\n        ...\n        ...\n    }\n}\n```\n\n继续跟上面的genOPTree，跳转到genPlan\n\ngenPlan是一次如下的深度优先遍历生成树\n\n``` java\nprivate Operator genPlan(QB parent, QBExpr qbexpr) throws SemanticException {\n    if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) {\n      boolean skipAmbiguityCheck = viewSelect == null && parent.isTopLevelSelectStarQuery();\n      return genPlan(qbexpr.getQB(), skipAmbiguityCheck);\n    }\n    if (qbexpr.getOpcode() == QBExpr.Opcode.UNION) {\n      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());\n      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());\n\n      return genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),\n          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);\n    }\n}\n\npublic Operator genPlan(QB qb) throws SemanticException {\n    return genPlan(qb, false);\n}\n\npublic Operator genPlan(QB qb, boolean skipAmbiguityCheck)\n      throws SemanticException {\n    for (String alias : qb.getSubqAliases()) {\n      QBExpr qbexpr = qb.getSubqForAlias(alias);\n      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));\n    }\n    ...\n}\n```\n\n## 优化器\n\n上面也已经涉及到优化器optimizer，  \n\n### optimizer的主要功能\n>（1）将多 multiple join 合并为一个 multi-way join；  \n>（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；  \n>（3）消减不必要的列；   \n>（4）在表扫描操作中推行使用断言（predicate）；  \n>（5）对于已分区的表，消减不必要的分区；  \n>（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。\n\n\n### 追踪Optimizer.initialize\n``` java\npublic void initialize(HiveConf hiveConf) {\n    // 往这里添加优化器，默认加下面两个，其他的根据conf配置添加\n    transformations = new ArrayList<Transform>();\n\n    // Add the additional postprocessing transformations needed if\n    // we are translating Calcite operators into Hive operators.\n    transformations.add(new HiveOpConverterPostProc());\n\n    // Add the transformation that computes the lineage information.\n    transformations.add(new Generator());\n    ...\n}\n\npublic ParseContext optimize() throws SemanticException {\n    // 执行每个优化器Transform的transform信息进行\n    // ParseContext的优化\n    for (Transform t : transformations) {\n        pctx = t.transform(pctx);\n    }\n    return pctx;\n}\n```\n\n## 未完待续，join operator","slug":"article_15_HIVE源码学习-执行计划Operators和优化Optimizers","published":1,"updated":"2020-05-04T06:28:23.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxob0008x8so6f4zlexm","content":"<h2 id=\"逻辑执行\">逻辑执行</h2>\n<h3 id=\"首先看下之前的总体处理流程\">首先看下之前的总体处理流程</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>hive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。</p>\n<h3 id=\"首先看一个命令explain-sql\">首先看一个命令explain {SQL}</h3>\n<p>可以打印出执行sql对应的OperatorTree,<br>\n效果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; explain select count(1) from test_user group by `name`;</span><br><span class=\"line\">OK</span><br><span class=\"line\">STAGE DEPENDENCIES:</span><br><span class=\"line\">  Stage-1 is a root stage</span><br><span class=\"line\">  Stage-0 depends on stages: Stage-1</span><br><span class=\"line\"></span><br><span class=\"line\">STAGE PLANS:</span><br><span class=\"line\">  Stage: Stage-1</span><br><span class=\"line\">    Map Reduce</span><br><span class=\"line\">      Map Operator Tree:</span><br><span class=\"line\">          TableScan</span><br><span class=\"line\">            alias: test_user</span><br><span class=\"line\">            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            Select Operator</span><br><span class=\"line\">              expressions: name (type: string)</span><br><span class=\"line\">              outputColumnNames: name</span><br><span class=\"line\">              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              Group By Operator</span><br><span class=\"line\">                aggregations: count(1)</span><br><span class=\"line\">                keys: name (type: string)</span><br><span class=\"line\">                mode: hash</span><br><span class=\"line\">                outputColumnNames: _col0, _col1</span><br><span class=\"line\">                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                Reduce Output Operator</span><br><span class=\"line\">                  key expressions: _col0 (type: string)</span><br><span class=\"line\">                  sort order: +</span><br><span class=\"line\">                  Map-reduce partition columns: _col0 (type: string)</span><br><span class=\"line\">                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                  value expressions: _col1 (type: bigint)</span><br><span class=\"line\">      Reduce Operator Tree:</span><br><span class=\"line\">        Group By Operator</span><br><span class=\"line\">          aggregations: count(VALUE._col0)</span><br><span class=\"line\">          keys: KEY._col0 (type: string)</span><br><span class=\"line\">          mode: mergepartial</span><br><span class=\"line\">          outputColumnNames: _col0, _col1</span><br><span class=\"line\">          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">          Select Operator</span><br><span class=\"line\">            expressions: _col1 (type: bigint)</span><br><span class=\"line\">            outputColumnNames: _col0</span><br><span class=\"line\">            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            File Output Operator</span><br><span class=\"line\">              compressed: false</span><br><span class=\"line\">              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              table:</span><br><span class=\"line\">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class=\"line\">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class=\"line\">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class=\"line\"></span><br><span class=\"line\">  Stage: Stage-0</span><br><span class=\"line\">    Fetch Operator</span><br><span class=\"line\">      limit: -1</span><br><span class=\"line\">      Processor Tree:</span><br><span class=\"line\">        ListSink</span><br><span class=\"line\"></span><br><span class=\"line\">Time taken: 1.999 seconds, Fetched: 52 row(s)</span><br></pre></td></tr></table></figure>\n<p>对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator<br>\n<img src=\"/img/mypost/operator.png\" alt=\"operator\"></p>\n<h3 id=\"继续跟踪大法从driver的compile开始\">继续跟踪大法，从Driver的compile开始</h3>\n<p>定位到下面这行，进入</p>\n<blockquote>\n<p>sem.analyze(tree, ctx);</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">analyze</span><span class=\"params\">(ASTNode ast, Context ctx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analyzeInternal(ast); <span class=\"comment\">//进入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">analyzeInternal</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Generate Resolved Parse tree from syntax tree</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Starting Semantic Analysis\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!genResolvedParseTree(ast, plannerCtx)) &#123; <span class=\"comment\">// 这边将每个AST节点转换为query block，跟进去看看</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. Gen OP Tree from resolved Parse Tree</span></span><br><span class=\"line\">    Operator sinkOp = genOPTree(ast, plannerCtx); <span class=\"comment\">//生成OperatorTree</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 7. Perform Logical optimization</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行了查询优化</span></span><br><span class=\"line\">    Optimizer optm = <span class=\"keyword\">new</span> Optimizer();</span><br><span class=\"line\">    optm.setPctx(pCtx);</span><br><span class=\"line\">    optm.initialize(conf);</span><br><span class=\"line\">    pCtx = optm.optimize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">genResolvedParseTree</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 4. continue analyzing from the child ASTNode.</span></span><br><span class=\"line\">    Phase1Ctx ctx_1 = initPhase1Ctx();</span><br><span class=\"line\">    preProcessForInsert(child, qb);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doPhase1(child, qb, ctx_1, plannerCtx)) &#123; <span class=\"comment\">//这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充</span></span><br><span class=\"line\">      <span class=\"comment\">// if phase1Result false return</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    getMetaData(qb); <span class=\"comment\">//从元数据获取上面explain中如下信息</span></span><br><span class=\"line\">                  <span class=\"comment\">//table: input，output，serde等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doPhase1</span><span class=\"params\">(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ast.getToken().getType()) &#123; <span class=\"comment\">//判断AST节点类型</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECTDI:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECT:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_WHERE:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_INSERT_INTO:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟上面的genOPTree，跳转到genPlan</p>\n<p>genPlan是一次如下的深度优先遍历生成树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB parent, QBExpr qbexpr)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> skipAmbiguityCheck = viewSelect == <span class=\"keyword\">null</span> &amp;&amp; parent.isTopLevelSelectStarQuery();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> genPlan(qbexpr.getQB(), skipAmbiguityCheck);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.UNION) &#123;</span><br><span class=\"line\">      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());</span><br><span class=\"line\">      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),</span><br><span class=\"line\">          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> genPlan(qb, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb, <span class=\"keyword\">boolean</span> skipAmbiguityCheck)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String alias : qb.getSubqAliases()) &#123;</span><br><span class=\"line\">      QBExpr qbexpr = qb.getSubqForAlias(alias);</span><br><span class=\"line\">      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器\">优化器</h2>\n<p>上面也已经涉及到优化器optimizer，</p>\n<h3 id=\"optimizer的主要功能\">optimizer的主要功能</h3>\n<blockquote>\n<p>（1）将多 multiple join 合并为一个 multi-way join；<br>\n（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；<br>\n（3）消减不必要的列；<br>\n（4）在表扫描操作中推行使用断言（predicate）；<br>\n（5）对于已分区的表，消减不必要的分区；<br>\n（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。</p>\n</blockquote>\n<h3 id=\"追踪optimizerinitialize\">追踪Optimizer.initialize</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(HiveConf hiveConf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 往这里添加优化器，默认加下面两个，其他的根据conf配置添加</span></span><br><span class=\"line\">    transformations = <span class=\"keyword\">new</span> ArrayList&lt;Transform&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the additional postprocessing transformations needed if</span></span><br><span class=\"line\">    <span class=\"comment\">// we are translating Calcite operators into Hive operators.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> HiveOpConverterPostProc());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the transformation that computes the lineage information.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> Generator());</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ParseContext <span class=\"title\">optimize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行每个优化器Transform的transform信息进行</span></span><br><span class=\"line\">    <span class=\"comment\">// ParseContext的优化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Transform t : transformations) &#123;</span><br><span class=\"line\">        pctx = t.transform(pctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pctx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续join-operator\">未完待续，join operator</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>逻辑执行</h2>\n<h3>首先看下之前的总体处理流程</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>hive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。</p>\n<h3>首先看一个命令explain {SQL}</h3>\n<p>可以打印出执行sql对应的OperatorTree,<br>\n效果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; explain select count(1) from test_user group by `name`;</span><br><span class=\"line\">OK</span><br><span class=\"line\">STAGE DEPENDENCIES:</span><br><span class=\"line\">  Stage-1 is a root stage</span><br><span class=\"line\">  Stage-0 depends on stages: Stage-1</span><br><span class=\"line\"></span><br><span class=\"line\">STAGE PLANS:</span><br><span class=\"line\">  Stage: Stage-1</span><br><span class=\"line\">    Map Reduce</span><br><span class=\"line\">      Map Operator Tree:</span><br><span class=\"line\">          TableScan</span><br><span class=\"line\">            alias: test_user</span><br><span class=\"line\">            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            Select Operator</span><br><span class=\"line\">              expressions: name (type: string)</span><br><span class=\"line\">              outputColumnNames: name</span><br><span class=\"line\">              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              Group By Operator</span><br><span class=\"line\">                aggregations: count(1)</span><br><span class=\"line\">                keys: name (type: string)</span><br><span class=\"line\">                mode: hash</span><br><span class=\"line\">                outputColumnNames: _col0, _col1</span><br><span class=\"line\">                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                Reduce Output Operator</span><br><span class=\"line\">                  key expressions: _col0 (type: string)</span><br><span class=\"line\">                  sort order: +</span><br><span class=\"line\">                  Map-reduce partition columns: _col0 (type: string)</span><br><span class=\"line\">                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                  value expressions: _col1 (type: bigint)</span><br><span class=\"line\">      Reduce Operator Tree:</span><br><span class=\"line\">        Group By Operator</span><br><span class=\"line\">          aggregations: count(VALUE._col0)</span><br><span class=\"line\">          keys: KEY._col0 (type: string)</span><br><span class=\"line\">          mode: mergepartial</span><br><span class=\"line\">          outputColumnNames: _col0, _col1</span><br><span class=\"line\">          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">          Select Operator</span><br><span class=\"line\">            expressions: _col1 (type: bigint)</span><br><span class=\"line\">            outputColumnNames: _col0</span><br><span class=\"line\">            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            File Output Operator</span><br><span class=\"line\">              compressed: false</span><br><span class=\"line\">              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              table:</span><br><span class=\"line\">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class=\"line\">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class=\"line\">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class=\"line\"></span><br><span class=\"line\">  Stage: Stage-0</span><br><span class=\"line\">    Fetch Operator</span><br><span class=\"line\">      limit: -1</span><br><span class=\"line\">      Processor Tree:</span><br><span class=\"line\">        ListSink</span><br><span class=\"line\"></span><br><span class=\"line\">Time taken: 1.999 seconds, Fetched: 52 row(s)</span><br></pre></td></tr></table></figure>\n<p>对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator<br>\n<img src=\"/img/mypost/operator.png\" alt=\"operator\"></p>\n<h3>继续跟踪大法，从Driver的compile开始</h3>\n<p>定位到下面这行，进入</p>\n<blockquote>\n<p>sem.analyze(tree, ctx);</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">analyze</span><span class=\"params\">(ASTNode ast, Context ctx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analyzeInternal(ast); <span class=\"comment\">//进入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">analyzeInternal</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Generate Resolved Parse tree from syntax tree</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Starting Semantic Analysis\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!genResolvedParseTree(ast, plannerCtx)) &#123; <span class=\"comment\">// 这边将每个AST节点转换为query block，跟进去看看</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. Gen OP Tree from resolved Parse Tree</span></span><br><span class=\"line\">    Operator sinkOp = genOPTree(ast, plannerCtx); <span class=\"comment\">//生成OperatorTree</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 7. Perform Logical optimization</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行了查询优化</span></span><br><span class=\"line\">    Optimizer optm = <span class=\"keyword\">new</span> Optimizer();</span><br><span class=\"line\">    optm.setPctx(pCtx);</span><br><span class=\"line\">    optm.initialize(conf);</span><br><span class=\"line\">    pCtx = optm.optimize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">genResolvedParseTree</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 4. continue analyzing from the child ASTNode.</span></span><br><span class=\"line\">    Phase1Ctx ctx_1 = initPhase1Ctx();</span><br><span class=\"line\">    preProcessForInsert(child, qb);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doPhase1(child, qb, ctx_1, plannerCtx)) &#123; <span class=\"comment\">//这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充</span></span><br><span class=\"line\">      <span class=\"comment\">// if phase1Result false return</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    getMetaData(qb); <span class=\"comment\">//从元数据获取上面explain中如下信息</span></span><br><span class=\"line\">                  <span class=\"comment\">//table: input，output，serde等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doPhase1</span><span class=\"params\">(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ast.getToken().getType()) &#123; <span class=\"comment\">//判断AST节点类型</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECTDI:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECT:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_WHERE:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_INSERT_INTO:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟上面的genOPTree，跳转到genPlan</p>\n<p>genPlan是一次如下的深度优先遍历生成树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB parent, QBExpr qbexpr)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> skipAmbiguityCheck = viewSelect == <span class=\"keyword\">null</span> &amp;&amp; parent.isTopLevelSelectStarQuery();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> genPlan(qbexpr.getQB(), skipAmbiguityCheck);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.UNION) &#123;</span><br><span class=\"line\">      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());</span><br><span class=\"line\">      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),</span><br><span class=\"line\">          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> genPlan(qb, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb, <span class=\"keyword\">boolean</span> skipAmbiguityCheck)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String alias : qb.getSubqAliases()) &#123;</span><br><span class=\"line\">      QBExpr qbexpr = qb.getSubqForAlias(alias);</span><br><span class=\"line\">      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>优化器</h2>\n<p>上面也已经涉及到优化器optimizer，</p>\n<h3>optimizer的主要功能</h3>\n<blockquote>\n<p>（1）将多 multiple join 合并为一个 multi-way join；<br>\n（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；<br>\n（3）消减不必要的列；<br>\n（4）在表扫描操作中推行使用断言（predicate）；<br>\n（5）对于已分区的表，消减不必要的分区；<br>\n（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。</p>\n</blockquote>\n<h3>追踪Optimizer.initialize</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(HiveConf hiveConf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 往这里添加优化器，默认加下面两个，其他的根据conf配置添加</span></span><br><span class=\"line\">    transformations = <span class=\"keyword\">new</span> ArrayList&lt;Transform&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the additional postprocessing transformations needed if</span></span><br><span class=\"line\">    <span class=\"comment\">// we are translating Calcite operators into Hive operators.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> HiveOpConverterPostProc());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the transformation that computes the lineage information.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> Generator());</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ParseContext <span class=\"title\">optimize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行每个优化器Transform的transform信息进行</span></span><br><span class=\"line\">    <span class=\"comment\">// ParseContext的优化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Transform t : transformations) &#123;</span><br><span class=\"line\">        pctx = t.transform(pctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pctx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>未完待续，join operator</h2>\n"},{"title":"博客新增两个功能模块","catalog":true,"date":"2020-04-29T13:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","source":"_posts/article_11_新增两个功能.md","raw":"---\ntitle: 博客新增两个功能模块\ncatalog: true\ndate: 2020-04-29 21:31:43\nsubtitle: \nheader-img: \ntags:\n- OTHER\n---\n\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","slug":"article_11_新增两个功能","published":1,"updated":"2020-04-30T02:06:03.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxoe000ax8sogb90rf68","content":"<h2 id=\"入口\">入口</h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\" target=\"_blank\" rel=\"noopener\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2 id=\"我的钢琴屋\">我的钢琴屋</h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3 id=\"实现\">实现</h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2 id=\"我的阅读室\">我的阅读室</h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3 id=\"实现\">实现</h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后一席话\">最后一席话</h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>入口</h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\" target=\"_blank\" rel=\"noopener\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2>我的钢琴屋</h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3>实现</h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2>我的阅读室</h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3>实现</h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2>最后一席话</h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n"},{"title":"HIVE源码学习-hivehook尝试表血缘与字段血缘的解析","catalog":true,"date":"2020-05-04T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n\n## 前言\n\nhive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个\n\n- driver run的时候\n\n- 执行计划semanticAnalyze前后\n\n- 查询放入job之前\n\n- exec前后\n\n- 执行失败时\n\n下面引用一份完整的hive中hook的流程，包括相应的配置项。\n\n``` java\nDriver.run()\n\n=> HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)\n\n=> Driver.compile()\n\n=> HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)\n\n=> SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)\n\n=> HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)\n\n=> QueryString redactor(hive.exec.query.redactor.hooks)\n\n=> QueryPlan Generation\n\n=> Authorization\n\n=> Driver.execute()\n\n=> ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)\n\n=> TaskRunner\n\n=> if failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)\n\n=> ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)\n\n=> HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)\n```\n\n## 血缘解析\n\n这边要举的具体例子为利用hive自带的血缘解析写一个hook。\n\n首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息\n\n因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。\n\n新建一个maven项目,引用hive-exec，版本按照hive的来\n```\n<dependency>\n    <groupId>org.apache.hive</groupId>\n    <artifactId>hive-exec</artifactId>\n    <version>1.2.1</version>\n</dependency>\n```\n\n直接上代码，表和字段级直接都放里面了\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\nimport org.apache.hadoop.hive.ql.hooks.HookContext;\nimport org.apache.hadoop.hive.ql.hooks.LineageInfo;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/4 3:18 下午\n */\npublic class MyLineagehook implements ExecuteWithHookContext {\n\n    private Logger logger = LoggerFactory.getLogger(MyLineagehook.class);\n\n    // 输出表\n    private Set<String> inputTables;\n\n    // 输入表\n    private Set<String> outputTables;\n\n    // 字段血缘 Map \n    // key为输出字段，value为来源字段数组\n    private Map<String, ArrayList<String>> fieldLineage;\n\n    public MyLineagehook() {\n        inputTables = new HashSet<>();\n        outputTables = new HashSet<>();\n        fieldLineage = new HashMap<>();\n    }\n\n    // 处理表的格式为 库.表\n    private String dealOutputTable(Table table) {\n        String dbName = table.getDbName();\n        String tableName = table.getTableName();\n        return dbName != null ? String.format(\"%s.%s\", dbName, tableName) : tableName;\n    }\n\n    // 处理输出字段的格式\n    private String dealDepOutputField(LineageInfo.DependencyKey dependencyKey) {\n        try{\n            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());\n            String field = dependencyKey.getFieldSchema().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal dep output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 处理来源字段的格式\n    private String dealBaseOutputField(LineageInfo.BaseColumnInfo baseColumnInfo) {\n        try{\n            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());\n            String field = baseColumnInfo.getColumn().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal base output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 主要重写的方法，入口，\n    // 血缘的信息在hookContext.getLinfo()\n    // 结构是集合，每个是一个map，代表一个字段的血缘，\n    // 每个map的key为输出字段，value为来源字段\n    // 处理表血缘就直接忽略字段，因为存在set里就避免重复\n    // 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中\n    @Override\n    public void run(HookContext hookContext) {\n        for(Map.Entry<LineageInfo.DependencyKey, LineageInfo.Dependency> dep: hookContext.getLinfo().entrySet()){\n            // 表血缘\n            Optional.ofNullable(dep.getKey())\n                    .map(LineageInfo.DependencyKey::getDataContainer)\n                    .map(LineageInfo.DataContainer::getTable)\n                    .map(this::dealOutputTable)\n                    .ifPresent(outputTables::add);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)\n                            .map(LineageInfo.TableAliasInfo::getTable)\n                            .map(this::dealOutputTable)\n                            .forEach(inputTables::add));\n\n            // 字段血缘\n            String column = Optional.ofNullable(dep.getKey())\n                    .map(this::dealDepOutputField)\n                    .map(aimField -> {\n                        fieldLineage.put(aimField, new ArrayList<>());\n                        return aimField;\n                    }).orElse(null);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream()\n                            .map(this::dealBaseOutputField)\n                            .forEach(item -> {\n                                fieldLineage.get(column).add(item);\n                            }));\n        }\n        System.out.println(\"来源表:\");\n        System.out.println(inputTables);\n        System.out.println(\"输出表:\");\n        System.out.println(outputTables);\n        System.out.println(\"字段血缘:\");\n        System.out.println(fieldLineage.toString());\n    }\n\n}\n\n```\n\n## 使用方法\n\n编译后生成jar文件\n\n\n```\n启动hive\n>hive\n\n添加jar包\n>add jar xxx.jar;\n\n设置hook\n>set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;\n\n运行一个insert语句\n```\n\n效果展示\n\n``` sql\nINSERT OVERWRITE TABLE myuser_info\nSELECT\n    m.id AS id,\n    m.name AS name,\n    mp.phone AS phone,\n    me.email AS email\nFROM\n    myuser m\nLEFT JOIN\n(\n    SELECT\n        *\n    FROM\n        myuser_phone\n) mp\nON m.id=mp.id\nLEFT JOIN\n    myuser_email me\nON m.id=me.id\n```\n\n```\n来源表:\n[default.myuser_phone, default.myuser_email, default.myuser]\n输出表:\n[default.myuser_info]\n字段血缘:\n{default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]}\n```\n\n\n## 总结\n\n这边的实现比直接用antlr4解析方便很多，代码量也比较少。\n\n这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。\n\n还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。\n\n这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。\n\n","source":"_posts/article_16_HIVE源码学习-hivehook尝试血缘解析.md","raw":"---\ntitle: HIVE源码学习-hivehook尝试表血缘与字段血缘的解析\ncatalog: true\ndate: 2020-05-04 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n\n## 前言\n\nhive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个\n\n- driver run的时候\n\n- 执行计划semanticAnalyze前后\n\n- 查询放入job之前\n\n- exec前后\n\n- 执行失败时\n\n下面引用一份完整的hive中hook的流程，包括相应的配置项。\n\n``` java\nDriver.run()\n\n=> HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)\n\n=> Driver.compile()\n\n=> HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)\n\n=> SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)\n\n=> HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)\n\n=> QueryString redactor(hive.exec.query.redactor.hooks)\n\n=> QueryPlan Generation\n\n=> Authorization\n\n=> Driver.execute()\n\n=> ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)\n\n=> TaskRunner\n\n=> if failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)\n\n=> ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)\n\n=> HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)\n```\n\n## 血缘解析\n\n这边要举的具体例子为利用hive自带的血缘解析写一个hook。\n\n首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息\n\n因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。\n\n新建一个maven项目,引用hive-exec，版本按照hive的来\n```\n<dependency>\n    <groupId>org.apache.hive</groupId>\n    <artifactId>hive-exec</artifactId>\n    <version>1.2.1</version>\n</dependency>\n```\n\n直接上代码，表和字段级直接都放里面了\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\nimport org.apache.hadoop.hive.ql.hooks.HookContext;\nimport org.apache.hadoop.hive.ql.hooks.LineageInfo;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/4 3:18 下午\n */\npublic class MyLineagehook implements ExecuteWithHookContext {\n\n    private Logger logger = LoggerFactory.getLogger(MyLineagehook.class);\n\n    // 输出表\n    private Set<String> inputTables;\n\n    // 输入表\n    private Set<String> outputTables;\n\n    // 字段血缘 Map \n    // key为输出字段，value为来源字段数组\n    private Map<String, ArrayList<String>> fieldLineage;\n\n    public MyLineagehook() {\n        inputTables = new HashSet<>();\n        outputTables = new HashSet<>();\n        fieldLineage = new HashMap<>();\n    }\n\n    // 处理表的格式为 库.表\n    private String dealOutputTable(Table table) {\n        String dbName = table.getDbName();\n        String tableName = table.getTableName();\n        return dbName != null ? String.format(\"%s.%s\", dbName, tableName) : tableName;\n    }\n\n    // 处理输出字段的格式\n    private String dealDepOutputField(LineageInfo.DependencyKey dependencyKey) {\n        try{\n            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());\n            String field = dependencyKey.getFieldSchema().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal dep output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 处理来源字段的格式\n    private String dealBaseOutputField(LineageInfo.BaseColumnInfo baseColumnInfo) {\n        try{\n            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());\n            String field = baseColumnInfo.getColumn().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal base output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 主要重写的方法，入口，\n    // 血缘的信息在hookContext.getLinfo()\n    // 结构是集合，每个是一个map，代表一个字段的血缘，\n    // 每个map的key为输出字段，value为来源字段\n    // 处理表血缘就直接忽略字段，因为存在set里就避免重复\n    // 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中\n    @Override\n    public void run(HookContext hookContext) {\n        for(Map.Entry<LineageInfo.DependencyKey, LineageInfo.Dependency> dep: hookContext.getLinfo().entrySet()){\n            // 表血缘\n            Optional.ofNullable(dep.getKey())\n                    .map(LineageInfo.DependencyKey::getDataContainer)\n                    .map(LineageInfo.DataContainer::getTable)\n                    .map(this::dealOutputTable)\n                    .ifPresent(outputTables::add);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)\n                            .map(LineageInfo.TableAliasInfo::getTable)\n                            .map(this::dealOutputTable)\n                            .forEach(inputTables::add));\n\n            // 字段血缘\n            String column = Optional.ofNullable(dep.getKey())\n                    .map(this::dealDepOutputField)\n                    .map(aimField -> {\n                        fieldLineage.put(aimField, new ArrayList<>());\n                        return aimField;\n                    }).orElse(null);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream()\n                            .map(this::dealBaseOutputField)\n                            .forEach(item -> {\n                                fieldLineage.get(column).add(item);\n                            }));\n        }\n        System.out.println(\"来源表:\");\n        System.out.println(inputTables);\n        System.out.println(\"输出表:\");\n        System.out.println(outputTables);\n        System.out.println(\"字段血缘:\");\n        System.out.println(fieldLineage.toString());\n    }\n\n}\n\n```\n\n## 使用方法\n\n编译后生成jar文件\n\n\n```\n启动hive\n>hive\n\n添加jar包\n>add jar xxx.jar;\n\n设置hook\n>set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;\n\n运行一个insert语句\n```\n\n效果展示\n\n``` sql\nINSERT OVERWRITE TABLE myuser_info\nSELECT\n    m.id AS id,\n    m.name AS name,\n    mp.phone AS phone,\n    me.email AS email\nFROM\n    myuser m\nLEFT JOIN\n(\n    SELECT\n        *\n    FROM\n        myuser_phone\n) mp\nON m.id=mp.id\nLEFT JOIN\n    myuser_email me\nON m.id=me.id\n```\n\n```\n来源表:\n[default.myuser_phone, default.myuser_email, default.myuser]\n输出表:\n[default.myuser_info]\n字段血缘:\n{default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]}\n```\n\n\n## 总结\n\n这边的实现比直接用antlr4解析方便很多，代码量也比较少。\n\n这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。\n\n还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。\n\n这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。\n\n","slug":"article_16_HIVE源码学习-hivehook尝试血缘解析","published":1,"updated":"2020-05-05T06:01:07.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxoi000ex8so4ci9nylh","content":"<h2 id=\"前言\">前言</h2>\n<p>hive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个</p>\n<ul>\n<li>\n<p>driver run的时候</p>\n</li>\n<li>\n<p>执行计划semanticAnalyze前后</p>\n</li>\n<li>\n<p>查询放入job之前</p>\n</li>\n<li>\n<p>exec前后</p>\n</li>\n<li>\n<p>执行失败时</p>\n</li>\n</ul>\n<p>下面引用一份完整的hive中hook的流程，包括相应的配置项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver.run()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.compile()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"function\">QueryString <span class=\"title\">redactor</span><span class=\"params\">(hive.exec.query.redactor.hooks)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>=&gt; QueryPlan Generation</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Authorization</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.execute()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; TaskRunner</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"keyword\">if</span> failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)</span><br></pre></td></tr></table></figure>\n<h2 id=\"血缘解析\">血缘解析</h2>\n<p>这边要举的具体例子为利用hive自带的血缘解析写一个hook。</p>\n<p>首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息</p>\n<p>因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。</p>\n<p>新建一个maven项目,引用hive-exec，版本按照hive的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>直接上代码，表和字段级直接都放里面了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.HookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.LineageInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.metastore.api.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/4 3:18 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLineagehook</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecuteWithHookContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(MyLineagehook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; inputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输入表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; outputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段血缘 Map </span></span><br><span class=\"line\">    <span class=\"comment\">// key为输出字段，value为来源字段数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ArrayList&lt;String&gt;&gt; fieldLineage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLineagehook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        outputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        fieldLineage = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表的格式为 库.表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealOutputTable</span><span class=\"params\">(Table table)</span> </span>&#123;</span><br><span class=\"line\">        String dbName = table.getDbName();</span><br><span class=\"line\">        String tableName = table.getTableName();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbName != <span class=\"keyword\">null</span> ? String.format(<span class=\"string\">\"%s.%s\"</span>, dbName, tableName) : tableName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理输出字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealDepOutputField</span><span class=\"params\">(LineageInfo.DependencyKey dependencyKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());</span><br><span class=\"line\">            String field = dependencyKey.getFieldSchema().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal dep output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理来源字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealBaseOutputField</span><span class=\"params\">(LineageInfo.BaseColumnInfo baseColumnInfo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());</span><br><span class=\"line\">            String field = baseColumnInfo.getColumn().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal base output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主要重写的方法，入口，</span></span><br><span class=\"line\">    <span class=\"comment\">// 血缘的信息在hookContext.getLinfo()</span></span><br><span class=\"line\">    <span class=\"comment\">// 结构是集合，每个是一个map，代表一个字段的血缘，</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个map的key为输出字段，value为来源字段</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理表血缘就直接忽略字段，因为存在set里就避免重复</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(HookContext hookContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry&lt;LineageInfo.DependencyKey, LineageInfo.Dependency&gt; dep: hookContext.getLinfo().entrySet())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表血缘</span></span><br><span class=\"line\">            Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(LineageInfo.DependencyKey::getDataContainer)</span><br><span class=\"line\">                    .map(LineageInfo.DataContainer::getTable)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                    .ifPresent(outputTables::add);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)</span><br><span class=\"line\">                            .map(LineageInfo.TableAliasInfo::getTable)</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                            .forEach(inputTables::add));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 字段血缘</span></span><br><span class=\"line\">            String column = Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealDepOutputField)</span><br><span class=\"line\">                    .map(aimField -&gt; &#123;</span><br><span class=\"line\">                        fieldLineage.put(aimField, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> aimField;</span><br><span class=\"line\">                    &#125;).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream()</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealBaseOutputField)</span><br><span class=\"line\">                            .forEach(item -&gt; &#123;</span><br><span class=\"line\">                                fieldLineage.get(column).add(item);</span><br><span class=\"line\">                            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来源表:\"</span>);</span><br><span class=\"line\">        System.out.println(inputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出表:\"</span>);</span><br><span class=\"line\">        System.out.println(outputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字段血缘:\"</span>);</span><br><span class=\"line\">        System.out.println(fieldLineage.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\">使用方法</h2>\n<p>编译后生成jar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动hive</span><br><span class=\"line\">&gt;hive</span><br><span class=\"line\"></span><br><span class=\"line\">添加jar包</span><br><span class=\"line\">&gt;add jar xxx.jar;</span><br><span class=\"line\"></span><br><span class=\"line\">设置hook</span><br><span class=\"line\">&gt;set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;</span><br><span class=\"line\"></span><br><span class=\"line\">运行一个insert语句</span><br></pre></td></tr></table></figure>\n<p>效果展示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> myuser_info</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    m.id <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    m.name <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span>,</span><br><span class=\"line\">    mp.phone <span class=\"keyword\">AS</span> phone,</span><br><span class=\"line\">    me.email <span class=\"keyword\">AS</span> email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    myuser m</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        myuser_phone</span><br><span class=\"line\">) mp</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=mp.id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    myuser_email me</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=me.id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">来源表:</span><br><span class=\"line\">[default.myuser_phone, default.myuser_email, default.myuser]</span><br><span class=\"line\">输出表:</span><br><span class=\"line\">[default.myuser_info]</span><br><span class=\"line\">字段血缘:</span><br><span class=\"line\">&#123;default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结</h2>\n<p>这边的实现比直接用antlr4解析方便很多，代码量也比较少。</p>\n<p>这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。</p>\n<p>还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。</p>\n<p>这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>hive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个</p>\n<ul>\n<li>\n<p>driver run的时候</p>\n</li>\n<li>\n<p>执行计划semanticAnalyze前后</p>\n</li>\n<li>\n<p>查询放入job之前</p>\n</li>\n<li>\n<p>exec前后</p>\n</li>\n<li>\n<p>执行失败时</p>\n</li>\n</ul>\n<p>下面引用一份完整的hive中hook的流程，包括相应的配置项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver.run()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.compile()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"function\">QueryString <span class=\"title\">redactor</span><span class=\"params\">(hive.exec.query.redactor.hooks)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>=&gt; QueryPlan Generation</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Authorization</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.execute()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; TaskRunner</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"keyword\">if</span> failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)</span><br></pre></td></tr></table></figure>\n<h2>血缘解析</h2>\n<p>这边要举的具体例子为利用hive自带的血缘解析写一个hook。</p>\n<p>首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息</p>\n<p>因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。</p>\n<p>新建一个maven项目,引用hive-exec，版本按照hive的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>直接上代码，表和字段级直接都放里面了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.HookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.LineageInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.metastore.api.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/4 3:18 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLineagehook</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecuteWithHookContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(MyLineagehook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; inputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输入表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; outputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段血缘 Map </span></span><br><span class=\"line\">    <span class=\"comment\">// key为输出字段，value为来源字段数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ArrayList&lt;String&gt;&gt; fieldLineage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLineagehook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        outputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        fieldLineage = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表的格式为 库.表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealOutputTable</span><span class=\"params\">(Table table)</span> </span>&#123;</span><br><span class=\"line\">        String dbName = table.getDbName();</span><br><span class=\"line\">        String tableName = table.getTableName();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbName != <span class=\"keyword\">null</span> ? String.format(<span class=\"string\">\"%s.%s\"</span>, dbName, tableName) : tableName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理输出字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealDepOutputField</span><span class=\"params\">(LineageInfo.DependencyKey dependencyKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());</span><br><span class=\"line\">            String field = dependencyKey.getFieldSchema().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal dep output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理来源字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealBaseOutputField</span><span class=\"params\">(LineageInfo.BaseColumnInfo baseColumnInfo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());</span><br><span class=\"line\">            String field = baseColumnInfo.getColumn().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal base output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主要重写的方法，入口，</span></span><br><span class=\"line\">    <span class=\"comment\">// 血缘的信息在hookContext.getLinfo()</span></span><br><span class=\"line\">    <span class=\"comment\">// 结构是集合，每个是一个map，代表一个字段的血缘，</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个map的key为输出字段，value为来源字段</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理表血缘就直接忽略字段，因为存在set里就避免重复</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(HookContext hookContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry&lt;LineageInfo.DependencyKey, LineageInfo.Dependency&gt; dep: hookContext.getLinfo().entrySet())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表血缘</span></span><br><span class=\"line\">            Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(LineageInfo.DependencyKey::getDataContainer)</span><br><span class=\"line\">                    .map(LineageInfo.DataContainer::getTable)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                    .ifPresent(outputTables::add);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)</span><br><span class=\"line\">                            .map(LineageInfo.TableAliasInfo::getTable)</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                            .forEach(inputTables::add));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 字段血缘</span></span><br><span class=\"line\">            String column = Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealDepOutputField)</span><br><span class=\"line\">                    .map(aimField -&gt; &#123;</span><br><span class=\"line\">                        fieldLineage.put(aimField, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> aimField;</span><br><span class=\"line\">                    &#125;).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream()</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealBaseOutputField)</span><br><span class=\"line\">                            .forEach(item -&gt; &#123;</span><br><span class=\"line\">                                fieldLineage.get(column).add(item);</span><br><span class=\"line\">                            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来源表:\"</span>);</span><br><span class=\"line\">        System.out.println(inputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出表:\"</span>);</span><br><span class=\"line\">        System.out.println(outputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字段血缘:\"</span>);</span><br><span class=\"line\">        System.out.println(fieldLineage.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>使用方法</h2>\n<p>编译后生成jar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动hive</span><br><span class=\"line\">&gt;hive</span><br><span class=\"line\"></span><br><span class=\"line\">添加jar包</span><br><span class=\"line\">&gt;add jar xxx.jar;</span><br><span class=\"line\"></span><br><span class=\"line\">设置hook</span><br><span class=\"line\">&gt;set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;</span><br><span class=\"line\"></span><br><span class=\"line\">运行一个insert语句</span><br></pre></td></tr></table></figure>\n<p>效果展示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> myuser_info</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    m.id <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    m.name <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span>,</span><br><span class=\"line\">    mp.phone <span class=\"keyword\">AS</span> phone,</span><br><span class=\"line\">    me.email <span class=\"keyword\">AS</span> email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    myuser m</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        myuser_phone</span><br><span class=\"line\">) mp</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=mp.id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    myuser_email me</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=me.id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">来源表:</span><br><span class=\"line\">[default.myuser_phone, default.myuser_email, default.myuser]</span><br><span class=\"line\">输出表:</span><br><span class=\"line\">[default.myuser_info]</span><br><span class=\"line\">字段血缘:</span><br><span class=\"line\">&#123;default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]&#125;</span><br></pre></td></tr></table></figure>\n<h2>总结</h2>\n<p>这边的实现比直接用antlr4解析方便很多，代码量也比较少。</p>\n<p>这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。</p>\n<p>还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。</p>\n<p>这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。</p>\n"},{"title":"HIVE源码学习--实现自定义的UDF，UDAF，UDTF","catalog":true,"date":"2020-05-07T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n# 前言\n\nhive里有三种可以自定义实现的函数，\n> 自定义函数包括三种 UDF、UDAF、UDTF\n> - UDF（User-Defined-Function） 一进一出 ，既一行进一行出  \n> - UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min \n> - UDTF（User-Defined Table-Generating Functions）一进多出，如 explore() ","source":"_posts/article_17_HIVE源码学习-实现自定义的udf.md","raw":"---\ntitle: HIVE源码学习--实现自定义的UDF，UDAF，UDTF\ncatalog: true\ndate: 2020-05-07 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n# 前言\n\nhive里有三种可以自定义实现的函数，\n> 自定义函数包括三种 UDF、UDAF、UDTF\n> - UDF（User-Defined-Function） 一进一出 ，既一行进一行出  \n> - UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min \n> - UDTF（User-Defined Table-Generating Functions）一进多出，如 explore() ","slug":"article_17_HIVE源码学习-实现自定义的udf","published":1,"updated":"2020-05-07T09:56:02.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxok000gx8soy4e2zshx","content":"<h1 id=\"前言\">前言</h1>\n<p>hive里有三种可以自定义实现的函数，</p>\n<blockquote>\n<p>自定义函数包括三种 UDF、UDAF、UDTF</p>\n<ul>\n<li>UDF（User-Defined-Function） 一进一出 ，既一行进一行出</li>\n<li>UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min</li>\n<li>UDTF（User-Defined Table-Generating Functions）一进多出，如 explore()</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>前言</h1>\n<p>hive里有三种可以自定义实现的函数，</p>\n<blockquote>\n<p>自定义函数包括三种 UDF、UDAF、UDTF</p>\n<ul>\n<li>UDF（User-Defined-Function） 一进一出 ，既一行进一行出</li>\n<li>UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min</li>\n<li>UDTF（User-Defined Table-Generating Functions）一进多出，如 explore()</li>\n</ul>\n</blockquote>\n"},{"title":"基于antlr4实现hiveSQL的解析[表血缘和字段血缘]","catalog":true,"date":"2020-05-02T08:25:06.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n关于HiveSQL血缘，一般表示的就是hive数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义SQL任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。\n\n有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。\n\n## 实现思路\n\n一般来说比较直接的实现方式是hivehook的LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了hive自带的antlr3的hql解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用hivehook实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。\n\n这边就考虑用antlr4配合hive内部的Hplsql.g4直接实现一个血缘的解析。实现方式还是visit模式。\n\n### 表血缘\n\n首先表血缘是比较之间简单的，比如对于一个insert来说，目标表永远只有一个，来源表是select中所有from的真实表。\n\n### 字段血缘\n\n对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。\n\n这边最后的考虑是将每个select剥离出来存成一个object，其中包括来源表(来源子select则为null)，select字段，父select的Index(第一层则为null)。在解析完成后所有select的object存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。\n\n## SHOW CODE\n\n### 表血缘\n\n首先定义好结构\n\n``` java\n// 表名的结构\npublic class TableNameModel {\n    private String dbName;\n    private String tableName;\n\n    public static TableNameModel parseTableName(String tableName) {\n        TableNameModel tableNameModel = new TableNameModel();\n        String[] splitTable = tableName.split(\"\\\\.\");\n        if(splitTable.length == 2) {\n            tableNameModel.setDbName(splitTable[0]);\n            tableNameModel.setTableName(splitTable[1]);\n        }else if(splitTable.length == 1) {\n            tableNameModel.setTableName(splitTable[0]);\n        }\n        return tableNameModel;\n    }\n}\n\n// 表血缘结构，对单个sql\npublic class HiveTableLineageModel {\n    // 输出的表名\n    private TableNameModel outputTable;\n    // 输入的表名列表\n    private HashSet<TableNameModel> inputTables;\n}\n\n```\n\n表血缘主要过程，监听insert语句\n\n``` java\npublic class HiveSQLTableLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n    private HashSet<TableNameModel> inputTables = new HashSet<>();\n\n    // visitInsert获取insert的table_name节点，作为目标输出表\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n         outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    // 获取from真实表，加到来源表的Set里\n    @Override\n    public Object visitFrom_table_clause(HplsqlParser.From_table_clauseContext ctx) {\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .map(inputTables::add);\n        return super.visitFrom_table_clause(ctx);\n    }\n\n    public HiveTableLineageModel getTableLineage() {\n        HiveTableLineageModel hiveTableLineageModel = new HiveTableLineageModel();\n        hiveTableLineageModel.setOutputTable(outputTable);\n        hiveTableLineageModel.setInputTables(inputTables);\n        return hiveTableLineageModel;\n    }\n\n}\n```\n\n### 字段血缘\n\n定义结构\n\n``` java\n// 字段名\npublic class FieldNameModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n}\n\n// 带过程的表字段\npublic class FieldNameWithProcessModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n    private String process;\n}\n\n// 解析单个select中存储字段和别名\n// 如：select a+b as c from table;\n// 存储数据为 fieldNames:[a,b] alias:c process:a+b\npublic class HiveFieldLineageSelectItemModel {\n    private Set<String> fieldNames;\n    private String alias;\n    private String process;\n}\n\n// 解析单个select后的结果\npublic class HiveFieldLineageSelectModel {\n    Integer id; // index\n    Integer parentId; // 父id，第一层select为null\n    TableNameModel fromTable; // 来源表，来源子select则为null\n    String tableAlias; // 表别名\n    List<HiveFieldLineageSelectItemModel> selectItems; // select字段\n}\n\n// 血缘结果结构\npublic class HiveFieldLineageModel {\n    private FieldNameModel targetField; // 目标字段\n    private HashSet<FieldNameModel> sourceFields; // 来源字段列表\n}\n\n```\n\n字段血缘主要过程,主要针对的是insert语句，  \n但一般的select也是可以用的，因为是把最外层select的字段作为结果字段,  \n有一个限制是中间不能有select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。   \n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。\n\n``` java\npublic class HiveSQLFieldLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n\n    private HashMap<String, HiveFieldLineageSelectModel> hiveFieldSelects = new LinkedHashMap<>();\n\n    private Map<Integer, String> selectParentKeyMap = new HashMap<>();\n\n    private String thisSelectId;\n\n    private String sourceSQL;\n\n    // for select Item\n    private HiveFieldLineageSelectItemModel selectItemModel;\n    private List<HiveFieldLineageSelectItemModel> selectFields = new ArrayList<>();\n    private Boolean startSelectItem = false;\n\n    public HiveSQLFieldLineage(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    /**\n     * insert解析结果表\n     */\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n        outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    /**\n     * 解析select每个selectItem里用到字段\n     */\n    @Override\n    public Object visitExpr(HplsqlParser.ExprContext ctx) {\n        if(startSelectItem) {\n            Optional.ofNullable(ctx)\n                    .map(HplsqlParser.ExprContext::expr_atom)\n                    .map(HplsqlParser.Expr_atomContext::ident)\n                    .map(ParseTree::getText)\n                    .ifPresent(s -> {\n                        if(!StringUtils.isNumeric(s)) {\n                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));\n                        }\n                    });\n        }\n        return super.visitExpr(ctx);\n    }\n\n    /**\n     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames\n     */\n    @Override\n    public Object visitSelect_list_item(HplsqlParser.Select_list_itemContext ctx) {\n        startSelectItem = true;\n        selectItemModel = new HiveFieldLineageSelectItemModel();\n        selectItemModel.setFieldNames(new HashSet<>());\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(this::subSourceSql)\n                .ifPresent(selectItemModel::setProcess);\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                .map(HplsqlParser.Select_list_aliasContext::ident)\n                .map(RuleContext::getText)\n                .ifPresent(selectItemModel::setAlias);\n        Object visit = super.visitSelect_list_item(ctx);\n        selectFields.add(selectItemModel);\n        return visit;\n    }\n\n    /**\n     * from语句，处理于所有selectItem结束\n     * 对上面解析出的字段名中的表别名进行处理 如t0.field\n     */\n    @Override\n    public Object visitFrom_clause(HplsqlParser.From_clauseContext ctx) {\n        startSelectItem = false;\n        HashMap<String, List<HiveFieldLineageSelectItemModel>> fieldItems = new HashMap<>();\n        for(HiveFieldLineageSelectItemModel item: selectFields) {\n            HashMap<String, HashSet<String>> aliasSet = new HashMap<>();\n            for(String field: item.getFieldNames()) {\n                String[] sp = field.split(\"\\\\.\");\n                if(sp.length == 2){\n                    String key = thisSelectId + \"_\" + sp[0];\n                    aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                    aliasSet.get(key).add(sp[1]);\n                }else if(sp.length == 1){\n                    boolean flat = true;\n                    for(String k: selectParentKeyMap.values()) {\n                        if(k.startsWith(thisSelectId + \"_\")) {\n                            aliasSet.computeIfAbsent(k, t -> new HashSet<>());\n                            aliasSet.get(k).add(sp[0]);\n                            flat=false;\n                        }\n                    }\n                    if(flat) {\n                        String key = thisSelectId + \"_\";\n                        aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                        aliasSet.get(key).add(sp[0]);\n                    }\n                }\n            }\n            for(String key: aliasSet.keySet()) {\n                fieldItems.computeIfAbsent(key, k -> new ArrayList<>());\n                HiveFieldLineageSelectItemModel selectItemModel = new HiveFieldLineageSelectItemModel();\n                selectItemModel.setFieldNames(aliasSet.get(key));\n                selectItemModel.setAlias(item.getAlias());\n                selectItemModel.setProcess(item.getProcess());\n                if(selectItemModel.getFieldNames().size() == 1 && selectItemModel.getAlias() == null) {\n                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());\n                }\n                fieldItems.get(key).add(selectItemModel);\n            }\n        }\n        for(String key: fieldItems.keySet()) {\n            if(hiveFieldSelects.get(key) != null) {\n                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));\n            }\n        }\n        return super.visitFrom_clause(ctx);\n    }\n\n    /**\n     * 进入select前\n     * 解析每个select存信息并另存父子关系\n     * 父子来源于from subSelect, join subSelect\n     */\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        List<HplsqlParser.Fullselect_stmt_itemContext> selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();\n        for(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) {\n            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = new HiveFieldLineageSelectModel();\n            Integer thisId = selectItem.getStart().getStartIndex();\n            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();\n            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                    .orElse(null);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                    .map(RuleContext::getText)\n                    .map(TableNameModel::parseTableName)\n                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                    .map(HplsqlParser.From_alias_clauseContext::ident)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            String alias = hiveFieldLineageSelectModel.getTableAlias();\n            String thisKey = String.format(\"%s_%s\", thisId, alias == null ? \"\": alias);\n            hiveFieldLineageSelectModel.setId(thisKey + \"\");\n            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));\n            hiveFieldLineageSelectModel.setSelectItems(new ArrayList<>());\n            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                    .ifPresent(subSelects ->\n                            subSelects.forEach(item ->\n                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));\n\n            List<HplsqlParser.From_join_clauseContext> fromJoinClauses = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .orElse(new ArrayList<>());\n            for(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) {\n                HiveFieldLineageSelectModel joinSelect = new HiveFieldLineageSelectModel();\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                        .map(RuleContext::getText)\n                        .map(TableNameModel::parseTableName)\n                        .ifPresent(joinSelect::setFromTable);\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                        .map(HplsqlParser.From_alias_clauseContext::ident)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                String jalias = joinSelect.getTableAlias();\n                String jkey = String.format(\"%s_%s\", thisId, jalias == null ? \"\": jalias);\n                joinSelect.setId(jkey);\n                joinSelect.setParentId(selectParentKeyMap.get(thisId));\n                joinSelect.setSelectItems(new ArrayList<>());\n                hiveFieldSelects.put(jkey, joinSelect);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                        .ifPresent(subSelects ->\n                                subSelects.forEach(item ->\n                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));\n            }\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n\n    /**\n     * 处理每个子select进入前，\n     * 初始化selectItem相关的变量\n     */\n    @Override\n    public Object visitSubselect_stmt(HplsqlParser.Subselect_stmtContext ctx) {\n        thisSelectId = ctx.getStart().getStartIndex() + \"\";\n        selectFields = new ArrayList<>();\n        return super.visitSubselect_stmt(ctx);\n    }\n\n    private List<HiveFieldLineageSelectModel> hiveFieldSelectList = new ArrayList<>();\n\n    /**\n     * 转换HashMap存储为List\n     */\n    private void transSelectToList() {\n        for(String key: hiveFieldSelects.keySet()) {\n            hiveFieldSelectList.add(hiveFieldSelects.get(key));\n        }\n    }\n\n    /**\n     * 获取目标字段\n     * 也就是parentId为null的最外层select的字段别名\n     */\n    private List<FieldNameModel> getTargetFields() {\n        List<List<String>> items = hiveFieldSelectList.stream()\n                .filter(item -> item.getParentId() == null)\n                .map(HiveFieldLineageSelectModel::getSelectItems)\n                .map(fields -> fields.stream()\n                        .map(HiveFieldLineageSelectItemModel::getAlias)\n                        .collect(Collectors.toList()))\n                .collect(Collectors.toList());\n        List<String> res = new ArrayList<>();\n        for(List<String> item: items) {\n            res.addAll(item);\n        }\n        res = res.stream().distinct().collect(Collectors.toList());\n        List<FieldNameModel> fieldNameModels = new ArrayList<>();\n        for(String i: res) {\n            FieldNameModel fieldNameModel = new FieldNameModel();\n            if(outputTable != null) {\n                fieldNameModel.setDbName(outputTable.getDbName());\n                fieldNameModel.setTableName(outputTable.getTableName());\n            }\n            fieldNameModel.setFieldName(i);\n            fieldNameModels.add(fieldNameModel);\n        }\n        return fieldNameModels;\n    }\n\n    private HashSet<FieldNameWithProcessModel> sourceFields;\n    private String fieldProcess = \"\";\n\n    /**\n     * 递归按每个字段从外到内寻找每个字段的来源\n     * 逻辑为最外的字段别名，父id -> 匹配子id别名 ->\n     * -> 如果是来源是表，存储，如果来源是子select，继续递归\n     */\n    private void findFieldSource(String targetField, String parentId) {\n        hiveFieldSelectList.forEach(select -> {\n            if((parentId == null && select.getParentId() == null) ||\n                    (select.getParentId() != null && select.getParentId().equals(parentId))) {\n                if(select.getSelectItems() != null) {\n                    if(select.getFromTable() == null) {\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    findFieldSource(field, select.getId());\n                                }\n                            }\n                        });\n                    }else{\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    FieldNameWithProcessModel fieldNameWithProcessModel = new FieldNameWithProcessModel();\n                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());\n                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());\n                                    fieldNameWithProcessModel.setFieldName(field);\n                                    fieldNameWithProcessModel.setProcess(fieldProcess);\n                                    sourceFields.add(fieldNameWithProcessModel);\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取字段血缘列表\n     */\n    public List<HiveFieldLineageModel> getHiveFieldLineage() {\n        transSelectToList();\n        List<FieldNameModel> targetFields = getTargetFields();\n        List<HiveFieldLineageModel> hiveFieldLineageModelList = new ArrayList<>();\n        for(FieldNameModel targetField: targetFields) {\n            HiveFieldLineageModel hiveFieldLineageModel = new HiveFieldLineageModel();\n            hiveFieldLineageModel.setTargetField(targetField);\n            sourceFields = new HashSet<>();\n            fieldProcess = \"\";\n            findFieldSource(targetField.getFieldName(), null);\n            hiveFieldLineageModel.setSourceFields(sourceFields);\n            hiveFieldLineageModelList.add(hiveFieldLineageModel);\n        }\n        return hiveFieldLineageModelList;\n    }\n\n    /**\n     * 获取sql解析处理后的结果\n     */\n    public HashMap<String, HiveFieldLineageSelectModel> getHiveFieldSelects() {\n        return hiveFieldSelects;\n    }\n}\n```\n\n## 效果展示\n\n举一个简单的sql\n\n``` sql\nINSERT INTO TABLE db_test.table_result\nSELECT\n    t1.id,\n    t2.name\nFROM\n(\n    SELECT\n        id1 + id2 AS id\n    FROM\n        db_test.table1\n) t1\nLEFT JOIN\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            sourcename AS name\n        FROM\n            db_test.table2\n    )\n) t2\nON t1.id=t2.id\n\n```\n\n解析后的表血缘\n\n``` json\n{\n    \"inputTables\": [\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table2\"\n        },\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table1\"\n        }\n    ],\n    \"outputTable\": {\n        \"dbName\": \"db_test\",\n        \"tableName\": \"table_result\"\n    }\n}\n```\n\n解析后的字段血缘\n\n``` json\n[\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id1\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            },\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id2\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"id\",\n            \"tableName\": \"table_result\"\n        }\n    },\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"sourcename\",\n                \"process\": \"sourcename\",\n                \"tableName\": \"table2\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"name\",\n            \"tableName\": \"table_result\"\n        }\n    }\n]\n\n```","source":"_posts/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘.md","raw":"---\ntitle: '基于antlr4实现hiveSQL的解析[表血缘和字段血缘]'\ncatalog: true\ndate: 2020-05-02 16:25:06\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n---\n\n## 前言\n\n关于HiveSQL血缘，一般表示的就是hive数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义SQL任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。\n\n有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。\n\n## 实现思路\n\n一般来说比较直接的实现方式是hivehook的LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了hive自带的antlr3的hql解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用hivehook实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。\n\n这边就考虑用antlr4配合hive内部的Hplsql.g4直接实现一个血缘的解析。实现方式还是visit模式。\n\n### 表血缘\n\n首先表血缘是比较之间简单的，比如对于一个insert来说，目标表永远只有一个，来源表是select中所有from的真实表。\n\n### 字段血缘\n\n对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。\n\n这边最后的考虑是将每个select剥离出来存成一个object，其中包括来源表(来源子select则为null)，select字段，父select的Index(第一层则为null)。在解析完成后所有select的object存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。\n\n## SHOW CODE\n\n### 表血缘\n\n首先定义好结构\n\n``` java\n// 表名的结构\npublic class TableNameModel {\n    private String dbName;\n    private String tableName;\n\n    public static TableNameModel parseTableName(String tableName) {\n        TableNameModel tableNameModel = new TableNameModel();\n        String[] splitTable = tableName.split(\"\\\\.\");\n        if(splitTable.length == 2) {\n            tableNameModel.setDbName(splitTable[0]);\n            tableNameModel.setTableName(splitTable[1]);\n        }else if(splitTable.length == 1) {\n            tableNameModel.setTableName(splitTable[0]);\n        }\n        return tableNameModel;\n    }\n}\n\n// 表血缘结构，对单个sql\npublic class HiveTableLineageModel {\n    // 输出的表名\n    private TableNameModel outputTable;\n    // 输入的表名列表\n    private HashSet<TableNameModel> inputTables;\n}\n\n```\n\n表血缘主要过程，监听insert语句\n\n``` java\npublic class HiveSQLTableLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n    private HashSet<TableNameModel> inputTables = new HashSet<>();\n\n    // visitInsert获取insert的table_name节点，作为目标输出表\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n         outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    // 获取from真实表，加到来源表的Set里\n    @Override\n    public Object visitFrom_table_clause(HplsqlParser.From_table_clauseContext ctx) {\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .map(inputTables::add);\n        return super.visitFrom_table_clause(ctx);\n    }\n\n    public HiveTableLineageModel getTableLineage() {\n        HiveTableLineageModel hiveTableLineageModel = new HiveTableLineageModel();\n        hiveTableLineageModel.setOutputTable(outputTable);\n        hiveTableLineageModel.setInputTables(inputTables);\n        return hiveTableLineageModel;\n    }\n\n}\n```\n\n### 字段血缘\n\n定义结构\n\n``` java\n// 字段名\npublic class FieldNameModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n}\n\n// 带过程的表字段\npublic class FieldNameWithProcessModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n    private String process;\n}\n\n// 解析单个select中存储字段和别名\n// 如：select a+b as c from table;\n// 存储数据为 fieldNames:[a,b] alias:c process:a+b\npublic class HiveFieldLineageSelectItemModel {\n    private Set<String> fieldNames;\n    private String alias;\n    private String process;\n}\n\n// 解析单个select后的结果\npublic class HiveFieldLineageSelectModel {\n    Integer id; // index\n    Integer parentId; // 父id，第一层select为null\n    TableNameModel fromTable; // 来源表，来源子select则为null\n    String tableAlias; // 表别名\n    List<HiveFieldLineageSelectItemModel> selectItems; // select字段\n}\n\n// 血缘结果结构\npublic class HiveFieldLineageModel {\n    private FieldNameModel targetField; // 目标字段\n    private HashSet<FieldNameModel> sourceFields; // 来源字段列表\n}\n\n```\n\n字段血缘主要过程,主要针对的是insert语句，  \n但一般的select也是可以用的，因为是把最外层select的字段作为结果字段,  \n有一个限制是中间不能有select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。   \n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。\n\n``` java\npublic class HiveSQLFieldLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n\n    private HashMap<String, HiveFieldLineageSelectModel> hiveFieldSelects = new LinkedHashMap<>();\n\n    private Map<Integer, String> selectParentKeyMap = new HashMap<>();\n\n    private String thisSelectId;\n\n    private String sourceSQL;\n\n    // for select Item\n    private HiveFieldLineageSelectItemModel selectItemModel;\n    private List<HiveFieldLineageSelectItemModel> selectFields = new ArrayList<>();\n    private Boolean startSelectItem = false;\n\n    public HiveSQLFieldLineage(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    /**\n     * insert解析结果表\n     */\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n        outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    /**\n     * 解析select每个selectItem里用到字段\n     */\n    @Override\n    public Object visitExpr(HplsqlParser.ExprContext ctx) {\n        if(startSelectItem) {\n            Optional.ofNullable(ctx)\n                    .map(HplsqlParser.ExprContext::expr_atom)\n                    .map(HplsqlParser.Expr_atomContext::ident)\n                    .map(ParseTree::getText)\n                    .ifPresent(s -> {\n                        if(!StringUtils.isNumeric(s)) {\n                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));\n                        }\n                    });\n        }\n        return super.visitExpr(ctx);\n    }\n\n    /**\n     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames\n     */\n    @Override\n    public Object visitSelect_list_item(HplsqlParser.Select_list_itemContext ctx) {\n        startSelectItem = true;\n        selectItemModel = new HiveFieldLineageSelectItemModel();\n        selectItemModel.setFieldNames(new HashSet<>());\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(this::subSourceSql)\n                .ifPresent(selectItemModel::setProcess);\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                .map(HplsqlParser.Select_list_aliasContext::ident)\n                .map(RuleContext::getText)\n                .ifPresent(selectItemModel::setAlias);\n        Object visit = super.visitSelect_list_item(ctx);\n        selectFields.add(selectItemModel);\n        return visit;\n    }\n\n    /**\n     * from语句，处理于所有selectItem结束\n     * 对上面解析出的字段名中的表别名进行处理 如t0.field\n     */\n    @Override\n    public Object visitFrom_clause(HplsqlParser.From_clauseContext ctx) {\n        startSelectItem = false;\n        HashMap<String, List<HiveFieldLineageSelectItemModel>> fieldItems = new HashMap<>();\n        for(HiveFieldLineageSelectItemModel item: selectFields) {\n            HashMap<String, HashSet<String>> aliasSet = new HashMap<>();\n            for(String field: item.getFieldNames()) {\n                String[] sp = field.split(\"\\\\.\");\n                if(sp.length == 2){\n                    String key = thisSelectId + \"_\" + sp[0];\n                    aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                    aliasSet.get(key).add(sp[1]);\n                }else if(sp.length == 1){\n                    boolean flat = true;\n                    for(String k: selectParentKeyMap.values()) {\n                        if(k.startsWith(thisSelectId + \"_\")) {\n                            aliasSet.computeIfAbsent(k, t -> new HashSet<>());\n                            aliasSet.get(k).add(sp[0]);\n                            flat=false;\n                        }\n                    }\n                    if(flat) {\n                        String key = thisSelectId + \"_\";\n                        aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                        aliasSet.get(key).add(sp[0]);\n                    }\n                }\n            }\n            for(String key: aliasSet.keySet()) {\n                fieldItems.computeIfAbsent(key, k -> new ArrayList<>());\n                HiveFieldLineageSelectItemModel selectItemModel = new HiveFieldLineageSelectItemModel();\n                selectItemModel.setFieldNames(aliasSet.get(key));\n                selectItemModel.setAlias(item.getAlias());\n                selectItemModel.setProcess(item.getProcess());\n                if(selectItemModel.getFieldNames().size() == 1 && selectItemModel.getAlias() == null) {\n                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());\n                }\n                fieldItems.get(key).add(selectItemModel);\n            }\n        }\n        for(String key: fieldItems.keySet()) {\n            if(hiveFieldSelects.get(key) != null) {\n                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));\n            }\n        }\n        return super.visitFrom_clause(ctx);\n    }\n\n    /**\n     * 进入select前\n     * 解析每个select存信息并另存父子关系\n     * 父子来源于from subSelect, join subSelect\n     */\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        List<HplsqlParser.Fullselect_stmt_itemContext> selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();\n        for(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) {\n            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = new HiveFieldLineageSelectModel();\n            Integer thisId = selectItem.getStart().getStartIndex();\n            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();\n            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                    .orElse(null);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                    .map(RuleContext::getText)\n                    .map(TableNameModel::parseTableName)\n                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                    .map(HplsqlParser.From_alias_clauseContext::ident)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            String alias = hiveFieldLineageSelectModel.getTableAlias();\n            String thisKey = String.format(\"%s_%s\", thisId, alias == null ? \"\": alias);\n            hiveFieldLineageSelectModel.setId(thisKey + \"\");\n            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));\n            hiveFieldLineageSelectModel.setSelectItems(new ArrayList<>());\n            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                    .ifPresent(subSelects ->\n                            subSelects.forEach(item ->\n                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));\n\n            List<HplsqlParser.From_join_clauseContext> fromJoinClauses = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .orElse(new ArrayList<>());\n            for(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) {\n                HiveFieldLineageSelectModel joinSelect = new HiveFieldLineageSelectModel();\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                        .map(RuleContext::getText)\n                        .map(TableNameModel::parseTableName)\n                        .ifPresent(joinSelect::setFromTable);\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                        .map(HplsqlParser.From_alias_clauseContext::ident)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                String jalias = joinSelect.getTableAlias();\n                String jkey = String.format(\"%s_%s\", thisId, jalias == null ? \"\": jalias);\n                joinSelect.setId(jkey);\n                joinSelect.setParentId(selectParentKeyMap.get(thisId));\n                joinSelect.setSelectItems(new ArrayList<>());\n                hiveFieldSelects.put(jkey, joinSelect);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                        .ifPresent(subSelects ->\n                                subSelects.forEach(item ->\n                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));\n            }\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n\n    /**\n     * 处理每个子select进入前，\n     * 初始化selectItem相关的变量\n     */\n    @Override\n    public Object visitSubselect_stmt(HplsqlParser.Subselect_stmtContext ctx) {\n        thisSelectId = ctx.getStart().getStartIndex() + \"\";\n        selectFields = new ArrayList<>();\n        return super.visitSubselect_stmt(ctx);\n    }\n\n    private List<HiveFieldLineageSelectModel> hiveFieldSelectList = new ArrayList<>();\n\n    /**\n     * 转换HashMap存储为List\n     */\n    private void transSelectToList() {\n        for(String key: hiveFieldSelects.keySet()) {\n            hiveFieldSelectList.add(hiveFieldSelects.get(key));\n        }\n    }\n\n    /**\n     * 获取目标字段\n     * 也就是parentId为null的最外层select的字段别名\n     */\n    private List<FieldNameModel> getTargetFields() {\n        List<List<String>> items = hiveFieldSelectList.stream()\n                .filter(item -> item.getParentId() == null)\n                .map(HiveFieldLineageSelectModel::getSelectItems)\n                .map(fields -> fields.stream()\n                        .map(HiveFieldLineageSelectItemModel::getAlias)\n                        .collect(Collectors.toList()))\n                .collect(Collectors.toList());\n        List<String> res = new ArrayList<>();\n        for(List<String> item: items) {\n            res.addAll(item);\n        }\n        res = res.stream().distinct().collect(Collectors.toList());\n        List<FieldNameModel> fieldNameModels = new ArrayList<>();\n        for(String i: res) {\n            FieldNameModel fieldNameModel = new FieldNameModel();\n            if(outputTable != null) {\n                fieldNameModel.setDbName(outputTable.getDbName());\n                fieldNameModel.setTableName(outputTable.getTableName());\n            }\n            fieldNameModel.setFieldName(i);\n            fieldNameModels.add(fieldNameModel);\n        }\n        return fieldNameModels;\n    }\n\n    private HashSet<FieldNameWithProcessModel> sourceFields;\n    private String fieldProcess = \"\";\n\n    /**\n     * 递归按每个字段从外到内寻找每个字段的来源\n     * 逻辑为最外的字段别名，父id -> 匹配子id别名 ->\n     * -> 如果是来源是表，存储，如果来源是子select，继续递归\n     */\n    private void findFieldSource(String targetField, String parentId) {\n        hiveFieldSelectList.forEach(select -> {\n            if((parentId == null && select.getParentId() == null) ||\n                    (select.getParentId() != null && select.getParentId().equals(parentId))) {\n                if(select.getSelectItems() != null) {\n                    if(select.getFromTable() == null) {\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    findFieldSource(field, select.getId());\n                                }\n                            }\n                        });\n                    }else{\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    FieldNameWithProcessModel fieldNameWithProcessModel = new FieldNameWithProcessModel();\n                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());\n                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());\n                                    fieldNameWithProcessModel.setFieldName(field);\n                                    fieldNameWithProcessModel.setProcess(fieldProcess);\n                                    sourceFields.add(fieldNameWithProcessModel);\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取字段血缘列表\n     */\n    public List<HiveFieldLineageModel> getHiveFieldLineage() {\n        transSelectToList();\n        List<FieldNameModel> targetFields = getTargetFields();\n        List<HiveFieldLineageModel> hiveFieldLineageModelList = new ArrayList<>();\n        for(FieldNameModel targetField: targetFields) {\n            HiveFieldLineageModel hiveFieldLineageModel = new HiveFieldLineageModel();\n            hiveFieldLineageModel.setTargetField(targetField);\n            sourceFields = new HashSet<>();\n            fieldProcess = \"\";\n            findFieldSource(targetField.getFieldName(), null);\n            hiveFieldLineageModel.setSourceFields(sourceFields);\n            hiveFieldLineageModelList.add(hiveFieldLineageModel);\n        }\n        return hiveFieldLineageModelList;\n    }\n\n    /**\n     * 获取sql解析处理后的结果\n     */\n    public HashMap<String, HiveFieldLineageSelectModel> getHiveFieldSelects() {\n        return hiveFieldSelects;\n    }\n}\n```\n\n## 效果展示\n\n举一个简单的sql\n\n``` sql\nINSERT INTO TABLE db_test.table_result\nSELECT\n    t1.id,\n    t2.name\nFROM\n(\n    SELECT\n        id1 + id2 AS id\n    FROM\n        db_test.table1\n) t1\nLEFT JOIN\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            sourcename AS name\n        FROM\n            db_test.table2\n    )\n) t2\nON t1.id=t2.id\n\n```\n\n解析后的表血缘\n\n``` json\n{\n    \"inputTables\": [\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table2\"\n        },\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table1\"\n        }\n    ],\n    \"outputTable\": {\n        \"dbName\": \"db_test\",\n        \"tableName\": \"table_result\"\n    }\n}\n```\n\n解析后的字段血缘\n\n``` json\n[\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id1\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            },\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id2\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"id\",\n            \"tableName\": \"table_result\"\n        }\n    },\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"sourcename\",\n                \"process\": \"sourcename\",\n                \"tableName\": \"table2\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"name\",\n            \"tableName\": \"table_result\"\n        }\n    }\n]\n\n```","slug":"article_14_基于antlr4实现HQL的解析-表血缘和字段血缘","published":1,"updated":"2020-05-05T04:08:46.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxol000jx8soq241dyqz","content":"<h2 id=\"前言\">前言</h2>\n<p>关于HiveSQL血缘，一般表示的就是hive数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义SQL任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。</p>\n<p>有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。</p>\n<h2 id=\"实现思路\">实现思路</h2>\n<p>一般来说比较直接的实现方式是hivehook的LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了hive自带的antlr3的hql解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用hivehook实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。</p>\n<p>这边就考虑用antlr4配合hive内部的Hplsql.g4直接实现一个血缘的解析。实现方式还是visit模式。</p>\n<h3 id=\"表血缘\">表血缘</h3>\n<p>首先表血缘是比较之间简单的，比如对于一个insert来说，目标表永远只有一个，来源表是select中所有from的真实表。</p>\n<h3 id=\"字段血缘\">字段血缘</h3>\n<p>对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。</p>\n<p>这边最后的考虑是将每个select剥离出来存成一个object，其中包括来源表(来源子select则为null)，select字段，父select的Index(第一层则为null)。在解析完成后所有select的object存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。</p>\n<h2 id=\"show-code\">SHOW CODE</h2>\n<h3 id=\"表血缘\">表血缘</h3>\n<p>首先定义好结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表名的结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TableNameModel <span class=\"title\">parseTableName</span><span class=\"params\">(String tableName)</span> </span>&#123;</span><br><span class=\"line\">        TableNameModel tableNameModel = <span class=\"keyword\">new</span> TableNameModel();</span><br><span class=\"line\">        String[] splitTable = tableName.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setDbName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableNameModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表血缘结构，对单个sql</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的表名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"comment\">// 输入的表名列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表血缘主要过程，监听insert语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// visitInsert获取insert的table_name节点，作为目标输出表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">         outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取from真实表，加到来源表的Set里</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_table_clause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .map(inputTables::add);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_table_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableLineageModel <span class=\"title\">getTableLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HiveTableLineageModel hiveTableLineageModel = <span class=\"keyword\">new</span> HiveTableLineageModel();</span><br><span class=\"line\">        hiveTableLineageModel.setOutputTable(outputTable);</span><br><span class=\"line\">        hiveTableLineageModel.setInputTables(inputTables);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveTableLineageModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段血缘\">字段血缘</h3>\n<p>定义结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字段名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带过程的表字段</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameWithProcessModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select中存储字段和别名</span></span><br><span class=\"line\"><span class=\"comment\">// 如：select a+b as c from table;</span></span><br><span class=\"line\"><span class=\"comment\">// 存储数据为 fieldNames:[a,b] alias:c process:a+b</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectItemModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; fieldNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alias;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select后的结果</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectModel</span> </span>&#123;</span><br><span class=\"line\">    Integer id; <span class=\"comment\">// index</span></span><br><span class=\"line\">    Integer parentId; <span class=\"comment\">// 父id，第一层select为null</span></span><br><span class=\"line\">    TableNameModel fromTable; <span class=\"comment\">// 来源表，来源子select则为null</span></span><br><span class=\"line\">    String tableAlias; <span class=\"comment\">// 表别名</span></span><br><span class=\"line\">    List&lt;HiveFieldLineageSelectItemModel&gt; selectItems; <span class=\"comment\">// select字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 血缘结果结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FieldNameModel targetField; <span class=\"comment\">// 目标字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameModel&gt; sourceFields; <span class=\"comment\">// 来源字段列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段血缘主要过程,主要针对的是insert语句，<br>\n但一般的select也是可以用的，因为是把最外层select的字段作为结果字段,<br>\n有一个限制是中间不能有select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。<br>\n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFieldLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; hiveFieldSelects = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; selectParentKeyMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String thisSelectId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for select Item</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveFieldLineageSelectItemModel selectItemModel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectItemModel&gt; selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFieldLineage</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert解析结果表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析select每个selectItem里用到字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitExpr</span><span class=\"params\">(HplsqlParser.ExprContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startSelectItem) &#123;</span><br><span class=\"line\">            Optional.ofNullable(ctx)</span><br><span class=\"line\">                    .map(HplsqlParser.ExprContext::expr_atom)</span><br><span class=\"line\">                    .map(HplsqlParser.Expr_atomContext::ident)</span><br><span class=\"line\">                    .map(ParseTree::getText)</span><br><span class=\"line\">                    .ifPresent(s -&gt; &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(s)) &#123;</span><br><span class=\"line\">                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitExpr(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_list_item</span><span class=\"params\">(HplsqlParser.Select_list_itemContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">        selectItemModel.setFieldNames(<span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setProcess);</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_aliasContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setAlias);</span><br><span class=\"line\">        Object visit = <span class=\"keyword\">super</span>.visitSelect_list_item(ctx);</span><br><span class=\"line\">        selectFields.add(selectItemModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * from语句，处理于所有selectItem结束</span></span><br><span class=\"line\"><span class=\"comment\">     * 对上面解析出的字段名中的表别名进行处理 如t0.field</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_clause</span><span class=\"params\">(HplsqlParser.From_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;HiveFieldLineageSelectItemModel&gt;&gt; fieldItems = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HiveFieldLineageSelectItemModel item: selectFields) &#123;</span><br><span class=\"line\">            HashMap&lt;String, HashSet&lt;String&gt;&gt; aliasSet = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String field: item.getFieldNames()) &#123;</span><br><span class=\"line\">                String[] sp = field.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    String key = thisSelectId + <span class=\"string\">\"_\"</span> + sp[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                    aliasSet.get(key).add(sp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> flat = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(String k: selectParentKeyMap.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(k.startsWith(thisSelectId + <span class=\"string\">\"_\"</span>)) &#123;</span><br><span class=\"line\">                            aliasSet.computeIfAbsent(k, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                            aliasSet.get(k).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            flat=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flat) &#123;</span><br><span class=\"line\">                        String key = thisSelectId + <span class=\"string\">\"_\"</span>;</span><br><span class=\"line\">                        aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                        aliasSet.get(key).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: aliasSet.keySet()) &#123;</span><br><span class=\"line\">                fieldItems.computeIfAbsent(key, k -&gt; <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                HiveFieldLineageSelectItemModel selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">                selectItemModel.setFieldNames(aliasSet.get(key));</span><br><span class=\"line\">                selectItemModel.setAlias(item.getAlias());</span><br><span class=\"line\">                selectItemModel.setProcess(item.getProcess());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(selectItemModel.getFieldNames().size() == <span class=\"number\">1</span> &amp;&amp; selectItemModel.getAlias() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fieldItems.get(key).add(selectItemModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: fieldItems.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hiveFieldSelects.get(key) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 进入select前</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析每个select存信息并另存父子关系</span></span><br><span class=\"line\"><span class=\"comment\">     * 父子来源于from subSelect, join subSelect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Fullselect_stmt_itemContext&gt; selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) &#123;</span><br><span class=\"line\">            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">            Integer thisId = selectItem.getStart().getStartIndex();</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();</span><br><span class=\"line\">            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            String alias = hiveFieldLineageSelectModel.getTableAlias();</span><br><span class=\"line\">            String thisKey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, alias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: alias);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setId(thisKey + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                    .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                            subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;HplsqlParser.From_join_clauseContext&gt; fromJoinClauses = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) &#123;</span><br><span class=\"line\">                HiveFieldLineageSelectModel joinSelect = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setFromTable);</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                String jalias = joinSelect.getTableAlias();</span><br><span class=\"line\">                String jkey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, jalias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: jalias);</span><br><span class=\"line\">                joinSelect.setId(jkey);</span><br><span class=\"line\">                joinSelect.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">                joinSelect.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                hiveFieldSelects.put(jkey, joinSelect);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                        .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                                subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理每个子select进入前，</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化selectItem相关的变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSubselect_stmt</span><span class=\"params\">(HplsqlParser.Subselect_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        thisSelectId = ctx.getStart().getStartIndex() + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSubselect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectModel&gt; hiveFieldSelectList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换HashMap存储为List</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transSelectToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: hiveFieldSelects.keySet()) &#123;</span><br><span class=\"line\">            hiveFieldSelectList.add(hiveFieldSelects.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取目标字段</span></span><br><span class=\"line\"><span class=\"comment\">     * 也就是parentId为null的最外层select的字段别名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;FieldNameModel&gt; <span class=\"title\">getTargetFields</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; items = hiveFieldSelectList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentId() == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .map(HiveFieldLineageSelectModel::getSelectItems)</span><br><span class=\"line\">                .map(fields -&gt; fields.stream()</span><br><span class=\"line\">                        .map(HiveFieldLineageSelectItemModel::getAlias)</span><br><span class=\"line\">                        .collect(Collectors.toList()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;String&gt; item: items) &#123;</span><br><span class=\"line\">            res.addAll(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; fieldNameModels = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i: res) &#123;</span><br><span class=\"line\">            FieldNameModel fieldNameModel = <span class=\"keyword\">new</span> FieldNameModel();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(outputTable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fieldNameModel.setDbName(outputTable.getDbName());</span><br><span class=\"line\">                fieldNameModel.setTableName(outputTable.getTableName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fieldNameModel.setFieldName(i);</span><br><span class=\"line\">            fieldNameModels.add(fieldNameModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNameModels;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameWithProcessModel&gt; sourceFields;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归按每个字段从外到内寻找每个字段的来源</span></span><br><span class=\"line\"><span class=\"comment\">     * 逻辑为最外的字段别名，父id -&gt; 匹配子id别名 -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * -&gt; 如果是来源是表，存储，如果来源是子select，继续递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findFieldSource</span><span class=\"params\">(String targetField, String parentId)</span> </span>&#123;</span><br><span class=\"line\">        hiveFieldSelectList.forEach(select -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((parentId == <span class=\"keyword\">null</span> &amp;&amp; select.getParentId() == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                    (select.getParentId() != <span class=\"keyword\">null</span> &amp;&amp; select.getParentId().equals(parentId))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(select.getSelectItems() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(select.getFromTable() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    findFieldSource(field, select.getId());</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    FieldNameWithProcessModel fieldNameWithProcessModel = <span class=\"keyword\">new</span> FieldNameWithProcessModel();</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setFieldName(field);</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setProcess(fieldProcess);</span><br><span class=\"line\">                                    sourceFields.add(fieldNameWithProcessModel);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字段血缘列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;HiveFieldLineageModel&gt; <span class=\"title\">getHiveFieldLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        transSelectToList();</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; targetFields = getTargetFields();</span><br><span class=\"line\">        List&lt;HiveFieldLineageModel&gt; hiveFieldLineageModelList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(FieldNameModel targetField: targetFields) &#123;</span><br><span class=\"line\">            HiveFieldLineageModel hiveFieldLineageModel = <span class=\"keyword\">new</span> HiveFieldLineageModel();</span><br><span class=\"line\">            hiveFieldLineageModel.setTargetField(targetField);</span><br><span class=\"line\">            sourceFields = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            findFieldSource(targetField.getFieldName(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            hiveFieldLineageModel.setSourceFields(sourceFields);</span><br><span class=\"line\">            hiveFieldLineageModelList.add(hiveFieldLineageModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldLineageModelList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取sql解析处理后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; <span class=\"title\">getHiveFieldSelects</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldSelects;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果展示\">效果展示</h2>\n<p>举一个简单的sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> db_test.table_result</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    t1.id,</span><br><span class=\"line\">    t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        id1 + id2 <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        db_test.table1</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            sourcename <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            db_test.table2</span><br><span class=\"line\">    )</span><br><span class=\"line\">) t2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> t1.id=t2.id</span><br></pre></td></tr></table></figure>\n<p>解析后的表血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inputTables\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"outputTable\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析后的字段血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id1\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>关于HiveSQL血缘，一般表示的就是hive数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义SQL任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。</p>\n<p>有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。</p>\n<h2>实现思路</h2>\n<p>一般来说比较直接的实现方式是hivehook的LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了hive自带的antlr3的hql解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用hivehook实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。</p>\n<p>这边就考虑用antlr4配合hive内部的Hplsql.g4直接实现一个血缘的解析。实现方式还是visit模式。</p>\n<h3>表血缘</h3>\n<p>首先表血缘是比较之间简单的，比如对于一个insert来说，目标表永远只有一个，来源表是select中所有from的真实表。</p>\n<h3>字段血缘</h3>\n<p>对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。</p>\n<p>这边最后的考虑是将每个select剥离出来存成一个object，其中包括来源表(来源子select则为null)，select字段，父select的Index(第一层则为null)。在解析完成后所有select的object存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。</p>\n<h2>SHOW CODE</h2>\n<h3>表血缘</h3>\n<p>首先定义好结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表名的结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TableNameModel <span class=\"title\">parseTableName</span><span class=\"params\">(String tableName)</span> </span>&#123;</span><br><span class=\"line\">        TableNameModel tableNameModel = <span class=\"keyword\">new</span> TableNameModel();</span><br><span class=\"line\">        String[] splitTable = tableName.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setDbName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableNameModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表血缘结构，对单个sql</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的表名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"comment\">// 输入的表名列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表血缘主要过程，监听insert语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// visitInsert获取insert的table_name节点，作为目标输出表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">         outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取from真实表，加到来源表的Set里</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_table_clause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .map(inputTables::add);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_table_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableLineageModel <span class=\"title\">getTableLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HiveTableLineageModel hiveTableLineageModel = <span class=\"keyword\">new</span> HiveTableLineageModel();</span><br><span class=\"line\">        hiveTableLineageModel.setOutputTable(outputTable);</span><br><span class=\"line\">        hiveTableLineageModel.setInputTables(inputTables);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveTableLineageModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>字段血缘</h3>\n<p>定义结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字段名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带过程的表字段</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameWithProcessModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select中存储字段和别名</span></span><br><span class=\"line\"><span class=\"comment\">// 如：select a+b as c from table;</span></span><br><span class=\"line\"><span class=\"comment\">// 存储数据为 fieldNames:[a,b] alias:c process:a+b</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectItemModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; fieldNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alias;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select后的结果</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectModel</span> </span>&#123;</span><br><span class=\"line\">    Integer id; <span class=\"comment\">// index</span></span><br><span class=\"line\">    Integer parentId; <span class=\"comment\">// 父id，第一层select为null</span></span><br><span class=\"line\">    TableNameModel fromTable; <span class=\"comment\">// 来源表，来源子select则为null</span></span><br><span class=\"line\">    String tableAlias; <span class=\"comment\">// 表别名</span></span><br><span class=\"line\">    List&lt;HiveFieldLineageSelectItemModel&gt; selectItems; <span class=\"comment\">// select字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 血缘结果结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FieldNameModel targetField; <span class=\"comment\">// 目标字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameModel&gt; sourceFields; <span class=\"comment\">// 来源字段列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段血缘主要过程,主要针对的是insert语句，<br>\n但一般的select也是可以用的，因为是把最外层select的字段作为结果字段,<br>\n有一个限制是中间不能有select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。<br>\n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFieldLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; hiveFieldSelects = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; selectParentKeyMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String thisSelectId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for select Item</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveFieldLineageSelectItemModel selectItemModel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectItemModel&gt; selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFieldLineage</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert解析结果表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析select每个selectItem里用到字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitExpr</span><span class=\"params\">(HplsqlParser.ExprContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startSelectItem) &#123;</span><br><span class=\"line\">            Optional.ofNullable(ctx)</span><br><span class=\"line\">                    .map(HplsqlParser.ExprContext::expr_atom)</span><br><span class=\"line\">                    .map(HplsqlParser.Expr_atomContext::ident)</span><br><span class=\"line\">                    .map(ParseTree::getText)</span><br><span class=\"line\">                    .ifPresent(s -&gt; &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(s)) &#123;</span><br><span class=\"line\">                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitExpr(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_list_item</span><span class=\"params\">(HplsqlParser.Select_list_itemContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">        selectItemModel.setFieldNames(<span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setProcess);</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_aliasContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setAlias);</span><br><span class=\"line\">        Object visit = <span class=\"keyword\">super</span>.visitSelect_list_item(ctx);</span><br><span class=\"line\">        selectFields.add(selectItemModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * from语句，处理于所有selectItem结束</span></span><br><span class=\"line\"><span class=\"comment\">     * 对上面解析出的字段名中的表别名进行处理 如t0.field</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_clause</span><span class=\"params\">(HplsqlParser.From_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;HiveFieldLineageSelectItemModel&gt;&gt; fieldItems = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HiveFieldLineageSelectItemModel item: selectFields) &#123;</span><br><span class=\"line\">            HashMap&lt;String, HashSet&lt;String&gt;&gt; aliasSet = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String field: item.getFieldNames()) &#123;</span><br><span class=\"line\">                String[] sp = field.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    String key = thisSelectId + <span class=\"string\">\"_\"</span> + sp[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                    aliasSet.get(key).add(sp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> flat = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(String k: selectParentKeyMap.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(k.startsWith(thisSelectId + <span class=\"string\">\"_\"</span>)) &#123;</span><br><span class=\"line\">                            aliasSet.computeIfAbsent(k, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                            aliasSet.get(k).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            flat=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flat) &#123;</span><br><span class=\"line\">                        String key = thisSelectId + <span class=\"string\">\"_\"</span>;</span><br><span class=\"line\">                        aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                        aliasSet.get(key).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: aliasSet.keySet()) &#123;</span><br><span class=\"line\">                fieldItems.computeIfAbsent(key, k -&gt; <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                HiveFieldLineageSelectItemModel selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">                selectItemModel.setFieldNames(aliasSet.get(key));</span><br><span class=\"line\">                selectItemModel.setAlias(item.getAlias());</span><br><span class=\"line\">                selectItemModel.setProcess(item.getProcess());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(selectItemModel.getFieldNames().size() == <span class=\"number\">1</span> &amp;&amp; selectItemModel.getAlias() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fieldItems.get(key).add(selectItemModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: fieldItems.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hiveFieldSelects.get(key) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 进入select前</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析每个select存信息并另存父子关系</span></span><br><span class=\"line\"><span class=\"comment\">     * 父子来源于from subSelect, join subSelect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Fullselect_stmt_itemContext&gt; selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) &#123;</span><br><span class=\"line\">            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">            Integer thisId = selectItem.getStart().getStartIndex();</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();</span><br><span class=\"line\">            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            String alias = hiveFieldLineageSelectModel.getTableAlias();</span><br><span class=\"line\">            String thisKey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, alias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: alias);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setId(thisKey + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                    .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                            subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;HplsqlParser.From_join_clauseContext&gt; fromJoinClauses = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) &#123;</span><br><span class=\"line\">                HiveFieldLineageSelectModel joinSelect = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setFromTable);</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                String jalias = joinSelect.getTableAlias();</span><br><span class=\"line\">                String jkey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, jalias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: jalias);</span><br><span class=\"line\">                joinSelect.setId(jkey);</span><br><span class=\"line\">                joinSelect.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">                joinSelect.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                hiveFieldSelects.put(jkey, joinSelect);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                        .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                                subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理每个子select进入前，</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化selectItem相关的变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSubselect_stmt</span><span class=\"params\">(HplsqlParser.Subselect_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        thisSelectId = ctx.getStart().getStartIndex() + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSubselect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectModel&gt; hiveFieldSelectList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换HashMap存储为List</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transSelectToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: hiveFieldSelects.keySet()) &#123;</span><br><span class=\"line\">            hiveFieldSelectList.add(hiveFieldSelects.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取目标字段</span></span><br><span class=\"line\"><span class=\"comment\">     * 也就是parentId为null的最外层select的字段别名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;FieldNameModel&gt; <span class=\"title\">getTargetFields</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; items = hiveFieldSelectList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentId() == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .map(HiveFieldLineageSelectModel::getSelectItems)</span><br><span class=\"line\">                .map(fields -&gt; fields.stream()</span><br><span class=\"line\">                        .map(HiveFieldLineageSelectItemModel::getAlias)</span><br><span class=\"line\">                        .collect(Collectors.toList()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;String&gt; item: items) &#123;</span><br><span class=\"line\">            res.addAll(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; fieldNameModels = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i: res) &#123;</span><br><span class=\"line\">            FieldNameModel fieldNameModel = <span class=\"keyword\">new</span> FieldNameModel();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(outputTable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fieldNameModel.setDbName(outputTable.getDbName());</span><br><span class=\"line\">                fieldNameModel.setTableName(outputTable.getTableName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fieldNameModel.setFieldName(i);</span><br><span class=\"line\">            fieldNameModels.add(fieldNameModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNameModels;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameWithProcessModel&gt; sourceFields;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归按每个字段从外到内寻找每个字段的来源</span></span><br><span class=\"line\"><span class=\"comment\">     * 逻辑为最外的字段别名，父id -&gt; 匹配子id别名 -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * -&gt; 如果是来源是表，存储，如果来源是子select，继续递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findFieldSource</span><span class=\"params\">(String targetField, String parentId)</span> </span>&#123;</span><br><span class=\"line\">        hiveFieldSelectList.forEach(select -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((parentId == <span class=\"keyword\">null</span> &amp;&amp; select.getParentId() == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                    (select.getParentId() != <span class=\"keyword\">null</span> &amp;&amp; select.getParentId().equals(parentId))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(select.getSelectItems() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(select.getFromTable() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    findFieldSource(field, select.getId());</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    FieldNameWithProcessModel fieldNameWithProcessModel = <span class=\"keyword\">new</span> FieldNameWithProcessModel();</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setFieldName(field);</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setProcess(fieldProcess);</span><br><span class=\"line\">                                    sourceFields.add(fieldNameWithProcessModel);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字段血缘列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;HiveFieldLineageModel&gt; <span class=\"title\">getHiveFieldLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        transSelectToList();</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; targetFields = getTargetFields();</span><br><span class=\"line\">        List&lt;HiveFieldLineageModel&gt; hiveFieldLineageModelList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(FieldNameModel targetField: targetFields) &#123;</span><br><span class=\"line\">            HiveFieldLineageModel hiveFieldLineageModel = <span class=\"keyword\">new</span> HiveFieldLineageModel();</span><br><span class=\"line\">            hiveFieldLineageModel.setTargetField(targetField);</span><br><span class=\"line\">            sourceFields = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            findFieldSource(targetField.getFieldName(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            hiveFieldLineageModel.setSourceFields(sourceFields);</span><br><span class=\"line\">            hiveFieldLineageModelList.add(hiveFieldLineageModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldLineageModelList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取sql解析处理后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; <span class=\"title\">getHiveFieldSelects</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldSelects;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>效果展示</h2>\n<p>举一个简单的sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> db_test.table_result</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    t1.id,</span><br><span class=\"line\">    t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        id1 + id2 <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        db_test.table1</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            sourcename <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            db_test.table2</span><br><span class=\"line\">    )</span><br><span class=\"line\">) t2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> t1.id=t2.id</span><br></pre></td></tr></table></figure>\n<p>解析后的表血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inputTables\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"outputTable\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析后的字段血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id1\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>"},{"title":"WEB-ROBOT","catalog":true,"date":"2020-05-11T11:31:43.000Z","subtitle":"一个管理网页自动化执行的chrome插件","header-img":null,"_content":"\n# 前言\n\n这边主要介绍一款个人自行开发的chrome插件 web-robot，  \n包括它的开始设计，使用教程，实现思路和细节。  \n源码的github地址是在[https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n# 软件设计\n\n关于这个软件的初始设计定位，这边将他定位为**网页自动化链路管理执行**；  \n类似模拟自动化测试，但不会有结果校验。\n\n创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。\n\n软件主要要包括的有以下一些：\n- 网页元素的可视化筛选；\n- 筛选的元素加上动作与延时变成一个事件；\n- 多个事件形成一个事务流程；\n- 主界面可以管理多个事务，进行事务的运行、轮播、分享等；\n\n软件风格大致按使用的前端ui框架的极简风格走；\n\n# 软件使用教程\n\n## 下载与导入\n\n### 源码下载导入\n\n源码github地址：[https://github.com/webgjc/web_robot](\nhttps://github.com/webgjc/web_robot)\n\n首先到github上将源码clone到本地 / 下载解压也可以\n> git clone https://github.com/webgjc/web_robot.git\n\n然后打开chrome点开右上角三个点的地方，  \n选择更多工具 ==》扩展程序；\n\n因为是源码，开启右上角的开发者模式\n![开发者模式](/img/mypost/kaifazhemoshi.jpg)\n\n然后点击左上角的加载已解压的扩展程序，  \n选择刚刚clone下来的目录\n\n下面表示已经加载进来了\n![robot](/img/mypost/robot.jpg)\n\n且右上角出现这个小图标\n![robot](/img/mypost/robot_small.jpg)\n\n**重要：右键这个小图标，**  \n**可读取和更改的网站数据，**  \n**选择 在所有网站上；**\n\n至此已经完成下载和导入啦！😋\n\n### 从chrome商店下载导入\n\n暂时没有上线chrome应用商店\n\n## 软件使用\n\n### 新建事务\n\n首先新建一个事务\n![robot](/img/mypost/robot_shiwu.jpg)\n\n这边建一个test为例子\n![robot](/img/mypost/robot_main.jpg)\n\n### 筛选器\n\n点击 test 进入 过程添加页\n\n点击添加过程，进入筛选器页面\n![robot](/img/mypost/robot_shaixuanqi.jpg)\n\n这边支持按 html标签 / class / id 筛选\n\n下面都进行举例\n\n#### html标签筛选\n\n选择一个html标签，a(链接), body, div等  \n下方会展示一个列表，表示页面中该元素有几个。  \n鼠标移到列表每个上面，  \n页面对应元素将会渲染一个蒙版到以便正确定位选择。\n\n这是选择body的时候\n![robot](/img/mypost/robot_htmltag.jpg)\n\n这是选择div的时候\n![robot](/img/mypost/robot_htmltag2.jpg)\n\n\n#### class / id 筛选\n\n首先在选择标签列表的下列菜单中  \n选择 第一个 class/id选择器   \n然后会出现一个输入框输入对应的class或id  \n\nclass选择器需要以.开头，如：.xxx  \nid选择器需要以#开头，如：#xxx\n\n选好后按回车，如果有对应的选择器，将会展示一个列表, \n后续操作同html标签，鼠标移到列表上会渲染蒙版\n![robot](/img/mypost/robot_classtag.jpg)\n\n### 单个事件\n\n用筛选器选中好一个元素后  \n将会进入事件编辑页面\n![robot](/img/mypost/robot_shijian.jpg)\n\n(如想改变元素，可以按最上面的元素返回)\n\n这边的选择操作可以选的有：\n- click -- 点击\n- value -- 设值\n- refresh -- 刷新\n- pagejump -- 当页url跳转\n\n然后输入 执行前等待时间 / 和上一步执行中间间隔时间\n\n可以测试运行当前事件，也可以把事件添加到事务流程中。\n\n### 流程事件管理\n\n添加后会返回流程页，  \n如下加了一条，等待一秒后，(click)点击第一个\\<a\\>标签\n\n![robot](/img/mypost/robot_liuch.jpg)\n\n如下表示，  \n等待一秒后，(click)点击第一个\\<a\\>标签的链接，  \n再等待一秒后，往第一个input输入框里赋值 你好\n\n![robot](/img/mypost/robot_liuch2.jpg)\n\n可以选择继续添加，  \n可以选择返回主页，  \n可以测试运行单个事件，  \n可以删除单个事件；\n\n### 事务管理\n\n继续到主页\n\n事务支持新增，删除，运行，轮播，导出，导入\n\n![robot](/img/mypost/robot_main.jpg)\n\n#### 运行事务\n\n运行主要是按定好的流程运行每个事件，  \n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。\n\n#### 轮播事务\n\n轮播表示的是循环运行，运行完一次后立即进行下一次。  \n中间的间隔是第一个事件的等待时间。  \n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。\n\n#### 导入导出事务\n\n点击导出，事务的信息会自动保存到剪切板，复制给他人即可；\n\n点击导入，将他人复制的事务信息导入即可；\n\n### 常见问题说明\n\n>筛选器失效\n\n有时候页面与浏览器插件的连接会失效或过期，  \n这个时候可以刷新页面，然后重新打开这个插件页面。\n\n# 软件开发过程\n\n## 其他准备知识\n\n关于chrome插件的开发，请看[官网教程](https://developer.chrome.com/extensions)或[其他教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n\n## 软件开发设计\n\n这个浏览器插件包括以下几部分：\n```\n配置文件\nmanifest.json\n\n样式文件夹\n/css\n\nhtml文件，主要放了popup.html，也就是这个插件管理页\n/html\n\n存放图片\n/images\n\n存放js\n主要实现的包括popup.js(管理页的后端)\n和background.js(浏览器的后端)\n/js\n```\n\n## 部分代码说明\n\n``` javascript\n// 获取数据存储\nfunction get_my_robot(callback) {\n    chrome.storage.local.get([\"my_robot\"], function(res) {\n        if (callback) callback(res.my_robot)\n    })\n}\n\n// 设置数据存储\nfunction set_my_robot(new_robot, callback) {\n    chrome.storage.local.set({ \"my_robot\": new_robot }, function() {\n        if (callback) callback()\n    })\n}\n\n// 连接\nfunction connect(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        var port = chrome.tabs.connect(tabs[0].id, { name: \"robot\" });\n        callback(port)\n    })\n}\n\n// 当前tab执行\nfunction exectab(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        callback(tabs[0].id)\n    })\n}\n\n\n// 拼接要执行的js代码\nfunction jscode(process) {\n    let exec_code = \"(function(){ \\n\";\n    if(process[\"tag\"].startsWith(\".\")) {\n        exec_code += 'var robot_node = document.getElementsByClassName(\"' + process[\"tag\"].substring(1) + '\")[' + process[\"n\"] + '];'\n    }else if(process[\"tag\"].startsWith(\"#\")) {\n        exec_code += 'var robot_node = document.getElementById(\"' + process[\"tag\"].substring(1) + '\");'\n    }else{\n        exec_code += 'var robot_node = document.getElementsByTagName(\"' + process[\"tag\"] + '\")[' + process[\"n\"] + '];'\n    }\n    if (process[\"opera\"] == \"click\") {\n        exec_code += \"robot_node.click();\"\n    } else if (process[\"opera\"] == \"value\") {\n        /**\n         * 为react兼容\n         */\n        exec_code += \"let lastValue = robot_node.value;\"\n        exec_code += \"robot_node.value=\\\"\" + process[\"value\"] + \"\\\";\";\n        exec_code += \"let event = new Event('input', { bubbles: true });\";\n        exec_code += \"event.simulated = true;\";\n        exec_code += \"let tracker = robot_node._valueTracker;\";\n        exec_code += \"if (tracker) { tracker.setValue(lastValue); }\\n\";\n        exec_code += \"robot_node.dispatchEvent(event);\";\n    } else if (process[\"opera\"] == \"refresh\") {\n        exec_code += \"window.location.reload();\";\n    } else if (process[\"opera\"] == \"pagejump\") {\n        exec_code += \"window.location.href=\\\"\" + process[\"value\"] + \"\\\";\";\n    }\n    exec_code += \"\\n})();\";\n    console.log(exec_code)\n    return exec_code;\n}\n\n// 根据存储数据更新主页\nfunction refresh_cases() {\n    get_my_robot(my_robot => {\n        if (my_robot == undefined) {\n            set_my_robot({})\n        } else {\n            var cases = \"\";\n            for (let i in my_robot) {\n                let one_case = {}\n                one_case[\"case_name\"] = i;\n                one_case[\"content\"] = my_robot[i];\n                let tr = '<tr id=' + i + '> \\\n                            <td> \\\n                                <a href=\"#\" class=\"case_name\">' + i + '</a> \\\n                            </td> \\\n                            <td> \\\n                                <a href=\"#\" class=\"run_case\">运行</a> \\\n                                <a href=\"#\" class=\"del_case\">删除</a> \\\n                                <a href=\"#\" class=\"lun_case\">轮播</a> \\\n                                <a href=\"#\" class=\"export_case\" data-clipboard-text=' + JSON.stringify(one_case) + '>导出</a> \\\n                            </td> \\\n                        </tr>';\n                cases = cases + tr;\n            }\n            $(\"#cases\").html(cases);\n        }\n    })\n    new ClipboardJS('.export_case');\n}\n\n\n// 更新单个事务的流程\nfunction refresh_process(case_name) {\n    get_my_robot(my_robot => {\n        var data = my_robot[case_name];\n        var process_li = \"\";\n        for (let i = 0; i < data.length; i++) {\n            let lili = '<li class=\"collection-item\" id=\"process-' + i + '\"> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">标签：' + data[i][\"tag\"] + '</div> \\\n                                <div class=\"col s6 \">#：' + data[i][\"n\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">操作：' + data[i][\"opera\"] + '</div> \\\n                                <div class=\"col s6 \">等待：' + data[i][\"wait\"] + '秒</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s12 \">赋值：' + data[i][\"value\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6\" id=\"process_test_run\" >test</div> \\\n                                </a> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6 \" id=\"process_del\">删除</div> \\\n                                </a> \\\n                            </div> \\\n                        </li> ';\n            process_li = process_li + lili;\n        }\n        $(\"#process_list\").html(process_li);\n    })\n}\n\n// 主要\n$(document).ready(function() {\n\n    // 筛选器\n    var tag_types = [\"class/id选择器\", \"a\", \"body\", \"button\", \"div\", \"i\", \"img\", \"input\", \"li\", \"p\", \"span\", \"td\", \"textarea\", \"tr\", \"ul\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"];\n    // 操作\n    var operas = [\"click\", \"value\", \"refresh\", \"pagejump\"];\n    var case_name = \"\";\n    var init_select = 1;\n\n    refresh_cases();\n\n    $('.modal').modal();\n\n    // 连接当前页面\n    exectab(tab_id => {\n\n        // 运行事务，调用background\n        $(\"#cases\").on(\"click\", \".run_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var bg = chrome.extension.getBackgroundPage();\n                bg.execute(my_robot[case_name], tab_id);\n                var process_wait = 0;\n                for (let i = 0; i < my_robot[case_name].length; i++) {\n                    process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait)\n            })\n        })\n\n        // 轮播事务\n        $(\"#cases\").on(\"click\", \".lun_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var process_wait = 0;\n                for (let n = 0; n < 100; n++) {\n                    for (let i = 0; i < my_robot[case_name].length; i++) {\n                        process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                        setTimeout(function() {\n                            chrome.tabs.executeScript(tab_id, { code: jscode(my_robot[case_name][i]) });\n                        }, process_wait);\n                    }\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait);\n            })\n        })\n\n        // 导入事务\n        $(\"#cases\").on(\"click\", \".export_case\", function() {\n            $(this).html(\"导出成功\");\n            var that = $(this);\n            setTimeout(function() {\n                that.html(\"导出\");\n            }, 1000);\n        })\n\n    })\n})\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","source":"_posts/article_18_chrome插件-网页自动化.md","raw":"---\ntitle: WEB-ROBOT\ncatalog: true\ndate: 2020-05-11 19:31:43\nsubtitle: 一个管理网页自动化执行的chrome插件\nheader-img: \ntags:\n- CHROME插件\n---\n\n# 前言\n\n这边主要介绍一款个人自行开发的chrome插件 web-robot，  \n包括它的开始设计，使用教程，实现思路和细节。  \n源码的github地址是在[https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n# 软件设计\n\n关于这个软件的初始设计定位，这边将他定位为**网页自动化链路管理执行**；  \n类似模拟自动化测试，但不会有结果校验。\n\n创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。\n\n软件主要要包括的有以下一些：\n- 网页元素的可视化筛选；\n- 筛选的元素加上动作与延时变成一个事件；\n- 多个事件形成一个事务流程；\n- 主界面可以管理多个事务，进行事务的运行、轮播、分享等；\n\n软件风格大致按使用的前端ui框架的极简风格走；\n\n# 软件使用教程\n\n## 下载与导入\n\n### 源码下载导入\n\n源码github地址：[https://github.com/webgjc/web_robot](\nhttps://github.com/webgjc/web_robot)\n\n首先到github上将源码clone到本地 / 下载解压也可以\n> git clone https://github.com/webgjc/web_robot.git\n\n然后打开chrome点开右上角三个点的地方，  \n选择更多工具 ==》扩展程序；\n\n因为是源码，开启右上角的开发者模式\n![开发者模式](/img/mypost/kaifazhemoshi.jpg)\n\n然后点击左上角的加载已解压的扩展程序，  \n选择刚刚clone下来的目录\n\n下面表示已经加载进来了\n![robot](/img/mypost/robot.jpg)\n\n且右上角出现这个小图标\n![robot](/img/mypost/robot_small.jpg)\n\n**重要：右键这个小图标，**  \n**可读取和更改的网站数据，**  \n**选择 在所有网站上；**\n\n至此已经完成下载和导入啦！😋\n\n### 从chrome商店下载导入\n\n暂时没有上线chrome应用商店\n\n## 软件使用\n\n### 新建事务\n\n首先新建一个事务\n![robot](/img/mypost/robot_shiwu.jpg)\n\n这边建一个test为例子\n![robot](/img/mypost/robot_main.jpg)\n\n### 筛选器\n\n点击 test 进入 过程添加页\n\n点击添加过程，进入筛选器页面\n![robot](/img/mypost/robot_shaixuanqi.jpg)\n\n这边支持按 html标签 / class / id 筛选\n\n下面都进行举例\n\n#### html标签筛选\n\n选择一个html标签，a(链接), body, div等  \n下方会展示一个列表，表示页面中该元素有几个。  \n鼠标移到列表每个上面，  \n页面对应元素将会渲染一个蒙版到以便正确定位选择。\n\n这是选择body的时候\n![robot](/img/mypost/robot_htmltag.jpg)\n\n这是选择div的时候\n![robot](/img/mypost/robot_htmltag2.jpg)\n\n\n#### class / id 筛选\n\n首先在选择标签列表的下列菜单中  \n选择 第一个 class/id选择器   \n然后会出现一个输入框输入对应的class或id  \n\nclass选择器需要以.开头，如：.xxx  \nid选择器需要以#开头，如：#xxx\n\n选好后按回车，如果有对应的选择器，将会展示一个列表, \n后续操作同html标签，鼠标移到列表上会渲染蒙版\n![robot](/img/mypost/robot_classtag.jpg)\n\n### 单个事件\n\n用筛选器选中好一个元素后  \n将会进入事件编辑页面\n![robot](/img/mypost/robot_shijian.jpg)\n\n(如想改变元素，可以按最上面的元素返回)\n\n这边的选择操作可以选的有：\n- click -- 点击\n- value -- 设值\n- refresh -- 刷新\n- pagejump -- 当页url跳转\n\n然后输入 执行前等待时间 / 和上一步执行中间间隔时间\n\n可以测试运行当前事件，也可以把事件添加到事务流程中。\n\n### 流程事件管理\n\n添加后会返回流程页，  \n如下加了一条，等待一秒后，(click)点击第一个\\<a\\>标签\n\n![robot](/img/mypost/robot_liuch.jpg)\n\n如下表示，  \n等待一秒后，(click)点击第一个\\<a\\>标签的链接，  \n再等待一秒后，往第一个input输入框里赋值 你好\n\n![robot](/img/mypost/robot_liuch2.jpg)\n\n可以选择继续添加，  \n可以选择返回主页，  \n可以测试运行单个事件，  \n可以删除单个事件；\n\n### 事务管理\n\n继续到主页\n\n事务支持新增，删除，运行，轮播，导出，导入\n\n![robot](/img/mypost/robot_main.jpg)\n\n#### 运行事务\n\n运行主要是按定好的流程运行每个事件，  \n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。\n\n#### 轮播事务\n\n轮播表示的是循环运行，运行完一次后立即进行下一次。  \n中间的间隔是第一个事件的等待时间。  \n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。\n\n#### 导入导出事务\n\n点击导出，事务的信息会自动保存到剪切板，复制给他人即可；\n\n点击导入，将他人复制的事务信息导入即可；\n\n### 常见问题说明\n\n>筛选器失效\n\n有时候页面与浏览器插件的连接会失效或过期，  \n这个时候可以刷新页面，然后重新打开这个插件页面。\n\n# 软件开发过程\n\n## 其他准备知识\n\n关于chrome插件的开发，请看[官网教程](https://developer.chrome.com/extensions)或[其他教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n\n## 软件开发设计\n\n这个浏览器插件包括以下几部分：\n```\n配置文件\nmanifest.json\n\n样式文件夹\n/css\n\nhtml文件，主要放了popup.html，也就是这个插件管理页\n/html\n\n存放图片\n/images\n\n存放js\n主要实现的包括popup.js(管理页的后端)\n和background.js(浏览器的后端)\n/js\n```\n\n## 部分代码说明\n\n``` javascript\n// 获取数据存储\nfunction get_my_robot(callback) {\n    chrome.storage.local.get([\"my_robot\"], function(res) {\n        if (callback) callback(res.my_robot)\n    })\n}\n\n// 设置数据存储\nfunction set_my_robot(new_robot, callback) {\n    chrome.storage.local.set({ \"my_robot\": new_robot }, function() {\n        if (callback) callback()\n    })\n}\n\n// 连接\nfunction connect(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        var port = chrome.tabs.connect(tabs[0].id, { name: \"robot\" });\n        callback(port)\n    })\n}\n\n// 当前tab执行\nfunction exectab(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        callback(tabs[0].id)\n    })\n}\n\n\n// 拼接要执行的js代码\nfunction jscode(process) {\n    let exec_code = \"(function(){ \\n\";\n    if(process[\"tag\"].startsWith(\".\")) {\n        exec_code += 'var robot_node = document.getElementsByClassName(\"' + process[\"tag\"].substring(1) + '\")[' + process[\"n\"] + '];'\n    }else if(process[\"tag\"].startsWith(\"#\")) {\n        exec_code += 'var robot_node = document.getElementById(\"' + process[\"tag\"].substring(1) + '\");'\n    }else{\n        exec_code += 'var robot_node = document.getElementsByTagName(\"' + process[\"tag\"] + '\")[' + process[\"n\"] + '];'\n    }\n    if (process[\"opera\"] == \"click\") {\n        exec_code += \"robot_node.click();\"\n    } else if (process[\"opera\"] == \"value\") {\n        /**\n         * 为react兼容\n         */\n        exec_code += \"let lastValue = robot_node.value;\"\n        exec_code += \"robot_node.value=\\\"\" + process[\"value\"] + \"\\\";\";\n        exec_code += \"let event = new Event('input', { bubbles: true });\";\n        exec_code += \"event.simulated = true;\";\n        exec_code += \"let tracker = robot_node._valueTracker;\";\n        exec_code += \"if (tracker) { tracker.setValue(lastValue); }\\n\";\n        exec_code += \"robot_node.dispatchEvent(event);\";\n    } else if (process[\"opera\"] == \"refresh\") {\n        exec_code += \"window.location.reload();\";\n    } else if (process[\"opera\"] == \"pagejump\") {\n        exec_code += \"window.location.href=\\\"\" + process[\"value\"] + \"\\\";\";\n    }\n    exec_code += \"\\n})();\";\n    console.log(exec_code)\n    return exec_code;\n}\n\n// 根据存储数据更新主页\nfunction refresh_cases() {\n    get_my_robot(my_robot => {\n        if (my_robot == undefined) {\n            set_my_robot({})\n        } else {\n            var cases = \"\";\n            for (let i in my_robot) {\n                let one_case = {}\n                one_case[\"case_name\"] = i;\n                one_case[\"content\"] = my_robot[i];\n                let tr = '<tr id=' + i + '> \\\n                            <td> \\\n                                <a href=\"#\" class=\"case_name\">' + i + '</a> \\\n                            </td> \\\n                            <td> \\\n                                <a href=\"#\" class=\"run_case\">运行</a> \\\n                                <a href=\"#\" class=\"del_case\">删除</a> \\\n                                <a href=\"#\" class=\"lun_case\">轮播</a> \\\n                                <a href=\"#\" class=\"export_case\" data-clipboard-text=' + JSON.stringify(one_case) + '>导出</a> \\\n                            </td> \\\n                        </tr>';\n                cases = cases + tr;\n            }\n            $(\"#cases\").html(cases);\n        }\n    })\n    new ClipboardJS('.export_case');\n}\n\n\n// 更新单个事务的流程\nfunction refresh_process(case_name) {\n    get_my_robot(my_robot => {\n        var data = my_robot[case_name];\n        var process_li = \"\";\n        for (let i = 0; i < data.length; i++) {\n            let lili = '<li class=\"collection-item\" id=\"process-' + i + '\"> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">标签：' + data[i][\"tag\"] + '</div> \\\n                                <div class=\"col s6 \">#：' + data[i][\"n\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">操作：' + data[i][\"opera\"] + '</div> \\\n                                <div class=\"col s6 \">等待：' + data[i][\"wait\"] + '秒</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s12 \">赋值：' + data[i][\"value\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6\" id=\"process_test_run\" >test</div> \\\n                                </a> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6 \" id=\"process_del\">删除</div> \\\n                                </a> \\\n                            </div> \\\n                        </li> ';\n            process_li = process_li + lili;\n        }\n        $(\"#process_list\").html(process_li);\n    })\n}\n\n// 主要\n$(document).ready(function() {\n\n    // 筛选器\n    var tag_types = [\"class/id选择器\", \"a\", \"body\", \"button\", \"div\", \"i\", \"img\", \"input\", \"li\", \"p\", \"span\", \"td\", \"textarea\", \"tr\", \"ul\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"];\n    // 操作\n    var operas = [\"click\", \"value\", \"refresh\", \"pagejump\"];\n    var case_name = \"\";\n    var init_select = 1;\n\n    refresh_cases();\n\n    $('.modal').modal();\n\n    // 连接当前页面\n    exectab(tab_id => {\n\n        // 运行事务，调用background\n        $(\"#cases\").on(\"click\", \".run_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var bg = chrome.extension.getBackgroundPage();\n                bg.execute(my_robot[case_name], tab_id);\n                var process_wait = 0;\n                for (let i = 0; i < my_robot[case_name].length; i++) {\n                    process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait)\n            })\n        })\n\n        // 轮播事务\n        $(\"#cases\").on(\"click\", \".lun_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var process_wait = 0;\n                for (let n = 0; n < 100; n++) {\n                    for (let i = 0; i < my_robot[case_name].length; i++) {\n                        process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                        setTimeout(function() {\n                            chrome.tabs.executeScript(tab_id, { code: jscode(my_robot[case_name][i]) });\n                        }, process_wait);\n                    }\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait);\n            })\n        })\n\n        // 导入事务\n        $(\"#cases\").on(\"click\", \".export_case\", function() {\n            $(this).html(\"导出成功\");\n            var that = $(this);\n            setTimeout(function() {\n                that.html(\"导出\");\n            }, 1000);\n        })\n\n    })\n})\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","slug":"article_18_chrome插件-网页自动化","published":1,"updated":"2020-05-13T02:14:52.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxom000lx8so826y4unx","content":"<h1 id=\"前言\">前言</h1>\n<p>这边主要介绍一款个人自行开发的chrome插件 web-robot，<br>\n包括它的开始设计，使用教程，实现思路和细节。<br>\n源码的github地址是在<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot</a></p>\n<h1 id=\"软件设计\">软件设计</h1>\n<p>关于这个软件的初始设计定位，这边将他定位为<strong>网页自动化链路管理执行</strong>；<br>\n类似模拟自动化测试，但不会有结果校验。</p>\n<p>创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。</p>\n<p>软件主要要包括的有以下一些：</p>\n<ul>\n<li>网页元素的可视化筛选；</li>\n<li>筛选的元素加上动作与延时变成一个事件；</li>\n<li>多个事件形成一个事务流程；</li>\n<li>主界面可以管理多个事务，进行事务的运行、轮播、分享等；</li>\n</ul>\n<p>软件风格大致按使用的前端ui框架的极简风格走；</p>\n<h1 id=\"软件使用教程\">软件使用教程</h1>\n<h2 id=\"下载与导入\">下载与导入</h2>\n<h3 id=\"源码下载导入\">源码下载导入</h3>\n<p>源码github地址：<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot</a></p>\n<p>首先到github上将源码clone到本地 / 下载解压也可以</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==》扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n<img src=\"/img/mypost/kaifazhemoshi.jpg\" alt=\"开发者模式\"></p>\n<p>然后点击左上角的加载已解压的扩展程序，<br>\n选择刚刚clone下来的目录</p>\n<p>下面表示已经加载进来了<br>\n<img src=\"/img/mypost/robot.jpg\" alt=\"robot\"></p>\n<p>且右上角出现这个小图标<br>\n<img src=\"/img/mypost/robot_small.jpg\" alt=\"robot\"></p>\n<p><strong>重要：右键这个小图标，</strong><br>\n<strong>可读取和更改的网站数据，</strong><br>\n<strong>选择 在所有网站上；</strong></p>\n<p>至此已经完成下载和导入啦！😋</p>\n<h3 id=\"从chrome商店下载导入\">从chrome商店下载导入</h3>\n<p>暂时没有上线chrome应用商店</p>\n<h2 id=\"软件使用\">软件使用</h2>\n<h3 id=\"新建事务\">新建事务</h3>\n<p>首先新建一个事务<br>\n<img src=\"/img/mypost/robot_shiwu.jpg\" alt=\"robot\"></p>\n<p>这边建一个test为例子<br>\n<img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h3 id=\"筛选器\">筛选器</h3>\n<p>点击 test 进入 过程添加页</p>\n<p>点击添加过程，进入筛选器页面<br>\n<img src=\"/img/mypost/robot_shaixuanqi.jpg\" alt=\"robot\"></p>\n<p>这边支持按 html标签 / class / id 筛选</p>\n<p>下面都进行举例</p>\n<h4 id=\"html标签筛选\">html标签筛选</h4>\n<p>选择一个html标签，a(链接), body, div等<br>\n下方会展示一个列表，表示页面中该元素有几个。<br>\n鼠标移到列表每个上面，<br>\n页面对应元素将会渲染一个蒙版到以便正确定位选择。</p>\n<p>这是选择body的时候<br>\n<img src=\"/img/mypost/robot_htmltag.jpg\" alt=\"robot\"></p>\n<p>这是选择div的时候<br>\n<img src=\"/img/mypost/robot_htmltag2.jpg\" alt=\"robot\"></p>\n<h4 id=\"class-id-筛选\">class / id 筛选</h4>\n<p>首先在选择标签列表的下列菜单中<br>\n选择 第一个 class/id选择器<br>\n然后会出现一个输入框输入对应的class或id</p>\n<p>class选择器需要以.开头，如：.xxx<br>\nid选择器需要以#开头，如：#xxx</p>\n<p>选好后按回车，如果有对应的选择器，将会展示一个列表,<br>\n后续操作同html标签，鼠标移到列表上会渲染蒙版<br>\n<img src=\"/img/mypost/robot_classtag.jpg\" alt=\"robot\"></p>\n<h3 id=\"单个事件\">单个事件</h3>\n<p>用筛选器选中好一个元素后<br>\n将会进入事件编辑页面<br>\n<img src=\"/img/mypost/robot_shijian.jpg\" alt=\"robot\"></p>\n<p>(如想改变元素，可以按最上面的元素返回)</p>\n<p>这边的选择操作可以选的有：</p>\n<ul>\n<li>click – 点击</li>\n<li>value – 设值</li>\n<li>refresh – 刷新</li>\n<li>pagejump – 当页url跳转</li>\n</ul>\n<p>然后输入 执行前等待时间 / 和上一步执行中间间隔时间</p>\n<p>可以测试运行当前事件，也可以把事件添加到事务流程中。</p>\n<h3 id=\"流程事件管理\">流程事件管理</h3>\n<p>添加后会返回流程页，<br>\n如下加了一条，等待一秒后，(click)点击第一个&lt;a&gt;标签</p>\n<p><img src=\"/img/mypost/robot_liuch.jpg\" alt=\"robot\"></p>\n<p>如下表示，<br>\n等待一秒后，(click)点击第一个&lt;a&gt;标签的链接，<br>\n再等待一秒后，往第一个input输入框里赋值 你好</p>\n<p><img src=\"/img/mypost/robot_liuch2.jpg\" alt=\"robot\"></p>\n<p>可以选择继续添加，<br>\n可以选择返回主页，<br>\n可以测试运行单个事件，<br>\n可以删除单个事件；</p>\n<h3 id=\"事务管理\">事务管理</h3>\n<p>继续到主页</p>\n<p>事务支持新增，删除，运行，轮播，导出，导入</p>\n<p><img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h4 id=\"运行事务\">运行事务</h4>\n<p>运行主要是按定好的流程运行每个事件，<br>\n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。</p>\n<h4 id=\"轮播事务\">轮播事务</h4>\n<p>轮播表示的是循环运行，运行完一次后立即进行下一次。<br>\n中间的间隔是第一个事件的等待时间。<br>\n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。</p>\n<h4 id=\"导入导出事务\">导入导出事务</h4>\n<p>点击导出，事务的信息会自动保存到剪切板，复制给他人即可；</p>\n<p>点击导入，将他人复制的事务信息导入即可；</p>\n<h3 id=\"常见问题说明\">常见问题说明</h3>\n<blockquote>\n<p>筛选器失效</p>\n</blockquote>\n<p>有时候页面与浏览器插件的连接会失效或过期，<br>\n这个时候可以刷新页面，然后重新打开这个插件页面。</p>\n<h1 id=\"软件开发过程\">软件开发过程</h1>\n<h2 id=\"其他准备知识\">其他准备知识</h2>\n<p>关于chrome插件的开发，请看<a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官网教程</a>或<a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">其他教程</a></p>\n<h2 id=\"软件开发设计\">软件开发设计</h2>\n<p>这个浏览器插件包括以下几部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置文件</span><br><span class=\"line\">manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">样式文件夹</span><br><span class=\"line\">/css</span><br><span class=\"line\"></span><br><span class=\"line\">html文件，主要放了popup.html，也就是这个插件管理页</span><br><span class=\"line\">/html</span><br><span class=\"line\"></span><br><span class=\"line\">存放图片</span><br><span class=\"line\">/images</span><br><span class=\"line\"></span><br><span class=\"line\">存放js</span><br><span class=\"line\">主要实现的包括popup.js(管理页的后端)</span><br><span class=\"line\">和background.js(浏览器的后端)</span><br><span class=\"line\">/js</span><br></pre></td></tr></table></figure>\n<h2 id=\"部分代码说明\">部分代码说明</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_my_robot</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.get([<span class=\"string\">\"my_robot\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback(res.my_robot)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_my_robot</span>(<span class=\"params\">new_robot, callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.set(&#123; <span class=\"string\">\"my_robot\"</span>: new_robot &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> port = chrome.tabs.connect(tabs[<span class=\"number\">0</span>].id, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"robot\"</span> &#125;);</span><br><span class=\"line\">        callback(port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前tab执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exectab</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        callback(tabs[<span class=\"number\">0</span>].id)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接要执行的js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jscode</span>(<span class=\"params\">process</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> exec_code = <span class=\"string\">\"(function()&#123; \\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByClassName(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementById(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\");'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByTagName(\"'</span> + process[<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"click\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.click();\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"value\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 为react兼容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let lastValue = robot_node.value;\"</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.value=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let event = new Event('input', &#123; bubbles: true &#125;);\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"event.simulated = true;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let tracker = robot_node._valueTracker;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"if (tracker) &#123; tracker.setValue(lastValue); &#125;\\n\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.dispatchEvent(event);\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"refresh\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.reload();\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"pagejump\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.href=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exec_code += <span class=\"string\">\"\\n&#125;)();\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exec_code)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exec_code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据存储数据更新主页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_cases</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_robot == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            set_my_robot(&#123;&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cases = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> my_robot) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> one_case = &#123;&#125;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"case_name\"</span>] = i;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"content\"</span>] = my_robot[i];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> tr = <span class=\"string\">'&lt;tr id='</span> + i + <span class=\"string\">'&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"case_name\"&gt;'</span> + i + <span class=\"string\">'&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"run_case\"&gt;运行&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"del_case\"&gt;删除&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"lun_case\"&gt;轮播&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"export_case\" data-clipboard-text='</span> + <span class=\"built_in\">JSON</span>.stringify(one_case) + <span class=\"string\">'&gt;导出&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/tr&gt;'</span>;</span><br><span class=\"line\">                cases = cases + tr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"string\">\"#cases\"</span>).html(cases);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">'.export_case'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新单个事务的流程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_process</span>(<span class=\"params\">case_name</span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = my_robot[case_name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> process_li = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> lili = <span class=\"string\">'&lt;li class=\"collection-item\" id=\"process-'</span> + i + <span class=\"string\">'\"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;标签：'</span> + data[i][<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;#：'</span> + data[i][<span class=\"string\">\"n\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;操作：'</span> + data[i][<span class=\"string\">\"opera\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;等待：'</span> + data[i][<span class=\"string\">\"wait\"</span>] + <span class=\"string\">'秒&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s12 \"&gt;赋值：'</span> + data[i][<span class=\"string\">\"value\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6\" id=\"process_test_run\" &gt;test&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6 \" id=\"process_del\"&gt;删除&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/li&gt; '</span>;</span><br><span class=\"line\">            process_li = process_li + lili;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#process_list\"</span>).html(process_li);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag_types = [<span class=\"string\">\"class/id选择器\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"body\"</span>, <span class=\"string\">\"button\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"input\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"textarea\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"ul\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> operas = [<span class=\"string\">\"click\"</span>, <span class=\"string\">\"value\"</span>, <span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"pagejump\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> case_name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> init_select = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    refresh_cases();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'.modal'</span>).modal();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接当前页面</span></span><br><span class=\"line\">    exectab(<span class=\"function\"><span class=\"params\">tab_id</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行事务，调用background</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".run_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bg = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">                bg.execute(my_robot[case_name], tab_id);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                    process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 轮播事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".lun_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">100</span>; n++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                        process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            chrome.tabs.executeScript(tab_id, &#123; <span class=\"attr\">code</span>: jscode(my_robot[case_name][i]) &#125;);</span><br><span class=\"line\">                        &#125;, process_wait);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 导入事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".export_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"keyword\">this</span>).html(<span class=\"string\">\"导出成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                that.html(<span class=\"string\">\"导出\"</span>);</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"感谢\">感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"noopener\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">插件教程</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>前言</h1>\n<p>这边主要介绍一款个人自行开发的chrome插件 web-robot，<br>\n包括它的开始设计，使用教程，实现思路和细节。<br>\n源码的github地址是在<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot</a></p>\n<h1>软件设计</h1>\n<p>关于这个软件的初始设计定位，这边将他定位为<strong>网页自动化链路管理执行</strong>；<br>\n类似模拟自动化测试，但不会有结果校验。</p>\n<p>创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。</p>\n<p>软件主要要包括的有以下一些：</p>\n<ul>\n<li>网页元素的可视化筛选；</li>\n<li>筛选的元素加上动作与延时变成一个事件；</li>\n<li>多个事件形成一个事务流程；</li>\n<li>主界面可以管理多个事务，进行事务的运行、轮播、分享等；</li>\n</ul>\n<p>软件风格大致按使用的前端ui框架的极简风格走；</p>\n<h1>软件使用教程</h1>\n<h2>下载与导入</h2>\n<h3>源码下载导入</h3>\n<p>源码github地址：<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot</a></p>\n<p>首先到github上将源码clone到本地 / 下载解压也可以</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==》扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n<img src=\"/img/mypost/kaifazhemoshi.jpg\" alt=\"开发者模式\"></p>\n<p>然后点击左上角的加载已解压的扩展程序，<br>\n选择刚刚clone下来的目录</p>\n<p>下面表示已经加载进来了<br>\n<img src=\"/img/mypost/robot.jpg\" alt=\"robot\"></p>\n<p>且右上角出现这个小图标<br>\n<img src=\"/img/mypost/robot_small.jpg\" alt=\"robot\"></p>\n<p><strong>重要：右键这个小图标，</strong><br>\n<strong>可读取和更改的网站数据，</strong><br>\n<strong>选择 在所有网站上；</strong></p>\n<p>至此已经完成下载和导入啦！😋</p>\n<h3>从chrome商店下载导入</h3>\n<p>暂时没有上线chrome应用商店</p>\n<h2>软件使用</h2>\n<h3>新建事务</h3>\n<p>首先新建一个事务<br>\n<img src=\"/img/mypost/robot_shiwu.jpg\" alt=\"robot\"></p>\n<p>这边建一个test为例子<br>\n<img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h3>筛选器</h3>\n<p>点击 test 进入 过程添加页</p>\n<p>点击添加过程，进入筛选器页面<br>\n<img src=\"/img/mypost/robot_shaixuanqi.jpg\" alt=\"robot\"></p>\n<p>这边支持按 html标签 / class / id 筛选</p>\n<p>下面都进行举例</p>\n<h4>html标签筛选</h4>\n<p>选择一个html标签，a(链接), body, div等<br>\n下方会展示一个列表，表示页面中该元素有几个。<br>\n鼠标移到列表每个上面，<br>\n页面对应元素将会渲染一个蒙版到以便正确定位选择。</p>\n<p>这是选择body的时候<br>\n<img src=\"/img/mypost/robot_htmltag.jpg\" alt=\"robot\"></p>\n<p>这是选择div的时候<br>\n<img src=\"/img/mypost/robot_htmltag2.jpg\" alt=\"robot\"></p>\n<h4>class / id 筛选</h4>\n<p>首先在选择标签列表的下列菜单中<br>\n选择 第一个 class/id选择器<br>\n然后会出现一个输入框输入对应的class或id</p>\n<p>class选择器需要以.开头，如：.xxx<br>\nid选择器需要以#开头，如：#xxx</p>\n<p>选好后按回车，如果有对应的选择器，将会展示一个列表,<br>\n后续操作同html标签，鼠标移到列表上会渲染蒙版<br>\n<img src=\"/img/mypost/robot_classtag.jpg\" alt=\"robot\"></p>\n<h3>单个事件</h3>\n<p>用筛选器选中好一个元素后<br>\n将会进入事件编辑页面<br>\n<img src=\"/img/mypost/robot_shijian.jpg\" alt=\"robot\"></p>\n<p>(如想改变元素，可以按最上面的元素返回)</p>\n<p>这边的选择操作可以选的有：</p>\n<ul>\n<li>click – 点击</li>\n<li>value – 设值</li>\n<li>refresh – 刷新</li>\n<li>pagejump – 当页url跳转</li>\n</ul>\n<p>然后输入 执行前等待时间 / 和上一步执行中间间隔时间</p>\n<p>可以测试运行当前事件，也可以把事件添加到事务流程中。</p>\n<h3>流程事件管理</h3>\n<p>添加后会返回流程页，<br>\n如下加了一条，等待一秒后，(click)点击第一个&lt;a&gt;标签</p>\n<p><img src=\"/img/mypost/robot_liuch.jpg\" alt=\"robot\"></p>\n<p>如下表示，<br>\n等待一秒后，(click)点击第一个&lt;a&gt;标签的链接，<br>\n再等待一秒后，往第一个input输入框里赋值 你好</p>\n<p><img src=\"/img/mypost/robot_liuch2.jpg\" alt=\"robot\"></p>\n<p>可以选择继续添加，<br>\n可以选择返回主页，<br>\n可以测试运行单个事件，<br>\n可以删除单个事件；</p>\n<h3>事务管理</h3>\n<p>继续到主页</p>\n<p>事务支持新增，删除，运行，轮播，导出，导入</p>\n<p><img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h4>运行事务</h4>\n<p>运行主要是按定好的流程运行每个事件，<br>\n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。</p>\n<h4>轮播事务</h4>\n<p>轮播表示的是循环运行，运行完一次后立即进行下一次。<br>\n中间的间隔是第一个事件的等待时间。<br>\n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。</p>\n<h4>导入导出事务</h4>\n<p>点击导出，事务的信息会自动保存到剪切板，复制给他人即可；</p>\n<p>点击导入，将他人复制的事务信息导入即可；</p>\n<h3>常见问题说明</h3>\n<blockquote>\n<p>筛选器失效</p>\n</blockquote>\n<p>有时候页面与浏览器插件的连接会失效或过期，<br>\n这个时候可以刷新页面，然后重新打开这个插件页面。</p>\n<h1>软件开发过程</h1>\n<h2>其他准备知识</h2>\n<p>关于chrome插件的开发，请看<a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官网教程</a>或<a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">其他教程</a></p>\n<h2>软件开发设计</h2>\n<p>这个浏览器插件包括以下几部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置文件</span><br><span class=\"line\">manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">样式文件夹</span><br><span class=\"line\">/css</span><br><span class=\"line\"></span><br><span class=\"line\">html文件，主要放了popup.html，也就是这个插件管理页</span><br><span class=\"line\">/html</span><br><span class=\"line\"></span><br><span class=\"line\">存放图片</span><br><span class=\"line\">/images</span><br><span class=\"line\"></span><br><span class=\"line\">存放js</span><br><span class=\"line\">主要实现的包括popup.js(管理页的后端)</span><br><span class=\"line\">和background.js(浏览器的后端)</span><br><span class=\"line\">/js</span><br></pre></td></tr></table></figure>\n<h2>部分代码说明</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_my_robot</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.get([<span class=\"string\">\"my_robot\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback(res.my_robot)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_my_robot</span>(<span class=\"params\">new_robot, callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.set(&#123; <span class=\"string\">\"my_robot\"</span>: new_robot &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> port = chrome.tabs.connect(tabs[<span class=\"number\">0</span>].id, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"robot\"</span> &#125;);</span><br><span class=\"line\">        callback(port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前tab执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exectab</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        callback(tabs[<span class=\"number\">0</span>].id)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接要执行的js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jscode</span>(<span class=\"params\">process</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> exec_code = <span class=\"string\">\"(function()&#123; \\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByClassName(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementById(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\");'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByTagName(\"'</span> + process[<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"click\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.click();\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"value\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 为react兼容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let lastValue = robot_node.value;\"</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.value=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let event = new Event('input', &#123; bubbles: true &#125;);\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"event.simulated = true;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let tracker = robot_node._valueTracker;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"if (tracker) &#123; tracker.setValue(lastValue); &#125;\\n\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.dispatchEvent(event);\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"refresh\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.reload();\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"pagejump\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.href=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exec_code += <span class=\"string\">\"\\n&#125;)();\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exec_code)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exec_code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据存储数据更新主页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_cases</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_robot == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            set_my_robot(&#123;&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cases = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> my_robot) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> one_case = &#123;&#125;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"case_name\"</span>] = i;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"content\"</span>] = my_robot[i];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> tr = <span class=\"string\">'&lt;tr id='</span> + i + <span class=\"string\">'&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"case_name\"&gt;'</span> + i + <span class=\"string\">'&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"run_case\"&gt;运行&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"del_case\"&gt;删除&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"lun_case\"&gt;轮播&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"export_case\" data-clipboard-text='</span> + <span class=\"built_in\">JSON</span>.stringify(one_case) + <span class=\"string\">'&gt;导出&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/tr&gt;'</span>;</span><br><span class=\"line\">                cases = cases + tr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"string\">\"#cases\"</span>).html(cases);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">'.export_case'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新单个事务的流程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_process</span>(<span class=\"params\">case_name</span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = my_robot[case_name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> process_li = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> lili = <span class=\"string\">'&lt;li class=\"collection-item\" id=\"process-'</span> + i + <span class=\"string\">'\"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;标签：'</span> + data[i][<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;#：'</span> + data[i][<span class=\"string\">\"n\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;操作：'</span> + data[i][<span class=\"string\">\"opera\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;等待：'</span> + data[i][<span class=\"string\">\"wait\"</span>] + <span class=\"string\">'秒&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s12 \"&gt;赋值：'</span> + data[i][<span class=\"string\">\"value\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6\" id=\"process_test_run\" &gt;test&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6 \" id=\"process_del\"&gt;删除&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/li&gt; '</span>;</span><br><span class=\"line\">            process_li = process_li + lili;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#process_list\"</span>).html(process_li);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag_types = [<span class=\"string\">\"class/id选择器\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"body\"</span>, <span class=\"string\">\"button\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"input\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"textarea\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"ul\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> operas = [<span class=\"string\">\"click\"</span>, <span class=\"string\">\"value\"</span>, <span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"pagejump\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> case_name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> init_select = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    refresh_cases();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'.modal'</span>).modal();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接当前页面</span></span><br><span class=\"line\">    exectab(<span class=\"function\"><span class=\"params\">tab_id</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行事务，调用background</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".run_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bg = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">                bg.execute(my_robot[case_name], tab_id);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                    process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 轮播事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".lun_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">100</span>; n++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                        process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            chrome.tabs.executeScript(tab_id, &#123; <span class=\"attr\">code</span>: jscode(my_robot[case_name][i]) &#125;);</span><br><span class=\"line\">                        &#125;, process_wait);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 导入事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".export_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"keyword\">this</span>).html(<span class=\"string\">\"导出成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                that.html(<span class=\"string\">\"导出\"</span>);</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1>感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"noopener\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">插件教程</a></li>\n</ul>\n"},{"title":"TABLE-MAKER","catalog":true,"date":"2020-05-20T02:31:43.000Z","subtitle":"一个万能数据表格的浏览器插件","header-img":null,"_content":"\n# 前言\n\n本次依旧发布一款浏览器插件--万能表格。\n\n说说为什么万能，其一，因为它可以接入任意的GET接口数据或其他文本(html/text...)数据来源，且无跨域限制，且一些需要cookie的接口或网站访问数据时也会带上cookie。  \n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json解析用就直接用key，文本解析就用正则表达式。  \n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到url地址上，再反映到数据上。\n\n## 案例展示\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n\n# 软件使用教程\n\n## 软件下载与导入\n\n### 源码下载导入\n\n软件源码的github地址为   \n[https://github.com/webgjc/table_maker](https://github.com/webgjc/table_maker)\n\n首先将代码克隆到本地\n\n> git clone https://github.com/webgjc/table_maker.git\n\n然后打开chrome点开右上角三个点的地方，\n选择更多工具 ==> 扩展程序；\n\n因为是源码，开启右上角的开发者模式\n开发者模式，(在完毕后可以关闭开发者模式)\n\n然后点击左上角的 **加载已解压的扩展程序**，\n选择刚刚clone下来的目录\n\n下图表示已经加载进来了\n\n![table_maker](/img/mypost/table_maker.jpg)\n\n然后浏览器右上角也有这个插件的小图标\n\n就表示导入完成。\n\n### 软件商店下载\n\n暂不支持\n\n## 软件使用\n\n点开浏览器右上角的 **$** 小图标，会见到如下主页\n\n![tablemaker_main](/img/mypost/tablemaker_main.jpg)\n\n目前该插件只支持一个表的制作与展示。\n\n### 导入数据体验\n\n数据如下\n\n``` json\n{\n    \"data_type\": \"text\",\n    \"data_url\": \"http://fund.eastmoney.com/{ID}.html\",\n    \"fields\": [\n        {\n            \"data_parser\": \"funCur-FundName\\\">(.*?)</span>\",\n            \"field_name\": \"基金名称\"\n        },\n        {\n            \"data_parser\": \"gz_gszzl\\\">(.*?)</span>\",\n            \"field_name\": \"净值估算\"\n        }\n    ],\n    \"keys\": [\n        \"110022\",\n        \"003634\"\n    ],\n    \"table_name\": \"基金今日估值\"\n}\n```\n\n这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码  \n(这边用的天天基金网的基金详情页面，实时数据有延迟)\n\n可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。\n\n每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。\n\n### 制作自己的表格TEXT解析\n\n接下来就是最重要的部分 -- 制作万能表格\n\n#### 基金净值表\n\n这里以制作上面基金实时净值表为例。\n\n#### 确定表格数据源\n\n首先要确定好要制作的表格的数据来源。\n\n比如这里找到了 [天天基金网](http://fund.eastmoney.com/)，  \n它查看一个基金详情的的地址页如下：\n> http://fund.eastmoney.com/{ID}.html\n\n{ID}表示基金的代码，虽然是html格式的返回，但也可以正则来解析，正合适我们这里所需要的。\n\n点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。\n\n#### 确定需要解析的字段\n\n这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)\n\n到某个基金的详情的html页面，打开浏览器调试，或查看源码。\n\n找到这个数据的来源，这边看到在html源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据\n\n基金名称源码对应\n``` html\n<span class=\"funCur-Tit\">基金名称：</span><span class=\"funCur-FundName\">易方达消费行业股票</span>\n```\n\n正则解析方式为 \n>funCur-FundName\\\">(.*?)\\</span>\n\n基金实时估值部分源码\n``` html\n<div class=\"remindicon\"><p>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。</p></div></div><div class=\"fundDetail-main\"><!-- 档案 start --><div class=\"fundInfoItem\"><!--开放式基金收益率模块--><div class=\"dataOfFund\"><dl class=\"dataItem01\"><dt><p><span><span class=\"sp01\">净值估算</span></span><span id=\"gz_gztime\">(20-05-20 10:01)</span><span class=\"infoTips\"><span class=\"tipsBubble\" style=\"display: none;\">净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。</span></span></p></dt><dd class=\"dataNums\"><dl class=\"floatleft\"><span class=\"ui-font-large ui-color-green ui-num\" id=\"gz_gsz\">3.1764</span></dl><dl id=\"gz_icon\" class=\"gzdown\"></dl><dl class=\"floatleft fundZdf\"><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszze\">0.0086</span><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszzl\">-0.27%</span>\n```\n\n正则解析方式为\n>gz_gszzl\\\">(.*?)\\</span>\n\n**插件上的操作为**\n\n主页点击修改表格，点击确定并修改列\n\n点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下\n\n![tablemaker_lie](/img/mypost/tablemaker_lie.jpg)\n\n当然这边也提供了测试解析的功能\n\n点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。\n\n点击返回返回主页，列就会渲染出来。\n\n#### 最终效果和主页操作\n\n制作完的主页如下，没有数据但加的列已经有了\n\n![tablemaker_kongzhu](/img/mypost/tablemaker_kongzhu.jpg)\n\n主页上可以增加主键，表示增加一行数据\n\n增加主键就相当于一个关注的基金。\n\n比如增加110022, 003634这两个基金代码作为主键，就制作成了上面的直接导入数据的表格\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。\n\n### 制作自己的表格JSON解析\n\n#### 城市天气表\n\n这边JSON解析举的例子为 城市天气列表\n\n#### 数据来源\n\n首先找到所需数据源接口\n\n这边使用国家的\n>http://www.weather.com.cn/data/cityinfo/{ID}.html\n\n{ID}表示城市代码，代码列表在下面有\nhttps://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\n\n天气格式如下\n```\n{\n    \"weatherinfo\": {\n        \"city\": \"北京\",\n        \"cityid\": \"101010100\",\n        \"temp1\": \"18℃\",\n        \"temp2\": \"31℃\",\n        \"weather\": \"多云转阴\",\n        \"img1\": \"n1.gif\",\n        \"img2\": \"d2.gif\",\n        \"ptime\": \"18:00\"\n    }\n}\n```\n\n编辑表格  \n\n表名使用 城市天气表，  \n数据源填写 http://www.weather.com.cn/data/cityinfo/{ID}.html  \n数据格式 json\n\n#### 设置列解析\n\njson解析比较简单，直接使用key.key.key\n\n举例如下：  \n要解析城市名，则新增字段，名称填城市， 解析方式就写 \n> weatherinfo.city  \n\n要解析城市天气，则新增字段，解析方式就写 \n> weatherinfo.weather\n\n#### 最终效果展示\n\n主页操作同上 TEXT解析的表格\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n## 软件开发说明\n\n浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。\n\n本次插件主要利用的是 在popup.js或者background.js可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。\n\n至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。\n\n### 重点关注部分代码\n\n主要代码在popup.js中，\n\n``` javascript\n// json解析，解析格式为：key.key.key\n// 根据每个key去获取对应的值\nasync function deal_json_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then(response => response.json())\n        .then(data => {\n            rowdata = [key];\n            for (i in fields) {\n                tmpdata = data;\n                fields[i][\"data_parser\"].split(\".\").map(fieldkey => {\n                    tmpdata = tmpdata[fieldkey];\n                })\n                if (Object.prototype.toString.call(tmpdata) === '[object Object]') {\n                    rowdata.push(JSON.stringify(tmpdata));\n                } else {\n                    rowdata.push(tmpdata || \"\");\n                }\n            }\n            return rowdata;\n        });\n}\n\n// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值\n// 也就是(.*?)的部分\nasync function deal_text_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then(res => res.text())\n        .then(data => {\n            rowdata = [key];\n            for (i in fields) {\n                rowdata.push(data.match(new RegExp(fields[i][\"data_parser\"]))[1]);\n            }\n            return rowdata;\n        });\n}\n\n\n// 渲染主页的数据，使用异步\nasync function render(data) {\n    $(\".mainbody\").html(\"\");\n    $(\".table_head\").html(data[\"table_name\"]);\n    headstr = \"<tr>\";\n    headstr += \"<td>主键</td>\"\n    data[\"fields\"].map(field => headstr += \"<td>\" + field[\"field_name\"] + \"</td>\");\n    headstr += \"<td>操作</td></tr>\";\n    $(\".mainhead\").html(headstr);\n    for (key in data[\"keys\"]) {\n        let row;\n        try {\n            if (data[\"data_type\"] === \"json\") {\n                row = await deal_json_parser(data[\"data_url\"], data[\"keys\"][key], data[\"fields\"]);\n            } else {\n                row = await deal_text_parser(data[\"data_url\"], data[\"keys\"][key], data[\"fields\"]);\n            }\n        } catch (e) {\n            row = [data[\"keys\"][key]];\n            data[\"fields\"].map(field => row.push(\"\"));\n        }\n        htmlstr = \"<tr>\";\n        row.map(value => htmlstr += \"<td>\" + value + \"</td>\");\n        htmlstr += \"<td><a href='#' id='move_up' key='\" + key + \"'>上移</a> <a href='#' id='delete_value' key='\" + key + \"'>删除</a></td>\"\n        htmlstr += \"</tr>\";\n        $(\".mainbody\").append(htmlstr);\n    }\n}\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","source":"_posts/article_19_chrome插件-万能表格.md","raw":"---\ntitle: TABLE-MAKER\ncatalog: true\ndate: 2020-05-20 10:31:43\nsubtitle: 一个万能数据表格的浏览器插件\nheader-img: \ntags:\n- CHROME插件\n---\n\n# 前言\n\n本次依旧发布一款浏览器插件--万能表格。\n\n说说为什么万能，其一，因为它可以接入任意的GET接口数据或其他文本(html/text...)数据来源，且无跨域限制，且一些需要cookie的接口或网站访问数据时也会带上cookie。  \n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json解析用就直接用key，文本解析就用正则表达式。  \n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到url地址上，再反映到数据上。\n\n## 案例展示\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n\n# 软件使用教程\n\n## 软件下载与导入\n\n### 源码下载导入\n\n软件源码的github地址为   \n[https://github.com/webgjc/table_maker](https://github.com/webgjc/table_maker)\n\n首先将代码克隆到本地\n\n> git clone https://github.com/webgjc/table_maker.git\n\n然后打开chrome点开右上角三个点的地方，\n选择更多工具 ==> 扩展程序；\n\n因为是源码，开启右上角的开发者模式\n开发者模式，(在完毕后可以关闭开发者模式)\n\n然后点击左上角的 **加载已解压的扩展程序**，\n选择刚刚clone下来的目录\n\n下图表示已经加载进来了\n\n![table_maker](/img/mypost/table_maker.jpg)\n\n然后浏览器右上角也有这个插件的小图标\n\n就表示导入完成。\n\n### 软件商店下载\n\n暂不支持\n\n## 软件使用\n\n点开浏览器右上角的 **$** 小图标，会见到如下主页\n\n![tablemaker_main](/img/mypost/tablemaker_main.jpg)\n\n目前该插件只支持一个表的制作与展示。\n\n### 导入数据体验\n\n数据如下\n\n``` json\n{\n    \"data_type\": \"text\",\n    \"data_url\": \"http://fund.eastmoney.com/{ID}.html\",\n    \"fields\": [\n        {\n            \"data_parser\": \"funCur-FundName\\\">(.*?)</span>\",\n            \"field_name\": \"基金名称\"\n        },\n        {\n            \"data_parser\": \"gz_gszzl\\\">(.*?)</span>\",\n            \"field_name\": \"净值估算\"\n        }\n    ],\n    \"keys\": [\n        \"110022\",\n        \"003634\"\n    ],\n    \"table_name\": \"基金今日估值\"\n}\n```\n\n这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码  \n(这边用的天天基金网的基金详情页面，实时数据有延迟)\n\n可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。\n\n每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。\n\n### 制作自己的表格TEXT解析\n\n接下来就是最重要的部分 -- 制作万能表格\n\n#### 基金净值表\n\n这里以制作上面基金实时净值表为例。\n\n#### 确定表格数据源\n\n首先要确定好要制作的表格的数据来源。\n\n比如这里找到了 [天天基金网](http://fund.eastmoney.com/)，  \n它查看一个基金详情的的地址页如下：\n> http://fund.eastmoney.com/{ID}.html\n\n{ID}表示基金的代码，虽然是html格式的返回，但也可以正则来解析，正合适我们这里所需要的。\n\n点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。\n\n#### 确定需要解析的字段\n\n这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)\n\n到某个基金的详情的html页面，打开浏览器调试，或查看源码。\n\n找到这个数据的来源，这边看到在html源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据\n\n基金名称源码对应\n``` html\n<span class=\"funCur-Tit\">基金名称：</span><span class=\"funCur-FundName\">易方达消费行业股票</span>\n```\n\n正则解析方式为 \n>funCur-FundName\\\">(.*?)\\</span>\n\n基金实时估值部分源码\n``` html\n<div class=\"remindicon\"><p>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。</p></div></div><div class=\"fundDetail-main\"><!-- 档案 start --><div class=\"fundInfoItem\"><!--开放式基金收益率模块--><div class=\"dataOfFund\"><dl class=\"dataItem01\"><dt><p><span><span class=\"sp01\">净值估算</span></span><span id=\"gz_gztime\">(20-05-20 10:01)</span><span class=\"infoTips\"><span class=\"tipsBubble\" style=\"display: none;\">净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。</span></span></p></dt><dd class=\"dataNums\"><dl class=\"floatleft\"><span class=\"ui-font-large ui-color-green ui-num\" id=\"gz_gsz\">3.1764</span></dl><dl id=\"gz_icon\" class=\"gzdown\"></dl><dl class=\"floatleft fundZdf\"><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszze\">0.0086</span><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszzl\">-0.27%</span>\n```\n\n正则解析方式为\n>gz_gszzl\\\">(.*?)\\</span>\n\n**插件上的操作为**\n\n主页点击修改表格，点击确定并修改列\n\n点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下\n\n![tablemaker_lie](/img/mypost/tablemaker_lie.jpg)\n\n当然这边也提供了测试解析的功能\n\n点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。\n\n点击返回返回主页，列就会渲染出来。\n\n#### 最终效果和主页操作\n\n制作完的主页如下，没有数据但加的列已经有了\n\n![tablemaker_kongzhu](/img/mypost/tablemaker_kongzhu.jpg)\n\n主页上可以增加主键，表示增加一行数据\n\n增加主键就相当于一个关注的基金。\n\n比如增加110022, 003634这两个基金代码作为主键，就制作成了上面的直接导入数据的表格\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。\n\n### 制作自己的表格JSON解析\n\n#### 城市天气表\n\n这边JSON解析举的例子为 城市天气列表\n\n#### 数据来源\n\n首先找到所需数据源接口\n\n这边使用国家的\n>http://www.weather.com.cn/data/cityinfo/{ID}.html\n\n{ID}表示城市代码，代码列表在下面有\nhttps://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\n\n天气格式如下\n```\n{\n    \"weatherinfo\": {\n        \"city\": \"北京\",\n        \"cityid\": \"101010100\",\n        \"temp1\": \"18℃\",\n        \"temp2\": \"31℃\",\n        \"weather\": \"多云转阴\",\n        \"img1\": \"n1.gif\",\n        \"img2\": \"d2.gif\",\n        \"ptime\": \"18:00\"\n    }\n}\n```\n\n编辑表格  \n\n表名使用 城市天气表，  \n数据源填写 http://www.weather.com.cn/data/cityinfo/{ID}.html  \n数据格式 json\n\n#### 设置列解析\n\njson解析比较简单，直接使用key.key.key\n\n举例如下：  \n要解析城市名，则新增字段，名称填城市， 解析方式就写 \n> weatherinfo.city  \n\n要解析城市天气，则新增字段，解析方式就写 \n> weatherinfo.weather\n\n#### 最终效果展示\n\n主页操作同上 TEXT解析的表格\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n## 软件开发说明\n\n浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。\n\n本次插件主要利用的是 在popup.js或者background.js可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。\n\n至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。\n\n### 重点关注部分代码\n\n主要代码在popup.js中，\n\n``` javascript\n// json解析，解析格式为：key.key.key\n// 根据每个key去获取对应的值\nasync function deal_json_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then(response => response.json())\n        .then(data => {\n            rowdata = [key];\n            for (i in fields) {\n                tmpdata = data;\n                fields[i][\"data_parser\"].split(\".\").map(fieldkey => {\n                    tmpdata = tmpdata[fieldkey];\n                })\n                if (Object.prototype.toString.call(tmpdata) === '[object Object]') {\n                    rowdata.push(JSON.stringify(tmpdata));\n                } else {\n                    rowdata.push(tmpdata || \"\");\n                }\n            }\n            return rowdata;\n        });\n}\n\n// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值\n// 也就是(.*?)的部分\nasync function deal_text_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then(res => res.text())\n        .then(data => {\n            rowdata = [key];\n            for (i in fields) {\n                rowdata.push(data.match(new RegExp(fields[i][\"data_parser\"]))[1]);\n            }\n            return rowdata;\n        });\n}\n\n\n// 渲染主页的数据，使用异步\nasync function render(data) {\n    $(\".mainbody\").html(\"\");\n    $(\".table_head\").html(data[\"table_name\"]);\n    headstr = \"<tr>\";\n    headstr += \"<td>主键</td>\"\n    data[\"fields\"].map(field => headstr += \"<td>\" + field[\"field_name\"] + \"</td>\");\n    headstr += \"<td>操作</td></tr>\";\n    $(\".mainhead\").html(headstr);\n    for (key in data[\"keys\"]) {\n        let row;\n        try {\n            if (data[\"data_type\"] === \"json\") {\n                row = await deal_json_parser(data[\"data_url\"], data[\"keys\"][key], data[\"fields\"]);\n            } else {\n                row = await deal_text_parser(data[\"data_url\"], data[\"keys\"][key], data[\"fields\"]);\n            }\n        } catch (e) {\n            row = [data[\"keys\"][key]];\n            data[\"fields\"].map(field => row.push(\"\"));\n        }\n        htmlstr = \"<tr>\";\n        row.map(value => htmlstr += \"<td>\" + value + \"</td>\");\n        htmlstr += \"<td><a href='#' id='move_up' key='\" + key + \"'>上移</a> <a href='#' id='delete_value' key='\" + key + \"'>删除</a></td>\"\n        htmlstr += \"</tr>\";\n        $(\".mainbody\").append(htmlstr);\n    }\n}\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","slug":"article_19_chrome插件-万能表格","published":1,"updated":"2020-05-20T04:42:28.921Z","_id":"ckaemtxoo000ox8so31uy53po","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\">前言</h1>\n<p>本次依旧发布一款浏览器插件–万能表格。</p>\n<p>说说为什么万能，其一，因为它可以接入任意的GET接口数据或其他文本(html/text…)数据来源，且无跨域限制，且一些需要cookie的接口或网站访问数据时也会带上cookie。<br>\n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json解析用就直接用key，文本解析就用正则表达式。<br>\n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到url地址上，再反映到数据上。</p>\n<h2 id=\"案例展示\">案例展示</h2>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h1 id=\"软件使用教程\">软件使用教程</h1>\n<h2 id=\"软件下载与导入\">软件下载与导入</h2>\n<h3 id=\"源码下载导入\">源码下载导入</h3>\n<p>软件源码的github地址为<br>\n<a href=\"https://github.com/webgjc/table_maker\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/table_maker</a></p>\n<p>首先将代码克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/table_maker.git\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/table_maker.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==&gt; 扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n开发者模式，(在完毕后可以关闭开发者模式)</p>\n<p>然后点击左上角的 <strong>加载已解压的扩展程序</strong>，<br>\n选择刚刚clone下来的目录</p>\n<p>下图表示已经加载进来了</p>\n<p><img src=\"/img/mypost/table_maker.jpg\" alt=\"table_maker\"></p>\n<p>然后浏览器右上角也有这个插件的小图标</p>\n<p>就表示导入完成。</p>\n<h3 id=\"软件商店下载\">软件商店下载</h3>\n<p>暂不支持</p>\n<h2 id=\"软件使用\">软件使用</h2>\n<p>点开浏览器右上角的 <strong>$</strong> 小图标，会见到如下主页</p>\n<p><img src=\"/img/mypost/tablemaker_main.jpg\" alt=\"tablemaker_main\"></p>\n<p>目前该插件只支持一个表的制作与展示。</p>\n<h3 id=\"导入数据体验\">导入数据体验</h3>\n<p>数据如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data_type\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data_url\"</span>: <span class=\"string\">\"http://fund.eastmoney.com/&#123;ID&#125;.html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"funCur-FundName\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"基金名称\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"gz_gszzl\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"净值估算\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"110022\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"003634\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"table_name\"</span>: <span class=\"string\">\"基金今日估值\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码<br>\n(这边用的天天基金网的基金详情页面，实时数据有延迟)</p>\n<p>可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。</p>\n<p>每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。</p>\n<h3 id=\"制作自己的表格text解析\">制作自己的表格TEXT解析</h3>\n<p>接下来就是最重要的部分 – 制作万能表格</p>\n<h4 id=\"基金净值表\">基金净值表</h4>\n<p>这里以制作上面基金实时净值表为例。</p>\n<h4 id=\"确定表格数据源\">确定表格数据源</h4>\n<p>首先要确定好要制作的表格的数据来源。</p>\n<p>比如这里找到了 <a href=\"http://fund.eastmoney.com/\" target=\"_blank\" rel=\"noopener\">天天基金网</a>，<br>\n它查看一个基金详情的的地址页如下：</p>\n<blockquote>\n<p><a href=\"http://fund.eastmoney.com/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://fund.eastmoney.com/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示基金的代码，虽然是html格式的返回，但也可以正则来解析，正合适我们这里所需要的。</p>\n<p>点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。</p>\n<h4 id=\"确定需要解析的字段\">确定需要解析的字段</h4>\n<p>这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)</p>\n<p>到某个基金的详情的html页面，打开浏览器调试，或查看源码。</p>\n<p>找到这个数据的来源，这边看到在html源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据</p>\n<p>基金名称源码对应</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-Tit\"</span>&gt;</span>基金名称：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-FundName\"</span>&gt;</span>易方达消费行业股票<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>funCur-FundName&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p>基金实时估值部分源码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"remindicon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundDetail-main\"</span>&gt;</span><span class=\"comment\">&lt;!-- 档案 start --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundInfoItem\"</span>&gt;</span><span class=\"comment\">&lt;!--开放式基金收益率模块--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataOfFund\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataItem01\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp01\"</span>&gt;</span>净值估算<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gztime\"</span>&gt;</span>(20-05-20 10:01)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"infoTips\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tipsBubble\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span>净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataNums\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-large ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gsz\"</span>&gt;</span>3.1764<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gzdown\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft fundZdf\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszze\"</span>&gt;</span>0.0086<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszzl\"</span>&gt;</span>-0.27%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>gz_gszzl&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p><strong>插件上的操作为</strong></p>\n<p>主页点击修改表格，点击确定并修改列</p>\n<p>点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下</p>\n<p><img src=\"/img/mypost/tablemaker_lie.jpg\" alt=\"tablemaker_lie\"></p>\n<p>当然这边也提供了测试解析的功能</p>\n<p>点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。</p>\n<p>点击返回返回主页，列就会渲染出来。</p>\n<h4 id=\"最终效果和主页操作\">最终效果和主页操作</h4>\n<p>制作完的主页如下，没有数据但加的列已经有了</p>\n<p><img src=\"/img/mypost/tablemaker_kongzhu.jpg\" alt=\"tablemaker_kongzhu\"></p>\n<p>主页上可以增加主键，表示增加一行数据</p>\n<p>增加主键就相当于一个关注的基金。</p>\n<p>比如增加110022, 003634这两个基金代码作为主键，就制作成了上面的直接导入数据的表格</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。</p>\n<h3 id=\"制作自己的表格json解析\">制作自己的表格JSON解析</h3>\n<h4 id=\"城市天气表\">城市天气表</h4>\n<p>这边JSON解析举的例子为 城市天气列表</p>\n<h4 id=\"数据来源\">数据来源</h4>\n<p>首先找到所需数据源接口</p>\n<p>这边使用国家的</p>\n<blockquote>\n<p><a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示城市代码，代码列表在下面有<br>\n<a href=\"https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html</a></p>\n<p>天气格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;weatherinfo&quot;: &#123;</span><br><span class=\"line\">        &quot;city&quot;: &quot;北京&quot;,</span><br><span class=\"line\">        &quot;cityid&quot;: &quot;101010100&quot;,</span><br><span class=\"line\">        &quot;temp1&quot;: &quot;18℃&quot;,</span><br><span class=\"line\">        &quot;temp2&quot;: &quot;31℃&quot;,</span><br><span class=\"line\">        &quot;weather&quot;: &quot;多云转阴&quot;,</span><br><span class=\"line\">        &quot;img1&quot;: &quot;n1.gif&quot;,</span><br><span class=\"line\">        &quot;img2&quot;: &quot;d2.gif&quot;,</span><br><span class=\"line\">        &quot;ptime&quot;: &quot;18:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑表格</p>\n<p>表名使用 城市天气表，<br>\n数据源填写 <a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a><br>\n数据格式 json</p>\n<h4 id=\"设置列解析\">设置列解析</h4>\n<p>json解析比较简单，直接使用key.key.key</p>\n<p>举例如下：<br>\n要解析城市名，则新增字段，名称填城市， 解析方式就写</p>\n<blockquote>\n<p>weatherinfo.city</p>\n</blockquote>\n<p>要解析城市天气，则新增字段，解析方式就写</p>\n<blockquote>\n<p>weatherinfo.weather</p>\n</blockquote>\n<h4 id=\"最终效果展示\">最终效果展示</h4>\n<p>主页操作同上 TEXT解析的表格</p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h2 id=\"软件开发说明\">软件开发说明</h2>\n<p>浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。</p>\n<p>本次插件主要利用的是 在popup.js或者background.js可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。</p>\n<p>至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。</p>\n<h3 id=\"重点关注部分代码\">重点关注部分代码</h3>\n<p>主要代码在popup.js中，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json解析，解析格式为：key.key.key</span></span><br><span class=\"line\"><span class=\"comment\">// 根据每个key去获取对应的值</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_json_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                tmpdata = data;</span><br><span class=\"line\">                fields[i][<span class=\"string\">\"data_parser\"</span>].split(<span class=\"string\">\".\"</span>).map(<span class=\"function\"><span class=\"params\">fieldkey</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    tmpdata = tmpdata[fieldkey];</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(tmpdata) === <span class=\"string\">'[object Object]'</span>) &#123;</span><br><span class=\"line\">                    rowdata.push(<span class=\"built_in\">JSON</span>.stringify(tmpdata));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    rowdata.push(tmpdata || <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是(.*?)的部分</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_text_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                rowdata.push(data.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(fields[i][<span class=\"string\">\"data_parser\"</span>]))[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染主页的数据，使用异步</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainbody\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\".table_head\"</span>).html(data[<span class=\"string\">\"table_name\"</span>]);</span><br><span class=\"line\">    headstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;主键&lt;/td&gt;\"</span></span><br><span class=\"line\">    data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\"><span class=\"params\">field</span> =&gt;</span> headstr += <span class=\"string\">\"&lt;td&gt;\"</span> + field[<span class=\"string\">\"field_name\"</span>] + <span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainhead\"</span>).html(headstr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data[<span class=\"string\">\"keys\"</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> row;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">\"data_type\"</span>] === <span class=\"string\">\"json\"</span>) &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_json_parser(data[<span class=\"string\">\"data_url\"</span>], data[<span class=\"string\">\"keys\"</span>][key], data[<span class=\"string\">\"fields\"</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_text_parser(data[<span class=\"string\">\"data_url\"</span>], data[<span class=\"string\">\"keys\"</span>][key], data[<span class=\"string\">\"fields\"</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            row = [data[<span class=\"string\">\"keys\"</span>][key]];</span><br><span class=\"line\">            data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\"><span class=\"params\">field</span> =&gt;</span> row.push(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        htmlstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">        row.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> htmlstr += <span class=\"string\">\"&lt;td&gt;\"</span> + value + <span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;td&gt;&lt;a href='#' id='move_up' key='\"</span> + key + <span class=\"string\">\"'&gt;上移&lt;/a&gt; &lt;a href='#' id='delete_value' key='\"</span> + key + <span class=\"string\">\"'&gt;删除&lt;/a&gt;&lt;/td&gt;\"</span></span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\".mainbody\"</span>).append(htmlstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"感谢\">感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"noopener\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">插件教程</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>前言</h1>\n<p>本次依旧发布一款浏览器插件–万能表格。</p>\n<p>说说为什么万能，其一，因为它可以接入任意的GET接口数据或其他文本(html/text…)数据来源，且无跨域限制，且一些需要cookie的接口或网站访问数据时也会带上cookie。<br>\n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json解析用就直接用key，文本解析就用正则表达式。<br>\n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到url地址上，再反映到数据上。</p>\n<h2>案例展示</h2>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h1>软件使用教程</h1>\n<h2>软件下载与导入</h2>\n<h3>源码下载导入</h3>\n<p>软件源码的github地址为<br>\n<a href=\"https://github.com/webgjc/table_maker\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/table_maker</a></p>\n<p>首先将代码克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/table_maker.git\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/table_maker.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==&gt; 扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n开发者模式，(在完毕后可以关闭开发者模式)</p>\n<p>然后点击左上角的 <strong>加载已解压的扩展程序</strong>，<br>\n选择刚刚clone下来的目录</p>\n<p>下图表示已经加载进来了</p>\n<p><img src=\"/img/mypost/table_maker.jpg\" alt=\"table_maker\"></p>\n<p>然后浏览器右上角也有这个插件的小图标</p>\n<p>就表示导入完成。</p>\n<h3>软件商店下载</h3>\n<p>暂不支持</p>\n<h2>软件使用</h2>\n<p>点开浏览器右上角的 <strong>$</strong> 小图标，会见到如下主页</p>\n<p><img src=\"/img/mypost/tablemaker_main.jpg\" alt=\"tablemaker_main\"></p>\n<p>目前该插件只支持一个表的制作与展示。</p>\n<h3>导入数据体验</h3>\n<p>数据如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data_type\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data_url\"</span>: <span class=\"string\">\"http://fund.eastmoney.com/&#123;ID&#125;.html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"funCur-FundName\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"基金名称\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"gz_gszzl\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"净值估算\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"110022\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"003634\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"table_name\"</span>: <span class=\"string\">\"基金今日估值\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码<br>\n(这边用的天天基金网的基金详情页面，实时数据有延迟)</p>\n<p>可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。</p>\n<p>每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。</p>\n<h3>制作自己的表格TEXT解析</h3>\n<p>接下来就是最重要的部分 – 制作万能表格</p>\n<h4>基金净值表</h4>\n<p>这里以制作上面基金实时净值表为例。</p>\n<h4>确定表格数据源</h4>\n<p>首先要确定好要制作的表格的数据来源。</p>\n<p>比如这里找到了 <a href=\"http://fund.eastmoney.com/\" target=\"_blank\" rel=\"noopener\">天天基金网</a>，<br>\n它查看一个基金详情的的地址页如下：</p>\n<blockquote>\n<p><a href=\"http://fund.eastmoney.com/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://fund.eastmoney.com/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示基金的代码，虽然是html格式的返回，但也可以正则来解析，正合适我们这里所需要的。</p>\n<p>点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。</p>\n<h4>确定需要解析的字段</h4>\n<p>这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)</p>\n<p>到某个基金的详情的html页面，打开浏览器调试，或查看源码。</p>\n<p>找到这个数据的来源，这边看到在html源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据</p>\n<p>基金名称源码对应</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-Tit\"</span>&gt;</span>基金名称：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-FundName\"</span>&gt;</span>易方达消费行业股票<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>funCur-FundName&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p>基金实时估值部分源码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"remindicon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundDetail-main\"</span>&gt;</span><span class=\"comment\">&lt;!-- 档案 start --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundInfoItem\"</span>&gt;</span><span class=\"comment\">&lt;!--开放式基金收益率模块--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataOfFund\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataItem01\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp01\"</span>&gt;</span>净值估算<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gztime\"</span>&gt;</span>(20-05-20 10:01)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"infoTips\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tipsBubble\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span>净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataNums\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-large ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gsz\"</span>&gt;</span>3.1764<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gzdown\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft fundZdf\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszze\"</span>&gt;</span>0.0086<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszzl\"</span>&gt;</span>-0.27%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>gz_gszzl&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p><strong>插件上的操作为</strong></p>\n<p>主页点击修改表格，点击确定并修改列</p>\n<p>点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下</p>\n<p><img src=\"/img/mypost/tablemaker_lie.jpg\" alt=\"tablemaker_lie\"></p>\n<p>当然这边也提供了测试解析的功能</p>\n<p>点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。</p>\n<p>点击返回返回主页，列就会渲染出来。</p>\n<h4>最终效果和主页操作</h4>\n<p>制作完的主页如下，没有数据但加的列已经有了</p>\n<p><img src=\"/img/mypost/tablemaker_kongzhu.jpg\" alt=\"tablemaker_kongzhu\"></p>\n<p>主页上可以增加主键，表示增加一行数据</p>\n<p>增加主键就相当于一个关注的基金。</p>\n<p>比如增加110022, 003634这两个基金代码作为主键，就制作成了上面的直接导入数据的表格</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。</p>\n<h3>制作自己的表格JSON解析</h3>\n<h4>城市天气表</h4>\n<p>这边JSON解析举的例子为 城市天气列表</p>\n<h4>数据来源</h4>\n<p>首先找到所需数据源接口</p>\n<p>这边使用国家的</p>\n<blockquote>\n<p><a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示城市代码，代码列表在下面有<br>\n<a href=\"https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html</a></p>\n<p>天气格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;weatherinfo&quot;: &#123;</span><br><span class=\"line\">        &quot;city&quot;: &quot;北京&quot;,</span><br><span class=\"line\">        &quot;cityid&quot;: &quot;101010100&quot;,</span><br><span class=\"line\">        &quot;temp1&quot;: &quot;18℃&quot;,</span><br><span class=\"line\">        &quot;temp2&quot;: &quot;31℃&quot;,</span><br><span class=\"line\">        &quot;weather&quot;: &quot;多云转阴&quot;,</span><br><span class=\"line\">        &quot;img1&quot;: &quot;n1.gif&quot;,</span><br><span class=\"line\">        &quot;img2&quot;: &quot;d2.gif&quot;,</span><br><span class=\"line\">        &quot;ptime&quot;: &quot;18:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑表格</p>\n<p>表名使用 城市天气表，<br>\n数据源填写 <a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"noopener\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a><br>\n数据格式 json</p>\n<h4>设置列解析</h4>\n<p>json解析比较简单，直接使用key.key.key</p>\n<p>举例如下：<br>\n要解析城市名，则新增字段，名称填城市， 解析方式就写</p>\n<blockquote>\n<p>weatherinfo.city</p>\n</blockquote>\n<p>要解析城市天气，则新增字段，解析方式就写</p>\n<blockquote>\n<p>weatherinfo.weather</p>\n</blockquote>\n<h4>最终效果展示</h4>\n<p>主页操作同上 TEXT解析的表格</p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h2>软件开发说明</h2>\n<p>浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。</p>\n<p>本次插件主要利用的是 在popup.js或者background.js可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。</p>\n<p>至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。</p>\n<h3>重点关注部分代码</h3>\n<p>主要代码在popup.js中，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json解析，解析格式为：key.key.key</span></span><br><span class=\"line\"><span class=\"comment\">// 根据每个key去获取对应的值</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_json_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                tmpdata = data;</span><br><span class=\"line\">                fields[i][<span class=\"string\">\"data_parser\"</span>].split(<span class=\"string\">\".\"</span>).map(<span class=\"function\"><span class=\"params\">fieldkey</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    tmpdata = tmpdata[fieldkey];</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(tmpdata) === <span class=\"string\">'[object Object]'</span>) &#123;</span><br><span class=\"line\">                    rowdata.push(<span class=\"built_in\">JSON</span>.stringify(tmpdata));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    rowdata.push(tmpdata || <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是(.*?)的部分</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_text_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.text())</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                rowdata.push(data.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(fields[i][<span class=\"string\">\"data_parser\"</span>]))[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染主页的数据，使用异步</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainbody\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\".table_head\"</span>).html(data[<span class=\"string\">\"table_name\"</span>]);</span><br><span class=\"line\">    headstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;主键&lt;/td&gt;\"</span></span><br><span class=\"line\">    data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\"><span class=\"params\">field</span> =&gt;</span> headstr += <span class=\"string\">\"&lt;td&gt;\"</span> + field[<span class=\"string\">\"field_name\"</span>] + <span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainhead\"</span>).html(headstr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data[<span class=\"string\">\"keys\"</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> row;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">\"data_type\"</span>] === <span class=\"string\">\"json\"</span>) &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_json_parser(data[<span class=\"string\">\"data_url\"</span>], data[<span class=\"string\">\"keys\"</span>][key], data[<span class=\"string\">\"fields\"</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_text_parser(data[<span class=\"string\">\"data_url\"</span>], data[<span class=\"string\">\"keys\"</span>][key], data[<span class=\"string\">\"fields\"</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            row = [data[<span class=\"string\">\"keys\"</span>][key]];</span><br><span class=\"line\">            data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\"><span class=\"params\">field</span> =&gt;</span> row.push(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        htmlstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">        row.map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> htmlstr += <span class=\"string\">\"&lt;td&gt;\"</span> + value + <span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;td&gt;&lt;a href='#' id='move_up' key='\"</span> + key + <span class=\"string\">\"'&gt;上移&lt;/a&gt; &lt;a href='#' id='delete_value' key='\"</span> + key + <span class=\"string\">\"'&gt;删除&lt;/a&gt;&lt;/td&gt;\"</span></span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\".mainbody\"</span>).append(htmlstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"noopener\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"noopener\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"noopener\">插件教程</a></li>\n</ul>\n"},{"title":"又双叒叕建博客","catalog":true,"toc_nav_num":true,"date":"2019-11-13T09:05:00.000Z","subtitle":"讲讲本次建博客中间那些事","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","source":"_posts/article_1_又双叒叕建博客.md","raw":"---\ntitle: \"又双叒叕建博客\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-11-13 17:05:00\nsubtitle: \"讲讲本次建博客中间那些事\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","slug":"article_1_又双叒叕建博客","published":1,"updated":"2020-04-29T12:35:49.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxop000qx8sokhi8snbd","content":"<h2 id=\"前言\">前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2 id=\"工具准备\">工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2 id=\"动手搭建\">动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用vscode写文章\">使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2 id=\"介绍一些插件\">介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3 id=\"访问次数插件\">访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论插件\">评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2 id=\"域名配置\">域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2 id=\"多终端同步\">多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2 id=\"拓展内容\">拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2 id=\"最后一席话\">最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2>工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2>动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2>使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2>介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3>访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3>评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2>域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2>多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2>拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2>最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n"},{"title":"整理晒晒老博客","catalog":true,"date":"2020-02-29T08:15:00.000Z","subtitle":"整理下之前记录的一些东西","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","source":"_posts/article_2_整理晒晒老博客.md","raw":"---\ntitle: 整理晒晒老博客\ncatalog: true\ndate: 2020-02-29 16:15:00\nsubtitle: \"整理下之前记录的一些东西\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","slug":"article_2_整理晒晒老博客","published":1,"updated":"2020-04-29T12:36:04.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxor000tx8so8t6hf6io","content":"<h2 id=\"前言\">前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2 id=\"content\">content</h2>\n<h3 id=\"修改桌面背景图片\"><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"noopener\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3 id=\"dfs的几个demo\"><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"noopener\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3 id=\"dlib人脸识别svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"noopener\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3 id=\"flask-mongodb-gunicorn-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"noopener\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3 id=\"前端许愿墙效果\"><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"noopener\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"在线双人五子棋\"><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"noopener\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3 id=\"梯度下降法\"><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"noopener\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3 id=\"手持弹幕效果\"><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"noopener\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"聪明钱股票策略\"><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"noopener\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3 id=\"扫雷js版\"><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"noopener\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3 id=\"手动实现kmeans聚类算法\"><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"noopener\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3 id=\"knn分类算法mnist为例\"><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"noopener\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3 id=\"loading动画\"><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"noopener\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3 id=\"逻辑回归二分类\"><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"noopener\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3 id=\"数字杭电模拟登录python版php版\"><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"noopener\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3 id=\"matplotlib-画图\"><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"noopener\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3 id=\"mcts做五子棋ai\"><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"noopener\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3 id=\"node-express-mongodb-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"noopener\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3 id=\"非线性拟合和非线性逻辑回归\"><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"noopener\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3 id=\"swoole-你画我猜\"><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"noopener\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3 id=\"唐诗词云\"><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"noopener\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3 id=\"ppython的使用\"><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"noopener\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3 id=\"php-rsa加密\"><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"noopener\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3 id=\"简单线性回归\"><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"noopener\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3 id=\"php实现soap调用\"><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"noopener\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3 id=\"svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"noopener\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3 id=\"tensorflow写mnist分类\"><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"noopener\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3 id=\"threejs-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"noopener\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3 id=\"tts人机聊天应用\"><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"noopener\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3 id=\"简单验证码的识别\"><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"noopener\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3 id=\"web-worker-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"noopener\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3 id=\"微信小程序购物功能示例\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"noopener\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3 id=\"微信小程序文字联系方式二维码\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"noopener\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2>content</h2>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"noopener\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"noopener\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"noopener\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"noopener\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"noopener\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"noopener\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"noopener\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"noopener\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"noopener\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"noopener\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"noopener\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"noopener\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"noopener\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"noopener\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"noopener\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"noopener\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"noopener\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"noopener\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"noopener\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"noopener\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"noopener\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"noopener\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"noopener\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"noopener\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"noopener\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"noopener\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"noopener\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"noopener\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"noopener\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"noopener\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"noopener\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"noopener\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"noopener\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n"},{"title":"讲讲元数据","catalog":true,"date":"2020-03-31T10:47:13.000Z","subtitle":"大数据平台中元数据系统的一些见解","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","source":"_posts/article_3_讲讲元数据.md","raw":"---\ntitle: 讲讲元数据\ncatalog: true\ndate: 2020-03-31 18:47:13\nsubtitle: 大数据平台中元数据系统的一些见解\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n---\n\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","slug":"article_3_讲讲元数据","published":1,"updated":"2020-04-29T12:38:06.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxos000vx8sooqjhi3vl","content":"<h2 id=\"前言\">前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2 id=\"元数据定义\">元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2 id=\"元数据采集\">元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2 id=\"元数据平台\">元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2 id=\"元数据应用\">元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2>元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2>元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2>元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2>元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n"},{"title":"pynput实现鼠标键盘操作的记录与还原","catalog":true,"date":"2020-04-01T08:19:52.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","source":"_posts/article_4_pynput实现鼠标键盘操作的监控与还原.md","raw":"---\ntitle: pynput实现鼠标键盘操作的记录与还原\ncatalog: true\ndate: 2020-04-01 16:19:52\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- PYTHON\n- 脚本\n---\n\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","slug":"article_4_pynput实现鼠标键盘操作的监控与还原","published":1,"updated":"2020-04-29T12:38:25.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxot000yx8sofj78le33","content":"<h2 id=\"前言\">前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2 id=\"前期准备\">前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2 id=\"后期遐想\">后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2>前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2>具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2>使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2>后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n"},{"title":"hive与mysql元数据的快速采集","catalog":true,"date":"2020-04-05T08:35:20.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","source":"_posts/article_5_hive与mysql元数据的快速采集.md","raw":"---\ntitle: hive与mysql元数据的快速采集\ncatalog: true\ndate: 2020-04-05 16:35:20\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n- MYSQL\n---\n\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","slug":"article_5_hive与mysql元数据的快速采集","published":1,"updated":"2020-04-29T12:38:41.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxou0010x8solyc9389v","content":"<h2 id=\"hive元数据采集\">Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2 id=\"mysql元数据采集\">Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2 id=\"关于实时采集\">关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2>Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2>关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"基于antlr4实现HQL的解析[元数据]","catalog":true,"date":"2020-04-07T07:24:40.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n\n## 效果展示\n\n原始sql\n\n``` sql\ncreate external table if not exists db_test.test_user (\n    id int comment 'id',\n    name string comment '姓名',\n    age int comment '年龄'\n)\ncomment '测试用户表'\npartitioned by (ds string comment '分区')\nROW FORMAT DELIMITED\nNULL DEFINED AS \"\"\nSTORED AS TEXTFILE\nLOCATION '/user/hive/warehouse/db_test.db/test_user';\n```\n\n解析后的结果\n``` json\n{\n    \"dbName\": \"db_test\",\n    \"fields\": [\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"id\",\n            \"fieldName\": \"id\"\n        },\n        {\n            \"dataType\": \"string\",\n            \"fieldComment\": \"姓名\",\n            \"fieldName\": \"name\"\n        },\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"年龄\",\n            \"fieldName\": \"age\"\n        }\n    ],\n    \"location\": \"LOCATION '/user/hive/warehouse/db_test.db/test_user'\",\n    \"partition\": \"partitioned by (ds string comment '分区')\",\n    \"properties\": null,\n    \"rowFormat\": \"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\",\n    \"store\": \"STORED AS TEXTFILE\",\n    \"tableComment\": \"测试用户表\",\n    \"tableName\": \"test_user\",\n    \"tableType\": \"external\"\n}\n```","source":"_posts/article_6_基于antlr4实现HQL的解析-元数据.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[元数据]'\ncatalog: true\ndate: 2020-04-07 15:24:40\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- 元数据\n- JAVA\n---\n\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n\n## 效果展示\n\n原始sql\n\n``` sql\ncreate external table if not exists db_test.test_user (\n    id int comment 'id',\n    name string comment '姓名',\n    age int comment '年龄'\n)\ncomment '测试用户表'\npartitioned by (ds string comment '分区')\nROW FORMAT DELIMITED\nNULL DEFINED AS \"\"\nSTORED AS TEXTFILE\nLOCATION '/user/hive/warehouse/db_test.db/test_user';\n```\n\n解析后的结果\n``` json\n{\n    \"dbName\": \"db_test\",\n    \"fields\": [\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"id\",\n            \"fieldName\": \"id\"\n        },\n        {\n            \"dataType\": \"string\",\n            \"fieldComment\": \"姓名\",\n            \"fieldName\": \"name\"\n        },\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"年龄\",\n            \"fieldName\": \"age\"\n        }\n    ],\n    \"location\": \"LOCATION '/user/hive/warehouse/db_test.db/test_user'\",\n    \"partition\": \"partitioned by (ds string comment '分区')\",\n    \"properties\": null,\n    \"rowFormat\": \"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\",\n    \"store\": \"STORED AS TEXTFILE\",\n    \"tableComment\": \"测试用户表\",\n    \"tableName\": \"test_user\",\n    \"tableType\": \"external\"\n}\n```","slug":"article_6_基于antlr4实现HQL的解析-元数据","published":1,"updated":"2020-05-02T04:58:54.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxov0011x8soopkey0mt","content":"<h2 id=\"前言\">前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2 id=\"前期准备\">前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3 id=\"g4分析\">g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现思路\">实现思路</h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3 id=\"表字段相关定义\">表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码实现说明\">源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用实现\">调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果展示\">效果展示</h2>\n<p>原始sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> db_test.test_user (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'年龄'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">comment</span> <span class=\"string\">'测试用户表'</span></span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (ds <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'分区'</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> <span class=\"keyword\">DELIMITED</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span> DEFINED <span class=\"keyword\">AS</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE</span><br><span class=\"line\">LOCATION <span class=\"string\">'/user/hive/warehouse/db_test.db/test_user'</span>;</span><br></pre></td></tr></table></figure>\n<p>解析后的结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"姓名\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"年龄\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"age\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"LOCATION '/user/hive/warehouse/db_test.db/test_user'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"partition\"</span>: <span class=\"string\">\"partitioned by (ds string comment '分区')\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"properties\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rowFormat\"</span>: <span class=\"string\">\"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"store\"</span>: <span class=\"string\">\"STORED AS TEXTFILE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableComment\"</span>: <span class=\"string\">\"测试用户表\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"test_user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableType\"</span>: <span class=\"string\">\"external\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2>前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2>具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3>g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3>实现思路</h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3>表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>效果展示</h2>\n<p>原始sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> db_test.test_user (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'年龄'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">comment</span> <span class=\"string\">'测试用户表'</span></span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (ds <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'分区'</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> <span class=\"keyword\">DELIMITED</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span> DEFINED <span class=\"keyword\">AS</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE</span><br><span class=\"line\">LOCATION <span class=\"string\">'/user/hive/warehouse/db_test.db/test_user'</span>;</span><br></pre></td></tr></table></figure>\n<p>解析后的结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"姓名\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"年龄\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"age\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"LOCATION '/user/hive/warehouse/db_test.db/test_user'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"partition\"</span>: <span class=\"string\">\"partitioned by (ds string comment '分区')\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"properties\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rowFormat\"</span>: <span class=\"string\">\"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"store\"</span>: <span class=\"string\">\"STORED AS TEXTFILE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableComment\"</span>: <span class=\"string\">\"测试用户表\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"test_user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableType\"</span>: <span class=\"string\">\"external\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hiveserver2与hiveSQL的执行","catalog":true,"date":"2020-04-09T08:28:17.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","source":"_posts/article_7_hiveserver2与HQL的执行.md","raw":"---\ntitle: hiveserver2与hiveSQL的执行\ncatalog: true\ndate: 2020-04-09 16:28:17\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HIVE\n- PYTHON\n- JAVA\n---\n\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","slug":"article_7_hiveserver2与HQL的执行","published":1,"updated":"2020-04-29T12:39:12.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxow0014x8sodnnktpdb","content":"<h2 id=\"前言\">前言</h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"python\">python</h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3 id=\"java\">java</h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2>实现</h2>\n<h3>python</h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3>java</h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hiveSQL执行日志的收集","catalog":true,"date":"2020-04-09T08:30:21.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","source":"_posts/article_8_hiveSQL执行日志的收集.md","raw":"---\ntitle: hiveSQL执行日志的收集\ncatalog: true\ndate: 2020-04-09 16:30:21\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- YARN\n---\n\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","slug":"article_8_hiveSQL执行日志的收集","published":1,"updated":"2020-04-29T12:39:49.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxox0015x8sodas02l1o","content":"<h2 id=\"前言\">前言</h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"jdbc部分日志\">jdbc部分日志</h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3 id=\"进度和mapreduce信息\">进度和mapreduce信息</h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3 id=\"全部conrainer日志\">全部conrainer日志</h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\" target=\"_blank\" rel=\"noopener\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2>实现</h2>\n<h3>jdbc部分日志</h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3>进度和mapreduce信息</h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3>全部conrainer日志</h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\" target=\"_blank\" rel=\"noopener\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n"},{"title":"本地hadoop与hive的单节点部署和开发调试[mac]","catalog":true,"date":"2020-04-27T08:27:54.000Z","subtitle":null,"header-img":null,"_content":"\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://master:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>master:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","source":"_posts/article_9_本地hadoop与hive的部署-mac.md","raw":"---\ntitle: '本地hadoop与hive的单节点部署和开发调试[mac]'\ncatalog: true\ndate: 2020-04-27 16:27:54\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- HADOOP\n---\n\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://master:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>master:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","slug":"article_9_本地hadoop与hive的部署-mac","published":1,"updated":"2020-05-01T09:10:56.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxoy0018x8sou91wzhy3","content":"<h1 id=\"预备\">预备</h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\" target=\"_blank\" rel=\"noopener\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\" target=\"_blank\" rel=\"noopener\">1.2.1</a><br>\n注:src为源码包</p>\n<h1 id=\"hadoop搭建\">Hadoop搭建</h1>\n<h2 id=\"解压进入配置目录\">解压，进入配置目录</h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2 id=\"修改配置\">修改配置</h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置免密登录\">配置免密登录</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动hadoop\">启动hadoop</h2>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2 id=\"验证安装成功\">验证安装成功</h2>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2 id=\"访问界面\">访问界面</h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1 id=\"hive搭建\">Hive搭建</h1>\n<h2 id=\"解压文件\">解压文件</h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2 id=\"修改配置\">修改配置</h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装好mysql\">装好Mysql</h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2 id=\"初始化metastore\">初始化Metastore</h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2 id=\"启动hive\">启动hive</h2>\n<p>./bin/hive</p>\n<h1 id=\"hive源码调试\">Hive源码调试</h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2 id=\"特别感谢\">特别感谢</h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>预备</h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\" target=\"_blank\" rel=\"noopener\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\" target=\"_blank\" rel=\"noopener\">1.2.1</a><br>\n注:src为源码包</p>\n<h1>Hadoop搭建</h1>\n<h2>解压，进入配置目录</h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>配置免密登录</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2>启动hadoop</h2>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2>验证安装成功</h2>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2>访问界面</h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1>Hive搭建</h1>\n<h2>解压文件</h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>装好Mysql</h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2>初始化Metastore</h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2>启动hive</h2>\n<p>./bin/hive</p>\n<h1>Hive源码调试</h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2>特别感谢</h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n"},{"book":true,"bookcover":"/img/book/huozhe.jpg","title":"《活着》 -- 余华","date":"2020-05-08T09:05:00.000Z","header-img":"/img/article_header/header.jpg","_content":"\n这只是测试一下功能","source":"_posts/book_1_《活着》.md","raw":"---\nbook: true\nbookcover: /img/book/huozhe.jpg\ntitle: \"《活着》 -- 余华\"\ndate: 2020-05-08 17:05:00\nheader-img: \"/img/article_header/header.jpg\"\n---\n\n这只是测试一下功能","slug":"book_1_《活着》","published":1,"updated":"2020-05-08T12:48:09.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxp00019x8sox2hlaqnx","content":"<p>这只是测试一下功能</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这只是测试一下功能</p>\n"},{"book":true,"bookcover":"/img/book/shenhe.jpg","title":"《深河》 -- 远藤周作","date":"2020-05-09T09:05:00.000Z","header-img":"/img/article_header/header.jpg","_content":"","source":"_posts/book_2_《深河》.md","raw":"---\nbook: true\nbookcover: /img/book/shenhe.jpg\ntitle: \"《深河》 -- 远藤周作\"\ndate: 2020-05-09 17:05:00\nheader-img: \"/img/article_header/header.jpg\"\n---","slug":"book_2_《深河》","published":1,"updated":"2020-05-08T12:48:16.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxp1001cx8soqc418utr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于spark使用ranger管理数据权限的一些尝试","catalog":true,"date":"2000-03-31T08:33:57.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/关于spark使用ranger管理数据权限的一些尝试.md","raw":"---\ntitle: 关于spark使用ranger管理数据权限的一些尝试\ncatalog: true\ndate: 2000-03-31 16:33:57\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"关于spark使用ranger管理数据权限的一些尝试","published":1,"updated":"2020-04-01T07:25:59.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaemtxp2001dx8so22d8hwj8","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckaemtxob0008x8so6f4zlexm","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxoi000dx8soxkxhxkbg"},{"post_id":"ckaemtxnz0001x8sowler0uaj","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxok000fx8soiu2tssmj"},{"post_id":"ckaemtxoi000ex8so4ci9nylh","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxol000ix8sonwj9hi28"},{"post_id":"ckaemtxok000gx8soy4e2zshx","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxom000kx8sol6b7a4ia"},{"post_id":"ckaemtxol000jx8soq241dyqz","tag_id":"ckaemtxog000bx8soy4gf1007","_id":"ckaemtxon000nx8so88iwx8y0"},{"post_id":"ckaemtxo30003x8so82re12n1","tag_id":"ckaemtxog000bx8soy4gf1007","_id":"ckaemtxop000px8somzgnxn2y"},{"post_id":"ckaemtxo30003x8so82re12n1","tag_id":"ckaemtxol000hx8soafetgh7z","_id":"ckaemtxor000sx8so6rotv595"},{"post_id":"ckaemtxo90006x8so2mvrh51z","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxos000ux8sowzgeap4n"},{"post_id":"ckaemtxor000tx8so8t6hf6io","tag_id":"ckaemtxoq000rx8soh98afofr","_id":"ckaemtxot000wx8sog6nbuc31"},{"post_id":"ckaemtxoe000ax8sogb90rf68","tag_id":"ckaemtxoq000rx8soh98afofr","_id":"ckaemtxou000zx8sonfszd4u7"},{"post_id":"ckaemtxom000lx8so826y4unx","tag_id":"ckaemtxot000xx8so3vtnqtxk","_id":"ckaemtxow0013x8sofjvqajbz"},{"post_id":"ckaemtxoo000ox8so31uy53po","tag_id":"ckaemtxot000xx8so3vtnqtxk","_id":"ckaemtxoy0017x8sotyyb8422"},{"post_id":"ckaemtxop000qx8sokhi8snbd","tag_id":"ckaemtxoq000rx8soh98afofr","_id":"ckaemtxp1001bx8soo0ms06nd"},{"post_id":"ckaemtxos000vx8sooqjhi3vl","tag_id":"ckaemtxp0001ax8sovg7fhf6r","_id":"ckaemtxp3001gx8so9wvp0mrg"},{"post_id":"ckaemtxos000vx8sooqjhi3vl","tag_id":"ckaemtxp3001ex8so7pggv51r","_id":"ckaemtxp3001hx8so8lvfckcv"},{"post_id":"ckaemtxot000yx8sofj78le33","tag_id":"ckaemtxp3001fx8soqoo15p35","_id":"ckaemtxp4001kx8so99c96v0l"},{"post_id":"ckaemtxot000yx8sofj78le33","tag_id":"ckaemtxp3001ix8soc9o9q3mb","_id":"ckaemtxp4001lx8so1ntem2pz"},{"post_id":"ckaemtxou0010x8solyc9389v","tag_id":"ckaemtxp0001ax8sovg7fhf6r","_id":"ckaemtxp5001px8soo8k093xu"},{"post_id":"ckaemtxou0010x8solyc9389v","tag_id":"ckaemtxp3001ex8so7pggv51r","_id":"ckaemtxp5001qx8sohz38xcls"},{"post_id":"ckaemtxou0010x8solyc9389v","tag_id":"ckaemtxp5001nx8somhf6ypwa","_id":"ckaemtxp6001sx8soyjzsulk3"},{"post_id":"ckaemtxov0011x8soopkey0mt","tag_id":"ckaemtxog000bx8soy4gf1007","_id":"ckaemtxp6001tx8so1zl3hnxl"},{"post_id":"ckaemtxov0011x8soopkey0mt","tag_id":"ckaemtxp0001ax8sovg7fhf6r","_id":"ckaemtxp6001vx8sol9dx0xgm"},{"post_id":"ckaemtxov0011x8soopkey0mt","tag_id":"ckaemtxol000hx8soafetgh7z","_id":"ckaemtxp6001wx8sowot7wvhp"},{"post_id":"ckaemtxow0014x8sodnnktpdb","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxp7001yx8so6onni8u9"},{"post_id":"ckaemtxow0014x8sodnnktpdb","tag_id":"ckaemtxp3001fx8soqoo15p35","_id":"ckaemtxp7001zx8sogeuu245w"},{"post_id":"ckaemtxow0014x8sodnnktpdb","tag_id":"ckaemtxol000hx8soafetgh7z","_id":"ckaemtxp70020x8soh5dr7qt4"},{"post_id":"ckaemtxox0015x8sodas02l1o","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxp70021x8solvisl9zu"},{"post_id":"ckaemtxox0015x8sodas02l1o","tag_id":"ckaemtxp6001ux8so03cd66xv","_id":"ckaemtxp70022x8sopyywf6bf"},{"post_id":"ckaemtxoy0018x8sou91wzhy3","tag_id":"ckaemtxo70005x8so2628nei7","_id":"ckaemtxp70023x8sohj4m4na0"},{"post_id":"ckaemtxoy0018x8sou91wzhy3","tag_id":"ckaemtxp7001xx8soj8kopiau","_id":"ckaemtxp70024x8so25wbcn79"}],"Tag":[{"name":"HIVE","_id":"ckaemtxo70005x8so2628nei7"},{"name":"HQL解析","_id":"ckaemtxog000bx8soy4gf1007"},{"name":"JAVA","_id":"ckaemtxol000hx8soafetgh7z"},{"name":"OTHER","_id":"ckaemtxoq000rx8soh98afofr"},{"name":"CHROME插件","_id":"ckaemtxot000xx8so3vtnqtxk"},{"name":"元数据","_id":"ckaemtxp0001ax8sovg7fhf6r"},{"name":"大数据","_id":"ckaemtxp3001ex8so7pggv51r"},{"name":"PYTHON","_id":"ckaemtxp3001fx8soqoo15p35"},{"name":"脚本","_id":"ckaemtxp3001ix8soc9o9q3mb"},{"name":"MYSQL","_id":"ckaemtxp5001nx8somhf6ypwa"},{"name":"YARN","_id":"ckaemtxp6001ux8so03cd66xv"},{"name":"HADOOP","_id":"ckaemtxp7001xx8soj8kopiau"}]}}