{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/avatar/avatar.jpg","path":"img/avatar/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":1,"renderable":0},{"_id":"source/img/book/huozhe.jpg","path":"img/book/huozhe.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/github.png","path":"img/mypost/github.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/yhback.js","path":"js/yhback.js","modified":1,"renderable":1},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":1,"renderable":0},{"_id":"source/img/mypost/pyhiveprogress.png","path":"img/mypost/pyhiveprogress.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":1,"renderable":0},{"_id":"source/about/resume.pdf","path":"about/resume.pdf","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/article_header/header.jpg","path":"img/article_header/header.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.jpg.bak","path":"img/header_img/tag.jpg.bak","modified":1,"renderable":0},{"_id":"source/img/mypost/pynput.png","path":"img/mypost/pynput.png","modified":1,"renderable":0},{"_id":"source/about/甘家城简历.pdf","path":"about/甘家城简历.pdf","modified":1,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":1,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1573879904674},{"_id":"source/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1573879904674},{"_id":"source/.DS_Store","hash":"5da1c9cff88a0350895effb792fba5a259a2e453","modified":1588335484381},{"_id":"themes/huweihuang/_config.yml","hash":"00a93beb83ba3758fd03ef60b98b3c917b9fe57f","modified":1588335484395},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1573879904773},{"_id":"source/_posts/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","hash":"65c3b23dc993fe19304d40d57b7c65c2a4491b73","modified":1588335484381},{"_id":"source/_posts/article_11_新增两个功能.md","hash":"5419f81bfb3c39c4bc06b4de9517b19cc6b3d38c","modified":1588335484381},{"_id":"source/_posts/article_12_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","hash":"7b1961638d2d65eb63a867480bd51112fa0d7dd6","modified":1588335484381},{"_id":"source/_posts/article_1_又双叒叕建博客.md","hash":"140d7035c34815b7a3bfc71747cdc5ba5dc4bfdc","modified":1588335484381},{"_id":"source/_posts/article_3_讲讲元数据.md","hash":"2b0e73f614d68ca465f8ff3384fce80edf5b1050","modified":1588335484382},{"_id":"source/_posts/article_2_整理晒晒老博客.md","hash":"77ad7b1c909af365e80e577f7508216442f5d3c3","modified":1588335484382},{"_id":"source/_posts/article_4_pynput实现鼠标键盘操作的监控与还原.md","hash":"a152cdb2d08b673fc82879403da3f0ff5443a4d6","modified":1588335484382},{"_id":"source/_posts/article_5_hive与mysql元数据的快速采集.md","hash":"7166f0455f0b15218cd21132480fa504f5d5b6bc","modified":1588335484382},{"_id":"source/_posts/article_6_基于antlr4实现HQL的解析-元数据.md","hash":"0f26fc8129a5b7533f6f2c683a3535be68481659","modified":1588335484382},{"_id":"source/_posts/article_7_hiveserver2与HQL的执行.md","hash":"1096e5b9331121e1b0fdfb3f17f378d0242a7952","modified":1588335484383},{"_id":"source/_posts/book_1_这是第一本书.md","hash":"6cdba76bd2caee7f0f04efa1352b52dbd5b6ba71","modified":1588335484383},{"_id":"source/_posts/article_8_hiveSQL执行日志的收集.md","hash":"502a9fc285c1a05bce9047d64dadc2319c49ad83","modified":1588335484383},{"_id":"source/_posts/article_9_本地hadoop与hive的部署-mac.md","hash":"694598f75ca99909373c6634bf8c8853050e3288","modified":1588335484383},{"_id":"source/_posts/关于spark使用ranger管理数据权限的一些尝试.md","hash":"a8bc0f54d74dfecb9b54810fe4dc81ac80e16acc","modified":1588335484383},{"_id":"source/_posts/基于antlr4实现HQL的解析-表血缘和字段血缘.md","hash":"f928d181d5b64bfa92e1e2ce642a1fbd0893e724","modified":1588335484384},{"_id":"source/about/index.md","hash":"788c5b3a6b8f27f5d9a47ef53b9f146c5915314c","modified":1588335484384},{"_id":"source/_posts/基于antlr4实现HQL的解析-格式化.md","hash":"b44ece57d293d338cddd242f171f63be700d9666","modified":1588335484383},{"_id":"source/about/resume.md","hash":"c7de5cc9ab14c8a8b9ea2c2bf74805363d5deb48","modified":1588335484384},{"_id":"source/about/resume copy.md","hash":"58d96a7cd6c2276ac08e8e4a1931e43d37726285","modified":1588335484384},{"_id":"source/book/index.md","hash":"709e28c8977f7e6085781ddd6a0ac841cd1b895c","modified":1588337434148},{"_id":"source/archive/index.md","hash":"a93b0e38ac60cbbfd12998a14ffa5823f819cb52","modified":1573879904675},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1573879904766},{"_id":"source/tags/index.md","hash":"1f824dd5e3b3155cc5a7f2ce551c2e90c20bc46d","modified":1573879904772},{"_id":"source/img/.DS_Store","hash":"53e5100e25d2f4467521e8905fd64f95102740eb","modified":1588335484391},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1573879904774},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1573879904774},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1573879904774},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1573879904775},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1573879904775},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1573879904775},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1573879904775},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1573879904775},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1573879904775},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1573879904776},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1573879904781},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1573879904781},{"_id":"themes/huweihuang/layout/book.ejs","hash":"d50cce5fa8c9b1ee56c1dd19ac355f0fae72040f","modified":1588337425785},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1573879904782},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"f5ff16146b7974390659dfe71ffbe327e218c822","modified":1588339697391},{"_id":"themes/huweihuang/layout/page.ejs","hash":"292e18597c1b3d2fed080ac44e89ab93b56d1506","modified":1573879904783},{"_id":"themes/huweihuang/layout/post.ejs","hash":"1e29985632a33883a8bcaef940cba224c70a16af","modified":1573879904783},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1573879904784},{"_id":"themes/huweihuang/layout/index.ejs","hash":"d115b216009b595cb0765c7cfba17b519176b778","modified":1588338496374},{"_id":"source/img/article_header/.DS_Store","hash":"bebd7116aad19ba812b7e4793b3741b01d8bc826","modified":1573879904680},{"_id":"source/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1573879904696},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1573879904680},{"_id":"source/img/header_img/.DS_Store","hash":"89b6f04ed69798ff277621a0a7e83e62b5b77a26","modified":1573879904705},{"_id":"source/img/book/huozhe.jpg","hash":"9aad04e9902c5b06272b5eae5a2a00a523fe76ad","modified":1588335484392},{"_id":"source/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1573879904767},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"460729508dbf2f7a9ab101e7cb0a5541a3ec043a","modified":1573879904776},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"c065b8e3b48e55735be15b61ab99457e9b54fa90","modified":1573879904776},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"720349195a5ea7b610a82ce3ce74298fb2bc7347","modified":1573879904776},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1573879904777},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"f9a682fc9cefba2b1481e49cf93a275b99b724f5","modified":1588335484395},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1573879904777},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1573879904778},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1573879904777},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1573879904778},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1573879904779},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1573879904780},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"315de02246f07c747c32495e107ad7b19cb3ff54","modified":1573879904781},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"087f6e029ccb7f45b784dbf9327c98dee430a7aa","modified":1588335484396},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1573892043621},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1573879904784},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1573879904787},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1573879904788},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1573879904788},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1573879904790},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1573891872580},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1573879904790},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1573879904790},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1573879904790},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1573879904791},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1573879904793},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1573879904793},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1573879904794},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1573879904795},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1573879904793},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1573879904798},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1573879904798},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1573879904794},{"_id":"themes/huweihuang/source/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1573879904799},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1573879904800},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1573879904800},{"_id":"themes/huweihuang/source/js/yhback.js","hash":"c81f6d02ed26b74791d7e1ab275529f68c694c14","modified":1588336045879},{"_id":"source/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1573879904763},{"_id":"source/img/mypost/pyhiveprogress.png","hash":"23195421b414161860ed88ebb7b58f08b8aea18d","modified":1588335484393},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1573879904787},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1573879904792},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1573879904797},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1573879904794},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1573879904728},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1573879904772},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1573879904789},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1573879904789},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1573879904786},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1573879904699},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1573879904770},{"_id":"source/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1573879904725},{"_id":"source/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1573879904762},{"_id":"source/about/resume.pdf","hash":"70a992368c1ae1c24f25525a5a4943a930b32c95","modified":1588335484389},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1573879904683},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1573879904796},{"_id":"source/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1573879904696},{"_id":"source/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1573879904723},{"_id":"source/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1573879904766},{"_id":"source/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1588335484395},{"_id":"source/about/甘家城简历.pdf","hash":"a172f8b6505e551eb710b7d0ec67957391197c54","modified":1588335484391},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1573879904680},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1573879904705},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1573879904748},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1573879904693},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1573879904740},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1573879904759},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1573879904719},{"_id":"public/post-sitemap.xml","hash":"63a4dbe9d6a920b04830784a249fb2e6ce401736","modified":1588339779828},{"_id":"public/page-sitemap.xml","hash":"764e188597e8c657845dec2ffc52c30cde8a8db2","modified":1588339779829},{"_id":"public/tag-sitemap.xml","hash":"9dbfa61f479ea39e996270d41b5b2c2969215aa3","modified":1588339779974},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1588339779974},{"_id":"public/sitemap.xml","hash":"87c2ccc5a159ab440a39f5f28824227f36f68cce","modified":1588339780034},{"_id":"public/404.html","hash":"f0c4fefa8c960f04860cd57fb0e8fca8a9eb447f","modified":1588339780056},{"_id":"public/tags/index.html","hash":"a2b247fea4114df5846704ef1f994a1fd9851065","modified":1588339780056},{"_id":"public/article/article_12_HIVE源码学习-实现一个自定义HIVE序列化与反序列化/index.html","hash":"57722ed8f9ec7378bb9b3c3de59075289e2893bb","modified":1588339780057},{"_id":"public/article/基于antlr4实现HQL的解析-格式化/index.html","hash":"fb0cd1e59795cc7ce8595caba37b0a0eb3f6c421","modified":1588339780057},{"_id":"public/article/article_11_新增两个功能/index.html","hash":"670a92b0df6b7a1467c980fb32b1dda031957315","modified":1588339780057},{"_id":"public/article/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程/index.html","hash":"e7b434fe77a3f1d70bd2ded0986270ca68e448bf","modified":1588339780057},{"_id":"public/article/article_9_本地hadoop与hive的部署-mac/index.html","hash":"dd12f10816ad5e1f91e8bd6ea94333e89edd1351","modified":1588339780057},{"_id":"public/article/article_8_hiveSQL执行日志的收集/index.html","hash":"29c5862382887bfc10828ab20669c3955fa00148","modified":1588339780057},{"_id":"public/article/article_7_hiveserver2与HQL的执行/index.html","hash":"d94937cdeb1d561a93adbf0946d07c18693d7861","modified":1588339780057},{"_id":"public/article/article_6_基于antlr4实现HQL的解析-元数据/index.html","hash":"446cb51b9d9c95e8f8a94cefce1ae59b9dcd9e5f","modified":1588339780057},{"_id":"public/article/article_5_hive与mysql元数据的快速采集/index.html","hash":"6820196c2f78cd06934e23c17c94c566db1b9bd4","modified":1588339780057},{"_id":"public/article/article_4_pynput实现鼠标键盘操作的监控与还原/index.html","hash":"a4311f974a94b7c4acdf735b1a3db6ad8f8666b3","modified":1588339780057},{"_id":"public/article/article_3_讲讲元数据/index.html","hash":"591b0154b530508fa3cb2f59ede3eb4b2663acb0","modified":1588339780057},{"_id":"public/article/article_2_整理晒晒老博客/index.html","hash":"cea9f5361c58d9c5747f75ad508451258f6f87ce","modified":1588339780057},{"_id":"public/article/article_1_又双叒叕建博客/index.html","hash":"7460053b4b8809c36699bbfc183b2a9602cb9424","modified":1588339780057},{"_id":"public/article/book_1_这是第一本书/index.html","hash":"18dd55cd7b0a2941796b7cd1a0a96db219952a97","modified":1588339780058},{"_id":"public/article/关于spark使用ranger管理数据权限的一些尝试/index.html","hash":"6a776b654e4d30820b1b7a1db0e87d80febaf7b7","modified":1588339780058},{"_id":"public/article/基于antlr4实现HQL的解析-表血缘和字段血缘/index.html","hash":"8922e65ba2d020227bc5292d19df12b877ce16c4","modified":1588339780058},{"_id":"public/about/index.html","hash":"117718152ad9fc6f1d23132a5900cf2ea174d729","modified":1588339780058},{"_id":"public/about/resume.html","hash":"65a1a5d6f66445cc4b26302d18cd40ef3bbc7e86","modified":1588339780058},{"_id":"public/about/resume copy.html","hash":"e1135d0108764e960a17bc69e940f425071b5ae7","modified":1588339780058},{"_id":"public/book/index.html","hash":"9cdb8be45698d150b9aa00a072cec20fd0d8db70","modified":1588339780058},{"_id":"public/archive/index.html","hash":"75f6a594798e164292fc4ba2cef4653d2bab54e9","modified":1588339780058},{"_id":"public/index.html","hash":"52eaf2041d9882f755d275e3d7db1f3316c1993e","modified":1588339780058},{"_id":"public/archives/2/index.html","hash":"920941a97cb1d7b213f83c5d8470be0cc6d916b3","modified":1588339780058},{"_id":"public/tags/HIVE/index.html","hash":"b2ca0f4e6c80e0b52381dc7a24a484496cb01b78","modified":1588339780058},{"_id":"public/tags/OTHER/index.html","hash":"5a5b5689467c914085f42a3b7e2d3d6d19668cbb","modified":1588339780058},{"_id":"public/tags/元数据/index.html","hash":"07abaa6e29ec78879ee227eb4194bba4f53edb19","modified":1588339780058},{"_id":"public/tags/大数据/index.html","hash":"81aa4bfef36671c7b7e41698596965a58dadbe4c","modified":1588339780058},{"_id":"public/tags/PYTHON/index.html","hash":"2ea828b41d4ef63e593aebf1a73c71a527bb9c36","modified":1588339780058},{"_id":"public/tags/脚本/index.html","hash":"7bf50d778db6968f8f05fc8308870862f2b4f26b","modified":1588339780058},{"_id":"public/tags/MYSQL/index.html","hash":"b2c7522879c87666a87f0454f60d4e01e4377948","modified":1588339780059},{"_id":"public/tags/HQL解析/index.html","hash":"73fa2f8b38976d42ce11974eabdfe6bf66fff737","modified":1588339780059},{"_id":"public/tags/JAVA/index.html","hash":"2389319bf86edc03a3eef1d289a46eb6315412cb","modified":1588339780059},{"_id":"public/tags/YARN/index.html","hash":"51742bde68cad865c7fa369debcea74a08ee6638","modified":1588339780059},{"_id":"public/tags/HADOOP/index.html","hash":"44fca86f65cc7a64e1bacd4921c1740ce051e4cd","modified":1588339780059},{"_id":"public/archives/index.html","hash":"cd7be3fa92803ee2e4cef1cbad5fcaa625c54e25","modified":1588339780059},{"_id":"public/archives/archives/2/index.html","hash":"477182b449f88565e494efb91f655df64671a631","modified":1588339780059},{"_id":"public/archives/2000/index.html","hash":"7f09fe2e723b81fd539e73b25554a0d28b95aa78","modified":1588339780059},{"_id":"public/archives/2000/03/index.html","hash":"d07ad5a928d76ededd42dc41867b9b16f4933170","modified":1588339780059},{"_id":"public/archives/2019/index.html","hash":"3968f3d8c4fe7b170605d3737c5474cf583fda85","modified":1588339780059},{"_id":"public/archives/2019/11/index.html","hash":"2a5fabb09bb1be5bcbe79bb5f563cf4ac663f815","modified":1588339780059},{"_id":"public/archives/2020/index.html","hash":"1e4e74bf807a8080e0a7bed99353e9a56ed8f12e","modified":1588339780059},{"_id":"public/archives/2020/archives/2/index.html","hash":"3775537aa19774f383136e14ce8e0e863453414e","modified":1588339780059},{"_id":"public/archives/2020/02/index.html","hash":"ee8667eb81208d345d3d39b9678be9528dbd954c","modified":1588339780060},{"_id":"public/archives/2020/03/index.html","hash":"d3050d0607558a085ff133fddf868cb6f1ebab32","modified":1588339780060},{"_id":"public/archives/2020/04/index.html","hash":"19dcb302ec464a7730f32f076f3d7637df7facbe","modified":1588339780060},{"_id":"public/archives/2020/05/index.html","hash":"bd7c28caaf6ad7c9466bf74606499d9a0300eeaf","modified":1588339780060},{"_id":"public/img/book/huozhe.jpg","hash":"9aad04e9902c5b06272b5eae5a2a00a523fe76ad","modified":1588339780069},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1588339780069},{"_id":"public/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1588339780069},{"_id":"public/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1588339780070},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1588339780070},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1588339780070},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1588339780070},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1588339780070},{"_id":"public/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1588339780070},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1588339780070},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1588339780070},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1588339780070},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1588339780070},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1588339780070},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1588339780070},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1588339780070},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1588339780071},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1588339780071},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1588339780071},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1588339780071},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1588339780071},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1588339780071},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1588339780071},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1588339780071},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1588339780071},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1588339780071},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1588339780071},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1588339780072},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1588339780072},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1588339780072},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1588339780072},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1588339780072},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1588339780072},{"_id":"public/img/header_img/tag.jpg","hash":"8f5e8d39b7307bcf10fa3a7c2d71c1f4a66e0d71","modified":1588339780274},{"_id":"public/img/mypost/pyhiveprogress.png","hash":"23195421b414161860ed88ebb7b58f08b8aea18d","modified":1588339780275},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1588339780277},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1588339780277},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1588339780277},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1588339780277},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1588339780277},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1588339780277},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1588339780277},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1588339780277},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1588339780278},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1588339780286},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1588339780286},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1588339780286},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1588339780286},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1588339780286},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1588339780286},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1588339780286},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1588339780286},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1588339780286},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1588339780286},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1588339780286},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1588339780286},{"_id":"public/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1588339780286},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1588339780286},{"_id":"public/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1588339780286},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1588339780286},{"_id":"public/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1588339780286},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1588339780286},{"_id":"public/js/yhback.js","hash":"c81f6d02ed26b74791d7e1ab275529f68c694c14","modified":1588339780286},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1588339780286},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1588339780286},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1588339780287},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1588339780287},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1588339780287},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1588339780287},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1588339780287},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1588339780287},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1588339780287},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1588339780295},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1588339780295},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1588339780304},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1588339780304},{"_id":"public/img/header_img/archive.jpg","hash":"66d9f5a44f8b7e95ce9c3f63579e8deb801de29f","modified":1588339780311},{"_id":"public/img/header_img/home3.jpg","hash":"8676ac460c6b7eb2b1513c157edd4e3d6c94eaa3","modified":1588339780311},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1588339780311},{"_id":"public/img/header_img/tag.jpg.bak","hash":"c2680f6d36f0ba1fcbf96a13a0a0516c6f9bd14b","modified":1588339780311},{"_id":"public/img/article_header/header.jpg","hash":"8488dc1d7055d8e7107be5cda42a5977812275fc","modified":1588339780311},{"_id":"public/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1588339780312},{"_id":"public/about/甘家城简历.pdf","hash":"a172f8b6505e551eb710b7d0ec67957391197c54","modified":1588339780312},{"_id":"public/img/header_img/about.jpg","hash":"da78b9f1e92f03a4cb27f8a6c89b18ccffe59777","modified":1588339780316},{"_id":"public/about/resume.pdf","hash":"70a992368c1ae1c24f25525a5a4943a930b32c95","modified":1588339780316},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1588339780343},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1588339780350},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1588339780352},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1588339780353},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1588339780353},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1588339780362},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1588339780365},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1588339780367},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1588339780369}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-11-16T04:51:44.674Z","updated":"2019-11-16T04:51:44.674Z","path":"404.html","title":"","comments":1,"_id":"ck9o8hsqb0000ek44ewohzkn8","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-11-11T02:00:00.000Z","description":"","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n> [我的简历 HTML](/about/resume.html)  \n> [我的简历 PDF](/about/resume.pdf)","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-11-11 10:00:00\ndescription: \"\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试，其他期待中。。。\n\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n> [我的简历 HTML](/about/resume.html)  \n> [我的简历 PDF](/about/resume.pdf)","updated":"2020-05-01T12:18:04.384Z","path":"about/index.html","comments":1,"_id":"ck9o8hsr60002ek441mbqrp0x","content":"<h2><span id=\"关于我\">关于我</span></h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2><span id=\"技术栈历程\">技术栈历程</span></h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2><span id=\"联系我\">联系我</span></h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<blockquote>\n<p><a href=\"/about/resume.html\">我的简历 HTML</a><br>\n<a href=\"/about/resume.pdf\">我的简历 PDF</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2>关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2>技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试，其他期待中。。。</li>\n</ul>\n<h2>联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"noopener\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<blockquote>\n<p><a href=\"/about/resume.html\">我的简历 HTML</a><br>\n<a href=\"/about/resume.pdf\">我的简历 PDF</a></p>\n</blockquote>\n"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：大数据平台开发 / 后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！\n","source":"about/resume.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：大数据平台开发 / 后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！\n","updated":"2020-05-01T12:18:04.384Z","path":"about/resume.html","title":"","comments":1,"_id":"ck9o8hsr80004ek4450x6qcov","content":"<h1><span id=\"个人信息\">个人信息</span></h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：大数据平台开发 / 后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1><span id=\"技术之谈\">技术之谈</span></h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1><span id=\"工作经历\">工作经历</span></h1>\n<ul>\n<li>\n<h2><span id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</span></h2>\n<ul>\n<li>\n<h3><span id=\"元数据采集与数据地图\">元数据采集与数据地图</span></h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3><span id=\"数据标准与数据建模\">数据标准与数据建模</span></h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3><span id=\"自助查询与敏捷分析\">自助查询与敏捷分析</span></h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2><span id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</span></h2>\n<ul>\n<li>\n<h3><span id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</span></h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3><span id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</span></h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2><span id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</span></h2>\n<ul>\n<li>\n<h3><span id=\"量化策略与相关平台工具\">量化策略与相关平台工具</span></h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><span id=\"最后一席话\">最后一席话</span></h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：大数据平台开发 / 后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，但也感受到这块的潜力，希望能继续在相关的领域贡献力量。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","source":"about/resume copy.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","updated":"2020-05-01T12:18:04.384Z","path":"about/resume copy.html","title":"","comments":1,"_id":"ck9o8hsrb0007ek44s12epbqh","content":"<h1><span id=\"个人信息\">个人信息</span></h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1><span id=\"技术之谈\">技术之谈</span></h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1><span id=\"工作经历\">工作经历</span></h1>\n<ul>\n<li>\n<h2><span id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</span></h2>\n<ul>\n<li>\n<h3><span id=\"元数据采集与数据地图\">元数据采集与数据地图</span></h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3><span id=\"数据标准与数据建模\">数据标准与数据建模</span></h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3><span id=\"自助查询与敏捷分析\">自助查询与敏捷分析</span></h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2><span id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</span></h2>\n<ul>\n<li>\n<h3><span id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</span></h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3><span id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</span></h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2><span id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</span></h2>\n<ul>\n<li>\n<h3><span id=\"量化策略与相关平台工具\">量化策略与相关平台工具</span></h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><span id=\"最后一席话\">最后一席话</span></h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做数据产品的时候java也学了很多，框架的话分别为django和spingboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"book","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is book","aplayer":false,"fixed":false,"_content":"","source":"book/index.md","raw":"---\nlayout: \"book\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is book\"\naplayer: false\nfixed: false\n---","updated":"2020-05-01T12:50:34.148Z","path":"book/index.html","title":"","_id":"ck9o8hsrd0009ek44p12jbsoy","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---","updated":"2019-11-16T04:51:44.675Z","path":"archive/index.html","_id":"ck9o8hsrg000cek44q31znocy","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2019-11-16T04:51:44.772Z","updated":"2019-11-16T04:51:44.772Z","path":"tags/index.html","comments":1,"_id":"ck9o8hsri000fek4411976n0q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HIVE源码学习--从CliDriver跟踪整个执行流程","catalog":true,"date":"2020-04-28T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","source":"_posts/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","raw":"---\ntitle: HIVE源码学习--从CliDriver跟踪整个执行流程\ncatalog: true\ndate: 2020-04-28 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","slug":"article_10_HIVE源码学习-从CliDriver跟踪整个执行流程","published":1,"updated":"2020-05-01T12:18:04.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsr30001ek44z1cvp6dw","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2><span id=\"准备工作\">准备工作</span></h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2><span id=\"show-code\">SHOW CODE</span></h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"特别感谢\">特别感谢</span></h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\" target=\"_blank\" rel=\"noopener\">csdn大佬</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2>准备工作</h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2>SHOW CODE</h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2>特别感谢</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\" target=\"_blank\" rel=\"noopener\">csdn大佬</a></li>\n</ul>\n"},{"title":"博客新增两个功能模块","catalog":true,"date":"2020-04-29T13:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","source":"_posts/article_11_新增两个功能.md","raw":"---\ntitle: 博客新增两个功能模块\ncatalog: true\ndate: 2020-04-29 21:31:43\nsubtitle: \nheader-img: \ntags:\n- OTHER\n---\n\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","slug":"article_11_新增两个功能","published":1,"updated":"2020-05-01T12:18:04.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsr70003ek44di26o8ty","content":"<h2><span id=\"入口\">入口</span></h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\" target=\"_blank\" rel=\"noopener\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2><span id=\"我的钢琴屋\">我的钢琴屋</span></h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3><span id=\"实现\">实现</span></h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2><span id=\"我的阅读室\">我的阅读室</span></h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3><span id=\"实现\">实现</span></h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"最后一席话\">最后一席话</span></h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>入口</h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\" target=\"_blank\" rel=\"noopener\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2>我的钢琴屋</h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3>实现</h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2>我的阅读室</h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3>实现</h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2>最后一席话</h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n"},{"title":"HIVE源码学习--实现一个自定义的HIVE序列化与反序列化","catalog":true,"date":"2020-05-01T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>3.1.2</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","source":"_posts/article_12_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","raw":"---\ntitle: HIVE源码学习--实现一个自定义的HIVE序列化与反序列化\ncatalog: true\ndate: 2020-05-01 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>3.1.2</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","slug":"article_12_HIVE源码学习-实现一个自定义HIVE序列化与反序列化","published":1,"updated":"2020-05-01T12:18:04.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsra0006ek44kx6i6oca","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2><span id=\"实操\">实操</span></h2>\n<h3><span id=\"数据准备\">数据准备</span></h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3><span id=\"新建项目myserde\">新建项目myserde</span></h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"建表与调试\">建表与调试</span></h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2><span id=\"关于开发时的debug\">关于开发时的debug</span></h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2><span id=\"学习借鉴\">学习借鉴</span></h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\" target=\"_blank\" rel=\"noopener\">Hive系列之SerDe</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2>实操</h2>\n<h3>数据准备</h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3>新建项目myserde</h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>建表与调试</h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2>关于开发时的debug</h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2>学习借鉴</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\" target=\"_blank\" rel=\"noopener\">Hive系列之SerDe</a></li>\n</ul>\n"},{"title":"又双叒叕建博客","catalog":true,"toc_nav_num":true,"date":"2019-11-13T09:05:00.000Z","subtitle":"讲讲本次建博客中间那些事","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","source":"_posts/article_1_又双叒叕建博客.md","raw":"---\ntitle: \"又双叒叕建博客\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-11-13 17:05:00\nsubtitle: \"讲讲本次建博客中间那些事\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","slug":"article_1_又双叒叕建博客","published":1,"updated":"2020-05-01T12:18:04.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrc0008ek44bns7qarq","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2><span id=\"工具准备\">工具准备</span></h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2><span id=\"动手搭建\">动手搭建</span></h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用vscode写文章\">使用vscode写文章</span></h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2><span id=\"介绍一些插件\">介绍一些插件</span></h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3><span id=\"访问次数插件\">访问次数插件</span></h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"评论插件\">评论插件</span></h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2><span id=\"域名配置\">域名配置</span></h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2><span id=\"多终端同步\">多终端同步</span></h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2><span id=\"拓展内容\">拓展内容</span></h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2><span id=\"最后一席话\">最后一席话</span></h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2>工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2>动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"noopener\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2>使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"noopener\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"noopener\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2>介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3>访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3>评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"noopener\">hexo live2d</a></p>\n</blockquote>\n<h2>域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"noopener\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2>多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2>拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h2>最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n"},{"title":"讲讲元数据","catalog":true,"date":"2020-03-31T10:47:13.000Z","subtitle":"大数据平台中元数据系统的一些见解","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","source":"_posts/article_3_讲讲元数据.md","raw":"---\ntitle: 讲讲元数据\ncatalog: true\ndate: 2020-03-31 18:47:13\nsubtitle: 大数据平台中元数据系统的一些见解\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n---\n\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","slug":"article_3_讲讲元数据","published":1,"updated":"2020-05-01T12:18:04.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsre000aek44aghj2ale","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2><span id=\"元数据定义\">元数据定义</span></h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2><span id=\"元数据采集\">元数据采集</span></h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2><span id=\"元数据平台\">元数据平台</span></h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2><span id=\"元数据应用\">元数据应用</span></h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2><span id=\"参考友军\">参考友军</span></h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2>元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2>元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2>元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2>元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"noopener\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"noopener\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"noopener\">知乎一个关于元数据的回答</a></li>\n</ul>\n"},{"title":"整理晒晒老博客","catalog":true,"date":"2020-02-29T08:15:00.000Z","subtitle":"整理下之前记录的一些东西","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","source":"_posts/article_2_整理晒晒老博客.md","raw":"---\ntitle: 整理晒晒老博客\ncatalog: true\ndate: 2020-02-29 16:15:00\nsubtitle: \"整理下之前记录的一些东西\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","slug":"article_2_整理晒晒老博客","published":1,"updated":"2020-05-01T12:18:04.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrh000eek446nv6kl2p","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2><span id=\"content\">content</span></h2>\n<h3><span id=\"修改桌面背景图片\"></span></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3><span id=\"dfs的几个demo\"></span></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3><span id=\"dlib人脸识别svm分类\"></span></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3><span id=\"flask-mongodb-gunicorn-demo\"></span></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3><span id=\"前端许愿墙效果\"></span></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><span id=\"在线双人五子棋\"></span></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3><span id=\"梯度下降法\"></span></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3><span id=\"手持弹幕效果\"></span></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><span id=\"聪明钱股票策略\"></span></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3><span id=\"扫雷js版\"></span></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3><span id=\"手动实现kmeans聚类算法\"></span></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3><span id=\"knn分类算法mnist为例\"></span></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3><span id=\"loading动画\"></span></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3><span id=\"逻辑回归二分类\"></span></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3><span id=\"数字杭电模拟登录python版php版\"></span></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3><span id=\"matplotlib-画图\"></span></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3><span id=\"mcts做五子棋ai\"></span></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3><span id=\"node-express-mongodb-demo\"></span></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3><span id=\"非线性拟合和非线性逻辑回归\"></span></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3><span id=\"swoole-你画我猜\"></span></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3><span id=\"唐诗词云\"></span></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3><span id=\"ppython的使用\"></span></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3><span id=\"php-rsa加密\"></span></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3><span id=\"简单线性回归\"></span></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3><span id=\"php实现soap调用\"></span></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3><span id=\"svm分类\"></span></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3><span id=\"tensorflow写mnist分类\"></span></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3><span id=\"threejs-demo\"></span></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3><span id=\"tts人机聊天应用\"></span></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3><span id=\"简单验证码的识别\"></span></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3><span id=\"web-worker-demo\"></span></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3><span id=\"微信小程序购物功能示例\"></span></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3><span id=\"微信小程序文字联系方式二维码\"></span></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/webgjc/blog</a></p>\n<h2>content</h2>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"noopener\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"noopener\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"noopener\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"noopener\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"noopener\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"noopener\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"noopener\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"noopener\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"noopener\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"noopener\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"noopener\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"noopener\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"noopener\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"noopener\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"noopener\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"noopener\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"noopener\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"noopener\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"noopener\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"noopener\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"noopener\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"noopener\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"noopener\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"noopener\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"noopener\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"noopener\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"noopener\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"noopener\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"noopener\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"noopener\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"noopener\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"noopener\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"noopener\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"noopener\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n"},{"title":"pynput实现鼠标键盘操作的记录与还原","catalog":true,"date":"2020-04-01T08:19:52.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","source":"_posts/article_4_pynput实现鼠标键盘操作的监控与还原.md","raw":"---\ntitle: pynput实现鼠标键盘操作的记录与还原\ncatalog: true\ndate: 2020-04-01 16:19:52\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- PYTHON\n- 脚本\n---\n\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","slug":"article_4_pynput实现鼠标键盘操作的监控与还原","published":1,"updated":"2020-05-01T12:18:04.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrk000gek44tnr1q12c","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2><span id=\"前期准备\">前期准备</span></h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2><span id=\"具体实现\">具体实现</span></h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用\">使用</span></h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2><span id=\"后期遐想\">后期遐想</span></h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2><span id=\"参考友军\">参考友军</span></h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2>前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2>具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2>使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2>后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"noopener\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n"},{"title":"hive与mysql元数据的快速采集","catalog":true,"date":"2020-04-05T08:35:20.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","source":"_posts/article_5_hive与mysql元数据的快速采集.md","raw":"---\ntitle: hive与mysql元数据的快速采集\ncatalog: true\ndate: 2020-04-05 16:35:20\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n- MYSQL\n---\n\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","slug":"article_5_hive与mysql元数据的快速采集","published":1,"updated":"2020-05-01T12:18:04.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrn000jek445wwxyty3","content":"<h2><span id=\"hive元数据采集\">Hive元数据采集</span></h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2><span id=\"mysql元数据采集\">Mysql元数据采集</span></h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2><span id=\"关于实时采集\">关于实时采集</span></h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"noopener\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2>Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2>关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"noopener\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"基于antlr4实现HQL的解析[元数据]","catalog":true,"date":"2020-04-07T07:24:40.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n","source":"_posts/article_6_基于antlr4实现HQL的解析-元数据.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[元数据]'\ncatalog: true\ndate: 2020-04-07 15:24:40\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- 元数据\n- JAVA\n---\n\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n","slug":"article_6_基于antlr4实现HQL的解析-元数据","published":1,"updated":"2020-05-01T12:18:04.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsro000lek44ffi2y8dk","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2><span id=\"前期准备\">前期准备</span></h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2><span id=\"具体实现\">具体实现</span></h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3><span id=\"g4分析\">g4分析</span></h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"实现思路\">实现思路</span></h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3><span id=\"表字段相关定义\">表字段相关定义</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"源码实现说明\">源码实现说明</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"调用实现\">调用实现</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<h2>前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"noopener\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2>具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3>g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3>实现思路</h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3>表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hiveserver2与hiveSQL的执行","catalog":true,"date":"2020-04-09T08:28:17.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","source":"_posts/article_7_hiveserver2与HQL的执行.md","raw":"---\ntitle: hiveserver2与hiveSQL的执行\ncatalog: true\ndate: 2020-04-09 16:28:17\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HIVE\n- PYTHON\n- JAVA\n---\n\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","slug":"article_7_hiveserver2与HQL的执行","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrp000nek44hs1eqqjn","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2><span id=\"实现\">实现</span></h2>\n<h3><span id=\"python\">python</span></h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3><span id=\"java\">java</span></h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2>实现</h2>\n<h3>python</h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3>java</h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"book":true,"book-cover":"/img/book/huozhe.jpg","title":"《活着》 -- 余华","date":"2019-11-13T09:05:00.000Z","header-img":"/img/article_header/header.jpg","_content":"\n这只是测试一下功能","source":"_posts/book_1_这是第一本书.md","raw":"---\nbook: true\nbook-cover: /img/book/huozhe.jpg\ntitle: \"《活着》 -- 余华\"\ndate: 2019-11-13 17:05:00\nheader-img: \"/img/article_header/header.jpg\"\n---\n\n这只是测试一下功能","slug":"book_1_这是第一本书","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrq000pek448jd49b9c","content":"<p>这只是测试一下功能</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这只是测试一下功能</p>\n"},{"title":"hiveSQL执行日志的收集","catalog":true,"date":"2020-04-09T08:30:21.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","source":"_posts/article_8_hiveSQL执行日志的收集.md","raw":"---\ntitle: hiveSQL执行日志的收集\ncatalog: true\ndate: 2020-04-09 16:30:21\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- YARN\n---\n\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","slug":"article_8_hiveSQL执行日志的收集","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrr000rek44tvotjpuc","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2><span id=\"实现\">实现</span></h2>\n<h3><span id=\"jdbc部分日志\">jdbc部分日志</span></h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"进度和mapreduce信息\">进度和mapreduce信息</span></h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3><span id=\"全部conrainer日志\">全部conrainer日志</span></h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\" target=\"_blank\" rel=\"noopener\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2>实现</h2>\n<h3>jdbc部分日志</h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3>进度和mapreduce信息</h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3>全部conrainer日志</h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\" target=\"_blank\" rel=\"noopener\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n"},{"title":"本地hadoop与hive的单节点部署和开发调试[mac]","catalog":true,"date":"2020-04-27T08:27:54.000Z","subtitle":null,"header-img":null,"_content":"\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://master:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>master:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","source":"_posts/article_9_本地hadoop与hive的部署-mac.md","raw":"---\ntitle: '本地hadoop与hive的单节点部署和开发调试[mac]'\ncatalog: true\ndate: 2020-04-27 16:27:54\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- HADOOP\n---\n\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://master:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>master:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","slug":"article_9_本地hadoop与hive的部署-mac","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrs000tek44ib3rijnz","content":"<h1><span id=\"预备\">预备</span></h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\" target=\"_blank\" rel=\"noopener\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\" target=\"_blank\" rel=\"noopener\">1.2.1</a><br>\n注:src为源码包</p>\n<h1><span id=\"hadoop搭建\">Hadoop搭建</span></h1>\n<h2><span id=\"解压进入配置目录\">解压，进入配置目录</span></h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2><span id=\"修改配置\">修改配置</span></h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"配置免密登录\">配置免密登录</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2><span id=\"启动hadoop\">启动hadoop</span></h2>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2><span id=\"验证安装成功\">验证安装成功</span></h2>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2><span id=\"访问界面\">访问界面</span></h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1><span id=\"hive搭建\">Hive搭建</span></h1>\n<h2><span id=\"解压文件\">解压文件</span></h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2><span id=\"修改配置\">修改配置</span></h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"装好mysql\">装好Mysql</span></h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2><span id=\"初始化metastore\">初始化Metastore</span></h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2><span id=\"启动hive\">启动hive</span></h2>\n<p>./bin/hive</p>\n<h1><span id=\"hive源码调试\">Hive源码调试</span></h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2><span id=\"特别感谢\">特别感谢</span></h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>预备</h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\" target=\"_blank\" rel=\"noopener\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\" target=\"_blank\" rel=\"noopener\">1.2.1</a><br>\n注:src为源码包</p>\n<h1>Hadoop搭建</h1>\n<h2>解压，进入配置目录</h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>配置免密登录</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2>启动hadoop</h2>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2>验证安装成功</h2>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  hadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2>访问界面</h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1>Hive搭建</h1>\n<h2>解压文件</h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>装好Mysql</h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2>初始化Metastore</h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2>启动hive</h2>\n<p>./bin/hive</p>\n<h1>Hive源码调试</h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2>特别感谢</h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n"},{"title":"关于spark使用ranger管理数据权限的一些尝试","catalog":true,"date":"2000-03-31T08:33:57.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/关于spark使用ranger管理数据权限的一些尝试.md","raw":"---\ntitle: 关于spark使用ranger管理数据权限的一些尝试\ncatalog: true\ndate: 2000-03-31 16:33:57\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"关于spark使用ranger管理数据权限的一些尝试","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrt000vek44czrfqzy3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于antlr4实现hiveSQL的解析[表血缘和字段血缘]","catalog":true,"date":"2000-03-31T08:25:06.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"","source":"_posts/基于antlr4实现HQL的解析-表血缘和字段血缘.md","raw":"---\ntitle: '基于antlr4实现hiveSQL的解析[表血缘和字段血缘]'\ncatalog: true\ndate: 2000-03-31 16:25:06\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n---\n","slug":"基于antlr4实现HQL的解析-表血缘和字段血缘","published":1,"updated":"2020-05-01T12:18:04.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsru000wek445p11lnkc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于antlr4实现HQL的解析[格式化]","catalog":true,"date":"2020-04-30T10:24:56.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","source":"_posts/基于antlr4实现HQL的解析-格式化.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[格式化]'\ncatalog: true\ndate: 2020-04-30 18:24:56\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- JAVA\n---\n\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","slug":"基于antlr4实现HQL的解析-格式化","published":1,"updated":"2020-05-01T12:18:04.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9o8hsrv000yek44mhq7chi5","content":"<h2><span id=\"前言\">前言</span></h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<h2><span id=\"设计思路\">设计思路</span></h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2><span id=\"实现思路\">实现思路</span></h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3><span id=\"主select部分\">主SELECT部分</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"select字段\">SELECT字段</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"from来源\">FROM来源</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"where条件\">WHERE条件</span></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"关键字大小写处理\">关键字大小写处理</span></h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3><span id=\"sql注释\">sql注释</span></h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2><span id=\"结果展示\">结果展示</span></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"附录\">附录</span></h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>前言</h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<h2>设计思路</h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2>实现思路</h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3>主SELECT部分</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>SELECT字段</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>FROM来源</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>WHERE条件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>关键字大小写处理</h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3>sql注释</h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2>结果展示</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2>附录</h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck9o8hsr30001ek44z1cvp6dw","tag_id":"ck9o8hsr90005ek44mg2o3oxq","_id":"ck9o8hsrh000dek44wbgt4kir"},{"post_id":"ck9o8hsrh000eek446nv6kl2p","tag_id":"ck9o8hsrf000bek444pfbykxv","_id":"ck9o8hsrm000iek44meme97nb"},{"post_id":"ck9o8hsr70003ek44di26o8ty","tag_id":"ck9o8hsrf000bek444pfbykxv","_id":"ck9o8hsro000kek44jgj9dti3"},{"post_id":"ck9o8hsra0006ek44kx6i6oca","tag_id":"ck9o8hsr90005ek44mg2o3oxq","_id":"ck9o8hsrq000oek44chzft1lc"},{"post_id":"ck9o8hsrc0008ek44bns7qarq","tag_id":"ck9o8hsrf000bek444pfbykxv","_id":"ck9o8hsrs000sek44zxg0ckzk"},{"post_id":"ck9o8hsre000aek44aghj2ale","tag_id":"ck9o8hsrr000qek44xuwsxn27","_id":"ck9o8hsrv000zek44am5psbx2"},{"post_id":"ck9o8hsre000aek44aghj2ale","tag_id":"ck9o8hsrt000uek444sufnm2f","_id":"ck9o8hsrw0010ek4430jl45c6"},{"post_id":"ck9o8hsrk000gek44tnr1q12c","tag_id":"ck9o8hsru000xek44ywauxj6t","_id":"ck9o8hsrw0013ek44t16o0uwi"},{"post_id":"ck9o8hsrk000gek44tnr1q12c","tag_id":"ck9o8hsrw0011ek44t25xwbj6","_id":"ck9o8hsrw0014ek44vcxxn0dq"},{"post_id":"ck9o8hsrn000jek445wwxyty3","tag_id":"ck9o8hsrr000qek44xuwsxn27","_id":"ck9o8hss20018ek44p1sva52h"},{"post_id":"ck9o8hsrn000jek445wwxyty3","tag_id":"ck9o8hsrt000uek444sufnm2f","_id":"ck9o8hss30019ek44j4uwn2m5"},{"post_id":"ck9o8hsrn000jek445wwxyty3","tag_id":"ck9o8hsrx0016ek44jbqmqfmj","_id":"ck9o8hss3001bek442s6x75f6"},{"post_id":"ck9o8hsro000lek44ffi2y8dk","tag_id":"ck9o8hss20017ek44oci03nvd","_id":"ck9o8hss4001eek44zcax2r18"},{"post_id":"ck9o8hsro000lek44ffi2y8dk","tag_id":"ck9o8hsrr000qek44xuwsxn27","_id":"ck9o8hss4001fek44rhvx8jfu"},{"post_id":"ck9o8hsro000lek44ffi2y8dk","tag_id":"ck9o8hss3001cek44gl3lrrcd","_id":"ck9o8hss4001hek443f2bo5je"},{"post_id":"ck9o8hsrp000nek44hs1eqqjn","tag_id":"ck9o8hsr90005ek44mg2o3oxq","_id":"ck9o8hss5001jek44ldzjcbl8"},{"post_id":"ck9o8hsrp000nek44hs1eqqjn","tag_id":"ck9o8hsru000xek44ywauxj6t","_id":"ck9o8hss5001kek4433aum8xk"},{"post_id":"ck9o8hsrp000nek44hs1eqqjn","tag_id":"ck9o8hss3001cek44gl3lrrcd","_id":"ck9o8hss5001mek44sc3epcau"},{"post_id":"ck9o8hsrr000rek44tvotjpuc","tag_id":"ck9o8hsr90005ek44mg2o3oxq","_id":"ck9o8hss5001nek449knrpa3j"},{"post_id":"ck9o8hsrr000rek44tvotjpuc","tag_id":"ck9o8hss5001iek44uxogc8g6","_id":"ck9o8hss6001pek44a5hecd9s"},{"post_id":"ck9o8hsrs000tek44ib3rijnz","tag_id":"ck9o8hsr90005ek44mg2o3oxq","_id":"ck9o8hss6001qek44ptpdqdh6"},{"post_id":"ck9o8hsrs000tek44ib3rijnz","tag_id":"ck9o8hss5001lek444a8521es","_id":"ck9o8hss6001sek440io354on"},{"post_id":"ck9o8hsru000wek445p11lnkc","tag_id":"ck9o8hss20017ek44oci03nvd","_id":"ck9o8hss7001tek44sh2cv3km"},{"post_id":"ck9o8hsrv000yek44mhq7chi5","tag_id":"ck9o8hss20017ek44oci03nvd","_id":"ck9o8hss7001vek443vmmynwg"},{"post_id":"ck9o8hsrv000yek44mhq7chi5","tag_id":"ck9o8hss3001cek44gl3lrrcd","_id":"ck9o8hss7001wek443776wf3n"}],"Tag":[{"name":"HIVE","_id":"ck9o8hsr90005ek44mg2o3oxq"},{"name":"OTHER","_id":"ck9o8hsrf000bek444pfbykxv"},{"name":"元数据","_id":"ck9o8hsrr000qek44xuwsxn27"},{"name":"大数据","_id":"ck9o8hsrt000uek444sufnm2f"},{"name":"PYTHON","_id":"ck9o8hsru000xek44ywauxj6t"},{"name":"脚本","_id":"ck9o8hsrw0011ek44t25xwbj6"},{"name":"MYSQL","_id":"ck9o8hsrx0016ek44jbqmqfmj"},{"name":"HQL解析","_id":"ck9o8hss20017ek44oci03nvd"},{"name":"JAVA","_id":"ck9o8hss3001cek44gl3lrrcd"},{"name":"YARN","_id":"ck9o8hss5001iek44uxogc8g6"},{"name":"HADOOP","_id":"ck9o8hss5001lek444a8521es"}]}}