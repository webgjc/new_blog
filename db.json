{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/html/yh.html","path":"html/yh.html","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/loading.png","path":"img/loading.png","modified":0,"renderable":0},{"_id":"source/money/deal_ali_fund_data.py","path":"money/deal_ali_fund_data.py","modified":0,"renderable":0},{"_id":"source/money/download_fund_data.py","path":"money/download_fund_data.py","modified":0,"renderable":0},{"_id":"source/money/fund_to_post.py","path":"money/fund_to_post.py","modified":0,"renderable":0},{"_id":"source/money/fund_trace_data.html","path":"money/fund_trace_data.html","modified":0,"renderable":0},{"_id":"source/money/fund_analyse_distribution.html","path":"money/fund_analyse_distribution.html","modified":0,"renderable":0},{"_id":"source/piano/index.html","path":"piano/index.html","modified":1,"renderable":0},{"_id":"source/about/reward.png","path":"about/reward.png","modified":0,"renderable":0},{"_id":"source/money/fund.json","path":"money/fund.json","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"source/img/avatar/avatar.jpg","path":"img/avatar/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/book/huozhe.jpg","path":"img/book/huozhe.jpg","modified":0,"renderable":0},{"_id":"source/img/book/shenhe.jpg","path":"img/book/shenhe.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/article35_1.jpg","path":"img/mypost/article35_1.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/github.png","path":"img/mypost/github.png","modified":0,"renderable":0},{"_id":"source/img/mypost/kaifazhemoshi.jpg","path":"img/mypost/kaifazhemoshi.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/mapreduce_configure.jpg","path":"img/mypost/mapreduce_configure.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot.jpg","path":"img/mypost/robot.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot1.jpg","path":"img/mypost/robot1.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot3.jpg","path":"img/mypost/robot3.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot2.jpg","path":"img/mypost/robot2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot4.jpg","path":"img/mypost/robot4.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_classtag.jpg","path":"img/mypost/robot_classtag.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_liuch.jpg","path":"img/mypost/robot_liuch.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_main.jpg","path":"img/mypost/robot_main.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_liuch2.jpg","path":"img/mypost/robot_liuch2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_pic.jpg","path":"img/mypost/robot_pic.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shijian.jpg","path":"img/mypost/robot_shijian.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shiwu.jpg","path":"img/mypost/robot_shiwu.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_shaixuanqi.jpg","path":"img/mypost/robot_shaixuanqi.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_small.jpg","path":"img/mypost/robot_small.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/table_maker.jpg","path":"img/mypost/table_maker.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/tablemaker_kongzhu.jpg","path":"img/mypost/tablemaker_kongzhu.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/tablemaker_main.jpg","path":"img/mypost/tablemaker_main.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/tablemaker_lie.jpg","path":"img/mypost/tablemaker_lie.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_1201.jpg","path":"img/mypost/web_robot_1201.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_add_dshb.jpg","path":"img/mypost/web_robot_add_dshb.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_jiandankanban.jpg","path":"img/mypost/web_robot_jiandankanban.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_paiban.jpg","path":"img/mypost/web_robot_paiban.jpg","modified":0,"renderable":0},{"_id":"source/money/analyse/tmp.py","path":"money/analyse/tmp.py","modified":0,"renderable":0},{"_id":"source/money/analyse/index.html","path":"money/analyse/index.html","modified":0,"renderable":0},{"_id":"source/money/analyse/tmp1.py","path":"money/analyse/tmp1.py","modified":0,"renderable":0},{"_id":"source/money/funddata/000109.json","path":"money/funddata/000109.json","modified":0,"renderable":0},{"_id":"source/money/funddata/000311.json","path":"money/funddata/000311.json","modified":0,"renderable":0},{"_id":"source/money/funddata/000345.json","path":"money/funddata/000345.json","modified":0,"renderable":0},{"_id":"source/money/funddata/000961.json","path":"money/funddata/000961.json","modified":0,"renderable":0},{"_id":"source/money/funddata/000963.json","path":"money/funddata/000963.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001268.json","path":"money/funddata/001268.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001302.json","path":"money/funddata/001302.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001592.json","path":"money/funddata/001592.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001548.json","path":"money/funddata/001548.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001593.json","path":"money/funddata/001593.json","modified":0,"renderable":0},{"_id":"source/money/funddata/003547.json","path":"money/funddata/003547.json","modified":0,"renderable":0},{"_id":"source/money/funddata/001617.json","path":"money/funddata/001617.json","modified":0,"renderable":0},{"_id":"source/money/funddata/003298.json","path":"money/funddata/003298.json","modified":0,"renderable":0},{"_id":"source/money/funddata/005760.json","path":"money/funddata/005760.json","modified":0,"renderable":0},{"_id":"source/money/funddata/003634.json","path":"money/funddata/003634.json","modified":0,"renderable":0},{"_id":"source/money/funddata/004343.json","path":"money/funddata/004343.json","modified":0,"renderable":0},{"_id":"source/money/funddata/005761.json","path":"money/funddata/005761.json","modified":0,"renderable":0},{"_id":"source/money/funddata/006269.json","path":"money/funddata/006269.json","modified":0,"renderable":0},{"_id":"source/money/funddata/006585.json","path":"money/funddata/006585.json","modified":0,"renderable":0},{"_id":"source/money/funddata/100053.json","path":"money/funddata/100053.json","modified":0,"renderable":0},{"_id":"source/money/funddata/110022.json","path":"money/funddata/110022.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160124.json","path":"money/funddata/160124.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160222.json","path":"money/funddata/160222.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160419.json","path":"money/funddata/160419.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160517.json","path":"money/funddata/160517.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160629.json","path":"money/funddata/160629.json","modified":0,"renderable":0},{"_id":"source/money/funddata/160626.json","path":"money/funddata/160626.json","modified":0,"renderable":0},{"_id":"source/money/funddata/161726.json","path":"money/funddata/161726.json","modified":0,"renderable":0},{"_id":"source/money/funddata/165520.json","path":"money/funddata/165520.json","modified":0,"renderable":0},{"_id":"source/money/funddata/161725.json","path":"money/funddata/161725.json","modified":0,"renderable":0},{"_id":"source/money/funddata/166801.json","path":"money/funddata/166801.json","modified":0,"renderable":0},{"_id":"source/money/funddata/163402.json","path":"money/funddata/163402.json","modified":0,"renderable":0},{"_id":"source/money/funddata/270002.json","path":"money/funddata/270002.json","modified":0,"renderable":0},{"_id":"source/money/funddata/260108.json","path":"money/funddata/260108.json","modified":0,"renderable":0},{"_id":"source/money/funddata/217022.json","path":"money/funddata/217022.json","modified":0,"renderable":0},{"_id":"source/money/funddata/163412.json","path":"money/funddata/163412.json","modified":0,"renderable":0},{"_id":"source/money/funddata/167301.json","path":"money/funddata/167301.json","modified":0,"renderable":0},{"_id":"source/money/funddata/320007.json","path":"money/funddata/320007.json","modified":0,"renderable":0},{"_id":"source/money/funddata/470007.json","path":"money/funddata/470007.json","modified":0,"renderable":0},{"_id":"source/money/funddata/486001.json","path":"money/funddata/486001.json","modified":0,"renderable":0},{"_id":"source/money/funddata/501030.json","path":"money/funddata/501030.json","modified":0,"renderable":0},{"_id":"source/money/funddata/501203.json","path":"money/funddata/501203.json","modified":0,"renderable":0},{"_id":"source/money/funddata/501205.json","path":"money/funddata/501205.json","modified":0,"renderable":0},{"_id":"source/money/funddata/519674.json","path":"money/funddata/519674.json","modified":0,"renderable":0},{"_id":"source/money/strategy/strategy0.js","path":"money/strategy/strategy0.js","modified":0,"renderable":0},{"_id":"source/money/strategy/index.html","path":"money/strategy/index.html","modified":0,"renderable":0},{"_id":"source/money/strategy/strategy1.js","path":"money/strategy/strategy1.js","modified":0,"renderable":0},{"_id":"source/money/strategy/strategy_template.js","path":"money/strategy/strategy_template.js","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/search.styl","path":"css/search.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/share.min.css","path":"css/share.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/meplayer.min.css","path":"css/meplayer.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/player.css","path":"css/player.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/player.js","path":"js/player.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/meplayer.min.js","path":"js/meplayer.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/social-share.min.js","path":"js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/yhback.js","path":"js/yhback.js","modified":0,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/header.jpg","path":"img/article_header/header.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/juzhengfenkuai.jpg","path":"img/mypost/juzhengfenkuai.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/article34_3.jpg","path":"img/mypost/article34_3.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/pyhiveprogress.png","path":"img/mypost/pyhiveprogress.png","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_event.jpg","path":"img/mypost/robot_event.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/tablemaker_jjjz.jpg","path":"img/mypost/tablemaker_jjjz.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/tablemaker_weather.jpg","path":"img/mypost/tablemaker_weather.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_live2d.jpg","path":"img/mypost/web_robot_live2d.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_new_tab.jpg","path":"img/mypost/web_robot_new_tab.jpg","modified":0,"renderable":0},{"_id":"source/money/funddata/000001.json","path":"money/funddata/000001.json","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/img/wechatpay.png","path":"img/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-11.jpg","path":"img/mypost/2021/1-11.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-1.jpg","path":"img/mypost/2021/1-1.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-10.jpg","path":"img/mypost/2021/1-10.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-12.jpg","path":"img/mypost/2021/1-12.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-14.jpg","path":"img/mypost/2021/1-14.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-13.jpg","path":"img/mypost/2021/1-13.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-15.jpg","path":"img/mypost/2021/1-15.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-17.jpg","path":"img/mypost/2021/1-17.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-18.jpg","path":"img/mypost/2021/1-18.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-2.jpg","path":"img/mypost/2021/1-2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-3.jpg","path":"img/mypost/2021/1-3.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-4.jpg","path":"img/mypost/2021/1-4.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-5.jpg","path":"img/mypost/2021/1-5.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-6.jpg","path":"img/mypost/2021/1-6.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-7.jpg","path":"img/mypost/2021/1-7.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-9.jpg","path":"img/mypost/2021/1-9.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-8.jpg","path":"img/mypost/2021/1-8.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-1.png","path":"img/mypost/2021/4-1.png","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-2.png","path":"img/mypost/2021/4-2.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"source/img/mypost/mapreduce_show.jpg","path":"img/mypost/mapreduce_show.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/1-16.jpg","path":"img/mypost/2021/1-16.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-7.jpg","path":"img/mypost/2021/4-7.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/article34_2.jpg","path":"img/mypost/article34_2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/article34_1.jpg","path":"img/mypost/article34_1.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_live2d1.jpg","path":"img/mypost/web_robot_live2d1.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/about/甘家城后端开发简历.pdf","path":"about/甘家城后端开发简历.pdf","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-150x150.jpg","path":"img/uploads/2017/05/IMG_3199-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-100x100.jpg","path":"img/uploads/2017/05/IMG_3199-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-225x300.jpg","path":"img/uploads/2017/05/IMG_3199-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-100x100.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-150x150.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-100x100.jpg","path":"img/uploads/2017/05/QQ截图20170530130825-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg","path":"img/uploads/2017/05/QQ截图20170530130825-300x237.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-150x150.jpg","path":"img/uploads/2017/05/QQ截图20170530130825-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-100x100.jpg","path":"img/uploads/2017/05/QQ截图20170530130839-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825.jpg","path":"img/uploads/2017/05/QQ截图20170530130825.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-150x150.jpg","path":"img/uploads/2017/05/QQ截图20170530130839-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg","path":"img/uploads/2017/05/QQ截图20170530130839-300x237.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-1-150x150.png","path":"img/uploads/2017/05/figure_1-2-1-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-1-100x100.png","path":"img/uploads/2017/05/figure_1-2-1-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-100x100.png","path":"img/uploads/2017/05/figure_1-2-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-150x150.png","path":"img/uploads/2017/05/figure_1-2-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-300x225.png","path":"img/uploads/2017/05/figure_1-2-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png","path":"img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873-100x100.png","path":"img/uploads/2017/03/2014091409260873-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873-150x150.png","path":"img/uploads/2017/03/2014091409260873-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/8-100x100.jpg","path":"img/uploads/2017/03/8-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/8-150x100.jpg","path":"img/uploads/2017/03/8-150x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/8-300x65.jpg","path":"img/uploads/2017/03/8-300x65.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/8.jpg","path":"img/uploads/2017/03/8.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031-100x100.jpg","path":"img/uploads/2017/03/IMG_3031-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031-150x150.jpg","path":"img/uploads/2017/03/IMG_3031-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031-225x300.jpg","path":"img/uploads/2017/03/IMG_3031-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-100x100.jpg","path":"img/uploads/2017/03/IMG_3063-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-150x150.jpg","path":"img/uploads/2017/03/IMG_3063-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-768x576.jpg","path":"img/uploads/2017/03/IMG_3063-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-300x225.jpg","path":"img/uploads/2017/03/IMG_3063-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-150x150.jpg","path":"img/uploads/2017/03/IMG_3068-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-100x100.jpg","path":"img/uploads/2017/03/IMG_3068-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-300x225.jpg","path":"img/uploads/2017/03/IMG_3068-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-150x150.jpg","path":"img/uploads/2017/03/QQ截图20170307175022-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-768x576.jpg","path":"img/uploads/2017/03/IMG_3068-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-100x100.jpg","path":"img/uploads/2017/03/QQ截图20170307175022-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg","path":"img/uploads/2017/03/QQ截图20170307175022-300x230.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-100x100.jpg","path":"img/uploads/2017/03/QQ截图20170316004119-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022.jpg","path":"img/uploads/2017/03/QQ截图20170307175022.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-150x150.jpg","path":"img/uploads/2017/03/QQ截图20170316004119-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg","path":"img/uploads/2017/03/QQ截图20170316004119-300x227.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-100x100.jpg","path":"img/uploads/2017/03/QQ截图20170319012731-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119.jpg","path":"img/uploads/2017/03/QQ截图20170316004119.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840-100x100.jpg","path":"img/uploads/2017/03/QQ截图20170326144840-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-150x150.jpg","path":"img/uploads/2017/03/QQ截图20170319012731-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731.jpg","path":"img/uploads/2017/03/QQ截图20170319012731.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg","path":"img/uploads/2017/03/QQ截图20170319012731-300x240.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840-150x150.jpg","path":"img/uploads/2017/03/QQ截图20170326144840-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840.jpg","path":"img/uploads/2017/03/QQ截图20170326144840.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/00126-1.png","path":"img/uploads/2017/07/00126-1.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-100x100.png","path":"img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-150x150.png","path":"img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/IMG_3419-100x100.png","path":"img/uploads/2017/07/IMG_3419-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/IMG_3419-150x150.png","path":"img/uploads/2017/07/IMG_3419-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/IMG_3419-169x300.png","path":"img/uploads/2017/07/IMG_3419-169x300.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-100x100.jpg","path":"img/uploads/2017/07/QQ截图20170714114735-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-150x112.jpg","path":"img/uploads/2017/07/QQ截图20170714114735-150x112.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg","path":"img/uploads/2017/07/QQ截图20170714114735-300x93.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735.jpg","path":"img/uploads/2017/07/QQ截图20170714114735.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-100x100.png","path":"img/uploads/2017/07/xxn-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516-100x100.jpg","path":"img/uploads/2017/10/IMG_3516-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516-150x150.jpg","path":"img/uploads/2017/10/IMG_3516-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516-225x300.jpg","path":"img/uploads/2017/10/IMG_3516-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517-100x100.jpg","path":"img/uploads/2017/10/IMG_3517-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517-150x150.jpg","path":"img/uploads/2017/10/IMG_3517-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517-225x300.jpg","path":"img/uploads/2017/10/IMG_3517-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340-100x100.png","path":"img/uploads/2018/01/微信图片_20180126111340-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340-132x150.png","path":"img/uploads/2018/01/微信图片_20180126111340-132x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340.png","path":"img/uploads/2018/01/微信图片_20180126111340.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-300x118.png","path":"img/uploads/2018/01/微信图片_20180131184240-300x118.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-100x100.png","path":"img/uploads/2018/01/微信图片_20180131184240-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-150x150.png","path":"img/uploads/2018/01/微信图片_20180131184240-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240.png","path":"img/uploads/2018/01/微信图片_20180131184240.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-100x100.png","path":"img/uploads/2017/11/MQKABG9HRBVI2B0OE-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-150x150.png","path":"img/uploads/2017/11/MQKABG9HRBVI2B0OE-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE.png","path":"img/uploads/2017/11/MQKABG9HRBVI2B0OE.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-100x100.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png","path":"img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-100x100.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-e1493528641389-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-150x150.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-300x225.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-150x150.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-e1493528641389-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-768x576.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-100x100.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-150x150.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-300x225.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-768x576.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-100x100.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-e1493529949189-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-150x150.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-e1493529949189-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-100x100.jpg","path":"img/uploads/2017/04/QQ截图20170407112928-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg","path":"img/uploads/2017/04/QQ截图20170407112928-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-199x300.jpg","path":"img/uploads/2017/04/QQ截图20170407112928-199x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928.jpg","path":"img/uploads/2017/04/QQ截图20170407112928.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-2-100x100.png","path":"img/uploads/2017/04/figure_1-2-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-2-150x150.png","path":"img/uploads/2017/04/figure_1-2-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-2-300x225.png","path":"img/uploads/2017/04/figure_1-2-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-2.png","path":"img/uploads/2017/04/figure_1-2.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-1-100x100.png","path":"img/uploads/2017/04/figure_1-3-1-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-1-150x150.png","path":"img/uploads/2017/04/figure_1-3-1-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-1-300x225.png","path":"img/uploads/2017/04/figure_1-3-1-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-1.png","path":"img/uploads/2017/04/figure_1-3-1.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-100x100.png","path":"img/uploads/2017/04/figure_1-3-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-150x150.png","path":"img/uploads/2017/04/figure_1-3-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-300x225.png","path":"img/uploads/2017/04/figure_1-3-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-100x100.jpg","path":"img/uploads/2017/04/image-1-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3.png","path":"img/uploads/2017/04/figure_1-3.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-150x150.jpg","path":"img/uploads/2017/04/image-1-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-300x225.jpg","path":"img/uploads/2017/04/image-1-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-100x100.jpg","path":"img/uploads/2017/04/image-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-768x576.jpg","path":"img/uploads/2017/04/image-1-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1024x768.jpg","path":"img/uploads/2017/04/image-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-150x150.jpg","path":"img/uploads/2017/04/image-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-100x100.jpg","path":"img/uploads/2017/04/image-2-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-300x225.jpg","path":"img/uploads/2017/04/image-2-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-150x150.jpg","path":"img/uploads/2017/04/image-2-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-768x576.jpg","path":"img/uploads/2017/04/image-2-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-300x225.jpg","path":"img/uploads/2017/04/image-300x225.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-768x576.jpg","path":"img/uploads/2017/04/image-768x576.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/test-100x100.png","path":"img/uploads/2018/04/test-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/test-150x150.png","path":"img/uploads/2018/04/test-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/test-300x225.png","path":"img/uploads/2018/04/test-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-100x100.png","path":"img/uploads/2018/04/微信图片_20180406103608-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/test.png","path":"img/uploads/2018/04/test.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-1080x1200.png","path":"img/uploads/2018/04/微信图片_20180406103608-1080x1200.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-150x150.png","path":"img/uploads/2018/04/微信图片_20180406103608-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-150x300.png","path":"img/uploads/2018/04/微信图片_20180406103608-150x300.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-512x1024.png","path":"img/uploads/2018/04/微信图片_20180406103608-512x1024.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-768x1536.png","path":"img/uploads/2018/04/微信图片_20180406103608-768x1536.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730-100x100.jpg","path":"img/uploads/2018/05/IMG20180512230730-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608.png","path":"img/uploads/2018/04/微信图片_20180406103608.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730-150x150.jpg","path":"img/uploads/2018/05/IMG20180512230730-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730-225x300.jpg","path":"img/uploads/2018/05/IMG20180512230730-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754-100x100.jpg","path":"img/uploads/2018/05/IMG20180512230754-100x100.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754-150x150.jpg","path":"img/uploads/2018/05/IMG20180512230754-150x150.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754-225x300.jpg","path":"img/uploads/2018/05/IMG20180512230754-225x300.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-100x100.png","path":"img/uploads/2018/06/微信图片_20180606185250-100x100.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/初赛.xlsx","path":"img/uploads/2018/05/初赛.xlsx","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-150x150.png","path":"img/uploads/2018/06/微信图片_20180606185250-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-768x432.png","path":"img/uploads/2018/06/微信图片_20180606185250-768x432.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-300x169.png","path":"img/uploads/2018/06/微信图片_20180606185250-300x169.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250.png","path":"img/uploads/2018/06/微信图片_20180606185250.png","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-8.jpg","path":"img/mypost/2021/4-8.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/operator.png","path":"img/mypost/operator.png","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_xuanzeqi.jpg","path":"img/mypost/web_robot_xuanzeqi.jpg","modified":0,"renderable":0},{"_id":"source/about/甘家城-后端开发-简历精简.pdf","path":"about/甘家城-后端开发-简历精简.pdf","modified":0,"renderable":0},{"_id":"source/about/甘家城-后端开发-简历.pdf","path":"about/甘家城-后端开发-简历.pdf","modified":0,"renderable":0},{"_id":"source/about/甘家城全栈开发简历.pdf","path":"about/甘家城全栈开发简历.pdf","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/about/resume.pdf","path":"about/resume.pdf","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-768x1024.jpg","path":"img/uploads/2017/05/IMG_3199-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839.jpg","path":"img/uploads/2017/05/QQ截图20170530130839.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-768x664.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-768x664.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-1-300x225.png","path":"img/uploads/2017/05/figure_1-2-1-300x225.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2.png","path":"img/uploads/2017/05/figure_1-2.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-768x576.png","path":"img/uploads/2017/05/figure_1-2-768x576.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873-300x159.png","path":"img/uploads/2017/03/2014091409260873-300x159.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873.png","path":"img/uploads/2017/03/2014091409260873.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-1024x768.jpg","path":"img/uploads/2017/03/IMG_3063-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-1024x768.jpg","path":"img/uploads/2017/03/IMG_3068-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png","path":"img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/IMG_3419.png","path":"img/uploads/2017/07/IMG_3419.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-150x150.png","path":"img/uploads/2017/07/xxn-150x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516-768x1024.jpg","path":"img/uploads/2017/10/IMG_3516-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-300x150.png","path":"img/uploads/2017/07/xxn-300x150.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517-768x1024.jpg","path":"img/uploads/2017/10/IMG_3517-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-1024x768.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-768x1024.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-e1493528641389-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg","path":"img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303.jpg","path":"img/uploads/2017/04/QQ图片20170430130303.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-1024x768.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-768x1024.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-e1493529949189-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521.jpg","path":"img/uploads/2017/04/QQ图片20170430132521.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-1-768x576.png","path":"img/uploads/2017/04/figure_1-3-1-768x576.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-3-768x576.png","path":"img/uploads/2017/04/figure_1-3-768x576.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-1024x768.jpg","path":"img/uploads/2017/04/image-1-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-1024x768.jpg","path":"img/uploads/2017/04/image-2-1024x768.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730-768x1024.jpg","path":"img/uploads/2018/05/IMG20180512230730-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754-768x1024.jpg","path":"img/uploads/2018/05/IMG20180512230754-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-3.png","path":"img/mypost/2021/4-3.png","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_xuanze.jpg","path":"img/mypost/web_robot_xuanze.jpg","modified":0,"renderable":0},{"_id":"source/money/funddata/000001all.json","path":"money/funddata/000001all.json","modified":0,"renderable":0},{"_id":"source/about/2021.pdf","path":"about/2021.pdf","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-1024x885.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-1024x885.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031-768x1024.jpg","path":"img/uploads/2017/03/IMG_3031-768x1024.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516-2000x1200.jpg","path":"img/uploads/2017/10/IMG_3516-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189.jpg","path":"img/uploads/2017/04/QQ图片20170430132521-e1493529949189.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2-2000x1200.jpg","path":"img/uploads/2017/04/image-2-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-1.png","path":"img/uploads/2017/05/figure_1-2-1.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873-768x406.png","path":"img/uploads/2017/03/2014091409260873-768x406.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517-2000x1200.jpg","path":"img/uploads/2017/10/IMG_3517-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-768x302.png","path":"img/uploads/2018/01/微信图片_20180131184240-768x302.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/figure_1-2-768x576.png","path":"img/uploads/2017/04/figure_1-2-768x576.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1-2000x1200.jpg","path":"img/uploads/2017/04/image-1-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2000x1200.jpg","path":"img/uploads/2017/04/image-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-5.png","path":"img/mypost/2021/4-5.png","modified":0,"renderable":0},{"_id":"source/img/mypost/pynput.png","path":"img/mypost/pynput.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-1991x1200.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520-1991x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-2000x1200.jpg","path":"img/uploads/2017/05/IMG_3199-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031-2000x1200.jpg","path":"img/uploads/2017/03/IMG_3031-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/2014091409260873-1024x542.png","path":"img/uploads/2017/03/2014091409260873-1024x542.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063-2000x1200.jpg","path":"img/uploads/2017/03/IMG_3063-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068-2000x1200.jpg","path":"img/uploads/2017/03/IMG_3068-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/IMG_3419-577x1024.png","path":"img/uploads/2017/07/IMG_3419-577x1024.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730-2000x1200.jpg","path":"img/uploads/2018/05/IMG20180512230730-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754-2000x1200.jpg","path":"img/uploads/2018/05/IMG20180512230754-2000x1200.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/figure_1-2-1-768x576.png","path":"img/uploads/2017/05/figure_1-2-1-768x576.png","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_baidutianqi.jpg","path":"img/mypost/web_robot_baidutianqi.jpg","modified":0,"renderable":0},{"_id":"source/money/alipay_record_20210203_1253_1.csv","path":"money/alipay_record_20210203_1253_1.csv","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520.jpg","path":"img/uploads/2017/05/IMG_3199-e1493609643520.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png","path":"img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_htmltag2.jpg","path":"img/mypost/robot_htmltag2.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/web_robot_dashboard.jpg","path":"img/mypost/web_robot_dashboard.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-577x1024.png","path":"img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-577x1024.png","modified":0,"renderable":0},{"_id":"source/money/analyse/000001s.json","path":"money/analyse/000001s.json","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-4.png","path":"img/mypost/2021/4-4.png","modified":0,"renderable":0},{"_id":"source/money/static/echarts.min.js","path":"money/static/echarts.min.js","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/2021/4-6.png","path":"img/mypost/2021/4-6.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-768x384.png","path":"img/uploads/2017/07/xxn-768x384.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-1024x512.png","path":"img/uploads/2017/07/xxn-1024x512.png","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image.jpg","path":"img/uploads/2017/04/image.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-1.jpg","path":"img/uploads/2017/04/image-1.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/04/image-2.jpg","path":"img/uploads/2017/04/image-2.jpg","modified":0,"renderable":0},{"_id":"source/music/bohushuo.mp3","path":"music/bohushuo.mp3","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/05/IMG_3199.jpg","path":"img/uploads/2017/05/IMG_3199.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3068.jpg","path":"img/uploads/2017/03/IMG_3068.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3516.jpg","path":"img/uploads/2017/10/IMG_3516.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/10/IMG_3517.jpg","path":"img/uploads/2017/10/IMG_3517.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3063.jpg","path":"img/uploads/2017/03/IMG_3063.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/03/IMG_3031.jpg","path":"img/uploads/2017/03/IMG_3031.jpg","modified":0,"renderable":0},{"_id":"source/music/fallinflower.mp3","path":"music/fallinflower.mp3","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_htmltag.jpg","path":"img/mypost/robot_htmltag.jpg","modified":0,"renderable":0},{"_id":"source/music/红豆.mp3","path":"music/红豆.mp3","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn-2000x1200.png","path":"img/uploads/2017/07/xxn-2000x1200.png","modified":0,"renderable":0},{"_id":"source/img/movie/qingshixiang.mp4","path":"img/movie/qingshixiang.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/yedegangqinqu11.mp4","path":"img/movie/yedegangqinqu11.mp4","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_demo1.gif","path":"img/mypost/robot_demo1.gif","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230754.jpg","path":"img/uploads/2018/05/IMG20180512230754.jpg","modified":0,"renderable":0},{"_id":"source/img/uploads/2018/05/IMG20180512230730.jpg","path":"img/uploads/2018/05/IMG20180512230730.jpg","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_demo2.gif","path":"img/mypost/robot_demo2.gif","modified":0,"renderable":0},{"_id":"source/img/mypost/robot_demo3.gif","path":"img/mypost/robot_demo3.gif","modified":0,"renderable":0},{"_id":"source/img/movie/liangzhu.mp4","path":"img/movie/liangzhu.mp4","modified":0,"renderable":0},{"_id":"source/img/mypost/keshihuaquanxuan.gif","path":"img/mypost/keshihuaquanxuan.gif","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/xxn.png","path":"img/uploads/2017/07/xxn.png","modified":0,"renderable":0},{"_id":"source/img/movie/riverflowsinyou.mp4","path":"img/movie/riverflowsinyou.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/qiudesinian.mp4","path":"img/movie/qiudesinian.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/mengzhongdehunli.mp4","path":"img/movie/mengzhongdehunli.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/someonelikeyou.mp4","path":"img/movie/someonelikeyou.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/summer.mp4","path":"img/movie/summer.mp4","modified":0,"renderable":0},{"_id":"source/piano/info.json","path":"piano/info.json","modified":0,"renderable":0},{"_id":"source/img/uploads/2017/07/poetry.txt","path":"img/uploads/2017/07/poetry.txt","modified":0,"renderable":0},{"_id":"source/img/movie/haidi.mp4","path":"img/movie/haidi.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/xinyang.mp4","path":"img/movie/xinyang.mp4","modified":0,"renderable":0},{"_id":"source/img/movie/yanhuolidechenai.mp4","path":"img/movie/yanhuolidechenai.mp4","modified":0,"renderable":0},{"_id":"source/about/resume 2023.pdf","path":"about/resume 2023.pdf","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"99afd3824e1a9ec198a413feae6c0def72f2d7e1","modified":1611722788735},{"_id":"source/404.md","hash":"8aa56af7bcd7cd23667cbf3eb5b5c9fa4533eb60","modified":1611722788735},{"_id":"source/.DS_Store","hash":"7ab820781caaafec6ff1367d6e45db50b6641d01","modified":1612349652000},{"_id":"source/favicon.ico","hash":"50a4fd70913caf8501a4f57e44c533951867300d","modified":1611722788804},{"_id":"themes/huweihuang/_config.yml","hash":"00a93beb83ba3758fd03ef60b98b3c917b9fe57f","modified":1611722789428},{"_id":"themes/huweihuang/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1611722789427},{"_id":"themes/huweihuang/.DS_Store","hash":"6cc577afb3c9a6c7d2c5b3995dbdd8f30ddb3c78","modified":1636471309886},{"_id":"source/_posts/.DS_Store","hash":"65f5ad5bbab962743659f25623ad0e2bf2606603","modified":1621838665346},{"_id":"source/about/2021.md","hash":"1fe2f2071a731ecbbc2df22de9a86741310a1a01","modified":1611722788785},{"_id":"source/archive/index.md","hash":"a93b0e38ac60cbbfd12998a14ffa5823f819cb52","modified":1611722788803},{"_id":"source/_posts/bug_review.md","hash":"10d04a1e68e273ad7094cc57e8270f2e6bf8e531","modified":1611923133990},{"_id":"source/about/index.md","hash":"47faa1a57db5be2d4ac089c53548d6c8c8a9304c","modified":1615275369900},{"_id":"source/about/resume copy.md","hash":"1d025efd60c852116529833d2661b80f1a51ad13","modified":1611722788789},{"_id":"source/about/resume.md","hash":"f4279e6b10b2210c40baf6027b0097382bc7ee8f","modified":1611722788789},{"_id":"source/about/甘家城-后端开发-简历.md","hash":"add29d8e17d0cb3395d462776fd0a7d7c42cd5ff","modified":1611722788794},{"_id":"source/about/甘家城全栈开发简历.md","hash":"83ee32e75aba0d6f4b5bbc64cf630be97a211420","modified":1611722788798},{"_id":"source/book/index.md","hash":"709e28c8977f7e6085781ddd6a0ac841cd1b895c","modified":1611722788804},{"_id":"source/html/yh.html","hash":"af70399f5f6148cba7aea9cf78250f35ea86d64e","modified":1611722788805},{"_id":"source/img/.DS_Store","hash":"3d6ad3bf35a8d64b246c3ca0e322031045ab9ad4","modified":1611919959682},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1611722788833},{"_id":"source/img/loading.png","hash":"4ce66ea1e388ef7dd44ed9f7ae8bdedd19cb9e3d","modified":1614251879243},{"_id":"source/money/deal_ali_fund_data.py","hash":"27b2f112a9dcc4da2b48c6283881ac8c404009d6","modified":1617280828282},{"_id":"source/money/download_fund_data.py","hash":"18bf903225c07492999e39a89fac30bfd2b4bffe","modified":1637590497202},{"_id":"source/money/fund_to_post.py","hash":"bfa3a132a5bd852eb1bc899580620f262ed74004","modified":1620873795094},{"_id":"source/money/fund_trace_data.html","hash":"5a149c87c3f0c2c20e7b01d7952ce9167dc3ce8b","modified":1611722789370},{"_id":"source/money/fund_analyse_distribution.html","hash":"7d1c65e27d5a212b31c356f723a830227940c065","modified":1637723561748},{"_id":"source/music/music.json","hash":"2d442b6cfe7730b4a96b74ccff019367fbd36269","modified":1614263527618},{"_id":"source/piano/index.html","hash":"f2c04cf54e7f56e43d24a84d2e6c64761a5e381c","modified":1696922410255},{"_id":"source/tags/index.md","hash":"1f824dd5e3b3155cc5a7f2ce551c2e90c20bc46d","modified":1611722789427},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1611722789429},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1611722789429},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1611722789430},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1611722789430},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1611722789430},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1611722789430},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1611722789431},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1611722789431},{"_id":"themes/huweihuang/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1611722789432},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1611722789431},{"_id":"themes/huweihuang/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1611722789437},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"c15726ab348cbf75291b88ffe5e5e50335b5cb0b","modified":1611722789438},{"_id":"themes/huweihuang/layout/book.ejs","hash":"a18be4b6bc783d7bccf9a19eaf4d83c2fe83c7e4","modified":1611722789438},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1611722789439},{"_id":"themes/huweihuang/layout/index.ejs","hash":"3aa858ec5e9afba8b3acdb4db46c4199009d8c6e","modified":1614912423076},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1611722789439},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"365dfb7431a34ad128758eb778fc6295626b47a9","modified":1614346799925},{"_id":"themes/huweihuang/layout/post.ejs","hash":"e5bf8d74f5e840052e0c3243ad618bcd1aaa5f4c","modified":1650952671787},{"_id":"themes/huweihuang/source/.DS_Store","hash":"f51cc053ad7f81f7798a3c01c7f0ebf0cbe2a864","modified":1636471309889},{"_id":"themes/huweihuang/layout/page.ejs","hash":"9e33759709b12a8137baf7b96b0ff70a3834b6ae","modified":1614925022627},{"_id":"source/about/reward.png","hash":"5d909472b52602d04a1be93f8d96365e041fb08c","modified":1611722788794},{"_id":"source/money/fund.json","hash":"f233f1cbd163fa2aedb65a201eda768196497eb2","modified":1617280848177},{"_id":"source/_posts/2017/article_10_使用ppython---实现python和php之间的通信.md","hash":"13a61a85fde32592de0556b2d52e8c0dbf8d0ae2","modified":1611722788736},{"_id":"source/_posts/2017/article_11_便捷的集体通讯录---vcf文件制作使用.md","hash":"dcd4a773d901408fbc5979b5440ed47daa229d91","modified":1611722788736},{"_id":"source/_posts/2017/article_12_梯度下降法---学习篇.md","hash":"f536f938daf64dc71e0c1da9d69567439c86675d","modified":1611722788736},{"_id":"source/_posts/2017/article_13_php实现Soap调用的两种方法.md","hash":"cabc5b1e57f81abbaa5a6bf023b9ba59a7410ddd","modified":1611722788736},{"_id":"source/_posts/2017/article_14_logistics回归做二分类---学习篇.md","hash":"1dd6b6e2d023db4f51d8abfb3801d6fe90158819","modified":1611722788737},{"_id":"source/_posts/2017/article_15_前端回忆录---下篇.md","hash":"a1e3437b172c8a2b079a39fe496e40929b5cb493","modified":1611722788737},{"_id":"source/_posts/2017/article_16_许愿墙效果（仿）.md","hash":"253842420c578c49ffc58f4f689a03d4c5acbd73","modified":1611722788737},{"_id":"source/_posts/2017/article_17_nginx+php下配置https.md","hash":"72d82a74a3cf2a01b94e9d6d882de55fad90c9cb","modified":1611722788737},{"_id":"source/_posts/2017/article_18_python实现简单时时打印桌面程序.md","hash":"d8a8ed7d93cdce9b899634c8ec57a16ea4e1806c","modified":1611722788738},{"_id":"source/_posts/2017/article_19_微信小程序初探与文字二维码举例.md","hash":"3f99b1722e853cfdc9dc6f1ac5c331dd95a7e4f9","modified":1611722788738},{"_id":"source/_posts/2017/article_1_个人简介.md","hash":"f08e4d803eab9f16087dbe7971ceef98d09212c5","modified":1611722788738},{"_id":"source/_posts/2017/article_20_赛马问题.md","hash":"0fe2df206a9ee356d601968c885001d1e3bc7766","modified":1611722788738},{"_id":"source/_posts/2017/article_22_单变量非线性拟合和逻辑回归.md","hash":"569684af38f725c4c1ef307aec824c3fe1d8769e","modified":1611722788739},{"_id":"source/_posts/2017/article_21_tensorflow入门之mnist手写数字识别.md","hash":"c542894db1f7295243c253b49dde0f5c98adffc4","modified":1611722788738},{"_id":"source/_posts/2017/article_23_svm分类器---sklearn.md","hash":"a8b5122e7c6de3cc84a6e4b6b71047918ce780ec","modified":1611722788739},{"_id":"source/_posts/2017/article_24_几个loading动画---可更新.md","hash":"53c6387a7c3bc4c5d79eb5f79f57aeb77441cead","modified":1611722788740},{"_id":"source/_posts/2017/article_26_yolo v2在windows的配置.md","hash":"b7c5b42556ddeeff4fabe9d6e8517c660429007d","modified":1611722788741},{"_id":"source/_posts/2017/article_25_使用dlib实现人脸检测和笑脸识别.md","hash":"1222d5fbf37dd6ee3c8d4d559a00b81082d015a9","modified":1611722788741},{"_id":"source/_posts/2017/article_27_php实现RSA加密.md","hash":"93dd78c3bed6f5187d8b0d237755b633f1de83ba","modified":1611722788742},{"_id":"source/_posts/2017/article_29_使用python的jieba,wordcloud做唐诗分析.md","hash":"2dbc16c7b28de762f7948b571cb180a9ef9a32e3","modified":1611722788743},{"_id":"source/_posts/2017/article_28_用node.js的socket.io实现双人五子棋对战.md","hash":"fd08189fbef08900764e2a42de067974d30e085c","modified":1611722788743},{"_id":"source/_posts/2017/article_2_搭建wordpress个人博客.md","hash":"2de7d58657ad689ab8d4e2f676f07be1a55355f4","modified":1611722788744},{"_id":"source/_posts/2017/article_30_用ReactNative做一个简单新闻app.md","hash":"db66b27187f6e6703a7cb56cef972b4272449593","modified":1611722788744},{"_id":"source/_posts/2017/article_31_yolo在windows训练自己的数据集.md","hash":"3dd9d191133d9d499c1667e128fbfd8b6391b65f","modified":1611722788745},{"_id":"source/_posts/2017/article_32_初试three.js，一个小demo.md","hash":"25135227ac6971f1c130071b0863f5c52d03285f","modified":1611722788745},{"_id":"source/_posts/2017/article_33_初试web worker，感觉是神器.md","hash":"5acb25689e48f184081ec20f8c44a30cb30bc362","modified":1611722788746},{"_id":"source/_posts/2017/article_35_three.js第三弹，一个可玩的魔方.md","hash":"15e8429e86322127c51ec26d681f5d174e7e7f8a","modified":1611722788747},{"_id":"source/_posts/2017/article_34_three.js第二波，实现类似反应堆的游戏.md","hash":"56abee5adf76a7adf6e6f407fafb3cf9bab23f48","modified":1611722788747},{"_id":"source/_posts/2017/article_36_python爬虫初入门实战 [aim->拉勾网].md","hash":"e13d5245ce2caa5c6bc3e50a66be9d3d94ebee43","modified":1611722788747},{"_id":"source/_posts/2017/article_37_hack个验证码验证多字符连接识别与切割识别的优劣.md","hash":"5978b54fc4997b33c26bfa34f603e4880697fe37","modified":1611722788747},{"_id":"source/_posts/2017/article_40_爬进数字杭电python篇.md","hash":"76c9c3b14eaeed9ce9b036107132339130a4d944","modified":1611722788749},{"_id":"source/_posts/2017/article_39_python cv2图像处理小结.md","hash":"d8703ca90901df94f9d90c4cce8db5cb0abb77dc","modified":1611722788748},{"_id":"source/_posts/2017/article_38_three.js第四发，粒子与第一视角的尝试.md","hash":"6201fd8c54306352c421fd327c14c18c968b918c","modified":1611722788748},{"_id":"source/_posts/2017/article_3_简单线性回归---学习篇.md","hash":"5abb62733edba354c7584cfbbfcbe503e73b16c9","modified":1611722788748},{"_id":"source/_posts/2017/article_42_爬虫技术栈小结.md","hash":"e8e2d913ada3c6d0520fe433eff0814ec8e99ff3","modified":1611722788749},{"_id":"source/_posts/2017/article_41_用google的GAE部署kindle的自动推送.md","hash":"e277da1d24767620dfecdd723e97f85b1c3cde6f","modified":1611722788749},{"_id":"source/_posts/2017/article_43_用python写个自动改壁纸的桌面程序.md","hash":"eb9713e51ee1bd8d00dae1f1e6412b7e4ade9b78","modified":1611722788749},{"_id":"source/_posts/2017/article_44_sublime装个google翻译的package.md","hash":"88c7851459737611fb128c7568742f0cc2a1d531","modified":1611722788750},{"_id":"source/_posts/2017/article_47_不会停下的setInterval.md","hash":"674644cd2e8e373a0806c5bb06074fe784df0b13","modified":1611722788751},{"_id":"source/_posts/2017/article_45_解决各种问题集.md","hash":"85d0ee6400f8dd20da1243ba22e51c83e0f873e5","modified":1611722788750},{"_id":"source/_posts/2017/article_4_数字杭电的模拟登陆(带验证码).md","hash":"c9a9b120b7fbe45765be9603a5b1dfd49adb8dcf","modified":1611722788751},{"_id":"source/_posts/2017/article_48_flask+mongodb+gunicron初试.md","hash":"b695b69f1036391338999a90269c42c54dcb167c","modified":1611722788751},{"_id":"source/_posts/2017/article_46_swoole初试，作为一个你画我猜的websocket server.md","hash":"613880bb97525dc6829d0fbc0cf8934caed5e5f5","modified":1611722788750},{"_id":"source/_posts/2017/article_7_前端回忆录---上篇.md","hash":"a9c286c3e1e7bd73d96a3e2147c754fc1e87ad61","modified":1611722788752},{"_id":"source/_posts/2017/article_8_python日常问答篇--更新中.md","hash":"6e1a0311658b17dbe05051e559e54f94445efcfa","modified":1611722788752},{"_id":"source/_posts/2017/article_5_KNN实现手写数字0-9识别.md","hash":"e9c2e49b827a5a0ac490c358e6553e06cd70d42b","modified":1611722788751},{"_id":"source/_posts/2017/article_6_leetcode解题篇Python法1-5题.md","hash":"59fb832d0f2133803ab08a5359e1161e38c307cc","modified":1611722788752},{"_id":"source/_posts/2018/article_10_在线接口测试及生成文档.md","hash":"bedd33ad6f3696747694c1455bfcfa67873fc884","modified":1611722788753},{"_id":"source/_posts/2017/article_9_常用编程小操作.md","hash":"d35debe82105c5c950b71c1d2e43f927951b7395","modified":1611722788752},{"_id":"source/_posts/2019/article_1_又双叒叕建博客.md","hash":"140d7035c34815b7a3bfc71747cdc5ba5dc4bfdc","modified":1611722788765},{"_id":"source/_posts/2018/article_11_聊聊深度优先搜索算法及应用.md","hash":"48a9a8f02016e98d52526e0be2a0fd0e6c5db466","modified":1611722788753},{"_id":"source/_posts/2018/article_12_爬虫--钢琴曲谱.md","hash":"dfb01dbcb2b59ac8f328ba9bac4fe299edbc2c09","modified":1611722788753},{"_id":"source/_posts/2018/article_13_沉迷深搜，来做个解数独的.md","hash":"8ca047aa01392bea917e5c8f077ced25d0d07dac","modified":1611722788754},{"_id":"source/_posts/2018/article_14_手持弹幕效果--网页版.md","hash":"c19b088767c744253a2e4d6d4d1d37f4b075a05e","modified":1611722788754},{"_id":"source/_posts/2018/article_15_手搓一个kmeans聚类.md","hash":"0b3ea0f10314d296508b964ef54d744cf5eaaafd","modified":1611722788754},{"_id":"source/_posts/2018/article_16_花 与 字 （持续更新）.md","hash":"869cb0adc779f42f8f10be2efc07264605d55282","modified":1611722788755},{"_id":"source/_posts/2018/article_17_整理下二叉树.md","hash":"7512df0d6081092edb6d89930ca60acbe03485bc","modified":1611722788755},{"_id":"source/_posts/2018/article_18_练手c语言算法一.md","hash":"3af434f646b4c245373b30b12570a6daf704d271","modified":1611722788755},{"_id":"source/_posts/2018/article_19_练手c语言算法二.md","hash":"0d940c2b76a16271e7a19361777e1f294d60bde8","modified":1611722788755},{"_id":"source/_posts/2018/article_1_2017总结咯.md","hash":"6dedca25e07124f3603e977d1295572fa869976a","modified":1611722788756},{"_id":"source/_posts/2018/article_20_一小波面经.md","hash":"44617799fcab64812620635314402aab5fd3d6eb","modified":1611722788756},{"_id":"source/_posts/2018/article_21_svm的一些理解---《机器学习》周志华.md","hash":"7496a4e68c931051d1661050e140fc8f5c574d43","modified":1611722788756},{"_id":"source/_posts/2018/article_22_视频运动检测尝试.md","hash":"324096524fe3860dcfc85cfffd62ad5fdbc57360","modified":1611722788756},{"_id":"source/_posts/2018/article_24_上班，上班.md","hash":"3b67f3ba5da70a92b3eba50bdcd0771ef7da7d08","modified":1611722788757},{"_id":"source/_posts/2018/article_23_打造基金小数据库.md","hash":"196dac95ab0cd6d92117428797a764b00d5b2b25","modified":1611722788757},{"_id":"source/_posts/2018/article_26_用virsh进行虚拟机管理.md","hash":"7e2a7d46a70934ee431158fa64588cdb05fc7241","modified":1611722788758},{"_id":"source/_posts/2018/article_25_试试树莓派，反正也是python.md","hash":"57b1a8d3e957b275041395b35e416a0fa74b7e6a","modified":1611722788757},{"_id":"source/_posts/2018/article_2_python数据分析之基础画图.md","hash":"fb783206a1ca7419536e1bbe3d4ed1a5ca58cd89","modified":1611722788759},{"_id":"source/_posts/2018/article_28_回校之路.md","hash":"c2a0fa3876a9ac51dee400048d2e331036f63a54","modified":1611722788758},{"_id":"source/_posts/2018/article_27_写个基于screen和expect的服务器管理小工具.md","hash":"31e3aa17b70a0018ec66bffe48e8fed57c606ac4","modified":1611722788758},{"_id":"source/_posts/2018/article_3_蒙特卡洛树搜索(mcts)实践--还是五子棋吧.md","hash":"e4e6284168ab665001d96e0400c229eb2cc6d555","modified":1611722788759},{"_id":"source/_posts/2018/article_4_宽客初探---策略之旅.md","hash":"98df3fbab8821d8f963a8affa0af21f1e66c34d4","modified":1611722788759},{"_id":"source/_posts/2018/article_5_用python完成文本转音频(tts).md","hash":"4ffa09428c2b4121115ee946472a5bfc5b87b103","modified":1611722788759},{"_id":"source/_posts/2018/article_6_Python一个人机聊天的应用.md","hash":"fb942e2e21471aaec6f589d5b51a873db89cb5c5","modified":1611722788760},{"_id":"source/_posts/2018/article_7_node+express+mongodb初试.md","hash":"5676efe027c3618db950fd7406c9cdd9e3c1f61b","modified":1611722788760},{"_id":"source/_posts/2018/article_9_庆祝博客一周年！！.md","hash":"632bdda8c0367d83d1727c642b7d644f8965673c","modified":1611722788760},{"_id":"source/_posts/2020/article_11_新增两个功能.md","hash":"5419f81bfb3c39c4bc06b4de9517b19cc6b3d38c","modified":1611722788766},{"_id":"source/_posts/2018/article_8_扫雷js版.md","hash":"d2b06a95a687e98e764e51de0d961976eb28f087","modified":1611722788760},{"_id":"source/_posts/2020/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","hash":"65c3b23dc993fe19304d40d57b7c65c2a4491b73","modified":1611722788766},{"_id":"source/_posts/2020/article_15_HIVE源码学习-执行计划Operators和优化Optimizers.md","hash":"e89021c8f91004c3c0fa3cdc5ffad28f2ccdcccf","modified":1611722788767},{"_id":"source/_posts/2020/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","hash":"3d9baef55a499fda34a93d5560b0d70ba948cbb2","modified":1611722788766},{"_id":"source/_posts/2020/article_16_HIVE源码学习-hivehook尝试血缘解析.md","hash":"0dc91e144bc9e463de25dcc401e8f30b45090245","modified":1611722788768},{"_id":"source/_posts/2020/article_17_HIVE源码学习-实现自定义的udf.md","hash":"37e7688bd3b88792edb0b6570dfca8f02184c2cf","modified":1611722788768},{"_id":"source/_posts/2020/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘.md","hash":"9933ae543b1ebf8f98db1bf20345367c5ab52061","modified":1615809809881},{"_id":"source/_posts/2020/article_12_基于antlr4实现HQL的解析-格式化.md","hash":"221290ee27b9308f5b6b5c3d4c5572cef98bef71","modified":1615809816700},{"_id":"source/_posts/2020/article_18_chrome插件-网页自动化.md","hash":"efc090a4070b7acf14cb6f8d17e232474ed035f6","modified":1611722788769},{"_id":"source/_posts/2020/article_19_chrome插件-万能表格.md","hash":"c36b88023e13aefd5968f2837bf57ac73aee938a","modified":1611722788769},{"_id":"source/_posts/2020/article_20_hadoop-mapreduce实现矩阵乘法.md","hash":"17a9a0773d97d8f7a2ef4322dbc88bc77939b56d","modified":1611722788769},{"_id":"source/_posts/2020/article_21_chrome插件-WEB-ROBOT.md","hash":"f291d6a370a4943e7d2c62d215e2e55108ec1b4c","modified":1611722788770},{"_id":"source/_posts/2020/article_23_java虚拟机.md","hash":"8df769f07d6984acea33e9a988952a42d7556c76","modified":1611722788770},{"_id":"source/_posts/2020/article_22_改版我的部分.md","hash":"44b3e0c7665352ad0e9863a32d3ad1173a167408","modified":1611722788770},{"_id":"source/_posts/2020/article_24_java常用类略知一二.md","hash":"ab83108678f4f6d88efe7dbfe9ee0b98575a0556","modified":1611722788771},{"_id":"source/_posts/2020/article_27_网络略知一二.md","hash":"8b5739bc5aeeda6c8e084dd5f7b52635a1625a2c","modified":1611722788772},{"_id":"source/_posts/2020/article_25_spring略知一二.md","hash":"f0d1648d46e9c9e3b91879dd6fe2a720408df357","modified":1611722788771},{"_id":"source/_posts/2020/article_26_容器略知一二.md","hash":"9e743aed9dcd53b08112d19e3cad4bd0e2348a22","modified":1611722788772},{"_id":"source/_posts/2020/article_28_mysql略知一二.md","hash":"3eff12ead7baf04c3be24e5fdd9a0d131a283b07","modified":1611722788772},{"_id":"source/_posts/2020/article_29_分布式略知一二.md","hash":"89a612c8dc71c4f83419dd9832a9ec250d1d94b3","modified":1611722788772},{"_id":"source/_posts/2020/article_2_整理晒晒老博客.md","hash":"77ad7b1c909af365e80e577f7508216442f5d3c3","modified":1611722788773},{"_id":"source/_posts/2020/article_30_操作系统略知一二.md","hash":"c0821893988e03f80d205443ec1130d14043161c","modified":1611722788773},{"_id":"source/_posts/2020/article_31_chrome插件-WEB-ROBOT之我的看板.md","hash":"8ee48f03dce522bad5ffd2fb62b4a581af004cbe","modified":1611722788773},{"_id":"source/_posts/2020/article_32_chrome插件-WEB-ROBOT实现难点.md","hash":"9e3f5d924491c79aa14062ea7645f309473297b8","modified":1611722788774},{"_id":"source/_posts/2020/article_33_可视化圈选一些实现思路.md","hash":"0df59f53b644e9ec4690f82753be2e759a8dcb72","modified":1611722788774},{"_id":"source/_posts/2020/article_34_httpClient的cookie策略引发的隐藏bug定位.md","hash":"4c6b0474fb56fd0af96bceb24f91e1f6adbfc71f","modified":1611722788775},{"_id":"source/_posts/2020/article_3_讲讲元数据.md","hash":"2b0e73f614d68ca465f8ff3384fce80edf5b1050","modified":1611722788776},{"_id":"source/_posts/2020/article_35_sql中关于统计某列最新不同值的方法.md","hash":"19d2a335faa7ddf435e79634c5b99262a19e6221","modified":1611722788775},{"_id":"source/_posts/2020/article_4_pynput实现鼠标键盘操作的监控与还原.md","hash":"a152cdb2d08b673fc82879403da3f0ff5443a4d6","modified":1611722788776},{"_id":"source/_posts/2020/article_5_hive与mysql元数据的快速采集.md","hash":"7166f0455f0b15218cd21132480fa504f5d5b6bc","modified":1611722788777},{"_id":"source/_posts/2020/article_7_hiveserver2与HQL的执行.md","hash":"1096e5b9331121e1b0fdfb3f17f378d0242a7952","modified":1611722788778},{"_id":"source/_posts/2020/article_8_hiveSQL执行日志的收集.md","hash":"502a9fc285c1a05bce9047d64dadc2319c49ad83","modified":1611722788778},{"_id":"source/_posts/2020/article_6_基于antlr4实现HQL的解析-元数据.md","hash":"96ae5bfa5a69db4f1a9ff118317c3da8e35d643a","modified":1615809838420},{"_id":"source/_posts/2020/offer_1_剑指offer思路.md","hash":"21d52d0fdf5faa71ca48b4d174aee0c73f0275df","modified":1611722788779},{"_id":"source/_posts/2020/article_9_本地hadoop与hive的部署-mac.md","hash":"165228199fc8efb1dbb39f41dce35a8d949266e3","modified":1614925919894},{"_id":"source/_posts/2021/article_1_2020总结-稳中求进.md","hash":"03e2cd4b5fe41665786aada75ae419681316f8fe","modified":1614327336579},{"_id":"source/_posts/2021/article_2_原博客大迁移2017-2018.md","hash":"8514fd15855d5d243cd81ccc9521ae9093cb5e73","modified":1614325898114},{"_id":"source/_posts/2022/article_1_2021总结.md","hash":"05179a49c4229a9a889638ca7a6f8d532052b40e","modified":1660702204270},{"_id":"source/_posts/2022/article_2_博客迁移.md","hash":"13f63a716426b31766bcb1c25f8a9dc4fd47e514","modified":1650955864520},{"_id":"source/_posts/2021/article_3_WEB_ROBOT使用文档(终极版).md","hash":"e9b77c6cea5cf25ded4fa9f1f657a4dbff7837d0","modified":1614000084747},{"_id":"source/_posts/book/book_1_《为何爱会伤人》.md","hash":"f3ec03df1574bcc8c7fedc56d7b98568a50af2c5","modified":1623069324416},{"_id":"source/_posts/life/life_1_生活篇.md","hash":"b689bd101c264898816865067e0238c607f90fe0","modified":1615812852875},{"_id":"source/_posts/2021/article_4_HDFS分布式文件系统小结.md","hash":"c53202f0aca8ef67b491ca8f991dbb489f124861","modified":1615452850606},{"_id":"source/_posts/2021/article_5_H3S投影仪入手体验.md","hash":"c1dd661e650110fabbfe38178e18e59cae62b24a","modified":1618456263412},{"_id":"source/_posts/money/money_1_理财篇.md","hash":"09bbcfcfd41c54d5cf1e757236f1428a1c45ad1a","modified":1638790194324},{"_id":"source/_posts/music/music_1_音乐篇.md","hash":"4ffc595d0f730a5d66b534100b4a73ed58f2f0dc","modified":1636734743781},{"_id":"source/_posts/money/lottery.md","hash":"d396fb7e1782f72860e84333622c18811fddf192","modified":1638789843966},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1611722788809},{"_id":"source/img/article_header/.DS_Store","hash":"84e8e0b2cb4c4d475a1938a08b80829357e25252","modified":1611722788810},{"_id":"source/img/avatar/avatar.jpg","hash":"9b687fd63a0c1c74cde3d1b3128ca9f1a7b93541","modified":1611722788814},{"_id":"source/img/book/huozhe.jpg","hash":"9aad04e9902c5b06272b5eae5a2a00a523fe76ad","modified":1611722788821},{"_id":"source/img/header_img/.DS_Store","hash":"29ade0c1cfe460dcafdbacbcd26371b64af80d69","modified":1611722788822},{"_id":"source/img/book/shenhe.jpg","hash":"6db2dce07e93ec7b8042baa148c093029099bcf1","modified":1611722788821},{"_id":"source/img/mypost/article35_1.jpg","hash":"37b61a5513835c4d738bcfc5767c080c8696390c","modified":1611722788898},{"_id":"source/img/mypost/github.png","hash":"8a5c8b401c15bd52f2d5f85db35bb047904f581a","modified":1611722788899},{"_id":"source/img/mypost/kaifazhemoshi.jpg","hash":"b54a50b353bb91209b0613d4fbc82cf049408782","modified":1611722788901},{"_id":"source/img/mypost/mapreduce_configure.jpg","hash":"7e2cdeacaf48b8364de3f766eba256f3e2688485","modified":1611722788937},{"_id":"source/img/mypost/robot.jpg","hash":"980cd39d217de071e5cb82dcbca04c863474dd49","modified":1611722788945},{"_id":"source/img/mypost/robot1.jpg","hash":"2a48468948be951593428235b36c84356ad78582","modified":1611722788945},{"_id":"source/img/mypost/robot3.jpg","hash":"5b188ddc1741baf973078b433076829c9006d9fe","modified":1611722788946},{"_id":"source/img/mypost/robot2.jpg","hash":"14694787397a50c3187a3c2b1eab0da37d14d997","modified":1611722788945},{"_id":"source/img/mypost/robot4.jpg","hash":"5fd6f40c0c7dd1e7622fd00d217dd29848b10715","modified":1611722788947},{"_id":"source/img/mypost/robot_classtag.jpg","hash":"c309301e3438849ed9ef7e8ce89f45f85253dbcf","modified":1611722788947},{"_id":"source/img/mypost/robot_liuch.jpg","hash":"ec9c27e7febd74175497d529422897dd96b8dcf4","modified":1611722789060},{"_id":"source/img/mypost/robot_main.jpg","hash":"bfdb52ea45c0c82d44e2249f143ea1f3ab1fcbda","modified":1611722789061},{"_id":"source/img/mypost/robot_liuch2.jpg","hash":"38ba6e6810b35a754bbcd7da38eaeed4a5bc12e0","modified":1611722789060},{"_id":"source/img/mypost/robot_pic.jpg","hash":"1b9041383d0544114e86211c471a6e2203718581","modified":1611722789062},{"_id":"source/img/mypost/robot_shijian.jpg","hash":"b575aa87c0698c94680b4f6c868199cdbc004c09","modified":1611722789063},{"_id":"source/img/mypost/robot_shiwu.jpg","hash":"23051a2118730e3c5ccbee0354a68a0d2acae94e","modified":1611722789064},{"_id":"source/img/mypost/robot_shaixuanqi.jpg","hash":"278810f5f8e0c797940c7b251338f9707f911119","modified":1611722789063},{"_id":"source/img/mypost/robot_small.jpg","hash":"f0d20b09f74b8ff709d15e49806dd509845b87b4","modified":1611722789064},{"_id":"source/img/mypost/table_maker.jpg","hash":"66a4d6be2a06cbcca114933b2a0c31be9e052905","modified":1611722789065},{"_id":"source/img/mypost/tablemaker_kongzhu.jpg","hash":"409134c347ba869968bcca68672e381de5afd77e","modified":1611722789066},{"_id":"source/img/mypost/tablemaker_main.jpg","hash":"ab90ef048ba167f815f7554c738f1665f792062e","modified":1611722789067},{"_id":"source/img/mypost/tablemaker_lie.jpg","hash":"f4321bb6f2e2cd6a9187dc62441ed8a98f4d1eec","modified":1611722789067},{"_id":"source/img/mypost/web_robot_1201.jpg","hash":"b343d66c681c5f5176a73aad33704aaab0b7baed","modified":1611722789068},{"_id":"source/img/mypost/web_robot_add_dshb.jpg","hash":"c806ec64bc57a2bc1e6dce57255d4a785959379b","modified":1611722789069},{"_id":"source/img/mypost/web_robot_jiandankanban.jpg","hash":"accb530c0ff9b9f66cde8ae56f9248f2eccbb231","modified":1611722789076},{"_id":"source/img/mypost/web_robot_paiban.jpg","hash":"e6d88f8737dc956563f259f95e93fcf6b03d96ed","modified":1611722789081},{"_id":"source/money/analyse/tmp.py","hash":"3b316472b12fd955abb7061a0b7d0a580791325d","modified":1696921442199},{"_id":"source/money/analyse/index.html","hash":"97957059072dc9b74fe058fbda73541483c63c07","modified":1621046155539},{"_id":"source/money/analyse/tmp1.py","hash":"2e4b06d70e6f8671227eee4330e05ce061a5ce33","modified":1637590931617},{"_id":"source/money/funddata/000109.json","hash":"754b103d4d619e2f1c9b736ad34dc8542fe85c39","modified":1637590219338},{"_id":"source/money/funddata/000311.json","hash":"ad8326ef8907f9f5efe192e8f5add5ac44458a95","modified":1637590211819},{"_id":"source/money/funddata/000345.json","hash":"e1993c4f4967f3ac941dd03065ac86f4f7e90db5","modified":1637590222658},{"_id":"source/money/funddata/000961.json","hash":"15f24e7123013a4f61a9b1b6f1336fb05ac506f7","modified":1637590208174},{"_id":"source/money/funddata/000963.json","hash":"ce01673ecea58d75c7bcaddfc167ef42f93934ba","modified":1637590207631},{"_id":"source/money/funddata/001268.json","hash":"d5fb10f6c28f4700de4562052306017573573aed","modified":1637590222112},{"_id":"source/money/funddata/001302.json","hash":"19f27cb268deeb9ca48d5ca3e9a70bed0be09417","modified":1637590203205},{"_id":"source/money/funddata/001592.json","hash":"fd81fa887faf359476836d531b7935a88fdbb2db","modified":1637590199724},{"_id":"source/money/funddata/001548.json","hash":"aa1cf9ac0f59211c37418c999f38a8337ef135f9","modified":1637590198099},{"_id":"source/money/funddata/001593.json","hash":"280c540a4a93d704b7ffde360121f7f6154a3cd5","modified":1637590198649},{"_id":"source/money/funddata/003547.json","hash":"ed0b8d324c68a9e4ceee39677754c360c3db298a","modified":1637590200367},{"_id":"source/money/funddata/001617.json","hash":"ca3a7ab9f21cec5206b4effa638da55d89ef4926","modified":1637590204311},{"_id":"source/money/funddata/003298.json","hash":"662071c44afc4cc79c0284e9eaf9ffb143df6339","modified":1637590199190},{"_id":"source/money/funddata/005760.json","hash":"c0cbc04a89e85b703f346113586b4c0c49dc9d3b","modified":1637590206497},{"_id":"source/money/funddata/003634.json","hash":"9507abbe64f043a21d1b7f737dc397e3ee1a769e","modified":1637590221000},{"_id":"source/money/funddata/004343.json","hash":"c7139a2d5cdf9e03445ed11215d0e7ef525da3a5","modified":1637590203761},{"_id":"source/money/funddata/005761.json","hash":"9521e276dc73ca35a7165e06803cf3a8d15d4f65","modified":1637590218788},{"_id":"source/money/funddata/006269.json","hash":"7e09ffed0756bbf8ae8444bffeca32ffd6318b82","modified":1637590202066},{"_id":"source/money/funddata/006585.json","hash":"a6cc9f5e3cc0ad4487149b8de6517e157b985235","modified":1637590219885},{"_id":"source/money/funddata/100053.json","hash":"bc7cbdb3be5f5b9c38ab65d37e50548d724f5df5","modified":1637590202637},{"_id":"source/money/funddata/110022.json","hash":"ec58ffc537b8a89c4e97a5c6a9e663ac112e06e1","modified":1637590214898},{"_id":"source/money/funddata/160124.json","hash":"75677815f1dc1587d9cb9107d13d9dd0826fc205","modified":1637590212367},{"_id":"source/money/funddata/160222.json","hash":"ad25ee3007d8e5bf66e9f55ff2cc16604d396811","modified":1637590212925},{"_id":"source/money/funddata/160419.json","hash":"ab1a21f203a91eb5eb69e93f804ccfa32f2561c8","modified":1637590209837},{"_id":"source/money/funddata/160517.json","hash":"40c1b67f401d7d8d6a910da4fefd4e384aedfca9","modified":1637590217127},{"_id":"source/money/funddata/160629.json","hash":"2fe7b1fb13806d3f5141270f0c425ada59552922","modified":1637590197031},{"_id":"source/money/funddata/160626.json","hash":"d2ce55fa4c8ab9046e5b98631a6d8389badeb2ca","modified":1637590216577},{"_id":"source/money/funddata/161726.json","hash":"1a6ed482b73821e1d3272ec47f51da17e39132af","modified":1637590196488},{"_id":"source/money/funddata/165520.json","hash":"103fff5bafb9dcaab2186463ce662da61e071293","modified":1637590221563},{"_id":"source/money/funddata/161725.json","hash":"e58451e4d1edf920b5fb7d163d18169b8df9d4b7","modified":1637590205425},{"_id":"source/money/funddata/166801.json","hash":"3e62be5cb9fb943ef8027ab0776d073ad7f5b34e","modified":1637590216024},{"_id":"source/money/funddata/163402.json","hash":"5d44d5ff8bde2d159a3733ee29ab617e2eafa03a","modified":1637590200964},{"_id":"source/money/funddata/270002.json","hash":"dd7a48fae2774b5cdb3ae80e2280afac2ed4d1fb","modified":1637590213591},{"_id":"source/money/funddata/260108.json","hash":"2242e5f7587d8d9284ffc554c216fa389d7cdc0b","modified":1637590197565},{"_id":"source/money/funddata/217022.json","hash":"e3c8d6363b27c62da8f2a22300bc6628c293cd04","modified":1637590218241},{"_id":"source/money/funddata/163412.json","hash":"dc44654aa727698ca0fc7f34c220901703873aaf","modified":1637590204874},{"_id":"source/money/funddata/167301.json","hash":"a1a50ee45c3790a7ebac917b28cfa971e0d3d4b8","modified":1637590208718},{"_id":"source/money/funddata/320007.json","hash":"73e11d37431e0e301815f76689554132369b9830","modified":1637590220460},{"_id":"source/money/funddata/470007.json","hash":"05da213ac31b2f60cd767f99186b3887e472d4ff","modified":1637590210387},{"_id":"source/money/funddata/486001.json","hash":"91a29982583e891083fbccfacadf7b27aa9f1e80","modified":1637590209265},{"_id":"source/money/funddata/501030.json","hash":"b09c9da457784bf1cf5cd82fa64ccf671be52cc1","modified":1637590211067},{"_id":"source/money/funddata/501203.json","hash":"11e476a31118b766ce4d85c79dab9e14705b04a0","modified":1637590201498},{"_id":"source/money/funddata/501205.json","hash":"fee58f6168beb590044cbbe9e54291dd9c7ef97f","modified":1637590205956},{"_id":"source/money/funddata/519674.json","hash":"dfdc9ce83c0980c65f281d39fcc2610086671d7c","modified":1637590207064},{"_id":"source/money/strategy/strategy0.js","hash":"9dd8fffcb8f2132ed9a4ee2879fb20aabdc292fd","modified":1637736692033},{"_id":"source/money/strategy/index.html","hash":"eb511b7e6b8d3052fda9b3aea63bc8df1416b3a7","modified":1637665342629},{"_id":"source/money/strategy/strategy1.js","hash":"a19a4eb0c232f05aeefab21c679e380a1a748dc5","modified":1638794908341},{"_id":"source/money/strategy/strategy_template.js","hash":"9c8e711213ea31ba3c7fd0f383cda1fc21fca025","modified":1637651925537},{"_id":"themes/huweihuang/layout/_partial/background.ejs","hash":"d9c9769c720d0ac22a8b503eec07baace3e29a1a","modified":1611722789433},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"f9a682fc9cefba2b1481e49cf93a275b99b724f5","modified":1611722789434},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1611722789435},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"460729508dbf2f7a9ab101e7cb0a5541a3ec043a","modified":1614246658630},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1611722789435},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1611722789435},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"3563c67bb224d2ada027ed09b143ea5939ec4a7a","modified":1614925745181},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"ed46cf545425ccd721c8058b78b057165a0a53de","modified":1614912319459},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"9b97d469531ac3e8fc0b0c026185c6156b92800d","modified":1636448365987},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1611722789436},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"83aed780ade3612ea6996f21ea0407ce823c3d58","modified":1611722789436},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1611722789436},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1611722789437},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"bc75d3d31aff220c42483704fc223bb08edc6ebe","modified":1650952802564},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1611722789440},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"6b86d52f8448542cbcb2c118ec9084359f2f5ee8","modified":1611722789441},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"d6b6442f9ea4765c1d6caa208235f5d7bc742722","modified":1611722789441},{"_id":"themes/huweihuang/source/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1611722789443},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1611722789443},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1611722789446},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1611722789444},{"_id":"themes/huweihuang/source/css/search.styl","hash":"cbf7b273bc811110cb41bd7ffe639b3c7b7f37f5","modified":1614913410476},{"_id":"themes/huweihuang/source/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1636447959401},{"_id":"themes/huweihuang/source/css/meplayer.min.css","hash":"f78628af8c13d95cce9dec65dd92a01e56adbf3b","modified":1614260138884},{"_id":"themes/huweihuang/source/css/player.css","hash":"c76f67c349dc55f997fce892ad6778fa6ef2cec8","modified":1614337695393},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1611722789446},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1611722789446},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"631e97f634d30f53314e2fec8bdde267c1c49f4c","modified":1611722789446},{"_id":"themes/huweihuang/source/fonts/fontello.eot","hash":"2255b47d54d38128105b05e694dafff7701e3f68","modified":1614255363100},{"_id":"themes/huweihuang/source/fonts/fontello.svg","hash":"b7f458a84af7b234b6a38f3f1bb258f079d1f330","modified":1614255363119},{"_id":"themes/huweihuang/source/fonts/fontello.ttf","hash":"2f0ec712a4b69bbf3559279c3a59864dfb8b189e","modified":1614255363135},{"_id":"themes/huweihuang/source/fonts/fontello.woff","hash":"27fd16775dde59ccfbe7b1ce81261b1af30a6703","modified":1614255363158},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1611722789448},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1611722789447},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1611722789448},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1611722789448},{"_id":"themes/huweihuang/source/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1636448282624},{"_id":"themes/huweihuang/source/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1636448295481},{"_id":"themes/huweihuang/source/js/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1636471299307},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1611722789450},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1611722789450},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1611722789449},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1611722789452},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1611722789452},{"_id":"themes/huweihuang/source/js/player.js","hash":"388b0e0e7d71f02ee50aa2272011ceb48ca363d8","modified":1614264242154},{"_id":"themes/huweihuang/source/js/smoothscroll.js","hash":"f3f61028516fd9ec3fec3b2a284253e711bb360a","modified":1611722789453},{"_id":"themes/huweihuang/source/js/meplayer.min.js","hash":"71c2ead4061524e1c43b4a4924d59a52c44c4418","modified":1636470108577},{"_id":"themes/huweihuang/source/js/search.js","hash":"49828d58ef929f751dcf4da4cfce9172b0a4ae30","modified":1614911691330},{"_id":"themes/huweihuang/source/js/social-share.min.js","hash":"4798c0fe6c75506eebbbb3cab8cf01dcb7f59908","modified":1636448013203},{"_id":"themes/huweihuang/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1611722789453},{"_id":"themes/huweihuang/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1611722789453},{"_id":"themes/huweihuang/source/js/yhback.js","hash":"c81f6d02ed26b74791d7e1ab275529f68c694c14","modified":1611722789453},{"_id":"source/img/article_header/article_bg.jpg","hash":"177ae209960793d3f8c03e18d9dc2f5ebf667e7f","modified":1611722788811},{"_id":"source/img/article_header/header.jpg","hash":"d2b34e32677d2ec905d04b79fa3da1508dd4fb1a","modified":1611722788813},{"_id":"source/img/header_img/archive.jpg","hash":"29fc7c45ce03432fe2b5273c39a453330bdf0f46","modified":1611722788826},{"_id":"source/img/header_img/archives-widget.jpg","hash":"1b0610b976ba49a490f0edffabea9aaa92c77862","modified":1611722788827},{"_id":"source/img/header_img/home3.jpg","hash":"a51a039fef127e97898cdd7267c3ad65e7555b36","modified":1611722788832},{"_id":"source/img/header_img/tag.jpg","hash":"96d9c9e867eb839a4e8f36d33302a16cef098231","modified":1611722788832},{"_id":"source/img/mypost/juzhengfenkuai.jpg","hash":"f736caf9b44ba063d0b5722fd074fdee061c83f2","modified":1611722788900},{"_id":"source/img/mypost/article34_3.jpg","hash":"34b8887353021f3a51247264a8e7d6a3944e6de5","modified":1611722788898},{"_id":"source/img/mypost/pyhiveprogress.png","hash":"23195421b414161860ed88ebb7b58f08b8aea18d","modified":1611722788942},{"_id":"source/img/mypost/robot_event.jpg","hash":"79aa1d318a235193938905105454148780482c57","modified":1611722789048},{"_id":"source/img/mypost/tablemaker_jjjz.jpg","hash":"255c8699446ba39b2407c11ecb098730cdf77fbb","modified":1611722789066},{"_id":"source/img/mypost/tablemaker_weather.jpg","hash":"05e6e07ef7c85a2c60a600b0ef08e9657a694ef6","modified":1611722789068},{"_id":"source/img/mypost/web_robot_live2d.jpg","hash":"5d3a5e7f0112cbecd881d68e52e28fc042d8a910","modified":1611722789077},{"_id":"source/img/mypost/web_robot_new_tab.jpg","hash":"2616d2543603eaea8c3ca297507d298325498f9a","modified":1611722789080},{"_id":"source/money/funddata/000001.json","hash":"f44699e9bc5c35c449ef7598debc7aadfbe8a812","modified":1637590945364},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1611722789443},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1611722789447},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1611722789449},{"_id":"themes/huweihuang/source/img/wechatpay.png","hash":"092c5a7a0423f114da97f17527efc123a34580c2","modified":1616489322760},{"_id":"themes/huweihuang/source/img/alipay.jpg","hash":"941e568866e2fadda8718a1ee7f3a77ec15c95f8","modified":1616489322769},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1611722789452},{"_id":"source/img/header_img/home-bg-o.png","hash":"8933b721167234dccf32717ca010ccb893332e29","modified":1611722788828},{"_id":"source/img/header_img/about.jpg","hash":"c428ccfa09816d131e662ecfee38192dca8c7d25","modified":1611722788825},{"_id":"source/img/mypost/2021/1-11.jpg","hash":"89f34af07c869c8d734f035da380dc8ea01277f7","modified":1611722788882},{"_id":"source/img/mypost/2021/1-1.jpg","hash":"bf3d83a75b5876d0820f715f89b9f1ebfd2b306d","modified":1611722788880},{"_id":"source/img/mypost/2021/1-10.jpg","hash":"936b8257c8c9c9e4658fd831f3bd8c4ad724b50d","modified":1611722788881},{"_id":"source/img/mypost/2021/1-12.jpg","hash":"8679d552cb13762ff136bc210f5a124800a507ba","modified":1611722788884},{"_id":"source/img/mypost/2021/1-14.jpg","hash":"09163ac713347d04f08682e85867a567d2f1c58c","modified":1611722788885},{"_id":"source/img/mypost/2021/1-13.jpg","hash":"f9b8e8a3438e6eb7f20f35adaaa28b0141c14f01","modified":1611722788885},{"_id":"source/img/mypost/2021/1-15.jpg","hash":"067df8a133fd4da3830bb77083165daf9d82e979","modified":1611722788886},{"_id":"source/img/mypost/2021/1-17.jpg","hash":"d5f323a49c1100ff317d4d1397d0595bd00fba39","modified":1611722788887},{"_id":"source/img/mypost/2021/1-18.jpg","hash":"dcc911b3c799cdd6a5a0b8044a2b27e83723a9f3","modified":1611722788888},{"_id":"source/img/mypost/2021/1-2.jpg","hash":"0a512f4c27c72fb8e2346e5995abec7bb62ffc3c","modified":1611722788888},{"_id":"source/img/mypost/2021/1-3.jpg","hash":"6beaea2903fa561a23b2036a1856ccb685b5c94c","modified":1611722788888},{"_id":"source/img/mypost/2021/1-4.jpg","hash":"05eafd6a172c2a28fd1cf6fc96ffd95d7e90ca9b","modified":1611722788889},{"_id":"source/img/mypost/2021/1-5.jpg","hash":"d838134d2d7dc64a285cf152e811f8d76e384935","modified":1611722788890},{"_id":"source/img/mypost/2021/1-6.jpg","hash":"9392f2c4b53ed57725be08cc3ab1283b93dd7357","modified":1611722788890},{"_id":"source/img/mypost/2021/1-7.jpg","hash":"f2544973fafa32bfd4bece1ca037ce35352dc92e","modified":1611722788891},{"_id":"source/img/mypost/2021/1-9.jpg","hash":"67301b5078fc8394a8f53e84d012f46e97b230c3","modified":1611722788893},{"_id":"source/img/mypost/2021/1-8.jpg","hash":"52fa1bb8bd3a8dc9dca8f2eaf76fd47d1f56bddf","modified":1611722788892},{"_id":"source/img/mypost/2021/4-1.png","hash":"42eeeeb98225ef243165109beeff27b65717a00c","modified":1615451543759},{"_id":"source/img/mypost/2021/4-2.png","hash":"759ad95ede4199f8dc3c3abd1caf3ca80b11b0ea","modified":1615451543741},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1611722789089},{"_id":"source/img/mypost/mapreduce_show.jpg","hash":"6dde9fa0ad85a4adc2437e78c9083d77ef768765","modified":1611722788939},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1611722789445},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1611722789442},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1611722789445},{"_id":"source/img/header_img/home.jpg","hash":"f24c71b4ebc68f6b8220e9265696f700ffa158dc","modified":1611722788830},{"_id":"source/img/mypost/2021/1-16.jpg","hash":"6181617d4589fe0b915104e129f18a1e6a95a3b1","modified":1611722788887},{"_id":"source/img/mypost/2021/4-7.jpg","hash":"d757de1c4688de5850e32b6f974cbf3ebff7487a","modified":1615451561073},{"_id":"source/img/mypost/article34_2.jpg","hash":"77e4a7e9aae6afaa5a94ec2a5fce180e8d2aa241","modified":1611722788897},{"_id":"source/img/mypost/article34_1.jpg","hash":"028e9e117e80bb76b0d008654786be859ed21ce8","modified":1611722788895},{"_id":"source/img/mypost/web_robot_live2d1.jpg","hash":"d9bcb50fa383541fbf12059b4653e96b52984da0","modified":1611722789079},{"_id":"source/img/article_header/article_header.png","hash":"a72e7f680bb1b8c6effb439034b3908d111087f8","modified":1611722788812},{"_id":"source/about/甘家城后端开发简历.pdf","hash":"812a8c209e9d64a3c0e29fa49e35ce79dfb5782e","modified":1611722788803},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1611722789087},{"_id":"source/img/uploads/2017/05/IMG_3199-150x150.jpg","hash":"76ea8951f266f5cdf352bd27f69bb23d77515398","modified":1611722789185},{"_id":"source/img/uploads/2017/05/IMG_3199-100x100.jpg","hash":"3d64986abb68fdf3f7c795c8f9bc4729b64bce32","modified":1611722789185},{"_id":"source/img/uploads/2017/05/IMG_3199-225x300.jpg","hash":"bdeb6529afede7636c5ca6021c229778e292fade","modified":1611722789187},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-100x100.jpg","hash":"3bf0c2892497c48adf680f5056b42c20dc4beef3","modified":1611722789188},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-150x150.jpg","hash":"447fb77838a5c02f160d3ae3d1c397fd612e412e","modified":1611722789189},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg","hash":"1b06158dba88847dc579351fad892f1cb968bae1","modified":1611722789190},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-100x100.jpg","hash":"3bb9685801f3259d33657b71bc48804dc89aab24","modified":1611722789196},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg","hash":"6fe28b3f0dbfb8a45250c5a8c35d8441f71f7b84","modified":1611722789197},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825-150x150.jpg","hash":"1defe89b048dcfbf44e6e33195ca7bc2b17cae20","modified":1611722789197},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-100x100.jpg","hash":"278953eea9d088a47a2fba6a0d6b1cc21f326c27","modified":1611722789198},{"_id":"source/img/uploads/2017/05/QQ截图20170530130825.jpg","hash":"5e88aa0b158d1eccf3488ae31b0a66ae03df408b","modified":1611722789198},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-150x150.jpg","hash":"8349d6b9af7fcb202708565948f234cfed5e79b8","modified":1611722789198},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg","hash":"8e414df0c0e2535c283cc1159fd197ffa21b9351","modified":1611722789198},{"_id":"source/img/uploads/2017/05/figure_1-2-1-150x150.png","hash":"63a641c8f5aa6bf0f26a524fe77d4486a94e967b","modified":1611722789199},{"_id":"source/img/uploads/2017/05/figure_1-2-1-100x100.png","hash":"68a2808854053f2a26dea4a4522bc56816045d34","modified":1611722789199},{"_id":"source/img/uploads/2017/05/figure_1-2-100x100.png","hash":"90b11f00cfc8d2700baed2c90a60b12ec1b9c129","modified":1611722789202},{"_id":"source/img/uploads/2017/05/figure_1-2-150x150.png","hash":"cc7e135b372a23ce5824feeb572bb678da55641e","modified":1611722789203},{"_id":"source/img/uploads/2017/05/figure_1-2-300x225.png","hash":"56cd69837dfb91d8f4f66c002fed664e736d3b4d","modified":1611722789204},{"_id":"source/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png","hash":"7912b7cd6773afc23424cfedbb693c0284c8fbaf","modified":1611722789091},{"_id":"source/img/uploads/2017/03/2014091409260873-100x100.png","hash":"bea3d13da4a36cb90e9ad486004ce93b48044472","modified":1611722789091},{"_id":"source/img/uploads/2017/03/2014091409260873-150x150.png","hash":"b357c3d14375f59bf0fec8c8aee16b65c55b651f","modified":1611722789094},{"_id":"source/img/uploads/2017/03/8-100x100.jpg","hash":"59c8dd4f1b77e1f0c4142cce27c5fdbb3438ac18","modified":1611722789096},{"_id":"source/img/uploads/2017/03/8-150x100.jpg","hash":"6f0120516ad7906bfa819a8a21cfbb4114e45287","modified":1611722789096},{"_id":"source/img/uploads/2017/03/8-300x65.jpg","hash":"67ca7aca2047862676e8bc9832cfa700a77d435f","modified":1611722789096},{"_id":"source/img/uploads/2017/03/8.jpg","hash":"a4ac54ae398cf5c5969506323b1c7b3ec77a9c35","modified":1611722789097},{"_id":"source/img/uploads/2017/03/IMG_3031-100x100.jpg","hash":"568e9f8686579311dd63dac9ec08f69d9a08ec83","modified":1611722789097},{"_id":"source/img/uploads/2017/03/IMG_3031-150x150.jpg","hash":"917f2d2feca7a9ccbd0391e906a6db45021639a6","modified":1611722789097},{"_id":"source/img/uploads/2017/03/IMG_3031-225x300.jpg","hash":"778a2c70210390f5ceaa3c60684ceaf454a86c4e","modified":1611722789099},{"_id":"source/img/uploads/2017/03/IMG_3063-100x100.jpg","hash":"b1f9c3b86575834ef511d2c2caa99c26ec95bddc","modified":1611722789105},{"_id":"source/img/uploads/2017/03/IMG_3063-150x150.jpg","hash":"7faf3593043a67028669b2907625c6838b029d78","modified":1611722789111},{"_id":"source/img/uploads/2017/03/IMG_3063-768x576.jpg","hash":"9aa06358f9cd9fa463e8e699cbb1a4318ae8cc1f","modified":1611722789113},{"_id":"source/img/uploads/2017/03/IMG_3063-300x225.jpg","hash":"d5525cdf41d3c9f7ccf19c041aa861aafab439cd","modified":1611722789113},{"_id":"source/img/uploads/2017/03/IMG_3068-150x150.jpg","hash":"2821c0a246c1e2d34887c2df091e85d241b7c0f3","modified":1611722789121},{"_id":"source/img/uploads/2017/03/IMG_3068-100x100.jpg","hash":"095beeb7f70fbdac6380e3aad0bf0231fd6c090a","modified":1611722789120},{"_id":"source/img/uploads/2017/03/IMG_3068-300x225.jpg","hash":"a57ada6899f9a239cef942b175d6876a479d4f7e","modified":1611722789123},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-150x150.jpg","hash":"31a1786045a46774b899ecd0fad4fc3f3ad83829","modified":1611722789129},{"_id":"source/img/uploads/2017/03/IMG_3068-768x576.jpg","hash":"bcdf8c8174e84ad74622f0f34ea258d65dba1aac","modified":1611722789124},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-100x100.jpg","hash":"346928ec58dd2e4ca897dbb048ec6ecc7d6184fb","modified":1611722789128},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg","hash":"de66e35f0fd32eea682b29a9987e450268748ead","modified":1611722789129},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-100x100.jpg","hash":"2f3c467b54243a48209629bad65c97c1f9d8cfc8","modified":1611722789130},{"_id":"source/img/uploads/2017/03/QQ截图20170307175022.jpg","hash":"1e6bc86d614264893a9d17ed778640d23e9acf25","modified":1611722789130},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-150x150.jpg","hash":"635c3cd71969fdc636a11b941b61f794d94e54e0","modified":1611722789131},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg","hash":"eb03c5934c8ac98385ad597a0c35ee9aff6f3365","modified":1611722789131},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-100x100.jpg","hash":"8b0346d3a28e37e93898662ba78514a543e3d26b","modified":1611722789132},{"_id":"source/img/uploads/2017/03/QQ截图20170316004119.jpg","hash":"832c404ec67ed49ccc57d3ee88eb33a4e3139b81","modified":1611722789131},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840-100x100.jpg","hash":"85ad96e59b533852919b84391a2f34df679c92b3","modified":1611722789133},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-150x150.jpg","hash":"7b4cca06fee81312ae8032ffb9ceb9b101684c70","modified":1611722789132},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731.jpg","hash":"c9a8835435132c150b3fbb5253f1090a7895c711","modified":1611722789132},{"_id":"source/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg","hash":"d5ee268783edd93c51d7586910d460d204700df7","modified":1611722789132},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840-150x150.jpg","hash":"56e5d7bdd8abfdbada219fa52cd945288d174b5f","modified":1611722789133},{"_id":"source/img/uploads/2017/03/QQ截图20170326144840.jpg","hash":"a1d27a4e34a9ae299e136cc81fea5fa2cc779153","modified":1611722789133},{"_id":"source/img/uploads/2017/07/00126-1.png","hash":"86834b844a2d1d08d11a9275e5050d29d4d6d35b","modified":1611722789206},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-100x100.png","hash":"ad139402b0bd659c101c857cf66eb5b4b90c6e24","modified":1611722789207},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-150x150.png","hash":"b52abca70fed6d379f1a17f94e87d430fe906ff6","modified":1611722789208},{"_id":"source/img/uploads/2017/07/IMG_3419-100x100.png","hash":"daaf68873be81fbae74c83445f0c2748527b0879","modified":1611722789213},{"_id":"source/img/uploads/2017/07/IMG_3419-150x150.png","hash":"7905c0e56f652300c20801b9034720f79cd60e45","modified":1611722789214},{"_id":"source/img/uploads/2017/07/IMG_3419-169x300.png","hash":"86e70713b32d2fbae06e181257d2fc85a3255f92","modified":1611722789214},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-100x100.jpg","hash":"0c70afc0bae764de9b2e898f390e3edade177aac","modified":1611722789216},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-150x112.jpg","hash":"6a32fbb7c8947fdc79910f97fb1fee16db57ced3","modified":1611722789216},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg","hash":"2e6b6bbfa8db316e1e79e6ec2aad95754f4f6c3b","modified":1611722789217},{"_id":"source/img/uploads/2017/07/QQ截图20170714114735.jpg","hash":"8038a897294c447ccada3f1721844f66795a543d","modified":1611722789217},{"_id":"source/img/uploads/2017/07/xxn-100x100.png","hash":"45c9ae834d93b8fa4d540bbd883e52451f48a7b2","modified":1611722789286},{"_id":"source/img/uploads/2017/10/IMG_3516-100x100.jpg","hash":"33d4eaf3a23cc615e35d1fb9da31ca185a4a6a33","modified":1611722789309},{"_id":"source/img/uploads/2017/10/IMG_3516-150x150.jpg","hash":"9bb2b84895a5a08ef1f2ab4038f725c8afc1dd35","modified":1611722789309},{"_id":"source/img/uploads/2017/10/IMG_3516-225x300.jpg","hash":"efa26f5e1d88cdb18c3279e1e58a14ac181ef23f","modified":1611722789311},{"_id":"source/img/uploads/2017/10/IMG_3517-100x100.jpg","hash":"b2eeba9b6539c8bc283c47428c7d2175fdc9fd2c","modified":1611722789315},{"_id":"source/img/uploads/2017/10/IMG_3517-150x150.jpg","hash":"07f6c1f377945e66a4ee5a64b83fd47ad494635d","modified":1611722789316},{"_id":"source/img/uploads/2017/10/IMG_3517-225x300.jpg","hash":"190c2596aa5c9f1f961dbe864418cd25eeb1a632","modified":1611722789318},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340-100x100.png","hash":"231656bb34c7b5c84209f58c396db13a83eeef0d","modified":1611722789325},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340-132x150.png","hash":"f852f02529e6cce6c8765cf4772f259362310537","modified":1611722789326},{"_id":"source/img/uploads/2018/01/微信图片_20180126111340.png","hash":"12da3726609d616cf9d53ed40e0abf4b54b26b85","modified":1611722789326},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-300x118.png","hash":"8b1dbae661e2ee4132dde518bf26b692133f22d0","modified":1611722789327},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-100x100.png","hash":"f005ce8960bdcea4b4f6a16808170fcf16a69f4d","modified":1611722789326},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-150x150.png","hash":"f60c59ff30e17ae1cae003f33a8afc2e15508ecf","modified":1611722789326},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240.png","hash":"3e0dc705bd3a62fee5a900150263921f5c007b1f","modified":1611722789328},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-100x100.png","hash":"d2abfdaff5e2fd12aef345c3c437799f7445ab50","modified":1611722789321},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-150x150.png","hash":"9ffb3889cc1cd82eab0899ede1b9cca528632133","modified":1611722789322},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE.png","hash":"1b0319b2fc95af296b8b7490767efb0297f46aa9","modified":1611722789323},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-100x100.jpg","hash":"57e8138432b2c5eafb4401bc0f7d3f3f63179f0f","modified":1611722789133},{"_id":"source/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png","hash":"749a99f78b4eb068871cba7c9ced50cb8fd65b90","modified":1611722789323},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-100x100.jpg","hash":"9457e4a5387230f703a8e7a7e9cd55fd30ef3ef4","modified":1611722789135},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-150x150.jpg","hash":"5c9192e972aacaa2ae49ce3beb8105a0b2d67bef","modified":1611722789134},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-300x225.jpg","hash":"a43208fdfbf3fefc8cc28d3851cb39104e62eff4","modified":1611722789135},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-150x150.jpg","hash":"eba0fb1a91f457af8640c4b1c29a7445255c79d2","modified":1611722789136},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-768x576.jpg","hash":"1e013db0ba46e8ca388420c7bd22614f48c43734","modified":1611722789135},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg","hash":"8748cbea09a14200bcad089972cea9cde0613290","modified":1611722789136},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-100x100.jpg","hash":"735d818f1e9c35d7c0adb356dde8ee1fb818f293","modified":1611722789139},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-150x150.jpg","hash":"abb9105851ea2176e9dc71fa925c9f0ae7f99af6","modified":1611722789140},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-300x225.jpg","hash":"9d918e4a96ecfaf27ffe617a63863a9c7dedb079","modified":1611722789140},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-768x576.jpg","hash":"c28db4580a07728ca99b862f6f8d360edbd53559","modified":1611722789141},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-100x100.jpg","hash":"3f9d9342bedc6c2cd067a9e5f8d02cfa504b2f2c","modified":1611722789141},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-150x150.jpg","hash":"b8cca4c751bc2594120d8437d3ebc617a44dbde0","modified":1611722789141},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg","hash":"28930fb5b090c68c204dd509a407c88ff96a41bd","modified":1611722789142},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-100x100.jpg","hash":"e8d13aec4bd0e1b0e2764fd100821b7389f9fed4","modified":1611722789145},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg","hash":"fc9a931eab5d33b503b53dca71de8946612f488d","modified":1611722789145},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928-199x300.jpg","hash":"3ef117c7e8167d72554744eb8ba892774fa5e2cc","modified":1611722789146},{"_id":"source/img/uploads/2017/04/QQ截图20170407112928.jpg","hash":"b5b4a9f7a11fff06a09d1cc3af8c41d748568d27","modified":1611722789146},{"_id":"source/img/uploads/2017/04/figure_1-2-100x100.png","hash":"4cbd43cc2a730ddaf8d3ab4940fea87cf00fbde2","modified":1611722789146},{"_id":"source/img/uploads/2017/04/figure_1-2-150x150.png","hash":"08a6cf352158dbb50cfffac65bd49e13651d3c89","modified":1611722789147},{"_id":"source/img/uploads/2017/04/figure_1-2-300x225.png","hash":"351a03ea970b9a9e0e87f48aac028fa6483c4647","modified":1611722789147},{"_id":"source/img/uploads/2017/04/figure_1-2.png","hash":"dac3ec345b178a8ac29d63bb0e51c3b47d803d3f","modified":1611722789150},{"_id":"source/img/uploads/2017/04/figure_1-3-1-100x100.png","hash":"a240b4e8aa84c20f3e80074da7b869d8bbc732a0","modified":1611722789150},{"_id":"source/img/uploads/2017/04/figure_1-3-1-150x150.png","hash":"f51b47db118388a8809b38e8251da78a0617ce6c","modified":1611722789150},{"_id":"source/img/uploads/2017/04/figure_1-3-1-300x225.png","hash":"9824ef951c0af89b7f30c35e82943bb56ab24511","modified":1611722789150},{"_id":"source/img/uploads/2017/04/figure_1-3-1.png","hash":"48ff8f309daa6d3f65dc1ccf5c8d0b3c0fda1246","modified":1611722789152},{"_id":"source/img/uploads/2017/04/figure_1-3-100x100.png","hash":"760d37f8e0a1f75448debb66454149a2f470ec58","modified":1611722789152},{"_id":"source/img/uploads/2017/04/figure_1-3-150x150.png","hash":"bf2dbbf756e6468701f4e528b8b7494ed3989cac","modified":1611722789152},{"_id":"source/img/uploads/2017/04/figure_1-3-300x225.png","hash":"0fbd603f2a25ceb7dd634ba92ce9c9e9665b0238","modified":1611722789152},{"_id":"source/img/uploads/2017/04/image-1-100x100.jpg","hash":"c9d7774ad2b1e65dd3e3988c3fb5122f13390558","modified":1611722789154},{"_id":"source/img/uploads/2017/04/figure_1-3.png","hash":"f5807d9afa7a4f901a18562ad966917ec848123b","modified":1611722789154},{"_id":"source/img/uploads/2017/04/image-1-150x150.jpg","hash":"a5b510d952d530db052ae3d3ec5cedeb9821436a","modified":1611722789155},{"_id":"source/img/uploads/2017/04/image-1-300x225.jpg","hash":"dd275bea6cdd845fd9020d1d67909ff8ce8579c8","modified":1611722789156},{"_id":"source/img/uploads/2017/04/image-100x100.jpg","hash":"3347ee583c13777ce21c42080f0767b5bb97d46b","modified":1611722789164},{"_id":"source/img/uploads/2017/04/image-1-768x576.jpg","hash":"eec1b3d25193b2b2cc33cf5b743a6f70f3298c07","modified":1611722789157},{"_id":"source/img/uploads/2017/04/image-1024x768.jpg","hash":"c0cfb3b5449ee364f592c9086069ad19857f53e4","modified":1611722789164},{"_id":"source/img/uploads/2017/04/image-150x150.jpg","hash":"61fc4575157087152895e4dd4d74283e3f6f8a4e","modified":1611722789165},{"_id":"source/img/uploads/2017/04/image-2-100x100.jpg","hash":"eb47f9ebbe08b13d76f26d3a25b86d00caac3df0","modified":1611722789165},{"_id":"source/img/uploads/2017/04/image-2-300x225.jpg","hash":"cc1632690b13b0007b367cd4a272fb7cba6566eb","modified":1611722789168},{"_id":"source/img/uploads/2017/04/image-2-150x150.jpg","hash":"a87277c3a20c4b7372a6e446b75d6ab929b10c08","modified":1611722789166},{"_id":"source/img/uploads/2017/04/image-2-768x576.jpg","hash":"1dd85c4b742597b7a51d5c898666d1cad85e1ac3","modified":1611722789168},{"_id":"source/img/uploads/2017/04/image-300x225.jpg","hash":"f0e6f264ed9ead7febc93849ac53047c68a59325","modified":1611722789177},{"_id":"source/img/uploads/2017/04/image-768x576.jpg","hash":"a0cf5d4c6a4eed724552a3152d67c6f50fcda32c","modified":1611722789177},{"_id":"source/img/uploads/2018/04/test-100x100.png","hash":"199d779061901c4790a3d0d0cb5f5d041ca21d3e","modified":1611722789329},{"_id":"source/img/uploads/2018/04/test-150x150.png","hash":"3c0058891eb7157327ce9f1af0cc397a2e8fa7f2","modified":1611722789329},{"_id":"source/img/uploads/2018/04/test-300x225.png","hash":"4e2dd6a3f5aa960f42a0485c3d1659c08948717b","modified":1611722789330},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-100x100.png","hash":"1960e777688ad35935c0c9137acb874627ffa665","modified":1611722789330},{"_id":"source/img/uploads/2018/04/test.png","hash":"b5e9b02cc19b8751f367532233a56559b4bbc58b","modified":1611722789330},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-1080x1200.png","hash":"da4aaccc27a0ca740d184b2dd4d6c415159cabfd","modified":1611722789330},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-150x150.png","hash":"84eee0b5e40e76b9a9328fd229e049f9dffbfe92","modified":1611722789331},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-150x300.png","hash":"35b200077e1717caef5ae5813c38ae31f1bd612b","modified":1611722789331},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-512x1024.png","hash":"5064bfacec92585266687f4d042246d337f50fca","modified":1611722789331},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608-768x1536.png","hash":"b2f6d16c95e90a18eb8764a84eaaa0f0208348d2","modified":1611722789332},{"_id":"source/img/uploads/2018/05/IMG20180512230730-100x100.jpg","hash":"934b073cab000711133645d5b3fc1d14b67c9d92","modified":1611722789332},{"_id":"source/img/uploads/2018/04/微信图片_20180406103608.png","hash":"cb8d70c176c31dea4aec27aa7192bd19c0cec6c6","modified":1611722789332},{"_id":"source/img/uploads/2018/05/IMG20180512230730-150x150.jpg","hash":"4bef62bff9a41b10db47e477d3062d15bc6adbf5","modified":1611722789333},{"_id":"source/img/uploads/2018/05/IMG20180512230730-225x300.jpg","hash":"a0db46894de5374a39c59cb566d9163dde2191b2","modified":1611722789334},{"_id":"source/img/uploads/2018/05/IMG20180512230754-100x100.jpg","hash":"a7243a670b180e7b16c7846549175bbffcfdc3ff","modified":1611722789347},{"_id":"source/img/uploads/2018/05/IMG20180512230754-150x150.jpg","hash":"3e8c521def6c10646f6b0b3b6dcfe897dd0ce3e6","modified":1611722789347},{"_id":"source/img/uploads/2018/05/IMG20180512230754-225x300.jpg","hash":"d188df6ffefd0a75dccaecd91ed87c90d161aedd","modified":1611722789351},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-100x100.png","hash":"ab7b20a5496a07c0db04c2209522fde51bd94f35","modified":1611722789367},{"_id":"source/img/uploads/2018/05/初赛.xlsx","hash":"faf5b43ca4b1ba49135555d0312c9ae698a36657","modified":1611722789366},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-150x150.png","hash":"2c6d30a05a929a0c1f18fc05cf8a00fd3ace6672","modified":1611722789367},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-768x432.png","hash":"2798cd8cc98157894efb803082bb13cc9a1c66dd","modified":1611722789368},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250-300x169.png","hash":"ad1ec6cc1f0e0a17f6400b79ffcea2d293697495","modified":1611722789368},{"_id":"source/img/uploads/2018/06/微信图片_20180606185250.png","hash":"83d28679f26b3bc20827687957c42c353e1141b0","modified":1611722789369},{"_id":"source/img/mypost/2021/4-8.jpg","hash":"1a1175979150c757a531c03f8e8d90aa3230b276","modified":1615451561041},{"_id":"source/img/mypost/operator.png","hash":"8b0b073530aea3bd2ae6297b46e7491065cbe498","modified":1611722788940},{"_id":"source/img/mypost/web_robot_xuanzeqi.jpg","hash":"5936e878ceb5ca92fcdcba802b281746a5972f98","modified":1611722789085},{"_id":"source/about/甘家城-后端开发-简历精简.pdf","hash":"d3bca8b33b132e24043a2435df300c941259e2c1","modified":1611722788797},{"_id":"source/about/甘家城-后端开发-简历.pdf","hash":"7e4846981b158752681fa3bfe68c759986aefcea","modified":1611722788796},{"_id":"source/about/甘家城全栈开发简历.pdf","hash":"e6d920faacd0a8efa3e1269185e5275d832ca774","modified":1611722788801},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1611722789451},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1611722788815},{"_id":"source/about/resume.pdf","hash":"505ad7ba70e13188094ce63227c47ec14b7e5f2b","modified":1611722788792},{"_id":"source/img/header_img/home2.png","hash":"62c256d6bc08485ce849d5ed1c25399681a479f5","modified":1611722788831},{"_id":"source/img/uploads/2017/05/IMG_3199-768x1024.jpg","hash":"81cf2583e50b34ccab85e6cb74038d016dc1166d","modified":1611722789188},{"_id":"source/img/uploads/2017/05/QQ截图20170530130839.jpg","hash":"73b6666dabbbc0edbc2ac2480fc452f7295cf8bb","modified":1611722789199},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-768x664.jpg","hash":"6f0d7f7a926a043ad68ea3296106de4fc1cd8436","modified":1611722789191},{"_id":"source/img/uploads/2017/05/figure_1-2-1-300x225.png","hash":"a1d3966635daf8c2335dbf02c38b8b34dd6dcb27","modified":1611722789200},{"_id":"source/img/uploads/2017/05/figure_1-2.png","hash":"7d51dc69a0426782b4b905b45cbb7f1477363c34","modified":1611722789205},{"_id":"source/img/uploads/2017/05/figure_1-2-768x576.png","hash":"266eca937c3fab12a1a90d836b76e910c49b2e67","modified":1611722789204},{"_id":"source/img/uploads/2017/03/2014091409260873-300x159.png","hash":"d6dce5b166a0fde0a9876a6fe17879ebe102997b","modified":1611722789094},{"_id":"source/img/uploads/2017/03/2014091409260873.png","hash":"4446b7a6e19c669a78783a35582725b5adc204c2","modified":1611722789095},{"_id":"source/img/uploads/2017/03/IMG_3063-1024x768.jpg","hash":"e6013f181f7d0462e52c5d26f7b1b81861a73b17","modified":1611722789111},{"_id":"source/img/uploads/2017/03/IMG_3068-1024x768.jpg","hash":"4696400fc1fd7c182610dc9ad90b44d369c5d66b","modified":1611722789121},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png","hash":"539925ed27ae8076919158c1255b7a96d9b593ad","modified":1611722789208},{"_id":"source/img/uploads/2017/07/IMG_3419.png","hash":"1183de0e68cc66e9a021472068ef7fb1d227ebd2","modified":1611722789216},{"_id":"source/img/uploads/2017/07/xxn-150x150.png","hash":"ee56813311fd54a2bb60e3742faa2132ee0ca145","modified":1611722789288},{"_id":"source/img/uploads/2017/10/IMG_3516-768x1024.jpg","hash":"b70fe14e1661ee481d9d7822796cbfeadaeb4468","modified":1611722789312},{"_id":"source/img/uploads/2017/07/xxn-300x150.png","hash":"dab2614a57d6c68f2c80cf94b4df9d8617889382","modified":1611722789293},{"_id":"source/img/uploads/2017/10/IMG_3517-768x1024.jpg","hash":"944dec5bf0b6bff7b619aa052c7e2a0567a8163a","modified":1611722789318},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-1024x768.jpg","hash":"9fd71ae68f569c690769190d4247c4a7dfa9a581","modified":1611722789134},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-768x1024.jpg","hash":"0e9b9d2c4e9ba1437d54443fc5138d6d89b196e6","modified":1611722789136},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg","hash":"6093c655624746ed62a342dae108db9ad779ffff","modified":1611722789137},{"_id":"source/img/uploads/2017/04/QQ图片20170430130303.jpg","hash":"969ac31d3d21973b131901bb19367945d5cd48a8","modified":1611722789138},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-1024x768.jpg","hash":"e366d7c84d7f037ff2135b9cf10b1f0e153af57b","modified":1611722789140},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-768x1024.jpg","hash":"393371579f714a47c2eb54ce2e15b0c74bff0871","modified":1611722789143},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521.jpg","hash":"ef6231dc521ea9578260ba59861d4825ccfb767b","modified":1611722789145},{"_id":"source/img/uploads/2017/04/figure_1-3-1-768x576.png","hash":"625c2bb96d5b1a7b10060df7e9933e8c3f392ea0","modified":1611722789151},{"_id":"source/img/uploads/2017/04/figure_1-3-768x576.png","hash":"2409b5a51abc089d5ed0cf64ce22d49ca68939dd","modified":1611722789153},{"_id":"source/img/uploads/2017/04/image-1-1024x768.jpg","hash":"06c822d2ba0def8790be1c29e1a6a807897a8ae2","modified":1611722789154},{"_id":"source/img/uploads/2017/04/image-2-1024x768.jpg","hash":"f1016097712c9ac290d919c8091852cbadb7a255","modified":1611722789166},{"_id":"source/img/uploads/2018/05/IMG20180512230730-768x1024.jpg","hash":"c56fd3797c8e21181e064ac5b36208d21e7959ba","modified":1611722789335},{"_id":"source/img/uploads/2018/05/IMG20180512230754-768x1024.jpg","hash":"f3f911ca582546c9fb48eef7d83ef7ed5e09e00c","modified":1611722789352},{"_id":"source/img/mypost/2021/4-3.png","hash":"991cb8f29504460981008b9ddf302febe1a3369f","modified":1615451543718},{"_id":"source/img/mypost/web_robot_xuanze.jpg","hash":"4cc0e4559a4bab75384374ef2b7f62ce98759b4f","modified":1611722789083},{"_id":"source/money/funddata/000001all.json","hash":"66f6d968e763db52643d764000cc3ff7ae0c3161","modified":1637590945552},{"_id":"source/about/2021.pdf","hash":"15fe3b5743010c5e7dbedebf9b3584e5d85eac10","modified":1611722788788},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-1024x885.jpg","hash":"5d604367815b674ae2aca8554a245ef1df90f327","modified":1611722789188},{"_id":"source/img/uploads/2017/03/IMG_3031-768x1024.jpg","hash":"b67bb485b565fb2d097e86b28351c5af3721ae13","modified":1611722789100},{"_id":"source/img/uploads/2017/10/IMG_3516-2000x1200.jpg","hash":"9a898a4f790408a9c194313f4ba6d450d22fe440","modified":1611722789311},{"_id":"source/img/uploads/2017/04/QQ图片20170430132521-e1493529949189.jpg","hash":"ab0eeb5a79da452d507b74ea5cadaaeff2e26eec","modified":1611722789144},{"_id":"source/img/uploads/2017/04/image-2-2000x1200.jpg","hash":"26510ca30b63d8c9db9cf26aa70f716cb0ecd12b","modified":1611722789167},{"_id":"source/img/uploads/2017/05/figure_1-2-1.png","hash":"d6411f8ee893b5b9fa72c356f47e4a91c8cdfa91","modified":1611722789202},{"_id":"source/img/uploads/2017/03/2014091409260873-768x406.png","hash":"adb5d3d0bdebf6a70a566adb5ee842fea42527ff","modified":1611722789095},{"_id":"source/img/uploads/2017/10/IMG_3517-2000x1200.jpg","hash":"8278d994e10bec7aba804171ce14528efcc4f27b","modified":1611722789317},{"_id":"source/img/uploads/2018/01/微信图片_20180131184240-768x302.png","hash":"7ba07132b3038d61df5ba5e0468666a1dc1598af","modified":1611722789328},{"_id":"source/img/uploads/2017/04/figure_1-2-768x576.png","hash":"dfcb0d55255e3765239b1b169fe6d0a7b8dcf642","modified":1611722789149},{"_id":"source/img/uploads/2017/04/image-1-2000x1200.jpg","hash":"5a3d161b30b9e6672ea4f9af857548c4ab237502","modified":1611722789156},{"_id":"source/img/uploads/2017/04/image-2000x1200.jpg","hash":"ad6ee40530202cf14f84ff80355f67fd5cdafd0e","modified":1611722789176},{"_id":"source/img/mypost/2021/4-5.png","hash":"563b23c0494b4cdeff5ff3fc861b47578b188b84","modified":1615451543678},{"_id":"source/img/mypost/pynput.png","hash":"2396def9b254d14bf21d04f7e7ed5ea935d69f67","modified":1611722788944},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520-1991x1200.jpg","hash":"8a6f76af7ab9cc63cec575df8a911159cf3911ee","modified":1611722789190},{"_id":"source/img/uploads/2017/05/IMG_3199-2000x1200.jpg","hash":"da8cf80aa75f5c7d21c0f7223dbf64dff783fd5e","modified":1611722789187},{"_id":"source/img/uploads/2017/03/IMG_3031-2000x1200.jpg","hash":"01ce78bbaa056aef8ccc93847d2662ccd55471fc","modified":1611722789099},{"_id":"source/img/uploads/2017/03/2014091409260873-1024x542.png","hash":"f1494d6cff055cfe04abf73a7e7f18d06e67d898","modified":1611722789093},{"_id":"source/img/uploads/2017/03/IMG_3063-2000x1200.jpg","hash":"65be88d01a5055c0f9ccc7cd72a9e4adb9547a5f","modified":1611722789113},{"_id":"source/img/uploads/2017/03/IMG_3068-2000x1200.jpg","hash":"263e30028073d28ad8ddab5bed4130eddc4c6a2f","modified":1611722789123},{"_id":"source/img/uploads/2017/07/IMG_3419-577x1024.png","hash":"305f0bd1eecb31ec1f9c8bf62a3e472bcd8d875a","modified":1611722789216},{"_id":"source/img/uploads/2018/05/IMG20180512230730-2000x1200.jpg","hash":"c210d1539702761d9ad135037cd4639a0b2cce8c","modified":1611722789334},{"_id":"source/img/uploads/2018/05/IMG20180512230754-2000x1200.jpg","hash":"a22f6bbea80369e9eb5c3028b62160288434b854","modified":1611722789350},{"_id":"source/img/header_img/404.png","hash":"8625646f8d780eba8e58ea245347ee4309ef7b93","modified":1611722788823},{"_id":"source/img/uploads/2017/05/figure_1-2-1-768x576.png","hash":"497dca6e12d0441ba3707862a36b021c58766c52","modified":1611722789201},{"_id":"source/img/mypost/web_robot_baidutianqi.jpg","hash":"f80d293e934ee0e3e10c3c7094bc35677aafeec4","modified":1611722789072},{"_id":"source/money/alipay_record_20210203_1253_1.csv","hash":"e4c0b26dba9cbd7f2299ee789f2af52bcb2acce7","modified":1612349857555},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1611722788809},{"_id":"source/img/uploads/2017/05/IMG_3199-e1493609643520.jpg","hash":"a859da49b6f02e1c1a3d131915ff2830637b27c1","modified":1611722789193},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png","hash":"e47324a2a56584d96d2df2b5270c61ef777b0bf6","modified":1611722789213},{"_id":"source/img/mypost/robot_htmltag2.jpg","hash":"d9f55d13e5bc2dec8ba0718d9b1e8412bc69f5cf","modified":1611722789059},{"_id":"source/img/mypost/web_robot_dashboard.jpg","hash":"70e3b09395c78b7f664fbe822248fe44847956c2","modified":1611722789075},{"_id":"source/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-577x1024.png","hash":"0e643645c936ac3b80fb53df915c1be4f7f6463f","modified":1611722789211},{"_id":"source/money/analyse/000001s.json","hash":"9a15437a5b08443d69515caf8933e9b1fc106438","modified":1637590775866},{"_id":"source/img/mypost/2021/4-4.png","hash":"35d0506a8240fb406acf1beacf32ee255aab5fa9","modified":1615451543697},{"_id":"source/money/static/echarts.min.js","hash":"94746ed5e7316265032c0b7f2583bd0afc40838f","modified":1611722789392},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1611722788820},{"_id":"source/img/mypost/2021/4-6.png","hash":"5e431fb62968cc21f2f15a83afeda7b35983f2a4","modified":1615451543667},{"_id":"source/img/uploads/2017/07/xxn-768x384.png","hash":"b35572541c4a0d9596a247e21011a8e5b436b4e7","modified":1611722789294},{"_id":"source/img/uploads/2017/07/xxn-1024x512.png","hash":"0d12be97401b935e9ead37a5b9617a99322a5c4e","modified":1611722789287},{"_id":"source/img/uploads/2017/04/image.jpg","hash":"499e3444d7948e69c80fbcaf899e7806e6a045b4","modified":1611722789185},{"_id":"source/img/uploads/2017/04/image-1.jpg","hash":"920777994459561d79df2b9d30e8d85132ea6a83","modified":1611722789163},{"_id":"source/img/uploads/2017/04/image-2.jpg","hash":"fa91bd3162db20f7384c3dd08f5d1812a86aaffd","modified":1611722789175},{"_id":"source/music/bohushuo.mp3","hash":"1e861fc1ac72944390c26c97c3a68e24138da325","modified":1636734523719},{"_id":"source/img/uploads/2017/05/IMG_3199.jpg","hash":"fdc8ba69ff8e340050c6610b496489c9e9e0532e","modified":1611722789196},{"_id":"source/img/uploads/2017/03/IMG_3068.jpg","hash":"bbfe6540d62ad17022a02c3f7925f724e35d89e7","modified":1611722789128},{"_id":"source/img/uploads/2017/10/IMG_3516.jpg","hash":"cda8b29a5f02383e9ff203c9851928037446b97e","modified":1611722789314},{"_id":"source/img/uploads/2017/10/IMG_3517.jpg","hash":"936dba321f2825ebcd1d0cee12241c4dbd56f55f","modified":1611722789321},{"_id":"source/img/uploads/2017/03/IMG_3063.jpg","hash":"690c2ba7dcdfbd69b03eff2c6ba80fc0f8601449","modified":1611722789120},{"_id":"source/img/uploads/2017/03/IMG_3031.jpg","hash":"81800710abf8a8ac1fac0805aed31869141cbd87","modified":1611722789104},{"_id":"source/music/fallinflower.mp3","hash":"199c54c3315b5d8f684a2f9ad8f8798a7050e681","modified":1636510599881},{"_id":"source/img/mypost/robot_htmltag.jpg","hash":"9a1a5ff8df4664beefd7a5e9334500deb083c494","modified":1611722789056},{"_id":"source/music/红豆.mp3","hash":"44d32a9d0bec92418d7aada3fb658e29e048db11","modified":1614253289808},{"_id":"source/img/uploads/2017/07/xxn-2000x1200.png","hash":"535ddb0daebac52ee3aa5e30e08ca89951caaa46","modified":1611722789292},{"_id":"source/img/movie/qingshixiang.mp4","hash":"27f78402048d41e23577b91b90291eb312f57298","modified":1618830897911},{"_id":"source/img/movie/yedegangqinqu11.mp4","hash":"535b22a2dd6a648ebe3be42796412128927f279a","modified":1611722788879},{"_id":"source/img/mypost/robot_demo1.gif","hash":"7a84607b012f136864c5b4aa4dc6562f835fae4e","modified":1611722788977},{"_id":"source/img/uploads/2018/05/IMG20180512230754.jpg","hash":"f79507bcc8f840449a66e19a8fe1fad709611fdc","modified":1611722789366},{"_id":"source/img/uploads/2018/05/IMG20180512230730.jpg","hash":"aed83227f89a09e018ad9bf7e99c74090e1a1077","modified":1611722789346},{"_id":"source/img/mypost/robot_demo2.gif","hash":"dbca927fd5288ef433e3c369072883140a43c941","modified":1611722789008},{"_id":"source/img/mypost/robot_demo3.gif","hash":"2eac226eaed6ca4c944d8611d7350a8060582c78","modified":1611722789047},{"_id":"source/img/movie/liangzhu.mp4","hash":"fd6d778734c4706d721b190a256799e1486d8c0e","modified":1611722788858},{"_id":"source/img/mypost/keshihuaquanxuan.gif","hash":"edf002ba2b0bb03e3683cb174535a0800602822a","modified":1611722788937},{"_id":"source/img/uploads/2017/07/xxn.png","hash":"fc51ee029125aa61f96d7a67898bf813aec74259","modified":1611722789307},{"_id":"source/img/movie/riverflowsinyou.mp4","hash":"53089c137639d4721ffb20fe5ed0c54392edead6","modified":1615048541397},{"_id":"source/img/movie/qiudesinian.mp4","hash":"b9614cbd562aa5880539a7f7b7981a7d8fa51a48","modified":1628501984310},{"_id":"source/img/movie/mengzhongdehunli.mp4","hash":"b1bc3cfc985274a8ca4e78f459abc2ec85725edf","modified":1622994763302},{"_id":"source/img/movie/someonelikeyou.mp4","hash":"c1e16c8e7e387b11a8d7d8bbbff73f5031c7a2a0","modified":1624960414158},{"_id":"source/img/movie/summer.mp4","hash":"082741275caae919cbcab12480444c40857f9113","modified":1633500050338},{"_id":"source/piano/info.json","hash":"699520d1e200cc4c0f14367fd8444d09bb578ee3","modified":1611722789424},{"_id":"source/img/uploads/2017/07/poetry.txt","hash":"b701e135ef7da834883ed908e965b36732ddd262","modified":1611722789285},{"_id":"source/img/movie/haidi.mp4","hash":"fd0aec57a471c4e881bd4a4e09ed3aae56b69150","modified":1618312795838},{"_id":"source/img/movie/xinyang.mp4","hash":"78f7de5fba997839aac982430f52195612b00f66","modified":1628501752173},{"_id":"source/img/movie/yanhuolidechenai.mp4","hash":"b914efa152b880d1aaa67efedbcb208f828aa14f","modified":1622908062317},{"_id":"source/about/resume 2023.md","hash":"295fee6fc32b26bc419fc8dcf6785fc62ab21733","modified":1687671301734},{"_id":"source/about/resume 2023.pdf","hash":"7e7f4101b539bf538a54f603ac42d04487c84a4e","modified":1687671307448}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2021-01-27T04:46:28.735Z","updated":"2021-01-27T04:46:28.735Z","path":"404.html","title":"","comments":1,"_id":"cl2fsh6v5000007704d29y2y2","content":"","excerpt":"","more":""},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本科 / 杭州电子科技大学\n - 邮箱：935669873@qq.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期望职位：后端开发\n - Github：[https://github.com/webgjc](https://github.com/webgjc)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 主要后端开发语言为Java和Python，框架熟悉Springboot和Django;\n- 前端也有一些实践，写过react和antd的项目，日常用原生Js写一些项目;\n- 有过大数据开发的部分经验，主要为Hadoop和Hive。\n- 日常的运维也能自己完成，打包部署装机，Shell脚本等，对Linux也玩的还行;\n- 版本管理Git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在Leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (Java研发工程师) (2019-04 ~ 至今)\n\n  - ### 可视化BI系统\n\n    项目角色：构建人和后端开发负责人  \n    项目主要模块：图表，各种可视化分析模式，指标，元数据，查询引擎  \n    项目技术栈：Java/Springboot/Mybatis，Hive/Presto，Mysql/Redis  \n    项目内容：\n      - 数据实时接入（表，模型，视图）\n      - 数据分析（用户可以在系统中进行多种分析模式）\n      - 数据可视化（各种类型图表）\n      - 数据应用（数据导出，数据订阅，数据预警）\n\n    项目成果：\n      - 接入公司整个数据仓库的数据，为公司内部多条业务线完成报表需求。\n      - 为多个汽车厂商提供报表独立部署方案。\n\n  - ### 数据地图与数据建模\n\n    项目角色：构建人和后端开发负责人   \n    项目主要模块：元数据采集，元数据整合治理，模型构建管理，元数据应用，SQL解析  \n    项目技术栈：Java/Springboot/Mybatis, Hive/HiveHook, Mysql/Redis，Python/Celery  \n    项目内容：  \n      - 数据采集（metadata, 数据血缘，数据标签，数据任务，数据权限）\n      - 数据治理（整合数据权限，统计元数据，补充数据）\n      - 建模平台（管理建表，sql解析元数据，图形化构建数仓模型，模型输出）\n      - 数据地图平台（元数据搜索，元数据分类检索，元数据统计看板，元数据详情、变更、血缘等）\n\n    项目成果：\n      - 为数据治理提供可视化的元数据治理工具\n      - 为其他数据平台项目提供元数据支持\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品配置、编译、打包、部署等自动化运维平台\n\n    项目角色：主要后端开发  \n    项目主要模块：多环境管理，自动化打包部署，配置管理，多项目脚本兼容  \n    项目技术栈：Python/Django，Shell脚本，Ansible  \n    项目内容：  \n      - 多环境：内网使用虚拟机管理，同时对接线上环境\n      - 打包部署：使用ansible运行命令\n      - 配置管理：在部署前可进行参数配置\n      - 多项目管理：对接java/python/go项目分别维护脚本和依赖\n\n    项目成果：\n      - 提高内部效率，为开发/测试/实施提供平台化部署方案\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    项目角色：主要后端开发  \n    项目主要模块：量化策略实现，策略平台    \n    项目技术栈：Python/Flask    \n    项目内容：实现一些分析师提供的策略方案，平台可视化这些策略的使用与结果\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在大数据，后端开发等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","source":"about/2021.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本科 / 杭州电子科技大学\n - 邮箱：935669873@qq.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期望职位：后端开发\n - Github：[https://github.com/webgjc](https://github.com/webgjc)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 主要后端开发语言为Java和Python，框架熟悉Springboot和Django;\n- 前端也有一些实践，写过react和antd的项目，日常用原生Js写一些项目;\n- 有过大数据开发的部分经验，主要为Hadoop和Hive。\n- 日常的运维也能自己完成，打包部署装机，Shell脚本等，对Linux也玩的还行;\n- 版本管理Git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在Leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (Java研发工程师) (2019-04 ~ 至今)\n\n  - ### 可视化BI系统\n\n    项目角色：构建人和后端开发负责人  \n    项目主要模块：图表，各种可视化分析模式，指标，元数据，查询引擎  \n    项目技术栈：Java/Springboot/Mybatis，Hive/Presto，Mysql/Redis  \n    项目内容：\n      - 数据实时接入（表，模型，视图）\n      - 数据分析（用户可以在系统中进行多种分析模式）\n      - 数据可视化（各种类型图表）\n      - 数据应用（数据导出，数据订阅，数据预警）\n\n    项目成果：\n      - 接入公司整个数据仓库的数据，为公司内部多条业务线完成报表需求。\n      - 为多个汽车厂商提供报表独立部署方案。\n\n  - ### 数据地图与数据建模\n\n    项目角色：构建人和后端开发负责人   \n    项目主要模块：元数据采集，元数据整合治理，模型构建管理，元数据应用，SQL解析  \n    项目技术栈：Java/Springboot/Mybatis, Hive/HiveHook, Mysql/Redis，Python/Celery  \n    项目内容：  \n      - 数据采集（metadata, 数据血缘，数据标签，数据任务，数据权限）\n      - 数据治理（整合数据权限，统计元数据，补充数据）\n      - 建模平台（管理建表，sql解析元数据，图形化构建数仓模型，模型输出）\n      - 数据地图平台（元数据搜索，元数据分类检索，元数据统计看板，元数据详情、变更、血缘等）\n\n    项目成果：\n      - 为数据治理提供可视化的元数据治理工具\n      - 为其他数据平台项目提供元数据支持\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品配置、编译、打包、部署等自动化运维平台\n\n    项目角色：主要后端开发  \n    项目主要模块：多环境管理，自动化打包部署，配置管理，多项目脚本兼容  \n    项目技术栈：Python/Django，Shell脚本，Ansible  \n    项目内容：  \n      - 多环境：内网使用虚拟机管理，同时对接线上环境\n      - 打包部署：使用ansible运行命令\n      - 配置管理：在部署前可进行参数配置\n      - 多项目管理：对接java/python/go项目分别维护脚本和依赖\n\n    项目成果：\n      - 提高内部效率，为开发/测试/实施提供平台化部署方案\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    项目角色：主要后端开发  \n    项目主要模块：量化策略实现，策略平台    \n    项目技术栈：Python/Flask    \n    项目内容：实现一些分析师提供的策略方案，平台可视化这些策略的使用与结果\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在大数据，后端开发等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","updated":"2021-01-27T04:46:28.785Z","path":"about/2021.html","title":"","comments":1,"_id":"cl2fsh6zl000107704r89u0t7","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251                      本科 / 杭州电子科技大学</li>\n<li>邮箱：935669873@qq.com                   电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a>           期望职位：后端开发</li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a>      期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>主要后端开发语言为Java和Python，框架熟悉Springboot和Django;</li>\n<li>前端也有一些实践，写过react和antd的项目，日常用原生Js写一些项目;</li>\n<li>有过大数据开发的部分经验，主要为Hadoop和Hive。</li>\n<li>日常的运维也能自己完成，打包部署装机，Shell脚本等，对Linux也玩的还行;</li>\n<li>版本管理Git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在Leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-java研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (Java研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"可视化bi系统\">可视化BI系统</h3>\n<p>项目角色：构建人和后端开发负责人<br>\n项目主要模块：图表，各种可视化分析模式，指标，元数据，查询引擎<br>\n项目技术栈：Java/Springboot/Mybatis，Hive/Presto，Mysql/Redis<br>\n项目内容：</p>\n<ul>\n<li>数据实时接入（表，模型，视图）</li>\n<li>数据分析（用户可以在系统中进行多种分析模式）</li>\n<li>数据可视化（各种类型图表）</li>\n<li>数据应用（数据导出，数据订阅，数据预警）</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>接入公司整个数据仓库的数据，为公司内部多条业务线完成报表需求。</li>\n<li>为多个汽车厂商提供报表独立部署方案。</li>\n</ul>\n</li>\n<li>\n<h3 id=\"数据地图与数据建模\">数据地图与数据建模</h3>\n<p>项目角色：构建人和后端开发负责人<br>\n项目主要模块：元数据采集，元数据整合治理，模型构建管理，元数据应用，SQL解析<br>\n项目技术栈：Java/Springboot/Mybatis, Hive/HiveHook, Mysql/Redis，Python/Celery<br>\n项目内容：</p>\n<ul>\n<li>数据采集（metadata, 数据血缘，数据标签，数据任务，数据权限）</li>\n<li>数据治理（整合数据权限，统计元数据，补充数据）</li>\n<li>建模平台（管理建表，sql解析元数据，图形化构建数仓模型，模型输出）</li>\n<li>数据地图平台（元数据搜索，元数据分类检索，元数据统计看板，元数据详情、变更、血缘等）</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>为数据治理提供可视化的元数据治理工具</li>\n<li>为其他数据平台项目提供元数据支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品配置-编译-打包-部署等自动化运维平台\">产品配置、编译、打包、部署等自动化运维平台</h3>\n<p>项目角色：主要后端开发<br>\n项目主要模块：多环境管理，自动化打包部署，配置管理，多项目脚本兼容<br>\n项目技术栈：Python/Django，Shell脚本，Ansible<br>\n项目内容：</p>\n<ul>\n<li>多环境：内网使用虚拟机管理，同时对接线上环境</li>\n<li>打包部署：使用ansible运行命令</li>\n<li>配置管理：在部署前可进行参数配置</li>\n<li>多项目管理：对接java/python/go项目分别维护脚本和依赖</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>提高内部效率，为开发/测试/实施提供平台化部署方案</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>项目角色：主要后端开发<br>\n项目主要模块：量化策略实现，策略平台<br>\n项目技术栈：Python/Flask<br>\n项目内容：实现一些分析师提供的策略方案，平台可视化这些策略的使用与结果</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在大数据，后端开发等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251                      本科 / 杭州电子科技大学</li>\n<li>邮箱：935669873@qq.com                   电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a>           期望职位：后端开发</li>\n<li>Github：<a href=\"https://github.com/webgjc\">https://github.com/webgjc</a>      期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>主要后端开发语言为Java和Python，框架熟悉Springboot和Django;</li>\n<li>前端也有一些实践，写过react和antd的项目，日常用原生Js写一些项目;</li>\n<li>有过大数据开发的部分经验，主要为Hadoop和Hive。</li>\n<li>日常的运维也能自己完成，打包部署装机，Shell脚本等，对Linux也玩的还行;</li>\n<li>版本管理Git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在Leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (Java研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>可视化BI系统</h3>\n<p>项目角色：构建人和后端开发负责人<br>\n项目主要模块：图表，各种可视化分析模式，指标，元数据，查询引擎<br>\n项目技术栈：Java/Springboot/Mybatis，Hive/Presto，Mysql/Redis<br>\n项目内容：</p>\n<ul>\n<li>数据实时接入（表，模型，视图）</li>\n<li>数据分析（用户可以在系统中进行多种分析模式）</li>\n<li>数据可视化（各种类型图表）</li>\n<li>数据应用（数据导出，数据订阅，数据预警）</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>接入公司整个数据仓库的数据，为公司内部多条业务线完成报表需求。</li>\n<li>为多个汽车厂商提供报表独立部署方案。</li>\n</ul>\n</li>\n<li>\n<h3>数据地图与数据建模</h3>\n<p>项目角色：构建人和后端开发负责人<br>\n项目主要模块：元数据采集，元数据整合治理，模型构建管理，元数据应用，SQL解析<br>\n项目技术栈：Java/Springboot/Mybatis, Hive/HiveHook, Mysql/Redis，Python/Celery<br>\n项目内容：</p>\n<ul>\n<li>数据采集（metadata, 数据血缘，数据标签，数据任务，数据权限）</li>\n<li>数据治理（整合数据权限，统计元数据，补充数据）</li>\n<li>建模平台（管理建表，sql解析元数据，图形化构建数仓模型，模型输出）</li>\n<li>数据地图平台（元数据搜索，元数据分类检索，元数据统计看板，元数据详情、变更、血缘等）</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>为数据治理提供可视化的元数据治理工具</li>\n<li>为其他数据平台项目提供元数据支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品配置、编译、打包、部署等自动化运维平台</h3>\n<p>项目角色：主要后端开发<br>\n项目主要模块：多环境管理，自动化打包部署，配置管理，多项目脚本兼容<br>\n项目技术栈：Python/Django，Shell脚本，Ansible<br>\n项目内容：</p>\n<ul>\n<li>多环境：内网使用虚拟机管理，同时对接线上环境</li>\n<li>打包部署：使用ansible运行命令</li>\n<li>配置管理：在部署前可进行参数配置</li>\n<li>多项目管理：对接java/python/go项目分别维护脚本和依赖</li>\n</ul>\n<p>项目成果：</p>\n<ul>\n<li>提高内部效率，为开发/测试/实施提供平台化部署方案</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>项目角色：主要后端开发<br>\n项目主要模块：量化策略实现，策略平台<br>\n项目技术栈：Python/Flask<br>\n项目内容：实现一些分析师提供的策略方案，平台可视化这些策略的使用与结果</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在大数据，后端开发等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：面谈\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 后端目前主要使用比较多的为java和python，web框架的分别为django和spingboot;\n- 对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，做大数据相关的平台和数据可视化的后端开发。\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据管理与数据地图\n\n    该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n    - 对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；\n    - 元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；\n    - 实现了建议方便的元数据查询平台，包括大部分元数据的展示；\n    - 提供多种稳定的元数据外部对接接口；\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n  - ### 敏捷分析与可视化报表\n\n    该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。\n    - 查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；\n    - 元数据由数据地图提供，这边由后端对接接口；\n    - 查询分同步异步查询，统一走jdbc协议；\n    - 使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；\n    - 使用图表缓存的方案，由离线任务关系控制缓存的刷新；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","source":"about/resume.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：面谈\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 后端目前主要使用比较多的为java和python，web框架的分别为django和spingboot;\n- 对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，做大数据相关的平台和数据可视化的后端开发。\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据管理与数据地图\n\n    该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n    - 对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；\n    - 元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；\n    - 实现了建议方便的元数据查询平台，包括大部分元数据的展示；\n    - 提供多种稳定的元数据外部对接接口；\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n  - ### 敏捷分析与可视化报表\n\n    该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。\n    - 查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；\n    - 元数据由数据地图提供，这边由后端对接接口；\n    - 查询分同步异步查询，统一走jdbc协议；\n    - 使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；\n    - 使用图表缓存的方案，由离线任务关系控制缓存的刷新；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","updated":"2021-01-27T04:46:28.789Z","path":"about/resume.html","title":"","comments":1,"_id":"cl2fsh6zp00030770992mm6d1","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>后端目前主要使用比较多的为java和python，web框架的分别为django和spingboot;</li>\n<li>对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，做大数据相关的平台和数据可视化的后端开发。</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据管理与数据地图\">元数据管理与数据地图</h3>\n<p>该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n<ul>\n<li>对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；</li>\n<li>元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；</li>\n<li>实现了建议方便的元数据查询平台，包括大部分元数据的展示；</li>\n<li>提供多种稳定的元数据外部对接接口；</li>\n</ul>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n<li>\n<h3 id=\"敏捷分析与可视化报表\">敏捷分析与可视化报表</h3>\n<p>该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。</p>\n<ul>\n<li>查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；</li>\n<li>元数据由数据地图提供，这边由后端对接接口；</li>\n<li>查询分同步异步查询，统一走jdbc协议；</li>\n<li>使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；</li>\n<li>使用图表缓存的方案，由离线任务关系控制缓存的刷新；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>后端目前主要使用比较多的为java和python，web框架的分别为django和spingboot;</li>\n<li>对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，做大数据相关的平台和数据可视化的后端开发。</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据管理与数据地图</h3>\n<p>该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n<ul>\n<li>对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；</li>\n<li>元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；</li>\n<li>实现了建议方便的元数据查询平台，包括大部分元数据的展示；</li>\n<li>提供多种稳定的元数据外部对接接口；</li>\n</ul>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n<li>\n<h3>敏捷分析与可视化报表</h3>\n<p>该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。</p>\n<ul>\n<li>查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；</li>\n<li>元数据由数据地图提供，这边由后端对接接口；</li>\n<li>查询分同步异步查询，统一走jdbc协议；</li>\n<li>使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；</li>\n<li>使用图表缓存的方案，由离线任务关系控制缓存的刷新；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---","updated":"2021-01-27T04:46:28.803Z","path":"archive/index.html","_id":"cl2fsh6zr00040770vvpyat4k","content":"","excerpt":"","more":""},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发 / 数据平台开发\n - 期望薪资：面谈\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 后端目前主要使用比较多的为Java和Python，Web框架的分别为SpingBoot和Django，这个是主要对象;\n- 对前端Html/Css/Js有所涉猎，工作期间学了React和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生Js和Jq写一些插件和实现(最近更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，之前做大数据相关的平台和数据可视化的后端开发。\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据平台研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据管理与数据地图\n\n    该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n    - 对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；\n    - 元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；\n    - 实现了建议方便的元数据查询平台，包括大部分元数据的展示；\n    - 提供多种稳定的元数据外部对接接口；\n\n  - ### 敏捷分析与可视化报表\n\n    该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化（博客中主要分享了antlr实现解析的一些实现）。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。\n    - 查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；\n    - 元数据由数据地图提供，这边由后端对接接口；\n    - 查询分同步异步查询，统一走jdbc协议；\n    - 使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；\n    - 使用图表缓存的方案，由离线任务关系控制缓存的刷新；\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","source":"about/甘家城-后端开发-简历.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发 / 数据平台开发\n - 期望薪资：面谈\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 后端目前主要使用比较多的为Java和Python，Web框架的分别为SpingBoot和Django，这个是主要对象;\n- 对前端Html/Css/Js有所涉猎，工作期间学了React和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生Js和Jq写一些插件和实现(最近更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，之前做大数据相关的平台和数据可视化的后端开发。\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据平台研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据管理与数据地图\n\n    该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n    - 对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；\n    - 元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；\n    - 实现了建议方便的元数据查询平台，包括大部分元数据的展示；\n    - 提供多种稳定的元数据外部对接接口；\n\n  - ### 敏捷分析与可视化报表\n\n    该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化（博客中主要分享了antlr实现解析的一些实现）。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。\n    - 查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；\n    - 元数据由数据地图提供，这边由后端对接接口；\n    - 查询分同步异步查询，统一走jdbc协议；\n    - 使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；\n    - 使用图表缓存的方案，由离线任务关系控制缓存的刷新；\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","updated":"2021-01-27T04:46:28.794Z","path":"about/甘家城-后端开发-简历.html","title":"","comments":1,"_id":"cl2fsh6zt000507709yt9by0a","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发 / 数据平台开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>后端目前主要使用比较多的为Java和Python，Web框架的分别为SpingBoot和Django，这个是主要对象;</li>\n<li>对前端Html/Css/Js有所涉猎，工作期间学了React和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生Js和Jq写一些插件和实现(最近更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，之前做大数据相关的平台和数据可视化的后端开发。</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据平台研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据平台研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据管理与数据地图\">元数据管理与数据地图</h3>\n<p>该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n<ul>\n<li>对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；</li>\n<li>元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；</li>\n<li>实现了建议方便的元数据查询平台，包括大部分元数据的展示；</li>\n<li>提供多种稳定的元数据外部对接接口；</li>\n</ul>\n</li>\n<li>\n<h3 id=\"敏捷分析与可视化报表\">敏捷分析与可视化报表</h3>\n<p>该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化（博客中主要分享了antlr实现解析的一些实现）。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。</p>\n<ul>\n<li>查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；</li>\n<li>元数据由数据地图提供，这边由后端对接接口；</li>\n<li>查询分同步异步查询，统一走jdbc协议；</li>\n<li>使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；</li>\n<li>使用图表缓存的方案，由离线任务关系控制缓存的刷新；</li>\n</ul>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发 / 数据平台开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>后端目前主要使用比较多的为Java和Python，Web框架的分别为SpingBoot和Django，这个是主要对象;</li>\n<li>对前端Html/Css/Js有所涉猎，工作期间学了React和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生Js和Jq写一些插件和实现(最近更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据与指标等，之前做大数据相关的平台和数据可视化的后端开发。</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据平台研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据管理与数据地图</h3>\n<p>该项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等，本身提供一个数据查询平台数据地图，并也为其他应用提供元数据支持。采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为主要后端开发，项目为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n<ul>\n<li>对元数据采集进行了多层次(增量全量)多方式(手动定时)多来源(metastore/information_schema)的优化；</li>\n<li>元数据进行了多个来源的整合，并标记清理，关联，统计等业务操作，同时监控了每日的变更；</li>\n<li>实现了建议方便的元数据查询平台，包括大部分元数据的展示；</li>\n<li>提供多种稳定的元数据外部对接接口；</li>\n</ul>\n</li>\n<li>\n<h3>敏捷分析与可视化报表</h3>\n<p>该项目是包括一个sql即时查询工具，包括直连数据库和模型元数据的拖拉敏捷分析，包括一个报表系统。项目分两个大模块，查询模块和图表后端模块；查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等，图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等，两个服务使用dubbo进行交互。本人为项目主要后端开发之一，主要参与图表模块，进行权限设计，查询交互；也部分参与查询模块，对hiveSql的解析进行了部分研究和优化（博客中主要分享了antlr实现解析的一些实现）。项目使用java/springboot/mybatis搭建，存储使用mysql，查询支持hive，presto，mysql等。</p>\n<ul>\n<li>查询使用ranger控制到表级别的查询权限，中间设计进行了权限缓存，行级权限由后端自行实现；</li>\n<li>元数据由数据地图提供，这边由后端对接接口；</li>\n<li>查询分同步异步查询，统一走jdbc协议；</li>\n<li>使用了sql解析实现了sql的格式化，sql血缘和sql元数据解析；</li>\n<li>使用图表缓存的方案，由离线任务关系控制缓存的刷新；</li>\n</ul>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业一年多了，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据等这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"about","title":"About","date":"2019-11-11T02:00:00.000Z","description":"","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试。\n\n2021 - 2022\n- 转向业务开发，对后端的探索，对业务的攻克，其他期待\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n<!-- > [我的简历 HTML](/about/2021.html)  \n> [我的简历 PDF](/about/2021.pdf) -->","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-11-11 10:00:00\ndescription: \"\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n## 关于我\n\n> 电子专业的低调码农\n\n> 喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走\n\n> 向往的事情：还有好多没做过的事情\n\n## 技术栈历程\n\n2015 - 2016\n- 初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。\n\n2016 - 2017\n- 学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。\n\n2017 - 2018\n- 开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，\n  \n2018 - 2019\n- 进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。\n\n2019 - 2020\n- 继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。\n\n2020 - 2021\n- Springboot继续尝试，大数据组件继续尝试。\n\n2021 - 2022\n- 转向业务开发，对后端的探索，对业务的攻克，其他期待\n\n## 联系我\n\n> Email: 935669873@qq.com  \n\n> 当然也可以直接加我qq交流👆\n\n<!-- > [我的简历 HTML](/about/2021.html)  \n> [我的简历 PDF](/about/2021.pdf) -->","updated":"2021-03-09T07:36:09.900Z","path":"about/index.html","comments":1,"_id":"cl2fsh6zu00060770sqfmnn4d","content":"<h2 id=\"关于我\">关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2 id=\"技术栈历程\">技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试。</li>\n</ul>\n<p>2021 - 2022</p>\n<ul>\n<li>转向业务开发，对后端的探索，对业务的攻克，其他期待</li>\n</ul>\n<h2 id=\"联系我\">联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"external\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<!-- > [我的简历 HTML](/about/2021.html)  \n> [我的简历 PDF](/about/2021.pdf) -->","excerpt":"","more":"<h2>关于我</h2>\n<blockquote>\n<p>电子专业的低调码农</p>\n</blockquote>\n<blockquote>\n<p>喜欢的事情：农药，钢琴，钓鱼，躺尸，出门走走</p>\n</blockquote>\n<blockquote>\n<p>向往的事情：还有好多没做过的事情</p>\n</blockquote>\n<h2>技术栈历程</h2>\n<p>2015 - 2016</p>\n<ul>\n<li>初入编程，先从前端基础html, css, js学起，jquery，bootstrap还很流行。大学课程学到一些C语言。</li>\n</ul>\n<p>2016 - 2017</p>\n<ul>\n<li>学了PHP，再学一些框架，微擎，CI，买了云服务器，搭了个博客，管理微信公众号，开发自定义模块。</li>\n</ul>\n<p>2017 - 2018</p>\n<ul>\n<li>开始Python之旅，入门到web框架到一些机器学习，也找到了人生第一份工作，继续python后端，也接触些量化，</li>\n</ul>\n<p>2018 - 2019</p>\n<ul>\n<li>进了一个运维部门，玩玩linux的物理机，Shell脚本，也有部分Python的开发。</li>\n</ul>\n<p>2019 - 2020</p>\n<ul>\n<li>继续Python的web开发，接触大数据的全家桶，也进行了下Java和Springboot的尝试。</li>\n</ul>\n<p>2020 - 2021</p>\n<ul>\n<li>Springboot继续尝试，大数据组件继续尝试。</li>\n</ul>\n<p>2021 - 2022</p>\n<ul>\n<li>转向业务开发，对后端的探索，对业务的攻克，其他期待</li>\n</ul>\n<h2>联系我</h2>\n<blockquote>\n<p>Email: <a href=\"mailto:935669873@qq.com\">935669873@qq.com</a></p>\n</blockquote>\n<blockquote>\n<p>当然也可以直接加我qq交流👆</p>\n</blockquote>\n<!-- > [我的简历 HTML](/about/2021.html)  \n> [我的简历 PDF](/about/2021.pdf) -->"},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发 / 全栈开发\n - 期望薪资：面谈\n - 期望城市：上海\n\n---\n\n# 技术之谈\n\n- 工作以来后端做的事情比较多，主要使用python和java，web框架的分别为django和spingboot;\n- 对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近持续更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据血缘等，做大数据相关的平台和数据可视化开发。\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前在校期间做过机器学习相关的学习和项目，了解些基本的机器学习算法，做的主要是图像相关，cnn、yolo；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据，机器学习这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","source":"about/甘家城全栈开发简历.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学  \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[http://ganjiacheng.cn](http://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发 / 全栈开发\n - 期望薪资：面谈\n - 期望城市：上海\n\n---\n\n# 技术之谈\n\n- 工作以来后端做的事情比较多，主要使用python和java，web框架的分别为django和spingboot;\n- 对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近持续更新一个github上的项目[web_robot](https://github.com/webgjc/web_robot))；\n- 关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据血缘等，做大数据相关的平台和数据可视化开发。\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；\n- 之前在校期间做过机器学习相关的学习和项目，了解些基本的机器学习算法，做的主要是图像相关，cnn、yolo；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react和antd;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业一年，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据，机器学习这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！\n","updated":"2021-01-27T04:46:28.798Z","path":"about/甘家城全栈开发简历.html","title":"","comments":1,"_id":"cl2fsh6zw00070770kticu7ib","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发 / 全栈开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>工作以来后端做的事情比较多，主要使用python和java，web框架的分别为django和spingboot;</li>\n<li>对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近持续更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据血缘等，做大数据相关的平台和数据可视化开发。</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前在校期间做过机器学习相关的学习和项目，了解些基本的机器学习算法，做的主要是图像相关，cnn、yolo；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据采集与数据地图\">元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n<li>\n<h3 id=\"自助查询与敏捷分析\">自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业一年，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据，机器学习这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发 / 全栈开发</li>\n<li>期望薪资：面谈</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>工作以来后端做的事情比较多，主要使用python和java，web框架的分别为django和spingboot;</li>\n<li>对前端html/css/js有所涉猎，工作期间学了react和公司内部用的前端框架，并在实际公司项目中配合antd动手写了一部分，自己日常也常用原生js和jq写一些插件和实现(最近持续更新一个github上的项目<a href=\"https://github.com/webgjc/web_robot\">web_robot</a>)；</li>\n<li>关于大数据一些组件有在工作中用到，包括hadoop，hive，ranger，元数据血缘等，做大数据相关的平台和数据可视化开发。</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等，对linux也玩的还行；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>github和技术博客一直有更新，最近做的比较多的是大数据相关的事情，和一些插件；</li>\n<li>之前在校期间做过机器学习相关的学习和项目，了解些基本的机器学习算法，做的主要是图像相关，cnn、yolo；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react和antd;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业一年，算上实习的也有个两年多了，技术栈也是在深挖阶段，希望可以在web开发，大数据，机器学习这些领域有更多的机会和挑战。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"layout":"book","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is book","aplayer":false,"fixed":false,"_content":"","source":"book/index.md","raw":"---\nlayout: \"book\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is book\"\naplayer: false\nfixed: false\n---","updated":"2021-01-27T04:46:28.804Z","path":"book/index.html","title":"","_id":"cl2fsh6zx00080770h6f4701a","content":"","excerpt":"","more":""},{"layout":"about","date":"2020-04-12T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","source":"about/resume copy.md","raw":"---\nlayout: \"about\"\ndate: 2020-04-12 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 甘家城 / 男 / 1996\n - 手机/微信：15968182251  \n - 邮箱：935669873@qq.com\n - 本科 / 杭州电子科技大学 /   \n   电子科学与技术专业 / 19届毕业生 \n - 技术博客：[https://ganjiacheng.cn](https://ganjiacheng.cn)\n - Github：[https://github.com/webgjc](https://github.com/webgjc)\n - 期望职位：后端开发\n - 期望薪资：13-16k\n - 期望城市：杭州\n\n---\n\n# 技术之谈\n\n- 关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;\n- 工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;\n- 对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；\n- 之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；\n- 版本管理git用的比较多，svn很早前也用过一段时间；\n- 对于算法一直在跟进，偶尔也算在leetcode有做题吧；\n- 日常会有很多奇思妙想实现一些demo，在github和博客里有体现；\n- 没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；\n- 之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；\n\n---\n\n# 工作经历\n\n- ## 大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)\n\n  - ### 元数据采集与数据地图\n\n    该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客[讲讲元数据](https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/)与[元数据采集](https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/)\n\n  - ### 数据标准与数据建模\n\n    该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。\n    - 项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；\n    - 在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；\n    - 渲染导出hql使用mustache模板引擎；\n    - excel导入使用easyexcel实现；\n    - 同时参与实现了一部分前端的功能，使用react;\n\n  - ### 自助查询与敏捷分析\n\n    该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。\n    - 查询使用ranger控制查询权限，到表；\n    - 筛选库表使用数据地图采集数据；\n    - hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；\n    - 查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；\n    - hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；\n    - 结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；\n\n- ## 默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03) \n\n  - ### 产品打包部署更新等自动化脚本和平台\n\n    为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。\n\n  - ### 其他一些服务如vpn，文档服务器，官网等的维护\n\n    搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。  \n    文档服务器和官网做日常维护和更新。\n\n- ## 艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)\n  \n  - ### 量化策略与相关平台工具\n\n    主要实现一些金融研报的策略，在开放平台完成回测。  \n    搭建金融相关使用工具的平台，主要使用python/flask。\n\n---\n\n# 最后一席话\n- 毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！\n","updated":"2021-01-27T04:46:28.789Z","path":"about/resume copy.html","title":"","comments":1,"_id":"cl2fsh6zy00090770mx0b7nu7","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1 id=\"技术之谈\">技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"大搜车软件技术有限公司-数据研发工程师-2019-04-~-至今\">大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"元数据采集与数据地图\">元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3 id=\"自助查询与敏捷分析\">自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"默安科技有限公司实习-运维开发-2018-07-~-2019-03\">默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3 id=\"产品打包部署更新等自动化脚本和平台\">产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3 id=\"其他一些服务如vpn文档服务器官网等的维护\">其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"艾锝信息技术有限公司实习-python开发-2017-12-~-2018-04\">艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3 id=\"量化策略与相关平台工具\">量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"最后一席话\">最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>甘家城 / 男 / 1996</li>\n<li>手机/微信：15968182251</li>\n<li>邮箱：935669873@qq.com</li>\n<li>本科 / 杭州电子科技大学 /<br>\n电子科学与技术专业 / 19届毕业生</li>\n<li>技术博客：<a href=\"https://ganjiacheng.cn\">https://ganjiacheng.cn</a></li>\n<li>Github：<a href=\"https://github.com/webgjc\">https://github.com/webgjc</a></li>\n<li>期望职位：后端开发</li>\n<li>期望薪资：13-16k</li>\n<li>期望城市：杭州</li>\n</ul>\n<hr>\n<h1>技术之谈</h1>\n<ul>\n<li>关于编程语言，原来python用的比较多，后来做大数据相关产品的时候java也学了很多，框架的话分别为django和springboot;</li>\n<li>工作平常来说web开发一些周边技术栈接触比较多，大数据hive、元数据等相关技术也接触一点，同时平常自学一点;</li>\n<li>对前端有所涉猎，在校期间的大学生创业项目自学了html css和js，后来也在工作期间学了react和公司内部用的前端框架，并在实际项目中动手写了一部分；</li>\n<li>之前做过段时间运维，日常的运维也能自己完成，打包部署装机，shell脚本等；</li>\n<li>版本管理git用的比较多，svn很早前也用过一段时间；</li>\n<li>对于算法一直在跟进，偶尔也算在leetcode有做题吧；</li>\n<li>日常会有很多奇思妙想实现一些demo，在github和博客里有体现；</li>\n<li>没有直接很深入的研究框架和底层，但很多都是用到了会去深挖一下；</li>\n<li>之前在校一直有写博客，中间工作断了一段时间，后来心血来潮继续写；</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>大搜车软件技术有限公司 (数据研发工程师) (2019-04 ~ 至今)</h2>\n<ul>\n<li>\n<h3>元数据采集与数据地图</h3>\n<p>该项目主要是对hive元数据进行采集、管理，同时也支持mysql类型元数据。采集的元数据主要包括表字段信息、分区信息、表字段血缘信息、关联信息、变更记录、热度信息、表负责人、表业务划分、权限信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端存储，进行了统计与分类，并支持在页面上的展示搜索。项目使用python/django/celery实现，存储用的mysql和redis，本人在项目中为后端开发，项目基本为从零搭建。项目中的元数据采集使用celery的定时任务，采用新表和全量两种同步策略，也提供手动同步的方式。具体可以参考我的原创博客<a href=\"https://ganjiacheng.cn/article/%E8%AE%B2%E8%AE%B2%E5%85%83%E6%95%B0%E6%8D%AE/\">讲讲元数据</a>与<a href=\"https://ganjiacheng.cn/article/hive%E4%B8%8Emysql%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%AB%E9%80%9F%E9%87%87%E9%9B%86/\">元数据采集</a></p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>该项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。另一块是数仓建模工具，通过表单，hql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。建模的时候可以直接应用到数据标准和码值信息。项目使用java/springboot(optimus)/mybatis搭建，存储使用mysql，本人为项目的后端开发，项目为从零搭建。</p>\n<ul>\n<li>项目中在码表中因为码表是自建的，数值字段是自定义的，因此使用了json存储，且用到分表存储；</li>\n<li>在hql导入中用到了hql的create语句的解析，使用的是antlr4和hive的hplsql.g4然后用java实现visit模式的create_table；</li>\n<li>渲染导出hql使用mustache模板引擎；</li>\n<li>excel导入使用easyexcel实现；</li>\n<li>同时参与实现了一部分前端的功能，使用react;</li>\n</ul>\n</li>\n<li>\n<h3>自助查询与敏捷分析</h3>\n<p>该项目是主要是hive的查询工具，类似hue，同时也支持连接其他各类数据库。功能有筛选库表，hql查询，自配参数查询，执行日志/进度获取，hql格式化，hql血缘，hive资源队列信息，结果集的(存储，下载，分析计算做图)，sql模板(管理，分享等)。本人为项目的后端开发之一，从中间开始接手并开发新功能。项目后端使用python/django/celery实现，与数据地图为一个大后端。</p>\n<ul>\n<li>查询使用ranger控制查询权限，到表；</li>\n<li>筛选库表使用数据地图采集数据；</li>\n<li>hql查询使用pyhive库连接hiveserver2(celery/redis异步队列)；</li>\n<li>查询日志/进度使用pyhive异步模式下poll获取到的progress信息中的mapreduce信息和进度，containerLog参考yarn client内部实现的获取日志；</li>\n<li>hql格式化和hql血缘使用antlr4解析hive的hqlsql.g4，并使用java手动实现格式化和血缘；</li>\n<li>结果集使用json格式存储至oss，使用pandas对数据处理计算作图可视化；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>默安科技有限公司(实习) (运维开发) (2018-07 ~ 2019-03)</h2>\n<ul>\n<li>\n<h3>产品打包部署更新等自动化脚本和平台</h3>\n<p>为各个产品编写打包的脚本，部署脚本，更新脚本等。通过搭建的平台使用可以直接将产品打包部署到机器上，可以更新该环境的代码，和查看环境中产品运行的状态。平台项目使用python/django构建，日常的各个脚本使用shell编写完成，同时在版本迭代有变更或依赖包有变动时实时更新。</p>\n</li>\n<li>\n<h3>其他一些服务如vpn，文档服务器，官网等的维护</h3>\n<p>搭建维护vpn平台使用openvpn实现，对接钉钉群完成在在群内获取验证码登录，并做登录记录和统计。<br>\n文档服务器和官网做日常维护和更新。</p>\n</li>\n</ul>\n</li>\n<li>\n<h2>艾锝信息技术有限公司(实习) (python开发) (2017-12 ~ 2018-04)</h2>\n<ul>\n<li>\n<h3>量化策略与相关平台工具</h3>\n<p>主要实现一些金融研报的策略，在开放平台完成回测。<br>\n搭建金融相关使用工具的平台，主要使用python/flask。</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>最后一席话</h1>\n<ul>\n<li>毕业刚一年，很多东西也是现学现用，希望能有很多的机会在技术更多的深入，在行业上更多的发展，让自己尽快成为某个领域的专家。之前一年做了大数据相关的平台开发，虽然不是接触最难如任务调度/底层改造的部分，也接触了很多的技术栈，后面也希望能有更多的发展和成长。最后感谢阅读，欢迎交流！</li>\n</ul>\n"},{"_content":"{\n    \"红豆\": {\n        \"url\": \"/music/红豆.mp3\",\n        \"title\": \"红豆\",\n        \"comment\": \"纯音乐请欣赏\"\n    }\n}","source":"music/music.json","raw":"{\n    \"红豆\": {\n        \"url\": \"/music/红豆.mp3\",\n        \"title\": \"红豆\",\n        \"comment\": \"纯音乐请欣赏\"\n    }\n}","date":"2021-02-25T14:32:07.618Z","updated":"2021-02-25T14:32:07.618Z","path":"music/music.json","layout":"false","title":"","comments":1,"_id":"cl2fsh6zy000a0770pg26rnqo","content":"{\"红豆\":{\"url\":\"/music/红豆.mp3\",\"title\":\"红豆\",\"comment\":\"纯音乐请欣赏\"}}","excerpt":"","more":"{\"红豆\":{\"url\":\"/music/红豆.mp3\",\"title\":\"红豆\",\"comment\":\"纯音乐请欣赏\"}}"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2021-01-27T04:46:29.427Z","updated":"2021-01-27T04:46:29.427Z","path":"tags/index.html","comments":1,"_id":"cl2fsh6zz000b0770rhb70a3f","content":"","excerpt":"","more":""},{"layout":"about","date":"2023-06-25T02:00:00.000Z","description":"resume","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n# 个人信息\n\n - 基本信息：甘家城 / 男 / 1996\n - 手机邮箱：15968182251 / 935669873@qq.com\n - 学历信息：本科 / 杭州电子科技大学 / 电子科学与技术专业 / 19年毕业\n - 城市岗位：杭州 / 后端开发 \n---\n\n# 概述\n\n- 编程语言：Java，其他如Python和Js之前也有接触过。\n- 后端框架：Java使用较多为SpingBoot框架，Python的Django也有接触。\n- 行业的后端经验：主要为淘系自营电商供应链行业后端，数据平台后端。\n- 项目管理：可以负责独立子域30人日以上项目，包括从需求评审至发布运维的全项目周期。\n- github和博客: [https://github.com/webgjc](https://github.com/webgjc) || [http://ganjiacheng.cn](http://ganjiacheng.cn)\n- 工作履历：\n  - 乌鸫科技有限公司(2021-01 ~ 至今)\n  - 大搜车软件技术有限公司(2019-04 ~ 2021-01)\n\n---\n\n# 工作经历\n\n\n- ## 乌鸫科技有限公司 (Java业务供应链开发) (2021-01 ~ 至今)\n\n  - ### B2C零售行业供应链\n\n    细分行业主要包含：天猫超市，国际自营，海外直购，盒马跨境，国际淘分销；    \n\n    供应链域涉及：Inbound的采购退供，Outbound的服务表达和履约，还有一些行业自建能力。    \n\n    主要开发模式：一种为平台负责主链路，行业在平台扩展上实现每个行业的自定义逻辑；另一种行业自建能力则是在平台能力之外行业自己实现链路。都使用Java,SpringBoot框架搭建。  \n\n    相关项目：猫超履约处罚，国际直营采购主版本升级，淘分销品控质检管理，海外直购时效表达，盒马跨境门店自动补货。  \n\n    角色：核心开发人员\n\n    项目简述： \n\n    - 【猫超履约处罚】主要对猫超部分仓的履约发货单进行按规则的处罚判定，包括延迟发货，延迟出库，缺货等，并对商家进行相应处罚。\n  \n    - 【国际直营采购主版本升级】主要为采购链路的中台服务化升级，对接从建采购单至采购完成的行业侧全流程。包括采购建单，查看，审批，管理，物流协同等。\n\n    - 【淘分销品控质检管理】主要为淘分销添加品控质检的能力，上游对接交易，下游对接菜鸟，行业自身控制商品管理与订单履约。商品管理为供应商控制卖出品为质检后的品，订单履约为质检后的品在下单后必须从质检过的那一批发货。\n\n    - 【海外直购时效表达】主要为海外直购考拉端增加预计时效，表达在商详/下单/订单详情，具体展示为预计xxx天到货。\n    \n    - 【盒马跨境智能补货】因为盒马跨境门店与线上同步卖货的特殊性，做了一套定制的智能补货系统。一方面控制两边仓库的库存不能超卖，同时线下卖出的会在第二天自动将线上库存补货至线下。\n\n  - ### 其他供应链\n\n    细分行业主要涉及：淘宝买菜，家装服务。\n\n    相关项目：淘宝买菜迁移初始化，家装服务投诉链路。\n\n    角色：核心开发人员\n\n    项目简述：\n\n    - 【淘宝买菜迁移初始化】基于盒马社区团购的探索，进行了淘宝买菜供应链这边第一版初始化。\n  \n    - 【家装服务投诉链路】淘宝上家装附带的家装服务商家可对服务室进行投诉，  \n       经过小二，商家，服务商的一系列流转后会进行赔付或完结\n\n- ## 大搜车技术有限公司 (数据平台开发) (2019-04 ~ 2021-01)\n\n  - ### 元数据管理与数据地图\n\n    项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等。\n    采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。 \n\n  - ### 数据标准与数据建模\n\n    项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。  \n    其他还有数仓建模工具，通过表单，Sql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。  \n\n  - ### 敏捷分析与可视化报表\n\n    项目包括一个sql即时查询工具，包括模型元数据的拖拉敏捷分析，SQL查询和一个报表系统。    \n    查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等。 \n    图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等。    ","source":"about/resume 2023.md","raw":"---\nlayout: \"about\"\ndate: 2023-06-25 10:00:00\ndescription: \"resume\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n# 个人信息\n\n - 基本信息：甘家城 / 男 / 1996\n - 手机邮箱：15968182251 / 935669873@qq.com\n - 学历信息：本科 / 杭州电子科技大学 / 电子科学与技术专业 / 19年毕业\n - 城市岗位：杭州 / 后端开发 \n---\n\n# 概述\n\n- 编程语言：Java，其他如Python和Js之前也有接触过。\n- 后端框架：Java使用较多为SpingBoot框架，Python的Django也有接触。\n- 行业的后端经验：主要为淘系自营电商供应链行业后端，数据平台后端。\n- 项目管理：可以负责独立子域30人日以上项目，包括从需求评审至发布运维的全项目周期。\n- github和博客: [https://github.com/webgjc](https://github.com/webgjc) || [http://ganjiacheng.cn](http://ganjiacheng.cn)\n- 工作履历：\n  - 乌鸫科技有限公司(2021-01 ~ 至今)\n  - 大搜车软件技术有限公司(2019-04 ~ 2021-01)\n\n---\n\n# 工作经历\n\n\n- ## 乌鸫科技有限公司 (Java业务供应链开发) (2021-01 ~ 至今)\n\n  - ### B2C零售行业供应链\n\n    细分行业主要包含：天猫超市，国际自营，海外直购，盒马跨境，国际淘分销；    \n\n    供应链域涉及：Inbound的采购退供，Outbound的服务表达和履约，还有一些行业自建能力。    \n\n    主要开发模式：一种为平台负责主链路，行业在平台扩展上实现每个行业的自定义逻辑；另一种行业自建能力则是在平台能力之外行业自己实现链路。都使用Java,SpringBoot框架搭建。  \n\n    相关项目：猫超履约处罚，国际直营采购主版本升级，淘分销品控质检管理，海外直购时效表达，盒马跨境门店自动补货。  \n\n    角色：核心开发人员\n\n    项目简述： \n\n    - 【猫超履约处罚】主要对猫超部分仓的履约发货单进行按规则的处罚判定，包括延迟发货，延迟出库，缺货等，并对商家进行相应处罚。\n  \n    - 【国际直营采购主版本升级】主要为采购链路的中台服务化升级，对接从建采购单至采购完成的行业侧全流程。包括采购建单，查看，审批，管理，物流协同等。\n\n    - 【淘分销品控质检管理】主要为淘分销添加品控质检的能力，上游对接交易，下游对接菜鸟，行业自身控制商品管理与订单履约。商品管理为供应商控制卖出品为质检后的品，订单履约为质检后的品在下单后必须从质检过的那一批发货。\n\n    - 【海外直购时效表达】主要为海外直购考拉端增加预计时效，表达在商详/下单/订单详情，具体展示为预计xxx天到货。\n    \n    - 【盒马跨境智能补货】因为盒马跨境门店与线上同步卖货的特殊性，做了一套定制的智能补货系统。一方面控制两边仓库的库存不能超卖，同时线下卖出的会在第二天自动将线上库存补货至线下。\n\n  - ### 其他供应链\n\n    细分行业主要涉及：淘宝买菜，家装服务。\n\n    相关项目：淘宝买菜迁移初始化，家装服务投诉链路。\n\n    角色：核心开发人员\n\n    项目简述：\n\n    - 【淘宝买菜迁移初始化】基于盒马社区团购的探索，进行了淘宝买菜供应链这边第一版初始化。\n  \n    - 【家装服务投诉链路】淘宝上家装附带的家装服务商家可对服务室进行投诉，  \n       经过小二，商家，服务商的一系列流转后会进行赔付或完结\n\n- ## 大搜车技术有限公司 (数据平台开发) (2019-04 ~ 2021-01)\n\n  - ### 元数据管理与数据地图\n\n    项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等。\n    采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。 \n\n  - ### 数据标准与数据建模\n\n    项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。  \n    其他还有数仓建模工具，通过表单，Sql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。  \n\n  - ### 敏捷分析与可视化报表\n\n    项目包括一个sql即时查询工具，包括模型元数据的拖拉敏捷分析，SQL查询和一个报表系统。    \n    查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等。 \n    图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等。    ","updated":"2023-06-25T05:35:01.734Z","path":"about/resume 2023.html","title":"","comments":1,"_id":"clnjzpw5w0000hq70j6cgjjbm","content":"<h1 id=\"个人信息\">个人信息</h1>\n<ul>\n<li>基本信息：甘家城 / 男 / 1996</li>\n<li>手机邮箱：15968182251 / <a href=\"mailto:935669873@qq.com\" target=\"_blank\" rel=\"external\">935669873@qq.com</a></li>\n<li>学历信息：本科 / 杭州电子科技大学 / 电子科学与技术专业 / 19年毕业</li>\n<li>城市岗位：杭州 / 后端开发</li>\n</ul>\n<hr>\n<h1 id=\"概述\">概述</h1>\n<ul>\n<li>编程语言：Java，其他如Python和Js之前也有接触过。</li>\n<li>后端框架：Java使用较多为SpingBoot框架，Python的Django也有接触。</li>\n<li>行业的后端经验：主要为淘系自营电商供应链行业后端，数据平台后端。</li>\n<li>项目管理：可以负责独立子域30人日以上项目，包括从需求评审至发布运维的全项目周期。</li>\n<li>github和博客: <a href=\"https://github.com/webgjc\" target=\"_blank\" rel=\"external\">https://github.com/webgjc</a> || <a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>工作履历：\n<ul>\n<li>乌鸫科技有限公司(2021-01 ~ 至今)</li>\n<li>大搜车软件技术有限公司(2019-04 ~ 2021-01)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\">工作经历</h1>\n<ul>\n<li>\n<h2 id=\"乌鸫科技有限公司-java业务供应链开发-2021-01-~-至今\">乌鸫科技有限公司 (Java业务供应链开发) (2021-01 ~ 至今)</h2>\n<ul>\n<li>\n<h3 id=\"b2c零售行业供应链\">B2C零售行业供应链</h3>\n<p>细分行业主要包含：天猫超市，国际自营，海外直购，盒马跨境，国际淘分销；</p>\n<p>供应链域涉及：Inbound的采购退供，Outbound的服务表达和履约，还有一些行业自建能力。</p>\n<p>主要开发模式：一种为平台负责主链路，行业在平台扩展上实现每个行业的自定义逻辑；另一种行业自建能力则是在平台能力之外行业自己实现链路。都使用Java,SpringBoot框架搭建。</p>\n<p>相关项目：猫超履约处罚，国际直营采购主版本升级，淘分销品控质检管理，海外直购时效表达，盒马跨境门店自动补货。</p>\n<p>角色：核心开发人员</p>\n<p>项目简述：</p>\n<ul>\n<li>\n<p>【猫超履约处罚】主要对猫超部分仓的履约发货单进行按规则的处罚判定，包括延迟发货，延迟出库，缺货等，并对商家进行相应处罚。</p>\n</li>\n<li>\n<p>【国际直营采购主版本升级】主要为采购链路的中台服务化升级，对接从建采购单至采购完成的行业侧全流程。包括采购建单，查看，审批，管理，物流协同等。</p>\n</li>\n<li>\n<p>【淘分销品控质检管理】主要为淘分销添加品控质检的能力，上游对接交易，下游对接菜鸟，行业自身控制商品管理与订单履约。商品管理为供应商控制卖出品为质检后的品，订单履约为质检后的品在下单后必须从质检过的那一批发货。</p>\n</li>\n<li>\n<p>【海外直购时效表达】主要为海外直购考拉端增加预计时效，表达在商详/下单/订单详情，具体展示为预计xxx天到货。</p>\n</li>\n<li>\n<p>【盒马跨境智能补货】因为盒马跨境门店与线上同步卖货的特殊性，做了一套定制的智能补货系统。一方面控制两边仓库的库存不能超卖，同时线下卖出的会在第二天自动将线上库存补货至线下。</p>\n</li>\n</ul>\n</li>\n<li>\n<h3 id=\"其他供应链\">其他供应链</h3>\n<p>细分行业主要涉及：淘宝买菜，家装服务。</p>\n<p>相关项目：淘宝买菜迁移初始化，家装服务投诉链路。</p>\n<p>角色：核心开发人员</p>\n<p>项目简述：</p>\n<ul>\n<li>\n<p>【淘宝买菜迁移初始化】基于盒马社区团购的探索，进行了淘宝买菜供应链这边第一版初始化。</p>\n</li>\n<li>\n<p>【家装服务投诉链路】淘宝上家装附带的家装服务商家可对服务室进行投诉，<br>\n经过小二，商家，服务商的一系列流转后会进行赔付或完结</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"大搜车技术有限公司-数据平台开发-2019-04-~-2021-01\">大搜车技术有限公司 (数据平台开发) (2019-04 ~ 2021-01)</h2>\n<ul>\n<li>\n<h3 id=\"元数据管理与数据地图\">元数据管理与数据地图</h3>\n<p>项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等。<br>\n采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。</p>\n</li>\n<li>\n<h3 id=\"数据标准与数据建模\">数据标准与数据建模</h3>\n<p>项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。<br>\n其他还有数仓建模工具，通过表单，Sql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。</p>\n</li>\n<li>\n<h3 id=\"敏捷分析与可视化报表\">敏捷分析与可视化报表</h3>\n<p>项目包括一个sql即时查询工具，包括模型元数据的拖拉敏捷分析，SQL查询和一个报表系统。<br>\n查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等。<br>\n图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等。</p>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1>个人信息</h1>\n<ul>\n<li>基本信息：甘家城 / 男 / 1996</li>\n<li>手机邮箱：15968182251 / <a href=\"mailto:935669873@qq.com\">935669873@qq.com</a></li>\n<li>学历信息：本科 / 杭州电子科技大学 / 电子科学与技术专业 / 19年毕业</li>\n<li>城市岗位：杭州 / 后端开发</li>\n</ul>\n<hr>\n<h1>概述</h1>\n<ul>\n<li>编程语言：Java，其他如Python和Js之前也有接触过。</li>\n<li>后端框架：Java使用较多为SpingBoot框架，Python的Django也有接触。</li>\n<li>行业的后端经验：主要为淘系自营电商供应链行业后端，数据平台后端。</li>\n<li>项目管理：可以负责独立子域30人日以上项目，包括从需求评审至发布运维的全项目周期。</li>\n<li>github和博客: <a href=\"https://github.com/webgjc\">https://github.com/webgjc</a> || <a href=\"http://ganjiacheng.cn\">http://ganjiacheng.cn</a></li>\n<li>工作履历：\n<ul>\n<li>乌鸫科技有限公司(2021-01 ~ 至今)</li>\n<li>大搜车软件技术有限公司(2019-04 ~ 2021-01)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>工作经历</h1>\n<ul>\n<li>\n<h2>乌鸫科技有限公司 (Java业务供应链开发) (2021-01 ~ 至今)</h2>\n<ul>\n<li>\n<h3>B2C零售行业供应链</h3>\n<p>细分行业主要包含：天猫超市，国际自营，海外直购，盒马跨境，国际淘分销；</p>\n<p>供应链域涉及：Inbound的采购退供，Outbound的服务表达和履约，还有一些行业自建能力。</p>\n<p>主要开发模式：一种为平台负责主链路，行业在平台扩展上实现每个行业的自定义逻辑；另一种行业自建能力则是在平台能力之外行业自己实现链路。都使用Java,SpringBoot框架搭建。</p>\n<p>相关项目：猫超履约处罚，国际直营采购主版本升级，淘分销品控质检管理，海外直购时效表达，盒马跨境门店自动补货。</p>\n<p>角色：核心开发人员</p>\n<p>项目简述：</p>\n<ul>\n<li>\n<p>【猫超履约处罚】主要对猫超部分仓的履约发货单进行按规则的处罚判定，包括延迟发货，延迟出库，缺货等，并对商家进行相应处罚。</p>\n</li>\n<li>\n<p>【国际直营采购主版本升级】主要为采购链路的中台服务化升级，对接从建采购单至采购完成的行业侧全流程。包括采购建单，查看，审批，管理，物流协同等。</p>\n</li>\n<li>\n<p>【淘分销品控质检管理】主要为淘分销添加品控质检的能力，上游对接交易，下游对接菜鸟，行业自身控制商品管理与订单履约。商品管理为供应商控制卖出品为质检后的品，订单履约为质检后的品在下单后必须从质检过的那一批发货。</p>\n</li>\n<li>\n<p>【海外直购时效表达】主要为海外直购考拉端增加预计时效，表达在商详/下单/订单详情，具体展示为预计xxx天到货。</p>\n</li>\n<li>\n<p>【盒马跨境智能补货】因为盒马跨境门店与线上同步卖货的特殊性，做了一套定制的智能补货系统。一方面控制两边仓库的库存不能超卖，同时线下卖出的会在第二天自动将线上库存补货至线下。</p>\n</li>\n</ul>\n</li>\n<li>\n<h3>其他供应链</h3>\n<p>细分行业主要涉及：淘宝买菜，家装服务。</p>\n<p>相关项目：淘宝买菜迁移初始化，家装服务投诉链路。</p>\n<p>角色：核心开发人员</p>\n<p>项目简述：</p>\n<ul>\n<li>\n<p>【淘宝买菜迁移初始化】基于盒马社区团购的探索，进行了淘宝买菜供应链这边第一版初始化。</p>\n</li>\n<li>\n<p>【家装服务投诉链路】淘宝上家装附带的家装服务商家可对服务室进行投诉，<br>\n经过小二，商家，服务商的一系列流转后会进行赔付或完结</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2>大搜车技术有限公司 (数据平台开发) (2019-04 ~ 2021-01)</h2>\n<ul>\n<li>\n<h3>元数据管理与数据地图</h3>\n<p>项目主要是对数据仓库元数据进行采集、管理，同时也支持业务模型元数据，指标元数据等。<br>\n采集的元数据主要包括表字段信息，血缘，权限，业务关联信息等，从metastore、hivehook、离线调度平台、ranger采集到整合到后端数据库存储，进行了统计与分类，并在数据地图中的展示搜索。</p>\n</li>\n<li>\n<h3>数据标准与数据建模</h3>\n<p>项目一方面是对数据标准、数据码值进行定义、录入、管理和对外提供。<br>\n其他还有数仓建模工具，通过表单，Sql，execl等方式导入建表信息，提供ER图画图模块对导入表进行建模作图。</p>\n</li>\n<li>\n<h3>敏捷分析与可视化报表</h3>\n<p>项目包括一个sql即时查询工具，包括模型元数据的拖拉敏捷分析，SQL查询和一个报表系统。<br>\n查询模块专注于sql的生成、sql的解析优化，sql的执行，多种数据源的对接等。<br>\n图表模块专注于图表配置，前端拖拽交互接口，外部对接，权限控制等。</p>\n</li>\n</ul>\n</li>\n</ul>\n"}],"Post":[{"article":false,"title":"采坑备忘录","catalog":true,"date":"2021-01-29T11:31:43.000Z","subtitle":"记录下各种采坑修复的骚操作","header-img":null,"_content":"\n## jetbrains破解\n\n从官网下载idea/pycharm 2019.3前的版本。\n\n网上搜索jetbrains-agent-latest下载。\n\n将jar文件拖入idea、pycharm即可。\n\n## hexo锚点失效为undefined\n\n修改如下文件，\n> node_modules/hexo-toc/lib/filter.js\n\n将29-31替换为\n> $title.attr('id', id);\n\n## 无底洞","source":"_posts/bug_review.md","raw":"---\narticle: false\ntitle: 采坑备忘录\ncatalog: true\ndate: 2021-01-29 19:31:43\nsubtitle: 记录下各种采坑修复的骚操作\nheader-img:\n---\n\n## jetbrains破解\n\n从官网下载idea/pycharm 2019.3前的版本。\n\n网上搜索jetbrains-agent-latest下载。\n\n将jar文件拖入idea、pycharm即可。\n\n## hexo锚点失效为undefined\n\n修改如下文件，\n> node_modules/hexo-toc/lib/filter.js\n\n将29-31替换为\n> $title.attr('id', id);\n\n## 无底洞","slug":"bug_review","published":1,"updated":"2021-01-29T12:25:33.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh6zm00020770s9n9yk87","content":"<h2 id=\"jetbrains破解\">jetbrains破解</h2>\n<p>从官网下载idea/pycharm 2019.3前的版本。</p>\n<p>网上搜索jetbrains-agent-latest下载。</p>\n<p>将jar文件拖入idea、pycharm即可。</p>\n<h2 id=\"hexo锚点失效为undefined\">hexo锚点失效为undefined</h2>\n<p>修改如下文件，</p>\n<blockquote>\n<p>node_modules/hexo-toc/lib/filter.js</p>\n</blockquote>\n<p>将29-31替换为</p>\n<blockquote>\n<p>$title.attr(‘id’, id);</p>\n</blockquote>\n<h2 id=\"无底洞\">无底洞</h2>\n","excerpt":"","more":"<h2>jetbrains破解</h2>\n<p>从官网下载idea/pycharm 2019.3前的版本。</p>\n<p>网上搜索jetbrains-agent-latest下载。</p>\n<p>将jar文件拖入idea、pycharm即可。</p>\n<h2>hexo锚点失效为undefined</h2>\n<p>修改如下文件，</p>\n<blockquote>\n<p>node_modules/hexo-toc/lib/filter.js</p>\n</blockquote>\n<p>将29-31替换为</p>\n<blockquote>\n<p>$title.attr(‘id’, id);</p>\n</blockquote>\n<h2>无底洞</h2>\n"},{"title":"使用ppython---实现python和php之间的通信","catalog":true,"date":"2017-03-15T03:30:28.000Z","_content":"\nppython大致是用socket来实现php和python的联络;\n\n日常不常用，有必要时还是挺有用的。<!--more-->\n\n先是用python的socket开一个端口监听，在这个端口来进行数据传输\n\n之后php连接那个端口，向那个端口传输数据，python在接受到数据处理之后再返回结果。\n\n这里介绍一下基本使用，先下载<a href=\"http://pan.baidu.com/s/1dEHgYgL\">http://pan.baidu.com/s/1dEHgYgL</a>。\n\n解压之后放到服务器上。\n\n为了长久在Linux服务器里可以运行，开个screen\n<pre>screen -S ppython</pre>\n在screen里运行,可以看到Server Startup\n<pre>python php_python.py</pre>\n之后进行写各自要执行的python代码和php代码\n<pre>#python\n#modulename.py\ndef add(x,y):\n    return x+y</pre>\n<pre>&lt;?php\nrequire_once(\"php_python.php\");\n$x=1;$y=2;\n$result=ppython(\"modulename::add\",x,y);\necho $result;</pre>\n官方文档：<a href=\"https://code.google.com/archive/p/ppython/\">https://code.google.com/archive/p/ppython/</a>\n","source":"_posts/2017/article_10_使用ppython---实现python和php之间的通信.md","raw":"\n---\ntitle: 使用ppython---实现python和php之间的通信\ncatalog: true\ndate: 2017-3-15 11:30:28\n---\n\nppython大致是用socket来实现php和python的联络;\n\n日常不常用，有必要时还是挺有用的。<!--more-->\n\n先是用python的socket开一个端口监听，在这个端口来进行数据传输\n\n之后php连接那个端口，向那个端口传输数据，python在接受到数据处理之后再返回结果。\n\n这里介绍一下基本使用，先下载<a href=\"http://pan.baidu.com/s/1dEHgYgL\">http://pan.baidu.com/s/1dEHgYgL</a>。\n\n解压之后放到服务器上。\n\n为了长久在Linux服务器里可以运行，开个screen\n<pre>screen -S ppython</pre>\n在screen里运行,可以看到Server Startup\n<pre>python php_python.py</pre>\n之后进行写各自要执行的python代码和php代码\n<pre>#python\n#modulename.py\ndef add(x,y):\n    return x+y</pre>\n<pre>&lt;?php\nrequire_once(\"php_python.php\");\n$x=1;$y=2;\n$result=ppython(\"modulename::add\",x,y);\necho $result;</pre>\n官方文档：<a href=\"https://code.google.com/archive/p/ppython/\">https://code.google.com/archive/p/ppython/</a>\n","slug":"2017/article_10_使用ppython---实现python和php之间的通信","published":1,"updated":"2021-01-27T04:46:28.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71s000c07705duadbk8","content":"<p>ppython大致是用socket来实现php和python的联络;</p>\n<p>日常不常用，有必要时还是挺有用的。<a id=\"more\"></a></p>\n<p>先是用python的socket开一个端口监听，在这个端口来进行数据传输</p>\n<p>之后php连接那个端口，向那个端口传输数据，python在接受到数据处理之后再返回结果。</p>\n<p>这里介绍一下基本使用，先下载<a href=\"http://pan.baidu.com/s/1dEHgYgL\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1dEHgYgL</a>。</p>\n<p>解压之后放到服务器上。</p>\n<p>为了长久在Linux服务器里可以运行，开个screen</p>\n<pre>screen -S ppython</pre>\n<p>在screen里运行,可以看到Server Startup</p>\n<pre>python php_python.py</pre>\n<p>之后进行写各自要执行的python代码和php代码</p>\n<pre>#python\n#modulename.py\ndef add(x,y):\n    return x+y</pre>\n<pre>&lt;?php\nrequire_once(\"php_python.php\");\n$x=1;$y=2;\n$result=ppython(\"modulename::add\",x,y);\necho $result;</pre>\n<p>官方文档：<a href=\"https://code.google.com/archive/p/ppython/\" target=\"_blank\" rel=\"external\">https://code.google.com/archive/p/ppython/</a></p>\n","excerpt":"<p>ppython大致是用socket来实现php和python的联络;</p>\n<p>日常不常用，有必要时还是挺有用的。","more":"</p>\n<p>先是用python的socket开一个端口监听，在这个端口来进行数据传输</p>\n<p>之后php连接那个端口，向那个端口传输数据，python在接受到数据处理之后再返回结果。</p>\n<p>这里介绍一下基本使用，先下载<a href=\"http://pan.baidu.com/s/1dEHgYgL\">http://pan.baidu.com/s/1dEHgYgL</a>。</p>\n<p>解压之后放到服务器上。</p>\n<p>为了长久在Linux服务器里可以运行，开个screen</p>\n<pre>screen -S ppython</pre>\n<p>在screen里运行,可以看到Server Startup</p>\n<pre>python php_python.py</pre>\n<p>之后进行写各自要执行的python代码和php代码</p>\n<pre>#python\n#modulename.py\ndef add(x,y):\n    return x+y</pre>\n<pre>&lt;?php\nrequire_once(\"php_python.php\");\n$x=1;$y=2;\n$result=ppython(\"modulename::add\",x,y);\necho $result;</pre>\n<p>官方文档：<a href=\"https://code.google.com/archive/p/ppython/\">https://code.google.com/archive/p/ppython/</a></p>"},{"title":"便捷的集体通讯录---vcf文件制作使用","catalog":true,"date":"2017-03-19T02:59:19.000Z","_content":"\n一种情况就是新组成的一个团队，人比较多，要互相留下手机号。这种时候一个个输入到手机里就比较麻烦，所以可以制作一个vcf文件，直接导入到通讯录。\n\nvcf文件制作软件可以到这里下载<a href=\"http://pan.baidu.com/s/1kVLoUTh\">http://pan.baidu.com/s/1kVLoUTh</a><!--more-->\n\n下载后打开里面的exe文件，之后添加需要的人的信息和手机号码，点击保存通讯录就会保存到Contacts.vcf文件里。可能会发生输入名字变成问号的问题，这个时候就要现在外面写好，复制到那个框里面就可以。\n\n使用方法：\n\n把contacts.vcf文件通过电脑发到手机上用软件打开，或者放在云服务器上，用浏览器打开。打开后选择另外的打开方式，选择在通讯录中打开，之后便会跳转到通讯录并自动添加了所有人的电话和信息。点击储存就保存了所有人。\n\n是不是很便捷~\n","source":"_posts/2017/article_11_便捷的集体通讯录---vcf文件制作使用.md","raw":"\n---\ntitle: 便捷的集体通讯录---vcf文件制作使用\ncatalog: true\ndate: 2017-3-19 10:59:19\n---\n\n一种情况就是新组成的一个团队，人比较多，要互相留下手机号。这种时候一个个输入到手机里就比较麻烦，所以可以制作一个vcf文件，直接导入到通讯录。\n\nvcf文件制作软件可以到这里下载<a href=\"http://pan.baidu.com/s/1kVLoUTh\">http://pan.baidu.com/s/1kVLoUTh</a><!--more-->\n\n下载后打开里面的exe文件，之后添加需要的人的信息和手机号码，点击保存通讯录就会保存到Contacts.vcf文件里。可能会发生输入名字变成问号的问题，这个时候就要现在外面写好，复制到那个框里面就可以。\n\n使用方法：\n\n把contacts.vcf文件通过电脑发到手机上用软件打开，或者放在云服务器上，用浏览器打开。打开后选择另外的打开方式，选择在通讯录中打开，之后便会跳转到通讯录并自动添加了所有人的电话和信息。点击储存就保存了所有人。\n\n是不是很便捷~\n","slug":"2017/article_11_便捷的集体通讯录---vcf文件制作使用","published":1,"updated":"2021-01-27T04:46:28.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71u000d0770ly1dc37m","content":"<p>一种情况就是新组成的一个团队，人比较多，要互相留下手机号。这种时候一个个输入到手机里就比较麻烦，所以可以制作一个vcf文件，直接导入到通讯录。</p>\n<p>vcf文件制作软件可以到这里下载<a href=\"http://pan.baidu.com/s/1kVLoUTh\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1kVLoUTh</a><a id=\"more\"></a></p>\n<p>下载后打开里面的exe文件，之后添加需要的人的信息和手机号码，点击保存通讯录就会保存到Contacts.vcf文件里。可能会发生输入名字变成问号的问题，这个时候就要现在外面写好，复制到那个框里面就可以。</p>\n<p>使用方法：</p>\n<p>把contacts.vcf文件通过电脑发到手机上用软件打开，或者放在云服务器上，用浏览器打开。打开后选择另外的打开方式，选择在通讯录中打开，之后便会跳转到通讯录并自动添加了所有人的电话和信息。点击储存就保存了所有人。</p>\n<p>是不是很便捷~</p>\n","excerpt":"<p>一种情况就是新组成的一个团队，人比较多，要互相留下手机号。这种时候一个个输入到手机里就比较麻烦，所以可以制作一个vcf文件，直接导入到通讯录。</p>\n<p>vcf文件制作软件可以到这里下载<a href=\"http://pan.baidu.com/s/1kVLoUTh\">http://pan.baidu.com/s/1kVLoUTh</a>","more":"</p>\n<p>下载后打开里面的exe文件，之后添加需要的人的信息和手机号码，点击保存通讯录就会保存到Contacts.vcf文件里。可能会发生输入名字变成问号的问题，这个时候就要现在外面写好，复制到那个框里面就可以。</p>\n<p>使用方法：</p>\n<p>把contacts.vcf文件通过电脑发到手机上用软件打开，或者放在云服务器上，用浏览器打开。打开后选择另外的打开方式，选择在通讯录中打开，之后便会跳转到通讯录并自动添加了所有人的电话和信息。点击储存就保存了所有人。</p>\n<p>是不是很便捷~</p>"},{"title":"梯度下降法---学习篇","catalog":true,"date":"2017-03-15T16:48:16.000Z","_content":"\n梯度下降法：一般想法就是，开始先找一个点，之后每次找下降最快的那个方向来找下一个点，直到找到最低点。\n\n看过很多教程或者高数书上的讲解，大致就知道梯度下降是怎么回事情。但很多时候都是被众多的公式和英文名词吓到而不真正理解。<!--more-->\n\n这次我们来简单理解最初的一个------单变量梯度下降，这里用梯度下降来做线性回归，也就是找一条<strong>h(x)=ax+b</strong>的线来拟合现有的点。\n\n想象有很多点，中间有条线，所有点不可能完全在线上，相对于线都有一个误差值，所以方程可以看做<strong>h(x)=ax+b+c</strong>(c代表差值)，c=0就相当于点完全在线上。\n\n之后再理解一个cost function的概念，看下面第二个式子，简单理解一下就是把所有<strong>c求了平方和再求平均</strong>，除以二是之后在偏导数的时候会方便点。\n\n在下面求偏导就是把一式带入到二式然后求，结果如三四两式。那个<strong>α</strong>是步长也就是下降的快慢，过快或过慢都不好。这样算完就算一次下降，之后就反复进行就可以慢慢向需要的拟合回归线靠拢。\n\n<a href=\"/img/uploads/2017/03/IMG_3068.jpg\"><img class=\"alignnone wp-image-170 size-medium\" src=\"/img/uploads/2017/03/IMG_3068-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>---点击查看原图\n<pre>#python2.7\n#产生点\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.arange(-2,2,0.1)\ny=2*x+np.random.random(len(x))\n#随机设定一个初始的a，b\na=np.random.random()\nb=np.random.random()\nl=len(x)\n#步长\nalpha=0.01\n#进行1000次梯度下降，每次计算出上面求出的偏导，并在赋值给a,b。\nfor _ in xrange(1000):\n    j=0\n    k=0\n    for i in xrange(l):\n        j+=(a*x[i]+b-y[i])*x[i]\n        k+=a*x[i]+b-y[i]\n    a=a-alpha*j/l\n    b=b-alpha*k/l\n    print a,b\n#画点\nplt.plot(x,y,\"ro\")\n#画线\ntmpx=np.linspace(-2,2)\ntmpy=tmpx*a+b\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n效果展示<img class=\"alignnone size-medium wp-image-163\" src=\"/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg\" alt=\"\" width=\"300\" height=\"227\" />\n\n致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7691571\">http://blog.csdn.net/abcjennifer/article/details/7691571</a>\n","source":"_posts/2017/article_12_梯度下降法---学习篇.md","raw":"\n---\ntitle: 梯度下降法---学习篇\ncatalog: true\ndate: 2017-3-16 00:48:16\n---\n\n梯度下降法：一般想法就是，开始先找一个点，之后每次找下降最快的那个方向来找下一个点，直到找到最低点。\n\n看过很多教程或者高数书上的讲解，大致就知道梯度下降是怎么回事情。但很多时候都是被众多的公式和英文名词吓到而不真正理解。<!--more-->\n\n这次我们来简单理解最初的一个------单变量梯度下降，这里用梯度下降来做线性回归，也就是找一条<strong>h(x)=ax+b</strong>的线来拟合现有的点。\n\n想象有很多点，中间有条线，所有点不可能完全在线上，相对于线都有一个误差值，所以方程可以看做<strong>h(x)=ax+b+c</strong>(c代表差值)，c=0就相当于点完全在线上。\n\n之后再理解一个cost function的概念，看下面第二个式子，简单理解一下就是把所有<strong>c求了平方和再求平均</strong>，除以二是之后在偏导数的时候会方便点。\n\n在下面求偏导就是把一式带入到二式然后求，结果如三四两式。那个<strong>α</strong>是步长也就是下降的快慢，过快或过慢都不好。这样算完就算一次下降，之后就反复进行就可以慢慢向需要的拟合回归线靠拢。\n\n<a href=\"/img/uploads/2017/03/IMG_3068.jpg\"><img class=\"alignnone wp-image-170 size-medium\" src=\"/img/uploads/2017/03/IMG_3068-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>---点击查看原图\n<pre>#python2.7\n#产生点\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.arange(-2,2,0.1)\ny=2*x+np.random.random(len(x))\n#随机设定一个初始的a，b\na=np.random.random()\nb=np.random.random()\nl=len(x)\n#步长\nalpha=0.01\n#进行1000次梯度下降，每次计算出上面求出的偏导，并在赋值给a,b。\nfor _ in xrange(1000):\n    j=0\n    k=0\n    for i in xrange(l):\n        j+=(a*x[i]+b-y[i])*x[i]\n        k+=a*x[i]+b-y[i]\n    a=a-alpha*j/l\n    b=b-alpha*k/l\n    print a,b\n#画点\nplt.plot(x,y,\"ro\")\n#画线\ntmpx=np.linspace(-2,2)\ntmpy=tmpx*a+b\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n效果展示<img class=\"alignnone size-medium wp-image-163\" src=\"/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg\" alt=\"\" width=\"300\" height=\"227\" />\n\n致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7691571\">http://blog.csdn.net/abcjennifer/article/details/7691571</a>\n","slug":"2017/article_12_梯度下降法---学习篇","published":1,"updated":"2021-01-27T04:46:28.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71v000e0770bnha13uf","content":"<p>梯度下降法：一般想法就是，开始先找一个点，之后每次找下降最快的那个方向来找下一个点，直到找到最低点。</p>\n<p>看过很多教程或者高数书上的讲解，大致就知道梯度下降是怎么回事情。但很多时候都是被众多的公式和英文名词吓到而不真正理解。<a id=\"more\"></a></p>\n<p>这次我们来简单理解最初的一个------单变量梯度下降，这里用梯度下降来做线性回归，也就是找一条<strong>h(x)=ax+b</strong>的线来拟合现有的点。</p>\n<p>想象有很多点，中间有条线，所有点不可能完全在线上，相对于线都有一个误差值，所以方程可以看做<strong>h(x)=ax+b+c</strong>(c代表差值)，c=0就相当于点完全在线上。</p>\n<p>之后再理解一个cost function的概念，看下面第二个式子，简单理解一下就是把所有<strong>c求了平方和再求平均</strong>，除以二是之后在偏导数的时候会方便点。</p>\n<p>在下面求偏导就是把一式带入到二式然后求，结果如三四两式。那个<strong>α</strong>是步长也就是下降的快慢，过快或过慢都不好。这样算完就算一次下降，之后就反复进行就可以慢慢向需要的拟合回归线靠拢。</p>\n<p><a href=\"/img/uploads/2017/03/IMG_3068.jpg\"><img class=\"alignnone wp-image-170 size-medium\" src=\"/img/uploads/2017/03/IMG_3068-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\"></a>—点击查看原图</p>\n<pre>#python2.7\n#产生点\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.arange(-2,2,0.1)\ny=2*x+np.random.random(len(x))\n#随机设定一个初始的a，b\na=np.random.random()\nb=np.random.random()\nl=len(x)\n#步长\nalpha=0.01\n#进行1000次梯度下降，每次计算出上面求出的偏导，并在赋值给a,b。\nfor _ in xrange(1000):\n    j=0\n    k=0\n    for i in xrange(l):\n        j+=(a*x[i]+b-y[i])*x[i]\n        k+=a*x[i]+b-y[i]\n    a=a-alpha*j/l\n    b=b-alpha*k/l\n    print a,b\n#画点\nplt.plot(x,y,\"ro\")\n#画线\ntmpx=np.linspace(-2,2)\ntmpy=tmpx*a+b\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p>效果展示<img class=\"alignnone size-medium wp-image-163\" src=\"/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg\" alt=\"\" width=\"300\" height=\"227\"></p>\n<p>致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7691571\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/abcjennifer/article/details/7691571</a></p>\n","excerpt":"<p>梯度下降法：一般想法就是，开始先找一个点，之后每次找下降最快的那个方向来找下一个点，直到找到最低点。</p>\n<p>看过很多教程或者高数书上的讲解，大致就知道梯度下降是怎么回事情。但很多时候都是被众多的公式和英文名词吓到而不真正理解。","more":"</p>\n<p>这次我们来简单理解最初的一个------单变量梯度下降，这里用梯度下降来做线性回归，也就是找一条<strong>h(x)=ax+b</strong>的线来拟合现有的点。</p>\n<p>想象有很多点，中间有条线，所有点不可能完全在线上，相对于线都有一个误差值，所以方程可以看做<strong>h(x)=ax+b+c</strong>(c代表差值)，c=0就相当于点完全在线上。</p>\n<p>之后再理解一个cost function的概念，看下面第二个式子，简单理解一下就是把所有<strong>c求了平方和再求平均</strong>，除以二是之后在偏导数的时候会方便点。</p>\n<p>在下面求偏导就是把一式带入到二式然后求，结果如三四两式。那个<strong>α</strong>是步长也就是下降的快慢，过快或过慢都不好。这样算完就算一次下降，之后就反复进行就可以慢慢向需要的拟合回归线靠拢。</p>\n<p><a href=\"/img/uploads/2017/03/IMG_3068.jpg\"><img class=\"alignnone wp-image-170 size-medium\" src=\"/img/uploads/2017/03/IMG_3068-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>—点击查看原图</p>\n<pre>#python2.7\n#产生点\nimport numpy as np\nimport matplotlib.pyplot as plt\nx=np.arange(-2,2,0.1)\ny=2*x+np.random.random(len(x))\n#随机设定一个初始的a，b\na=np.random.random()\nb=np.random.random()\nl=len(x)\n#步长\nalpha=0.01\n#进行1000次梯度下降，每次计算出上面求出的偏导，并在赋值给a,b。\nfor _ in xrange(1000):\n    j=0\n    k=0\n    for i in xrange(l):\n        j+=(a*x[i]+b-y[i])*x[i]\n        k+=a*x[i]+b-y[i]\n    a=a-alpha*j/l\n    b=b-alpha*k/l\n    print a,b\n#画点\nplt.plot(x,y,\"ro\")\n#画线\ntmpx=np.linspace(-2,2)\ntmpy=tmpx*a+b\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p>效果展示<img class=\"alignnone size-medium wp-image-163\" src=\"/img/uploads/2017/03/QQ截图20170316004119-300x227.jpg\" alt=\"\" width=\"300\" height=\"227\" /></p>\n<p>致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7691571\">http://blog.csdn.net/abcjennifer/article/details/7691571</a></p>"},{"title":"许愿墙效果（仿）","catalog":true,"date":"2017-03-26T07:09:15.000Z","_content":"\n也不知道为什么要叫许愿墙，在<a href=\"http://www.qdfuns.com/\">前端网</a>看到许多人实现了，便来实现一个自己的版本，顺便许个愿！\n\n这里需要先看一下下面这张图，对于后面的理解很有帮助。<!--more-->\n\n<a href=\"/img/uploads/2017/03/2014091409260873.png\"><img class=\"alignnone wp-image-213 size-medium\" src=\"/img/uploads/2017/03/2014091409260873-300x159.png\" alt=\"\" width=\"300\" height=\"159\" /></a>\n\n使用方法：下面代码复制到一个html文件里，之后浏览器打开就行。\n\n具体实现在代码中注释。\n<pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    /*去除默认内外边距*/\n    * {\n        margin: 0px;\n        padding: 0px;\n    }\n    /*背景颜色*/\n    html,\n    body {\n        height: 100%;\n        background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n        background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n    }\n    /*画边框曲线*/\n    .item {\n        width: 200px;\n        height: 200px;\n        -webkit-border-bottom-left-radius: 20px 500px;\n        -webkit-border-bottom-right-radius: 500px 30px;\n        -webkit-border-top-right-radius: 5px 100px;\n        -moz-border-bottom-left-radius: 20px 500px;\n        -moz-border-bottom-right-radius: 500px 30px;\n        -moz-border-top-right-radius: 5px 100px;\n        box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -webkit-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -moz-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        position: absolute;\n        background: #FF9FDC;\n        cursor: move;\n        z-index: 2;\n    }\n    /*文字位置和属性*/\n    .txt {\n        margin-left: 25%;\n        margin-top: 10%;\n        color: white;\n        font-size: 20px;\n        font-family: \"YouYuan\";\n    }\n    /*设置关闭链接位置*/\n    .close {\n        position: absolute;\n        bottom: 10%;\n        right: 10%;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"item\" id=\"box\"&gt;\n        &lt;div class=\"txt\"&gt;2017许愿墙&lt;/div&gt;\n        &lt;div class=\"txt\"&gt;This is the best future&lt;/div&gt;\n        &lt;div class=\"close\"&gt;&lt;a href=\"#\" id=\"close\"&gt;关闭&lt;/a&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //理解执行函数\n    (function() {\n        //初始化变量，获取元素，设置动作\n        var state = 0,\n            X = 0,\n            Y = 0;\n        var box = document.getElementById(\"box\");\n        var txt = document.getElementsByClassName(\"txt\");\n        var close = document.getElementById(\"close\");\n        box.onmouseup = up;\n        box.onmousedown = down;\n        box.onmousemove = move;\n        close.onmousedown = closeBox;\n        //点击关闭链接box添加隐藏属性\n        function closeBox(e) {\n            e.preventDefault();\n            document.getElementById(\"box\").style.display = \"none\";\n        }\n        //鼠标按下设置开关state为1，在加上box距离左上的距离\n        function down(e) {\n            e.preventDefault();\n            state = 1;\n            X += e.offsetX;\n            Y += e.offsetY;\n        }\n        //因为点击文字也同时点击了外面的box，所以需要在点到文字的div时进行处理，把XY赋值为文字div距离外部div的左上距离\n        //这里需要理解一下浏览器点击子div的时候相当于也点击了父div，而且事件是从内而外触发的\n        for (var i in txt) {\n            txt[i].onmousedown = function(e) {\n                X = this.offsetLeft;\n                Y = this.offsetTop;\n            }\n        }\n        //松开鼠标，恢复初始值\n        function up() {\n            X = 0;\n            Y = 0;\n            state = 0;\n        }\n        //移动时，判断鼠标是否为按下。实现拖动效果\n        function move(e) {\n            if (state) {\n                document.getElementById(\"box\").style.top = e.clientY - Y + \"px\";\n                document.getElementById(\"box\").style.left = e.clientX - X + \"px\";\n            }\n        }\n    }());\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果预览：<a href=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\"><img class=\"alignnone wp-image-212 size-full\" src=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\" alt=\"\" width=\"285\" height=\"265\" /></a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n","source":"_posts/2017/article_16_许愿墙效果（仿）.md","raw":"\n---\ntitle: 许愿墙效果（仿）\ncatalog: true\ndate: 2017-3-26 15:09:15\n---\n\n也不知道为什么要叫许愿墙，在<a href=\"http://www.qdfuns.com/\">前端网</a>看到许多人实现了，便来实现一个自己的版本，顺便许个愿！\n\n这里需要先看一下下面这张图，对于后面的理解很有帮助。<!--more-->\n\n<a href=\"/img/uploads/2017/03/2014091409260873.png\"><img class=\"alignnone wp-image-213 size-medium\" src=\"/img/uploads/2017/03/2014091409260873-300x159.png\" alt=\"\" width=\"300\" height=\"159\" /></a>\n\n使用方法：下面代码复制到一个html文件里，之后浏览器打开就行。\n\n具体实现在代码中注释。\n<pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    /*去除默认内外边距*/\n    * {\n        margin: 0px;\n        padding: 0px;\n    }\n    /*背景颜色*/\n    html,\n    body {\n        height: 100%;\n        background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n        background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n    }\n    /*画边框曲线*/\n    .item {\n        width: 200px;\n        height: 200px;\n        -webkit-border-bottom-left-radius: 20px 500px;\n        -webkit-border-bottom-right-radius: 500px 30px;\n        -webkit-border-top-right-radius: 5px 100px;\n        -moz-border-bottom-left-radius: 20px 500px;\n        -moz-border-bottom-right-radius: 500px 30px;\n        -moz-border-top-right-radius: 5px 100px;\n        box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -webkit-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -moz-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        position: absolute;\n        background: #FF9FDC;\n        cursor: move;\n        z-index: 2;\n    }\n    /*文字位置和属性*/\n    .txt {\n        margin-left: 25%;\n        margin-top: 10%;\n        color: white;\n        font-size: 20px;\n        font-family: \"YouYuan\";\n    }\n    /*设置关闭链接位置*/\n    .close {\n        position: absolute;\n        bottom: 10%;\n        right: 10%;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"item\" id=\"box\"&gt;\n        &lt;div class=\"txt\"&gt;2017许愿墙&lt;/div&gt;\n        &lt;div class=\"txt\"&gt;This is the best future&lt;/div&gt;\n        &lt;div class=\"close\"&gt;&lt;a href=\"#\" id=\"close\"&gt;关闭&lt;/a&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //理解执行函数\n    (function() {\n        //初始化变量，获取元素，设置动作\n        var state = 0,\n            X = 0,\n            Y = 0;\n        var box = document.getElementById(\"box\");\n        var txt = document.getElementsByClassName(\"txt\");\n        var close = document.getElementById(\"close\");\n        box.onmouseup = up;\n        box.onmousedown = down;\n        box.onmousemove = move;\n        close.onmousedown = closeBox;\n        //点击关闭链接box添加隐藏属性\n        function closeBox(e) {\n            e.preventDefault();\n            document.getElementById(\"box\").style.display = \"none\";\n        }\n        //鼠标按下设置开关state为1，在加上box距离左上的距离\n        function down(e) {\n            e.preventDefault();\n            state = 1;\n            X += e.offsetX;\n            Y += e.offsetY;\n        }\n        //因为点击文字也同时点击了外面的box，所以需要在点到文字的div时进行处理，把XY赋值为文字div距离外部div的左上距离\n        //这里需要理解一下浏览器点击子div的时候相当于也点击了父div，而且事件是从内而外触发的\n        for (var i in txt) {\n            txt[i].onmousedown = function(e) {\n                X = this.offsetLeft;\n                Y = this.offsetTop;\n            }\n        }\n        //松开鼠标，恢复初始值\n        function up() {\n            X = 0;\n            Y = 0;\n            state = 0;\n        }\n        //移动时，判断鼠标是否为按下。实现拖动效果\n        function move(e) {\n            if (state) {\n                document.getElementById(\"box\").style.top = e.clientY - Y + \"px\";\n                document.getElementById(\"box\").style.left = e.clientX - X + \"px\";\n            }\n        }\n    }());\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果预览：<a href=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\"><img class=\"alignnone wp-image-212 size-full\" src=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\" alt=\"\" width=\"285\" height=\"265\" /></a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n","slug":"2017/article_16_许愿墙效果（仿）","published":1,"updated":"2021-01-27T04:46:28.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71w000f0770qf43mz3w","content":"<p>也不知道为什么要叫许愿墙，在<a href=\"http://www.qdfuns.com/\" target=\"_blank\" rel=\"external\">前端网</a>看到许多人实现了，便来实现一个自己的版本，顺便许个愿！</p>\n<p>这里需要先看一下下面这张图，对于后面的理解很有帮助。<a id=\"more\"></a></p>\n<p><a href=\"/img/uploads/2017/03/2014091409260873.png\"><img class=\"alignnone wp-image-213 size-medium\" src=\"/img/uploads/2017/03/2014091409260873-300x159.png\" alt=\"\" width=\"300\" height=\"159\"></a></p>\n<p>使用方法：下面代码复制到一个html文件里，之后浏览器打开就行。</p>\n<p>具体实现在代码中注释。</p>\n<pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    /*去除默认内外边距*/\n    * {\n        margin: 0px;\n        padding: 0px;\n    }\n    /*背景颜色*/\n    html,\n    body {\n        height: 100%;\n        background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n        background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n    }\n    /*画边框曲线*/\n    .item {\n        width: 200px;\n        height: 200px;\n        -webkit-border-bottom-left-radius: 20px 500px;\n        -webkit-border-bottom-right-radius: 500px 30px;\n        -webkit-border-top-right-radius: 5px 100px;\n        -moz-border-bottom-left-radius: 20px 500px;\n        -moz-border-bottom-right-radius: 500px 30px;\n        -moz-border-top-right-radius: 5px 100px;\n        box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -webkit-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -moz-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        position: absolute;\n        background: #FF9FDC;\n        cursor: move;\n        z-index: 2;\n    }\n    /*文字位置和属性*/\n    .txt {\n        margin-left: 25%;\n        margin-top: 10%;\n        color: white;\n        font-size: 20px;\n        font-family: \"YouYuan\";\n    }\n    /*设置关闭链接位置*/\n    .close {\n        position: absolute;\n        bottom: 10%;\n        right: 10%;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"item\" id=\"box\"&gt;\n        &lt;div class=\"txt\"&gt;2017许愿墙&lt;/div&gt;\n        &lt;div class=\"txt\"&gt;This is the best future&lt;/div&gt;\n        &lt;div class=\"close\"&gt;&lt;a href=\"#\" id=\"close\"&gt;关闭&lt;/a&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //理解执行函数\n    (function() {\n        //初始化变量，获取元素，设置动作\n        var state = 0,\n            X = 0,\n            Y = 0;\n        var box = document.getElementById(\"box\");\n        var txt = document.getElementsByClassName(\"txt\");\n        var close = document.getElementById(\"close\");\n        box.onmouseup = up;\n        box.onmousedown = down;\n        box.onmousemove = move;\n        close.onmousedown = closeBox;\n        //点击关闭链接box添加隐藏属性\n        function closeBox(e) {\n            e.preventDefault();\n            document.getElementById(\"box\").style.display = \"none\";\n        }\n        //鼠标按下设置开关state为1，在加上box距离左上的距离\n        function down(e) {\n            e.preventDefault();\n            state = 1;\n            X += e.offsetX;\n            Y += e.offsetY;\n        }\n        //因为点击文字也同时点击了外面的box，所以需要在点到文字的div时进行处理，把XY赋值为文字div距离外部div的左上距离\n        //这里需要理解一下浏览器点击子div的时候相当于也点击了父div，而且事件是从内而外触发的\n        for (var i in txt) {\n            txt[i].onmousedown = function(e) {\n                X = this.offsetLeft;\n                Y = this.offsetTop;\n            }\n        }\n        //松开鼠标，恢复初始值\n        function up() {\n            X = 0;\n            Y = 0;\n            state = 0;\n        }\n        //移动时，判断鼠标是否为按下。实现拖动效果\n        function move(e) {\n            if (state) {\n                document.getElementById(\"box\").style.top = e.clientY - Y + \"px\";\n                document.getElementById(\"box\").style.left = e.clientX - X + \"px\";\n            }\n        }\n    }());\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果预览：<a href=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\"><img class=\"alignnone wp-image-212 size-full\" src=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\" alt=\"\" width=\"285\" height=\"265\"></a></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n","excerpt":"<p>也不知道为什么要叫许愿墙，在<a href=\"http://www.qdfuns.com/\">前端网</a>看到许多人实现了，便来实现一个自己的版本，顺便许个愿！</p>\n<p>这里需要先看一下下面这张图，对于后面的理解很有帮助。","more":"</p>\n<p><a href=\"/img/uploads/2017/03/2014091409260873.png\"><img class=\"alignnone wp-image-213 size-medium\" src=\"/img/uploads/2017/03/2014091409260873-300x159.png\" alt=\"\" width=\"300\" height=\"159\" /></a></p>\n<p>使用方法：下面代码复制到一个html文件里，之后浏览器打开就行。</p>\n<p>具体实现在代码中注释。</p>\n<pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    /*去除默认内外边距*/\n    * {\n        margin: 0px;\n        padding: 0px;\n    }\n    /*背景颜色*/\n    html,\n    body {\n        height: 100%;\n        background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n        background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);\n    }\n    /*画边框曲线*/\n    .item {\n        width: 200px;\n        height: 200px;\n        -webkit-border-bottom-left-radius: 20px 500px;\n        -webkit-border-bottom-right-radius: 500px 30px;\n        -webkit-border-top-right-radius: 5px 100px;\n        -moz-border-bottom-left-radius: 20px 500px;\n        -moz-border-bottom-right-radius: 500px 30px;\n        -moz-border-top-right-radius: 5px 100px;\n        box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -webkit-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        -moz-box-shadow: 0 2px 10px 1px rgba(0, 0, 0, 0.2);\n        position: absolute;\n        background: #FF9FDC;\n        cursor: move;\n        z-index: 2;\n    }\n    /*文字位置和属性*/\n    .txt {\n        margin-left: 25%;\n        margin-top: 10%;\n        color: white;\n        font-size: 20px;\n        font-family: \"YouYuan\";\n    }\n    /*设置关闭链接位置*/\n    .close {\n        position: absolute;\n        bottom: 10%;\n        right: 10%;\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"item\" id=\"box\"&gt;\n        &lt;div class=\"txt\"&gt;2017许愿墙&lt;/div&gt;\n        &lt;div class=\"txt\"&gt;This is the best future&lt;/div&gt;\n        &lt;div class=\"close\"&gt;&lt;a href=\"#\" id=\"close\"&gt;关闭&lt;/a&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //理解执行函数\n    (function() {\n        //初始化变量，获取元素，设置动作\n        var state = 0,\n            X = 0,\n            Y = 0;\n        var box = document.getElementById(\"box\");\n        var txt = document.getElementsByClassName(\"txt\");\n        var close = document.getElementById(\"close\");\n        box.onmouseup = up;\n        box.onmousedown = down;\n        box.onmousemove = move;\n        close.onmousedown = closeBox;\n        //点击关闭链接box添加隐藏属性\n        function closeBox(e) {\n            e.preventDefault();\n            document.getElementById(\"box\").style.display = \"none\";\n        }\n        //鼠标按下设置开关state为1，在加上box距离左上的距离\n        function down(e) {\n            e.preventDefault();\n            state = 1;\n            X += e.offsetX;\n            Y += e.offsetY;\n        }\n        //因为点击文字也同时点击了外面的box，所以需要在点到文字的div时进行处理，把XY赋值为文字div距离外部div的左上距离\n        //这里需要理解一下浏览器点击子div的时候相当于也点击了父div，而且事件是从内而外触发的\n        for (var i in txt) {\n            txt[i].onmousedown = function(e) {\n                X = this.offsetLeft;\n                Y = this.offsetTop;\n            }\n        }\n        //松开鼠标，恢复初始值\n        function up() {\n            X = 0;\n            Y = 0;\n            state = 0;\n        }\n        //移动时，判断鼠标是否为按下。实现拖动效果\n        function move(e) {\n            if (state) {\n                document.getElementById(\"box\").style.top = e.clientY - Y + \"px\";\n                document.getElementById(\"box\").style.left = e.clientX - X + \"px\";\n            }\n        }\n    }());\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果预览：<a href=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\"><img class=\"alignnone wp-image-212 size-full\" src=\"/img/uploads/2017/03/QQ截图20170326144840.jpg\" alt=\"\" width=\"285\" height=\"265\" /></a></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>"},{"title":"php实现Soap调用的两种方法","catalog":true,"date":"2017-03-19T16:02:31.000Z","_content":"\nphp也可以通过soap（一种基于xml的协议）和webservice进行数据交互。\n\n这里通过两种方法来讲解，一个是php的SoapClient对象，另一个是php的curl。\n\n<!--more-->\n\n第一种：先要做一件事就是在php.ini中把soap扩展开了。\n<pre>extension=php_soap.dll</pre>\n然后进行php代码的编写，这里直接讲解带有header验证的soap。没有header验证的话就不需要加设置header那几行。先查看所需的xml，这里用soap12举个栗子，关注下面xml中header和body部分。\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n  xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n  &lt;soap12:Header&gt;\n    &lt;HeaderName xxx=\"url\"&gt;\n      &lt;username&gt;<span class=\"value\">int</span>&lt;/username&gt;\n      &lt;password&gt;<span class=\"value\">string</span>&lt;/password&gt;\n    &lt;/HeaderName&gt;\n  &lt;/soap12:Header&gt;\n  &lt;soap12:Body&gt;\n    &lt;FuncName xxx=\"url\"&gt;\n       &lt;neededData&gt;data&lt;/neededData&gt;\n    &lt;/FuncName&gt;\n  &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;</pre>\n<pre>&lt;?php\n//wsdl地址\n$url=\"wsdl地址\";\n//出现类似于<span class=\"pln\">SOAP</span><span class=\"pun\">-</span><span class=\"pln\">ERROR</span><span class=\"pun\">:</span> <span class=\"typ\">Parsing</span><span class=\"pln\"> WSDL</span><span class=\"pun\">:</span> <span class=\"typ\">Couldn</span><span class=\"str\">'t load from的错误时加上下面这行</span>\nlibxml_disable_entity_loader(false);\n//调用SoapClient对象\n$client=new SoapClient($url);\n//查看里面的函数数组\nprint_r($client-&gt;__getFunctions());\n//构造header\n$header = new SoapHeader('上面xml里的url','HeaderName',array('username'=&gt;xxx,'password'=&gt;xxx),true);\n//设置header\n$client-&gt;__setSoapHeaders($header);\n//调用FuncName并传入数据\n$return = $client-&gt;FuncName(array('neededData'=&gt;xxx));\nprint_r($return);</pre>\n第二种：用php的curl获取数据，之后解析xml，具体来看代码吧\n<pre>&lt;?php\n//用curl带着post包和header去获取数据\nfunction getData($soap_request){\n      //构造头信息，和第一种方法的header不一样，具体查看webservice说明。\n      $header = array(\n          \"Content-type: application/soap+xml; charset=utf-8\",\n          \"Host: xxx.xxx.xxx.xxx\",\n          \"Content-length: \".strlen($soap_request),\n        );\n      $soap_do = curl_init();\n      curl_setopt($soap_do, CURLOPT_URL, \"wsdl地址\");\n      curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );\n      curl_setopt($soap_do, CURLOPT_POST,           true );\n      curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $soap_request);\n      curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);\n      $data = curl_exec($soap_do);\n      return $data;\n}\n//处理得到的xml数据\nfunction handData($result,$parentNode,$childNode){\n      $xml=simplexml_load_string($result);\n      $result = $xml-&gt;children('http://www.w3.org/2003/05/soap-envelope')\n        -&gt;children('url')\n        -&gt;$parentNode\n        -&gt;$childNode;\n      return $result;\n}\n//使用方法\n//下面是上面xml的字符形式，将需要传入的数据直接写成标签到xml字符里\n$soap_request = \"&lt;?xml version......\";\n$return = $this-&gt;getData($soap_request);\n//后面两个参数为返回xml的body内的两个标签名\n$result = $this-&gt;handData($return,FuncName,returnData);</pre>\n总结：一般来说会选择上一种，也可以先根据自己的情况来选择一种理解。毕竟具体问题具体分析，这边不能做到全部问题都概括，所以有多个解法总比唯一解好！\n\n&nbsp;\n\n&nbsp;\n","source":"_posts/2017/article_13_php实现Soap调用的两种方法.md","raw":"\n---\ntitle: php实现Soap调用的两种方法\ncatalog: true\ndate: 2017-3-20 00:02:31\n---\n\nphp也可以通过soap（一种基于xml的协议）和webservice进行数据交互。\n\n这里通过两种方法来讲解，一个是php的SoapClient对象，另一个是php的curl。\n\n<!--more-->\n\n第一种：先要做一件事就是在php.ini中把soap扩展开了。\n<pre>extension=php_soap.dll</pre>\n然后进行php代码的编写，这里直接讲解带有header验证的soap。没有header验证的话就不需要加设置header那几行。先查看所需的xml，这里用soap12举个栗子，关注下面xml中header和body部分。\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n  xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n  &lt;soap12:Header&gt;\n    &lt;HeaderName xxx=\"url\"&gt;\n      &lt;username&gt;<span class=\"value\">int</span>&lt;/username&gt;\n      &lt;password&gt;<span class=\"value\">string</span>&lt;/password&gt;\n    &lt;/HeaderName&gt;\n  &lt;/soap12:Header&gt;\n  &lt;soap12:Body&gt;\n    &lt;FuncName xxx=\"url\"&gt;\n       &lt;neededData&gt;data&lt;/neededData&gt;\n    &lt;/FuncName&gt;\n  &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;</pre>\n<pre>&lt;?php\n//wsdl地址\n$url=\"wsdl地址\";\n//出现类似于<span class=\"pln\">SOAP</span><span class=\"pun\">-</span><span class=\"pln\">ERROR</span><span class=\"pun\">:</span> <span class=\"typ\">Parsing</span><span class=\"pln\"> WSDL</span><span class=\"pun\">:</span> <span class=\"typ\">Couldn</span><span class=\"str\">'t load from的错误时加上下面这行</span>\nlibxml_disable_entity_loader(false);\n//调用SoapClient对象\n$client=new SoapClient($url);\n//查看里面的函数数组\nprint_r($client-&gt;__getFunctions());\n//构造header\n$header = new SoapHeader('上面xml里的url','HeaderName',array('username'=&gt;xxx,'password'=&gt;xxx),true);\n//设置header\n$client-&gt;__setSoapHeaders($header);\n//调用FuncName并传入数据\n$return = $client-&gt;FuncName(array('neededData'=&gt;xxx));\nprint_r($return);</pre>\n第二种：用php的curl获取数据，之后解析xml，具体来看代码吧\n<pre>&lt;?php\n//用curl带着post包和header去获取数据\nfunction getData($soap_request){\n      //构造头信息，和第一种方法的header不一样，具体查看webservice说明。\n      $header = array(\n          \"Content-type: application/soap+xml; charset=utf-8\",\n          \"Host: xxx.xxx.xxx.xxx\",\n          \"Content-length: \".strlen($soap_request),\n        );\n      $soap_do = curl_init();\n      curl_setopt($soap_do, CURLOPT_URL, \"wsdl地址\");\n      curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );\n      curl_setopt($soap_do, CURLOPT_POST,           true );\n      curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $soap_request);\n      curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);\n      $data = curl_exec($soap_do);\n      return $data;\n}\n//处理得到的xml数据\nfunction handData($result,$parentNode,$childNode){\n      $xml=simplexml_load_string($result);\n      $result = $xml-&gt;children('http://www.w3.org/2003/05/soap-envelope')\n        -&gt;children('url')\n        -&gt;$parentNode\n        -&gt;$childNode;\n      return $result;\n}\n//使用方法\n//下面是上面xml的字符形式，将需要传入的数据直接写成标签到xml字符里\n$soap_request = \"&lt;?xml version......\";\n$return = $this-&gt;getData($soap_request);\n//后面两个参数为返回xml的body内的两个标签名\n$result = $this-&gt;handData($return,FuncName,returnData);</pre>\n总结：一般来说会选择上一种，也可以先根据自己的情况来选择一种理解。毕竟具体问题具体分析，这边不能做到全部问题都概括，所以有多个解法总比唯一解好！\n\n&nbsp;\n\n&nbsp;\n","slug":"2017/article_13_php实现Soap调用的两种方法","published":1,"updated":"2021-01-27T04:46:28.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71x000g0770q5f9iquj","content":"<p>php也可以通过soap（一种基于xml的协议）和webservice进行数据交互。</p>\n<p>这里通过两种方法来讲解，一个是php的SoapClient对象，另一个是php的curl。</p>\n<a id=\"more\"></a>\n<p>第一种：先要做一件事就是在php.ini中把soap扩展开了。</p>\n<pre>extension=php_soap.dll</pre>\n<p>然后进行php代码的编写，这里直接讲解带有header验证的soap。没有header验证的话就不需要加设置header那几行。先查看所需的xml，这里用soap12举个栗子，关注下面xml中header和body部分。</p>\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n  xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n  &lt;soap12:Header&gt;\n    &lt;HeaderName xxx=\"url\"&gt;\n      &lt;username&gt;<span class=\"value\">int</span>&lt;/username&gt;\n      &lt;password&gt;<span class=\"value\">string</span>&lt;/password&gt;\n    &lt;/HeaderName&gt;\n  &lt;/soap12:Header&gt;\n  &lt;soap12:Body&gt;\n    &lt;FuncName xxx=\"url\"&gt;\n       &lt;neededData&gt;data&lt;/neededData&gt;\n    &lt;/FuncName&gt;\n  &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;</pre>\n<pre>&lt;?php\n//wsdl地址\n$url=\"wsdl地址\";\n//出现类似于<span class=\"pln\">SOAP</span><span class=\"pun\">-</span><span class=\"pln\">ERROR</span><span class=\"pun\">:</span> <span class=\"typ\">Parsing</span><span class=\"pln\"> WSDL</span><span class=\"pun\">:</span> <span class=\"typ\">Couldn</span><span class=\"str\">'t load from的错误时加上下面这行</span>\nlibxml_disable_entity_loader(false);\n//调用SoapClient对象\n$client=new SoapClient($url);\n//查看里面的函数数组\nprint_r($client-&gt;__getFunctions());\n//构造header\n$header = new SoapHeader('上面xml里的url','HeaderName',array('username'=&gt;xxx,'password'=&gt;xxx),true);\n//设置header\n$client-&gt;__setSoapHeaders($header);\n//调用FuncName并传入数据\n$return = $client-&gt;FuncName(array('neededData'=&gt;xxx));\nprint_r($return);</pre>\n<p>第二种：用php的curl获取数据，之后解析xml，具体来看代码吧</p>\n<pre>&lt;?php\n//用curl带着post包和header去获取数据\nfunction getData($soap_request){\n      //构造头信息，和第一种方法的header不一样，具体查看webservice说明。\n      $header = array(\n          \"Content-type: application/soap+xml; charset=utf-8\",\n          \"Host: xxx.xxx.xxx.xxx\",\n          \"Content-length: \".strlen($soap_request),\n        );\n      $soap_do = curl_init();\n      curl_setopt($soap_do, CURLOPT_URL, \"wsdl地址\");\n      curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );\n      curl_setopt($soap_do, CURLOPT_POST,           true );\n      curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $soap_request);\n      curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);\n      $data = curl_exec($soap_do);\n      return $data;\n}\n//处理得到的xml数据\nfunction handData($result,$parentNode,$childNode){\n      $xml=simplexml_load_string($result);\n      $result = $xml-&gt;children('http://www.w3.org/2003/05/soap-envelope')\n        -&gt;children('url')\n        -&gt;$parentNode\n        -&gt;$childNode;\n      return $result;\n}\n//使用方法\n//下面是上面xml的字符形式，将需要传入的数据直接写成标签到xml字符里\n$soap_request = \"&lt;?xml version......\";\n$return = $this-&gt;getData($soap_request);\n//后面两个参数为返回xml的body内的两个标签名\n$result = $this-&gt;handData($return,FuncName,returnData);</pre>\n<p>总结：一般来说会选择上一种，也可以先根据自己的情况来选择一种理解。毕竟具体问题具体分析，这边不能做到全部问题都概括，所以有多个解法总比唯一解好！</p>\n<p> </p>\n<p> </p>\n","excerpt":"<p>php也可以通过soap（一种基于xml的协议）和webservice进行数据交互。</p>\n<p>这里通过两种方法来讲解，一个是php的SoapClient对象，另一个是php的curl。</p>","more":"<p>第一种：先要做一件事就是在php.ini中把soap扩展开了。</p>\n<pre>extension=php_soap.dll</pre>\n<p>然后进行php代码的编写，这里直接讲解带有header验证的soap。没有header验证的话就不需要加设置header那几行。先查看所需的xml，这里用soap12举个栗子，关注下面xml中header和body部分。</p>\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;soap12:Envelope \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n  xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\"&gt;\n  &lt;soap12:Header&gt;\n    &lt;HeaderName xxx=\"url\"&gt;\n      &lt;username&gt;<span class=\"value\">int</span>&lt;/username&gt;\n      &lt;password&gt;<span class=\"value\">string</span>&lt;/password&gt;\n    &lt;/HeaderName&gt;\n  &lt;/soap12:Header&gt;\n  &lt;soap12:Body&gt;\n    &lt;FuncName xxx=\"url\"&gt;\n       &lt;neededData&gt;data&lt;/neededData&gt;\n    &lt;/FuncName&gt;\n  &lt;/soap12:Body&gt;\n&lt;/soap12:Envelope&gt;</pre>\n<pre>&lt;?php\n//wsdl地址\n$url=\"wsdl地址\";\n//出现类似于<span class=\"pln\">SOAP</span><span class=\"pun\">-</span><span class=\"pln\">ERROR</span><span class=\"pun\">:</span> <span class=\"typ\">Parsing</span><span class=\"pln\"> WSDL</span><span class=\"pun\">:</span> <span class=\"typ\">Couldn</span><span class=\"str\">'t load from的错误时加上下面这行</span>\nlibxml_disable_entity_loader(false);\n//调用SoapClient对象\n$client=new SoapClient($url);\n//查看里面的函数数组\nprint_r($client-&gt;__getFunctions());\n//构造header\n$header = new SoapHeader('上面xml里的url','HeaderName',array('username'=&gt;xxx,'password'=&gt;xxx),true);\n//设置header\n$client-&gt;__setSoapHeaders($header);\n//调用FuncName并传入数据\n$return = $client-&gt;FuncName(array('neededData'=&gt;xxx));\nprint_r($return);</pre>\n<p>第二种：用php的curl获取数据，之后解析xml，具体来看代码吧</p>\n<pre>&lt;?php\n//用curl带着post包和header去获取数据\nfunction getData($soap_request){\n      //构造头信息，和第一种方法的header不一样，具体查看webservice说明。\n      $header = array(\n          \"Content-type: application/soap+xml; charset=utf-8\",\n          \"Host: xxx.xxx.xxx.xxx\",\n          \"Content-length: \".strlen($soap_request),\n        );\n      $soap_do = curl_init();\n      curl_setopt($soap_do, CURLOPT_URL, \"wsdl地址\");\n      curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );\n      curl_setopt($soap_do, CURLOPT_POST,           true );\n      curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $soap_request);\n      curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);\n      $data = curl_exec($soap_do);\n      return $data;\n}\n//处理得到的xml数据\nfunction handData($result,$parentNode,$childNode){\n      $xml=simplexml_load_string($result);\n      $result = $xml-&gt;children('http://www.w3.org/2003/05/soap-envelope')\n        -&gt;children('url')\n        -&gt;$parentNode\n        -&gt;$childNode;\n      return $result;\n}\n//使用方法\n//下面是上面xml的字符形式，将需要传入的数据直接写成标签到xml字符里\n$soap_request = \"&lt;?xml version......\";\n$return = $this-&gt;getData($soap_request);\n//后面两个参数为返回xml的body内的两个标签名\n$result = $this-&gt;handData($return,FuncName,returnData);</pre>\n<p>总结：一般来说会选择上一种，也可以先根据自己的情况来选择一种理解。毕竟具体问题具体分析，这边不能做到全部问题都概括，所以有多个解法总比唯一解好！</p>\n<p> </p>\n<p> </p>"},{"title":"logistics回归做二分类---学习篇","catalog":true,"date":"2017-03-18T17:33:03.000Z","_content":"\n一般的logistics回归过程并不复杂，特别是在理解了梯度下降之后，梯度下降法可以参考我之前的文章，<a href=\"http://ganjiacheng.cn/blog/?p=148\">点击这里查看</a>\n\n大致讲一下理解：<!--more-->\n\n大致还是通过梯度下降把需要拟合的直线的前面的系数渐渐靠近，比如用ax+by+c=0，这条直线来进行二分类，a，b，c三个系数就是下面代码中的数组weight，每次迭代改变的就是weight。然后误差是通过把每组训练的数进行sigmoid函数  <img class=\"alignnone size-full wp-image-188\" src=\"/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png\" alt=\"\" width=\"99\" height=\"35\" />，在与之前分好的类（这里是txt文件里的-1和1）进行求差就是每次的误差值。具体代码里还有解释。\n\n\"testSet.txt\"是《机器学习实战》里的一个例子的文件，这里引用一下，下载地址在<a href=\"http://pan.baidu.com/s/1pLLMJdp\">http://pan.baidu.com/s/1pLLMJdp</a>\n\n这个例子很考验矩阵运算，建议回顾一下线性代数哦！\n<pre>#python2.7\n#引入必要文件\nimport matplotlib.pyplot as plt\nimport numpy as np\n#打开文件\nf=open(\"testSet.txt\")\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\nlabel=[]\ndata=[]\n#读取文件\nfor i in f.readlines():\n    #strip()是除去开头空格，split()是以空格为间断，变成数组。\n    linearr=i.strip().split()\n    #读取坐标，这里补1.0是为了使数组长度变成3，便于之后矩阵运算\n    data.append([1.0,float(linearr[0]),float(linearr[1])])\n    #读取分类\n    label.append(int(linearr[2]))\n    #为了展示点的分布，分开读取不同类的点\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\n#使list变成numpy里的matrix矩阵\ndataMatrix=np.mat(data)\n#transpose()是矩阵的转置\nlabelMat=np.mat(label).transpose()\nm,n=np.shape(dataMatrix)\n#梯度下降步长\nalpha=0.001\n#梯度下降次数\nmax=500\n#先设定三个系数为1\nweights=np.ones((n,1))\n#梯度下降主步骤，求sigmoid，和分类对比正确性，在求新的weights\nfor k in range(max):\n    h=1.0/(1+np.exp(-dataMatrix*weights))\n    error=(labelMat-h)\n    weights=weights+alpha*dataMatrix.transpose()*error\n#创建等差数列\nx=np.linspace(-3,3)\n#计算y值\ny=(-weights[0,0]-weights[1,0]*x)/weights[2,0]\n#画图\nplt.plot(x,y)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n效果展示：<a href=\"/img/uploads/2017/03/QQ截图20170319012731.jpg\"><img class=\"alignnone wp-image-180 size-medium\" src=\"/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg\" alt=\"\" width=\"300\" height=\"240\" /></a>\n\n总的来说还可以。梯度下降那块可以优化成随机梯度下降，可以进行更少的迭代获得同等的效果。\n\n&nbsp;\n","source":"_posts/2017/article_14_logistics回归做二分类---学习篇.md","raw":"\n---\ntitle: logistics回归做二分类---学习篇\ncatalog: true\ndate: 2017-3-19 01:33:03\n---\n\n一般的logistics回归过程并不复杂，特别是在理解了梯度下降之后，梯度下降法可以参考我之前的文章，<a href=\"http://ganjiacheng.cn/blog/?p=148\">点击这里查看</a>\n\n大致讲一下理解：<!--more-->\n\n大致还是通过梯度下降把需要拟合的直线的前面的系数渐渐靠近，比如用ax+by+c=0，这条直线来进行二分类，a，b，c三个系数就是下面代码中的数组weight，每次迭代改变的就是weight。然后误差是通过把每组训练的数进行sigmoid函数  <img class=\"alignnone size-full wp-image-188\" src=\"/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png\" alt=\"\" width=\"99\" height=\"35\" />，在与之前分好的类（这里是txt文件里的-1和1）进行求差就是每次的误差值。具体代码里还有解释。\n\n\"testSet.txt\"是《机器学习实战》里的一个例子的文件，这里引用一下，下载地址在<a href=\"http://pan.baidu.com/s/1pLLMJdp\">http://pan.baidu.com/s/1pLLMJdp</a>\n\n这个例子很考验矩阵运算，建议回顾一下线性代数哦！\n<pre>#python2.7\n#引入必要文件\nimport matplotlib.pyplot as plt\nimport numpy as np\n#打开文件\nf=open(\"testSet.txt\")\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\nlabel=[]\ndata=[]\n#读取文件\nfor i in f.readlines():\n    #strip()是除去开头空格，split()是以空格为间断，变成数组。\n    linearr=i.strip().split()\n    #读取坐标，这里补1.0是为了使数组长度变成3，便于之后矩阵运算\n    data.append([1.0,float(linearr[0]),float(linearr[1])])\n    #读取分类\n    label.append(int(linearr[2]))\n    #为了展示点的分布，分开读取不同类的点\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\n#使list变成numpy里的matrix矩阵\ndataMatrix=np.mat(data)\n#transpose()是矩阵的转置\nlabelMat=np.mat(label).transpose()\nm,n=np.shape(dataMatrix)\n#梯度下降步长\nalpha=0.001\n#梯度下降次数\nmax=500\n#先设定三个系数为1\nweights=np.ones((n,1))\n#梯度下降主步骤，求sigmoid，和分类对比正确性，在求新的weights\nfor k in range(max):\n    h=1.0/(1+np.exp(-dataMatrix*weights))\n    error=(labelMat-h)\n    weights=weights+alpha*dataMatrix.transpose()*error\n#创建等差数列\nx=np.linspace(-3,3)\n#计算y值\ny=(-weights[0,0]-weights[1,0]*x)/weights[2,0]\n#画图\nplt.plot(x,y)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n效果展示：<a href=\"/img/uploads/2017/03/QQ截图20170319012731.jpg\"><img class=\"alignnone wp-image-180 size-medium\" src=\"/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg\" alt=\"\" width=\"300\" height=\"240\" /></a>\n\n总的来说还可以。梯度下降那块可以优化成随机梯度下降，可以进行更少的迭代获得同等的效果。\n\n&nbsp;\n","slug":"2017/article_14_logistics回归做二分类---学习篇","published":1,"updated":"2021-01-27T04:46:28.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71y000h0770ddnvtznj","content":"<p>一般的logistics回归过程并不复杂，特别是在理解了梯度下降之后，梯度下降法可以参考我之前的文章，<a href=\"http://ganjiacheng.cn/blog/?p=148\">点击这里查看</a></p>\n<p>大致讲一下理解：<a id=\"more\"></a></p>\n<p>大致还是通过梯度下降把需要拟合的直线的前面的系数渐渐靠近，比如用ax+by+c=0，这条直线来进行二分类，a，b，c三个系数就是下面代码中的数组weight，每次迭代改变的就是weight。然后误差是通过把每组训练的数进行sigmoid函数  <img class=\"alignnone size-full wp-image-188\" src=\"/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png\" alt=\"\" width=\"99\" height=\"35\">，在与之前分好的类（这里是txt文件里的-1和1）进行求差就是每次的误差值。具体代码里还有解释。</p>\n<p>&quot;testSet.txt&quot;是《机器学习实战》里的一个例子的文件，这里引用一下，下载地址在<a href=\"http://pan.baidu.com/s/1pLLMJdp\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1pLLMJdp</a></p>\n<p>这个例子很考验矩阵运算，建议回顾一下线性代数哦！</p>\n<pre>#python2.7\n#引入必要文件\nimport matplotlib.pyplot as plt\nimport numpy as np\n#打开文件\nf=open(\"testSet.txt\")\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\nlabel=[]\ndata=[]\n#读取文件\nfor i in f.readlines():\n    #strip()是除去开头空格，split()是以空格为间断，变成数组。\n    linearr=i.strip().split()\n    #读取坐标，这里补1.0是为了使数组长度变成3，便于之后矩阵运算\n    data.append([1.0,float(linearr[0]),float(linearr[1])])\n    #读取分类\n    label.append(int(linearr[2]))\n    #为了展示点的分布，分开读取不同类的点\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\n#使list变成numpy里的matrix矩阵\ndataMatrix=np.mat(data)\n#transpose()是矩阵的转置\nlabelMat=np.mat(label).transpose()\nm,n=np.shape(dataMatrix)\n#梯度下降步长\nalpha=0.001\n#梯度下降次数\nmax=500\n#先设定三个系数为1\nweights=np.ones((n,1))\n#梯度下降主步骤，求sigmoid，和分类对比正确性，在求新的weights\nfor k in range(max):\n    h=1.0/(1+np.exp(-dataMatrix*weights))\n    error=(labelMat-h)\n    weights=weights+alpha*dataMatrix.transpose()*error\n#创建等差数列\nx=np.linspace(-3,3)\n#计算y值\ny=(-weights[0,0]-weights[1,0]*x)/weights[2,0]\n#画图\nplt.plot(x,y)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/03/QQ截图20170319012731.jpg\"><img class=\"alignnone wp-image-180 size-medium\" src=\"/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg\" alt=\"\" width=\"300\" height=\"240\"></a></p>\n<p>总的来说还可以。梯度下降那块可以优化成随机梯度下降，可以进行更少的迭代获得同等的效果。</p>\n<p> </p>\n","excerpt":"<p>一般的logistics回归过程并不复杂，特别是在理解了梯度下降之后，梯度下降法可以参考我之前的文章，<a href=\"http://ganjiacheng.cn/blog/?p=148\">点击这里查看</a></p>\n<p>大致讲一下理解：","more":"</p>\n<p>大致还是通过梯度下降把需要拟合的直线的前面的系数渐渐靠近，比如用ax+by+c=0，这条直线来进行二分类，a，b，c三个系数就是下面代码中的数组weight，每次迭代改变的就是weight。然后误差是通过把每组训练的数进行sigmoid函数  <img class=\"alignnone size-full wp-image-188\" src=\"/img/uploads/2017/03/0df3d7ca7bcb0a4659502a5f6f63f6246b60af62.jpg.png\" alt=\"\" width=\"99\" height=\"35\" />，在与之前分好的类（这里是txt文件里的-1和1）进行求差就是每次的误差值。具体代码里还有解释。</p>\n<p>&quot;testSet.txt&quot;是《机器学习实战》里的一个例子的文件，这里引用一下，下载地址在<a href=\"http://pan.baidu.com/s/1pLLMJdp\">http://pan.baidu.com/s/1pLLMJdp</a></p>\n<p>这个例子很考验矩阵运算，建议回顾一下线性代数哦！</p>\n<pre>#python2.7\n#引入必要文件\nimport matplotlib.pyplot as plt\nimport numpy as np\n#打开文件\nf=open(\"testSet.txt\")\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\nlabel=[]\ndata=[]\n#读取文件\nfor i in f.readlines():\n    #strip()是除去开头空格，split()是以空格为间断，变成数组。\n    linearr=i.strip().split()\n    #读取坐标，这里补1.0是为了使数组长度变成3，便于之后矩阵运算\n    data.append([1.0,float(linearr[0]),float(linearr[1])])\n    #读取分类\n    label.append(int(linearr[2]))\n    #为了展示点的分布，分开读取不同类的点\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\n#使list变成numpy里的matrix矩阵\ndataMatrix=np.mat(data)\n#transpose()是矩阵的转置\nlabelMat=np.mat(label).transpose()\nm,n=np.shape(dataMatrix)\n#梯度下降步长\nalpha=0.001\n#梯度下降次数\nmax=500\n#先设定三个系数为1\nweights=np.ones((n,1))\n#梯度下降主步骤，求sigmoid，和分类对比正确性，在求新的weights\nfor k in range(max):\n    h=1.0/(1+np.exp(-dataMatrix*weights))\n    error=(labelMat-h)\n    weights=weights+alpha*dataMatrix.transpose()*error\n#创建等差数列\nx=np.linspace(-3,3)\n#计算y值\ny=(-weights[0,0]-weights[1,0]*x)/weights[2,0]\n#画图\nplt.plot(x,y)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/03/QQ截图20170319012731.jpg\"><img class=\"alignnone wp-image-180 size-medium\" src=\"/img/uploads/2017/03/QQ截图20170319012731-300x240.jpg\" alt=\"\" width=\"300\" height=\"240\" /></a></p>\n<p>总的来说还可以。梯度下降那块可以优化成随机梯度下降，可以进行更少的迭代获得同等的效果。</p>\n<p> </p>"},{"title":"nginx+php下配置https","catalog":true,"date":"2017-03-30T14:10:50.000Z","_content":"\n本来以为配置https应该和配置http是差不多的，没想到还是出了许多问题，分享给大家。\n\n现在市面有许多免费的ssl证书，可以找一个，本人使用了<a href=\"https://www.qcloud.com/product/ssl\">腾讯云的免费dv证书</a>。<!--more-->\n\n之后就会得到两个文件，分别为test.com_bundle.crt和test.com.key\n\n本人配置的环境是在centos，php集成环境lnmp下\n\n先在服务器找到文件usr/local/nginx/conf/nginx.conf\n\n之后把上述两个文件放到同一目录下，在原本的server listen 80下面新开一个server listen 443，代码如下\n<pre>server {\n        listen 443;\n        server_name test.com; #填写绑定证书的域名\n        ssl on;\n        ssl_certificate test.com_bundle.crt;\n        ssl_certificate_key test.com.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n        ssl_prefer_server_ciphers on;\n        location / {\n            root   /home/wwwroot/default;\n            index  index.html index.htm index.php;\n        }\n        location ~ [^/]\\.php(/|$)\n            {\n                #这个root必须加上.\n                root   /home/wwwroot/default;\n                # comment try_files $uri =404; to enable pathinfo\n                try_files $uri =404;\n                fastcgi_pass  unix:/tmp/php-cgi.sock;\n                fastcgi_index index.php;\n                include fastcgi.conf;\n                #include pathinfo.conf;\n                #开启https\n                include fastcgi_params;\n                fastcgi_param HTTPS on;\n            }\n    }</pre>\n之后如果想要把http的都转到https去，可以在server listen 80里面location最上面加如下一段\n<pre>location / {\n                rewrite ^(.*) https://$host$1 permanent;\n        }</pre>\n之后需要远程连接服务器到命令行输入\n<pre>nginx -s reload</pre>\n最后打开浏览器访问看看效果\n","source":"_posts/2017/article_17_nginx+php下配置https.md","raw":"\n---\ntitle: nginx+php下配置https\ncatalog: true\ndate: 2017-3-30 22:10:50\n---\n\n本来以为配置https应该和配置http是差不多的，没想到还是出了许多问题，分享给大家。\n\n现在市面有许多免费的ssl证书，可以找一个，本人使用了<a href=\"https://www.qcloud.com/product/ssl\">腾讯云的免费dv证书</a>。<!--more-->\n\n之后就会得到两个文件，分别为test.com_bundle.crt和test.com.key\n\n本人配置的环境是在centos，php集成环境lnmp下\n\n先在服务器找到文件usr/local/nginx/conf/nginx.conf\n\n之后把上述两个文件放到同一目录下，在原本的server listen 80下面新开一个server listen 443，代码如下\n<pre>server {\n        listen 443;\n        server_name test.com; #填写绑定证书的域名\n        ssl on;\n        ssl_certificate test.com_bundle.crt;\n        ssl_certificate_key test.com.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n        ssl_prefer_server_ciphers on;\n        location / {\n            root   /home/wwwroot/default;\n            index  index.html index.htm index.php;\n        }\n        location ~ [^/]\\.php(/|$)\n            {\n                #这个root必须加上.\n                root   /home/wwwroot/default;\n                # comment try_files $uri =404; to enable pathinfo\n                try_files $uri =404;\n                fastcgi_pass  unix:/tmp/php-cgi.sock;\n                fastcgi_index index.php;\n                include fastcgi.conf;\n                #include pathinfo.conf;\n                #开启https\n                include fastcgi_params;\n                fastcgi_param HTTPS on;\n            }\n    }</pre>\n之后如果想要把http的都转到https去，可以在server listen 80里面location最上面加如下一段\n<pre>location / {\n                rewrite ^(.*) https://$host$1 permanent;\n        }</pre>\n之后需要远程连接服务器到命令行输入\n<pre>nginx -s reload</pre>\n最后打开浏览器访问看看效果\n","slug":"2017/article_17_nginx+php下配置https","published":1,"updated":"2021-01-27T04:46:28.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh71z000i0770xy0kfpz3","content":"<p>本来以为配置https应该和配置http是差不多的，没想到还是出了许多问题，分享给大家。</p>\n<p>现在市面有许多免费的ssl证书，可以找一个，本人使用了<a href=\"https://www.qcloud.com/product/ssl\" target=\"_blank\" rel=\"external\">腾讯云的免费dv证书</a>。<a id=\"more\"></a></p>\n<p>之后就会得到两个文件，分别为test.com_bundle.crt和test.com.key</p>\n<p>本人配置的环境是在centos，php集成环境lnmp下</p>\n<p>先在服务器找到文件usr/local/nginx/conf/nginx.conf</p>\n<p>之后把上述两个文件放到同一目录下，在原本的server listen 80下面新开一个server listen 443，代码如下</p>\n<pre>server {\n        listen 443;\n        server_name test.com; #填写绑定证书的域名\n        ssl on;\n        ssl_certificate test.com_bundle.crt;\n        ssl_certificate_key test.com.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n        ssl_prefer_server_ciphers on;\n        location / {\n            root   /home/wwwroot/default;\n            index  index.html index.htm index.php;\n        }\n        location ~ [^/]\\.php(/|$)\n            {\n                #这个root必须加上.\n                root   /home/wwwroot/default;\n                # comment try_files $uri =404; to enable pathinfo\n                try_files $uri =404;\n                fastcgi_pass  unix:/tmp/php-cgi.sock;\n                fastcgi_index index.php;\n                include fastcgi.conf;\n                #include pathinfo.conf;\n                #开启https\n                include fastcgi_params;\n                fastcgi_param HTTPS on;\n            }\n    }</pre>\n<p>之后如果想要把http的都转到https去，可以在server listen 80里面location最上面加如下一段</p>\n<pre>location / {\n                rewrite ^(.*) https://$host$1 permanent;\n        }</pre>\n<p>之后需要远程连接服务器到命令行输入</p>\n<pre>nginx -s reload</pre>\n<p>最后打开浏览器访问看看效果</p>\n","excerpt":"<p>本来以为配置https应该和配置http是差不多的，没想到还是出了许多问题，分享给大家。</p>\n<p>现在市面有许多免费的ssl证书，可以找一个，本人使用了<a href=\"https://www.qcloud.com/product/ssl\">腾讯云的免费dv证书</a>。","more":"</p>\n<p>之后就会得到两个文件，分别为test.com_bundle.crt和test.com.key</p>\n<p>本人配置的环境是在centos，php集成环境lnmp下</p>\n<p>先在服务器找到文件usr/local/nginx/conf/nginx.conf</p>\n<p>之后把上述两个文件放到同一目录下，在原本的server listen 80下面新开一个server listen 443，代码如下</p>\n<pre>server {\n        listen 443;\n        server_name test.com; #填写绑定证书的域名\n        ssl on;\n        ssl_certificate test.com_bundle.crt;\n        ssl_certificate_key test.com.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n        ssl_prefer_server_ciphers on;\n        location / {\n            root   /home/wwwroot/default;\n            index  index.html index.htm index.php;\n        }\n        location ~ [^/]\\.php(/|$)\n            {\n                #这个root必须加上.\n                root   /home/wwwroot/default;\n                # comment try_files $uri =404; to enable pathinfo\n                try_files $uri =404;\n                fastcgi_pass  unix:/tmp/php-cgi.sock;\n                fastcgi_index index.php;\n                include fastcgi.conf;\n                #include pathinfo.conf;\n                #开启https\n                include fastcgi_params;\n                fastcgi_param HTTPS on;\n            }\n    }</pre>\n<p>之后如果想要把http的都转到https去，可以在server listen 80里面location最上面加如下一段</p>\n<pre>location / {\n                rewrite ^(.*) https://$host$1 permanent;\n        }</pre>\n<p>之后需要远程连接服务器到命令行输入</p>\n<pre>nginx -s reload</pre>\n<p>最后打开浏览器访问看看效果</p>"},{"title":"python实现简单时时打印桌面程序","catalog":true,"date":"2017-03-30T16:01:39.000Z","_content":"\n这里的需求是用户在某个网页下单之后，需要打印机打出票据。\n\n实现：用python访问一个网络接口获取需要打印的数据（json格式），之后调用系统win32print的打印接口打印出来。\n\n时时打印的话下面用轮询并定时sleep实现。<!--more-->\n\n再用Tkinter写一个桌面程序可以用来提醒并可以使程序长久运行。\n\n之后再用py2exe把python文件变成一个exe文件方便在后台执行。\n<pre>#coding:utf-8\n#python2.7\n#引入需要的库\nfrom tkMessageBox import *\nfrom Tkinter import *\nimport hashlib\nimport urllib2\nimport json\nimport win32ui  \nimport win32print  \nimport win32con  \nimport time\nimport socket\n#定义打印机，获取内容，定义样式，打印\ndef send_to_printer(title,txt,txt1,txt2,txt3,txt4,txt5): \n    hDC = win32ui.CreateDC()  \n    hDC.CreatePrinterDC(win32print.GetDefaultPrinter())  \n    hDC.StartDoc(title)\n    hDC.StartPage()\n    hDC.SetMapMode(win32con.MM_TWIPS)\n    #定义位置\n    ulc_x = 1000  \n    lrc_x = 11500  \n    lrc_y = -11500 \n    ulc_y = -100  \n    hDC.DrawText(txt,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 100\n    ulc_y = -400  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 100\n    ulc_y = -2300  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 150 \n    ulc_y = -700  \n    hDC.DrawText(txt2,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1000  \n    hDC.DrawText(txt3,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    #修改字体大小\n    font = win32ui.CreateFont({\n        \"name\": \"Lucida Console\",\n        \"height\": 400,\n        \"weight\": 400,\n    })\n    hDC.SelectObject(font) \n    ulc_x = 150 \n    ulc_y = -1400  \n    hDC.DrawText(txt4,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1800  \n    hDC.DrawText(txt5,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    hDC.EndPage()  \n    hDC.EndDoc()\n#开一个桌面程序，提醒并在后台运行\nroot = Tk()\n#设置socket超时时间\nsocket.setdefaulttimeout(20)\nshowinfo('信息', '打印机已成功运行')\nroot.destroy()\n#下面轮询调用接口并处理数据，导入打印\nwhile 1:\n    #捕获所有错误，使中间不会中断\n    try:\n        #调用接口获取json并处理\n        response = urllib2.urlopen('http://test.com') \n        ret = response.read()\n        #print ret\n        res=json.loads(ret)\n        #处理数据这部分自定义\n        txt=\"1\";txt2=\"2\";txt3=\"3\";txt4=\"4\";txt5=\"5\"\n        send_to_printer(\"title\",txt,txt1,txt2,txt3,txt4,txt5)\n        response.close()\n        #5秒调用一次\n        time.sleep(5)\n    except Exception,e:  \n        #错误处理，可以打印在log上，这里只简单的捕获\n        print Exception,\":\",e</pre>\n在用py2exe之前还得写另一个setup.py\n<pre>from distutils.core import setup\nimport py2exe\n#filename是上面写的那个python文件的文件名\nsetup(windows=[\"filename.py\"])</pre>\n把两个文件放在同目录下，用shift+右键，在此处打开命令行，运行\n<pre>python setup.py py2exe</pre>\n在产生的dist文件夹里有相同文件名的exe文件，可以双击直接执行，会先报一个成功运行，之后就在后台运行。\n\n因为他会在后台一直运行着，所以关闭的话也得到任务管理器-&gt;进程里找到那个文件名的exe后台进程，把它结束掉就行。\n","source":"_posts/2017/article_18_python实现简单时时打印桌面程序.md","raw":"\n---\ntitle: python实现简单时时打印桌面程序\ncatalog: true\ndate: 2017-3-31 00:01:39\n---\n\n这里的需求是用户在某个网页下单之后，需要打印机打出票据。\n\n实现：用python访问一个网络接口获取需要打印的数据（json格式），之后调用系统win32print的打印接口打印出来。\n\n时时打印的话下面用轮询并定时sleep实现。<!--more-->\n\n再用Tkinter写一个桌面程序可以用来提醒并可以使程序长久运行。\n\n之后再用py2exe把python文件变成一个exe文件方便在后台执行。\n<pre>#coding:utf-8\n#python2.7\n#引入需要的库\nfrom tkMessageBox import *\nfrom Tkinter import *\nimport hashlib\nimport urllib2\nimport json\nimport win32ui  \nimport win32print  \nimport win32con  \nimport time\nimport socket\n#定义打印机，获取内容，定义样式，打印\ndef send_to_printer(title,txt,txt1,txt2,txt3,txt4,txt5): \n    hDC = win32ui.CreateDC()  \n    hDC.CreatePrinterDC(win32print.GetDefaultPrinter())  \n    hDC.StartDoc(title)\n    hDC.StartPage()\n    hDC.SetMapMode(win32con.MM_TWIPS)\n    #定义位置\n    ulc_x = 1000  \n    lrc_x = 11500  \n    lrc_y = -11500 \n    ulc_y = -100  \n    hDC.DrawText(txt,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 100\n    ulc_y = -400  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 100\n    ulc_y = -2300  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 150 \n    ulc_y = -700  \n    hDC.DrawText(txt2,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1000  \n    hDC.DrawText(txt3,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    #修改字体大小\n    font = win32ui.CreateFont({\n        \"name\": \"Lucida Console\",\n        \"height\": 400,\n        \"weight\": 400,\n    })\n    hDC.SelectObject(font) \n    ulc_x = 150 \n    ulc_y = -1400  \n    hDC.DrawText(txt4,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1800  \n    hDC.DrawText(txt5,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    hDC.EndPage()  \n    hDC.EndDoc()\n#开一个桌面程序，提醒并在后台运行\nroot = Tk()\n#设置socket超时时间\nsocket.setdefaulttimeout(20)\nshowinfo('信息', '打印机已成功运行')\nroot.destroy()\n#下面轮询调用接口并处理数据，导入打印\nwhile 1:\n    #捕获所有错误，使中间不会中断\n    try:\n        #调用接口获取json并处理\n        response = urllib2.urlopen('http://test.com') \n        ret = response.read()\n        #print ret\n        res=json.loads(ret)\n        #处理数据这部分自定义\n        txt=\"1\";txt2=\"2\";txt3=\"3\";txt4=\"4\";txt5=\"5\"\n        send_to_printer(\"title\",txt,txt1,txt2,txt3,txt4,txt5)\n        response.close()\n        #5秒调用一次\n        time.sleep(5)\n    except Exception,e:  \n        #错误处理，可以打印在log上，这里只简单的捕获\n        print Exception,\":\",e</pre>\n在用py2exe之前还得写另一个setup.py\n<pre>from distutils.core import setup\nimport py2exe\n#filename是上面写的那个python文件的文件名\nsetup(windows=[\"filename.py\"])</pre>\n把两个文件放在同目录下，用shift+右键，在此处打开命令行，运行\n<pre>python setup.py py2exe</pre>\n在产生的dist文件夹里有相同文件名的exe文件，可以双击直接执行，会先报一个成功运行，之后就在后台运行。\n\n因为他会在后台一直运行着，所以关闭的话也得到任务管理器-&gt;进程里找到那个文件名的exe后台进程，把它结束掉就行。\n","slug":"2017/article_18_python实现简单时时打印桌面程序","published":1,"updated":"2021-01-27T04:46:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh720000j0770tk8c2bdl","content":"<p>这里的需求是用户在某个网页下单之后，需要打印机打出票据。</p>\n<p>实现：用python访问一个网络接口获取需要打印的数据（json格式），之后调用系统win32print的打印接口打印出来。</p>\n<p>时时打印的话下面用轮询并定时sleep实现。<a id=\"more\"></a></p>\n<p>再用Tkinter写一个桌面程序可以用来提醒并可以使程序长久运行。</p>\n<p>之后再用py2exe把python文件变成一个exe文件方便在后台执行。</p>\n<pre>#coding:utf-8\n#python2.7\n#引入需要的库\nfrom tkMessageBox import *\nfrom Tkinter import *\nimport hashlib\nimport urllib2\nimport json\nimport win32ui  \nimport win32print  \nimport win32con  \nimport time\nimport socket\n#定义打印机，获取内容，定义样式，打印\ndef send_to_printer(title,txt,txt1,txt2,txt3,txt4,txt5): \n    hDC = win32ui.CreateDC()  \n    hDC.CreatePrinterDC(win32print.GetDefaultPrinter())  \n    hDC.StartDoc(title)\n    hDC.StartPage()\n    hDC.SetMapMode(win32con.MM_TWIPS)\n    #定义位置\n    ulc_x = 1000  \n    lrc_x = 11500  \n    lrc_y = -11500 \n    ulc_y = -100  \n    hDC.DrawText(txt,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 100\n    ulc_y = -400  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 100\n    ulc_y = -2300  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 150 \n    ulc_y = -700  \n    hDC.DrawText(txt2,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1000  \n    hDC.DrawText(txt3,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    #修改字体大小\n    font = win32ui.CreateFont({\n        \"name\": \"Lucida Console\",\n        \"height\": 400,\n        \"weight\": 400,\n    })\n    hDC.SelectObject(font) \n    ulc_x = 150 \n    ulc_y = -1400  \n    hDC.DrawText(txt4,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1800  \n    hDC.DrawText(txt5,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    hDC.EndPage()  \n    hDC.EndDoc()\n#开一个桌面程序，提醒并在后台运行\nroot = Tk()\n#设置socket超时时间\nsocket.setdefaulttimeout(20)\nshowinfo('信息', '打印机已成功运行')\nroot.destroy()\n#下面轮询调用接口并处理数据，导入打印\nwhile 1:\n    #捕获所有错误，使中间不会中断\n    try:\n        #调用接口获取json并处理\n        response = urllib2.urlopen('http://test.com') \n        ret = response.read()\n        #print ret\n        res=json.loads(ret)\n        #处理数据这部分自定义\n        txt=\"1\";txt2=\"2\";txt3=\"3\";txt4=\"4\";txt5=\"5\"\n        send_to_printer(\"title\",txt,txt1,txt2,txt3,txt4,txt5)\n        response.close()\n        #5秒调用一次\n        time.sleep(5)\n    except Exception,e:  \n        #错误处理，可以打印在log上，这里只简单的捕获\n        print Exception,\":\",e</pre>\n<p><a href=\"http://xn--py2exesetup-qm8q8q0ol32bjwcy1jwmqj62bve9fpewf.py\" target=\"_blank\" rel=\"external\">在用py2exe之前还得写另一个setup.py</a></p>\n<pre>from distutils.core import setup\nimport py2exe\n#filename是上面写的那个python文件的文件名\nsetup(windows=[\"filename.py\"])</pre>\n<p>把两个文件放在同目录下，用shift+右键，在此处打开命令行，运行</p>\n<pre>python setup.py py2exe</pre>\n<p>在产生的dist文件夹里有相同文件名的exe文件，可以双击直接执行，会先报一个成功运行，之后就在后台运行。</p>\n<p>因为他会在后台一直运行着，所以关闭的话也得到任务管理器-&gt;进程里找到那个文件名的exe后台进程，把它结束掉就行。</p>\n","excerpt":"<p>这里的需求是用户在某个网页下单之后，需要打印机打出票据。</p>\n<p>实现：用python访问一个网络接口获取需要打印的数据（json格式），之后调用系统win32print的打印接口打印出来。</p>\n<p>时时打印的话下面用轮询并定时sleep实现。","more":"</p>\n<p>再用Tkinter写一个桌面程序可以用来提醒并可以使程序长久运行。</p>\n<p>之后再用py2exe把python文件变成一个exe文件方便在后台执行。</p>\n<pre>#coding:utf-8\n#python2.7\n#引入需要的库\nfrom tkMessageBox import *\nfrom Tkinter import *\nimport hashlib\nimport urllib2\nimport json\nimport win32ui  \nimport win32print  \nimport win32con  \nimport time\nimport socket\n#定义打印机，获取内容，定义样式，打印\ndef send_to_printer(title,txt,txt1,txt2,txt3,txt4,txt5): \n    hDC = win32ui.CreateDC()  \n    hDC.CreatePrinterDC(win32print.GetDefaultPrinter())  \n    hDC.StartDoc(title)\n    hDC.StartPage()\n    hDC.SetMapMode(win32con.MM_TWIPS)\n    #定义位置\n    ulc_x = 1000  \n    lrc_x = 11500  \n    lrc_y = -11500 \n    ulc_y = -100  \n    hDC.DrawText(txt,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 100\n    ulc_y = -400  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 100\n    ulc_y = -2300  \n    hDC.DrawText(txt1,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT)\n    ulc_x = 150 \n    ulc_y = -700  \n    hDC.DrawText(txt2,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1000  \n    hDC.DrawText(txt3,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    #修改字体大小\n    font = win32ui.CreateFont({\n        \"name\": \"Lucida Console\",\n        \"height\": 400,\n        \"weight\": 400,\n    })\n    hDC.SelectObject(font) \n    ulc_x = 150 \n    ulc_y = -1400  \n    hDC.DrawText(txt4,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    ulc_x = 150 \n    ulc_y = -1800  \n    hDC.DrawText(txt5,(ulc_x,ulc_y,lrc_x,lrc_y),win32con.DT_LEFT) \n    hDC.EndPage()  \n    hDC.EndDoc()\n#开一个桌面程序，提醒并在后台运行\nroot = Tk()\n#设置socket超时时间\nsocket.setdefaulttimeout(20)\nshowinfo('信息', '打印机已成功运行')\nroot.destroy()\n#下面轮询调用接口并处理数据，导入打印\nwhile 1:\n    #捕获所有错误，使中间不会中断\n    try:\n        #调用接口获取json并处理\n        response = urllib2.urlopen('http://test.com') \n        ret = response.read()\n        #print ret\n        res=json.loads(ret)\n        #处理数据这部分自定义\n        txt=\"1\";txt2=\"2\";txt3=\"3\";txt4=\"4\";txt5=\"5\"\n        send_to_printer(\"title\",txt,txt1,txt2,txt3,txt4,txt5)\n        response.close()\n        #5秒调用一次\n        time.sleep(5)\n    except Exception,e:  \n        #错误处理，可以打印在log上，这里只简单的捕获\n        print Exception,\":\",e</pre>\n<p><a href=\"http://xn--py2exesetup-qm8q8q0ol32bjwcy1jwmqj62bve9fpewf.py\">在用py2exe之前还得写另一个setup.py</a></p>\n<pre>from distutils.core import setup\nimport py2exe\n#filename是上面写的那个python文件的文件名\nsetup(windows=[\"filename.py\"])</pre>\n<p>把两个文件放在同目录下，用shift+右键，在此处打开命令行，运行</p>\n<pre>python setup.py py2exe</pre>\n<p>在产生的dist文件夹里有相同文件名的exe文件，可以双击直接执行，会先报一个成功运行，之后就在后台运行。</p>\n<p>因为他会在后台一直运行着，所以关闭的话也得到任务管理器-&gt;进程里找到那个文件名的exe后台进程，把它结束掉就行。</p>"},{"title":"前端回忆录---下篇","catalog":true,"date":"2017-03-20T12:14:50.000Z","_content":"\n下篇开始，对于我自己来说也就是在这边徘徊，暂时也并不能完全很好的掌握这些或深入的或新颖的知识，因为前端新东西出现的实在太快了。这里的我只大致做一个引导，如有错误请及时指出。毕竟修行在个人，还是得靠自己摸索。<!--more-->\n\n我们还是再来学习js---js进阶。这里目前必读的一本书---泽卡斯的《js高级编程指南》，如果能啃下这本书，必定精进一大步。当初我也是略读读了几次，能感受到他的强大和对我的影响力。js进阶，一方面补充了很多之前遗漏的细节，另一方面代码风格，代码思想会发生变化。学学面向对象，函数式编程，异步编程等等编程思想，对于编程的效率甚至体验都会改变。当然你会发现当初的编一行试一行的考虑肯定不是最好的，应该要站在高处看问题。如果是一个成千上万行代码的任务时，需要有总体设计的眼光。推荐在看看《js设计模式》这本。这部分时间将会非常长，当然也有无数人或停滞不前，或退而自满。任何一个行业在深入之后都不会很简单，如果你是被那三个月培训出来10k以上工资吸引进入这个行业，那就得做好打持久战的准备了，不牢固的基础在这时候会被放大。所以建议还是慢慢来，急功近利很难成为真正nb的人。\n\n以前你是一个引用库的人，现在，你已经有能力根据自己的需求自己写一个合适自己的库或者改写别人的库，而不是之前想也不想先引用进来。虽然不提倡自己造轮子，但懂得造轮子的原理还是需要的。比如jquery这个库，没必要再去复制实现一个，但同时可以看看他实现的方法------jquery源码。从中可以学到一些设计的思想，这才是轮子的原理。\n\n在讲点js里有趣的东西，毕竟编程很无聊，但要从无聊中寻找美的东西。canvas指的是画布，在h5里也是一个新标签，他意味着你可以用js代码在一张白纸上创作，你可以从无到有创作一个张画出来，或者把一张画复制到canvas画板上操作，之后再用js加点动作，简单的动画或者游戏就可以实现，是不是很有趣呢!更强大的是这个标签加上webgl技术就可以实现3d的创作，甚至于创作3d的游戏。\n\n接下来开始讲一个新东西---css预处理器sass。你可以编写sass语言，然后编译成可用的css。开始你可能会奇怪写css明明好好地为什么要多一步编译呢，因为css作为一门编程语言没有很好的嵌套，继承，函数等等，这就造成写css的时候写了很多重复的代码。sass就很好的解决了这个问题，它的具体安装和语法可以看<a href=\"http://sass.bootcss.com/docs/guide/\">文档</a>，它完全支持css3，所以它也可以帮你解决那些需要分浏览器写的代码。\n\njs也有一些需要编译才能用的扩展语言，比如TypeScript，CoffeeScript，jsx等。他们对于js的语法做了一些改变使得一些人更容易上手，同时也对js一些危险的语法做了保护或更改。付出的代价就是每次更改需要多一步编译的工作。\n\n突然会发现需要编译的地方好多，同时为了网页反应速度更快还得把加载的资源比如图片之类打包起来，js文件也可以进行压缩使文件更小。这些工作都是不复杂的机械式操作，所以我们可以找一个工具把这些直接完成，那就是现在讲的<a href=\"http://www.gulpjs.com.cn/docs/getting-started/\">gulp</a>。在用他之前你先得配置好node环境----node.js和npm(node.js的包管理器)。之后再按照gulp的教程来进行操作，这里有一份gulp完成上面那些操作的模板，<a href=\"http://pan.baidu.com/s/1i4CpzgD\">点这里下载</a>，下载完后用npm安装对应的模块，然后在代码里设置正确的路径，之后就可以运行了。他会监听指定的文件，保存之后就会自动触发，自动化了很多麻烦机械的步骤。\n\n对于node.js，前端可以了解，亦可以有研究，毕竟是用js来写。他可以用来写后台，虽说这统一了前后端语言，让前端也可以写后台，但在目前前后端分离的情况下实现的情形并不多。我当初用他的socket模块写过一个简单的聊天室，关于socket，可以了解一下tcp/ip，三次握手等。同时，推荐一本书<a href=\"http://www.kancloud.cn/kancloud/tealeaf-http/43837\">《http下午茶》</a>，他是讲http协议和一些请求之类，对于写后台还是很有帮助的。反正一般后台该有的node,js也可以实现，但技术肯定是有好有坏，在准备用node写后台之前最好了解一下node的优势和劣势。\n\n再来讲最火的三个框架---angular2，react，vue。我的感觉是angular2企业内部用的较多，react可以用来搭建大型应用，vue适合轻量级的网页。就试过react，给我的感觉就是初始上手有点困难，可能不是很适合刚入门的开发者，稍微有点经验之后再来学习框架可能会有更深刻的理解。当初是被react的全家桶吸引，react和react native，毕竟也是google工程师开发出来的。前端组件化也是在react出现之后才有的名词，很多人认为这也是前端发展的大方向，或许是吧，个人有个人的理解。总有对比这三个框架的文章见到，一般就按需求来做选择，也没必要在一个框架上吊死。虽然可能学一个框架的成本并不低，但在用熟了之后会发现再也离不开，因为多多少少会被这个框架设计的思想所束缚。个人感觉框架是用来帮助人的，而不是束缚，在学框架的同时不要忘记语言本身。\n\n学到这儿，我相信您已经可以自己完成之后的路了，后面更加深入的可以是前端的深入研究，可以是编程提高的算法与数据结构，也可以是服务器端的复杂逻辑与数据交互等等，后面的路更是丰富多彩，希望本篇前端之路只是一个开端。\n","source":"_posts/2017/article_15_前端回忆录---下篇.md","raw":"\n---\ntitle: 前端回忆录---下篇\ncatalog: true\ndate: 2017-3-20 20:14:50\n---\n\n下篇开始，对于我自己来说也就是在这边徘徊，暂时也并不能完全很好的掌握这些或深入的或新颖的知识，因为前端新东西出现的实在太快了。这里的我只大致做一个引导，如有错误请及时指出。毕竟修行在个人，还是得靠自己摸索。<!--more-->\n\n我们还是再来学习js---js进阶。这里目前必读的一本书---泽卡斯的《js高级编程指南》，如果能啃下这本书，必定精进一大步。当初我也是略读读了几次，能感受到他的强大和对我的影响力。js进阶，一方面补充了很多之前遗漏的细节，另一方面代码风格，代码思想会发生变化。学学面向对象，函数式编程，异步编程等等编程思想，对于编程的效率甚至体验都会改变。当然你会发现当初的编一行试一行的考虑肯定不是最好的，应该要站在高处看问题。如果是一个成千上万行代码的任务时，需要有总体设计的眼光。推荐在看看《js设计模式》这本。这部分时间将会非常长，当然也有无数人或停滞不前，或退而自满。任何一个行业在深入之后都不会很简单，如果你是被那三个月培训出来10k以上工资吸引进入这个行业，那就得做好打持久战的准备了，不牢固的基础在这时候会被放大。所以建议还是慢慢来，急功近利很难成为真正nb的人。\n\n以前你是一个引用库的人，现在，你已经有能力根据自己的需求自己写一个合适自己的库或者改写别人的库，而不是之前想也不想先引用进来。虽然不提倡自己造轮子，但懂得造轮子的原理还是需要的。比如jquery这个库，没必要再去复制实现一个，但同时可以看看他实现的方法------jquery源码。从中可以学到一些设计的思想，这才是轮子的原理。\n\n在讲点js里有趣的东西，毕竟编程很无聊，但要从无聊中寻找美的东西。canvas指的是画布，在h5里也是一个新标签，他意味着你可以用js代码在一张白纸上创作，你可以从无到有创作一个张画出来，或者把一张画复制到canvas画板上操作，之后再用js加点动作，简单的动画或者游戏就可以实现，是不是很有趣呢!更强大的是这个标签加上webgl技术就可以实现3d的创作，甚至于创作3d的游戏。\n\n接下来开始讲一个新东西---css预处理器sass。你可以编写sass语言，然后编译成可用的css。开始你可能会奇怪写css明明好好地为什么要多一步编译呢，因为css作为一门编程语言没有很好的嵌套，继承，函数等等，这就造成写css的时候写了很多重复的代码。sass就很好的解决了这个问题，它的具体安装和语法可以看<a href=\"http://sass.bootcss.com/docs/guide/\">文档</a>，它完全支持css3，所以它也可以帮你解决那些需要分浏览器写的代码。\n\njs也有一些需要编译才能用的扩展语言，比如TypeScript，CoffeeScript，jsx等。他们对于js的语法做了一些改变使得一些人更容易上手，同时也对js一些危险的语法做了保护或更改。付出的代价就是每次更改需要多一步编译的工作。\n\n突然会发现需要编译的地方好多，同时为了网页反应速度更快还得把加载的资源比如图片之类打包起来，js文件也可以进行压缩使文件更小。这些工作都是不复杂的机械式操作，所以我们可以找一个工具把这些直接完成，那就是现在讲的<a href=\"http://www.gulpjs.com.cn/docs/getting-started/\">gulp</a>。在用他之前你先得配置好node环境----node.js和npm(node.js的包管理器)。之后再按照gulp的教程来进行操作，这里有一份gulp完成上面那些操作的模板，<a href=\"http://pan.baidu.com/s/1i4CpzgD\">点这里下载</a>，下载完后用npm安装对应的模块，然后在代码里设置正确的路径，之后就可以运行了。他会监听指定的文件，保存之后就会自动触发，自动化了很多麻烦机械的步骤。\n\n对于node.js，前端可以了解，亦可以有研究，毕竟是用js来写。他可以用来写后台，虽说这统一了前后端语言，让前端也可以写后台，但在目前前后端分离的情况下实现的情形并不多。我当初用他的socket模块写过一个简单的聊天室，关于socket，可以了解一下tcp/ip，三次握手等。同时，推荐一本书<a href=\"http://www.kancloud.cn/kancloud/tealeaf-http/43837\">《http下午茶》</a>，他是讲http协议和一些请求之类，对于写后台还是很有帮助的。反正一般后台该有的node,js也可以实现，但技术肯定是有好有坏，在准备用node写后台之前最好了解一下node的优势和劣势。\n\n再来讲最火的三个框架---angular2，react，vue。我的感觉是angular2企业内部用的较多，react可以用来搭建大型应用，vue适合轻量级的网页。就试过react，给我的感觉就是初始上手有点困难，可能不是很适合刚入门的开发者，稍微有点经验之后再来学习框架可能会有更深刻的理解。当初是被react的全家桶吸引，react和react native，毕竟也是google工程师开发出来的。前端组件化也是在react出现之后才有的名词，很多人认为这也是前端发展的大方向，或许是吧，个人有个人的理解。总有对比这三个框架的文章见到，一般就按需求来做选择，也没必要在一个框架上吊死。虽然可能学一个框架的成本并不低，但在用熟了之后会发现再也离不开，因为多多少少会被这个框架设计的思想所束缚。个人感觉框架是用来帮助人的，而不是束缚，在学框架的同时不要忘记语言本身。\n\n学到这儿，我相信您已经可以自己完成之后的路了，后面更加深入的可以是前端的深入研究，可以是编程提高的算法与数据结构，也可以是服务器端的复杂逻辑与数据交互等等，后面的路更是丰富多彩，希望本篇前端之路只是一个开端。\n","slug":"2017/article_15_前端回忆录---下篇","published":1,"updated":"2021-01-27T04:46:28.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh721000k0770xa0ftvrg","content":"<p>下篇开始，对于我自己来说也就是在这边徘徊，暂时也并不能完全很好的掌握这些或深入的或新颖的知识，因为前端新东西出现的实在太快了。这里的我只大致做一个引导，如有错误请及时指出。毕竟修行在个人，还是得靠自己摸索。<a id=\"more\"></a></p>\n<p>我们还是再来学习js—js进阶。这里目前必读的一本书—泽卡斯的《js高级编程指南》，如果能啃下这本书，必定精进一大步。当初我也是略读读了几次，能感受到他的强大和对我的影响力。js进阶，一方面补充了很多之前遗漏的细节，另一方面代码风格，代码思想会发生变化。学学面向对象，函数式编程，异步编程等等编程思想，对于编程的效率甚至体验都会改变。当然你会发现当初的编一行试一行的考虑肯定不是最好的，应该要站在高处看问题。如果是一个成千上万行代码的任务时，需要有总体设计的眼光。推荐在看看《js设计模式》这本。这部分时间将会非常长，当然也有无数人或停滞不前，或退而自满。任何一个行业在深入之后都不会很简单，如果你是被那三个月培训出来10k以上工资吸引进入这个行业，那就得做好打持久战的准备了，不牢固的基础在这时候会被放大。所以建议还是慢慢来，急功近利很难成为真正nb的人。</p>\n<p>以前你是一个引用库的人，现在，你已经有能力根据自己的需求自己写一个合适自己的库或者改写别人的库，而不是之前想也不想先引用进来。虽然不提倡自己造轮子，但懂得造轮子的原理还是需要的。比如jquery这个库，没必要再去复制实现一个，但同时可以看看他实现的方法------jquery源码。从中可以学到一些设计的思想，这才是轮子的原理。</p>\n<p>在讲点js里有趣的东西，毕竟编程很无聊，但要从无聊中寻找美的东西。canvas指的是画布，在h5里也是一个新标签，他意味着你可以用js代码在一张白纸上创作，你可以从无到有创作一个张画出来，或者把一张画复制到canvas画板上操作，之后再用js加点动作，简单的动画或者游戏就可以实现，是不是很有趣呢!更强大的是这个标签加上webgl技术就可以实现3d的创作，甚至于创作3d的游戏。</p>\n<p>接下来开始讲一个新东西—css预处理器sass。你可以编写sass语言，然后编译成可用的css。开始你可能会奇怪写css明明好好地为什么要多一步编译呢，因为css作为一门编程语言没有很好的嵌套，继承，函数等等，这就造成写css的时候写了很多重复的代码。sass就很好的解决了这个问题，它的具体安装和语法可以看<a href=\"http://sass.bootcss.com/docs/guide/\" target=\"_blank\" rel=\"external\">文档</a>，它完全支持css3，所以它也可以帮你解决那些需要分浏览器写的代码。</p>\n<p>js也有一些需要编译才能用的扩展语言，比如TypeScript，CoffeeScript，jsx等。他们对于js的语法做了一些改变使得一些人更容易上手，同时也对js一些危险的语法做了保护或更改。付出的代价就是每次更改需要多一步编译的工作。</p>\n<p>突然会发现需要编译的地方好多，同时为了网页反应速度更快还得把加载的资源比如图片之类打包起来，js文件也可以进行压缩使文件更小。这些工作都是不复杂的机械式操作，所以我们可以找一个工具把这些直接完成，那就是现在讲的<a href=\"http://www.gulpjs.com.cn/docs/getting-started/\" target=\"_blank\" rel=\"external\">gulp</a>。在用他之前你先得配置好node环境----node.js和npm(node.js的包管理器)。之后再按照gulp的教程来进行操作，这里有一份gulp完成上面那些操作的模板，<a href=\"http://pan.baidu.com/s/1i4CpzgD\" target=\"_blank\" rel=\"external\">点这里下载</a>，下载完后用npm安装对应的模块，然后在代码里设置正确的路径，之后就可以运行了。他会监听指定的文件，保存之后就会自动触发，自动化了很多麻烦机械的步骤。</p>\n<p>对于node.js，前端可以了解，亦可以有研究，毕竟是用js来写。他可以用来写后台，虽说这统一了前后端语言，让前端也可以写后台，但在目前前后端分离的情况下实现的情形并不多。我当初用他的socket模块写过一个简单的聊天室，关于socket，可以了解一下tcp/ip，三次握手等。同时，推荐一本书<a href=\"http://www.kancloud.cn/kancloud/tealeaf-http/43837\" target=\"_blank\" rel=\"external\">《http下午茶》</a>，他是讲http协议和一些请求之类，对于写后台还是很有帮助的。反正一般后台该有的node,js也可以实现，但技术肯定是有好有坏，在准备用node写后台之前最好了解一下node的优势和劣势。</p>\n<p>再来讲最火的三个框架—angular2，react，vue。我的感觉是angular2企业内部用的较多，react可以用来搭建大型应用，vue适合轻量级的网页。就试过react，给我的感觉就是初始上手有点困难，可能不是很适合刚入门的开发者，稍微有点经验之后再来学习框架可能会有更深刻的理解。当初是被react的全家桶吸引，react和react native，毕竟也是google工程师开发出来的。前端组件化也是在react出现之后才有的名词，很多人认为这也是前端发展的大方向，或许是吧，个人有个人的理解。总有对比这三个框架的文章见到，一般就按需求来做选择，也没必要在一个框架上吊死。虽然可能学一个框架的成本并不低，但在用熟了之后会发现再也离不开，因为多多少少会被这个框架设计的思想所束缚。个人感觉框架是用来帮助人的，而不是束缚，在学框架的同时不要忘记语言本身。</p>\n<p>学到这儿，我相信您已经可以自己完成之后的路了，后面更加深入的可以是前端的深入研究，可以是编程提高的算法与数据结构，也可以是服务器端的复杂逻辑与数据交互等等，后面的路更是丰富多彩，希望本篇前端之路只是一个开端。</p>\n","excerpt":"<p>下篇开始，对于我自己来说也就是在这边徘徊，暂时也并不能完全很好的掌握这些或深入的或新颖的知识，因为前端新东西出现的实在太快了。这里的我只大致做一个引导，如有错误请及时指出。毕竟修行在个人，还是得靠自己摸索。","more":"</p>\n<p>我们还是再来学习js—js进阶。这里目前必读的一本书—泽卡斯的《js高级编程指南》，如果能啃下这本书，必定精进一大步。当初我也是略读读了几次，能感受到他的强大和对我的影响力。js进阶，一方面补充了很多之前遗漏的细节，另一方面代码风格，代码思想会发生变化。学学面向对象，函数式编程，异步编程等等编程思想，对于编程的效率甚至体验都会改变。当然你会发现当初的编一行试一行的考虑肯定不是最好的，应该要站在高处看问题。如果是一个成千上万行代码的任务时，需要有总体设计的眼光。推荐在看看《js设计模式》这本。这部分时间将会非常长，当然也有无数人或停滞不前，或退而自满。任何一个行业在深入之后都不会很简单，如果你是被那三个月培训出来10k以上工资吸引进入这个行业，那就得做好打持久战的准备了，不牢固的基础在这时候会被放大。所以建议还是慢慢来，急功近利很难成为真正nb的人。</p>\n<p>以前你是一个引用库的人，现在，你已经有能力根据自己的需求自己写一个合适自己的库或者改写别人的库，而不是之前想也不想先引用进来。虽然不提倡自己造轮子，但懂得造轮子的原理还是需要的。比如jquery这个库，没必要再去复制实现一个，但同时可以看看他实现的方法------jquery源码。从中可以学到一些设计的思想，这才是轮子的原理。</p>\n<p>在讲点js里有趣的东西，毕竟编程很无聊，但要从无聊中寻找美的东西。canvas指的是画布，在h5里也是一个新标签，他意味着你可以用js代码在一张白纸上创作，你可以从无到有创作一个张画出来，或者把一张画复制到canvas画板上操作，之后再用js加点动作，简单的动画或者游戏就可以实现，是不是很有趣呢!更强大的是这个标签加上webgl技术就可以实现3d的创作，甚至于创作3d的游戏。</p>\n<p>接下来开始讲一个新东西—css预处理器sass。你可以编写sass语言，然后编译成可用的css。开始你可能会奇怪写css明明好好地为什么要多一步编译呢，因为css作为一门编程语言没有很好的嵌套，继承，函数等等，这就造成写css的时候写了很多重复的代码。sass就很好的解决了这个问题，它的具体安装和语法可以看<a href=\"http://sass.bootcss.com/docs/guide/\">文档</a>，它完全支持css3，所以它也可以帮你解决那些需要分浏览器写的代码。</p>\n<p>js也有一些需要编译才能用的扩展语言，比如TypeScript，CoffeeScript，jsx等。他们对于js的语法做了一些改变使得一些人更容易上手，同时也对js一些危险的语法做了保护或更改。付出的代价就是每次更改需要多一步编译的工作。</p>\n<p>突然会发现需要编译的地方好多，同时为了网页反应速度更快还得把加载的资源比如图片之类打包起来，js文件也可以进行压缩使文件更小。这些工作都是不复杂的机械式操作，所以我们可以找一个工具把这些直接完成，那就是现在讲的<a href=\"http://www.gulpjs.com.cn/docs/getting-started/\">gulp</a>。在用他之前你先得配置好node环境----node.js和npm(node.js的包管理器)。之后再按照gulp的教程来进行操作，这里有一份gulp完成上面那些操作的模板，<a href=\"http://pan.baidu.com/s/1i4CpzgD\">点这里下载</a>，下载完后用npm安装对应的模块，然后在代码里设置正确的路径，之后就可以运行了。他会监听指定的文件，保存之后就会自动触发，自动化了很多麻烦机械的步骤。</p>\n<p>对于node.js，前端可以了解，亦可以有研究，毕竟是用js来写。他可以用来写后台，虽说这统一了前后端语言，让前端也可以写后台，但在目前前后端分离的情况下实现的情形并不多。我当初用他的socket模块写过一个简单的聊天室，关于socket，可以了解一下tcp/ip，三次握手等。同时，推荐一本书<a href=\"http://www.kancloud.cn/kancloud/tealeaf-http/43837\">《http下午茶》</a>，他是讲http协议和一些请求之类，对于写后台还是很有帮助的。反正一般后台该有的node,js也可以实现，但技术肯定是有好有坏，在准备用node写后台之前最好了解一下node的优势和劣势。</p>\n<p>再来讲最火的三个框架—angular2，react，vue。我的感觉是angular2企业内部用的较多，react可以用来搭建大型应用，vue适合轻量级的网页。就试过react，给我的感觉就是初始上手有点困难，可能不是很适合刚入门的开发者，稍微有点经验之后再来学习框架可能会有更深刻的理解。当初是被react的全家桶吸引，react和react native，毕竟也是google工程师开发出来的。前端组件化也是在react出现之后才有的名词，很多人认为这也是前端发展的大方向，或许是吧，个人有个人的理解。总有对比这三个框架的文章见到，一般就按需求来做选择，也没必要在一个框架上吊死。虽然可能学一个框架的成本并不低，但在用熟了之后会发现再也离不开，因为多多少少会被这个框架设计的思想所束缚。个人感觉框架是用来帮助人的，而不是束缚，在学框架的同时不要忘记语言本身。</p>\n<p>学到这儿，我相信您已经可以自己完成之后的路了，后面更加深入的可以是前端的深入研究，可以是编程提高的算法与数据结构，也可以是服务器端的复杂逻辑与数据交互等等，后面的路更是丰富多彩，希望本篇前端之路只是一个开端。</p>"},{"title":"微信小程序初探与文字二维码举例","catalog":true,"date":"2017-04-07T03:33:34.000Z","_content":"\n最近，微信小程序开放了个人开发者，所以立刻申请了一个来试试。\n\n小程序从之前刚出来时在开发者圈火极一时，而现在却用的不多，也有限制多的缘故，所以在开放了部分限制之后再来看他的发展吧。<!--more-->\n\n这里讨论一下初探小程序的一点想法。\n\n在<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">小程序手册</a>中也已经很明白了，把视图和逻辑分开，有点类似于react的虚拟dom，不直接去操作dom，而是改变数据之后自动刷新页面的渲染，使改动最小化。最初的试验感觉他的数据应该是单向绑定，也就是m-v而没有v-m。\n\n另外，微信写了各种接近微信ui的组件供直接调用。html代替用的是wxml，这个可以看手册了解。关于css，他用的是wxss，wxss基本和css是相同的。js的话就是变化最大的地方，因为完全dom没有关系，直接操作数据就可以改变页面内容。所以在了解之后其实开发速度是很快的。\n\n使用过后的感觉便是比起一般的网页流畅一些，但相较于app可能还有距离。\n\n开发的话，先在微信公众平台新注册一个，选择小程序。下载开发者工具，再本地新建一个空文件夹，之后添加项目到这里面，就会自动创建一个示例demo。\n\n这里简单做一个文字二维码的功能的小程序。\n\nwxml部分基本直接用组件就行 ，然后绑定一下事件，如bindtap，{ {} }是从js里传入的数据。\n<pre>&lt;!--index.wxml--&gt;\n&lt;view class=\"container\"&gt;\n  &lt;form bindsubmit=\"formSubmit\"&gt;\n    &lt;view class=\"section\"&gt;\n      &lt;input placeholder=\"请输入想说的话\" auto-focus name=\"input\"/&gt;\n    &lt;/view&gt;\n    &lt;view class='btn'&gt;\n      &lt;button formType=\"submit\"&gt;提交&lt;/button&gt;\n    &lt;/view&gt;\n  &lt;/form&gt;\n  &lt;view class=\"img\"&gt;\n    &lt;image src=\"{ {imgurl} }\" bindtap=\"ch\"&gt;&lt;/image&gt;\n  &lt;/view&gt;\n&lt;/view&gt;</pre>\nwxss因为和css基本一样就不写太多了，而且ui的话很多组件已经做好了。\n<pre>/**index.wxss**/\n.btn{\n  margin-top: 10%;\n}\n.section{\n  border-bottom:solid 1px lightgrey;\n  font-size:50rpx;\n}</pre>\njs里，getApp()从app.js和app.json获取配置信息，data便是可以传入wxml里的数据下面是两个事件，一开始的话会自动创建几个默认事件---开始加载，加载完成等等。然后可以自己添加事件。wx.xxx就是调用接口，接口具体也可以看文档。wx.request是获取服务器数据，这里首先需要到微信公众平台--设置里配置一下服务器域名，否则会报错。写多了容易发现有各种回调，所以要很清晰每一步。\n<pre>//index.js\n//获取应用实例\nvar app = getApp()\nPage({\n  data: {\n    imgult:'',\n    imgfile:''\n  },\n  ch:function(e){\n    var that=this\n    if(that.data.imgfile==''){\n      return\n    }\n    wx.previewImage({\n      current: that.data.imgfile,\n      urls: [that.data.imgfile] \n    })\n  },\n  formSubmit: function(e) {\n    var that = this\n    wx.request({\n      url: 'https://xxx.cn/test.php',\n      data: {\n        data: e.detail.value.input ,\n      },\n      header: {\n          'content-type': 'application/json'\n      },\n      success: function(res) {\n        that.setData({\n          imgurl:res.data\n        }),\n        wx.downloadFile({\n          url: 'https://xxx.cn/EXAMPLE_TMP_SERVERPATHtest.png',\n          success: function(res) {\n            var tempFilePaths = res.tempFilePath\n            that.setData({     \n              imgfile:res.tempFilePath\n            })\n            console.log(that.data.imgfile)\n          }\n        })\n      }\n    })\n  },\n})</pre>\n服务器端用了<a href=\"http://phpqrcode.sourceforge.net/\">phpqrcode</a>来生成二维码。下面是参考代码。效果：如果是数字便生成添加联系人的二维码，如果是文字，就产生文字二维码。然后通过base64编码到返回，小程序获取到64编码的图片字符放到img中就可以直接展示。\n<pre>&lt;?php\ninclude('phpqrcode/qrlib.php');\ninclude('config.php'); \n$tempDir = EXAMPLE_TMP_SERVERPATH; \n$a=$_GET['data'];\nif(!is_numeric($a)){\n    QRcode::png($a,$tempDir.'test.png',QR_ECLEVEL_L, 10);\n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}else{\n    $name = ''; \n    $phone = $a;\n    $codeContents  = 'BEGIN:VCARD'.\"\\n\"; \n    $codeContents .= 'FN:'.$name.\"\\n\"; \n    $codeContents .= 'TEL;WORK;VOICE:'.$phone.\"\\n\"; \n    $codeContents .= 'END:VCARD'; \n    QRcode::png($codeContents, $tempDir.'test.png', QR_ECLEVEL_L, 10); \n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}</pre>\n效果展示：<a href=\"/img/uploads/2017/04/QQ截图20170407112928.jpg\"><img class=\"alignnone wp-image-239 size-thumbnail\" src=\"/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a>\n","source":"_posts/2017/article_19_微信小程序初探与文字二维码举例.md","raw":"\n---\ntitle: 微信小程序初探与文字二维码举例\ncatalog: true\ndate: 2017-4-7 11:33:34\n---\n\n最近，微信小程序开放了个人开发者，所以立刻申请了一个来试试。\n\n小程序从之前刚出来时在开发者圈火极一时，而现在却用的不多，也有限制多的缘故，所以在开放了部分限制之后再来看他的发展吧。<!--more-->\n\n这里讨论一下初探小程序的一点想法。\n\n在<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">小程序手册</a>中也已经很明白了，把视图和逻辑分开，有点类似于react的虚拟dom，不直接去操作dom，而是改变数据之后自动刷新页面的渲染，使改动最小化。最初的试验感觉他的数据应该是单向绑定，也就是m-v而没有v-m。\n\n另外，微信写了各种接近微信ui的组件供直接调用。html代替用的是wxml，这个可以看手册了解。关于css，他用的是wxss，wxss基本和css是相同的。js的话就是变化最大的地方，因为完全dom没有关系，直接操作数据就可以改变页面内容。所以在了解之后其实开发速度是很快的。\n\n使用过后的感觉便是比起一般的网页流畅一些，但相较于app可能还有距离。\n\n开发的话，先在微信公众平台新注册一个，选择小程序。下载开发者工具，再本地新建一个空文件夹，之后添加项目到这里面，就会自动创建一个示例demo。\n\n这里简单做一个文字二维码的功能的小程序。\n\nwxml部分基本直接用组件就行 ，然后绑定一下事件，如bindtap，{ {} }是从js里传入的数据。\n<pre>&lt;!--index.wxml--&gt;\n&lt;view class=\"container\"&gt;\n  &lt;form bindsubmit=\"formSubmit\"&gt;\n    &lt;view class=\"section\"&gt;\n      &lt;input placeholder=\"请输入想说的话\" auto-focus name=\"input\"/&gt;\n    &lt;/view&gt;\n    &lt;view class='btn'&gt;\n      &lt;button formType=\"submit\"&gt;提交&lt;/button&gt;\n    &lt;/view&gt;\n  &lt;/form&gt;\n  &lt;view class=\"img\"&gt;\n    &lt;image src=\"{ {imgurl} }\" bindtap=\"ch\"&gt;&lt;/image&gt;\n  &lt;/view&gt;\n&lt;/view&gt;</pre>\nwxss因为和css基本一样就不写太多了，而且ui的话很多组件已经做好了。\n<pre>/**index.wxss**/\n.btn{\n  margin-top: 10%;\n}\n.section{\n  border-bottom:solid 1px lightgrey;\n  font-size:50rpx;\n}</pre>\njs里，getApp()从app.js和app.json获取配置信息，data便是可以传入wxml里的数据下面是两个事件，一开始的话会自动创建几个默认事件---开始加载，加载完成等等。然后可以自己添加事件。wx.xxx就是调用接口，接口具体也可以看文档。wx.request是获取服务器数据，这里首先需要到微信公众平台--设置里配置一下服务器域名，否则会报错。写多了容易发现有各种回调，所以要很清晰每一步。\n<pre>//index.js\n//获取应用实例\nvar app = getApp()\nPage({\n  data: {\n    imgult:'',\n    imgfile:''\n  },\n  ch:function(e){\n    var that=this\n    if(that.data.imgfile==''){\n      return\n    }\n    wx.previewImage({\n      current: that.data.imgfile,\n      urls: [that.data.imgfile] \n    })\n  },\n  formSubmit: function(e) {\n    var that = this\n    wx.request({\n      url: 'https://xxx.cn/test.php',\n      data: {\n        data: e.detail.value.input ,\n      },\n      header: {\n          'content-type': 'application/json'\n      },\n      success: function(res) {\n        that.setData({\n          imgurl:res.data\n        }),\n        wx.downloadFile({\n          url: 'https://xxx.cn/EXAMPLE_TMP_SERVERPATHtest.png',\n          success: function(res) {\n            var tempFilePaths = res.tempFilePath\n            that.setData({     \n              imgfile:res.tempFilePath\n            })\n            console.log(that.data.imgfile)\n          }\n        })\n      }\n    })\n  },\n})</pre>\n服务器端用了<a href=\"http://phpqrcode.sourceforge.net/\">phpqrcode</a>来生成二维码。下面是参考代码。效果：如果是数字便生成添加联系人的二维码，如果是文字，就产生文字二维码。然后通过base64编码到返回，小程序获取到64编码的图片字符放到img中就可以直接展示。\n<pre>&lt;?php\ninclude('phpqrcode/qrlib.php');\ninclude('config.php'); \n$tempDir = EXAMPLE_TMP_SERVERPATH; \n$a=$_GET['data'];\nif(!is_numeric($a)){\n    QRcode::png($a,$tempDir.'test.png',QR_ECLEVEL_L, 10);\n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}else{\n    $name = ''; \n    $phone = $a;\n    $codeContents  = 'BEGIN:VCARD'.\"\\n\"; \n    $codeContents .= 'FN:'.$name.\"\\n\"; \n    $codeContents .= 'TEL;WORK;VOICE:'.$phone.\"\\n\"; \n    $codeContents .= 'END:VCARD'; \n    QRcode::png($codeContents, $tempDir.'test.png', QR_ECLEVEL_L, 10); \n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}</pre>\n效果展示：<a href=\"/img/uploads/2017/04/QQ截图20170407112928.jpg\"><img class=\"alignnone wp-image-239 size-thumbnail\" src=\"/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a>\n","slug":"2017/article_19_微信小程序初探与文字二维码举例","published":1,"updated":"2021-01-27T04:46:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh721000l07709z6o0w4d","content":"<p>最近，微信小程序开放了个人开发者，所以立刻申请了一个来试试。</p>\n<p>小程序从之前刚出来时在开发者圈火极一时，而现在却用的不多，也有限制多的缘故，所以在开放了部分限制之后再来看他的发展吧。<a id=\"more\"></a></p>\n<p>这里讨论一下初探小程序的一点想法。</p>\n<p>在<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"external\">小程序手册</a>中也已经很明白了，把视图和逻辑分开，有点类似于react的虚拟dom，不直接去操作dom，而是改变数据之后自动刷新页面的渲染，使改动最小化。最初的试验感觉他的数据应该是单向绑定，也就是m-v而没有v-m。</p>\n<p>另外，微信写了各种接近微信ui的组件供直接调用。html代替用的是wxml，这个可以看手册了解。关于css，他用的是wxss，wxss基本和css是相同的。js的话就是变化最大的地方，因为完全dom没有关系，直接操作数据就可以改变页面内容。所以在了解之后其实开发速度是很快的。</p>\n<p>使用过后的感觉便是比起一般的网页流畅一些，但相较于app可能还有距离。</p>\n<p>开发的话，先在微信公众平台新注册一个，选择小程序。下载开发者工具，再本地新建一个空文件夹，之后添加项目到这里面，就会自动创建一个示例demo。</p>\n<p>这里简单做一个文字二维码的功能的小程序。</p>\n<p>wxml部分基本直接用组件就行 ，然后绑定一下事件，如bindtap，{ {} }是从js里传入的数据。</p>\n<pre>&lt;!--index.wxml--&gt;\n&lt;view class=\"container\"&gt;\n  &lt;form bindsubmit=\"formSubmit\"&gt;\n    &lt;view class=\"section\"&gt;\n      &lt;input placeholder=\"请输入想说的话\" auto-focus name=\"input\"/&gt;\n    &lt;/view&gt;\n    &lt;view class='btn'&gt;\n      &lt;button formType=\"submit\"&gt;提交&lt;/button&gt;\n    &lt;/view&gt;\n  &lt;/form&gt;\n  &lt;view class=\"img\"&gt;\n    &lt;image src=\"{ {imgurl} }\" bindtap=\"ch\"&gt;&lt;/image&gt;\n  &lt;/view&gt;\n&lt;/view&gt;</pre>\n<p>wxss因为和css基本一样就不写太多了，而且ui的话很多组件已经做好了。</p>\n<pre>/**index.wxss**/\n.btn{\n  margin-top: 10%;\n}\n.section{\n  border-bottom:solid 1px lightgrey;\n  font-size:50rpx;\n}</pre>\n<p>js里，getApp()从app.js和app.json获取配置信息，data便是可以传入wxml里的数据下面是两个事件，一开始的话会自动创建几个默认事件—开始加载，加载完成等等。然后可以自己添加事件。wx.xxx就是调用接口，接口具体也可以看文档。wx.request是获取服务器数据，这里首先需要到微信公众平台–设置里配置一下服务器域名，否则会报错。写多了容易发现有各种回调，所以要很清晰每一步。</p>\n<pre>//index.js\n//获取应用实例\nvar app = getApp()\nPage({\n  data: {\n    imgult:'',\n    imgfile:''\n  },\n  ch:function(e){\n    var that=this\n    if(that.data.imgfile==''){\n      return\n    }\n    wx.previewImage({\n      current: that.data.imgfile,\n      urls: [that.data.imgfile] \n    })\n  },\n  formSubmit: function(e) {\n    var that = this\n    wx.request({\n      url: 'https://xxx.cn/test.php',\n      data: {\n        data: e.detail.value.input ,\n      },\n      header: {\n          'content-type': 'application/json'\n      },\n      success: function(res) {\n        that.setData({\n          imgurl:res.data\n        }),\n        wx.downloadFile({\n          url: 'https://xxx.cn/EXAMPLE_TMP_SERVERPATHtest.png',\n          success: function(res) {\n            var tempFilePaths = res.tempFilePath\n            that.setData({     \n              imgfile:res.tempFilePath\n            })\n            console.log(that.data.imgfile)\n          }\n        })\n      }\n    })\n  },\n})</pre>\n<p>服务器端用了<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"external\">phpqrcode</a>来生成二维码。下面是参考代码。效果：如果是数字便生成添加联系人的二维码，如果是文字，就产生文字二维码。然后通过base64编码到返回，小程序获取到64编码的图片字符放到img中就可以直接展示。</p>\n<pre>&lt;?php\ninclude('phpqrcode/qrlib.php');\ninclude('config.php'); \n$tempDir = EXAMPLE_TMP_SERVERPATH; \n$a=$_GET['data'];\nif(!is_numeric($a)){\n    QRcode::png($a,$tempDir.'test.png',QR_ECLEVEL_L, 10);\n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}else{\n    $name = ''; \n    $phone = $a;\n    $codeContents  = 'BEGIN:VCARD'.\"\\n\"; \n    $codeContents .= 'FN:'.$name.\"\\n\"; \n    $codeContents .= 'TEL;WORK;VOICE:'.$phone.\"\\n\"; \n    $codeContents .= 'END:VCARD'; \n    QRcode::png($codeContents, $tempDir.'test.png', QR_ECLEVEL_L, 10); \n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/04/QQ截图20170407112928.jpg\"><img class=\"alignnone wp-image-239 size-thumbnail\" src=\"/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\"></a></p>\n","excerpt":"<p>最近，微信小程序开放了个人开发者，所以立刻申请了一个来试试。</p>\n<p>小程序从之前刚出来时在开发者圈火极一时，而现在却用的不多，也有限制多的缘故，所以在开放了部分限制之后再来看他的发展吧。","more":"</p>\n<p>这里讨论一下初探小程序的一点想法。</p>\n<p>在<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">小程序手册</a>中也已经很明白了，把视图和逻辑分开，有点类似于react的虚拟dom，不直接去操作dom，而是改变数据之后自动刷新页面的渲染，使改动最小化。最初的试验感觉他的数据应该是单向绑定，也就是m-v而没有v-m。</p>\n<p>另外，微信写了各种接近微信ui的组件供直接调用。html代替用的是wxml，这个可以看手册了解。关于css，他用的是wxss，wxss基本和css是相同的。js的话就是变化最大的地方，因为完全dom没有关系，直接操作数据就可以改变页面内容。所以在了解之后其实开发速度是很快的。</p>\n<p>使用过后的感觉便是比起一般的网页流畅一些，但相较于app可能还有距离。</p>\n<p>开发的话，先在微信公众平台新注册一个，选择小程序。下载开发者工具，再本地新建一个空文件夹，之后添加项目到这里面，就会自动创建一个示例demo。</p>\n<p>这里简单做一个文字二维码的功能的小程序。</p>\n<p>wxml部分基本直接用组件就行 ，然后绑定一下事件，如bindtap，{ {} }是从js里传入的数据。</p>\n<pre>&lt;!--index.wxml--&gt;\n&lt;view class=\"container\"&gt;\n  &lt;form bindsubmit=\"formSubmit\"&gt;\n    &lt;view class=\"section\"&gt;\n      &lt;input placeholder=\"请输入想说的话\" auto-focus name=\"input\"/&gt;\n    &lt;/view&gt;\n    &lt;view class='btn'&gt;\n      &lt;button formType=\"submit\"&gt;提交&lt;/button&gt;\n    &lt;/view&gt;\n  &lt;/form&gt;\n  &lt;view class=\"img\"&gt;\n    &lt;image src=\"{ {imgurl} }\" bindtap=\"ch\"&gt;&lt;/image&gt;\n  &lt;/view&gt;\n&lt;/view&gt;</pre>\n<p>wxss因为和css基本一样就不写太多了，而且ui的话很多组件已经做好了。</p>\n<pre>/**index.wxss**/\n.btn{\n  margin-top: 10%;\n}\n.section{\n  border-bottom:solid 1px lightgrey;\n  font-size:50rpx;\n}</pre>\n<p>js里，getApp()从app.js和app.json获取配置信息，data便是可以传入wxml里的数据下面是两个事件，一开始的话会自动创建几个默认事件—开始加载，加载完成等等。然后可以自己添加事件。wx.xxx就是调用接口，接口具体也可以看文档。wx.request是获取服务器数据，这里首先需要到微信公众平台–设置里配置一下服务器域名，否则会报错。写多了容易发现有各种回调，所以要很清晰每一步。</p>\n<pre>//index.js\n//获取应用实例\nvar app = getApp()\nPage({\n  data: {\n    imgult:'',\n    imgfile:''\n  },\n  ch:function(e){\n    var that=this\n    if(that.data.imgfile==''){\n      return\n    }\n    wx.previewImage({\n      current: that.data.imgfile,\n      urls: [that.data.imgfile] \n    })\n  },\n  formSubmit: function(e) {\n    var that = this\n    wx.request({\n      url: 'https://xxx.cn/test.php',\n      data: {\n        data: e.detail.value.input ,\n      },\n      header: {\n          'content-type': 'application/json'\n      },\n      success: function(res) {\n        that.setData({\n          imgurl:res.data\n        }),\n        wx.downloadFile({\n          url: 'https://xxx.cn/EXAMPLE_TMP_SERVERPATHtest.png',\n          success: function(res) {\n            var tempFilePaths = res.tempFilePath\n            that.setData({     \n              imgfile:res.tempFilePath\n            })\n            console.log(that.data.imgfile)\n          }\n        })\n      }\n    })\n  },\n})</pre>\n<p>服务器端用了<a href=\"http://phpqrcode.sourceforge.net/\">phpqrcode</a>来生成二维码。下面是参考代码。效果：如果是数字便生成添加联系人的二维码，如果是文字，就产生文字二维码。然后通过base64编码到返回，小程序获取到64编码的图片字符放到img中就可以直接展示。</p>\n<pre>&lt;?php\ninclude('phpqrcode/qrlib.php');\ninclude('config.php'); \n$tempDir = EXAMPLE_TMP_SERVERPATH; \n$a=$_GET['data'];\nif(!is_numeric($a)){\n    QRcode::png($a,$tempDir.'test.png',QR_ECLEVEL_L, 10);\n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}else{\n    $name = ''; \n    $phone = $a;\n    $codeContents  = 'BEGIN:VCARD'.\"\\n\"; \n    $codeContents .= 'FN:'.$name.\"\\n\"; \n    $codeContents .= 'TEL;WORK;VOICE:'.$phone.\"\\n\"; \n    $codeContents .= 'END:VCARD'; \n    QRcode::png($codeContents, $tempDir.'test.png', QR_ECLEVEL_L, 10); \n    $str = file_get_contents($tempDir.'test.png');\n    echo \"data:image/png;base64,\".base64_encode($str);\n}</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/04/QQ截图20170407112928.jpg\"><img class=\"alignnone wp-image-239 size-thumbnail\" src=\"/img/uploads/2017/04/QQ截图20170407112928-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a></p>"},{"title":"个人简介","catalog":true,"date":"2017-03-06T09:51:21.000Z","_content":"\n我叫甘家城，来自宁波余姚，目前是杭电的一名大三学生，作为一个电子专业的学生，路过前端的崛起，也看过“最好”的php，目前写着苦短的python，咯咯咯。\n<h5>All of life is an act of letting go, but what hurts the most is not taking a moment to say goodbye.</h5>\n&nbsp;\n\n私邮：935669873@qq.com\n\n&nbsp;\n","source":"_posts/2017/article_1_个人简介.md","raw":"\n---\ntitle: 个人简介\ncatalog: true\ndate: 2017-3-6 17:51:21\n---\n\n我叫甘家城，来自宁波余姚，目前是杭电的一名大三学生，作为一个电子专业的学生，路过前端的崛起，也看过“最好”的php，目前写着苦短的python，咯咯咯。\n<h5>All of life is an act of letting go, but what hurts the most is not taking a moment to say goodbye.</h5>\n&nbsp;\n\n私邮：935669873@qq.com\n\n&nbsp;\n","slug":"2017/article_1_个人简介","published":1,"updated":"2021-01-27T04:46:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh722000m0770u3w9lpg7","content":"<p>我叫甘家城，来自宁波余姚，目前是杭电的一名大三学生，作为一个电子专业的学生，路过前端的崛起，也看过“最好”的php，目前写着苦短的python，咯咯咯。<br>\n</p><h5 id=\"all-of-life-is-an-act-of-letting-go-but-what-hurts-the-most-is-not-taking-a-moment-to-say-goodbye\">All of life is an act of letting go, but what hurts the most is not taking a moment to say goodbye.</h5><br>\n <p></p>\n<p>私邮：935669873@qq.com</p>\n<p> </p>\n","excerpt":"","more":"<p>我叫甘家城，来自宁波余姚，目前是杭电的一名大三学生，作为一个电子专业的学生，路过前端的崛起，也看过“最好”的php，目前写着苦短的python，咯咯咯。<br>\n<h5>All of life is an act of letting go, but what hurts the most is not taking a moment to say goodbye.</h5><br>\n </p>\n<p>私邮：935669873@qq.com</p>\n<p> </p>\n"},{"title":"赛马问题","catalog":true,"date":"2017-04-21T03:43:10.000Z","_content":"\n问题：有25匹马，速度都不同，但每匹马的速度都是定值。现在只有5条赛道，无法计时，即每赛一场最多只能知道5匹马的相对快慢。问最少赛几场可以找出25匹马中速度最快的前5名？<!--more-->\n\n写下一些个人思路。\n\n先把25匹马分成5组，每组5匹马，跑五次。得到五次的结果。\n\n在把5次都跑第一名的马拿出来跑一次。\n\n然后分别标上如下图序号。箭头方向表示由慢到快。\n\n<a href=\"/img/uploads/2017/04/image-1.jpg\"><img class=\"alignnone wp-image-255 size-medium\" src=\"/img/uploads/2017/04/image-1-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n此时可以得到11是其中跑得最快的，由于要选5匹，故可以去掉一些已经评不上的。\n\n<a href=\"/img/uploads/2017/04/image-2.jpg\"><img class=\"alignnone wp-image-256 size-medium\" src=\"/img/uploads/2017/04/image-2-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n考虑特殊情况，要次数最少的话就得碰运气，第七次跑51，12，13，14，15或者15，21，31，41，51。如果51或者15赢了就可以得到最快的五匹马。\n\n考虑一般情况的话，再分析图，12，21至少有一个需要选。13，22，31至少有一个需要选。所以第七次上面五匹马跑一次。\n\n之后分类讨论，主要考虑前两名。\n\n如果12，21是前两名，则他们为总的第二三名，由于13，22，31也至少选一个，所以其中一个最快的是总的第四名。总的还差一匹马，第八次就跑13，22，31中的另外两个加上总第四名那匹马的右边和下面两匹马。第八次跑最快的就是总的第五名。得到最快5匹马。\n\n如果前两名是12，21中的一个加上13，22，31中的一个。则第八次跑的马为上面剩下的三个加上13，22，31种最快那匹的右边和下面那两匹马。这里得到的结果又可以分类讨论，方法和上面差不多，最差的情况也可以选出总的第四快的马。\n\n再跑第九次，选出第五快的马。\n\n结论：碰运气跑最快7次，一般情况跑最快8次，最慢9次。\n","source":"_posts/2017/article_20_赛马问题.md","raw":"\n---\ntitle: 赛马问题\ncatalog: true\ndate: 2017-4-21 11:43:10\n---\n\n问题：有25匹马，速度都不同，但每匹马的速度都是定值。现在只有5条赛道，无法计时，即每赛一场最多只能知道5匹马的相对快慢。问最少赛几场可以找出25匹马中速度最快的前5名？<!--more-->\n\n写下一些个人思路。\n\n先把25匹马分成5组，每组5匹马，跑五次。得到五次的结果。\n\n在把5次都跑第一名的马拿出来跑一次。\n\n然后分别标上如下图序号。箭头方向表示由慢到快。\n\n<a href=\"/img/uploads/2017/04/image-1.jpg\"><img class=\"alignnone wp-image-255 size-medium\" src=\"/img/uploads/2017/04/image-1-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n此时可以得到11是其中跑得最快的，由于要选5匹，故可以去掉一些已经评不上的。\n\n<a href=\"/img/uploads/2017/04/image-2.jpg\"><img class=\"alignnone wp-image-256 size-medium\" src=\"/img/uploads/2017/04/image-2-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n考虑特殊情况，要次数最少的话就得碰运气，第七次跑51，12，13，14，15或者15，21，31，41，51。如果51或者15赢了就可以得到最快的五匹马。\n\n考虑一般情况的话，再分析图，12，21至少有一个需要选。13，22，31至少有一个需要选。所以第七次上面五匹马跑一次。\n\n之后分类讨论，主要考虑前两名。\n\n如果12，21是前两名，则他们为总的第二三名，由于13，22，31也至少选一个，所以其中一个最快的是总的第四名。总的还差一匹马，第八次就跑13，22，31中的另外两个加上总第四名那匹马的右边和下面两匹马。第八次跑最快的就是总的第五名。得到最快5匹马。\n\n如果前两名是12，21中的一个加上13，22，31中的一个。则第八次跑的马为上面剩下的三个加上13，22，31种最快那匹的右边和下面那两匹马。这里得到的结果又可以分类讨论，方法和上面差不多，最差的情况也可以选出总的第四快的马。\n\n再跑第九次，选出第五快的马。\n\n结论：碰运气跑最快7次，一般情况跑最快8次，最慢9次。\n","slug":"2017/article_20_赛马问题","published":1,"updated":"2021-01-27T04:46:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh724000n0770pj5oefq1","content":"<p>问题：有25匹马，速度都不同，但每匹马的速度都是定值。现在只有5条赛道，无法计时，即每赛一场最多只能知道5匹马的相对快慢。问最少赛几场可以找出25匹马中速度最快的前5名？<a id=\"more\"></a></p>\n<p>写下一些个人思路。</p>\n<p>先把25匹马分成5组，每组5匹马，跑五次。得到五次的结果。</p>\n<p>在把5次都跑第一名的马拿出来跑一次。</p>\n<p>然后分别标上如下图序号。箭头方向表示由慢到快。</p>\n<p><a href=\"/img/uploads/2017/04/image-1.jpg\"><img class=\"alignnone wp-image-255 size-medium\" src=\"/img/uploads/2017/04/image-1-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n<p>此时可以得到11是其中跑得最快的，由于要选5匹，故可以去掉一些已经评不上的。</p>\n<p><a href=\"/img/uploads/2017/04/image-2.jpg\"><img class=\"alignnone wp-image-256 size-medium\" src=\"/img/uploads/2017/04/image-2-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n<p>考虑特殊情况，要次数最少的话就得碰运气，第七次跑51，12，13，14，15或者15，21，31，41，51。如果51或者15赢了就可以得到最快的五匹马。</p>\n<p>考虑一般情况的话，再分析图，12，21至少有一个需要选。13，22，31至少有一个需要选。所以第七次上面五匹马跑一次。</p>\n<p>之后分类讨论，主要考虑前两名。</p>\n<p>如果12，21是前两名，则他们为总的第二三名，由于13，22，31也至少选一个，所以其中一个最快的是总的第四名。总的还差一匹马，第八次就跑13，22，31中的另外两个加上总第四名那匹马的右边和下面两匹马。第八次跑最快的就是总的第五名。得到最快5匹马。</p>\n<p>如果前两名是12，21中的一个加上13，22，31中的一个。则第八次跑的马为上面剩下的三个加上13，22，31种最快那匹的右边和下面那两匹马。这里得到的结果又可以分类讨论，方法和上面差不多，最差的情况也可以选出总的第四快的马。</p>\n<p>再跑第九次，选出第五快的马。</p>\n<p>结论：碰运气跑最快7次，一般情况跑最快8次，最慢9次。</p>\n","excerpt":"<p>问题：有25匹马，速度都不同，但每匹马的速度都是定值。现在只有5条赛道，无法计时，即每赛一场最多只能知道5匹马的相对快慢。问最少赛几场可以找出25匹马中速度最快的前5名？","more":"</p>\n<p>写下一些个人思路。</p>\n<p>先把25匹马分成5组，每组5匹马，跑五次。得到五次的结果。</p>\n<p>在把5次都跑第一名的马拿出来跑一次。</p>\n<p>然后分别标上如下图序号。箭头方向表示由慢到快。</p>\n<p><a href=\"/img/uploads/2017/04/image-1.jpg\"><img class=\"alignnone wp-image-255 size-medium\" src=\"/img/uploads/2017/04/image-1-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p>此时可以得到11是其中跑得最快的，由于要选5匹，故可以去掉一些已经评不上的。</p>\n<p><a href=\"/img/uploads/2017/04/image-2.jpg\"><img class=\"alignnone wp-image-256 size-medium\" src=\"/img/uploads/2017/04/image-2-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p>考虑特殊情况，要次数最少的话就得碰运气，第七次跑51，12，13，14，15或者15，21，31，41，51。如果51或者15赢了就可以得到最快的五匹马。</p>\n<p>考虑一般情况的话，再分析图，12，21至少有一个需要选。13，22，31至少有一个需要选。所以第七次上面五匹马跑一次。</p>\n<p>之后分类讨论，主要考虑前两名。</p>\n<p>如果12，21是前两名，则他们为总的第二三名，由于13，22，31也至少选一个，所以其中一个最快的是总的第四名。总的还差一匹马，第八次就跑13，22，31中的另外两个加上总第四名那匹马的右边和下面两匹马。第八次跑最快的就是总的第五名。得到最快5匹马。</p>\n<p>如果前两名是12，21中的一个加上13，22，31中的一个。则第八次跑的马为上面剩下的三个加上13，22，31种最快那匹的右边和下面那两匹马。这里得到的结果又可以分类讨论，方法和上面差不多，最差的情况也可以选出总的第四快的马。</p>\n<p>再跑第九次，选出第五快的马。</p>\n<p>结论：碰运气跑最快7次，一般情况跑最快8次，最慢9次。</p>"},{"title":"svm分类器---sklearn","catalog":true,"date":"2017-05-01T13:17:30.000Z","_content":"\n刚开始理解svm（支持向量机）还是挺复杂的，现在稍微有了一点思路，便写下来。由于代码实现中对于svm基本是黑盒，所以这里直接讲一下，再用代码实现。<!--more-->\n\n在线性的情况下，svm就直接找一个超平面（下面就是那条线）来分割不同的两类。比如这个二分类，在超平面上的点距离这条线为0，定一侧距离这条线为正，一侧距离这条线为负，那么只要找到两类点和超平面最大的距离和就行。\n\n<a href=\"/img/uploads/2017/05/figure_1-2.png\"><img class=\"alignnone wp-image-276 size-medium\" src=\"/img/uploads/2017/05/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#点集和类别\nf=open(\"testSet.txt\")\ndata=[]\nlabel=[]\n#取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立线性模型\nclf = svm.SVC(kernel='linear')\n#训练\nclf.fit(data, label)\n#取到训练完的权值\nw = clf.coef_[0]\na = -w[0] / w[1]\n#设定x坐标\nxx = np.linspace(-5, 5)\n#根据权值求得y\nyy = a * xx - (clf.intercept_[0]) / w[1]\n#画直线\nplt.plot(xx, yy, 'k-')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n对于非线性的情况，个人简单的理解：如果在一维没法分类解决的问题，就放到二维去解决，同理，二维可以用三维解决。\n\n例：下图中，圈是一类，叉是另一类。在一维点集里，没法用一个点来分别两个类别。所以升维到二维后，就发现很简单的用一条曲线就做好了分类。而找这条曲线或曲面首先就需要一个核函数。\n\n<a href=\"/img/uploads/2017/05/IMG_3199-e1493609643520.jpg\"><img class=\"alignnone wp-image-274 size-medium\" src=\"/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg\" alt=\"\" width=\"300\" height=\"259\" /></a>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#这个文件创建方式<a href=\"https://ganjiacheng.cn/blog/?p=265\">点击这里</a>\nf=open(\"testSet2.txt\")\ndata=[]\nlabel=[]\n#定义250000个点的二维点集\nxx,yy=np.meshgrid(np.linspace(-3, 3, 500),np.linspace(-3, 3, 500))\n#读取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立模型，核函数默认\nclf = svm.SVC()\n#训练数据\nclf.fit(data, label)\n#根据250000个点得到距离超平面距离\nZ = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n#结果转为二维\nZ = Z.reshape(xx.shape)\n#画出平面上距离超平面为0的轮廓\ncontours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,linetypes='--')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n结果展示：<img class=\"alignnone size-medium wp-image-278\" src=\"/img/uploads/2017/05/figure_1-2-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" />\n","source":"_posts/2017/article_23_svm分类器---sklearn.md","raw":"\n---\ntitle: svm分类器---sklearn\ncatalog: true\ndate: 2017-5-1 21:17:30\n---\n\n刚开始理解svm（支持向量机）还是挺复杂的，现在稍微有了一点思路，便写下来。由于代码实现中对于svm基本是黑盒，所以这里直接讲一下，再用代码实现。<!--more-->\n\n在线性的情况下，svm就直接找一个超平面（下面就是那条线）来分割不同的两类。比如这个二分类，在超平面上的点距离这条线为0，定一侧距离这条线为正，一侧距离这条线为负，那么只要找到两类点和超平面最大的距离和就行。\n\n<a href=\"/img/uploads/2017/05/figure_1-2.png\"><img class=\"alignnone wp-image-276 size-medium\" src=\"/img/uploads/2017/05/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#点集和类别\nf=open(\"testSet.txt\")\ndata=[]\nlabel=[]\n#取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立线性模型\nclf = svm.SVC(kernel='linear')\n#训练\nclf.fit(data, label)\n#取到训练完的权值\nw = clf.coef_[0]\na = -w[0] / w[1]\n#设定x坐标\nxx = np.linspace(-5, 5)\n#根据权值求得y\nyy = a * xx - (clf.intercept_[0]) / w[1]\n#画直线\nplt.plot(xx, yy, 'k-')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n对于非线性的情况，个人简单的理解：如果在一维没法分类解决的问题，就放到二维去解决，同理，二维可以用三维解决。\n\n例：下图中，圈是一类，叉是另一类。在一维点集里，没法用一个点来分别两个类别。所以升维到二维后，就发现很简单的用一条曲线就做好了分类。而找这条曲线或曲面首先就需要一个核函数。\n\n<a href=\"/img/uploads/2017/05/IMG_3199-e1493609643520.jpg\"><img class=\"alignnone wp-image-274 size-medium\" src=\"/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg\" alt=\"\" width=\"300\" height=\"259\" /></a>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#这个文件创建方式<a href=\"https://ganjiacheng.cn/blog/?p=265\">点击这里</a>\nf=open(\"testSet2.txt\")\ndata=[]\nlabel=[]\n#定义250000个点的二维点集\nxx,yy=np.meshgrid(np.linspace(-3, 3, 500),np.linspace(-3, 3, 500))\n#读取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立模型，核函数默认\nclf = svm.SVC()\n#训练数据\nclf.fit(data, label)\n#根据250000个点得到距离超平面距离\nZ = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n#结果转为二维\nZ = Z.reshape(xx.shape)\n#画出平面上距离超平面为0的轮廓\ncontours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,linetypes='--')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n结果展示：<img class=\"alignnone size-medium wp-image-278\" src=\"/img/uploads/2017/05/figure_1-2-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" />\n","slug":"2017/article_23_svm分类器---sklearn","published":1,"updated":"2021-01-27T04:46:28.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh727000o0770rnf9y9ei","content":"<p>刚开始理解svm（支持向量机）还是挺复杂的，现在稍微有了一点思路，便写下来。由于代码实现中对于svm基本是黑盒，所以这里直接讲一下，再用代码实现。<a id=\"more\"></a></p>\n<p>在线性的情况下，svm就直接找一个超平面（下面就是那条线）来分割不同的两类。比如这个二分类，在超平面上的点距离这条线为0，定一侧距离这条线为正，一侧距离这条线为负，那么只要找到两类点和超平面最大的距离和就行。</p>\n<p><a href=\"/img/uploads/2017/05/figure_1-2.png\"><img class=\"alignnone wp-image-276 size-medium\" src=\"/img/uploads/2017/05/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#点集和类别\nf=open(\"testSet.txt\")\ndata=[]\nlabel=[]\n#取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立线性模型\nclf = svm.SVC(kernel='linear')\n#训练\nclf.fit(data, label)\n#取到训练完的权值\nw = clf.coef_[0]\na = -w[0] / w[1]\n#设定x坐标\nxx = np.linspace(-5, 5)\n#根据权值求得y\nyy = a * xx - (clf.intercept_[0]) / w[1]\n#画直线\nplt.plot(xx, yy, 'k-')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n<p>对于非线性的情况，个人简单的理解：如果在一维没法分类解决的问题，就放到二维去解决，同理，二维可以用三维解决。</p>\n<p>例：下图中，圈是一类，叉是另一类。在一维点集里，没法用一个点来分别两个类别。所以升维到二维后，就发现很简单的用一条曲线就做好了分类。而找这条曲线或曲面首先就需要一个核函数。</p>\n<p><a href=\"/img/uploads/2017/05/IMG_3199-e1493609643520.jpg\"><img class=\"alignnone wp-image-274 size-medium\" src=\"/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg\" alt=\"\" width=\"300\" height=\"259\"></a></p>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#这个文件创建方式<a href=\"https://ganjiacheng.cn/blog/?p=265\">点击这里</a>\nf=open(\"testSet2.txt\")\ndata=[]\nlabel=[]\n#定义250000个点的二维点集\nxx,yy=np.meshgrid(np.linspace(-3, 3, 500),np.linspace(-3, 3, 500))\n#读取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立模型，核函数默认\nclf = svm.SVC()\n#训练数据\nclf.fit(data, label)\n#根据250000个点得到距离超平面距离\nZ = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n#结果转为二维\nZ = Z.reshape(xx.shape)\n#画出平面上距离超平面为0的轮廓\ncontours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,linetypes='--')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n<p>结果展示：<img class=\"alignnone size-medium wp-image-278\" src=\"/img/uploads/2017/05/figure_1-2-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\"></p>\n","excerpt":"<p>刚开始理解svm（支持向量机）还是挺复杂的，现在稍微有了一点思路，便写下来。由于代码实现中对于svm基本是黑盒，所以这里直接讲一下，再用代码实现。","more":"</p>\n<p>在线性的情况下，svm就直接找一个超平面（下面就是那条线）来分割不同的两类。比如这个二分类，在超平面上的点距离这条线为0，定一侧距离这条线为正，一侧距离这条线为负，那么只要找到两类点和超平面最大的距离和就行。</p>\n<p><a href=\"/img/uploads/2017/05/figure_1-2.png\"><img class=\"alignnone wp-image-276 size-medium\" src=\"/img/uploads/2017/05/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#点集和类别\nf=open(\"testSet.txt\")\ndata=[]\nlabel=[]\n#取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立线性模型\nclf = svm.SVC(kernel='linear')\n#训练\nclf.fit(data, label)\n#取到训练完的权值\nw = clf.coef_[0]\na = -w[0] / w[1]\n#设定x坐标\nxx = np.linspace(-5, 5)\n#根据权值求得y\nyy = a * xx - (clf.intercept_[0]) / w[1]\n#画直线\nplt.plot(xx, yy, 'k-')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n<p>对于非线性的情况，个人简单的理解：如果在一维没法分类解决的问题，就放到二维去解决，同理，二维可以用三维解决。</p>\n<p>例：下图中，圈是一类，叉是另一类。在一维点集里，没法用一个点来分别两个类别。所以升维到二维后，就发现很简单的用一条曲线就做好了分类。而找这条曲线或曲面首先就需要一个核函数。</p>\n<p><a href=\"/img/uploads/2017/05/IMG_3199-e1493609643520.jpg\"><img class=\"alignnone wp-image-274 size-medium\" src=\"/img/uploads/2017/05/IMG_3199-e1493609643520-300x259.jpg\" alt=\"\" width=\"300\" height=\"259\" /></a></p>\n<pre>#python2.7\n#coding:utf-8\n#引入所需库\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm\n#这个文件创建方式<a href=\"https://ganjiacheng.cn/blog/?p=265\">点击这里</a>\nf=open(\"testSet2.txt\")\ndata=[]\nlabel=[]\n#定义250000个点的二维点集\nxx,yy=np.meshgrid(np.linspace(-3, 3, 500),np.linspace(-3, 3, 500))\n#读取点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\ndata=np.array(data)\n#建立模型，核函数默认\nclf = svm.SVC()\n#训练数据\nclf.fit(data, label)\n#根据250000个点得到距离超平面距离\nZ = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n#结果转为二维\nZ = Z.reshape(xx.shape)\n#画出平面上距离超平面为0的轮廓\ncontours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,linetypes='--')\n#画点集\nplt.scatter(data[:, 0], data[:, 1], s=30, c=label, cmap=plt.cm.Paired)\nplt.show()</pre>\n<p>结果展示：<img class=\"alignnone size-medium wp-image-278\" src=\"/img/uploads/2017/05/figure_1-2-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></p>"},{"title":"单变量非线性拟合和逻辑回归","catalog":true,"date":"2017-04-30T05:42:01.000Z","_content":"\n<p style=\"text-align: left;\">之前讲过最简单的<a href=\"https://ganjiacheng.cn/blog/?p=43\">线性拟合</a>和<a href=\"https://ganjiacheng.cn/blog/?p=152\">逻辑回归</a>，但常常的情况并不是一条直线就能解决问题的,所以来研究一下非线性的。<!--more--></p>\n<p style=\"text-align: left;\">总体方法还是和之前差不多的，只是改变了初始的变量的指数。首先列出式子，求cost function（代价函数，一般理解就是拟合的线与实际的点差多少距离经过处理的总和）。在根据梯度下降最小化cost function，就可以求得接近点的一组系数解，也就是下面的θ，之后就得到直线了。</p>\n<p style=\"text-align: left;\"><a href=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg\"><img class=\"alignnone wp-image-266 size-medium\" src=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></a></p>\n<p style=\"text-align: left;\">先来看非线性拟合，这里还是用for而不是矩阵来实现中间一些计算。</p>\n\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport numpy as np\nimport matplotlib.pyplot as plt\n#模拟产生点坐标\nk=int(np.random.random()*5+1)\nx=np.arange(-2,2,0.1)\ny=0\nfor i in range(k):\n    y+=np.random.random()*(x**k)\ny+=np.random.random(len(x))\n#N--幂指数也就是最高x^6\n#这里可以改进，如果N再高计算中会出现nan\nN=6\n#这个矩阵为上面的θ\nA=np.array([1]*N)\n#点的数量\nl=len(x)\n#梯度下降步长\nalpha=0.01\n#进行一千次迭代\nfor _ in xrange(1000):\n    #z为cost function叠加的那部分和的矩阵\n    z=np.zeros(N)\n    #遍历每个点，计算代价和\n    for i in xrange(l):\n        sh=0\n        for j in xrange(N):\n            sh+=A[j]*x[i]**j\n        for m in xrange(N):\n            z[m]+=(sh-y[i])*x[i]**m\n    #直接用矩阵计算更新所有θ\n    A=A-alpha*z/l \n#下面为画图部分\nplt.plot(x,y,\"ro\")\ntmpx=np.linspace(-2,2)\ndef cal(x):\n    tmpy=0\n    for i in xrange(N):\n        tmpy+=A[i]*x**i\n    return tmpy\ntmpy=[cal(tmpx[i]) for i in range(len(tmpx))]\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p style=\"text-align: left;\">效果展示：<a href=\"/img/uploads/2017/04/figure_1-3-1.png\"><img class=\"alignnone wp-image-268 size-medium\" src=\"/img/uploads/2017/04/figure_1-3-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p style=\"text-align: left;\">再来看非线性logistic回归。</p>\n<p style=\"text-align: left;\"><img class=\"alignnone size-medium wp-image-269\" src=\"/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></p>\n<p style=\"text-align: left;\">这里和上面主要改变的就是多了一步sigmoid函数，还有在求cost function的时候多了一步求ln，我发现比较可靠的一种理解是为了让函数为凸函数，梯度下降可以保证取到全局最低点。再求偏导得到更新θ的式子，基本是一样的。</p>\n\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#产生点并写入文件\nimport numpy as np\nf=open(\"testSet2.txt\",\"w\")\nfor i in xrange(500):\n    a=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    b=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    if a**2+b**2&lt;5:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   0\"\n    else:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   1\"</pre>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport matplotlib.pyplot as plt\nimport numpy as np\n#读取文件中的点坐标及分类\nf=open(\"testSet2.txt\")\n#两类点坐标\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\n#类别\nlabel=[]\n#点坐标\ndata=[]\n#代表有5个θ\nN=5\n#θ的矩阵\nA=np.array([1]*N)\n#步长，这里设的比较大因为小了到不了最低点\nalpha=0.1\n#不同类的点画不同颜色的点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\nl=len(label)\n#迭代2000次，过程和上面一样\nfor _ in xrange(2000):\n    z=np.zeros(N)\n    for i in xrange(l):\n        sh=1/(1+np.exp(-A[0]-data[i][0]*A[1]-data[i][1]*A[2]-A[3]*data[i][0]**2-A[4]*data[i][1]**2))\n        z[0]+=sh-label[i]\n        z[1]+=(sh-label[i])*data[i][0]\n        z[2]+=(sh-label[i])*data[i][1]\n        z[3]+=(sh-label[i])*data[i][0]**2\n        z[4]+=(sh-label[i])*data[i][1]**2\n    A=A-alpha*z/l\n#下面为画图过程\ntmpx=[i/10.0 for i in xrange(-30,30)]\ntmpy=[]\ntmpz=[]\nfor i in tmpx:\n    su=A[2]**2-4*A[4]*(A[0]+A[1]*i+A[3]*i**2)\n    if su&lt;0:\n        tmpy.append(0)\n        tmpz.append(0)\n    else:\n        tmpy.append((-A[2]-np.sqrt(su))/(2*A[4]))\n        tmpz.append((-A[2]+np.sqrt(su))/(2*A[4]))\nplt.plot(tmpx,tmpy)\nplt.plot(tmpx,tmpz)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n效果展示：<a href=\"/img/uploads/2017/04/figure_1-2.png\"><img class=\"alignnone wp-image-270 size-medium\" src=\"/img/uploads/2017/04/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7716281\">http://blog.csdn.net/abcjennifer/article/details/7716281</a>\n","source":"_posts/2017/article_22_单变量非线性拟合和逻辑回归.md","raw":"\n---\ntitle: 单变量非线性拟合和逻辑回归\ncatalog: true\ndate: 2017-4-30 13:42:01\n---\n\n<p style=\"text-align: left;\">之前讲过最简单的<a href=\"https://ganjiacheng.cn/blog/?p=43\">线性拟合</a>和<a href=\"https://ganjiacheng.cn/blog/?p=152\">逻辑回归</a>，但常常的情况并不是一条直线就能解决问题的,所以来研究一下非线性的。<!--more--></p>\n<p style=\"text-align: left;\">总体方法还是和之前差不多的，只是改变了初始的变量的指数。首先列出式子，求cost function（代价函数，一般理解就是拟合的线与实际的点差多少距离经过处理的总和）。在根据梯度下降最小化cost function，就可以求得接近点的一组系数解，也就是下面的θ，之后就得到直线了。</p>\n<p style=\"text-align: left;\"><a href=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg\"><img class=\"alignnone wp-image-266 size-medium\" src=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></a></p>\n<p style=\"text-align: left;\">先来看非线性拟合，这里还是用for而不是矩阵来实现中间一些计算。</p>\n\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport numpy as np\nimport matplotlib.pyplot as plt\n#模拟产生点坐标\nk=int(np.random.random()*5+1)\nx=np.arange(-2,2,0.1)\ny=0\nfor i in range(k):\n    y+=np.random.random()*(x**k)\ny+=np.random.random(len(x))\n#N--幂指数也就是最高x^6\n#这里可以改进，如果N再高计算中会出现nan\nN=6\n#这个矩阵为上面的θ\nA=np.array([1]*N)\n#点的数量\nl=len(x)\n#梯度下降步长\nalpha=0.01\n#进行一千次迭代\nfor _ in xrange(1000):\n    #z为cost function叠加的那部分和的矩阵\n    z=np.zeros(N)\n    #遍历每个点，计算代价和\n    for i in xrange(l):\n        sh=0\n        for j in xrange(N):\n            sh+=A[j]*x[i]**j\n        for m in xrange(N):\n            z[m]+=(sh-y[i])*x[i]**m\n    #直接用矩阵计算更新所有θ\n    A=A-alpha*z/l \n#下面为画图部分\nplt.plot(x,y,\"ro\")\ntmpx=np.linspace(-2,2)\ndef cal(x):\n    tmpy=0\n    for i in xrange(N):\n        tmpy+=A[i]*x**i\n    return tmpy\ntmpy=[cal(tmpx[i]) for i in range(len(tmpx))]\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p style=\"text-align: left;\">效果展示：<a href=\"/img/uploads/2017/04/figure_1-3-1.png\"><img class=\"alignnone wp-image-268 size-medium\" src=\"/img/uploads/2017/04/figure_1-3-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p style=\"text-align: left;\">再来看非线性logistic回归。</p>\n<p style=\"text-align: left;\"><img class=\"alignnone size-medium wp-image-269\" src=\"/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></p>\n<p style=\"text-align: left;\">这里和上面主要改变的就是多了一步sigmoid函数，还有在求cost function的时候多了一步求ln，我发现比较可靠的一种理解是为了让函数为凸函数，梯度下降可以保证取到全局最低点。再求偏导得到更新θ的式子，基本是一样的。</p>\n\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#产生点并写入文件\nimport numpy as np\nf=open(\"testSet2.txt\",\"w\")\nfor i in xrange(500):\n    a=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    b=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    if a**2+b**2&lt;5:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   0\"\n    else:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   1\"</pre>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport matplotlib.pyplot as plt\nimport numpy as np\n#读取文件中的点坐标及分类\nf=open(\"testSet2.txt\")\n#两类点坐标\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\n#类别\nlabel=[]\n#点坐标\ndata=[]\n#代表有5个θ\nN=5\n#θ的矩阵\nA=np.array([1]*N)\n#步长，这里设的比较大因为小了到不了最低点\nalpha=0.1\n#不同类的点画不同颜色的点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\nl=len(label)\n#迭代2000次，过程和上面一样\nfor _ in xrange(2000):\n    z=np.zeros(N)\n    for i in xrange(l):\n        sh=1/(1+np.exp(-A[0]-data[i][0]*A[1]-data[i][1]*A[2]-A[3]*data[i][0]**2-A[4]*data[i][1]**2))\n        z[0]+=sh-label[i]\n        z[1]+=(sh-label[i])*data[i][0]\n        z[2]+=(sh-label[i])*data[i][1]\n        z[3]+=(sh-label[i])*data[i][0]**2\n        z[4]+=(sh-label[i])*data[i][1]**2\n    A=A-alpha*z/l\n#下面为画图过程\ntmpx=[i/10.0 for i in xrange(-30,30)]\ntmpy=[]\ntmpz=[]\nfor i in tmpx:\n    su=A[2]**2-4*A[4]*(A[0]+A[1]*i+A[3]*i**2)\n    if su&lt;0:\n        tmpy.append(0)\n        tmpz.append(0)\n    else:\n        tmpy.append((-A[2]-np.sqrt(su))/(2*A[4]))\n        tmpz.append((-A[2]+np.sqrt(su))/(2*A[4]))\nplt.plot(tmpx,tmpy)\nplt.plot(tmpx,tmpz)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n效果展示：<a href=\"/img/uploads/2017/04/figure_1-2.png\"><img class=\"alignnone wp-image-270 size-medium\" src=\"/img/uploads/2017/04/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n\n致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7716281\">http://blog.csdn.net/abcjennifer/article/details/7716281</a>\n","slug":"2017/article_22_单变量非线性拟合和逻辑回归","published":1,"updated":"2021-01-27T04:46:28.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh729000p0770sn3nqzlm","content":"<p style=\"text-align: left;\">之前讲过最简单的<a href=\"https://ganjiacheng.cn/blog/?p=43\">线性拟合</a>和<a href=\"https://ganjiacheng.cn/blog/?p=152\">逻辑回归</a>，但常常的情况并不是一条直线就能解决问题的,所以来研究一下非线性的。<a id=\"more\"></a></p>\n<p style=\"text-align: left;\">总体方法还是和之前差不多的，只是改变了初始的变量的指数。首先列出式子，求cost function（代价函数，一般理解就是拟合的线与实际的点差多少距离经过处理的总和）。在根据梯度下降最小化cost function，就可以求得接近点的一组系数解，也就是下面的θ，之后就得到直线了。</p>\n<p style=\"text-align: left;\"><a href=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg\"><img class=\"alignnone wp-image-266 size-medium\" src=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\"></a></p>\n<p style=\"text-align: left;\">先来看非线性拟合，这里还是用for而不是矩阵来实现中间一些计算。</p>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport numpy as np\nimport matplotlib.pyplot as plt\n#模拟产生点坐标\nk=int(np.random.random()*5+1)\nx=np.arange(-2,2,0.1)\ny=0\nfor i in range(k):\n    y+=np.random.random()*(x**k)\ny+=np.random.random(len(x))\n#N--幂指数也就是最高x^6\n#这里可以改进，如果N再高计算中会出现nan\nN=6\n#这个矩阵为上面的θ\nA=np.array([1]*N)\n#点的数量\nl=len(x)\n#梯度下降步长\nalpha=0.01\n#进行一千次迭代\nfor _ in xrange(1000):\n    #z为cost function叠加的那部分和的矩阵\n    z=np.zeros(N)\n    #遍历每个点，计算代价和\n    for i in xrange(l):\n        sh=0\n        for j in xrange(N):\n            sh+=A[j]*x[i]**j\n        for m in xrange(N):\n            z[m]+=(sh-y[i])*x[i]**m\n    #直接用矩阵计算更新所有θ\n    A=A-alpha*z/l \n#下面为画图部分\nplt.plot(x,y,\"ro\")\ntmpx=np.linspace(-2,2)\ndef cal(x):\n    tmpy=0\n    for i in xrange(N):\n        tmpy+=A[i]*x**i\n    return tmpy\ntmpy=[cal(tmpx[i]) for i in range(len(tmpx))]\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p style=\"text-align: left;\">效果展示：<a href=\"/img/uploads/2017/04/figure_1-3-1.png\"><img class=\"alignnone wp-image-268 size-medium\" src=\"/img/uploads/2017/04/figure_1-3-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n<p style=\"text-align: left;\">再来看非线性logistic回归。</p>\n<p style=\"text-align: left;\"><img class=\"alignnone size-medium wp-image-269\" src=\"/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\"></p>\n<p style=\"text-align: left;\">这里和上面主要改变的就是多了一步sigmoid函数，还有在求cost function的时候多了一步求ln，我发现比较可靠的一种理解是为了让函数为凸函数，梯度下降可以保证取到全局最低点。再求偏导得到更新θ的式子，基本是一样的。</p>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#产生点并写入文件\nimport numpy as np\nf=open(\"testSet2.txt\",\"w\")\nfor i in xrange(500):\n    a=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    b=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    if a**2+b**2&lt;5:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   0\"\n    else:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   1\"</pre>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport matplotlib.pyplot as plt\nimport numpy as np\n#读取文件中的点坐标及分类\nf=open(\"testSet2.txt\")\n#两类点坐标\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\n#类别\nlabel=[]\n#点坐标\ndata=[]\n#代表有5个θ\nN=5\n#θ的矩阵\nA=np.array([1]*N)\n#步长，这里设的比较大因为小了到不了最低点\nalpha=0.1\n#不同类的点画不同颜色的点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\nl=len(label)\n#迭代2000次，过程和上面一样\nfor _ in xrange(2000):\n    z=np.zeros(N)\n    for i in xrange(l):\n        sh=1/(1+np.exp(-A[0]-data[i][0]*A[1]-data[i][1]*A[2]-A[3]*data[i][0]**2-A[4]*data[i][1]**2))\n        z[0]+=sh-label[i]\n        z[1]+=(sh-label[i])*data[i][0]\n        z[2]+=(sh-label[i])*data[i][1]\n        z[3]+=(sh-label[i])*data[i][0]**2\n        z[4]+=(sh-label[i])*data[i][1]**2\n    A=A-alpha*z/l\n#下面为画图过程\ntmpx=[i/10.0 for i in xrange(-30,30)]\ntmpy=[]\ntmpz=[]\nfor i in tmpx:\n    su=A[2]**2-4*A[4]*(A[0]+A[1]*i+A[3]*i**2)\n    if su&lt;0:\n        tmpy.append(0)\n        tmpz.append(0)\n    else:\n        tmpy.append((-A[2]-np.sqrt(su))/(2*A[4]))\n        tmpz.append((-A[2]+np.sqrt(su))/(2*A[4]))\nplt.plot(tmpx,tmpy)\nplt.plot(tmpx,tmpz)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/04/figure_1-2.png\"><img class=\"alignnone wp-image-270 size-medium\" src=\"/img/uploads/2017/04/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n<p>致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7716281\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/abcjennifer/article/details/7716281</a></p>\n","excerpt":"<p style=\"text-align: left;\">之前讲过最简单的<a href=\"https://ganjiacheng.cn/blog/?p=43\">线性拟合</a>和<a href=\"https://ganjiacheng.cn/blog/?p=152\">逻辑回归</a>，但常常的情况并不是一条直线就能解决问题的,所以来研究一下非线性的。","more":"</p>\n<p style=\"text-align: left;\">总体方法还是和之前差不多的，只是改变了初始的变量的指数。首先列出式子，求cost function（代价函数，一般理解就是拟合的线与实际的点差多少距离经过处理的总和）。在根据梯度下降最小化cost function，就可以求得接近点的一组系数解，也就是下面的θ，之后就得到直线了。</p>\n<p style=\"text-align: left;\"><a href=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389.jpg\"><img class=\"alignnone wp-image-266 size-medium\" src=\"/img/uploads/2017/04/QQ图片20170430130303-e1493528641389-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></a></p>\n<p style=\"text-align: left;\">先来看非线性拟合，这里还是用for而不是矩阵来实现中间一些计算。</p>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport numpy as np\nimport matplotlib.pyplot as plt\n#模拟产生点坐标\nk=int(np.random.random()*5+1)\nx=np.arange(-2,2,0.1)\ny=0\nfor i in range(k):\n    y+=np.random.random()*(x**k)\ny+=np.random.random(len(x))\n#N--幂指数也就是最高x^6\n#这里可以改进，如果N再高计算中会出现nan\nN=6\n#这个矩阵为上面的θ\nA=np.array([1]*N)\n#点的数量\nl=len(x)\n#梯度下降步长\nalpha=0.01\n#进行一千次迭代\nfor _ in xrange(1000):\n    #z为cost function叠加的那部分和的矩阵\n    z=np.zeros(N)\n    #遍历每个点，计算代价和\n    for i in xrange(l):\n        sh=0\n        for j in xrange(N):\n            sh+=A[j]*x[i]**j\n        for m in xrange(N):\n            z[m]+=(sh-y[i])*x[i]**m\n    #直接用矩阵计算更新所有θ\n    A=A-alpha*z/l \n#下面为画图部分\nplt.plot(x,y,\"ro\")\ntmpx=np.linspace(-2,2)\ndef cal(x):\n    tmpy=0\n    for i in xrange(N):\n        tmpy+=A[i]*x**i\n    return tmpy\ntmpy=[cal(tmpx[i]) for i in range(len(tmpx))]\nplt.plot(tmpx,tmpy)\nplt.show()</pre>\n<p style=\"text-align: left;\">效果展示：<a href=\"/img/uploads/2017/04/figure_1-3-1.png\"><img class=\"alignnone wp-image-268 size-medium\" src=\"/img/uploads/2017/04/figure_1-3-1-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p style=\"text-align: left;\">再来看非线性logistic回归。</p>\n<p style=\"text-align: left;\"><img class=\"alignnone size-medium wp-image-269\" src=\"/img/uploads/2017/04/QQ图片20170430132521-e1493529949189-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></p>\n<p style=\"text-align: left;\">这里和上面主要改变的就是多了一步sigmoid函数，还有在求cost function的时候多了一步求ln，我发现比较可靠的一种理解是为了让函数为凸函数，梯度下降可以保证取到全局最低点。再求偏导得到更新θ的式子，基本是一样的。</p>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#产生点并写入文件\nimport numpy as np\nf=open(\"testSet2.txt\",\"w\")\nfor i in xrange(500):\n    a=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    b=np.random.random()*5 if np.random.random()&gt;0.5 else -np.random.random()*5\n    if a**2+b**2&lt;5:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   0\"\n    else:\n        print &gt;&gt; f,str(a)+\"    \"+str(b)+\"   1\"</pre>\n<pre style=\"text-align: left;\">#python2.7\n#coding:utf-8\n#引入相关库\nimport matplotlib.pyplot as plt\nimport numpy as np\n#读取文件中的点坐标及分类\nf=open(\"testSet2.txt\")\n#两类点坐标\ngdatax=[]\ngdatay=[]\nrdatax=[]\nrdatay=[]\n#类别\nlabel=[]\n#点坐标\ndata=[]\n#代表有5个θ\nN=5\n#θ的矩阵\nA=np.array([1]*N)\n#步长，这里设的比较大因为小了到不了最低点\nalpha=0.1\n#不同类的点画不同颜色的点\nfor i in f.readlines():\n    linearr=i.strip().split()\n    data.append([float(linearr[0]),float(linearr[1])])\n    label.append(int(linearr[2]))\n    if int(linearr[2])==1:\n        gdatax.append(linearr[0])\n        gdatay.append(linearr[1])\n    else:\n        rdatax.append(linearr[0])\n        rdatay.append(linearr[1])\nl=len(label)\n#迭代2000次，过程和上面一样\nfor _ in xrange(2000):\n    z=np.zeros(N)\n    for i in xrange(l):\n        sh=1/(1+np.exp(-A[0]-data[i][0]*A[1]-data[i][1]*A[2]-A[3]*data[i][0]**2-A[4]*data[i][1]**2))\n        z[0]+=sh-label[i]\n        z[1]+=(sh-label[i])*data[i][0]\n        z[2]+=(sh-label[i])*data[i][1]\n        z[3]+=(sh-label[i])*data[i][0]**2\n        z[4]+=(sh-label[i])*data[i][1]**2\n    A=A-alpha*z/l\n#下面为画图过程\ntmpx=[i/10.0 for i in xrange(-30,30)]\ntmpy=[]\ntmpz=[]\nfor i in tmpx:\n    su=A[2]**2-4*A[4]*(A[0]+A[1]*i+A[3]*i**2)\n    if su&lt;0:\n        tmpy.append(0)\n        tmpz.append(0)\n    else:\n        tmpy.append((-A[2]-np.sqrt(su))/(2*A[4]))\n        tmpz.append((-A[2]+np.sqrt(su))/(2*A[4]))\nplt.plot(tmpx,tmpy)\nplt.plot(tmpx,tmpz)\nplt.plot(gdatax,gdatay,'ro',c='g')\nplt.plot(rdatax,rdatay,'ro',c='r')\nplt.show()</pre>\n<p>效果展示：<a href=\"/img/uploads/2017/04/figure_1-2.png\"><img class=\"alignnone wp-image-270 size-medium\" src=\"/img/uploads/2017/04/figure_1-2-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>\n<p>致谢：<a href=\"http://blog.csdn.net/abcjennifer/article/details/7716281\">http://blog.csdn.net/abcjennifer/article/details/7716281</a></p>"},{"title":"yolo v2在windows的配置","catalog":true,"date":"2017-07-22T08:04:02.000Z","_content":"\n这里讲讲yolo在windows的配置，实际操作可行，这里使用时电脑为win8.1。\n\n开始前可以到nvidia官网先看看显卡是否支持gpu哦！<!--more-->\n\n首先下载vs2015，cuda，cudnn并配置好，这里不多叙述，标准就是：能在vs创建一个cuda项目并运行他的默认导入的代码并得到结果。在下载个opencv2.4.9，这里2.49是项目需求，改其他版本的话得改代码。\n\n之后使用了git下载github上某个大神改好后的代码\n<pre>git clone https://github.com/AlexeyAB/darknet.git</pre>\n在vs里打开项目，打开build下的darknet.sln\n\n然后在右边项目上右键-&gt;属性，\n\n在 vc++目录 中编辑包含目录，把opencv里的include文件夹路径添加到里面。\n\n在 c/c++   常规    附加包含目录 中把opencv的include路径加进去，如果没有cudaToolkitIncludeDir则把cuda和cudnn的include路径加进去。\n\n在c/c++   预处理器   预处理器定义中加上OPENCV和GPU。有报错的话也可以加上_CRT_SECURE_NO_DEPRECATE，_SCL_SECURE_NO_DEPRECATE这两个。\n\n在链接器   常规   添加库目录中加入opencv的lib路径，如果没有cuda_Path的话加上cuda，cudnn的lib路径。\n\n在链接器   输入   附加依赖项中加入pthreadVC2.lib（自行下载），cublas.lib，curand.lib，cudart.lib和opencv里的所有lib。\n\n然后就可以尝试运行啦。少库的话把库的路径加进去就行。\n\n之后就可以下载一个<a href=\"https://pjreddie.com/media/files/yolo.weights\">yolo.weights</a>，放在x64文件夹下。\n\n在x64文件夹下运行\n<pre>darknet.exe detector test data/coco.data yolo.cfg yolo.weights -i 0 -thresh 0.2</pre>\n输入图片文件路径\n\n配置好opencv的话就会直接展示，否则会保存成prediction.png文件。\n\n或者运行下面的代码就会调用摄像头并时时检测。\n<pre>darknet.exe detector demo data/coco.data yolo.cfg yolo.weights</pre>\n看data/coco.name就可以知道该模型可识别的80类。\n\ncpu上的平均8秒一张图左右，\n\n我的920m gpu可以达到5fps，也还达不到视频标准。\n\n下次再具体讲讲训练自己的数据。\n\n参考地址：<a href=\"https://github.com/AlexeyAB/darknet\">https://github.com/AlexeyAB/darknet</a>\n","source":"_posts/2017/article_26_yolo v2在windows的配置.md","raw":"\n---\ntitle: yolo v2在windows的配置\ncatalog: true\ndate: 2017-7-22 16:04:02\n---\n\n这里讲讲yolo在windows的配置，实际操作可行，这里使用时电脑为win8.1。\n\n开始前可以到nvidia官网先看看显卡是否支持gpu哦！<!--more-->\n\n首先下载vs2015，cuda，cudnn并配置好，这里不多叙述，标准就是：能在vs创建一个cuda项目并运行他的默认导入的代码并得到结果。在下载个opencv2.4.9，这里2.49是项目需求，改其他版本的话得改代码。\n\n之后使用了git下载github上某个大神改好后的代码\n<pre>git clone https://github.com/AlexeyAB/darknet.git</pre>\n在vs里打开项目，打开build下的darknet.sln\n\n然后在右边项目上右键-&gt;属性，\n\n在 vc++目录 中编辑包含目录，把opencv里的include文件夹路径添加到里面。\n\n在 c/c++   常规    附加包含目录 中把opencv的include路径加进去，如果没有cudaToolkitIncludeDir则把cuda和cudnn的include路径加进去。\n\n在c/c++   预处理器   预处理器定义中加上OPENCV和GPU。有报错的话也可以加上_CRT_SECURE_NO_DEPRECATE，_SCL_SECURE_NO_DEPRECATE这两个。\n\n在链接器   常规   添加库目录中加入opencv的lib路径，如果没有cuda_Path的话加上cuda，cudnn的lib路径。\n\n在链接器   输入   附加依赖项中加入pthreadVC2.lib（自行下载），cublas.lib，curand.lib，cudart.lib和opencv里的所有lib。\n\n然后就可以尝试运行啦。少库的话把库的路径加进去就行。\n\n之后就可以下载一个<a href=\"https://pjreddie.com/media/files/yolo.weights\">yolo.weights</a>，放在x64文件夹下。\n\n在x64文件夹下运行\n<pre>darknet.exe detector test data/coco.data yolo.cfg yolo.weights -i 0 -thresh 0.2</pre>\n输入图片文件路径\n\n配置好opencv的话就会直接展示，否则会保存成prediction.png文件。\n\n或者运行下面的代码就会调用摄像头并时时检测。\n<pre>darknet.exe detector demo data/coco.data yolo.cfg yolo.weights</pre>\n看data/coco.name就可以知道该模型可识别的80类。\n\ncpu上的平均8秒一张图左右，\n\n我的920m gpu可以达到5fps，也还达不到视频标准。\n\n下次再具体讲讲训练自己的数据。\n\n参考地址：<a href=\"https://github.com/AlexeyAB/darknet\">https://github.com/AlexeyAB/darknet</a>\n","slug":"2017/article_26_yolo v2在windows的配置","published":1,"updated":"2021-01-27T04:46:28.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72a000q07702wqe4ut2","content":"<p>这里讲讲yolo在windows的配置，实际操作可行，这里使用时电脑为win8.1。</p>\n<p>开始前可以到nvidia官网先看看显卡是否支持gpu哦！<a id=\"more\"></a></p>\n<p>首先下载vs2015，cuda，cudnn并配置好，这里不多叙述，标准就是：能在vs创建一个cuda项目并运行他的默认导入的代码并得到结果。在下载个opencv2.4.9，这里2.49是项目需求，改其他版本的话得改代码。</p>\n<p>之后使用了git下载github上某个大神改好后的代码</p>\n<pre>git clone https://github.com/AlexeyAB/darknet.git</pre>\n<p>在vs里打开项目，打开build下的darknet.sln</p>\n<p>然后在右边项目上右键-&gt;属性，</p>\n<p>在 vc++目录 中编辑包含目录，把opencv里的include文件夹路径添加到里面。</p>\n<p>在 c/c++   常规    附加包含目录 中把opencv的include路径加进去，如果没有cudaToolkitIncludeDir则把cuda和cudnn的include路径加进去。</p>\n<p>在c/c++   预处理器   预处理器定义中加上OPENCV和GPU。有报错的话也可以加上_CRT_SECURE_NO_DEPRECATE，_SCL_SECURE_NO_DEPRECATE这两个。</p>\n<p>在链接器   常规   添加库目录中加入opencv的lib路径，如果没有cuda_Path的话加上cuda，cudnn的lib路径。</p>\n<p>在链接器   输入   附加依赖项中加入pthreadVC2.lib（自行下载），cublas.lib，curand.lib，cudart.lib和opencv里的所有lib。</p>\n<p>然后就可以尝试运行啦。少库的话把库的路径加进去就行。</p>\n<p>之后就可以下载一个<a href=\"https://pjreddie.com/media/files/yolo.weights\" target=\"_blank\" rel=\"external\">yolo.weights</a>，放在x64文件夹下。</p>\n<p>在x64文件夹下运行</p>\n<pre>darknet.exe detector test data/coco.data yolo.cfg yolo.weights -i 0 -thresh 0.2</pre>\n<p>输入图片文件路径</p>\n<p>配置好opencv的话就会直接展示，否则会保存成prediction.png文件。</p>\n<p>或者运行下面的代码就会调用摄像头并时时检测。</p>\n<pre>darknet.exe detector demo data/coco.data yolo.cfg yolo.weights</pre>\n<p>看data/coco.name就可以知道该模型可识别的80类。</p>\n<p>cpu上的平均8秒一张图左右，</p>\n<p>我的920m gpu可以达到5fps，也还达不到视频标准。</p>\n<p>下次再具体讲讲训练自己的数据。</p>\n<p>参考地址：<a href=\"https://github.com/AlexeyAB/darknet\" target=\"_blank\" rel=\"external\">https://github.com/AlexeyAB/darknet</a></p>\n","excerpt":"<p>这里讲讲yolo在windows的配置，实际操作可行，这里使用时电脑为win8.1。</p>\n<p>开始前可以到nvidia官网先看看显卡是否支持gpu哦！","more":"</p>\n<p>首先下载vs2015，cuda，cudnn并配置好，这里不多叙述，标准就是：能在vs创建一个cuda项目并运行他的默认导入的代码并得到结果。在下载个opencv2.4.9，这里2.49是项目需求，改其他版本的话得改代码。</p>\n<p>之后使用了git下载github上某个大神改好后的代码</p>\n<pre>git clone https://github.com/AlexeyAB/darknet.git</pre>\n<p>在vs里打开项目，打开build下的darknet.sln</p>\n<p>然后在右边项目上右键-&gt;属性，</p>\n<p>在 vc++目录 中编辑包含目录，把opencv里的include文件夹路径添加到里面。</p>\n<p>在 c/c++   常规    附加包含目录 中把opencv的include路径加进去，如果没有cudaToolkitIncludeDir则把cuda和cudnn的include路径加进去。</p>\n<p>在c/c++   预处理器   预处理器定义中加上OPENCV和GPU。有报错的话也可以加上_CRT_SECURE_NO_DEPRECATE，_SCL_SECURE_NO_DEPRECATE这两个。</p>\n<p>在链接器   常规   添加库目录中加入opencv的lib路径，如果没有cuda_Path的话加上cuda，cudnn的lib路径。</p>\n<p>在链接器   输入   附加依赖项中加入pthreadVC2.lib（自行下载），cublas.lib，curand.lib，cudart.lib和opencv里的所有lib。</p>\n<p>然后就可以尝试运行啦。少库的话把库的路径加进去就行。</p>\n<p>之后就可以下载一个<a href=\"https://pjreddie.com/media/files/yolo.weights\">yolo.weights</a>，放在x64文件夹下。</p>\n<p>在x64文件夹下运行</p>\n<pre>darknet.exe detector test data/coco.data yolo.cfg yolo.weights -i 0 -thresh 0.2</pre>\n<p>输入图片文件路径</p>\n<p>配置好opencv的话就会直接展示，否则会保存成prediction.png文件。</p>\n<p>或者运行下面的代码就会调用摄像头并时时检测。</p>\n<pre>darknet.exe detector demo data/coco.data yolo.cfg yolo.weights</pre>\n<p>看data/coco.name就可以知道该模型可识别的80类。</p>\n<p>cpu上的平均8秒一张图左右，</p>\n<p>我的920m gpu可以达到5fps，也还达不到视频标准。</p>\n<p>下次再具体讲讲训练自己的数据。</p>\n<p>参考地址：<a href=\"https://github.com/AlexeyAB/darknet\">https://github.com/AlexeyAB/darknet</a></p>"},{"title":"使用dlib实现人脸检测和笑脸识别","catalog":true,"date":"2017-05-25T17:34:05.000Z","_content":"\n人脸检测技术，在深度学习之前，特征+分类器一直是最好的选择，dlib便是用hog特征+级联分类器实现了认脸的检测，它本身是用c++写的，但也有python接口。要看具体的文档可以到<a href=\"http://dlib.net/\">dlib官网</a>，这里只实现一个简单的应用。<!--more-->这是一个认脸定位+是不是笑脸的分类的应用。使用dlib定位，使用sklearn的svm来完成分类，笑脸与不笑脸是预先训练的，数据得自行准备。准备笑脸的图放在smile文件夹下，不笑的图放在no smile文件夹下。\n<pre>#python3.5\n#windows\n#author:gjc\nimport cv2\nimport dlib\nimport numpy as np\nfrom sklearn import svm\nimport os\nfrom PIL import Image\n#获取默认摄像头\ncap = cv2.VideoCapture(0)\n#dlib加载68个点模型\ndetector=dlib.get_frontal_face_detector()\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\npredictor = dlib.shape_predictor(predictor_path)\ndata=[]\nlabel=[]\n#读取认脸已分类好的数据\ndef read(dir,l):\n    f=os.listdir(dir)\n    L=len(f)-1\n    for i in range(L):\n        imgdir=dir+str(f[i])\n        im=Image.open(imgdir)\n        #draw = ImageDraw.Draw(im)\n        dets=detector(np.array(im),0)\n        if len(dets)==0:\n            continue\n        facepoint = np.array([[p.x, p.y] for p in predictor(np.array(im), dets[0]).parts()])\n        arr=np.zeros((20,2))\n        for j in range(48,68):\n            #draw.arc((facepoint[j][0]-5, facepoint[j][1]-5, facepoint[j][0]+5, facepoint[j][1]+5), 0, 360, fill=(55,255,155))  \n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        data.append(arr.flatten())\n        label.append(l)\nread(\"smile/\",1)\nread(\"nosmile/\",0)\n#用svm进行分类\nclf = svm.SVC()\nclf.fit(np.array(data), label)\nwhile(1):\n    #读取摄像头图片\n    ret, frame = cap.read()\n    #定位\n    dets=detector(frame,0)\n    #画人脸的框\n    for i,d in enumerate(dets):\n        cv2.rectangle(frame, (int(d.left()), int(d.top())), (int(d.right()), int(d.bottom())), (0,255,0),2,0)\n    for i,d in enumerate(dets):\n        facepoint = np.array([[p.x, p.y] for p in predictor(frame, dets[i]).parts()])\n        #画68个点\n        for j in range(68):\n            #if facepoint[j][1]&lt;640 and facepoint[j][0]&lt;480:\n            #frame[facepoint[j][1]][facepoint[j][0]] = [0,0,0]\n            #cv2.line(frame,(facepoint[j][0],facepoint[j][1]),(facepoint[j+1][0],facepoint[j+1][1]),(155,155,155),2)\n            cv2.circle(frame,(facepoint[j][0],facepoint[j][1]),2,(55,255,155),2)\n        arr=np.zeros((20,2))\n        #读取特征点，归一化\n        for j in range(48,68):\n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        #svm分类判断是否笑脸\n        if clf.decision_function(arr.flatten().reshape(1,-1))&gt;0:\n            cv2.putText(frame, 'smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n        else:\n            cv2.putText(frame, 'No smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n    #展示处理后的图片\n    cv2.imshow(\"capture\", frame)\n    if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()</pre>\n效果如下：\n\n<img class=\"alignnone size-medium wp-image-294\" src=\"/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" /> <img class=\"alignnone size-medium wp-image-295\" src=\"/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" />\n","source":"_posts/2017/article_25_使用dlib实现人脸检测和笑脸识别.md","raw":"\n---\ntitle: 使用dlib实现人脸检测和笑脸识别\ncatalog: true\ndate: 2017-5-26 01:34:05\n---\n\n人脸检测技术，在深度学习之前，特征+分类器一直是最好的选择，dlib便是用hog特征+级联分类器实现了认脸的检测，它本身是用c++写的，但也有python接口。要看具体的文档可以到<a href=\"http://dlib.net/\">dlib官网</a>，这里只实现一个简单的应用。<!--more-->这是一个认脸定位+是不是笑脸的分类的应用。使用dlib定位，使用sklearn的svm来完成分类，笑脸与不笑脸是预先训练的，数据得自行准备。准备笑脸的图放在smile文件夹下，不笑的图放在no smile文件夹下。\n<pre>#python3.5\n#windows\n#author:gjc\nimport cv2\nimport dlib\nimport numpy as np\nfrom sklearn import svm\nimport os\nfrom PIL import Image\n#获取默认摄像头\ncap = cv2.VideoCapture(0)\n#dlib加载68个点模型\ndetector=dlib.get_frontal_face_detector()\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\npredictor = dlib.shape_predictor(predictor_path)\ndata=[]\nlabel=[]\n#读取认脸已分类好的数据\ndef read(dir,l):\n    f=os.listdir(dir)\n    L=len(f)-1\n    for i in range(L):\n        imgdir=dir+str(f[i])\n        im=Image.open(imgdir)\n        #draw = ImageDraw.Draw(im)\n        dets=detector(np.array(im),0)\n        if len(dets)==0:\n            continue\n        facepoint = np.array([[p.x, p.y] for p in predictor(np.array(im), dets[0]).parts()])\n        arr=np.zeros((20,2))\n        for j in range(48,68):\n            #draw.arc((facepoint[j][0]-5, facepoint[j][1]-5, facepoint[j][0]+5, facepoint[j][1]+5), 0, 360, fill=(55,255,155))  \n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        data.append(arr.flatten())\n        label.append(l)\nread(\"smile/\",1)\nread(\"nosmile/\",0)\n#用svm进行分类\nclf = svm.SVC()\nclf.fit(np.array(data), label)\nwhile(1):\n    #读取摄像头图片\n    ret, frame = cap.read()\n    #定位\n    dets=detector(frame,0)\n    #画人脸的框\n    for i,d in enumerate(dets):\n        cv2.rectangle(frame, (int(d.left()), int(d.top())), (int(d.right()), int(d.bottom())), (0,255,0),2,0)\n    for i,d in enumerate(dets):\n        facepoint = np.array([[p.x, p.y] for p in predictor(frame, dets[i]).parts()])\n        #画68个点\n        for j in range(68):\n            #if facepoint[j][1]&lt;640 and facepoint[j][0]&lt;480:\n            #frame[facepoint[j][1]][facepoint[j][0]] = [0,0,0]\n            #cv2.line(frame,(facepoint[j][0],facepoint[j][1]),(facepoint[j+1][0],facepoint[j+1][1]),(155,155,155),2)\n            cv2.circle(frame,(facepoint[j][0],facepoint[j][1]),2,(55,255,155),2)\n        arr=np.zeros((20,2))\n        #读取特征点，归一化\n        for j in range(48,68):\n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        #svm分类判断是否笑脸\n        if clf.decision_function(arr.flatten().reshape(1,-1))&gt;0:\n            cv2.putText(frame, 'smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n        else:\n            cv2.putText(frame, 'No smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n    #展示处理后的图片\n    cv2.imshow(\"capture\", frame)\n    if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()</pre>\n效果如下：\n\n<img class=\"alignnone size-medium wp-image-294\" src=\"/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" /> <img class=\"alignnone size-medium wp-image-295\" src=\"/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" />\n","slug":"2017/article_25_使用dlib实现人脸检测和笑脸识别","published":1,"updated":"2021-01-27T04:46:28.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72c000r0770lhcg4a7c","content":"<p>人脸检测技术，在深度学习之前，特征+分类器一直是最好的选择，dlib便是用hog特征+级联分类器实现了认脸的检测，它本身是用c++写的，但也有python接口。要看具体的文档可以到<a href=\"http://dlib.net/\" target=\"_blank\" rel=\"external\">dlib官网</a>，这里只实现一个简单的应用。<a id=\"more\"></a>这是一个认脸定位+是不是笑脸的分类的应用。使用dlib定位，使用sklearn的svm来完成分类，笑脸与不笑脸是预先训练的，数据得自行准备。准备笑脸的图放在smile文件夹下，不笑的图放在no smile文件夹下。</p>\n<pre>#python3.5\n#windows\n#author:gjc\nimport cv2\nimport dlib\nimport numpy as np\nfrom sklearn import svm\nimport os\nfrom PIL import Image\n#获取默认摄像头\ncap = cv2.VideoCapture(0)\n#dlib加载68个点模型\ndetector=dlib.get_frontal_face_detector()\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\npredictor = dlib.shape_predictor(predictor_path)\ndata=[]\nlabel=[]\n#读取认脸已分类好的数据\ndef read(dir,l):\n    f=os.listdir(dir)\n    L=len(f)-1\n    for i in range(L):\n        imgdir=dir+str(f[i])\n        im=Image.open(imgdir)\n        #draw = ImageDraw.Draw(im)\n        dets=detector(np.array(im),0)\n        if len(dets)==0:\n            continue\n        facepoint = np.array([[p.x, p.y] for p in predictor(np.array(im), dets[0]).parts()])\n        arr=np.zeros((20,2))\n        for j in range(48,68):\n            #draw.arc((facepoint[j][0]-5, facepoint[j][1]-5, facepoint[j][0]+5, facepoint[j][1]+5), 0, 360, fill=(55,255,155))  \n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        data.append(arr.flatten())\n        label.append(l)\nread(\"smile/\",1)\nread(\"nosmile/\",0)\n#用svm进行分类\nclf = svm.SVC()\nclf.fit(np.array(data), label)\nwhile(1):\n    #读取摄像头图片\n    ret, frame = cap.read()\n    #定位\n    dets=detector(frame,0)\n    #画人脸的框\n    for i,d in enumerate(dets):\n        cv2.rectangle(frame, (int(d.left()), int(d.top())), (int(d.right()), int(d.bottom())), (0,255,0),2,0)\n    for i,d in enumerate(dets):\n        facepoint = np.array([[p.x, p.y] for p in predictor(frame, dets[i]).parts()])\n        #画68个点\n        for j in range(68):\n            #if facepoint[j][1]&lt;640 and facepoint[j][0]&lt;480:\n            #frame[facepoint[j][1]][facepoint[j][0]] = [0,0,0]\n            #cv2.line(frame,(facepoint[j][0],facepoint[j][1]),(facepoint[j+1][0],facepoint[j+1][1]),(155,155,155),2)\n            cv2.circle(frame,(facepoint[j][0],facepoint[j][1]),2,(55,255,155),2)\n        arr=np.zeros((20,2))\n        #读取特征点，归一化\n        for j in range(48,68):\n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        #svm分类判断是否笑脸\n        if clf.decision_function(arr.flatten().reshape(1,-1))&gt;0:\n            cv2.putText(frame, 'smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n        else:\n            cv2.putText(frame, 'No smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n    #展示处理后的图片\n    cv2.imshow(\"capture\", frame)\n    if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()</pre>\n<p>效果如下：</p>\n<p><img class=\"alignnone size-medium wp-image-294\" src=\"/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\"> <img class=\"alignnone size-medium wp-image-295\" src=\"/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\"></p>\n","excerpt":"<p>人脸检测技术，在深度学习之前，特征+分类器一直是最好的选择，dlib便是用hog特征+级联分类器实现了认脸的检测，它本身是用c++写的，但也有python接口。要看具体的文档可以到<a href=\"http://dlib.net/\">dlib官网</a>，这里只实现一个简单的应用。","more":"这是一个认脸定位+是不是笑脸的分类的应用。使用dlib定位，使用sklearn的svm来完成分类，笑脸与不笑脸是预先训练的，数据得自行准备。准备笑脸的图放在smile文件夹下，不笑的图放在no smile文件夹下。</p>\n<pre>#python3.5\n#windows\n#author:gjc\nimport cv2\nimport dlib\nimport numpy as np\nfrom sklearn import svm\nimport os\nfrom PIL import Image\n#获取默认摄像头\ncap = cv2.VideoCapture(0)\n#dlib加载68个点模型\ndetector=dlib.get_frontal_face_detector()\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\npredictor = dlib.shape_predictor(predictor_path)\ndata=[]\nlabel=[]\n#读取认脸已分类好的数据\ndef read(dir,l):\n    f=os.listdir(dir)\n    L=len(f)-1\n    for i in range(L):\n        imgdir=dir+str(f[i])\n        im=Image.open(imgdir)\n        #draw = ImageDraw.Draw(im)\n        dets=detector(np.array(im),0)\n        if len(dets)==0:\n            continue\n        facepoint = np.array([[p.x, p.y] for p in predictor(np.array(im), dets[0]).parts()])\n        arr=np.zeros((20,2))\n        for j in range(48,68):\n            #draw.arc((facepoint[j][0]-5, facepoint[j][1]-5, facepoint[j][0]+5, facepoint[j][1]+5), 0, 360, fill=(55,255,155))  \n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        data.append(arr.flatten())\n        label.append(l)\nread(\"smile/\",1)\nread(\"nosmile/\",0)\n#用svm进行分类\nclf = svm.SVC()\nclf.fit(np.array(data), label)\nwhile(1):\n    #读取摄像头图片\n    ret, frame = cap.read()\n    #定位\n    dets=detector(frame,0)\n    #画人脸的框\n    for i,d in enumerate(dets):\n        cv2.rectangle(frame, (int(d.left()), int(d.top())), (int(d.right()), int(d.bottom())), (0,255,0),2,0)\n    for i,d in enumerate(dets):\n        facepoint = np.array([[p.x, p.y] for p in predictor(frame, dets[i]).parts()])\n        #画68个点\n        for j in range(68):\n            #if facepoint[j][1]&lt;640 and facepoint[j][0]&lt;480:\n            #frame[facepoint[j][1]][facepoint[j][0]] = [0,0,0]\n            #cv2.line(frame,(facepoint[j][0],facepoint[j][1]),(facepoint[j+1][0],facepoint[j+1][1]),(155,155,155),2)\n            cv2.circle(frame,(facepoint[j][0],facepoint[j][1]),2,(55,255,155),2)\n        arr=np.zeros((20,2))\n        #读取特征点，归一化\n        for j in range(48,68):\n            arr[j-48][0]=facepoint[j][0]-facepoint[27][0]\n            arr[j-48][1]=facepoint[j][1]-facepoint[27][1]\n        arr=(arr-arr.min())/(arr.max()-arr.min())\n        #svm分类判断是否笑脸\n        if clf.decision_function(arr.flatten().reshape(1,-1))&gt;0:\n            cv2.putText(frame, 'smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n        else:\n            cv2.putText(frame, 'No smile', (int(d.left()),int(d.top())), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255 ,0), thickness = 2, lineType = 8)  \n    #展示处理后的图片\n    cv2.imshow(\"capture\", frame)\n    if cv2.waitKey(1) &amp; 0xFF == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()</pre>\n<p>效果如下：</p>\n<p><img class=\"alignnone size-medium wp-image-294\" src=\"/img/uploads/2017/05/QQ截图20170530130825-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" /> <img class=\"alignnone size-medium wp-image-295\" src=\"/img/uploads/2017/05/QQ截图20170530130839-300x237.jpg\" alt=\"\" width=\"300\" height=\"237\" /></p>"},{"title":"tensorflow入门之mnist手写数字识别","catalog":true,"date":"2017-04-29T03:22:31.000Z","_content":"\n这是<a href=\"https://www.tensorflow.org/\">tensorflow官网</a>的第一个例子，按他的做就可以在测试数据集达到91%左右的识别率。之后的cnn版本就可以在测试数据集达到98%以上的正确率。\n\n因为直接用他的写没什么感觉，然后稍微摸索了一下mnist的内容。<!--more-->\n\n下面先将mnist的55000个测试数据变成图片的形式，直观一点。\n<pre>#python3.5\n#windows\n#引入所需库\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nfrom PIL import Image,ImageFilter\nimport numpy as np\nimport os\n#关掉警告,tensorflow会有op unknown的警告\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n#读取mnist数据,第一次的话会自动下载\nmnist=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n#将每个784*1的像素数据变成28*28,再生成图像\nfor z in range(len(mnist.train.images)):\n    imgArr=mnist.train.images[z]\n    im=Image.new(\"RGB\",(28,28))\n    for i in range(28):\n        for j in range(28):\n            r=int(imgArr[i*28+j]*255)\n            im.putpixel((j,i),(r,r,r))\n    num=np.argmax(mnist.train.labels[z])\n    im.save(\"train/\"+str(z)+\"_\"+str(num)+\".jpg\",\"jpeg\")\nprint(\"finish\")</pre>\n之后直接读取图像来进行训练。\n<pre>#python3.5\n#windows\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image,ImageFilter\nimport os\nmnists=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nf=os.listdir(\"train/\")\nL=len(f)-1\nmnist=np.zeros((L,784))\nlabel=np.zeros((L,10))\n#读取每个图像数据存到mnist中，类别存到label中\nfor i in range(L):\n    imgdir='train/'+str(f[i])\n    img=Image.open(imgdir).convert(\"L\")\n    mnist[i]=np.array(img.getdata())/255\n    label[i]=[1 if j==int(f[i].split(\"_\")[1][:-4]) else 0 for j in range(10)]\n#之后的操作和tensorflow官网一样\nx=tf.placeholder(tf.float32,[None,784])\nw=tf.Variable(tf.zeros([784,10]))\nb=tf.Variable(tf.zeros([10]))\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(tf.float32,[None,10])\ncross_entropy=-tf.reduce_sum(y_*tf.log(y))\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\nfor _ in range(1000):\n    rand=np.random.randint(0,L,(100,))\n    batch_xs=mnist[rand]\n    batch_ys=label[rand]\n    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})\ncorrect_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\naccuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\nprint(sess.run(accuracy,feed_dict={x:mnists.test.images,y_:mnists.test.labels})</pre>\n运行结果91%左右。也算稍稍做了改变。\n\ncnn版的还有待研究，虽然代码也很简单。先贴在这里（网上找的，兄台没记住链接不好意思）。\n<pre>import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nprint(\"Download Done!\")\n\nsess = tf.InteractiveSession()\n\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1, 28, 28, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nW_fc1 = weight_varible([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess.run(tf.initialize_all_variables())\nfor i in range(2000):\n    batch = mnist.train.next_batch(50)\n\n    if i % 100 == 0:\n        train_accuacy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0})\n        print(\"step %d, training accuracy %g\"%(i, train_accuacy))\n    train_step.run(feed_dict = {x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n# accuacy on test\nprint(\"test accuracy %g\"%(accuracy.eval(feed_dict={x: mnist.test.images[0:2000], y_: mnist.test.labels[0:2000], keep_prob: 1.0})))</pre>\n","source":"_posts/2017/article_21_tensorflow入门之mnist手写数字识别.md","raw":"\n---\ntitle: tensorflow入门之mnist手写数字识别\ncatalog: true\ndate: 2017-4-29 11:22:31\n---\n\n这是<a href=\"https://www.tensorflow.org/\">tensorflow官网</a>的第一个例子，按他的做就可以在测试数据集达到91%左右的识别率。之后的cnn版本就可以在测试数据集达到98%以上的正确率。\n\n因为直接用他的写没什么感觉，然后稍微摸索了一下mnist的内容。<!--more-->\n\n下面先将mnist的55000个测试数据变成图片的形式，直观一点。\n<pre>#python3.5\n#windows\n#引入所需库\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nfrom PIL import Image,ImageFilter\nimport numpy as np\nimport os\n#关掉警告,tensorflow会有op unknown的警告\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n#读取mnist数据,第一次的话会自动下载\nmnist=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n#将每个784*1的像素数据变成28*28,再生成图像\nfor z in range(len(mnist.train.images)):\n    imgArr=mnist.train.images[z]\n    im=Image.new(\"RGB\",(28,28))\n    for i in range(28):\n        for j in range(28):\n            r=int(imgArr[i*28+j]*255)\n            im.putpixel((j,i),(r,r,r))\n    num=np.argmax(mnist.train.labels[z])\n    im.save(\"train/\"+str(z)+\"_\"+str(num)+\".jpg\",\"jpeg\")\nprint(\"finish\")</pre>\n之后直接读取图像来进行训练。\n<pre>#python3.5\n#windows\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image,ImageFilter\nimport os\nmnists=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nf=os.listdir(\"train/\")\nL=len(f)-1\nmnist=np.zeros((L,784))\nlabel=np.zeros((L,10))\n#读取每个图像数据存到mnist中，类别存到label中\nfor i in range(L):\n    imgdir='train/'+str(f[i])\n    img=Image.open(imgdir).convert(\"L\")\n    mnist[i]=np.array(img.getdata())/255\n    label[i]=[1 if j==int(f[i].split(\"_\")[1][:-4]) else 0 for j in range(10)]\n#之后的操作和tensorflow官网一样\nx=tf.placeholder(tf.float32,[None,784])\nw=tf.Variable(tf.zeros([784,10]))\nb=tf.Variable(tf.zeros([10]))\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(tf.float32,[None,10])\ncross_entropy=-tf.reduce_sum(y_*tf.log(y))\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\nfor _ in range(1000):\n    rand=np.random.randint(0,L,(100,))\n    batch_xs=mnist[rand]\n    batch_ys=label[rand]\n    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})\ncorrect_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\naccuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\nprint(sess.run(accuracy,feed_dict={x:mnists.test.images,y_:mnists.test.labels})</pre>\n运行结果91%左右。也算稍稍做了改变。\n\ncnn版的还有待研究，虽然代码也很简单。先贴在这里（网上找的，兄台没记住链接不好意思）。\n<pre>import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nprint(\"Download Done!\")\n\nsess = tf.InteractiveSession()\n\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1, 28, 28, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nW_fc1 = weight_varible([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess.run(tf.initialize_all_variables())\nfor i in range(2000):\n    batch = mnist.train.next_batch(50)\n\n    if i % 100 == 0:\n        train_accuacy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0})\n        print(\"step %d, training accuracy %g\"%(i, train_accuacy))\n    train_step.run(feed_dict = {x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n# accuacy on test\nprint(\"test accuracy %g\"%(accuracy.eval(feed_dict={x: mnist.test.images[0:2000], y_: mnist.test.labels[0:2000], keep_prob: 1.0})))</pre>\n","slug":"2017/article_21_tensorflow入门之mnist手写数字识别","published":1,"updated":"2021-01-27T04:46:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72c000s0770kulwjyym","content":"<p>这是<a href=\"https://www.tensorflow.org/\" target=\"_blank\" rel=\"external\">tensorflow官网</a>的第一个例子，按他的做就可以在测试数据集达到91%左右的识别率。之后的cnn版本就可以在测试数据集达到98%以上的正确率。</p>\n<p>因为直接用他的写没什么感觉，然后稍微摸索了一下mnist的内容。<a id=\"more\"></a></p>\n<p>下面先将mnist的55000个测试数据变成图片的形式，直观一点。</p>\n<pre>#python3.5\n#windows\n#引入所需库\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nfrom PIL import Image,ImageFilter\nimport numpy as np\nimport os\n#关掉警告,tensorflow会有op unknown的警告\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n#读取mnist数据,第一次的话会自动下载\nmnist=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n#将每个784*1的像素数据变成28*28,再生成图像\nfor z in range(len(mnist.train.images)):\n    imgArr=mnist.train.images[z]\n    im=Image.new(\"RGB\",(28,28))\n    for i in range(28):\n        for j in range(28):\n            r=int(imgArr[i*28+j]*255)\n            im.putpixel((j,i),(r,r,r))\n    num=np.argmax(mnist.train.labels[z])\n    im.save(\"train/\"+str(z)+\"_\"+str(num)+\".jpg\",\"jpeg\")\nprint(\"finish\")</pre>\n<p>之后直接读取图像来进行训练。</p>\n<pre>#python3.5\n#windows\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image,ImageFilter\nimport os\nmnists=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nf=os.listdir(\"train/\")\nL=len(f)-1\nmnist=np.zeros((L,784))\nlabel=np.zeros((L,10))\n#读取每个图像数据存到mnist中，类别存到label中\nfor i in range(L):\n    imgdir='train/'+str(f[i])\n    img=Image.open(imgdir).convert(\"L\")\n    mnist[i]=np.array(img.getdata())/255\n    label[i]=[1 if j==int(f[i].split(\"_\")[1][:-4]) else 0 for j in range(10)]\n#之后的操作和tensorflow官网一样\nx=tf.placeholder(tf.float32,[None,784])\nw=tf.Variable(tf.zeros([784,10]))\nb=tf.Variable(tf.zeros([10]))\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(tf.float32,[None,10])\ncross_entropy=-tf.reduce_sum(y_*tf.log(y))\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\nfor _ in range(1000):\n    rand=np.random.randint(0,L,(100,))\n    batch_xs=mnist[rand]\n    batch_ys=label[rand]\n    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})\ncorrect_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\naccuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\nprint(sess.run(accuracy,feed_dict={x:mnists.test.images,y_:mnists.test.labels})</pre>\n<p>运行结果91%左右。也算稍稍做了改变。</p>\n<p>cnn版的还有待研究，虽然代码也很简单。先贴在这里（网上找的，兄台没记住链接不好意思）。</p>\n<pre>import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nprint(\"Download Done!\")\n\nsess = tf.InteractiveSession()\n\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1, 28, 28, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nW_fc1 = weight_varible([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess.run(tf.initialize_all_variables())\nfor i in range(2000):\n    batch = mnist.train.next_batch(50)\n\n    if i % 100 == 0:\n        train_accuacy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0})\n        print(\"step %d, training accuracy %g\"%(i, train_accuacy))\n    train_step.run(feed_dict = {x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n# accuacy on test\nprint(\"test accuracy %g\"%(accuracy.eval(feed_dict={x: mnist.test.images[0:2000], y_: mnist.test.labels[0:2000], keep_prob: 1.0})))</pre>\n","excerpt":"<p>这是<a href=\"https://www.tensorflow.org/\">tensorflow官网</a>的第一个例子，按他的做就可以在测试数据集达到91%左右的识别率。之后的cnn版本就可以在测试数据集达到98%以上的正确率。</p>\n<p>因为直接用他的写没什么感觉，然后稍微摸索了一下mnist的内容。","more":"</p>\n<p>下面先将mnist的55000个测试数据变成图片的形式，直观一点。</p>\n<pre>#python3.5\n#windows\n#引入所需库\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nfrom PIL import Image,ImageFilter\nimport numpy as np\nimport os\n#关掉警告,tensorflow会有op unknown的警告\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n#读取mnist数据,第一次的话会自动下载\nmnist=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n#将每个784*1的像素数据变成28*28,再生成图像\nfor z in range(len(mnist.train.images)):\n    imgArr=mnist.train.images[z]\n    im=Image.new(\"RGB\",(28,28))\n    for i in range(28):\n        for j in range(28):\n            r=int(imgArr[i*28+j]*255)\n            im.putpixel((j,i),(r,r,r))\n    num=np.argmax(mnist.train.labels[z])\n    im.save(\"train/\"+str(z)+\"_\"+str(num)+\".jpg\",\"jpeg\")\nprint(\"finish\")</pre>\n<p>之后直接读取图像来进行训练。</p>\n<pre>#python3.5\n#windows\nimport tensorflow.examples.tutorials.mnist.input_data as input_data\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image,ImageFilter\nimport os\nmnists=input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nf=os.listdir(\"train/\")\nL=len(f)-1\nmnist=np.zeros((L,784))\nlabel=np.zeros((L,10))\n#读取每个图像数据存到mnist中，类别存到label中\nfor i in range(L):\n    imgdir='train/'+str(f[i])\n    img=Image.open(imgdir).convert(\"L\")\n    mnist[i]=np.array(img.getdata())/255\n    label[i]=[1 if j==int(f[i].split(\"_\")[1][:-4]) else 0 for j in range(10)]\n#之后的操作和tensorflow官网一样\nx=tf.placeholder(tf.float32,[None,784])\nw=tf.Variable(tf.zeros([784,10]))\nb=tf.Variable(tf.zeros([10]))\ny=tf.nn.softmax(tf.matmul(x,w)+b)\ny_=tf.placeholder(tf.float32,[None,10])\ncross_entropy=-tf.reduce_sum(y_*tf.log(y))\ntrain_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\nfor _ in range(1000):\n    rand=np.random.randint(0,L,(100,))\n    batch_xs=mnist[rand]\n    batch_ys=label[rand]\n    sess.run(train_step,feed_dict={x:batch_xs,y_:batch_ys})\ncorrect_prediction=tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\naccuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\nprint(sess.run(accuracy,feed_dict={x:mnists.test.images,y_:mnists.test.labels})</pre>\n<p>运行结果91%左右。也算稍稍做了改变。</p>\n<p>cnn版的还有待研究，虽然代码也很简单。先贴在这里（网上找的，兄台没记住链接不好意思）。</p>\n<pre>import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nprint(\"Download Done!\")\n\nsess = tf.InteractiveSession()\n\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1, 28, 28, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nW_fc1 = weight_varible([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess.run(tf.initialize_all_variables())\nfor i in range(2000):\n    batch = mnist.train.next_batch(50)\n\n    if i % 100 == 0:\n        train_accuacy = accuracy.eval(feed_dict={x: batch[0], y_: batch[1], keep_prob: 1.0})\n        print(\"step %d, training accuracy %g\"%(i, train_accuacy))\n    train_step.run(feed_dict = {x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n# accuacy on test\nprint(\"test accuracy %g\"%(accuracy.eval(feed_dict={x: mnist.test.images[0:2000], y_: mnist.test.labels[0:2000], keep_prob: 1.0})))</pre>"},{"title":"几个loading动画---可更新","catalog":true,"date":"2017-05-30T02:24:53.000Z","_content":"\n因为网络等因素，有时候浏览器加载页面时间会很长，一直让用户看着白屏幕也不好。\n\n所以需要有loading动画来挽留用户。<!--more-->\n\n这个动画可以用css实现，也可以用js实现。\n\n这里先举两个简单的css的例子：\n\n<a href=\"https://ganjiacheng.cn/blogdemo/loading.html\">点击这里看演示</a>\n\n<a href=\"https://ganjiacheng.cn/blogdemo/loading1.html\">另一个演示</a>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;loading&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading{\n            position:relative;\n        }\n        .loading span{\n            position: absolute;\n            bottom:-40px;\n            width: 10px;\n            height: 5px;\n            background-color: #000;\n            -webkit-animation:loading 1s;\n            -webkit-animation-iteration-count:infinite;\n            animation-timing-function: linear;\n        }\n        .loading span:nth-child(2){\n            left: 30px;\n            animation-delay: .2s;\n        }\n        .loading span:nth-child(3){\n            left: 60px;\n            animation-delay: .4s;\n        }\n        .loading span:nth-child(4){\n            left: 90px;\n            animation-delay: .6s;\n        }\n        .loading span:nth-child(5){\n            left: 120px;\n            animation-delay: .8s;\n        }\n        @-webkit-keyframes loading\n        {\n            0%   {height: 5px;transform:translateY(0px);}\n            50%  {height: 30px;transform:translateY(15px);}\n            100% {height: 5px;transform:translateY(0px);}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\"&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading,.loadingjs{\n            font-size: 50px;\n        }\n        .loading span{\n            position: absolute;\n        }\n        .loading span{\n            left:-10%;\n            width:100px;\n            animation:mymove 5s infinite;\n            animation-timing-function: cubic-bezier(0.38, 0.99, 0.45, 0.13);\n        }\n        .loading span:nth-child(2){\n            animation-delay:0.3s;\n        }\n        .loading span:nth-child(3){\n            animation-delay:0.6s;\n        }\n        .loading span:nth-child(4){\n            animation-delay:0.9s;\n        }\n        .loading span:nth-child(5){\n            animation-delay:1.2s;\n        }\n        @keyframes mymove{\n            from {left:-10%;}\n            to {left: 90%;}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\" id=\"loading\"&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","source":"_posts/2017/article_24_几个loading动画---可更新.md","raw":"\n---\ntitle: 几个loading动画---可更新\ncatalog: true\ndate: 2017-5-30 10:24:53\n---\n\n因为网络等因素，有时候浏览器加载页面时间会很长，一直让用户看着白屏幕也不好。\n\n所以需要有loading动画来挽留用户。<!--more-->\n\n这个动画可以用css实现，也可以用js实现。\n\n这里先举两个简单的css的例子：\n\n<a href=\"https://ganjiacheng.cn/blogdemo/loading.html\">点击这里看演示</a>\n\n<a href=\"https://ganjiacheng.cn/blogdemo/loading1.html\">另一个演示</a>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;loading&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading{\n            position:relative;\n        }\n        .loading span{\n            position: absolute;\n            bottom:-40px;\n            width: 10px;\n            height: 5px;\n            background-color: #000;\n            -webkit-animation:loading 1s;\n            -webkit-animation-iteration-count:infinite;\n            animation-timing-function: linear;\n        }\n        .loading span:nth-child(2){\n            left: 30px;\n            animation-delay: .2s;\n        }\n        .loading span:nth-child(3){\n            left: 60px;\n            animation-delay: .4s;\n        }\n        .loading span:nth-child(4){\n            left: 90px;\n            animation-delay: .6s;\n        }\n        .loading span:nth-child(5){\n            left: 120px;\n            animation-delay: .8s;\n        }\n        @-webkit-keyframes loading\n        {\n            0%   {height: 5px;transform:translateY(0px);}\n            50%  {height: 30px;transform:translateY(15px);}\n            100% {height: 5px;transform:translateY(0px);}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\"&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading,.loadingjs{\n            font-size: 50px;\n        }\n        .loading span{\n            position: absolute;\n        }\n        .loading span{\n            left:-10%;\n            width:100px;\n            animation:mymove 5s infinite;\n            animation-timing-function: cubic-bezier(0.38, 0.99, 0.45, 0.13);\n        }\n        .loading span:nth-child(2){\n            animation-delay:0.3s;\n        }\n        .loading span:nth-child(3){\n            animation-delay:0.6s;\n        }\n        .loading span:nth-child(4){\n            animation-delay:0.9s;\n        }\n        .loading span:nth-child(5){\n            animation-delay:1.2s;\n        }\n        @keyframes mymove{\n            from {left:-10%;}\n            to {left: 90%;}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\" id=\"loading\"&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","slug":"2017/article_24_几个loading动画---可更新","published":1,"updated":"2021-01-27T04:46:28.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72d000t0770rboqpyqm","content":"<p>因为网络等因素，有时候浏览器加载页面时间会很长，一直让用户看着白屏幕也不好。</p>\n<p>所以需要有loading动画来挽留用户。<a id=\"more\"></a></p>\n<p>这个动画可以用css实现，也可以用js实现。</p>\n<p>这里先举两个简单的css的例子：</p>\n<p><a href=\"https://ganjiacheng.cn/blogdemo/loading.html\">点击这里看演示</a></p>\n<p><a href=\"https://ganjiacheng.cn/blogdemo/loading1.html\">另一个演示</a></p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;loading&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading{\n            position:relative;\n        }\n        .loading span{\n            position: absolute;\n            bottom:-40px;\n            width: 10px;\n            height: 5px;\n            background-color: #000;\n            -webkit-animation:loading 1s;\n            -webkit-animation-iteration-count:infinite;\n            animation-timing-function: linear;\n        }\n        .loading span:nth-child(2){\n            left: 30px;\n            animation-delay: .2s;\n        }\n        .loading span:nth-child(3){\n            left: 60px;\n            animation-delay: .4s;\n        }\n        .loading span:nth-child(4){\n            left: 90px;\n            animation-delay: .6s;\n        }\n        .loading span:nth-child(5){\n            left: 120px;\n            animation-delay: .8s;\n        }\n        @-webkit-keyframes loading\n        {\n            0%   {height: 5px;transform:translateY(0px);}\n            50%  {height: 30px;transform:translateY(15px);}\n            100% {height: 5px;transform:translateY(0px);}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\"&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading,.loadingjs{\n            font-size: 50px;\n        }\n        .loading span{\n            position: absolute;\n        }\n        .loading span{\n            left:-10%;\n            width:100px;\n            animation:mymove 5s infinite;\n            animation-timing-function: cubic-bezier(0.38, 0.99, 0.45, 0.13);\n        }\n        .loading span:nth-child(2){\n            animation-delay:0.3s;\n        }\n        .loading span:nth-child(3){\n            animation-delay:0.6s;\n        }\n        .loading span:nth-child(4){\n            animation-delay:0.9s;\n        }\n        .loading span:nth-child(5){\n            animation-delay:1.2s;\n        }\n        @keyframes mymove{\n            from {left:-10%;}\n            to {left: 90%;}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\" id=\"loading\"&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","excerpt":"<p>因为网络等因素，有时候浏览器加载页面时间会很长，一直让用户看着白屏幕也不好。</p>\n<p>所以需要有loading动画来挽留用户。","more":"</p>\n<p>这个动画可以用css实现，也可以用js实现。</p>\n<p>这里先举两个简单的css的例子：</p>\n<p><a href=\"https://ganjiacheng.cn/blogdemo/loading.html\">点击这里看演示</a></p>\n<p><a href=\"https://ganjiacheng.cn/blogdemo/loading1.html\">另一个演示</a></p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;loading&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading{\n            position:relative;\n        }\n        .loading span{\n            position: absolute;\n            bottom:-40px;\n            width: 10px;\n            height: 5px;\n            background-color: #000;\n            -webkit-animation:loading 1s;\n            -webkit-animation-iteration-count:infinite;\n            animation-timing-function: linear;\n        }\n        .loading span:nth-child(2){\n            left: 30px;\n            animation-delay: .2s;\n        }\n        .loading span:nth-child(3){\n            left: 60px;\n            animation-delay: .4s;\n        }\n        .loading span:nth-child(4){\n            left: 90px;\n            animation-delay: .6s;\n        }\n        .loading span:nth-child(5){\n            left: 120px;\n            animation-delay: .8s;\n        }\n        @-webkit-keyframes loading\n        {\n            0%   {height: 5px;transform:translateY(0px);}\n            50%  {height: 30px;transform:translateY(15px);}\n            100% {height: 5px;transform:translateY(0px);}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\"&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        .loading,.loadingjs{\n            font-size: 50px;\n        }\n        .loading span{\n            position: absolute;\n        }\n        .loading span{\n            left:-10%;\n            width:100px;\n            animation:mymove 5s infinite;\n            animation-timing-function: cubic-bezier(0.38, 0.99, 0.45, 0.13);\n        }\n        .loading span:nth-child(2){\n            animation-delay:0.3s;\n        }\n        .loading span:nth-child(3){\n            animation-delay:0.6s;\n        }\n        .loading span:nth-child(4){\n            animation-delay:0.9s;\n        }\n        .loading span:nth-child(5){\n            animation-delay:1.2s;\n        }\n        @keyframes mymove{\n            from {left:-10%;}\n            to {left: 90%;}\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"loading\" id=\"loading\"&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n        &lt;span&gt;.&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>"},{"title":"php实现RSA加密","catalog":true,"date":"2017-07-14T03:49:45.000Z","_content":"\nRSA加密具体细节这里就不说了可以自行搜索。这里做php实现的例子。\n\n思路：在服务器端php先产生一个公钥给js用于加密，同时产生一个私钥用于解密并保存在session中，js获取用户输入并用公钥加密，然后将加密的字符串提交到后端，后端php用私钥解密后得到实际用户输入。<!--more-->\n\n这里主要安全的一点就是信息传输过程中始终是加密后的字符串，即使被抓包也无法得到实际用户输入。\n\n首先下载用于rsa加密的一些文件，<a href=\"http://pan.baidu.com/s/1o84ZXDw\">点击这里下载</a>。\n\n将这个文件夹与下面的php文件放在服务器中的同目录。\n\n下面编写文件file1.php\n<pre>&lt;?php\n//产生公钥与私钥\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_RAW);\n$key = $rsa-&gt;createKey(1024);\n$privatekey = $key['privatekey'];\n$_SESSION['privatekey'] = $privatekey;\n$publickey = $key['publickey']['n']-&gt;toHex();\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=\"text\" placeholder=\"要加密字符串\" id=\"str\"&gt;\n    &lt;button id=\"sub\"&gt;submit&lt;/button&gt;\n    &lt;div id=\"encrypted\"&gt;&lt;/div&gt;\n    &lt;div id=\"decrypted\"&gt;&lt;/div&gt;\n    &lt;script src=\"//cdn.bootcss.com/jquery/3.1.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/jsbn.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/prng4.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rng.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rsa.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //js获得公钥进行加密\n    var publickey = \"&lt;?=$publickey?&gt;\";\n    var rsakey = new RSAKey();\n    rsakey.setPublic(publickey, \"10001\");\n    $(\"#sub\").click(function(){\n        var enc = rsakey.encrypt($(\"#str\").val());\n        $('#encrypted').html(\"加密后\\n\"+enc);\n        $.post('file2.php', {enc: enc}, function(data) {\n            $('#decrypted').html(\"解密后\\n\"+data);\n        });\n    });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n下面是file2.php\n<pre>&lt;?php\n//获取私钥与加密后字符串进行解密\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$encrypted = $_POST['enc'];\n$rsa = new Crypt_RSA();\n$encrypted=pack('H*', $encrypted);\n$rsa-&gt;loadKey($_SESSION['privatekey']);\n$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$decrypted = $rsa-&gt;decrypt($encrypted);\necho $decrypted;</pre>\n效果展示：\n\n<img class=\"alignnone size-medium wp-image-323\" src=\"/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg\" alt=\"\" width=\"300\" height=\"93\" />\n\n完成rsa加密咯，目前还算比较安全的一种加密，可以在一些比较重要的信息传递中使用。\n","source":"_posts/2017/article_27_php实现RSA加密.md","raw":"\n---\ntitle: php实现RSA加密\ncatalog: true\ndate: 2017-7-14 11:49:45\n---\n\nRSA加密具体细节这里就不说了可以自行搜索。这里做php实现的例子。\n\n思路：在服务器端php先产生一个公钥给js用于加密，同时产生一个私钥用于解密并保存在session中，js获取用户输入并用公钥加密，然后将加密的字符串提交到后端，后端php用私钥解密后得到实际用户输入。<!--more-->\n\n这里主要安全的一点就是信息传输过程中始终是加密后的字符串，即使被抓包也无法得到实际用户输入。\n\n首先下载用于rsa加密的一些文件，<a href=\"http://pan.baidu.com/s/1o84ZXDw\">点击这里下载</a>。\n\n将这个文件夹与下面的php文件放在服务器中的同目录。\n\n下面编写文件file1.php\n<pre>&lt;?php\n//产生公钥与私钥\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_RAW);\n$key = $rsa-&gt;createKey(1024);\n$privatekey = $key['privatekey'];\n$_SESSION['privatekey'] = $privatekey;\n$publickey = $key['publickey']['n']-&gt;toHex();\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=\"text\" placeholder=\"要加密字符串\" id=\"str\"&gt;\n    &lt;button id=\"sub\"&gt;submit&lt;/button&gt;\n    &lt;div id=\"encrypted\"&gt;&lt;/div&gt;\n    &lt;div id=\"decrypted\"&gt;&lt;/div&gt;\n    &lt;script src=\"//cdn.bootcss.com/jquery/3.1.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/jsbn.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/prng4.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rng.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rsa.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //js获得公钥进行加密\n    var publickey = \"&lt;?=$publickey?&gt;\";\n    var rsakey = new RSAKey();\n    rsakey.setPublic(publickey, \"10001\");\n    $(\"#sub\").click(function(){\n        var enc = rsakey.encrypt($(\"#str\").val());\n        $('#encrypted').html(\"加密后\\n\"+enc);\n        $.post('file2.php', {enc: enc}, function(data) {\n            $('#decrypted').html(\"解密后\\n\"+data);\n        });\n    });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n下面是file2.php\n<pre>&lt;?php\n//获取私钥与加密后字符串进行解密\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$encrypted = $_POST['enc'];\n$rsa = new Crypt_RSA();\n$encrypted=pack('H*', $encrypted);\n$rsa-&gt;loadKey($_SESSION['privatekey']);\n$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$decrypted = $rsa-&gt;decrypt($encrypted);\necho $decrypted;</pre>\n效果展示：\n\n<img class=\"alignnone size-medium wp-image-323\" src=\"/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg\" alt=\"\" width=\"300\" height=\"93\" />\n\n完成rsa加密咯，目前还算比较安全的一种加密，可以在一些比较重要的信息传递中使用。\n","slug":"2017/article_27_php实现RSA加密","published":1,"updated":"2021-01-27T04:46:28.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72e000u0770colmawsm","content":"<p>RSA加密具体细节这里就不说了可以自行搜索。这里做php实现的例子。</p>\n<p>思路：在服务器端php先产生一个公钥给js用于加密，同时产生一个私钥用于解密并保存在session中，js获取用户输入并用公钥加密，然后将加密的字符串提交到后端，后端php用私钥解密后得到实际用户输入。<a id=\"more\"></a></p>\n<p>这里主要安全的一点就是信息传输过程中始终是加密后的字符串，即使被抓包也无法得到实际用户输入。</p>\n<p>首先下载用于rsa加密的一些文件，<a href=\"http://pan.baidu.com/s/1o84ZXDw\" target=\"_blank\" rel=\"external\">点击这里下载</a>。</p>\n<p>将这个文件夹与下面的php文件放在服务器中的同目录。</p>\n<p>下面编写文件file1.php</p>\n<pre>&lt;?php\n//产生公钥与私钥\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_RAW);\n$key = $rsa-&gt;createKey(1024);\n$privatekey = $key['privatekey'];\n$_SESSION['privatekey'] = $privatekey;\n$publickey = $key['publickey']['n']-&gt;toHex();\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=\"text\" placeholder=\"要加密字符串\" id=\"str\"&gt;\n    &lt;button id=\"sub\"&gt;submit&lt;/button&gt;\n    &lt;div id=\"encrypted\"&gt;&lt;/div&gt;\n    &lt;div id=\"decrypted\"&gt;&lt;/div&gt;\n    &lt;script src=\"//cdn.bootcss.com/jquery/3.1.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/jsbn.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/prng4.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rng.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rsa.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //js获得公钥进行加密\n    var publickey = \"&lt;?=$publickey?&gt;\";\n    var rsakey = new RSAKey();\n    rsakey.setPublic(publickey, \"10001\");\n    $(\"#sub\").click(function(){\n        var enc = rsakey.encrypt($(\"#str\").val());\n        $('#encrypted').html(\"加密后\\n\"+enc);\n        $.post('file2.php', {enc: enc}, function(data) {\n            $('#decrypted').html(\"解密后\\n\"+data);\n        });\n    });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>下面是file2.php</p>\n<pre>&lt;?php\n//获取私钥与加密后字符串进行解密\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$encrypted = $_POST['enc'];\n$rsa = new Crypt_RSA();\n$encrypted=pack('H*', $encrypted);\n$rsa-&gt;loadKey($_SESSION['privatekey']);\n$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$decrypted = $rsa-&gt;decrypt($encrypted);\necho $decrypted;</pre>\n<p>效果展示：</p>\n<img class=\"alignnone size-medium wp-image-323\" src=\"/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg\" alt=\"\" width=\"300\" height=\"93\">\n<p>完成rsa加密咯，目前还算比较安全的一种加密，可以在一些比较重要的信息传递中使用。</p>\n","excerpt":"<p>RSA加密具体细节这里就不说了可以自行搜索。这里做php实现的例子。</p>\n<p>思路：在服务器端php先产生一个公钥给js用于加密，同时产生一个私钥用于解密并保存在session中，js获取用户输入并用公钥加密，然后将加密的字符串提交到后端，后端php用私钥解密后得到实际用户输入。","more":"</p>\n<p>这里主要安全的一点就是信息传输过程中始终是加密后的字符串，即使被抓包也无法得到实际用户输入。</p>\n<p>首先下载用于rsa加密的一些文件，<a href=\"http://pan.baidu.com/s/1o84ZXDw\">点击这里下载</a>。</p>\n<p>将这个文件夹与下面的php文件放在服务器中的同目录。</p>\n<p>下面编写文件file1.php</p>\n<pre>&lt;?php\n//产生公钥与私钥\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$rsa = new Crypt_RSA();\n$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);\n$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_RAW);\n$key = $rsa-&gt;createKey(1024);\n$privatekey = $key['privatekey'];\n$_SESSION['privatekey'] = $privatekey;\n$publickey = $key['publickey']['n']-&gt;toHex();\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input type=\"text\" placeholder=\"要加密字符串\" id=\"str\"&gt;\n    &lt;button id=\"sub\"&gt;submit&lt;/button&gt;\n    &lt;div id=\"encrypted\"&gt;&lt;/div&gt;\n    &lt;div id=\"decrypted\"&gt;&lt;/div&gt;\n    &lt;script src=\"//cdn.bootcss.com/jquery/3.1.0/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/jsbn.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/prng4.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rng.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"rsa/jsbn/rsa.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    //js获得公钥进行加密\n    var publickey = \"&lt;?=$publickey?&gt;\";\n    var rsakey = new RSAKey();\n    rsakey.setPublic(publickey, \"10001\");\n    $(\"#sub\").click(function(){\n        var enc = rsakey.encrypt($(\"#str\").val());\n        $('#encrypted').html(\"加密后\\n\"+enc);\n        $.post('file2.php', {enc: enc}, function(data) {\n            $('#decrypted').html(\"解密后\\n\"+data);\n        });\n    });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>下面是file2.php</p>\n<pre>&lt;?php\n//获取私钥与加密后字符串进行解密\n@session_start();\nset_include_path('rsa/classes/phpseclib/');\ninclude_once('Crypt/RSA.php');\n$encrypted = $_POST['enc'];\n$rsa = new Crypt_RSA();\n$encrypted=pack('H*', $encrypted);\n$rsa-&gt;loadKey($_SESSION['privatekey']);\n$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);\n$decrypted = $rsa-&gt;decrypt($encrypted);\necho $decrypted;</pre>\n<p>效果展示：</p>\n<img class=\"alignnone size-medium wp-image-323\" src=\"/img/uploads/2017/07/QQ截图20170714114735-300x93.jpg\" alt=\"\" width=\"300\" height=\"93\" />\n<p>完成rsa加密咯，目前还算比较安全的一种加密，可以在一些比较重要的信息传递中使用。</p>"},{"title":"使用python的jieba,wordcloud做唐诗分析","catalog":true,"date":"2017-07-13T01:56:37.000Z","_content":"\n首先安装好python3.x以及jieba,wordcloud库,这是前提。\n\n然后搜罗了一份唐诗的txt文档，<a href=\"/img/uploads/2017/07/poetry.txt\">具体看这里</a>。\n\n思路：先用<a href=\"https://github.com/fxsjy/jieba\">jieba</a>把每首诗标题去掉，提取出正文。再jiaba.cut做分词，分完的词保存下来，再用worcloud作词云，具体可以看<a href=\"http://amueller.github.io/word_cloud/index.html\">wordcloud文档</a>。<!--more-->\n\n具体代码：\n<pre>#coding:utf-8\n#python3.5\n#引入库文件\nfrom wordcloud import WordCloud\nimport jieba\nss=\"\"\nf=open('poetry.txt',encoding='utf-8')\n#读取每首诗并去掉标题\n#进行分词并存储\nfor i in f.readlines():\n    l=i[i.find(':')+1:-1]\n    s=jieba.cut(l,cut_all=False)\n    for j in s:\n        if j==':' or j=='，' or j=='。':\n            continue\n        else:\n            ss+=j+\" \"\n#引入中文字体文件\nfont=\"C:/Windows/Fonts/simfang.ttf\"\n#构建词云并保存\n#如需展示的话可以用matplotlib，具体可以看wordcloud文档\nword=WordCloud(width=4000,height=2000,font_path=font,max_words=2000,max_font_size=500).generate(ss)\nword.to_file('filename.png')</pre>\n效果展示：\n\n<a href=\"/img/uploads/2017/07/xxn.png\"><img class=\"alignnone wp-image-319 size-large\" src=\"/img/uploads/2017/07/xxn-1024x512.png\" alt=\"\" width=\"525\" height=\"263\" /></a>\n\n&nbsp;\n","source":"_posts/2017/article_29_使用python的jieba,wordcloud做唐诗分析.md","raw":"\n---\ntitle: 使用python的jieba,wordcloud做唐诗分析\ncatalog: true\ndate: 2017-7-13 09:56:37\n---\n\n首先安装好python3.x以及jieba,wordcloud库,这是前提。\n\n然后搜罗了一份唐诗的txt文档，<a href=\"/img/uploads/2017/07/poetry.txt\">具体看这里</a>。\n\n思路：先用<a href=\"https://github.com/fxsjy/jieba\">jieba</a>把每首诗标题去掉，提取出正文。再jiaba.cut做分词，分完的词保存下来，再用worcloud作词云，具体可以看<a href=\"http://amueller.github.io/word_cloud/index.html\">wordcloud文档</a>。<!--more-->\n\n具体代码：\n<pre>#coding:utf-8\n#python3.5\n#引入库文件\nfrom wordcloud import WordCloud\nimport jieba\nss=\"\"\nf=open('poetry.txt',encoding='utf-8')\n#读取每首诗并去掉标题\n#进行分词并存储\nfor i in f.readlines():\n    l=i[i.find(':')+1:-1]\n    s=jieba.cut(l,cut_all=False)\n    for j in s:\n        if j==':' or j=='，' or j=='。':\n            continue\n        else:\n            ss+=j+\" \"\n#引入中文字体文件\nfont=\"C:/Windows/Fonts/simfang.ttf\"\n#构建词云并保存\n#如需展示的话可以用matplotlib，具体可以看wordcloud文档\nword=WordCloud(width=4000,height=2000,font_path=font,max_words=2000,max_font_size=500).generate(ss)\nword.to_file('filename.png')</pre>\n效果展示：\n\n<a href=\"/img/uploads/2017/07/xxn.png\"><img class=\"alignnone wp-image-319 size-large\" src=\"/img/uploads/2017/07/xxn-1024x512.png\" alt=\"\" width=\"525\" height=\"263\" /></a>\n\n&nbsp;\n","slug":"2017/article_29_使用python的jieba,wordcloud做唐诗分析","published":1,"updated":"2021-01-27T04:46:28.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72e000v0770uxd2qi75","content":"<p>首先安装好python3.x以及jieba,wordcloud库,这是前提。</p>\n<p>然后搜罗了一份唐诗的txt文档，<a href=\"/img/uploads/2017/07/poetry.txt\">具体看这里</a>。</p>\n<p>思路：先用<a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\" rel=\"external\">jieba</a>把每首诗标题去掉，提取出正文。再jiaba.cut做分词，分完的词保存下来，再用worcloud作词云，具体可以看<a href=\"http://amueller.github.io/word_cloud/index.html\" target=\"_blank\" rel=\"external\">wordcloud文档</a>。<a id=\"more\"></a></p>\n<p>具体代码：</p>\n<pre>#coding:utf-8\n#python3.5\n#引入库文件\nfrom wordcloud import WordCloud\nimport jieba\nss=\"\"\nf=open('poetry.txt',encoding='utf-8')\n#读取每首诗并去掉标题\n#进行分词并存储\nfor i in f.readlines():\n    l=i[i.find(':')+1:-1]\n    s=jieba.cut(l,cut_all=False)\n    for j in s:\n        if j==':' or j=='，' or j=='。':\n            continue\n        else:\n            ss+=j+\" \"\n#引入中文字体文件\nfont=\"C:/Windows/Fonts/simfang.ttf\"\n#构建词云并保存\n#如需展示的话可以用matplotlib，具体可以看wordcloud文档\nword=WordCloud(width=4000,height=2000,font_path=font,max_words=2000,max_font_size=500).generate(ss)\nword.to_file('filename.png')</pre>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2017/07/xxn.png\"><img class=\"alignnone wp-image-319 size-large\" src=\"/img/uploads/2017/07/xxn-1024x512.png\" alt=\"\" width=\"525\" height=\"263\"></a></p>\n<p> </p>\n","excerpt":"<p>首先安装好python3.x以及jieba,wordcloud库,这是前提。</p>\n<p>然后搜罗了一份唐诗的txt文档，<a href=\"/img/uploads/2017/07/poetry.txt\">具体看这里</a>。</p>\n<p>思路：先用<a href=\"https://github.com/fxsjy/jieba\">jieba</a>把每首诗标题去掉，提取出正文。再jiaba.cut做分词，分完的词保存下来，再用worcloud作词云，具体可以看<a href=\"http://amueller.github.io/word_cloud/index.html\">wordcloud文档</a>。","more":"</p>\n<p>具体代码：</p>\n<pre>#coding:utf-8\n#python3.5\n#引入库文件\nfrom wordcloud import WordCloud\nimport jieba\nss=\"\"\nf=open('poetry.txt',encoding='utf-8')\n#读取每首诗并去掉标题\n#进行分词并存储\nfor i in f.readlines():\n    l=i[i.find(':')+1:-1]\n    s=jieba.cut(l,cut_all=False)\n    for j in s:\n        if j==':' or j=='，' or j=='。':\n            continue\n        else:\n            ss+=j+\" \"\n#引入中文字体文件\nfont=\"C:/Windows/Fonts/simfang.ttf\"\n#构建词云并保存\n#如需展示的话可以用matplotlib，具体可以看wordcloud文档\nword=WordCloud(width=4000,height=2000,font_path=font,max_words=2000,max_font_size=500).generate(ss)\nword.to_file('filename.png')</pre>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2017/07/xxn.png\"><img class=\"alignnone wp-image-319 size-large\" src=\"/img/uploads/2017/07/xxn-1024x512.png\" alt=\"\" width=\"525\" height=\"263\" /></a></p>\n<p> </p>"},{"title":"搭建wordpress个人博客","catalog":true,"date":"2017-03-06T10:29:52.000Z","_content":"\n试着写blog啦，用以分享，记录技术和生活！\n\n本人年方21，前端起家，在向后端的php和python前进。\n\n本次就从安装wordpress说起：<!--more-->\n\n注：环境：云服务器+lnmp+域名。\n\n1.先从官网<a href=\"https://cn.wordpress.org/releases/\">https://cn.wordpress.org/releases/</a>找了最新版本4.7.2，之后解压，复制到服务器上，打开对应域名+路径就有了。\n\n2.在配置mysql数据库，用户名和密码。就可以生成啦！！！\n\n3.进入也是被惊艳了，上手很快。\n<p style=\"text-align: left;\">4.本来升级需要ftp，弄不明白就找了在wp-config.php最后插入了这些代码，之后跳过了输入ftp</p>\n\n<pre style=\"text-align: left;\"><strong>define(\"FS_METHOD\",\"direct\");</strong>\n<strong>define(\"FS_CHMOD_DIR\", 0777);</strong>\n<strong>define(\"FS_CHMOD_FILE\", 0777);</strong></pre>\n遇到问题：在升级翻译的时候会有------无法复制文件的错误。\n\n在升级Akismet插件的时候会出现错误-----因为我们不能复制一些文件，升级未被安装。这通常是因为存在不一致的文件权限。\n","source":"_posts/2017/article_2_搭建wordpress个人博客.md","raw":"\n---\ntitle: 搭建wordpress个人博客\ncatalog: true\ndate: 2017-3-6 18:29:52\n---\n\n试着写blog啦，用以分享，记录技术和生活！\n\n本人年方21，前端起家，在向后端的php和python前进。\n\n本次就从安装wordpress说起：<!--more-->\n\n注：环境：云服务器+lnmp+域名。\n\n1.先从官网<a href=\"https://cn.wordpress.org/releases/\">https://cn.wordpress.org/releases/</a>找了最新版本4.7.2，之后解压，复制到服务器上，打开对应域名+路径就有了。\n\n2.在配置mysql数据库，用户名和密码。就可以生成啦！！！\n\n3.进入也是被惊艳了，上手很快。\n<p style=\"text-align: left;\">4.本来升级需要ftp，弄不明白就找了在wp-config.php最后插入了这些代码，之后跳过了输入ftp</p>\n\n<pre style=\"text-align: left;\"><strong>define(\"FS_METHOD\",\"direct\");</strong>\n<strong>define(\"FS_CHMOD_DIR\", 0777);</strong>\n<strong>define(\"FS_CHMOD_FILE\", 0777);</strong></pre>\n遇到问题：在升级翻译的时候会有------无法复制文件的错误。\n\n在升级Akismet插件的时候会出现错误-----因为我们不能复制一些文件，升级未被安装。这通常是因为存在不一致的文件权限。\n","slug":"2017/article_2_搭建wordpress个人博客","published":1,"updated":"2021-01-27T04:46:28.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72f000w07702itxjynj","content":"<p>试着写blog啦，用以分享，记录技术和生活！</p>\n<p>本人年方21，前端起家，在向后端的php和python前进。</p>\n<p>本次就从安装wordpress说起：<a id=\"more\"></a></p>\n<p>注：环境：云服务器+lnmp+域名。</p>\n<p>1.先从官网<a href=\"https://cn.wordpress.org/releases/\" target=\"_blank\" rel=\"external\">https://cn.wordpress.org/releases/</a>找了最新版本4.7.2，之后解压，复制到服务器上，打开对应域名+路径就有了。</p>\n<p>2.在配置mysql数据库，用户名和密码。就可以生成啦！！！</p>\n<p>3.进入也是被惊艳了，上手很快。</p>\n<p style=\"text-align: left;\">4.本来升级需要ftp，弄不明白就找了在wp-config.php最后插入了这些代码，之后跳过了输入ftp</p>\n<pre style=\"text-align: left;\"><strong>define(\"FS_METHOD\",\"direct\");</strong>\n<strong>define(\"FS_CHMOD_DIR\", 0777);</strong>\n<strong>define(\"FS_CHMOD_FILE\", 0777);</strong></pre>\n<p>遇到问题：在升级翻译的时候会有------无法复制文件的错误。</p>\n<p>在升级Akismet插件的时候会出现错误-----因为我们不能复制一些文件，升级未被安装。这通常是因为存在不一致的文件权限。</p>\n","excerpt":"<p>试着写blog啦，用以分享，记录技术和生活！</p>\n<p>本人年方21，前端起家，在向后端的php和python前进。</p>\n<p>本次就从安装wordpress说起：","more":"</p>\n<p>注：环境：云服务器+lnmp+域名。</p>\n<p>1.先从官网<a href=\"https://cn.wordpress.org/releases/\">https://cn.wordpress.org/releases/</a>找了最新版本4.7.2，之后解压，复制到服务器上，打开对应域名+路径就有了。</p>\n<p>2.在配置mysql数据库，用户名和密码。就可以生成啦！！！</p>\n<p>3.进入也是被惊艳了，上手很快。</p>\n<p style=\"text-align: left;\">4.本来升级需要ftp，弄不明白就找了在wp-config.php最后插入了这些代码，之后跳过了输入ftp</p>\n<pre style=\"text-align: left;\"><strong>define(\"FS_METHOD\",\"direct\");</strong>\n<strong>define(\"FS_CHMOD_DIR\", 0777);</strong>\n<strong>define(\"FS_CHMOD_FILE\", 0777);</strong></pre>\n<p>遇到问题：在升级翻译的时候会有------无法复制文件的错误。</p>\n<p>在升级Akismet插件的时候会出现错误-----因为我们不能复制一些文件，升级未被安装。这通常是因为存在不一致的文件权限。</p>"},{"title":"用ReactNative做一个简单新闻app","catalog":true,"date":"2017-07-22T07:14:35.000Z","_content":"\n这里先从最近看ReactNative文档发现的expo说起，因为使用expo可以直接在ios或者安卓展示ReactNative的效果，门槛突然降低了许多，因此，突发奇想试试做native app。\n\n首先可以按照ReactNative的<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">GetStart</a>配置完环境并完成一个hello world！<!--more-->\n\n总体如果有node和npm的话就以下两步：\n<pre>npm install <span class=\"token operator\">-</span>g create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app</pre>\n<pre>create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app AwesomeProject \ncd AwesomeProject \nnpm start</pre>\n然后等出现一个二维码，用手机上的expo App扫码就行，ios和安卓都行哦！\n\n再来上新闻代码，写在文件的app.js里，这里在IOS上做尝试。\n\n先引入之后会用到一些的组件\n<pre>import React, { Component, PropTypes } from 'react';\nimport { AppRegistry,RefreshControl,TouchableWithoutFeedback, WebView,ActivityIndicator ,ListView, Text, Image, View, StyleSheet, TextInput, Button, Alert, ScrollView, NavigatorIOS, TouchableHighlight, FlatList } from 'react-native';</pre>\n第一个主组件，写了一个ios的导航条，内容在main组件里\n<pre> export default class Test extends Component {\n    constructor(props){\n      super(props);\n    }\n    render() {\n        return (\n            &lt;NavigatorIOS initialRoute={ {\n                component: main,\n                title: \"头条\",\n            } } style={ {\n                flex: 1\n            } }\n            ref=\"navWorkspace\"\n            /&gt;\n        )\n    }\n}</pre>\nmain组件，主要用到了fetch来拉取新闻，在放入ListView组件内，\n\n其中又加了RefreshControl组件来下拉刷新，ListView的onEndReached来控制上拉加载更多。这里有个疑问，用FlatList不能实现上拉加载更多？\n<pre>class main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onEndStart: true,\n            totalList:[],\n            dataSource: null,\n            page:2,\n            refreshing:false,\n        };\n    }\n    fetchData(){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\").then((response)=&gt;response.json())\n    }\n    _onRefresh(){\n      this.setState({\n        refreshing:true\n      })\n      this.fetchData().then((responseJson)=&gt;{\n        var tmp=parseInt(responseJson.data[0].news_id)-parseInt(this.state.totalList[0].news_id)\n        if(tmp!=0){\n          for(let i=tmp-1;i&gt;=0;i--){\n              this.state.totalList.unshift(responseJson.data[i])\n            }\n          }\n          let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n        this.setState({\n          refreshing:false,\n          dataSource:ds.cloneWithRows(this.state.totalList)\n        })\n      })\n    }\n    getnews(page){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=\"+page)\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                for(let i in responseJson.data){\n                  this.state.totalList.push(responseJson.data[i])\n                }\n                this.setState({\n                    dataSource: ds.cloneWithRows(this.state.totalList),\n                    onEndStart: false\n                })\n            })\n    }\n    componentDidMount() {\n        return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\")\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                this.setState({\n                    totalList: responseJson.data,\n                    dataSource: ds.cloneWithRows(responseJson.data),\n                    onEndStart: false\n                })\n            })\n    }\n    toend(){\n      if(!this.state.onEndStart){\n        this.getnews(this.state.page);\n        this.setState({\n          page:this.state.page+1\n        })\n      }\n    }\n    goTo(key){\n      this.props.navigator.push({\n          component: Detail,\n          title: '详情',\n          rightButtonTitle: '收藏',\n          passProps: { title: this.state.totalList[key].title,content:this.state.totalList[key].content,source:this.state.totalList[key].source},\n          onRightButtonPress: function() {alert(1)}\n      });\n    }\n    render() {\n        if (this.state.onEndStart) {\n            return (\n                &lt;ActivityIndicator style={ {flex:1,alignItems:'center',height:80} } animating={true}/&gt;\n            )\n        }\n        return (\n            &lt;ListView\n            refreshControl={\n              &lt;RefreshControl\n                refreshing={this.state.refreshing}\n                onRefresh={this._onRefresh.bind(this)}\n              /&gt;\n            }\n            style={ {marginTop:65} }\n            dataSource={this.state.dataSource}\n            renderRow={(item,sectionId,rowId) =&gt; \n              &lt;TouchableWithoutFeedback onPress={this.goTo.bind(this,rowId)}&gt;\n              &lt;View style={styles.list_item}&gt;\n                &lt;Text style={styles.list_item_font}&gt;\n                    {item.title}\n                &lt;/Text&gt;\n                &lt;Image source={ {\n                    uri: item.top_image\n                } } style={styles.image}/&gt;\n              &lt;/View&gt;\n              &lt;/TouchableWithoutFeedback&gt;\n            }\n            onEndReachedThreshold={150}\n            onEndReached={this.toend.bind(this)}\n            /&gt;\n        )\n    }\n}</pre>\n之后点击新闻跳转到详情页。下面是详情页的组件\n<pre>class Detail extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    var html=\"&lt;h3 style='margin-bottom:0'&gt;\"+this.props.title+\"&lt;/h3&gt;\"+\"&lt;div style='color:gray;margin-bottom:-15;'&gt;\"+this.props.source+\"&lt;/div&gt;\"+this.props.content;\n    return(\n        &lt;View style={ {flex:1} }&gt;\n          &lt;WebView source={ {html:html} }/&gt;\n        &lt;/View&gt;\n      )\n  }\n}</pre>\n样式的话写在最后StyleSheet组件中，在上面的组件内可以直接用style={styles.xxx}调用样式。\n<pre>const styles = StyleSheet.create({\n    flex: {\n        flex: 1,\n    },\n    list_item1: {\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item: {\n        height:80,\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item_font: {\n        marginRight: 1,\n        flex: 3,\n        fontSize: 16,\n    },\n    image: {\n        flex: 1,\n        width: 60,\n        height: 60,\n    }\n});</pre>\n然后就可以\n<pre>npm start</pre>\n在手机expo里看到效果咯。\n\n效果展示：\n\n<a href=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png\"><img class=\"alignnone wp-image-329 size-medium\" src=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png\" alt=\"\" width=\"169\" height=\"300\" /></a>\n","source":"_posts/2017/article_30_用ReactNative做一个简单新闻app.md","raw":"\n---\ntitle: 用ReactNative做一个简单新闻app\ncatalog: true\ndate: 2017-7-22 15:14:35\n---\n\n这里先从最近看ReactNative文档发现的expo说起，因为使用expo可以直接在ios或者安卓展示ReactNative的效果，门槛突然降低了许多，因此，突发奇想试试做native app。\n\n首先可以按照ReactNative的<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">GetStart</a>配置完环境并完成一个hello world！<!--more-->\n\n总体如果有node和npm的话就以下两步：\n<pre>npm install <span class=\"token operator\">-</span>g create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app</pre>\n<pre>create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app AwesomeProject \ncd AwesomeProject \nnpm start</pre>\n然后等出现一个二维码，用手机上的expo App扫码就行，ios和安卓都行哦！\n\n再来上新闻代码，写在文件的app.js里，这里在IOS上做尝试。\n\n先引入之后会用到一些的组件\n<pre>import React, { Component, PropTypes } from 'react';\nimport { AppRegistry,RefreshControl,TouchableWithoutFeedback, WebView,ActivityIndicator ,ListView, Text, Image, View, StyleSheet, TextInput, Button, Alert, ScrollView, NavigatorIOS, TouchableHighlight, FlatList } from 'react-native';</pre>\n第一个主组件，写了一个ios的导航条，内容在main组件里\n<pre> export default class Test extends Component {\n    constructor(props){\n      super(props);\n    }\n    render() {\n        return (\n            &lt;NavigatorIOS initialRoute={ {\n                component: main,\n                title: \"头条\",\n            } } style={ {\n                flex: 1\n            } }\n            ref=\"navWorkspace\"\n            /&gt;\n        )\n    }\n}</pre>\nmain组件，主要用到了fetch来拉取新闻，在放入ListView组件内，\n\n其中又加了RefreshControl组件来下拉刷新，ListView的onEndReached来控制上拉加载更多。这里有个疑问，用FlatList不能实现上拉加载更多？\n<pre>class main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onEndStart: true,\n            totalList:[],\n            dataSource: null,\n            page:2,\n            refreshing:false,\n        };\n    }\n    fetchData(){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\").then((response)=&gt;response.json())\n    }\n    _onRefresh(){\n      this.setState({\n        refreshing:true\n      })\n      this.fetchData().then((responseJson)=&gt;{\n        var tmp=parseInt(responseJson.data[0].news_id)-parseInt(this.state.totalList[0].news_id)\n        if(tmp!=0){\n          for(let i=tmp-1;i&gt;=0;i--){\n              this.state.totalList.unshift(responseJson.data[i])\n            }\n          }\n          let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n        this.setState({\n          refreshing:false,\n          dataSource:ds.cloneWithRows(this.state.totalList)\n        })\n      })\n    }\n    getnews(page){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=\"+page)\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                for(let i in responseJson.data){\n                  this.state.totalList.push(responseJson.data[i])\n                }\n                this.setState({\n                    dataSource: ds.cloneWithRows(this.state.totalList),\n                    onEndStart: false\n                })\n            })\n    }\n    componentDidMount() {\n        return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\")\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                this.setState({\n                    totalList: responseJson.data,\n                    dataSource: ds.cloneWithRows(responseJson.data),\n                    onEndStart: false\n                })\n            })\n    }\n    toend(){\n      if(!this.state.onEndStart){\n        this.getnews(this.state.page);\n        this.setState({\n          page:this.state.page+1\n        })\n      }\n    }\n    goTo(key){\n      this.props.navigator.push({\n          component: Detail,\n          title: '详情',\n          rightButtonTitle: '收藏',\n          passProps: { title: this.state.totalList[key].title,content:this.state.totalList[key].content,source:this.state.totalList[key].source},\n          onRightButtonPress: function() {alert(1)}\n      });\n    }\n    render() {\n        if (this.state.onEndStart) {\n            return (\n                &lt;ActivityIndicator style={ {flex:1,alignItems:'center',height:80} } animating={true}/&gt;\n            )\n        }\n        return (\n            &lt;ListView\n            refreshControl={\n              &lt;RefreshControl\n                refreshing={this.state.refreshing}\n                onRefresh={this._onRefresh.bind(this)}\n              /&gt;\n            }\n            style={ {marginTop:65} }\n            dataSource={this.state.dataSource}\n            renderRow={(item,sectionId,rowId) =&gt; \n              &lt;TouchableWithoutFeedback onPress={this.goTo.bind(this,rowId)}&gt;\n              &lt;View style={styles.list_item}&gt;\n                &lt;Text style={styles.list_item_font}&gt;\n                    {item.title}\n                &lt;/Text&gt;\n                &lt;Image source={ {\n                    uri: item.top_image\n                } } style={styles.image}/&gt;\n              &lt;/View&gt;\n              &lt;/TouchableWithoutFeedback&gt;\n            }\n            onEndReachedThreshold={150}\n            onEndReached={this.toend.bind(this)}\n            /&gt;\n        )\n    }\n}</pre>\n之后点击新闻跳转到详情页。下面是详情页的组件\n<pre>class Detail extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    var html=\"&lt;h3 style='margin-bottom:0'&gt;\"+this.props.title+\"&lt;/h3&gt;\"+\"&lt;div style='color:gray;margin-bottom:-15;'&gt;\"+this.props.source+\"&lt;/div&gt;\"+this.props.content;\n    return(\n        &lt;View style={ {flex:1} }&gt;\n          &lt;WebView source={ {html:html} }/&gt;\n        &lt;/View&gt;\n      )\n  }\n}</pre>\n样式的话写在最后StyleSheet组件中，在上面的组件内可以直接用style={styles.xxx}调用样式。\n<pre>const styles = StyleSheet.create({\n    flex: {\n        flex: 1,\n    },\n    list_item1: {\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item: {\n        height:80,\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item_font: {\n        marginRight: 1,\n        flex: 3,\n        fontSize: 16,\n    },\n    image: {\n        flex: 1,\n        width: 60,\n        height: 60,\n    }\n});</pre>\n然后就可以\n<pre>npm start</pre>\n在手机expo里看到效果咯。\n\n效果展示：\n\n<a href=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png\"><img class=\"alignnone wp-image-329 size-medium\" src=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png\" alt=\"\" width=\"169\" height=\"300\" /></a>\n","slug":"2017/article_30_用ReactNative做一个简单新闻app","published":1,"updated":"2021-01-27T04:46:28.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72f000x0770g42luvf7","content":"<p>这里先从最近看ReactNative文档发现的expo说起，因为使用expo可以直接在ios或者安卓展示ReactNative的效果，门槛突然降低了许多，因此，突发奇想试试做native app。</p>\n<p>首先可以按照ReactNative的<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\" target=\"_blank\" rel=\"external\">GetStart</a>配置完环境并完成一个hello world！<a id=\"more\"></a></p>\n<p>总体如果有node和npm的话就以下两步：</p>\n<pre>npm install <span class=\"token operator\">-</span>g create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app</pre>\n<pre>create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app AwesomeProject \ncd AwesomeProject \nnpm start</pre>\n<p>然后等出现一个二维码，用手机上的expo App扫码就行，ios和安卓都行哦！</p>\n<p>再来上新闻代码，写在文件的app.js里，这里在IOS上做尝试。</p>\n<p>先引入之后会用到一些的组件</p>\n<pre>import React, { Component, PropTypes } from 'react';\nimport { AppRegistry,RefreshControl,TouchableWithoutFeedback, WebView,ActivityIndicator ,ListView, Text, Image, View, StyleSheet, TextInput, Button, Alert, ScrollView, NavigatorIOS, TouchableHighlight, FlatList } from 'react-native';</pre>\n<p>第一个主组件，写了一个ios的导航条，内容在main组件里</p>\n<pre> export default class Test extends Component {\n    constructor(props){\n      super(props);\n    }\n    render() {\n        return (\n            &lt;NavigatorIOS initialRoute={ {\n                component: main,\n                title: \"头条\",\n            } } style={ {\n                flex: 1\n            } }\n            ref=\"navWorkspace\"\n            /&gt;\n        )\n    }\n}</pre>\n<p>main组件，主要用到了fetch来拉取新闻，在放入ListView组件内，</p>\n<p>其中又加了RefreshControl组件来下拉刷新，ListView的onEndReached来控制上拉加载更多。这里有个疑问，用FlatList不能实现上拉加载更多？</p>\n<pre>class main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onEndStart: true,\n            totalList:[],\n            dataSource: null,\n            page:2,\n            refreshing:false,\n        };\n    }\n    fetchData(){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\").then((response)=&gt;response.json())\n    }\n    _onRefresh(){\n      this.setState({\n        refreshing:true\n      })\n      this.fetchData().then((responseJson)=&gt;{\n        var tmp=parseInt(responseJson.data[0].news_id)-parseInt(this.state.totalList[0].news_id)\n        if(tmp!=0){\n          for(let i=tmp-1;i&gt;=0;i--){\n              this.state.totalList.unshift(responseJson.data[i])\n            }\n          }\n          let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n        this.setState({\n          refreshing:false,\n          dataSource:ds.cloneWithRows(this.state.totalList)\n        })\n      })\n    }\n    getnews(page){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=\"+page)\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                for(let i in responseJson.data){\n                  this.state.totalList.push(responseJson.data[i])\n                }\n                this.setState({\n                    dataSource: ds.cloneWithRows(this.state.totalList),\n                    onEndStart: false\n                })\n            })\n    }\n    componentDidMount() {\n        return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\")\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                this.setState({\n                    totalList: responseJson.data,\n                    dataSource: ds.cloneWithRows(responseJson.data),\n                    onEndStart: false\n                })\n            })\n    }\n    toend(){\n      if(!this.state.onEndStart){\n        this.getnews(this.state.page);\n        this.setState({\n          page:this.state.page+1\n        })\n      }\n    }\n    goTo(key){\n      this.props.navigator.push({\n          component: Detail,\n          title: '详情',\n          rightButtonTitle: '收藏',\n          passProps: { title: this.state.totalList[key].title,content:this.state.totalList[key].content,source:this.state.totalList[key].source},\n          onRightButtonPress: function() {alert(1)}\n      });\n    }\n    render() {\n        if (this.state.onEndStart) {\n            return (\n                &lt;ActivityIndicator style={ {flex:1,alignItems:'center',height:80} } animating={true}/&gt;\n            )\n        }\n        return (\n            &lt;ListView\n            refreshControl={\n              &lt;RefreshControl\n                refreshing={this.state.refreshing}\n                onRefresh={this._onRefresh.bind(this)}\n              /&gt;\n            }\n            style={ {marginTop:65} }\n            dataSource={this.state.dataSource}\n            renderRow={(item,sectionId,rowId) =&gt; \n              &lt;TouchableWithoutFeedback onPress={this.goTo.bind(this,rowId)}&gt;\n              &lt;View style={styles.list_item}&gt;\n                &lt;Text style={styles.list_item_font}&gt;\n                    {item.title}\n                &lt;/Text&gt;\n                &lt;Image source={ {\n                    uri: item.top_image\n                } } style={styles.image}/&gt;\n              &lt;/View&gt;\n              &lt;/TouchableWithoutFeedback&gt;\n            }\n            onEndReachedThreshold={150}\n            onEndReached={this.toend.bind(this)}\n            /&gt;\n        )\n    }\n}</pre>\n<p>之后点击新闻跳转到详情页。下面是详情页的组件</p>\n<pre>class Detail extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    var html=\"&lt;h3 style='margin-bottom:0'&gt;\"+this.props.title+\"&lt;/h3&gt;\"+\"&lt;div style='color:gray;margin-bottom:-15;'&gt;\"+this.props.source+\"&lt;/div&gt;\"+this.props.content;\n    return(\n        &lt;View style={ {flex:1} }&gt;\n          &lt;WebView source={ {html:html} }/&gt;\n        &lt;/View&gt;\n      )\n  }\n}</pre>\n<p>样式的话写在最后StyleSheet组件中，在上面的组件内可以直接用style={<a href=\"http://styles.xxx\" target=\"_blank\" rel=\"external\">styles.xxx</a>}调用样式。</p>\n<pre>const styles = StyleSheet.create({\n    flex: {\n        flex: 1,\n    },\n    list_item1: {\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item: {\n        height:80,\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item_font: {\n        marginRight: 1,\n        flex: 3,\n        fontSize: 16,\n    },\n    image: {\n        flex: 1,\n        width: 60,\n        height: 60,\n    }\n});</pre>\n<p>然后就可以</p>\n<pre>npm start</pre>\n<p>在手机expo里看到效果咯。</p>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png\"><img class=\"alignnone wp-image-329 size-medium\" src=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png\" alt=\"\" width=\"169\" height=\"300\"></a></p>\n","excerpt":"<p>这里先从最近看ReactNative文档发现的expo说起，因为使用expo可以直接在ios或者安卓展示ReactNative的效果，门槛突然降低了许多，因此，突发奇想试试做native app。</p>\n<p>首先可以按照ReactNative的<a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">GetStart</a>配置完环境并完成一个hello world！","more":"</p>\n<p>总体如果有node和npm的话就以下两步：</p>\n<pre>npm install <span class=\"token operator\">-</span>g create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app</pre>\n<pre>create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">-</span>app AwesomeProject \ncd AwesomeProject \nnpm start</pre>\n<p>然后等出现一个二维码，用手机上的expo App扫码就行，ios和安卓都行哦！</p>\n<p>再来上新闻代码，写在文件的app.js里，这里在IOS上做尝试。</p>\n<p>先引入之后会用到一些的组件</p>\n<pre>import React, { Component, PropTypes } from 'react';\nimport { AppRegistry,RefreshControl,TouchableWithoutFeedback, WebView,ActivityIndicator ,ListView, Text, Image, View, StyleSheet, TextInput, Button, Alert, ScrollView, NavigatorIOS, TouchableHighlight, FlatList } from 'react-native';</pre>\n<p>第一个主组件，写了一个ios的导航条，内容在main组件里</p>\n<pre> export default class Test extends Component {\n    constructor(props){\n      super(props);\n    }\n    render() {\n        return (\n            &lt;NavigatorIOS initialRoute={ {\n                component: main,\n                title: \"头条\",\n            } } style={ {\n                flex: 1\n            } }\n            ref=\"navWorkspace\"\n            /&gt;\n        )\n    }\n}</pre>\n<p>main组件，主要用到了fetch来拉取新闻，在放入ListView组件内，</p>\n<p>其中又加了RefreshControl组件来下拉刷新，ListView的onEndReached来控制上拉加载更多。这里有个疑问，用FlatList不能实现上拉加载更多？</p>\n<pre>class main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onEndStart: true,\n            totalList:[],\n            dataSource: null,\n            page:2,\n            refreshing:false,\n        };\n    }\n    fetchData(){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\").then((response)=&gt;response.json())\n    }\n    _onRefresh(){\n      this.setState({\n        refreshing:true\n      })\n      this.fetchData().then((responseJson)=&gt;{\n        var tmp=parseInt(responseJson.data[0].news_id)-parseInt(this.state.totalList[0].news_id)\n        if(tmp!=0){\n          for(let i=tmp-1;i&gt;=0;i--){\n              this.state.totalList.unshift(responseJson.data[i])\n            }\n          }\n          let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n        this.setState({\n          refreshing:false,\n          dataSource:ds.cloneWithRows(this.state.totalList)\n        })\n      })\n    }\n    getnews(page){\n      return fetch(\"http://api.dagoogle.cn/news/get-news?page=\"+page)\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                for(let i in responseJson.data){\n                  this.state.totalList.push(responseJson.data[i])\n                }\n                this.setState({\n                    dataSource: ds.cloneWithRows(this.state.totalList),\n                    onEndStart: false\n                })\n            })\n    }\n    componentDidMount() {\n        return fetch(\"http://api.dagoogle.cn/news/get-news?page=1\")\n            .then((response) =&gt; response.json())\n            .then((responseJson) =&gt; {\n                let ds = new ListView.DataSource({\n                    rowHasChanged: (r1, r2) =&gt; r1 !== r2\n                });\n                this.setState({\n                    totalList: responseJson.data,\n                    dataSource: ds.cloneWithRows(responseJson.data),\n                    onEndStart: false\n                })\n            })\n    }\n    toend(){\n      if(!this.state.onEndStart){\n        this.getnews(this.state.page);\n        this.setState({\n          page:this.state.page+1\n        })\n      }\n    }\n    goTo(key){\n      this.props.navigator.push({\n          component: Detail,\n          title: '详情',\n          rightButtonTitle: '收藏',\n          passProps: { title: this.state.totalList[key].title,content:this.state.totalList[key].content,source:this.state.totalList[key].source},\n          onRightButtonPress: function() {alert(1)}\n      });\n    }\n    render() {\n        if (this.state.onEndStart) {\n            return (\n                &lt;ActivityIndicator style={ {flex:1,alignItems:'center',height:80} } animating={true}/&gt;\n            )\n        }\n        return (\n            &lt;ListView\n            refreshControl={\n              &lt;RefreshControl\n                refreshing={this.state.refreshing}\n                onRefresh={this._onRefresh.bind(this)}\n              /&gt;\n            }\n            style={ {marginTop:65} }\n            dataSource={this.state.dataSource}\n            renderRow={(item,sectionId,rowId) =&gt; \n              &lt;TouchableWithoutFeedback onPress={this.goTo.bind(this,rowId)}&gt;\n              &lt;View style={styles.list_item}&gt;\n                &lt;Text style={styles.list_item_font}&gt;\n                    {item.title}\n                &lt;/Text&gt;\n                &lt;Image source={ {\n                    uri: item.top_image\n                } } style={styles.image}/&gt;\n              &lt;/View&gt;\n              &lt;/TouchableWithoutFeedback&gt;\n            }\n            onEndReachedThreshold={150}\n            onEndReached={this.toend.bind(this)}\n            /&gt;\n        )\n    }\n}</pre>\n<p>之后点击新闻跳转到详情页。下面是详情页的组件</p>\n<pre>class Detail extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    var html=\"&lt;h3 style='margin-bottom:0'&gt;\"+this.props.title+\"&lt;/h3&gt;\"+\"&lt;div style='color:gray;margin-bottom:-15;'&gt;\"+this.props.source+\"&lt;/div&gt;\"+this.props.content;\n    return(\n        &lt;View style={ {flex:1} }&gt;\n          &lt;WebView source={ {html:html} }/&gt;\n        &lt;/View&gt;\n      )\n  }\n}</pre>\n<p>样式的话写在最后StyleSheet组件中，在上面的组件内可以直接用style={<a href=\"http://styles.xxx\">styles.xxx</a>}调用样式。</p>\n<pre>const styles = StyleSheet.create({\n    flex: {\n        flex: 1,\n    },\n    list_item1: {\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item: {\n        height:80,\n        marginLeft: 10,\n        marginRight: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    list_item_font: {\n        marginRight: 1,\n        flex: 3,\n        fontSize: 16,\n    },\n    image: {\n        flex: 1,\n        width: 60,\n        height: 60,\n    }\n});</pre>\n<p>然后就可以</p>\n<pre>npm start</pre>\n<p>在手机expo里看到效果咯。</p>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1.png\"><img class=\"alignnone wp-image-329 size-medium\" src=\"/img/uploads/2017/07/879A2A927D3994102C60A656BDC2F1B1-169x300.png\" alt=\"\" width=\"169\" height=\"300\" /></a></p>"},{"title":"用node.js的socket.io实现双人五子棋对战","catalog":true,"date":"2017-11-22T10:31:25.000Z","_content":"\nwebsocket也没啥好讲的，就一可以实现长连接的协议，其中也有三次握手之说。具体的也不去探究了，这里用node.js做后端来实现与前端js的websocket连接。并完成一个简易的联机游戏。<!--more-->\n\n首先参考这个<a href=\"https://socket.io/\">socket.io的网址</a>，参考get start可得到一些安装的基本步骤，这里默认已经安装好node.js以及npm，具体操作包括如下\n<pre>npm init</pre>\n<pre><code>npm install --save express@4.15.2</code></pre>\n<pre><code>npm install --save socket.io</code></pre>\n之后要进行的是服务器的编写，保存为index.js\n<pre>//引入必要库\nvar app=require('express')();\nvar http=require('http').Server(app);\nvar io=require('socket.io')(http);\n//n用于保存连接数目，now用于保存当前落子玩家\nvar n=0;\nvar now=0;\n//加载html文件\napp.get('/',function(req,res){\n    res.sendFile(__dirname + '/index.html');\n})\n//websocket连接操作\nio.on('connection',function(socket) {\n    n++;\n    //断开连接操作\n    socket.on('disconnect',function(){\n        n--;\n        console.log('out');\n    });\n    //收到消息，触发指定事件，并传送得到的消息\n    socket.on('msg',function(info){\n        console.log(now)\n        if(info[2]!=now &amp;&amp; n&gt;=2){\n            io.emit('message',{for:info})\n            now=info[2];\n        }\n    })\n});\n//打开http服务器\nhttp.listen(3000,function(){\n    console.log('start')\n})</pre>\n接下来要编辑的是html文件，同目录下保存为index.html\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;五子棋&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        canvas{\n            border:solid 1px black;\n            background-color: #5b7d7d;\n            -webkit-tap-highlight-color:rgba(0,0,0,0)\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"800\"&gt;not support&lt;/canvas&gt;\n    &lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.2.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取canvas，设置宽高\n        //获取屏宽和高并设置小的一方为棋盘长度\n        var can = document.getElementById('can');\n        var x = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w = can.width = x-20;\n        var h = can.height = x-20;\n        var con = can.getContext('2d');\n        var nowIn=1;\n        var alreadyIn=[];\n        var blackIn=[];\n        var whiteIn=[];\n        var local=Math.random();\n        //画线，做棋盘。\n        function drawline(con,color,stepx,stepy){\n            con.strokeStyle=color;\n            con.lineWidth=1;\n            for(var i=stepx+0.5;i&lt;can.width;i+=stepx){\n                con.beginPath();\n                con.moveTo(i,0);\n                con.lineTo(i,h);\n                con.stroke();\n            }\n            for(var i=stepy+0.5;i&lt;can.height;i+=stepy){\n                con.beginPath();\n                con.moveTo(0,i);\n                con.lineTo(w,i);\n                con.stroke();\n            }\n        }\n        //画棋子\n        function drawqi(x,y,color){\n            con.beginPath();\n            con.fillStyle=color;\n            con.arc(x*w/15,y*w/15,w/38,0,2*Math.PI);\n            con.stroke();\n            con.fill();\n            con.closePath();\n        }\n        //判断胜利，这里采用逐子判断。\n        function judgeWin(chess){\n            for(var i=0;i&lt;chess.length;i++){\n                sp=chess[i].split(\",\")\n                if(sp[0]&gt;=2 &amp;&amp; sp[1]&gt;=2){\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])+2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])-2),chess)!=-1){\n                        return true;\n                    }\n                }\n            }\n            return false\n        }\n        //触发画线，连接websocket\n        drawline(con,'lightgray',w/15,h/15);\n        var socket=io();\n        //canvas点击事件，获取最近的一个落子点坐标，发送事件。\n        can.onclick=function(e){\n            mx=Math.round(e.offsetX/w*15);\n            my=Math.round(e.offsetY/w*15);\n            if($.inArray((mx*15+my),alreadyIn)==-1){\n                socket.emit('msg',[mx,my,local])\n            }\n        }\n        //服务器返回触发事件，接收消息并展示给已连接用户\n        socket.on('message',function(msg){\n            mx=msg.for[0]\n            my=msg.for[1]\n            \n            alreadyIn.push(mx*15+my);\n            if(nowIn==0){\n                draw=drawqi(mx,my,\"#000\");\n                blackIn.push([mx,my].toString())\n                if(judgeWin(blackIn)){\n                    alert(\"black win\");\n                }\n            }else{\n                draw=drawqi(mx,my,\"#fff\");\n                whiteIn.push([mx,my].toString());\n                if(judgeWin(whiteIn)){\n                    setTimeout(alert(\"white win\"),500);\n                }\n            }\n            nowIn=1-nowIn;\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果图：<img class=\"alignnone size-medium wp-image-437\" src=\"/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png\" alt=\"\" width=\"298\" height=\"300\" />\n\n一般看看socket.io的文档便可以get到一点websocket的灵感，之后就可以自行拓展。\n\n当然这还是websocket最基础的一部分，之后有待进一步探索。\n","source":"_posts/2017/article_28_用node.js的socket.io实现双人五子棋对战.md","raw":"\n---\ntitle: 用node.js的socket.io实现双人五子棋对战\ncatalog: true\ndate: 2017-11-22 18:31:25\n---\n\nwebsocket也没啥好讲的，就一可以实现长连接的协议，其中也有三次握手之说。具体的也不去探究了，这里用node.js做后端来实现与前端js的websocket连接。并完成一个简易的联机游戏。<!--more-->\n\n首先参考这个<a href=\"https://socket.io/\">socket.io的网址</a>，参考get start可得到一些安装的基本步骤，这里默认已经安装好node.js以及npm，具体操作包括如下\n<pre>npm init</pre>\n<pre><code>npm install --save express@4.15.2</code></pre>\n<pre><code>npm install --save socket.io</code></pre>\n之后要进行的是服务器的编写，保存为index.js\n<pre>//引入必要库\nvar app=require('express')();\nvar http=require('http').Server(app);\nvar io=require('socket.io')(http);\n//n用于保存连接数目，now用于保存当前落子玩家\nvar n=0;\nvar now=0;\n//加载html文件\napp.get('/',function(req,res){\n    res.sendFile(__dirname + '/index.html');\n})\n//websocket连接操作\nio.on('connection',function(socket) {\n    n++;\n    //断开连接操作\n    socket.on('disconnect',function(){\n        n--;\n        console.log('out');\n    });\n    //收到消息，触发指定事件，并传送得到的消息\n    socket.on('msg',function(info){\n        console.log(now)\n        if(info[2]!=now &amp;&amp; n&gt;=2){\n            io.emit('message',{for:info})\n            now=info[2];\n        }\n    })\n});\n//打开http服务器\nhttp.listen(3000,function(){\n    console.log('start')\n})</pre>\n接下来要编辑的是html文件，同目录下保存为index.html\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;五子棋&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        canvas{\n            border:solid 1px black;\n            background-color: #5b7d7d;\n            -webkit-tap-highlight-color:rgba(0,0,0,0)\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"800\"&gt;not support&lt;/canvas&gt;\n    &lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.2.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取canvas，设置宽高\n        //获取屏宽和高并设置小的一方为棋盘长度\n        var can = document.getElementById('can');\n        var x = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w = can.width = x-20;\n        var h = can.height = x-20;\n        var con = can.getContext('2d');\n        var nowIn=1;\n        var alreadyIn=[];\n        var blackIn=[];\n        var whiteIn=[];\n        var local=Math.random();\n        //画线，做棋盘。\n        function drawline(con,color,stepx,stepy){\n            con.strokeStyle=color;\n            con.lineWidth=1;\n            for(var i=stepx+0.5;i&lt;can.width;i+=stepx){\n                con.beginPath();\n                con.moveTo(i,0);\n                con.lineTo(i,h);\n                con.stroke();\n            }\n            for(var i=stepy+0.5;i&lt;can.height;i+=stepy){\n                con.beginPath();\n                con.moveTo(0,i);\n                con.lineTo(w,i);\n                con.stroke();\n            }\n        }\n        //画棋子\n        function drawqi(x,y,color){\n            con.beginPath();\n            con.fillStyle=color;\n            con.arc(x*w/15,y*w/15,w/38,0,2*Math.PI);\n            con.stroke();\n            con.fill();\n            con.closePath();\n        }\n        //判断胜利，这里采用逐子判断。\n        function judgeWin(chess){\n            for(var i=0;i&lt;chess.length;i++){\n                sp=chess[i].split(\",\")\n                if(sp[0]&gt;=2 &amp;&amp; sp[1]&gt;=2){\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])+2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])-2),chess)!=-1){\n                        return true;\n                    }\n                }\n            }\n            return false\n        }\n        //触发画线，连接websocket\n        drawline(con,'lightgray',w/15,h/15);\n        var socket=io();\n        //canvas点击事件，获取最近的一个落子点坐标，发送事件。\n        can.onclick=function(e){\n            mx=Math.round(e.offsetX/w*15);\n            my=Math.round(e.offsetY/w*15);\n            if($.inArray((mx*15+my),alreadyIn)==-1){\n                socket.emit('msg',[mx,my,local])\n            }\n        }\n        //服务器返回触发事件，接收消息并展示给已连接用户\n        socket.on('message',function(msg){\n            mx=msg.for[0]\n            my=msg.for[1]\n            \n            alreadyIn.push(mx*15+my);\n            if(nowIn==0){\n                draw=drawqi(mx,my,\"#000\");\n                blackIn.push([mx,my].toString())\n                if(judgeWin(blackIn)){\n                    alert(\"black win\");\n                }\n            }else{\n                draw=drawqi(mx,my,\"#fff\");\n                whiteIn.push([mx,my].toString());\n                if(judgeWin(whiteIn)){\n                    setTimeout(alert(\"white win\"),500);\n                }\n            }\n            nowIn=1-nowIn;\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果图：<img class=\"alignnone size-medium wp-image-437\" src=\"/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png\" alt=\"\" width=\"298\" height=\"300\" />\n\n一般看看socket.io的文档便可以get到一点websocket的灵感，之后就可以自行拓展。\n\n当然这还是websocket最基础的一部分，之后有待进一步探索。\n","slug":"2017/article_28_用node.js的socket.io实现双人五子棋对战","published":1,"updated":"2021-01-27T04:46:28.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72g000y0770v0ufsnxd","content":"<p>websocket也没啥好讲的，就一可以实现长连接的协议，其中也有三次握手之说。具体的也不去探究了，这里用node.js做后端来实现与前端js的websocket连接。并完成一个简易的联机游戏。<a id=\"more\"></a></p>\n<p>首先参考这个<a href=\"https://socket.io/\" target=\"_blank\" rel=\"external\">socket.io的网址</a>，参考get start可得到一些安装的基本步骤，这里默认已经安装好node.js以及npm，具体操作包括如下</p>\n<pre>npm init</pre>\n<pre><code>npm install --save express@4.15.2</code></pre>\n<pre><code>npm install --save socket.io</code></pre>\n<p>之后要进行的是服务器的编写，保存为index.js</p>\n<pre>//引入必要库\nvar app=require('express')();\nvar http=require('http').Server(app);\nvar io=require('socket.io')(http);\n//n用于保存连接数目，now用于保存当前落子玩家\nvar n=0;\nvar now=0;\n//加载html文件\napp.get('/',function(req,res){\n    res.sendFile(__dirname + '/index.html');\n})\n//websocket连接操作\nio.on('connection',function(socket) {\n    n++;\n    //断开连接操作\n    socket.on('disconnect',function(){\n        n--;\n        console.log('out');\n    });\n    //收到消息，触发指定事件，并传送得到的消息\n    socket.on('msg',function(info){\n        console.log(now)\n        if(info[2]!=now &amp;&amp; n&gt;=2){\n            io.emit('message',{for:info})\n            now=info[2];\n        }\n    })\n});\n//打开http服务器\nhttp.listen(3000,function(){\n    console.log('start')\n})</pre>\n<p>接下来要编辑的是html文件，同目录下保存为index.html</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;五子棋&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        canvas{\n            border:solid 1px black;\n            background-color: #5b7d7d;\n            -webkit-tap-highlight-color:rgba(0,0,0,0)\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"800\"&gt;not support&lt;/canvas&gt;\n    &lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.2.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取canvas，设置宽高\n        //获取屏宽和高并设置小的一方为棋盘长度\n        var can = document.getElementById('can');\n        var x = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w = can.width = x-20;\n        var h = can.height = x-20;\n        var con = can.getContext('2d');\n        var nowIn=1;\n        var alreadyIn=[];\n        var blackIn=[];\n        var whiteIn=[];\n        var local=Math.random();\n        //画线，做棋盘。\n        function drawline(con,color,stepx,stepy){\n            con.strokeStyle=color;\n            con.lineWidth=1;\n            for(var i=stepx+0.5;i&lt;can.width;i+=stepx){\n                con.beginPath();\n                con.moveTo(i,0);\n                con.lineTo(i,h);\n                con.stroke();\n            }\n            for(var i=stepy+0.5;i&lt;can.height;i+=stepy){\n                con.beginPath();\n                con.moveTo(0,i);\n                con.lineTo(w,i);\n                con.stroke();\n            }\n        }\n        //画棋子\n        function drawqi(x,y,color){\n            con.beginPath();\n            con.fillStyle=color;\n            con.arc(x*w/15,y*w/15,w/38,0,2*Math.PI);\n            con.stroke();\n            con.fill();\n            con.closePath();\n        }\n        //判断胜利，这里采用逐子判断。\n        function judgeWin(chess){\n            for(var i=0;i&lt;chess.length;i++){\n                sp=chess[i].split(\",\")\n                if(sp[0]&gt;=2 &amp;&amp; sp[1]&gt;=2){\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])+2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])-2),chess)!=-1){\n                        return true;\n                    }\n                }\n            }\n            return false\n        }\n        //触发画线，连接websocket\n        drawline(con,'lightgray',w/15,h/15);\n        var socket=io();\n        //canvas点击事件，获取最近的一个落子点坐标，发送事件。\n        can.onclick=function(e){\n            mx=Math.round(e.offsetX/w*15);\n            my=Math.round(e.offsetY/w*15);\n            if($.inArray((mx*15+my),alreadyIn)==-1){\n                socket.emit('msg',[mx,my,local])\n            }\n        }\n        //服务器返回触发事件，接收消息并展示给已连接用户\n        socket.on('message',function(msg){\n            mx=msg.for[0]\n            my=msg.for[1]\n            \n            alreadyIn.push(mx*15+my);\n            if(nowIn==0){\n                draw=drawqi(mx,my,\"#000\");\n                blackIn.push([mx,my].toString())\n                if(judgeWin(blackIn)){\n                    alert(\"black win\");\n                }\n            }else{\n                draw=drawqi(mx,my,\"#fff\");\n                whiteIn.push([mx,my].toString());\n                if(judgeWin(whiteIn)){\n                    setTimeout(alert(\"white win\"),500);\n                }\n            }\n            nowIn=1-nowIn;\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果图：<img class=\"alignnone size-medium wp-image-437\" src=\"/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png\" alt=\"\" width=\"298\" height=\"300\"></p>\n<p>一般看看socket.io的文档便可以get到一点websocket的灵感，之后就可以自行拓展。</p>\n<p>当然这还是websocket最基础的一部分，之后有待进一步探索。</p>\n","excerpt":"<p>websocket也没啥好讲的，就一可以实现长连接的协议，其中也有三次握手之说。具体的也不去探究了，这里用node.js做后端来实现与前端js的websocket连接。并完成一个简易的联机游戏。","more":"</p>\n<p>首先参考这个<a href=\"https://socket.io/\">socket.io的网址</a>，参考get start可得到一些安装的基本步骤，这里默认已经安装好node.js以及npm，具体操作包括如下</p>\n<pre>npm init</pre>\n<pre><code>npm install --save express@4.15.2</code></pre>\n<pre><code>npm install --save socket.io</code></pre>\n<p>之后要进行的是服务器的编写，保存为index.js</p>\n<pre>//引入必要库\nvar app=require('express')();\nvar http=require('http').Server(app);\nvar io=require('socket.io')(http);\n//n用于保存连接数目，now用于保存当前落子玩家\nvar n=0;\nvar now=0;\n//加载html文件\napp.get('/',function(req,res){\n    res.sendFile(__dirname + '/index.html');\n})\n//websocket连接操作\nio.on('connection',function(socket) {\n    n++;\n    //断开连接操作\n    socket.on('disconnect',function(){\n        n--;\n        console.log('out');\n    });\n    //收到消息，触发指定事件，并传送得到的消息\n    socket.on('msg',function(info){\n        console.log(now)\n        if(info[2]!=now &amp;&amp; n&gt;=2){\n            io.emit('message',{for:info})\n            now=info[2];\n        }\n    })\n});\n//打开http服务器\nhttp.listen(3000,function(){\n    console.log('start')\n})</pre>\n<p>接下来要编辑的是html文件，同目录下保存为index.html</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;五子棋&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        canvas{\n            border:solid 1px black;\n            background-color: #5b7d7d;\n            -webkit-tap-highlight-color:rgba(0,0,0,0)\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"800\"&gt;not support&lt;/canvas&gt;\n    &lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.2.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取canvas，设置宽高\n        //获取屏宽和高并设置小的一方为棋盘长度\n        var can = document.getElementById('can');\n        var x = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w = can.width = x-20;\n        var h = can.height = x-20;\n        var con = can.getContext('2d');\n        var nowIn=1;\n        var alreadyIn=[];\n        var blackIn=[];\n        var whiteIn=[];\n        var local=Math.random();\n        //画线，做棋盘。\n        function drawline(con,color,stepx,stepy){\n            con.strokeStyle=color;\n            con.lineWidth=1;\n            for(var i=stepx+0.5;i&lt;can.width;i+=stepx){\n                con.beginPath();\n                con.moveTo(i,0);\n                con.lineTo(i,h);\n                con.stroke();\n            }\n            for(var i=stepy+0.5;i&lt;can.height;i+=stepy){\n                con.beginPath();\n                con.moveTo(0,i);\n                con.lineTo(w,i);\n                con.stroke();\n            }\n        }\n        //画棋子\n        function drawqi(x,y,color){\n            con.beginPath();\n            con.fillStyle=color;\n            con.arc(x*w/15,y*w/15,w/38,0,2*Math.PI);\n            con.stroke();\n            con.fill();\n            con.closePath();\n        }\n        //判断胜利，这里采用逐子判断。\n        function judgeWin(chess){\n            for(var i=0;i&lt;chess.length;i++){\n                sp=chess[i].split(\",\")\n                if(sp[0]&gt;=2 &amp;&amp; sp[1]&gt;=2){\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])-2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0]))+\",\"+(parseInt(sp[1])+2),chess)!=-1){\n                        return true;\n                    }\n                    if($.inArray((parseInt(sp[0])-1)+\",\"+(parseInt(sp[1])+1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])-2)+\",\"+(parseInt(sp[1])+2),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+1)+\",\"+(parseInt(sp[1])-1),chess)!=-1&amp;&amp;\n                    $.inArray((parseInt(sp[0])+2)+\",\"+(parseInt(sp[1])-2),chess)!=-1){\n                        return true;\n                    }\n                }\n            }\n            return false\n        }\n        //触发画线，连接websocket\n        drawline(con,'lightgray',w/15,h/15);\n        var socket=io();\n        //canvas点击事件，获取最近的一个落子点坐标，发送事件。\n        can.onclick=function(e){\n            mx=Math.round(e.offsetX/w*15);\n            my=Math.round(e.offsetY/w*15);\n            if($.inArray((mx*15+my),alreadyIn)==-1){\n                socket.emit('msg',[mx,my,local])\n            }\n        }\n        //服务器返回触发事件，接收消息并展示给已连接用户\n        socket.on('message',function(msg){\n            mx=msg.for[0]\n            my=msg.for[1]\n            \n            alreadyIn.push(mx*15+my);\n            if(nowIn==0){\n                draw=drawqi(mx,my,\"#000\");\n                blackIn.push([mx,my].toString())\n                if(judgeWin(blackIn)){\n                    alert(\"black win\");\n                }\n            }else{\n                draw=drawqi(mx,my,\"#fff\");\n                whiteIn.push([mx,my].toString());\n                if(judgeWin(whiteIn)){\n                    setTimeout(alert(\"white win\"),500);\n                }\n            }\n            nowIn=1-nowIn;\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果图：<img class=\"alignnone size-medium wp-image-437\" src=\"/img/uploads/2017/11/MQKABG9HRBVI2B0OE-298x300.png\" alt=\"\" width=\"298\" height=\"300\" /></p>\n<p>一般看看socket.io的文档便可以get到一点websocket的灵感，之后就可以自行拓展。</p>\n<p>当然这还是websocket最基础的一部分，之后有待进一步探索。</p>"},{"title":"yolo在windows训练自己的数据集","catalog":true,"date":"2017-07-22T09:00:01.000Z","_content":"\n上次讲了配置yolo，可以<a href=\"https://ganjiacheng.cn/blog/?p=300\">戳这里</a>看哦！\n\n这次讲讲yolo用于训练自己的数据集。<!--more-->\n\n首先还是数据准备，比如人脸检测，那就先准备很多包含人脸的图片。\n\n然后需要数据标注，也就是标出人脸在图片内的位置。这里用一个叫labelImg的工具。具体下载和使用看这里<a href=\"https://github.com/tzutalin/labelImg\">https://github.com/tzutalin/labelImg</a>。\n\n然后在图片文件夹里运行labelImg，会有个gui界面，之后就可以对每张图片进行标注，标注完后会有一大堆xml文件产生，之后运行一个python小脚本把xml转成所需的txt。\n\n具体操作：把xml都放到一个xml文件夹里，然后在外面新建一个obj文件夹，运行下面python代码，xml会转成txt并存入obj文件夹。\n<pre>#python3.5\nimport os\nimport shutil\nimport xml.etree.cElementTree as ET\nf=os.listdir(\"xml/\")\nfor i in f:\n    filename=i[0:8]\n    dirname=\"xml/\"+i\n    tree=ET.parse(dirname)\n    root = tree.getroot()\n    shutil.copy(filename+\".jpg\",\"obj/\"+filename+\".jpg\")\n    ft=open(\"obj/\"+filename+\".txt\",\"w\")\n    for obj in root.findall(\"object\"):\n        data=obj.find(\"bndbox\")\n        wh=root.find(\"size\")\n        width=int(wh.find(\"width\").text)\n        height=int(wh.find(\"height\").text)\n        xmin=int(data.find(\"xmin\").text)\n        ymin=int(data.find(\"ymin\").text)\n        xmax=int(data.find(\"xmax\").text)\n        ymax=int(data.find(\"ymax\").text)\n        xmid=(xmin+xmax)/2\n        ymid=(ymin+ymax)/2\n        ft.write(\"0 \"+str(xmid/width)+\" \"+str(ymid/height)+\" \"+str((xmax-xmin)/width)+\" \"+str((ymax-ymin)/height)+\"\\n\")</pre>\n然后把原图片也放在obj文件里，并把obj文件夹放到<a href=\"https://ganjiacheng.cn/blog/?p=300\">上次项目</a>的darknetx64/data文件下。\n\n然后在data下新建obj.names和obj.data。\n\nobj.names写类别名，obj.data如下\n<pre>classes= 类别数目\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = backup/</pre>\n然后再在data下新建train.txt和test.txt。\n\n运行下面的代码就能把所有训练图名放到train.txt，然后也可以分一部分到test.txt。\n<pre>#python3.5\nimport os\nf=os.listdir(\"obj/\")\nfile=open(\"train.txt\",\"w\")\nfor i in f:\n    if i[-3:]=='jpg':\n        file.write(\"data/obj/\"+i+\"\\n\")</pre>\n然后在x64下创建yolo-obj.cfg，内容其他同yolo-voc.2.0.cfg\n\n要改最后一个filter(224行左右)=(类别数+ 5)*5\n\n电脑训练不起来的话也可以把第三行的subdivisions按倍数改小(默认为64，可以改32,16)\n\n之后就可以开始训练模型咯，运行下面的代码可以开始训练\n<pre>darknet.exe detector train data/obj.data yolo-obj.cfg</pre>\n训练的时候可以看avg,一般是越低越好，趋于不变时就可以停止训练了。\n\n每一百次会保存一次模型文件在backup文件夹里。\n\n训练完后可以运行下面代码（xxx改为具体训练次数）来对新的图片进行检测。\n<pre>darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_xxx.weights</pre>\n这里在讲一个批量处理图片的方法。\n\nvs里打开项目，detector.c文件，改test_detector函数，删掉输入while1和后面的input，直接改成for循环，图片名都用拼接的方法得到，比如1.jpg之类。\n\n然后往函数里的draw_detections最后加个参数，把图片名传过去。\n\n改image.c中draw_detections函数的参数，在用crop_image截取检测部分，用save_image保存检测出来的图像。同时去掉draw_box_width。\n\n然后用ctrl+f搜索draw_detections，把所有用到这个函数的参数都改一下。\n\n运行便可以批量处理图片并截取出所需部分。\n","source":"_posts/2017/article_31_yolo在windows训练自己的数据集.md","raw":"\n---\ntitle: yolo在windows训练自己的数据集\ncatalog: true\ndate: 2017-7-22 17:00:01\n---\n\n上次讲了配置yolo，可以<a href=\"https://ganjiacheng.cn/blog/?p=300\">戳这里</a>看哦！\n\n这次讲讲yolo用于训练自己的数据集。<!--more-->\n\n首先还是数据准备，比如人脸检测，那就先准备很多包含人脸的图片。\n\n然后需要数据标注，也就是标出人脸在图片内的位置。这里用一个叫labelImg的工具。具体下载和使用看这里<a href=\"https://github.com/tzutalin/labelImg\">https://github.com/tzutalin/labelImg</a>。\n\n然后在图片文件夹里运行labelImg，会有个gui界面，之后就可以对每张图片进行标注，标注完后会有一大堆xml文件产生，之后运行一个python小脚本把xml转成所需的txt。\n\n具体操作：把xml都放到一个xml文件夹里，然后在外面新建一个obj文件夹，运行下面python代码，xml会转成txt并存入obj文件夹。\n<pre>#python3.5\nimport os\nimport shutil\nimport xml.etree.cElementTree as ET\nf=os.listdir(\"xml/\")\nfor i in f:\n    filename=i[0:8]\n    dirname=\"xml/\"+i\n    tree=ET.parse(dirname)\n    root = tree.getroot()\n    shutil.copy(filename+\".jpg\",\"obj/\"+filename+\".jpg\")\n    ft=open(\"obj/\"+filename+\".txt\",\"w\")\n    for obj in root.findall(\"object\"):\n        data=obj.find(\"bndbox\")\n        wh=root.find(\"size\")\n        width=int(wh.find(\"width\").text)\n        height=int(wh.find(\"height\").text)\n        xmin=int(data.find(\"xmin\").text)\n        ymin=int(data.find(\"ymin\").text)\n        xmax=int(data.find(\"xmax\").text)\n        ymax=int(data.find(\"ymax\").text)\n        xmid=(xmin+xmax)/2\n        ymid=(ymin+ymax)/2\n        ft.write(\"0 \"+str(xmid/width)+\" \"+str(ymid/height)+\" \"+str((xmax-xmin)/width)+\" \"+str((ymax-ymin)/height)+\"\\n\")</pre>\n然后把原图片也放在obj文件里，并把obj文件夹放到<a href=\"https://ganjiacheng.cn/blog/?p=300\">上次项目</a>的darknetx64/data文件下。\n\n然后在data下新建obj.names和obj.data。\n\nobj.names写类别名，obj.data如下\n<pre>classes= 类别数目\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = backup/</pre>\n然后再在data下新建train.txt和test.txt。\n\n运行下面的代码就能把所有训练图名放到train.txt，然后也可以分一部分到test.txt。\n<pre>#python3.5\nimport os\nf=os.listdir(\"obj/\")\nfile=open(\"train.txt\",\"w\")\nfor i in f:\n    if i[-3:]=='jpg':\n        file.write(\"data/obj/\"+i+\"\\n\")</pre>\n然后在x64下创建yolo-obj.cfg，内容其他同yolo-voc.2.0.cfg\n\n要改最后一个filter(224行左右)=(类别数+ 5)*5\n\n电脑训练不起来的话也可以把第三行的subdivisions按倍数改小(默认为64，可以改32,16)\n\n之后就可以开始训练模型咯，运行下面的代码可以开始训练\n<pre>darknet.exe detector train data/obj.data yolo-obj.cfg</pre>\n训练的时候可以看avg,一般是越低越好，趋于不变时就可以停止训练了。\n\n每一百次会保存一次模型文件在backup文件夹里。\n\n训练完后可以运行下面代码（xxx改为具体训练次数）来对新的图片进行检测。\n<pre>darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_xxx.weights</pre>\n这里在讲一个批量处理图片的方法。\n\nvs里打开项目，detector.c文件，改test_detector函数，删掉输入while1和后面的input，直接改成for循环，图片名都用拼接的方法得到，比如1.jpg之类。\n\n然后往函数里的draw_detections最后加个参数，把图片名传过去。\n\n改image.c中draw_detections函数的参数，在用crop_image截取检测部分，用save_image保存检测出来的图像。同时去掉draw_box_width。\n\n然后用ctrl+f搜索draw_detections，把所有用到这个函数的参数都改一下。\n\n运行便可以批量处理图片并截取出所需部分。\n","slug":"2017/article_31_yolo在windows训练自己的数据集","published":1,"updated":"2021-01-27T04:46:28.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72h000z07708h54lo2e","content":"<p>上次讲了配置yolo，可以<a href=\"https://ganjiacheng.cn/blog/?p=300\">戳这里</a>看哦！</p>\n<p>这次讲讲yolo用于训练自己的数据集。<a id=\"more\"></a></p>\n<p>首先还是数据准备，比如人脸检测，那就先准备很多包含人脸的图片。</p>\n<p>然后需要数据标注，也就是标出人脸在图片内的位置。这里用一个叫labelImg的工具。具体下载和使用看这里<a href=\"https://github.com/tzutalin/labelImg\" target=\"_blank\" rel=\"external\">https://github.com/tzutalin/labelImg</a>。</p>\n<p>然后在图片文件夹里运行labelImg，会有个gui界面，之后就可以对每张图片进行标注，标注完后会有一大堆xml文件产生，之后运行一个python小脚本把xml转成所需的txt。</p>\n<p>具体操作：把xml都放到一个xml文件夹里，然后在外面新建一个obj文件夹，运行下面python代码，xml会转成txt并存入obj文件夹。</p>\n<pre>#python3.5\nimport os\nimport shutil\nimport xml.etree.cElementTree as ET\nf=os.listdir(\"xml/\")\nfor i in f:\n    filename=i[0:8]\n    dirname=\"xml/\"+i\n    tree=ET.parse(dirname)\n    root = tree.getroot()\n    shutil.copy(filename+\".jpg\",\"obj/\"+filename+\".jpg\")\n    ft=open(\"obj/\"+filename+\".txt\",\"w\")\n    for obj in root.findall(\"object\"):\n        data=obj.find(\"bndbox\")\n        wh=root.find(\"size\")\n        width=int(wh.find(\"width\").text)\n        height=int(wh.find(\"height\").text)\n        xmin=int(data.find(\"xmin\").text)\n        ymin=int(data.find(\"ymin\").text)\n        xmax=int(data.find(\"xmax\").text)\n        ymax=int(data.find(\"ymax\").text)\n        xmid=(xmin+xmax)/2\n        ymid=(ymin+ymax)/2\n        ft.write(\"0 \"+str(xmid/width)+\" \"+str(ymid/height)+\" \"+str((xmax-xmin)/width)+\" \"+str((ymax-ymin)/height)+\"\\n\")</pre>\n<p>然后把原图片也放在obj文件里，并把obj文件夹放到<a href=\"https://ganjiacheng.cn/blog/?p=300\">上次项目</a>的darknetx64/data文件下。</p>\n<p>然后在data下新建obj.names和obj.data。</p>\n<p>obj.names写类别名，obj.data如下</p>\n<pre>classes= 类别数目\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = backup/</pre>\n<p>然后再在data下新建train.txt和test.txt。</p>\n<p>运行下面的代码就能把所有训练图名放到train.txt，然后也可以分一部分到test.txt。</p>\n<pre>#python3.5\nimport os\nf=os.listdir(\"obj/\")\nfile=open(\"train.txt\",\"w\")\nfor i in f:\n    if i[-3:]=='jpg':\n        file.write(\"data/obj/\"+i+\"\\n\")</pre>\n<p>然后在x64下创建yolo-obj.cfg，内容其他同yolo-voc.2.0.cfg</p>\n<p>要改最后一个filter(224行左右)=(类别数+ 5)*5</p>\n<p>电脑训练不起来的话也可以把第三行的subdivisions按倍数改小(默认为64，可以改32,16)</p>\n<p>之后就可以开始训练模型咯，运行下面的代码可以开始训练</p>\n<pre>darknet.exe detector train data/obj.data yolo-obj.cfg</pre>\n<p>训练的时候可以看avg,一般是越低越好，趋于不变时就可以停止训练了。</p>\n<p>每一百次会保存一次模型文件在backup文件夹里。</p>\n<p>训练完后可以运行下面代码（xxx改为具体训练次数）来对新的图片进行检测。</p>\n<pre>darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_xxx.weights</pre>\n<p>这里在讲一个批量处理图片的方法。</p>\n<p>vs里打开项目，detector.c文件，改test_detector函数，删掉输入while1和后面的input，直接改成for循环，图片名都用拼接的方法得到，比如1.jpg之类。</p>\n<p>然后往函数里的draw_detections最后加个参数，把图片名传过去。</p>\n<p>改image.c中draw_detections函数的参数，在用crop_image截取检测部分，用save_image保存检测出来的图像。同时去掉draw_box_width。</p>\n<p>然后用ctrl+f搜索draw_detections，把所有用到这个函数的参数都改一下。</p>\n<p>运行便可以批量处理图片并截取出所需部分。</p>\n","excerpt":"<p>上次讲了配置yolo，可以<a href=\"https://ganjiacheng.cn/blog/?p=300\">戳这里</a>看哦！</p>\n<p>这次讲讲yolo用于训练自己的数据集。","more":"</p>\n<p>首先还是数据准备，比如人脸检测，那就先准备很多包含人脸的图片。</p>\n<p>然后需要数据标注，也就是标出人脸在图片内的位置。这里用一个叫labelImg的工具。具体下载和使用看这里<a href=\"https://github.com/tzutalin/labelImg\">https://github.com/tzutalin/labelImg</a>。</p>\n<p>然后在图片文件夹里运行labelImg，会有个gui界面，之后就可以对每张图片进行标注，标注完后会有一大堆xml文件产生，之后运行一个python小脚本把xml转成所需的txt。</p>\n<p>具体操作：把xml都放到一个xml文件夹里，然后在外面新建一个obj文件夹，运行下面python代码，xml会转成txt并存入obj文件夹。</p>\n<pre>#python3.5\nimport os\nimport shutil\nimport xml.etree.cElementTree as ET\nf=os.listdir(\"xml/\")\nfor i in f:\n    filename=i[0:8]\n    dirname=\"xml/\"+i\n    tree=ET.parse(dirname)\n    root = tree.getroot()\n    shutil.copy(filename+\".jpg\",\"obj/\"+filename+\".jpg\")\n    ft=open(\"obj/\"+filename+\".txt\",\"w\")\n    for obj in root.findall(\"object\"):\n        data=obj.find(\"bndbox\")\n        wh=root.find(\"size\")\n        width=int(wh.find(\"width\").text)\n        height=int(wh.find(\"height\").text)\n        xmin=int(data.find(\"xmin\").text)\n        ymin=int(data.find(\"ymin\").text)\n        xmax=int(data.find(\"xmax\").text)\n        ymax=int(data.find(\"ymax\").text)\n        xmid=(xmin+xmax)/2\n        ymid=(ymin+ymax)/2\n        ft.write(\"0 \"+str(xmid/width)+\" \"+str(ymid/height)+\" \"+str((xmax-xmin)/width)+\" \"+str((ymax-ymin)/height)+\"\\n\")</pre>\n<p>然后把原图片也放在obj文件里，并把obj文件夹放到<a href=\"https://ganjiacheng.cn/blog/?p=300\">上次项目</a>的darknetx64/data文件下。</p>\n<p>然后在data下新建obj.names和obj.data。</p>\n<p>obj.names写类别名，obj.data如下</p>\n<pre>classes= 类别数目\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = backup/</pre>\n<p>然后再在data下新建train.txt和test.txt。</p>\n<p>运行下面的代码就能把所有训练图名放到train.txt，然后也可以分一部分到test.txt。</p>\n<pre>#python3.5\nimport os\nf=os.listdir(\"obj/\")\nfile=open(\"train.txt\",\"w\")\nfor i in f:\n    if i[-3:]=='jpg':\n        file.write(\"data/obj/\"+i+\"\\n\")</pre>\n<p>然后在x64下创建yolo-obj.cfg，内容其他同yolo-voc.2.0.cfg</p>\n<p>要改最后一个filter(224行左右)=(类别数+ 5)*5</p>\n<p>电脑训练不起来的话也可以把第三行的subdivisions按倍数改小(默认为64，可以改32,16)</p>\n<p>之后就可以开始训练模型咯，运行下面的代码可以开始训练</p>\n<pre>darknet.exe detector train data/obj.data yolo-obj.cfg</pre>\n<p>训练的时候可以看avg,一般是越低越好，趋于不变时就可以停止训练了。</p>\n<p>每一百次会保存一次模型文件在backup文件夹里。</p>\n<p>训练完后可以运行下面代码（xxx改为具体训练次数）来对新的图片进行检测。</p>\n<pre>darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_xxx.weights</pre>\n<p>这里在讲一个批量处理图片的方法。</p>\n<p>vs里打开项目，detector.c文件，改test_detector函数，删掉输入while1和后面的input，直接改成for循环，图片名都用拼接的方法得到，比如1.jpg之类。</p>\n<p>然后往函数里的draw_detections最后加个参数，把图片名传过去。</p>\n<p>改image.c中draw_detections函数的参数，在用crop_image截取检测部分，用save_image保存检测出来的图像。同时去掉draw_box_width。</p>\n<p>然后用ctrl+f搜索draw_detections，把所有用到这个函数的参数都改一下。</p>\n<p>运行便可以批量处理图片并截取出所需部分。</p>"},{"title":"初试web worker，感觉是神器","catalog":true,"date":"2017-07-25T13:02:15.000Z","_content":"\n在做3d的时候偶然发现其中用了web worker，因为要做大量的运算，如果放在js的主单线程里就会让页面卡的不行。\n\n不信可以运行下面的Fibonacci<!--more-->\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n        function fb(n){\n            if(n==1||n==2){\n                return 1;\n            }else{\n                return fb(n-1)+fb(n-2);\n            }\n        }\n        alert(fb(45))\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n上面代码至少让浏览器卡上个10秒，也就是按钮事件没法触发。\n\n然后就用得到web worker咯，他创造了类似于后台运行的“多线程”，在保证主线程正常运行的情况下在后台运行计算代码。\n\n一些限制貌似是web worker有同源限制，也无法访问主线程的dom。\n\n下面是web worker的代码，因为要同源，要放在服务器上运行，否则会报错。\n\n主文件index.html\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker=new Worker(\"worker.js\");\n        worker.postMessage(45);\n        worker.onmessage=function(e){\n            alert(e.data)\n        }\n        var btn=document.getElementById(\"btn\");\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n然后是worker.js，在同目录下\n<pre>onmessage=function(e){\n    function fb(n){\n        if(n==1||n==2){\n            return 1;\n        }else{\n            return fb(n-1)+fb(n-2);\n        }\n    }\n    postMessage(fb(e.data));\n}</pre>\n通过服务器运行index.html就可以啦。\n\n比对上面的情况，效果很明显。\n","source":"_posts/2017/article_33_初试web worker，感觉是神器.md","raw":"\n---\ntitle: 初试web worker，感觉是神器\ncatalog: true\ndate: 2017-7-25 21:02:15\n---\n\n在做3d的时候偶然发现其中用了web worker，因为要做大量的运算，如果放在js的主单线程里就会让页面卡的不行。\n\n不信可以运行下面的Fibonacci<!--more-->\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n        function fb(n){\n            if(n==1||n==2){\n                return 1;\n            }else{\n                return fb(n-1)+fb(n-2);\n            }\n        }\n        alert(fb(45))\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n上面代码至少让浏览器卡上个10秒，也就是按钮事件没法触发。\n\n然后就用得到web worker咯，他创造了类似于后台运行的“多线程”，在保证主线程正常运行的情况下在后台运行计算代码。\n\n一些限制貌似是web worker有同源限制，也无法访问主线程的dom。\n\n下面是web worker的代码，因为要同源，要放在服务器上运行，否则会报错。\n\n主文件index.html\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker=new Worker(\"worker.js\");\n        worker.postMessage(45);\n        worker.onmessage=function(e){\n            alert(e.data)\n        }\n        var btn=document.getElementById(\"btn\");\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n然后是worker.js，在同目录下\n<pre>onmessage=function(e){\n    function fb(n){\n        if(n==1||n==2){\n            return 1;\n        }else{\n            return fb(n-1)+fb(n-2);\n        }\n    }\n    postMessage(fb(e.data));\n}</pre>\n通过服务器运行index.html就可以啦。\n\n比对上面的情况，效果很明显。\n","slug":"2017/article_33_初试web worker，感觉是神器","published":1,"updated":"2021-01-27T04:46:28.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72h00100770fisoynlu","content":"<p>在做3d的时候偶然发现其中用了web worker，因为要做大量的运算，如果放在js的主单线程里就会让页面卡的不行。</p>\n<p>不信可以运行下面的Fibonacci<a id=\"more\"></a></p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n        function fb(n){\n            if(n==1||n==2){\n                return 1;\n            }else{\n                return fb(n-1)+fb(n-2);\n            }\n        }\n        alert(fb(45))\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>上面代码至少让浏览器卡上个10秒，也就是按钮事件没法触发。</p>\n<p>然后就用得到web worker咯，他创造了类似于后台运行的“多线程”，在保证主线程正常运行的情况下在后台运行计算代码。</p>\n<p>一些限制貌似是web worker有同源限制，也无法访问主线程的dom。</p>\n<p>下面是web worker的代码，因为要同源，要放在服务器上运行，否则会报错。</p>\n<p>主文件index.html</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker=new Worker(\"worker.js\");\n        worker.postMessage(45);\n        worker.onmessage=function(e){\n            alert(e.data)\n        }\n        var btn=document.getElementById(\"btn\");\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>然后是worker.js，在同目录下</p>\n<pre>onmessage=function(e){\n    function fb(n){\n        if(n==1||n==2){\n            return 1;\n        }else{\n            return fb(n-1)+fb(n-2);\n        }\n    }\n    postMessage(fb(e.data));\n}</pre>\n<p>通过服务器运行index.html就可以啦。</p>\n<p>比对上面的情况，效果很明显。</p>\n","excerpt":"<p>在做3d的时候偶然发现其中用了web worker，因为要做大量的运算，如果放在js的主单线程里就会让页面卡的不行。</p>\n<p>不信可以运行下面的Fibonacci","more":"</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n        function fb(n){\n            if(n==1||n==2){\n                return 1;\n            }else{\n                return fb(n-1)+fb(n-2);\n            }\n        }\n        alert(fb(45))\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>上面代码至少让浏览器卡上个10秒，也就是按钮事件没法触发。</p>\n<p>然后就用得到web worker咯，他创造了类似于后台运行的“多线程”，在保证主线程正常运行的情况下在后台运行计算代码。</p>\n<p>一些限制貌似是web worker有同源限制，也无法访问主线程的dom。</p>\n<p>下面是web worker的代码，因为要同源，要放在服务器上运行，否则会报错。</p>\n<p>主文件index.html</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;web worker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"btn\"&gt;click me&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker=new Worker(\"worker.js\");\n        worker.postMessage(45);\n        worker.onmessage=function(e){\n            alert(e.data)\n        }\n        var btn=document.getElementById(\"btn\");\n        btn.onclick=function(){\n            alert('you clicked');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>然后是worker.js，在同目录下</p>\n<pre>onmessage=function(e){\n    function fb(n){\n        if(n==1||n==2){\n            return 1;\n        }else{\n            return fb(n-1)+fb(n-2);\n        }\n    }\n    postMessage(fb(e.data));\n}</pre>\n<p>通过服务器运行index.html就可以啦。</p>\n<p>比对上面的情况，效果很明显。</p>"},{"title":"three.js第三弹，一个可玩的魔方","catalog":true,"date":"2017-07-27T13:42:09.000Z","_content":"\n魔方对于大多数人都不陌生，也是个立方体的玩意儿。\n\n这里就简单用three.js实现一下，复杂的还是定位，毕竟是3d的还能乱转。\n\n<a href=\"http://test.ganjiacheng.cn/3d/test3d2.html\">点击这里先看效果哦！！</a><!--more-->\n\n看代码前还是先来说明：基本框架还是一样----舞台，摄像头和渲染器。\n\n之后用faceMaterial写一个6面颜色不一样的cube，并用27个这样的cube组成魔方的基本样子。\n\ntrackballControls是摄像头控制函数，加入可以用鼠标控制其中的摄像头。\n\n监听鼠标按下事件，按下时获取点击的三维坐标，获取在最前端的cube的name。\n\n通过坐标计算旋转方向（这里容易脑壳疼），通过name计算同一平面的其他cube。\n\n通过方向与平面以矩阵旋转平面内9个cube，并把旋转做成动画。\n\n听说好文章结尾都有彩蛋~\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/TrackballControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-20,20,20);\n            camera.lookAt(scene.position);\n\n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xdadada);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnabled=true;\n\n            var axes=new THREE.AxisHelper(2);\n            scene.add(axes);\n\n            var group=new THREE.Mesh();\n            var mats=[];\n            mats.push(new THREE.MeshBasicMaterial({color:0x009e60}));//g\n            mats.push(new THREE.MeshBasicMaterial({color:0x0051ba}));//b\n            mats.push(new THREE.MeshBasicMaterial({color:0xffd500}));//y\n            mats.push(new THREE.MeshBasicMaterial({color:0xff5800}));//j\n            mats.push(new THREE.MeshBasicMaterial({color:0xC41E3A}));//r\n            mats.push(new THREE.MeshBasicMaterial({color:0xffffff}));//w\n            var faceMaterial=new THREE.MeshFaceMaterial(mats);\n            for(var x=0;x&lt;3;x++){\n                for(var y=0;y&lt;3;y++){\n                    for(var z=0;z&lt;3;z++){\n                        var cubeGeom=new THREE.BoxGeometry(2.9,2.9,2.9);\n                        var cube=new THREE.Mesh(cubeGeom,faceMaterial);\n                        cube.position.set(x*3-3,y*3-3,z*3-3);\n                        cube.name=z+3*y+9*x;\n                        group.add(cube);\n                    }\n                }\n            }\n            scene.add(group);\n\n            var trackballControls=new THREE.TrackballControls(camera);\n            trackballControls.rotateSpeed=1.0;\n            trackballControls.zoomSpeed=1.0;\n            trackballControls.panSpeed=1.0;\n\n            document.addEventListener('mousedown',onMouseDown,false);\n\n            var clock=new THREE.Clock();\n\n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n\n            var test=new THREE.MeshBasicMaterial({color:0x000000});\n            var startMove=-1;\n            var moveList=[];\n            var rotateDirection;\n            var DirectionLR=true;\n            var j=0;\n            function onMouseDown(event){\n                if(startMove!=-1){\n                    return;\n                }\n                var vector=new THREE.Vector3((event.clientX/window.innerWidth)*2-1,-(event.clientY/window.innerHeight)*2+1,0.5);\n                vector=vector.unproject(camera);\n                var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());\n                var intersects=raycaster.intersectObjects(group.children);\n                if(intersects.length&gt;0){\n                    j=0;\n                    moveList=[];\n                    startMove=intersects[0].object.name;\n                    var y=scene.children[1].children[startMove].position.y;\n                    getRotateDirection(intersects[0].point.x,intersects[0].point.y,intersects[0].point.z);\n                    if(rotateDirection==1){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.y,2)==xround(y,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection==2){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.x,2)==xround(scene.children[1].children[startMove].position.x,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection=3){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.z,2)==xround(scene.children[1].children[startMove].position.z,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function reset(){\n                startMove=-1;\n            }\n\n            function rotationMF(moveList){\n                var rotationV=DirectionLR?Math.PI/100:-Math.PI/100;\n                if(rotateDirection==1){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationY(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==2){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationX(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==3){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationZ(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }\n            }\n            \n            function xround(x, num){\n                return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n            }\n            function getRotateDirection(x,y,z){\n                function dealxyz(axis){\n                    for(var i=0;i&lt;3;i++){\n                        if(xround(axis[i],2)==-4.45 || xround(axis[i],2)==4.45){\n                            var fl=xround(axis.splice(i,1),2)==-4.45;\n                            axis[0]=axis[0]&gt;1.5?axis[0]-3:axis[0];\n                            axis[0]=axis[0]&lt;-1.5?axis[0]+3:axis[0];\n                            axis[1]=axis[1]&gt;1.5?axis[1]-3:axis[1];\n                            axis[1]=axis[1]&lt;-1.5?axis[1]+3:axis[1];\n                            var judge;\n                            if(i==0 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==0 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=!fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0);\n                                console.log(judge);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0);\n                            }\n                            return judge;\n                        }\n                    }\n                }\n                DirectionLR=!dealxyz([x,y,z]);\n            }\n\n            function renderScene(){\n                var delta=clock.getDelta();\n                if(startMove!=-1){rotationMF(moveList);}\n                trackballControls.update(delta);\n                requestAnimationFrame(renderScene);\n                renderer.render(scene,camera);\n            }\n            renderScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n这里不预览啦，主要注明的一点就是看起来比写起来真是两码事，\n\n一开始纠结在rotation的旋转会连带转自己的坐标轴。后来慢慢发现他转的是他的children子元素，并可以创造矩阵来旋转。\n\n本来想的很好做一个沿y轴转四个面，然后推广到x,z，只要写一套就行。现实还是安心的做完了6个面以及每个面里9个小块的分析。\n\n本来还想着怎么能写的系统一点，可以轻松调InOut，这样就可以做多元的魔方，说不定还能研究个魔方的随机打乱和复原，好吧继续想着吧。\n\n还有点感悟就是three.js文档虽然齐全不过问的问题确实不多，有点难搜到相似问题。搜到的时候讲的都是欧拉角，旋转矩阵，四元数这种画风。。。\n\nthree.js完结篇，，\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n才怪\n","source":"_posts/2017/article_35_three.js第三弹，一个可玩的魔方.md","raw":"\n---\ntitle: three.js第三弹，一个可玩的魔方\ncatalog: true\ndate: 2017-7-27 21:42:09\n---\n\n魔方对于大多数人都不陌生，也是个立方体的玩意儿。\n\n这里就简单用three.js实现一下，复杂的还是定位，毕竟是3d的还能乱转。\n\n<a href=\"http://test.ganjiacheng.cn/3d/test3d2.html\">点击这里先看效果哦！！</a><!--more-->\n\n看代码前还是先来说明：基本框架还是一样----舞台，摄像头和渲染器。\n\n之后用faceMaterial写一个6面颜色不一样的cube，并用27个这样的cube组成魔方的基本样子。\n\ntrackballControls是摄像头控制函数，加入可以用鼠标控制其中的摄像头。\n\n监听鼠标按下事件，按下时获取点击的三维坐标，获取在最前端的cube的name。\n\n通过坐标计算旋转方向（这里容易脑壳疼），通过name计算同一平面的其他cube。\n\n通过方向与平面以矩阵旋转平面内9个cube，并把旋转做成动画。\n\n听说好文章结尾都有彩蛋~\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/TrackballControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-20,20,20);\n            camera.lookAt(scene.position);\n\n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xdadada);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnabled=true;\n\n            var axes=new THREE.AxisHelper(2);\n            scene.add(axes);\n\n            var group=new THREE.Mesh();\n            var mats=[];\n            mats.push(new THREE.MeshBasicMaterial({color:0x009e60}));//g\n            mats.push(new THREE.MeshBasicMaterial({color:0x0051ba}));//b\n            mats.push(new THREE.MeshBasicMaterial({color:0xffd500}));//y\n            mats.push(new THREE.MeshBasicMaterial({color:0xff5800}));//j\n            mats.push(new THREE.MeshBasicMaterial({color:0xC41E3A}));//r\n            mats.push(new THREE.MeshBasicMaterial({color:0xffffff}));//w\n            var faceMaterial=new THREE.MeshFaceMaterial(mats);\n            for(var x=0;x&lt;3;x++){\n                for(var y=0;y&lt;3;y++){\n                    for(var z=0;z&lt;3;z++){\n                        var cubeGeom=new THREE.BoxGeometry(2.9,2.9,2.9);\n                        var cube=new THREE.Mesh(cubeGeom,faceMaterial);\n                        cube.position.set(x*3-3,y*3-3,z*3-3);\n                        cube.name=z+3*y+9*x;\n                        group.add(cube);\n                    }\n                }\n            }\n            scene.add(group);\n\n            var trackballControls=new THREE.TrackballControls(camera);\n            trackballControls.rotateSpeed=1.0;\n            trackballControls.zoomSpeed=1.0;\n            trackballControls.panSpeed=1.0;\n\n            document.addEventListener('mousedown',onMouseDown,false);\n\n            var clock=new THREE.Clock();\n\n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n\n            var test=new THREE.MeshBasicMaterial({color:0x000000});\n            var startMove=-1;\n            var moveList=[];\n            var rotateDirection;\n            var DirectionLR=true;\n            var j=0;\n            function onMouseDown(event){\n                if(startMove!=-1){\n                    return;\n                }\n                var vector=new THREE.Vector3((event.clientX/window.innerWidth)*2-1,-(event.clientY/window.innerHeight)*2+1,0.5);\n                vector=vector.unproject(camera);\n                var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());\n                var intersects=raycaster.intersectObjects(group.children);\n                if(intersects.length&gt;0){\n                    j=0;\n                    moveList=[];\n                    startMove=intersects[0].object.name;\n                    var y=scene.children[1].children[startMove].position.y;\n                    getRotateDirection(intersects[0].point.x,intersects[0].point.y,intersects[0].point.z);\n                    if(rotateDirection==1){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.y,2)==xround(y,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection==2){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.x,2)==xround(scene.children[1].children[startMove].position.x,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection=3){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.z,2)==xround(scene.children[1].children[startMove].position.z,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function reset(){\n                startMove=-1;\n            }\n\n            function rotationMF(moveList){\n                var rotationV=DirectionLR?Math.PI/100:-Math.PI/100;\n                if(rotateDirection==1){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationY(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==2){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationX(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==3){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationZ(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }\n            }\n            \n            function xround(x, num){\n                return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n            }\n            function getRotateDirection(x,y,z){\n                function dealxyz(axis){\n                    for(var i=0;i&lt;3;i++){\n                        if(xround(axis[i],2)==-4.45 || xround(axis[i],2)==4.45){\n                            var fl=xround(axis.splice(i,1),2)==-4.45;\n                            axis[0]=axis[0]&gt;1.5?axis[0]-3:axis[0];\n                            axis[0]=axis[0]&lt;-1.5?axis[0]+3:axis[0];\n                            axis[1]=axis[1]&gt;1.5?axis[1]-3:axis[1];\n                            axis[1]=axis[1]&lt;-1.5?axis[1]+3:axis[1];\n                            var judge;\n                            if(i==0 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==0 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=!fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0);\n                                console.log(judge);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0);\n                            }\n                            return judge;\n                        }\n                    }\n                }\n                DirectionLR=!dealxyz([x,y,z]);\n            }\n\n            function renderScene(){\n                var delta=clock.getDelta();\n                if(startMove!=-1){rotationMF(moveList);}\n                trackballControls.update(delta);\n                requestAnimationFrame(renderScene);\n                renderer.render(scene,camera);\n            }\n            renderScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n这里不预览啦，主要注明的一点就是看起来比写起来真是两码事，\n\n一开始纠结在rotation的旋转会连带转自己的坐标轴。后来慢慢发现他转的是他的children子元素，并可以创造矩阵来旋转。\n\n本来想的很好做一个沿y轴转四个面，然后推广到x,z，只要写一套就行。现实还是安心的做完了6个面以及每个面里9个小块的分析。\n\n本来还想着怎么能写的系统一点，可以轻松调InOut，这样就可以做多元的魔方，说不定还能研究个魔方的随机打乱和复原，好吧继续想着吧。\n\n还有点感悟就是three.js文档虽然齐全不过问的问题确实不多，有点难搜到相似问题。搜到的时候讲的都是欧拉角，旋转矩阵，四元数这种画风。。。\n\nthree.js完结篇，，\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n才怪\n","slug":"2017/article_35_three.js第三弹，一个可玩的魔方","published":1,"updated":"2021-01-27T04:46:28.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72i001107702o9bi8e3","content":"<p>魔方对于大多数人都不陌生，也是个立方体的玩意儿。</p>\n<p>这里就简单用three.js实现一下，复杂的还是定位，毕竟是3d的还能乱转。</p>\n<p><a href=\"http://test.ganjiacheng.cn/3d/test3d2.html\" target=\"_blank\" rel=\"external\">点击这里先看效果哦！！</a><a id=\"more\"></a></p>\n<p>看代码前还是先来说明：基本框架还是一样----舞台，摄像头和渲染器。</p>\n<p>之后用faceMaterial写一个6面颜色不一样的cube，并用27个这样的cube组成魔方的基本样子。</p>\n<p>trackballControls是摄像头控制函数，加入可以用鼠标控制其中的摄像头。</p>\n<p>监听鼠标按下事件，按下时获取点击的三维坐标，获取在最前端的cube的name。</p>\n<p>通过坐标计算旋转方向（这里容易脑壳疼），通过name计算同一平面的其他cube。</p>\n<p>通过方向与平面以矩阵旋转平面内9个cube，并把旋转做成动画。</p>\n<p>听说好文章结尾都有彩蛋~</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/TrackballControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-20,20,20);\n            camera.lookAt(scene.position);\n\n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xdadada);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnabled=true;\n\n            var axes=new THREE.AxisHelper(2);\n            scene.add(axes);\n\n            var group=new THREE.Mesh();\n            var mats=[];\n            mats.push(new THREE.MeshBasicMaterial({color:0x009e60}));//g\n            mats.push(new THREE.MeshBasicMaterial({color:0x0051ba}));//b\n            mats.push(new THREE.MeshBasicMaterial({color:0xffd500}));//y\n            mats.push(new THREE.MeshBasicMaterial({color:0xff5800}));//j\n            mats.push(new THREE.MeshBasicMaterial({color:0xC41E3A}));//r\n            mats.push(new THREE.MeshBasicMaterial({color:0xffffff}));//w\n            var faceMaterial=new THREE.MeshFaceMaterial(mats);\n            for(var x=0;x&lt;3;x++){\n                for(var y=0;y&lt;3;y++){\n                    for(var z=0;z&lt;3;z++){\n                        var cubeGeom=new THREE.BoxGeometry(2.9,2.9,2.9);\n                        var cube=new THREE.Mesh(cubeGeom,faceMaterial);\n                        cube.position.set(x*3-3,y*3-3,z*3-3);\n                        cube.name=z+3*y+9*x;\n                        group.add(cube);\n                    }\n                }\n            }\n            scene.add(group);\n\n            var trackballControls=new THREE.TrackballControls(camera);\n            trackballControls.rotateSpeed=1.0;\n            trackballControls.zoomSpeed=1.0;\n            trackballControls.panSpeed=1.0;\n\n            document.addEventListener('mousedown',onMouseDown,false);\n\n            var clock=new THREE.Clock();\n\n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n\n            var test=new THREE.MeshBasicMaterial({color:0x000000});\n            var startMove=-1;\n            var moveList=[];\n            var rotateDirection;\n            var DirectionLR=true;\n            var j=0;\n            function onMouseDown(event){\n                if(startMove!=-1){\n                    return;\n                }\n                var vector=new THREE.Vector3((event.clientX/window.innerWidth)*2-1,-(event.clientY/window.innerHeight)*2+1,0.5);\n                vector=vector.unproject(camera);\n                var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());\n                var intersects=raycaster.intersectObjects(group.children);\n                if(intersects.length&gt;0){\n                    j=0;\n                    moveList=[];\n                    startMove=intersects[0].object.name;\n                    var y=scene.children[1].children[startMove].position.y;\n                    getRotateDirection(intersects[0].point.x,intersects[0].point.y,intersects[0].point.z);\n                    if(rotateDirection==1){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.y,2)==xround(y,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection==2){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.x,2)==xround(scene.children[1].children[startMove].position.x,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection=3){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.z,2)==xround(scene.children[1].children[startMove].position.z,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function reset(){\n                startMove=-1;\n            }\n\n            function rotationMF(moveList){\n                var rotationV=DirectionLR?Math.PI/100:-Math.PI/100;\n                if(rotateDirection==1){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationY(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==2){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationX(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==3){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationZ(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }\n            }\n            \n            function xround(x, num){\n                return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n            }\n            function getRotateDirection(x,y,z){\n                function dealxyz(axis){\n                    for(var i=0;i&lt;3;i++){\n                        if(xround(axis[i],2)==-4.45 || xround(axis[i],2)==4.45){\n                            var fl=xround(axis.splice(i,1),2)==-4.45;\n                            axis[0]=axis[0]&gt;1.5?axis[0]-3:axis[0];\n                            axis[0]=axis[0]&lt;-1.5?axis[0]+3:axis[0];\n                            axis[1]=axis[1]&gt;1.5?axis[1]-3:axis[1];\n                            axis[1]=axis[1]&lt;-1.5?axis[1]+3:axis[1];\n                            var judge;\n                            if(i==0 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==0 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=!fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0);\n                                console.log(judge);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0);\n                            }\n                            return judge;\n                        }\n                    }\n                }\n                DirectionLR=!dealxyz([x,y,z]);\n            }\n\n            function renderScene(){\n                var delta=clock.getDelta();\n                if(startMove!=-1){rotationMF(moveList);}\n                trackballControls.update(delta);\n                requestAnimationFrame(renderScene);\n                renderer.render(scene,camera);\n            }\n            renderScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>这里不预览啦，主要注明的一点就是看起来比写起来真是两码事，</p>\n<p>一开始纠结在rotation的旋转会连带转自己的坐标轴。后来慢慢发现他转的是他的children子元素，并可以创造矩阵来旋转。</p>\n<p>本来想的很好做一个沿y轴转四个面，然后推广到x,z，只要写一套就行。现实还是安心的做完了6个面以及每个面里9个小块的分析。</p>\n<p>本来还想着怎么能写的系统一点，可以轻松调InOut，这样就可以做多元的魔方，说不定还能研究个魔方的随机打乱和复原，好吧继续想着吧。</p>\n<p>还有点感悟就是three.js文档虽然齐全不过问的问题确实不多，有点难搜到相似问题。搜到的时候讲的都是欧拉角，旋转矩阵，四元数这种画风。。。</p>\n<p>three.js完结篇，，</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p>才怪</p>\n","excerpt":"<p>魔方对于大多数人都不陌生，也是个立方体的玩意儿。</p>\n<p>这里就简单用three.js实现一下，复杂的还是定位，毕竟是3d的还能乱转。</p>\n<p><a href=\"http://test.ganjiacheng.cn/3d/test3d2.html\">点击这里先看效果哦！！</a>","more":"</p>\n<p>看代码前还是先来说明：基本框架还是一样----舞台，摄像头和渲染器。</p>\n<p>之后用faceMaterial写一个6面颜色不一样的cube，并用27个这样的cube组成魔方的基本样子。</p>\n<p>trackballControls是摄像头控制函数，加入可以用鼠标控制其中的摄像头。</p>\n<p>监听鼠标按下事件，按下时获取点击的三维坐标，获取在最前端的cube的name。</p>\n<p>通过坐标计算旋转方向（这里容易脑壳疼），通过name计算同一平面的其他cube。</p>\n<p>通过方向与平面以矩阵旋转平面内9个cube，并把旋转做成动画。</p>\n<p>听说好文章结尾都有彩蛋~</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/TrackballControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-20,20,20);\n            camera.lookAt(scene.position);\n\n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xdadada);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnabled=true;\n\n            var axes=new THREE.AxisHelper(2);\n            scene.add(axes);\n\n            var group=new THREE.Mesh();\n            var mats=[];\n            mats.push(new THREE.MeshBasicMaterial({color:0x009e60}));//g\n            mats.push(new THREE.MeshBasicMaterial({color:0x0051ba}));//b\n            mats.push(new THREE.MeshBasicMaterial({color:0xffd500}));//y\n            mats.push(new THREE.MeshBasicMaterial({color:0xff5800}));//j\n            mats.push(new THREE.MeshBasicMaterial({color:0xC41E3A}));//r\n            mats.push(new THREE.MeshBasicMaterial({color:0xffffff}));//w\n            var faceMaterial=new THREE.MeshFaceMaterial(mats);\n            for(var x=0;x&lt;3;x++){\n                for(var y=0;y&lt;3;y++){\n                    for(var z=0;z&lt;3;z++){\n                        var cubeGeom=new THREE.BoxGeometry(2.9,2.9,2.9);\n                        var cube=new THREE.Mesh(cubeGeom,faceMaterial);\n                        cube.position.set(x*3-3,y*3-3,z*3-3);\n                        cube.name=z+3*y+9*x;\n                        group.add(cube);\n                    }\n                }\n            }\n            scene.add(group);\n\n            var trackballControls=new THREE.TrackballControls(camera);\n            trackballControls.rotateSpeed=1.0;\n            trackballControls.zoomSpeed=1.0;\n            trackballControls.panSpeed=1.0;\n\n            document.addEventListener('mousedown',onMouseDown,false);\n\n            var clock=new THREE.Clock();\n\n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n\n            var test=new THREE.MeshBasicMaterial({color:0x000000});\n            var startMove=-1;\n            var moveList=[];\n            var rotateDirection;\n            var DirectionLR=true;\n            var j=0;\n            function onMouseDown(event){\n                if(startMove!=-1){\n                    return;\n                }\n                var vector=new THREE.Vector3((event.clientX/window.innerWidth)*2-1,-(event.clientY/window.innerHeight)*2+1,0.5);\n                vector=vector.unproject(camera);\n                var raycaster=new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());\n                var intersects=raycaster.intersectObjects(group.children);\n                if(intersects.length&gt;0){\n                    j=0;\n                    moveList=[];\n                    startMove=intersects[0].object.name;\n                    var y=scene.children[1].children[startMove].position.y;\n                    getRotateDirection(intersects[0].point.x,intersects[0].point.y,intersects[0].point.z);\n                    if(rotateDirection==1){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.y,2)==xround(y,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection==2){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.x,2)==xround(scene.children[1].children[startMove].position.x,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }else if(rotateDirection=3){\n                        for(var i=0;i&lt;27;i++){\n                            if(xround(scene.children[1].children[i].position.z,2)==xround(scene.children[1].children[startMove].position.z,2)){\n                                moveList.push(i);\n                            }\n                        }\n                    }\n                }\n            }\n\n            function reset(){\n                startMove=-1;\n            }\n\n            function rotationMF(moveList){\n                var rotationV=DirectionLR?Math.PI/100:-Math.PI/100;\n                if(rotateDirection==1){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationY(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==2){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationX(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }else if(rotateDirection==3){\n                    if(j&lt;50){\n                        for(var i in moveList){\n                            var rotation = new THREE.Matrix4().makeRotationZ(rotationV);\n                            scene.children[1].children[moveList[i]].applyMatrix(rotation);\n                        }\n                        j++;\n                    }else{\n                        reset()\n                    }\n                }\n            }\n            \n            function xround(x, num){\n                return Math.round(x * Math.pow(10, num)) / Math.pow(10, num);\n            }\n            function getRotateDirection(x,y,z){\n                function dealxyz(axis){\n                    for(var i=0;i&lt;3;i++){\n                        if(xround(axis[i],2)==-4.45 || xround(axis[i],2)==4.45){\n                            var fl=xround(axis.splice(i,1),2)==-4.45;\n                            axis[0]=axis[0]&gt;1.5?axis[0]-3:axis[0];\n                            axis[0]=axis[0]&lt;-1.5?axis[0]+3:axis[0];\n                            axis[1]=axis[1]&gt;1.5?axis[1]-3:axis[1];\n                            axis[1]=axis[1]&lt;-1.5?axis[1]+3:axis[1];\n                            var judge;\n                            if(i==0 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==0 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=!fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0);\n                            }else if(i==1 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=3;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&gt;Math.abs(axis[1])){\n                                rotateDirection=1;\n                                judge=fl?(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&gt;0):(Math.abs(axis[1])&lt;Math.abs(axis[0]) &amp;&amp; axis[0]&lt;0);\n                                console.log(judge);\n                            }else if(i==2 &amp;&amp; Math.abs(axis[0])&lt;Math.abs(axis[1])){\n                                rotateDirection=2;\n                                judge=!fl?(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&gt;0):(Math.abs(axis[0])&lt;Math.abs(axis[1]) &amp;&amp; axis[1]&lt;0);\n                            }\n                            return judge;\n                        }\n                    }\n                }\n                DirectionLR=!dealxyz([x,y,z]);\n            }\n\n            function renderScene(){\n                var delta=clock.getDelta();\n                if(startMove!=-1){rotationMF(moveList);}\n                trackballControls.update(delta);\n                requestAnimationFrame(renderScene);\n                renderer.render(scene,camera);\n            }\n            renderScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>这里不预览啦，主要注明的一点就是看起来比写起来真是两码事，</p>\n<p>一开始纠结在rotation的旋转会连带转自己的坐标轴。后来慢慢发现他转的是他的children子元素，并可以创造矩阵来旋转。</p>\n<p>本来想的很好做一个沿y轴转四个面，然后推广到x,z，只要写一套就行。现实还是安心的做完了6个面以及每个面里9个小块的分析。</p>\n<p>本来还想着怎么能写的系统一点，可以轻松调InOut，这样就可以做多元的魔方，说不定还能研究个魔方的随机打乱和复原，好吧继续想着吧。</p>\n<p>还有点感悟就是three.js文档虽然齐全不过问的问题确实不多，有点难搜到相似问题。搜到的时候讲的都是欧拉角，旋转矩阵，四元数这种画风。。。</p>\n<p>three.js完结篇，，</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p>才怪</p>"},{"title":"three.js第二波，实现类似反应堆的游戏","catalog":true,"date":"2017-07-25T13:26:57.000Z","_content":"\n一开始还就迷茫呢碰撞检测比较难，后来发现了physi.js。\n\n也是在看three.js看到的一个库，用了web worker实现各种复杂的计算。\n\n先<a href=\"http://test.ganjiacheng.cn/3d/test3d6.html\">点击这里看效果</a>，手机电脑支持web worker(一般都支持)的都可以运行<!--more-->\n\n初次加载看起来快，实际一个用于计算的ammo.js也有1.2M，只是他在后台加载。所以可能得等一会儿。\n\n这个本应该有个onload的，不过目前还没有发现这个函数，之后有机会在探索。\n\n思路便是：创造一个物理舞台，摄像头和渲染器和之前一样，加一个物理平面（带摩擦和弹性），加一个普通cube并来回运动，监听click事件，click时获取普通cube的位置并创造一个物理cube，物理cube便会往下掉，加一个计分。\n\n下面是具体代码，js文件的话在下面的路径可以找到\n\nhttp://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;  \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d6&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n        #grade{\n            position: absolute;\n            left: 50%;\n            margin-left: -28px;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"grade\"&gt;0&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/physi.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var scene;\n        function init(){\n            var stats=initStats();\n\n            Physijs.scripts.worker='learning-threejs/libs/physijs_worker.js';\n\n            var scene=new Physijs.Scene();\n            scene.setGravity(new THREE.Vector3(0,-50,0));\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-30,40,40);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n            \n            var ground_material=Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff}),0.9,0.3);\n            var planeGeometry=new Physijs.BoxMesh(new THREE.BoxGeometry(10,1,10),ground_material,0)            \n            scene.add(planeGeometry);\n            \n            function addPhyCube(x=0,y=0,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cube=new Physijs.BoxMesh(cubeGeometry,Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff*Math.random()}),1,0));\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n\n            function addNormalCube(x=0,y=8,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cubeMaterial=new THREE.MeshLambertMaterial({color:0xff0000});\n                var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n            \n            var maxy=0;\n            var NorNum=2;\n            var time=0\n            function refreshGrade(){\n                if(time==0 &amp;&amp; stats.domElement.textContent[0]==6){\n                    document.getElementById(\"webgl\").onmousedown=function(){\n                        addPhyCube(scene.children[NorNum].position.x,scene.children[NorNum].position.y,scene.children[NorNum].position.z);\n                        time=2;\n                    }\n                    time=1;\n                }else if(time==1){\n                    document.getElementById(\"grade\").innerHTML=\"start\";\n                }else if(time==2){\n                    var len=scene.children.length;\n                    var maxy=0;\n                    for(var i=NorNum+1;i&lt;len;i++){\n                        maxy=scene.children[i].position.y&gt;-2&amp;&amp;Math.abs(scene.children[i].position.z)&lt;15?maxy+1:maxy;\n                    }                \n                    camera.position.y=maxy*2+40;\n                    scene.children[NorNum].position.y=maxy*2+5;\n                    document.getElementById(\"grade\").innerHTML=\"score:\"+maxy;\n                }else{\n                    document.getElementById(\"grade\").innerHTML=\"waiting......\";\n                }\n            }   \n\n            var spotLight=new THREE.SpotLight(0xffffff);\n            spotLight.position.set(-40,60,0);\n            scene.add(spotLight);\n            spotLight.castShadow=true;\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            addNormalCube(0,8,-20);\n            renderer.render(scene,camera);\n\n            var step=0;\n\n            function rendererScene(){\n                stats.update();\n                refreshGrade();\n                last=scene.children.length-1;\n                step+=0.05;\n                scene.children[NorNum].position.z+=Math.sin(step);\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n                scene.simulate();\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果展示：\n\n<img class=\"alignnone size-medium wp-image-355\" src=\"/img/uploads/2017/07/IMG_3419-169x300.png\" alt=\"\" width=\"169\" height=\"300\" />\n","source":"_posts/2017/article_34_three.js第二波，实现类似反应堆的游戏.md","raw":"\n---\ntitle: three.js第二波，实现类似反应堆的游戏\ncatalog: true\ndate: 2017-7-25 21:26:57\n---\n\n一开始还就迷茫呢碰撞检测比较难，后来发现了physi.js。\n\n也是在看three.js看到的一个库，用了web worker实现各种复杂的计算。\n\n先<a href=\"http://test.ganjiacheng.cn/3d/test3d6.html\">点击这里看效果</a>，手机电脑支持web worker(一般都支持)的都可以运行<!--more-->\n\n初次加载看起来快，实际一个用于计算的ammo.js也有1.2M，只是他在后台加载。所以可能得等一会儿。\n\n这个本应该有个onload的，不过目前还没有发现这个函数，之后有机会在探索。\n\n思路便是：创造一个物理舞台，摄像头和渲染器和之前一样，加一个物理平面（带摩擦和弹性），加一个普通cube并来回运动，监听click事件，click时获取普通cube的位置并创造一个物理cube，物理cube便会往下掉，加一个计分。\n\n下面是具体代码，js文件的话在下面的路径可以找到\n\nhttp://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;  \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d6&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n        #grade{\n            position: absolute;\n            left: 50%;\n            margin-left: -28px;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"grade\"&gt;0&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/physi.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var scene;\n        function init(){\n            var stats=initStats();\n\n            Physijs.scripts.worker='learning-threejs/libs/physijs_worker.js';\n\n            var scene=new Physijs.Scene();\n            scene.setGravity(new THREE.Vector3(0,-50,0));\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-30,40,40);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n            \n            var ground_material=Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff}),0.9,0.3);\n            var planeGeometry=new Physijs.BoxMesh(new THREE.BoxGeometry(10,1,10),ground_material,0)            \n            scene.add(planeGeometry);\n            \n            function addPhyCube(x=0,y=0,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cube=new Physijs.BoxMesh(cubeGeometry,Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff*Math.random()}),1,0));\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n\n            function addNormalCube(x=0,y=8,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cubeMaterial=new THREE.MeshLambertMaterial({color:0xff0000});\n                var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n            \n            var maxy=0;\n            var NorNum=2;\n            var time=0\n            function refreshGrade(){\n                if(time==0 &amp;&amp; stats.domElement.textContent[0]==6){\n                    document.getElementById(\"webgl\").onmousedown=function(){\n                        addPhyCube(scene.children[NorNum].position.x,scene.children[NorNum].position.y,scene.children[NorNum].position.z);\n                        time=2;\n                    }\n                    time=1;\n                }else if(time==1){\n                    document.getElementById(\"grade\").innerHTML=\"start\";\n                }else if(time==2){\n                    var len=scene.children.length;\n                    var maxy=0;\n                    for(var i=NorNum+1;i&lt;len;i++){\n                        maxy=scene.children[i].position.y&gt;-2&amp;&amp;Math.abs(scene.children[i].position.z)&lt;15?maxy+1:maxy;\n                    }                \n                    camera.position.y=maxy*2+40;\n                    scene.children[NorNum].position.y=maxy*2+5;\n                    document.getElementById(\"grade\").innerHTML=\"score:\"+maxy;\n                }else{\n                    document.getElementById(\"grade\").innerHTML=\"waiting......\";\n                }\n            }   \n\n            var spotLight=new THREE.SpotLight(0xffffff);\n            spotLight.position.set(-40,60,0);\n            scene.add(spotLight);\n            spotLight.castShadow=true;\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            addNormalCube(0,8,-20);\n            renderer.render(scene,camera);\n\n            var step=0;\n\n            function rendererScene(){\n                stats.update();\n                refreshGrade();\n                last=scene.children.length-1;\n                step+=0.05;\n                scene.children[NorNum].position.z+=Math.sin(step);\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n                scene.simulate();\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果展示：\n\n<img class=\"alignnone size-medium wp-image-355\" src=\"/img/uploads/2017/07/IMG_3419-169x300.png\" alt=\"\" width=\"169\" height=\"300\" />\n","slug":"2017/article_34_three.js第二波，实现类似反应堆的游戏","published":1,"updated":"2021-01-27T04:46:28.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72i0012077055s668g1","content":"<p>一开始还就迷茫呢碰撞检测比较难，后来发现了physi.js。</p>\n<p>也是在看three.js看到的一个库，用了web worker实现各种复杂的计算。</p>\n<p>先<a href=\"http://test.ganjiacheng.cn/3d/test3d6.html\" target=\"_blank\" rel=\"external\">点击这里看效果</a>，手机电脑支持web worker(一般都支持)的都可以运行<a id=\"more\"></a></p>\n<p>初次加载看起来快，实际一个用于计算的ammo.js也有1.2M，只是他在后台加载。所以可能得等一会儿。</p>\n<p>这个本应该有个onload的，不过目前还没有发现这个函数，之后有机会在探索。</p>\n<p>思路便是：创造一个物理舞台，摄像头和渲染器和之前一样，加一个物理平面（带摩擦和弹性），加一个普通cube并来回运动，监听click事件，click时获取普通cube的位置并创造一个物理cube，物理cube便会往下掉，加一个计分。</p>\n<p>下面是具体代码，js文件的话在下面的路径可以找到</p>\n<p><a href=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js\" target=\"_blank\" rel=\"external\">http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js</a></p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;  \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d6&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n        #grade{\n            position: absolute;\n            left: 50%;\n            margin-left: -28px;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"grade\"&gt;0&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/physi.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var scene;\n        function init(){\n            var stats=initStats();\n\n            Physijs.scripts.worker='learning-threejs/libs/physijs_worker.js';\n\n            var scene=new Physijs.Scene();\n            scene.setGravity(new THREE.Vector3(0,-50,0));\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-30,40,40);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n            \n            var ground_material=Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff}),0.9,0.3);\n            var planeGeometry=new Physijs.BoxMesh(new THREE.BoxGeometry(10,1,10),ground_material,0)            \n            scene.add(planeGeometry);\n            \n            function addPhyCube(x=0,y=0,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cube=new Physijs.BoxMesh(cubeGeometry,Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff*Math.random()}),1,0));\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n\n            function addNormalCube(x=0,y=8,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cubeMaterial=new THREE.MeshLambertMaterial({color:0xff0000});\n                var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n            \n            var maxy=0;\n            var NorNum=2;\n            var time=0\n            function refreshGrade(){\n                if(time==0 &amp;&amp; stats.domElement.textContent[0]==6){\n                    document.getElementById(\"webgl\").onmousedown=function(){\n                        addPhyCube(scene.children[NorNum].position.x,scene.children[NorNum].position.y,scene.children[NorNum].position.z);\n                        time=2;\n                    }\n                    time=1;\n                }else if(time==1){\n                    document.getElementById(\"grade\").innerHTML=\"start\";\n                }else if(time==2){\n                    var len=scene.children.length;\n                    var maxy=0;\n                    for(var i=NorNum+1;i&lt;len;i++){\n                        maxy=scene.children[i].position.y&gt;-2&amp;&amp;Math.abs(scene.children[i].position.z)&lt;15?maxy+1:maxy;\n                    }                \n                    camera.position.y=maxy*2+40;\n                    scene.children[NorNum].position.y=maxy*2+5;\n                    document.getElementById(\"grade\").innerHTML=\"score:\"+maxy;\n                }else{\n                    document.getElementById(\"grade\").innerHTML=\"waiting......\";\n                }\n            }   \n\n            var spotLight=new THREE.SpotLight(0xffffff);\n            spotLight.position.set(-40,60,0);\n            scene.add(spotLight);\n            spotLight.castShadow=true;\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            addNormalCube(0,8,-20);\n            renderer.render(scene,camera);\n\n            var step=0;\n\n            function rendererScene(){\n                stats.update();\n                refreshGrade();\n                last=scene.children.length-1;\n                step+=0.05;\n                scene.children[NorNum].position.z+=Math.sin(step);\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n                scene.simulate();\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果展示：</p>\n<img class=\"alignnone size-medium wp-image-355\" src=\"/img/uploads/2017/07/IMG_3419-169x300.png\" alt=\"\" width=\"169\" height=\"300\">\n","excerpt":"<p>一开始还就迷茫呢碰撞检测比较难，后来发现了physi.js。</p>\n<p>也是在看three.js看到的一个库，用了web worker实现各种复杂的计算。</p>\n<p>先<a href=\"http://test.ganjiacheng.cn/3d/test3d6.html\">点击这里看效果</a>，手机电脑支持web worker(一般都支持)的都可以运行","more":"</p>\n<p>初次加载看起来快，实际一个用于计算的ammo.js也有1.2M，只是他在后台加载。所以可能得等一会儿。</p>\n<p>这个本应该有个onload的，不过目前还没有发现这个函数，之后有机会在探索。</p>\n<p>思路便是：创造一个物理舞台，摄像头和渲染器和之前一样，加一个物理平面（带摩擦和弹性），加一个普通cube并来回运动，监听click事件，click时获取普通cube的位置并创造一个物理cube，物理cube便会往下掉，加一个计分。</p>\n<p>下面是具体代码，js文件的话在下面的路径可以找到</p>\n<p><a href=\"http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js\">http://test.ganjiacheng.cn/3d/learning-threejs/libs/xxx.js</a></p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;  \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;test3d6&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n        #grade{\n            position: absolute;\n            left: 50%;\n            margin-left: -28px;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"grade\"&gt;0&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/physi.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var scene;\n        function init(){\n            var stats=initStats();\n\n            Physijs.scripts.worker='learning-threejs/libs/physijs_worker.js';\n\n            var scene=new Physijs.Scene();\n            scene.setGravity(new THREE.Vector3(0,-50,0));\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(-30,40,40);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n            \n            var ground_material=Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff}),0.9,0.3);\n            var planeGeometry=new Physijs.BoxMesh(new THREE.BoxGeometry(10,1,10),ground_material,0)            \n            scene.add(planeGeometry);\n            \n            function addPhyCube(x=0,y=0,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cube=new Physijs.BoxMesh(cubeGeometry,Physijs.createMaterial(new THREE.MeshLambertMaterial({color:0xffffff*Math.random()}),1,0));\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n\n            function addNormalCube(x=0,y=8,z=0){\n                var cubeGeometry=new THREE.BoxGeometry(10,2,10);\n                var cubeMaterial=new THREE.MeshLambertMaterial({color:0xff0000});\n                var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);\n                cube.position.set(x,y,z);\n                scene.add(cube);\n            }\n            \n            var maxy=0;\n            var NorNum=2;\n            var time=0\n            function refreshGrade(){\n                if(time==0 &amp;&amp; stats.domElement.textContent[0]==6){\n                    document.getElementById(\"webgl\").onmousedown=function(){\n                        addPhyCube(scene.children[NorNum].position.x,scene.children[NorNum].position.y,scene.children[NorNum].position.z);\n                        time=2;\n                    }\n                    time=1;\n                }else if(time==1){\n                    document.getElementById(\"grade\").innerHTML=\"start\";\n                }else if(time==2){\n                    var len=scene.children.length;\n                    var maxy=0;\n                    for(var i=NorNum+1;i&lt;len;i++){\n                        maxy=scene.children[i].position.y&gt;-2&amp;&amp;Math.abs(scene.children[i].position.z)&lt;15?maxy+1:maxy;\n                    }                \n                    camera.position.y=maxy*2+40;\n                    scene.children[NorNum].position.y=maxy*2+5;\n                    document.getElementById(\"grade\").innerHTML=\"score:\"+maxy;\n                }else{\n                    document.getElementById(\"grade\").innerHTML=\"waiting......\";\n                }\n            }   \n\n            var spotLight=new THREE.SpotLight(0xffffff);\n            spotLight.position.set(-40,60,0);\n            scene.add(spotLight);\n            spotLight.castShadow=true;\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            addNormalCube(0,8,-20);\n            renderer.render(scene,camera);\n\n            var step=0;\n\n            function rendererScene(){\n                stats.update();\n                refreshGrade();\n                last=scene.children.length-1;\n                step+=0.05;\n                scene.children[NorNum].position.z+=Math.sin(step);\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n                scene.simulate();\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果展示：</p>\n<img class=\"alignnone size-medium wp-image-355\" src=\"/img/uploads/2017/07/IMG_3419-169x300.png\" alt=\"\" width=\"169\" height=\"300\" />"},{"title":"初试three.js，一个小demo","catalog":true,"date":"2017-07-24T11:18:45.000Z","_content":"\n之前看过一点webgl编程指南，确实很难消化。所以过段时间再来朝花夕拾。\n\n这次直接使用webgl的一个库three.js，能更方便的实现功能。\n\n先可以<a href=\"https://ganjiacheng.cn/blogdemo/threejsdemo.html\">点击这里看最终效果</a>。<!--more-->\n\n基本的几步就是：定义舞台，定义透视摄像机，定义渲染器，定义灯光，画爱心，填充爱心，向舞台中心增加爱心，随机向外扩散。\n\n下面是html代码\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"https://threejs.org/build/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n            scene.fog=new THREE.Fog(0xffffff,15,300);\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(100,100,100);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n\n            var spotLight=new THREE.DirectionalLight(0xffffff);\n            spotLight.position.set(200,40,200);\n            scene.add(spotLight);\n\n            function drawShape(){\n                var shape=new THREE.Shape();\n                shape.moveTo(0, 0);\n                shape.quadraticCurveTo(-3.8, 2, 4, 9);\n                shape.quadraticCurveTo(11, 2, 8, 0);\n                shape.quadraticCurveTo(5, -1.2, 4, 2);\n                shape.quadraticCurveTo(3, -1.2, 0, 0);\n                return shape;\n            }\n\n            function createMesh(goem){\n                var meshMaterial=new THREE.MeshPhongMaterial({color:0xffffff * Math.random()});\n                meshMaterial.side=THREE.DoubleSide;\n                var mesh=THREE.SceneUtils.createMultiMaterialObject(goem,[meshMaterial]);\n                mesh.position.set(0,0,0);\n                return mesh;\n            }\n            \n            var vx=[1],vy=[1],vpy=[1],vpx=[1], vpz=[1];\n\n            function addinitShape(){\n                vx.push(Math.random()*0.02);\n                vy.push(Math.random()*0.02);\n                vpy.push(-0.15+Math.random()*0.3);\n                vpx.push(-0.15+Math.random()*0.3);\n                vpz.push(-0.15+Math.random()*0.3);\n                var shape=createMesh(new THREE.ShapeGeometry(drawShape()));\n                shape.rotation.z=Math.PI;\n                shape.rotation.y=Math.random()*Math.PI;\n                scene.add(shape);\n            }\n\n            for(var i=0;i&lt;100;i++){\n                addinitShape();\n            }\n            \n            setInterval(function(){\n                if(scene.children.length&lt;1000){\n                    addinitShape();\n                }else{\n                    scene.children.splice(1,1);\n                    vx.shift();\n                    vy.shift();\n                    vpx.shift();\n                    vpy.shift();\n                    vpz.shift();\n                }\n            },80)\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            \n            function rendererScene(){\n                for(let i=1;i&lt;scene.children.length;i++){\n                    scene.children[i].rotation.y += vy[i];\n                    scene.children[i].rotation.x += vx[i];\n                    scene.children[i].position.y -= vpy[i];\n                    scene.children[i].position.x += vpx[i];\n                    scene.children[i].position.z += vpz[i];\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n这还是three.js最基础的一部分，之后会继续加特技啦！\n","source":"_posts/2017/article_32_初试three.js，一个小demo.md","raw":"\n---\ntitle: 初试three.js，一个小demo\ncatalog: true\ndate: 2017-7-24 19:18:45\n---\n\n之前看过一点webgl编程指南，确实很难消化。所以过段时间再来朝花夕拾。\n\n这次直接使用webgl的一个库three.js，能更方便的实现功能。\n\n先可以<a href=\"https://ganjiacheng.cn/blogdemo/threejsdemo.html\">点击这里看最终效果</a>。<!--more-->\n\n基本的几步就是：定义舞台，定义透视摄像机，定义渲染器，定义灯光，画爱心，填充爱心，向舞台中心增加爱心，随机向外扩散。\n\n下面是html代码\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"https://threejs.org/build/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n            scene.fog=new THREE.Fog(0xffffff,15,300);\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(100,100,100);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n\n            var spotLight=new THREE.DirectionalLight(0xffffff);\n            spotLight.position.set(200,40,200);\n            scene.add(spotLight);\n\n            function drawShape(){\n                var shape=new THREE.Shape();\n                shape.moveTo(0, 0);\n                shape.quadraticCurveTo(-3.8, 2, 4, 9);\n                shape.quadraticCurveTo(11, 2, 8, 0);\n                shape.quadraticCurveTo(5, -1.2, 4, 2);\n                shape.quadraticCurveTo(3, -1.2, 0, 0);\n                return shape;\n            }\n\n            function createMesh(goem){\n                var meshMaterial=new THREE.MeshPhongMaterial({color:0xffffff * Math.random()});\n                meshMaterial.side=THREE.DoubleSide;\n                var mesh=THREE.SceneUtils.createMultiMaterialObject(goem,[meshMaterial]);\n                mesh.position.set(0,0,0);\n                return mesh;\n            }\n            \n            var vx=[1],vy=[1],vpy=[1],vpx=[1], vpz=[1];\n\n            function addinitShape(){\n                vx.push(Math.random()*0.02);\n                vy.push(Math.random()*0.02);\n                vpy.push(-0.15+Math.random()*0.3);\n                vpx.push(-0.15+Math.random()*0.3);\n                vpz.push(-0.15+Math.random()*0.3);\n                var shape=createMesh(new THREE.ShapeGeometry(drawShape()));\n                shape.rotation.z=Math.PI;\n                shape.rotation.y=Math.random()*Math.PI;\n                scene.add(shape);\n            }\n\n            for(var i=0;i&lt;100;i++){\n                addinitShape();\n            }\n            \n            setInterval(function(){\n                if(scene.children.length&lt;1000){\n                    addinitShape();\n                }else{\n                    scene.children.splice(1,1);\n                    vx.shift();\n                    vy.shift();\n                    vpx.shift();\n                    vpy.shift();\n                    vpz.shift();\n                }\n            },80)\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            \n            function rendererScene(){\n                for(let i=1;i&lt;scene.children.length;i++){\n                    scene.children[i].rotation.y += vy[i];\n                    scene.children[i].rotation.x += vx[i];\n                    scene.children[i].position.y -= vpy[i];\n                    scene.children[i].position.x += vpx[i];\n                    scene.children[i].position.z += vpz[i];\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n这还是three.js最基础的一部分，之后会继续加特技啦！\n","slug":"2017/article_32_初试three.js，一个小demo","published":1,"updated":"2021-01-27T04:46:28.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72j00130770wfjt0xmd","content":"<p>之前看过一点webgl编程指南，确实很难消化。所以过段时间再来朝花夕拾。</p>\n<p>这次直接使用webgl的一个库three.js，能更方便的实现功能。</p>\n<p>先可以<a href=\"https://ganjiacheng.cn/blogdemo/threejsdemo.html\">点击这里看最终效果</a>。<a id=\"more\"></a></p>\n<p>基本的几步就是：定义舞台，定义透视摄像机，定义渲染器，定义灯光，画爱心，填充爱心，向舞台中心增加爱心，随机向外扩散。</p>\n<p>下面是html代码</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"https://threejs.org/build/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n            scene.fog=new THREE.Fog(0xffffff,15,300);\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(100,100,100);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n\n            var spotLight=new THREE.DirectionalLight(0xffffff);\n            spotLight.position.set(200,40,200);\n            scene.add(spotLight);\n\n            function drawShape(){\n                var shape=new THREE.Shape();\n                shape.moveTo(0, 0);\n                shape.quadraticCurveTo(-3.8, 2, 4, 9);\n                shape.quadraticCurveTo(11, 2, 8, 0);\n                shape.quadraticCurveTo(5, -1.2, 4, 2);\n                shape.quadraticCurveTo(3, -1.2, 0, 0);\n                return shape;\n            }\n\n            function createMesh(goem){\n                var meshMaterial=new THREE.MeshPhongMaterial({color:0xffffff * Math.random()});\n                meshMaterial.side=THREE.DoubleSide;\n                var mesh=THREE.SceneUtils.createMultiMaterialObject(goem,[meshMaterial]);\n                mesh.position.set(0,0,0);\n                return mesh;\n            }\n            \n            var vx=[1],vy=[1],vpy=[1],vpx=[1], vpz=[1];\n\n            function addinitShape(){\n                vx.push(Math.random()*0.02);\n                vy.push(Math.random()*0.02);\n                vpy.push(-0.15+Math.random()*0.3);\n                vpx.push(-0.15+Math.random()*0.3);\n                vpz.push(-0.15+Math.random()*0.3);\n                var shape=createMesh(new THREE.ShapeGeometry(drawShape()));\n                shape.rotation.z=Math.PI;\n                shape.rotation.y=Math.random()*Math.PI;\n                scene.add(shape);\n            }\n\n            for(var i=0;i&lt;100;i++){\n                addinitShape();\n            }\n            \n            setInterval(function(){\n                if(scene.children.length&lt;1000){\n                    addinitShape();\n                }else{\n                    scene.children.splice(1,1);\n                    vx.shift();\n                    vy.shift();\n                    vpx.shift();\n                    vpy.shift();\n                    vpz.shift();\n                }\n            },80)\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            \n            function rendererScene(){\n                for(let i=1;i&lt;scene.children.length;i++){\n                    scene.children[i].rotation.y += vy[i];\n                    scene.children[i].rotation.x += vx[i];\n                    scene.children[i].position.y -= vpy[i];\n                    scene.children[i].position.x += vpx[i];\n                    scene.children[i].position.z += vpz[i];\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>这还是three.js最基础的一部分，之后会继续加特技啦！</p>\n","excerpt":"<p>之前看过一点webgl编程指南，确实很难消化。所以过段时间再来朝花夕拾。</p>\n<p>这次直接使用webgl的一个库three.js，能更方便的实现功能。</p>\n<p>先可以<a href=\"https://ganjiacheng.cn/blogdemo/threejsdemo.html\">点击这里看最终效果</a>。","more":"</p>\n<p>基本的几步就是：定义舞台，定义透视摄像机，定义渲染器，定义灯光，画爱心，填充爱心，向舞台中心增加爱心，随机向外扩散。</p>\n<p>下面是html代码</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"https://threejs.org/build/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var scene=new THREE.Scene();\n            scene.fog=new THREE.Fog(0xffffff,15,300);\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(100,100,100);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0xEEEEEE);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n\n            var spotLight=new THREE.DirectionalLight(0xffffff);\n            spotLight.position.set(200,40,200);\n            scene.add(spotLight);\n\n            function drawShape(){\n                var shape=new THREE.Shape();\n                shape.moveTo(0, 0);\n                shape.quadraticCurveTo(-3.8, 2, 4, 9);\n                shape.quadraticCurveTo(11, 2, 8, 0);\n                shape.quadraticCurveTo(5, -1.2, 4, 2);\n                shape.quadraticCurveTo(3, -1.2, 0, 0);\n                return shape;\n            }\n\n            function createMesh(goem){\n                var meshMaterial=new THREE.MeshPhongMaterial({color:0xffffff * Math.random()});\n                meshMaterial.side=THREE.DoubleSide;\n                var mesh=THREE.SceneUtils.createMultiMaterialObject(goem,[meshMaterial]);\n                mesh.position.set(0,0,0);\n                return mesh;\n            }\n            \n            var vx=[1],vy=[1],vpy=[1],vpx=[1], vpz=[1];\n\n            function addinitShape(){\n                vx.push(Math.random()*0.02);\n                vy.push(Math.random()*0.02);\n                vpy.push(-0.15+Math.random()*0.3);\n                vpx.push(-0.15+Math.random()*0.3);\n                vpz.push(-0.15+Math.random()*0.3);\n                var shape=createMesh(new THREE.ShapeGeometry(drawShape()));\n                shape.rotation.z=Math.PI;\n                shape.rotation.y=Math.random()*Math.PI;\n                scene.add(shape);\n            }\n\n            for(var i=0;i&lt;100;i++){\n                addinitShape();\n            }\n            \n            setInterval(function(){\n                if(scene.children.length&lt;1000){\n                    addinitShape();\n                }else{\n                    scene.children.splice(1,1);\n                    vx.shift();\n                    vy.shift();\n                    vpx.shift();\n                    vpy.shift();\n                    vpz.shift();\n                }\n            },80)\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            \n            function rendererScene(){\n                for(let i=1;i&lt;scene.children.length;i++){\n                    scene.children[i].rotation.y += vy[i];\n                    scene.children[i].rotation.x += vx[i];\n                    scene.children[i].position.y -= vpy[i];\n                    scene.children[i].position.x += vpx[i];\n                    scene.children[i].position.z += vpz[i];\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>这还是three.js最基础的一部分，之后会继续加特技啦！</p>"},{"title":"hack个验证码验证多字符连接识别与切割识别的优劣","catalog":true,"date":"2017-07-31T13:26:27.000Z","_content":"\n有个多个字符识别的需求，想是要切割还是字符连接整个一起识别，所以就找了一个验证码来做对比尝试。这个验证码很简单，<a href=\"http://jxgl.hdu.edu.cn/CheckCode.aspx\">验证码链接</a>，<!--more-->就中规中矩<img class=\"alignnone size-full wp-image-379\" src=\"/img/uploads/2017/07/00126-1.png\" alt=\"\" width=\"60\" height=\"22\" />，\n\n简单贴一下验证码爬下来的代码\n<pre>import requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom threading import Thread\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\nclass Mythread(Thread):\n    def __init__(self,num):\n        Thread.__init__(self)\n        self.num=num\n    def run(self):\n        while True:  \n            req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n            im=Image.open(BytesIO(req.content))\n            im.save(\"croptest/\"+str(self.num)+\".png\")\nthreads=[]\nfor j in range(10):\n    for i in range(10):\n        t=Mythread(i+10*j)\n        t.start()\n        print(i+10*j)</pre>\n之后做了去重，标记，测试正式开始\n\n首先用不切割整体识别的方法，像素转换成黑白二值整个作为输入，输出为5个数，每个数10类的拼接，总共50类，每十个数中的1值为图中所对应的数。\n\n先用tensorflow构建了cnn，对于cnn模型，中间并没有做很多改动，只进行了输入输出的调整。写了个输入函数把图像转换成输入数据，写了个训练函数对模型进行训练，由于样本较少，也只进行了不多的训练次数。又写了个测试函数用来爬取新图片对模型进行测试\n<pre>import tensorflow as tf\nimport os\nimport numpy as np\nimport cv2\n\nnumber = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nchar_Len=5*len(number)\ndirname=os.listdir('dealyzm/')\ndirname.remove('Thumbs.db')\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 1320])\nx_image = tf.reshape(x, [-1, 22, 60, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, char_Len])\nb_fc2 = bias_variable([char_Len])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, char_Len])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*char_Len\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"dealyzm/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        for i in range(5):\n            tmpname[number.index(filename[i])+len(number)*i]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(400):\n        batch_xs,batch_ys=getRanPic(20)\n        tmp,loss=sess.run([train_step,cross_entropy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%20==0:\n            batch_xs,batch_ys=getRanPic(20)\n            correct_prediction=tf.equal(tf.argmax(tf.reshape(y_conv, [-1, 5, 10]),2),tf.argmax(tf.reshape(y_, [-1, 5, 10]),2))\n            accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\n            acc_test=sess.run(accuracy,feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc_test))\n    saver.save(sess, 'model/testyzm-cnn.model', global_step=_)\ndef test():\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=np.array(Image.open(BytesIO(req.content)))\n    ret,im_hb=cv2.threshold(im,127,255,cv2.THRESH_BINARY)\n    img=[im_hb.reshape(-1)/255]\n    name=[[0]*50]\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testyzm-cnn.model-' + str(399)\n        saver.restore(sess, path)\n        predict = tf.argmax(tf.reshape(y_conv, [-1, 5, 10]), 2)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        res=''.join(map(str,pre[0]))\n        print(res)\n    cv2.imshow(\"image\",im)\n    cv2.waitKey(0)\ntrain=0\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n测试结果便是整个对于自身的拟合效果还算可以，能达到90%以上，而对于test时的外来数据的表现不是很好，只有30%左右。\n\n第二个模型，首先对样本进行了分割，把每张图的5个数分开来。\n<pre>from PIL import Image\nimport os\nd=os.listdir(\"dealyzm/\")\nk=0\nfor i in d:\n    file=Image.open(\"dealyzm/\"+i)\n    for j in range(5):\n        crop=file.crop((9*j+5,4,9*j+14,18))\n        crop.save(\"crop/\"+i[j]+str(k)+\".png\")\n    k+=1</pre>\n然后继续构建模型，只是调整了输入输出基本原理和上面一样\n<pre>import tensorflow as tf\nimport numpy as np\nimport os\nimport cv2\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 126])\nx_image = tf.reshape(x, [-1, 9, 14, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndirname=os.listdir(\"crop/\")\ndirname.remove(\"Thumbs.db\")\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*10\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"crop/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        tmpname[int(filename[0])]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\n\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(1000):\n        batch_xs,batch_ys=getRanPic(50)\n        train_step.run(feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%50==0:\n            batch_xs,batch_ys=getRanPic(50)\n            loss,acc=sess.run([cross_entropy,accuracy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc))\n    saver.save(sess, 'model/next-crop-yzm-cnn.model', global_step=_)\n\ndef test(file):\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=Image.open(BytesIO(req.content))\n    img=[]\n    name=[]\n    for i in range(5):\n        crop=np.array(im.crop((9*i+5,4,9*i+14,18)))\n        ret,im_hb=cv2.threshold(crop,127,255,cv2.THRESH_BINARY)\n        img.append(im_hb.reshape(-1)/255)\n        name.append([0]*10)\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testcropyzm-cnn.model-' + str(999)\n        saver.restore(sess, path)\n        predict = tf.arg_max(y_conv, 1)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n    im.save(\"croptest/\"+\"\".join(map(str,pre))+\".png\")\n\ntrain=1\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n结果：第二次测试的正确率能达到99%以上，对于测试数据，也能有较高的正确率（测试了100个，没错）。\n\n对比：\n\n元数据一样是小样本，两种方法只做了输入输出的改变，但效果对比差别很明显。后者好很多。\n\n猜测是多元连接的参数比分割后数字的参数多得多，所以训练所需的样本也会成倍增加，其中可能会有一定的关系。\n\n猜测由于多个连接后反向传播的时候会对所有参数进行调整，所以很难训练起来。\n\n对于小样本的模型训练还可以继续探究。可以尝试学习到一定特征然后用生成器创造大样本从而训练多个输出模型。\n","source":"_posts/2017/article_37_hack个验证码验证多字符连接识别与切割识别的优劣.md","raw":"\n---\ntitle: hack个验证码验证多字符连接识别与切割识别的优劣\ncatalog: true\ndate: 2017-7-31 21:26:27\n---\n\n有个多个字符识别的需求，想是要切割还是字符连接整个一起识别，所以就找了一个验证码来做对比尝试。这个验证码很简单，<a href=\"http://jxgl.hdu.edu.cn/CheckCode.aspx\">验证码链接</a>，<!--more-->就中规中矩<img class=\"alignnone size-full wp-image-379\" src=\"/img/uploads/2017/07/00126-1.png\" alt=\"\" width=\"60\" height=\"22\" />，\n\n简单贴一下验证码爬下来的代码\n<pre>import requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom threading import Thread\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\nclass Mythread(Thread):\n    def __init__(self,num):\n        Thread.__init__(self)\n        self.num=num\n    def run(self):\n        while True:  \n            req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n            im=Image.open(BytesIO(req.content))\n            im.save(\"croptest/\"+str(self.num)+\".png\")\nthreads=[]\nfor j in range(10):\n    for i in range(10):\n        t=Mythread(i+10*j)\n        t.start()\n        print(i+10*j)</pre>\n之后做了去重，标记，测试正式开始\n\n首先用不切割整体识别的方法，像素转换成黑白二值整个作为输入，输出为5个数，每个数10类的拼接，总共50类，每十个数中的1值为图中所对应的数。\n\n先用tensorflow构建了cnn，对于cnn模型，中间并没有做很多改动，只进行了输入输出的调整。写了个输入函数把图像转换成输入数据，写了个训练函数对模型进行训练，由于样本较少，也只进行了不多的训练次数。又写了个测试函数用来爬取新图片对模型进行测试\n<pre>import tensorflow as tf\nimport os\nimport numpy as np\nimport cv2\n\nnumber = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nchar_Len=5*len(number)\ndirname=os.listdir('dealyzm/')\ndirname.remove('Thumbs.db')\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 1320])\nx_image = tf.reshape(x, [-1, 22, 60, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, char_Len])\nb_fc2 = bias_variable([char_Len])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, char_Len])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*char_Len\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"dealyzm/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        for i in range(5):\n            tmpname[number.index(filename[i])+len(number)*i]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(400):\n        batch_xs,batch_ys=getRanPic(20)\n        tmp,loss=sess.run([train_step,cross_entropy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%20==0:\n            batch_xs,batch_ys=getRanPic(20)\n            correct_prediction=tf.equal(tf.argmax(tf.reshape(y_conv, [-1, 5, 10]),2),tf.argmax(tf.reshape(y_, [-1, 5, 10]),2))\n            accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\n            acc_test=sess.run(accuracy,feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc_test))\n    saver.save(sess, 'model/testyzm-cnn.model', global_step=_)\ndef test():\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=np.array(Image.open(BytesIO(req.content)))\n    ret,im_hb=cv2.threshold(im,127,255,cv2.THRESH_BINARY)\n    img=[im_hb.reshape(-1)/255]\n    name=[[0]*50]\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testyzm-cnn.model-' + str(399)\n        saver.restore(sess, path)\n        predict = tf.argmax(tf.reshape(y_conv, [-1, 5, 10]), 2)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        res=''.join(map(str,pre[0]))\n        print(res)\n    cv2.imshow(\"image\",im)\n    cv2.waitKey(0)\ntrain=0\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n测试结果便是整个对于自身的拟合效果还算可以，能达到90%以上，而对于test时的外来数据的表现不是很好，只有30%左右。\n\n第二个模型，首先对样本进行了分割，把每张图的5个数分开来。\n<pre>from PIL import Image\nimport os\nd=os.listdir(\"dealyzm/\")\nk=0\nfor i in d:\n    file=Image.open(\"dealyzm/\"+i)\n    for j in range(5):\n        crop=file.crop((9*j+5,4,9*j+14,18))\n        crop.save(\"crop/\"+i[j]+str(k)+\".png\")\n    k+=1</pre>\n然后继续构建模型，只是调整了输入输出基本原理和上面一样\n<pre>import tensorflow as tf\nimport numpy as np\nimport os\nimport cv2\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 126])\nx_image = tf.reshape(x, [-1, 9, 14, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndirname=os.listdir(\"crop/\")\ndirname.remove(\"Thumbs.db\")\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*10\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"crop/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        tmpname[int(filename[0])]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\n\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(1000):\n        batch_xs,batch_ys=getRanPic(50)\n        train_step.run(feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%50==0:\n            batch_xs,batch_ys=getRanPic(50)\n            loss,acc=sess.run([cross_entropy,accuracy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc))\n    saver.save(sess, 'model/next-crop-yzm-cnn.model', global_step=_)\n\ndef test(file):\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=Image.open(BytesIO(req.content))\n    img=[]\n    name=[]\n    for i in range(5):\n        crop=np.array(im.crop((9*i+5,4,9*i+14,18)))\n        ret,im_hb=cv2.threshold(crop,127,255,cv2.THRESH_BINARY)\n        img.append(im_hb.reshape(-1)/255)\n        name.append([0]*10)\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testcropyzm-cnn.model-' + str(999)\n        saver.restore(sess, path)\n        predict = tf.arg_max(y_conv, 1)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n    im.save(\"croptest/\"+\"\".join(map(str,pre))+\".png\")\n\ntrain=1\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n结果：第二次测试的正确率能达到99%以上，对于测试数据，也能有较高的正确率（测试了100个，没错）。\n\n对比：\n\n元数据一样是小样本，两种方法只做了输入输出的改变，但效果对比差别很明显。后者好很多。\n\n猜测是多元连接的参数比分割后数字的参数多得多，所以训练所需的样本也会成倍增加，其中可能会有一定的关系。\n\n猜测由于多个连接后反向传播的时候会对所有参数进行调整，所以很难训练起来。\n\n对于小样本的模型训练还可以继续探究。可以尝试学习到一定特征然后用生成器创造大样本从而训练多个输出模型。\n","slug":"2017/article_37_hack个验证码验证多字符连接识别与切割识别的优劣","published":1,"updated":"2021-01-27T04:46:28.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72j00140770dpnu7zx0","content":"<p>有个多个字符识别的需求，想是要切割还是字符连接整个一起识别，所以就找了一个验证码来做对比尝试。这个验证码很简单，<a href=\"http://jxgl.hdu.edu.cn/CheckCode.aspx\" target=\"_blank\" rel=\"external\">验证码链接</a>，<a id=\"more\"></a>就中规中矩<img class=\"alignnone size-full wp-image-379\" src=\"/img/uploads/2017/07/00126-1.png\" alt=\"\" width=\"60\" height=\"22\">，</p>\n<p>简单贴一下验证码爬下来的代码</p>\n<pre>import requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom threading import Thread\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\nclass Mythread(Thread):\n    def __init__(self,num):\n        Thread.__init__(self)\n        self.num=num\n    def run(self):\n        while True:  \n            req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n            im=Image.open(BytesIO(req.content))\n            im.save(\"croptest/\"+str(self.num)+\".png\")\nthreads=[]\nfor j in range(10):\n    for i in range(10):\n        t=Mythread(i+10*j)\n        t.start()\n        print(i+10*j)</pre>\n<p>之后做了去重，标记，测试正式开始</p>\n<p>首先用不切割整体识别的方法，像素转换成黑白二值整个作为输入，输出为5个数，每个数10类的拼接，总共50类，每十个数中的1值为图中所对应的数。</p>\n<p>先用tensorflow构建了cnn，对于cnn模型，中间并没有做很多改动，只进行了输入输出的调整。写了个输入函数把图像转换成输入数据，写了个训练函数对模型进行训练，由于样本较少，也只进行了不多的训练次数。又写了个测试函数用来爬取新图片对模型进行测试</p>\n<pre>import tensorflow as tf\nimport os\nimport numpy as np\nimport cv2\n\nnumber = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nchar_Len=5*len(number)\ndirname=os.listdir('dealyzm/')\ndirname.remove('Thumbs.db')\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 1320])\nx_image = tf.reshape(x, [-1, 22, 60, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, char_Len])\nb_fc2 = bias_variable([char_Len])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, char_Len])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*char_Len\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"dealyzm/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        for i in range(5):\n            tmpname[number.index(filename[i])+len(number)*i]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(400):\n        batch_xs,batch_ys=getRanPic(20)\n        tmp,loss=sess.run([train_step,cross_entropy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%20==0:\n            batch_xs,batch_ys=getRanPic(20)\n            correct_prediction=tf.equal(tf.argmax(tf.reshape(y_conv, [-1, 5, 10]),2),tf.argmax(tf.reshape(y_, [-1, 5, 10]),2))\n            accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\n            acc_test=sess.run(accuracy,feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc_test))\n    saver.save(sess, 'model/testyzm-cnn.model', global_step=_)\ndef test():\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=np.array(Image.open(BytesIO(req.content)))\n    ret,im_hb=cv2.threshold(im,127,255,cv2.THRESH_BINARY)\n    img=[im_hb.reshape(-1)/255]\n    name=[[0]*50]\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testyzm-cnn.model-' + str(399)\n        saver.restore(sess, path)\n        predict = tf.argmax(tf.reshape(y_conv, [-1, 5, 10]), 2)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        res=''.join(map(str,pre[0]))\n        print(res)\n    cv2.imshow(\"image\",im)\n    cv2.waitKey(0)\ntrain=0\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n<p>测试结果便是整个对于自身的拟合效果还算可以，能达到90%以上，而对于test时的外来数据的表现不是很好，只有30%左右。</p>\n<p>第二个模型，首先对样本进行了分割，把每张图的5个数分开来。</p>\n<pre>from PIL import Image\nimport os\nd=os.listdir(\"dealyzm/\")\nk=0\nfor i in d:\n    file=Image.open(\"dealyzm/\"+i)\n    for j in range(5):\n        crop=file.crop((9*j+5,4,9*j+14,18))\n        crop.save(\"crop/\"+i[j]+str(k)+\".png\")\n    k+=1</pre>\n<p>然后继续构建模型，只是调整了输入输出基本原理和上面一样</p>\n<pre>import tensorflow as tf\nimport numpy as np\nimport os\nimport cv2\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 126])\nx_image = tf.reshape(x, [-1, 9, 14, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndirname=os.listdir(\"crop/\")\ndirname.remove(\"Thumbs.db\")\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*10\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"crop/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        tmpname[int(filename[0])]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\n\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(1000):\n        batch_xs,batch_ys=getRanPic(50)\n        train_step.run(feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%50==0:\n            batch_xs,batch_ys=getRanPic(50)\n            loss,acc=sess.run([cross_entropy,accuracy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc))\n    saver.save(sess, 'model/next-crop-yzm-cnn.model', global_step=_)\n\ndef test(file):\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=Image.open(BytesIO(req.content))\n    img=[]\n    name=[]\n    for i in range(5):\n        crop=np.array(im.crop((9*i+5,4,9*i+14,18)))\n        ret,im_hb=cv2.threshold(crop,127,255,cv2.THRESH_BINARY)\n        img.append(im_hb.reshape(-1)/255)\n        name.append([0]*10)\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testcropyzm-cnn.model-' + str(999)\n        saver.restore(sess, path)\n        predict = tf.arg_max(y_conv, 1)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n    im.save(\"croptest/\"+\"\".join(map(str,pre))+\".png\")\n\ntrain=1\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n<p>结果：第二次测试的正确率能达到99%以上，对于测试数据，也能有较高的正确率（测试了100个，没错）。</p>\n<p>对比：</p>\n<p>元数据一样是小样本，两种方法只做了输入输出的改变，但效果对比差别很明显。后者好很多。</p>\n<p>猜测是多元连接的参数比分割后数字的参数多得多，所以训练所需的样本也会成倍增加，其中可能会有一定的关系。</p>\n<p>猜测由于多个连接后反向传播的时候会对所有参数进行调整，所以很难训练起来。</p>\n<p>对于小样本的模型训练还可以继续探究。可以尝试学习到一定特征然后用生成器创造大样本从而训练多个输出模型。</p>\n","excerpt":"<p>有个多个字符识别的需求，想是要切割还是字符连接整个一起识别，所以就找了一个验证码来做对比尝试。这个验证码很简单，<a href=\"http://jxgl.hdu.edu.cn/CheckCode.aspx\">验证码链接</a>，","more":"就中规中矩<img class=\"alignnone size-full wp-image-379\" src=\"/img/uploads/2017/07/00126-1.png\" alt=\"\" width=\"60\" height=\"22\" />，</p>\n<p>简单贴一下验证码爬下来的代码</p>\n<pre>import requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom threading import Thread\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\nclass Mythread(Thread):\n    def __init__(self,num):\n        Thread.__init__(self)\n        self.num=num\n    def run(self):\n        while True:  \n            req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n            im=Image.open(BytesIO(req.content))\n            im.save(\"croptest/\"+str(self.num)+\".png\")\nthreads=[]\nfor j in range(10):\n    for i in range(10):\n        t=Mythread(i+10*j)\n        t.start()\n        print(i+10*j)</pre>\n<p>之后做了去重，标记，测试正式开始</p>\n<p>首先用不切割整体识别的方法，像素转换成黑白二值整个作为输入，输出为5个数，每个数10类的拼接，总共50类，每十个数中的1值为图中所对应的数。</p>\n<p>先用tensorflow构建了cnn，对于cnn模型，中间并没有做很多改动，只进行了输入输出的调整。写了个输入函数把图像转换成输入数据，写了个训练函数对模型进行训练，由于样本较少，也只进行了不多的训练次数。又写了个测试函数用来爬取新图片对模型进行测试</p>\n<pre>import tensorflow as tf\nimport os\nimport numpy as np\nimport cv2\n\nnumber = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nchar_Len=5*len(number)\ndirname=os.listdir('dealyzm/')\ndirname.remove('Thumbs.db')\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 1320])\nx_image = tf.reshape(x, [-1, 22, 60, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, char_Len])\nb_fc2 = bias_variable([char_Len])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, char_Len])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*char_Len\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"dealyzm/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        for i in range(5):\n            tmpname[number.index(filename[i])+len(number)*i]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(400):\n        batch_xs,batch_ys=getRanPic(20)\n        tmp,loss=sess.run([train_step,cross_entropy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%20==0:\n            batch_xs,batch_ys=getRanPic(20)\n            correct_prediction=tf.equal(tf.argmax(tf.reshape(y_conv, [-1, 5, 10]),2),tf.argmax(tf.reshape(y_, [-1, 5, 10]),2))\n            accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))\n            acc_test=sess.run(accuracy,feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc_test))\n    saver.save(sess, 'model/testyzm-cnn.model', global_step=_)\ndef test():\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=np.array(Image.open(BytesIO(req.content)))\n    ret,im_hb=cv2.threshold(im,127,255,cv2.THRESH_BINARY)\n    img=[im_hb.reshape(-1)/255]\n    name=[[0]*50]\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testyzm-cnn.model-' + str(399)\n        saver.restore(sess, path)\n        predict = tf.argmax(tf.reshape(y_conv, [-1, 5, 10]), 2)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        res=''.join(map(str,pre[0]))\n        print(res)\n    cv2.imshow(\"image\",im)\n    cv2.waitKey(0)\ntrain=0\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n<p>测试结果便是整个对于自身的拟合效果还算可以，能达到90%以上，而对于test时的外来数据的表现不是很好，只有30%左右。</p>\n<p>第二个模型，首先对样本进行了分割，把每张图的5个数分开来。</p>\n<pre>from PIL import Image\nimport os\nd=os.listdir(\"dealyzm/\")\nk=0\nfor i in d:\n    file=Image.open(\"dealyzm/\"+i)\n    for j in range(5):\n        crop=file.crop((9*j+5,4,9*j+14,18))\n        crop.save(\"crop/\"+i[j]+str(k)+\".png\")\n    k+=1</pre>\n<p>然后继续构建模型，只是调整了输入输出基本原理和上面一样</p>\n<pre>import tensorflow as tf\nimport numpy as np\nimport os\nimport cv2\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\ndef weight_varible(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n# paras\nW_conv1 = weight_varible([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\n# conv layer-1\nx = tf.placeholder(tf.float32, [None, 126])\nx_image = tf.reshape(x, [-1, 9, 14, 1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n# conv layer-2\nW_conv2 = weight_varible([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n# full connection\nshape = h_pool2.get_shape().as_list()\ndim = 1\nfor d in shape[1:]:\n    dim *= d\nW_fc1 = weight_varible([dim, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, dim])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n# dropout\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n# output layer: softmax\nW_fc2 = weight_varible([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# model training\ncross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv+ 1e-10))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\ncorrect_prediction = tf.equal(tf.arg_max(y_conv, 1), tf.arg_max(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess=tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\ndirname=os.listdir(\"crop/\")\ndirname.remove(\"Thumbs.db\")\n\ndef getRanPic(num):\n    image=[]\n    name=[]\n    for i in range(num):\n        tmpname=[0]*10\n        filename=dirname[int(np.random.random()*len(dirname))]\n        im=cv2.imread(\"crop/\"+filename,0)/255.0\n        im=im.reshape(-1)\n        tmpname[int(filename[0])]=1\n        image.append(im)\n        name.append(tmpname)\n    return image,name\n\ndef trainFirst():\n    saver = tf.train.Saver()\n    for _ in range(1000):\n        batch_xs,batch_ys=getRanPic(50)\n        train_step.run(feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n        if _%50==0:\n            batch_xs,batch_ys=getRanPic(50)\n            loss,acc=sess.run([cross_entropy,accuracy],feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n            print(\"loss:\"+str(loss)+\" acc_train:\"+str(acc))\n    saver.save(sess, 'model/next-crop-yzm-cnn.model', global_step=_)\n\ndef test(file):\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'}\n    req = requests.get(\"http://jxgl.hdu.edu.cn/CheckCode.aspx\",headers=headers)\n    im=Image.open(BytesIO(req.content))\n    img=[]\n    name=[]\n    for i in range(5):\n        crop=np.array(im.crop((9*i+5,4,9*i+14,18)))\n        ret,im_hb=cv2.threshold(crop,127,255,cv2.THRESH_BINARY)\n        img.append(im_hb.reshape(-1)/255)\n        name.append([0]*10)\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        batch_xs,batch_ys=img,name\n        path = 'model/testcropyzm-cnn.model-' + str(999)\n        saver.restore(sess, path)\n        predict = tf.arg_max(y_conv, 1)\n        pre = sess.run(predict, feed_dict={x:batch_xs,y_:batch_ys,keep_prob: 1.0})\n    im.save(\"croptest/\"+\"\".join(map(str,pre))+\".png\")\n\ntrain=1\nif train==0:\n    trainFirst()\nelse:\n    test()</pre>\n<p>结果：第二次测试的正确率能达到99%以上，对于测试数据，也能有较高的正确率（测试了100个，没错）。</p>\n<p>对比：</p>\n<p>元数据一样是小样本，两种方法只做了输入输出的改变，但效果对比差别很明显。后者好很多。</p>\n<p>猜测是多元连接的参数比分割后数字的参数多得多，所以训练所需的样本也会成倍增加，其中可能会有一定的关系。</p>\n<p>猜测由于多个连接后反向传播的时候会对所有参数进行调整，所以很难训练起来。</p>\n<p>对于小样本的模型训练还可以继续探究。可以尝试学习到一定特征然后用生成器创造大样本从而训练多个输出模型。</p>"},{"title":"python爬虫初入门实战 [aim->拉勾网]","catalog":true,"date":"2017-07-31T12:12:28.000Z","_content":"\n作为pythoner爬虫还是必备技能之一，说上手就上手。\n\n入门选了个拉勾网（莫名躺枪，下手轻点）。<!--more-->\n\n这次具体来讲一下爬网页走过的流程。\n\n先在chrome打开拉勾网主页，打开开发者工具network项，点每个资源就知道他的request和reponse。主页他是直接返回的内容，所以直接去爬主页，三行搞定。\n<pre>import requests\nreq=requests.get(\"https://www.lagou.com/\")\nprint(req.text)</pre>\n然后继续看具体的内容页，这里以杭州为例，网址是https://www.lagou.com/jobs/list_?px=new&amp;city=%E6%9D%AD%E5%B7%9E#filterBox\n\n以同样的方式爬内容页，会发现内容页只有外标签而没有内容。\n\n看console便会发现有ajax的痕迹，仔细看network便会发现几个json文件，通过看他的request和reponse便会知道数据是在某个json的链接里拿到的。链接为https://www.lagou.com/jobs/positionAjax.json?px=new&amp;city=%E6%9D%AD%E5%B7%9E&amp;needAddtionalResult=false\n\n直接爬这个链接，会发现返回错误信息，应该还有点防护措施。\n\n所以我们把自己伪装的和浏览器更像。构造一个request头\n<pre>import requests\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.post(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\nprint(req.content)</pre>\n然后能爬取到一页的数据，在进一步直接爬30页，就会发现有每分钟的每个IP5次的次数限制。ip限制就用代理呗，只要在requests里面加一个proxies的参数即可，不过好的代理确实难找，<a href=\"http://www.gatherproxy.com/zh/\">这里的还算可以</a>。\n\n代理要加进去的话，得先爬代理网站，然后才能时时获取最新的代理并处理。\n<pre>req=requests.post(url,proxies={\"https\":\"000.000.000.000:00\",\"http\":\"000.000.000.000:00\"},headers=headers,params={'city':'杭州','pn':str(page)})</pre>\n因为上面那个代理网站要翻墙，这里用另一个代理网站做测试。爬到网页后用beautifulSoup4来处理html代码。\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef getProxyList():\n    res=[]\n    header={\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response=requests.get(\"http://www.xicidaili.com/nn/\",headers=header)\n    soup=BeautifulSoup(response.text,'html.parser')\n    li=soup.find_all('tr',{'class':'odd'})\n    for item in li:\n        res.append(item.contents[3].string+\":\"+item.contents[5].string)\n        itemNext=item.next_sibling.next_sibling\n        res.append(itemNext.contents[3].string+\":\"+itemNext.contents[5].string)\n    return res</pre>\n爬到拉勾网的内容后得处理丫。因为是json格式，直接用json处理，下面是处理的代码：\n<pre>import requests\nimport json\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.get(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\ndata=json.loads(req.text)\nfor i in data['content']['positionResult']['result']:\n    print(i['positionName'],i['salary'],i['workYear'],i['jobNature'],i['companyFullName'],i['companySize'],i['district'],i['createTime'])</pre>\n总结：一般的套路也就是看chrome控制台，把request和reponse弄清楚，有时候还得看他的js代码，有时候html里也会隐藏一些信息，反正无所不用。\n\n爬网页与反爬虫总是矛和盾，作为一个写网页又爬网页的，应该能更加清楚一些套路，而在写网页的时候阻挡一些简单的爬虫入侵。\n","source":"_posts/2017/article_36_python爬虫初入门实战 [aim->拉勾网].md","raw":"\n---\ntitle: python爬虫初入门实战 [aim->拉勾网]\ncatalog: true\ndate: 2017-7-31 20:12:28\n---\n\n作为pythoner爬虫还是必备技能之一，说上手就上手。\n\n入门选了个拉勾网（莫名躺枪，下手轻点）。<!--more-->\n\n这次具体来讲一下爬网页走过的流程。\n\n先在chrome打开拉勾网主页，打开开发者工具network项，点每个资源就知道他的request和reponse。主页他是直接返回的内容，所以直接去爬主页，三行搞定。\n<pre>import requests\nreq=requests.get(\"https://www.lagou.com/\")\nprint(req.text)</pre>\n然后继续看具体的内容页，这里以杭州为例，网址是https://www.lagou.com/jobs/list_?px=new&amp;city=%E6%9D%AD%E5%B7%9E#filterBox\n\n以同样的方式爬内容页，会发现内容页只有外标签而没有内容。\n\n看console便会发现有ajax的痕迹，仔细看network便会发现几个json文件，通过看他的request和reponse便会知道数据是在某个json的链接里拿到的。链接为https://www.lagou.com/jobs/positionAjax.json?px=new&amp;city=%E6%9D%AD%E5%B7%9E&amp;needAddtionalResult=false\n\n直接爬这个链接，会发现返回错误信息，应该还有点防护措施。\n\n所以我们把自己伪装的和浏览器更像。构造一个request头\n<pre>import requests\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.post(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\nprint(req.content)</pre>\n然后能爬取到一页的数据，在进一步直接爬30页，就会发现有每分钟的每个IP5次的次数限制。ip限制就用代理呗，只要在requests里面加一个proxies的参数即可，不过好的代理确实难找，<a href=\"http://www.gatherproxy.com/zh/\">这里的还算可以</a>。\n\n代理要加进去的话，得先爬代理网站，然后才能时时获取最新的代理并处理。\n<pre>req=requests.post(url,proxies={\"https\":\"000.000.000.000:00\",\"http\":\"000.000.000.000:00\"},headers=headers,params={'city':'杭州','pn':str(page)})</pre>\n因为上面那个代理网站要翻墙，这里用另一个代理网站做测试。爬到网页后用beautifulSoup4来处理html代码。\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef getProxyList():\n    res=[]\n    header={\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response=requests.get(\"http://www.xicidaili.com/nn/\",headers=header)\n    soup=BeautifulSoup(response.text,'html.parser')\n    li=soup.find_all('tr',{'class':'odd'})\n    for item in li:\n        res.append(item.contents[3].string+\":\"+item.contents[5].string)\n        itemNext=item.next_sibling.next_sibling\n        res.append(itemNext.contents[3].string+\":\"+itemNext.contents[5].string)\n    return res</pre>\n爬到拉勾网的内容后得处理丫。因为是json格式，直接用json处理，下面是处理的代码：\n<pre>import requests\nimport json\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.get(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\ndata=json.loads(req.text)\nfor i in data['content']['positionResult']['result']:\n    print(i['positionName'],i['salary'],i['workYear'],i['jobNature'],i['companyFullName'],i['companySize'],i['district'],i['createTime'])</pre>\n总结：一般的套路也就是看chrome控制台，把request和reponse弄清楚，有时候还得看他的js代码，有时候html里也会隐藏一些信息，反正无所不用。\n\n爬网页与反爬虫总是矛和盾，作为一个写网页又爬网页的，应该能更加清楚一些套路，而在写网页的时候阻挡一些简单的爬虫入侵。\n","slug":"2017/article_36_python爬虫初入门实战 [aim->拉勾网]","published":1,"updated":"2021-01-27T04:46:28.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72l00150770kbgdjeuz","content":"<p>作为pythoner爬虫还是必备技能之一，说上手就上手。</p>\n<p>入门选了个拉勾网（莫名躺枪，下手轻点）。<a id=\"more\"></a></p>\n<p>这次具体来讲一下爬网页走过的流程。</p>\n<p>先在chrome打开拉勾网主页，打开开发者工具network项，点每个资源就知道他的request和reponse。主页他是直接返回的内容，所以直接去爬主页，三行搞定。</p>\n<pre>import requests\nreq=requests.get(\"https://www.lagou.com/\")\nprint(req.text)</pre>\n<p>然后继续看具体的内容页，这里以杭州为例，网址是https://www.lagou.com/jobs/list_?px=new&amp;city=%E6%9D%AD%E5%B7%9E#filterBox</p>\n<p>以同样的方式爬内容页，会发现内容页只有外标签而没有内容。</p>\n<p>看console便会发现有ajax的痕迹，仔细看network便会发现几个json文件，通过看他的request和reponse便会知道数据是在某个json的链接里拿到的。链接为https://www.lagou.com/jobs/positionAjax.json?px=new&amp;city=%E6%9D%AD%E5%B7%9E&amp;needAddtionalResult=false</p>\n<p>直接爬这个链接，会发现返回错误信息，应该还有点防护措施。</p>\n<p>所以我们把自己伪装的和浏览器更像。构造一个request头</p>\n<pre>import requests\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.post(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\nprint(req.content)</pre>\n<p>然后能爬取到一页的数据，在进一步直接爬30页，就会发现有每分钟的每个IP5次的次数限制。ip限制就用代理呗，只要在requests里面加一个proxies的参数即可，不过好的代理确实难找，<a href=\"http://www.gatherproxy.com/zh/\" target=\"_blank\" rel=\"external\">这里的还算可以</a>。</p>\n<p>代理要加进去的话，得先爬代理网站，然后才能时时获取最新的代理并处理。</p>\n<pre>req=requests.post(url,proxies={\"https\":\"000.000.000.000:00\",\"http\":\"000.000.000.000:00\"},headers=headers,params={'city':'杭州','pn':str(page)})</pre>\n<p>因为上面那个代理网站要翻墙，这里用另一个代理网站做测试。爬到网页后用beautifulSoup4来处理html代码。</p>\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef getProxyList():\n    res=[]\n    header={\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response=requests.get(\"http://www.xicidaili.com/nn/\",headers=header)\n    soup=BeautifulSoup(response.text,'html.parser')\n    li=soup.find_all('tr',{'class':'odd'})\n    for item in li:\n        res.append(item.contents[3].string+\":\"+item.contents[5].string)\n        itemNext=item.next_sibling.next_sibling\n        res.append(itemNext.contents[3].string+\":\"+itemNext.contents[5].string)\n    return res</pre>\n<p>爬到拉勾网的内容后得处理丫。因为是json格式，直接用json处理，下面是处理的代码：</p>\n<pre>import requests\nimport json\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.get(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\ndata=json.loads(req.text)\nfor i in data['content']['positionResult']['result']:\n    print(i['positionName'],i['salary'],i['workYear'],i['jobNature'],i['companyFullName'],i['companySize'],i['district'],i['createTime'])</pre>\n<p>总结：一般的套路也就是看chrome控制台，把request和reponse弄清楚，有时候还得看他的js代码，有时候html里也会隐藏一些信息，反正无所不用。</p>\n<p>爬网页与反爬虫总是矛和盾，作为一个写网页又爬网页的，应该能更加清楚一些套路，而在写网页的时候阻挡一些简单的爬虫入侵。</p>\n","excerpt":"<p>作为pythoner爬虫还是必备技能之一，说上手就上手。</p>\n<p>入门选了个拉勾网（莫名躺枪，下手轻点）。","more":"</p>\n<p>这次具体来讲一下爬网页走过的流程。</p>\n<p>先在chrome打开拉勾网主页，打开开发者工具network项，点每个资源就知道他的request和reponse。主页他是直接返回的内容，所以直接去爬主页，三行搞定。</p>\n<pre>import requests\nreq=requests.get(\"https://www.lagou.com/\")\nprint(req.text)</pre>\n<p>然后继续看具体的内容页，这里以杭州为例，网址是https://www.lagou.com/jobs/list_?px=new&amp;city=%E6%9D%AD%E5%B7%9E#filterBox</p>\n<p>以同样的方式爬内容页，会发现内容页只有外标签而没有内容。</p>\n<p>看console便会发现有ajax的痕迹，仔细看network便会发现几个json文件，通过看他的request和reponse便会知道数据是在某个json的链接里拿到的。链接为https://www.lagou.com/jobs/positionAjax.json?px=new&amp;city=%E6%9D%AD%E5%B7%9E&amp;needAddtionalResult=false</p>\n<p>直接爬这个链接，会发现返回错误信息，应该还有点防护措施。</p>\n<p>所以我们把自己伪装的和浏览器更像。构造一个request头</p>\n<pre>import requests\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.post(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\nprint(req.content)</pre>\n<p>然后能爬取到一页的数据，在进一步直接爬30页，就会发现有每分钟的每个IP5次的次数限制。ip限制就用代理呗，只要在requests里面加一个proxies的参数即可，不过好的代理确实难找，<a href=\"http://www.gatherproxy.com/zh/\">这里的还算可以</a>。</p>\n<p>代理要加进去的话，得先爬代理网站，然后才能时时获取最新的代理并处理。</p>\n<pre>req=requests.post(url,proxies={\"https\":\"000.000.000.000:00\",\"http\":\"000.000.000.000:00\"},headers=headers,params={'city':'杭州','pn':str(page)})</pre>\n<p>因为上面那个代理网站要翻墙，这里用另一个代理网站做测试。爬到网页后用beautifulSoup4来处理html代码。</p>\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef getProxyList():\n    res=[]\n    header={\n        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response=requests.get(\"http://www.xicidaili.com/nn/\",headers=header)\n    soup=BeautifulSoup(response.text,'html.parser')\n    li=soup.find_all('tr',{'class':'odd'})\n    for item in li:\n        res.append(item.contents[3].string+\":\"+item.contents[5].string)\n        itemNext=item.next_sibling.next_sibling\n        res.append(itemNext.contents[3].string+\":\"+itemNext.contents[5].string)\n    return res</pre>\n<p>爬到拉勾网的内容后得处理丫。因为是json格式，直接用json处理，下面是处理的代码：</p>\n<pre>import requests\nimport json\nheader={\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    'Referer': 'https://www.lagou.com/jobs/list_?px=new&amp;city=%\\E6%\\9D%\\AD%\\E5%\\B7%\\9E',\n    'Accept-Encoding': 'gzip, deflate, br',\n}\nreq=requests.get(\"https://www.lagou.com/jobs/positionAjax.json?px=new&amp;needAddtionalResult=false\",params={\"city\":\"杭州\"},headers=header)\ndata=json.loads(req.text)\nfor i in data['content']['positionResult']['result']:\n    print(i['positionName'],i['salary'],i['workYear'],i['jobNature'],i['companyFullName'],i['companySize'],i['district'],i['createTime'])</pre>\n<p>总结：一般的套路也就是看chrome控制台，把request和reponse弄清楚，有时候还得看他的js代码，有时候html里也会隐藏一些信息，反正无所不用。</p>\n<p>爬网页与反爬虫总是矛和盾，作为一个写网页又爬网页的，应该能更加清楚一些套路，而在写网页的时候阻挡一些简单的爬虫入侵。</p>"},{"title":"爬进数字杭电python篇","catalog":true,"date":"2017-09-06T02:43:27.000Z","_content":"\n上次有的<a href=\"https://ganjiacheng.cn/blog/?p=63\">php篇数字杭电模拟登陆</a>，不过由于如今没有了验证码，可能会出点小错误，因此用python再来进进出出一遍。\n\n此次主要还是熟悉一下python requests的使用以及对网站cookie变化的准确捕捉。post的参数以及header也是这里的重点部分，其他还能加点简单的正则。<!--more-->\n\n具体细节在代码注释里：\n<pre>import requests\nimport re\n\n#先访问一次登录网站得到lt（lt后面必须，且一次性使用）\ndef getHduCookie():\n    resp=requests.get('http://cas.hdu.edu.cn/cas/login')\n    m = re.search(r'name=\\\"lt\\\" value=(.*?) /&gt;', resp.text)\n    lt=m.group()[17:-4]\n    return lt\n\n#模拟登陆用户名为学号，密码为md5加密后的密码，返回跳转链接\ndef simLogin(lt):\n    password=hashlib.md5(psd.encode('utf-8')).hexdigest()\n    params={\n        'encodedService':'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service':'http://i.hdu.edu.cn/dcp/index.jsp',\n        'username':xh,\n        'password':password,\n        'lt':lt\n    }\n    resp=requests.post('http://cas.hdu.edu.cn/cas/login?service=http://jxgl.hdu.edu.cn/index.aspx',params=params)\n    m=re.search(r'href=\"(.*?)\"',resp.text)\n    return m.group()[6:-1]\n\n#去临时链接获取一次cookie并保存请求\ndef jxglPage(url):\n    req=requests.Session()\n    resp0=req.get(url)\n    req.headers={\n        'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Referer':'http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113',\n        'Accept-Encoding': 'gzip, deflate',\n        'Content-Type':'application/x-www-form-urlencoded',\n    }\n    return req\n\n#这里的例子是获取选课列表\ndef classList(req):\n    data=''#这里是post的一大串字符，可从浏览器获取\n    url='http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113'\n    resp=req.post(url,data=data)\n    resp.encoding='gbk'\n    print(resp.text)\n\n#主程序，设置学号密码并运行\nif __name__=='__main__':\n    xh='学号'\n    psd='密码'\n    lt=getHduCookie()\n    tmpurl=simLogin(lt)\n    req=jxglPage(tmpurl)\n    classList(req)</pre>\n学习为主，连我都不信。\n\n温馨提醒：此片不要与<a href=\"https://ganjiacheng.cn/blog/?p=368\">hack验证二维码篇</a>结合搞事情啦！\n","source":"_posts/2017/article_40_爬进数字杭电python篇.md","raw":"\n---\ntitle: 爬进数字杭电python篇\ncatalog: true\ndate: 2017-9-6 10:43:27\n---\n\n上次有的<a href=\"https://ganjiacheng.cn/blog/?p=63\">php篇数字杭电模拟登陆</a>，不过由于如今没有了验证码，可能会出点小错误，因此用python再来进进出出一遍。\n\n此次主要还是熟悉一下python requests的使用以及对网站cookie变化的准确捕捉。post的参数以及header也是这里的重点部分，其他还能加点简单的正则。<!--more-->\n\n具体细节在代码注释里：\n<pre>import requests\nimport re\n\n#先访问一次登录网站得到lt（lt后面必须，且一次性使用）\ndef getHduCookie():\n    resp=requests.get('http://cas.hdu.edu.cn/cas/login')\n    m = re.search(r'name=\\\"lt\\\" value=(.*?) /&gt;', resp.text)\n    lt=m.group()[17:-4]\n    return lt\n\n#模拟登陆用户名为学号，密码为md5加密后的密码，返回跳转链接\ndef simLogin(lt):\n    password=hashlib.md5(psd.encode('utf-8')).hexdigest()\n    params={\n        'encodedService':'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service':'http://i.hdu.edu.cn/dcp/index.jsp',\n        'username':xh,\n        'password':password,\n        'lt':lt\n    }\n    resp=requests.post('http://cas.hdu.edu.cn/cas/login?service=http://jxgl.hdu.edu.cn/index.aspx',params=params)\n    m=re.search(r'href=\"(.*?)\"',resp.text)\n    return m.group()[6:-1]\n\n#去临时链接获取一次cookie并保存请求\ndef jxglPage(url):\n    req=requests.Session()\n    resp0=req.get(url)\n    req.headers={\n        'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Referer':'http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113',\n        'Accept-Encoding': 'gzip, deflate',\n        'Content-Type':'application/x-www-form-urlencoded',\n    }\n    return req\n\n#这里的例子是获取选课列表\ndef classList(req):\n    data=''#这里是post的一大串字符，可从浏览器获取\n    url='http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113'\n    resp=req.post(url,data=data)\n    resp.encoding='gbk'\n    print(resp.text)\n\n#主程序，设置学号密码并运行\nif __name__=='__main__':\n    xh='学号'\n    psd='密码'\n    lt=getHduCookie()\n    tmpurl=simLogin(lt)\n    req=jxglPage(tmpurl)\n    classList(req)</pre>\n学习为主，连我都不信。\n\n温馨提醒：此片不要与<a href=\"https://ganjiacheng.cn/blog/?p=368\">hack验证二维码篇</a>结合搞事情啦！\n","slug":"2017/article_40_爬进数字杭电python篇","published":1,"updated":"2021-01-27T04:46:28.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72n00160770ztooj6nq","content":"<p>上次有的<a href=\"https://ganjiacheng.cn/blog/?p=63\">php篇数字杭电模拟登陆</a>，不过由于如今没有了验证码，可能会出点小错误，因此用python再来进进出出一遍。</p>\n<p>此次主要还是熟悉一下python requests的使用以及对网站cookie变化的准确捕捉。post的参数以及header也是这里的重点部分，其他还能加点简单的正则。<a id=\"more\"></a></p>\n<p>具体细节在代码注释里：</p>\n<pre>import requests\nimport re\n\n#先访问一次登录网站得到lt（lt后面必须，且一次性使用）\ndef getHduCookie():\n    resp=requests.get('http://cas.hdu.edu.cn/cas/login')\n    m = re.search(r'name=\\\"lt\\\" value=(.*?) /&gt;', resp.text)\n    lt=m.group()[17:-4]\n    return lt\n\n#模拟登陆用户名为学号，密码为md5加密后的密码，返回跳转链接\ndef simLogin(lt):\n    password=hashlib.md5(psd.encode('utf-8')).hexdigest()\n    params={\n        'encodedService':'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service':'http://i.hdu.edu.cn/dcp/index.jsp',\n        'username':xh,\n        'password':password,\n        'lt':lt\n    }\n    resp=requests.post('http://cas.hdu.edu.cn/cas/login?service=http://jxgl.hdu.edu.cn/index.aspx',params=params)\n    m=re.search(r'href=\"(.*?)\"',resp.text)\n    return m.group()[6:-1]\n\n#去临时链接获取一次cookie并保存请求\ndef jxglPage(url):\n    req=requests.Session()\n    resp0=req.get(url)\n    req.headers={\n        'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Referer':'http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113',\n        'Accept-Encoding': 'gzip, deflate',\n        'Content-Type':'application/x-www-form-urlencoded',\n    }\n    return req\n\n#这里的例子是获取选课列表\ndef classList(req):\n    data=''#这里是post的一大串字符，可从浏览器获取\n    url='http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113'\n    resp=req.post(url,data=data)\n    resp.encoding='gbk'\n    print(resp.text)\n\n#主程序，设置学号密码并运行\nif __name__=='__main__':\n    xh='学号'\n    psd='密码'\n    lt=getHduCookie()\n    tmpurl=simLogin(lt)\n    req=jxglPage(tmpurl)\n    classList(req)</pre>\n<p>学习为主，连我都不信。</p>\n<p>温馨提醒：此片不要与<a href=\"https://ganjiacheng.cn/blog/?p=368\">hack验证二维码篇</a>结合搞事情啦！</p>\n","excerpt":"<p>上次有的<a href=\"https://ganjiacheng.cn/blog/?p=63\">php篇数字杭电模拟登陆</a>，不过由于如今没有了验证码，可能会出点小错误，因此用python再来进进出出一遍。</p>\n<p>此次主要还是熟悉一下python requests的使用以及对网站cookie变化的准确捕捉。post的参数以及header也是这里的重点部分，其他还能加点简单的正则。","more":"</p>\n<p>具体细节在代码注释里：</p>\n<pre>import requests\nimport re\n\n#先访问一次登录网站得到lt（lt后面必须，且一次性使用）\ndef getHduCookie():\n    resp=requests.get('http://cas.hdu.edu.cn/cas/login')\n    m = re.search(r'name=\\\"lt\\\" value=(.*?) /&gt;', resp.text)\n    lt=m.group()[17:-4]\n    return lt\n\n#模拟登陆用户名为学号，密码为md5加密后的密码，返回跳转链接\ndef simLogin(lt):\n    password=hashlib.md5(psd.encode('utf-8')).hexdigest()\n    params={\n        'encodedService':'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service':'http://i.hdu.edu.cn/dcp/index.jsp',\n        'username':xh,\n        'password':password,\n        'lt':lt\n    }\n    resp=requests.post('http://cas.hdu.edu.cn/cas/login?service=http://jxgl.hdu.edu.cn/index.aspx',params=params)\n    m=re.search(r'href=\"(.*?)\"',resp.text)\n    return m.group()[6:-1]\n\n#去临时链接获取一次cookie并保存请求\ndef jxglPage(url):\n    req=requests.Session()\n    resp0=req.get(url)\n    req.headers={\n        'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n        'Referer':'http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113',\n        'Accept-Encoding': 'gzip, deflate',\n        'Content-Type':'application/x-www-form-urlencoded',\n    }\n    return req\n\n#这里的例子是获取选课列表\ndef classList(req):\n    data=''#这里是post的一大串字符，可从浏览器获取\n    url='http://jxgl.hdu.edu.cn/xf_xsqxxxk.aspx?xh='+xh+'&amp;xm=%25%5cB8%25%5cCA%25%5cBC%25%5cD2%25%5cB3%25%5cC7&amp;gnmkdm=N121113'\n    resp=req.post(url,data=data)\n    resp.encoding='gbk'\n    print(resp.text)\n\n#主程序，设置学号密码并运行\nif __name__=='__main__':\n    xh='学号'\n    psd='密码'\n    lt=getHduCookie()\n    tmpurl=simLogin(lt)\n    req=jxglPage(tmpurl)\n    classList(req)</pre>\n<p>学习为主，连我都不信。</p>\n<p>温馨提醒：此片不要与<a href=\"https://ganjiacheng.cn/blog/?p=368\">hack验证二维码篇</a>结合搞事情啦！</p>"},{"title":"python cv2图像处理小结","catalog":true,"date":"2017-08-06T03:22:43.000Z","_content":"\n这里做图像处理初学的一个阶段性小结。从简单的读写到复杂点的开闭运算。还有一些用到过的边缘提取，垂直水平投影等方法。<!--more-->\n\n首先是读写和展示\n<pre>import cv2\n#imread第二个参数不写默认是rgb彩色，有0读取到的就是黑白二值图\nim = cv2.imread(\"image.jpg\",0)\n#写入文件\ncv2.imwrite(\"img.jpg\",im)\n#展示\ncv2.imshow(\"imageName\",im)\ncv2.waitKey(0)</pre>\n一般复制粘贴的话可以用numpy，因为cv2本身图像保存的就是一个np矩阵。\n\n这里的注意点就是先是y再是x。\n<pre>crop = im[y:y+height,x:x+width]</pre>\n改尺寸\n<pre>res = cv2.resize(im,(width, height), interpolation = cv2.INTER_CUBIC)</pre>\n灰度，二值（手动阀值和自动阀值）\n<pre>im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n#第二个参数为手动阀值\nretval,im_hb = cv2.threshold(im_gray, 120, 255, cv2.THRESH_BINARY) \n#自动阀值\n#这里255是二值中的高值，cv2.ADAPTIVE_THRESH_MEAN_C可以用cv2.ADAPTIVE_THRESH_GAUSSIAN_C\n#cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV是黑白相反的\n#最后两个参数可以调整来改变黑白区域\nim_hb = cv2.adaptiveThreshold(im_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 1)</pre>\n膨胀，腐蚀，开闭运算，待尝试（形态学梯度、顶帽、黑帽）\n<pre>#首先定义一个核，一般矩形用的多\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))\n#膨胀腐蚀是对图中白色部分而言，膨胀便是白色变多，腐蚀是白色变少\n#腐蚀\neroded = cv2.erode(img,kernel)\n#膨胀\ndilated = cv2.dilate(img,kernel) \n#闭运算=先膨胀后腐蚀\nclosed = cv2.morphologyEx(im, cv2.MORPH_CLOSE, kernel) \n#开运算=先腐蚀后膨胀\nopen = cv2.morphologyEx(im, cv2.MORPH_OPEN, kernel)</pre>\nmser连通域检测，原理貌似是把图像看做高低起伏的地形，然后往下灌水。\n<pre>#图片如果底色比较单一就能用来截出内容，这里需要自己控制_min_area\nmser = cv2.MSER_create(_min_area=1800)\nregions, boxes = mser.detectRegions(im_hb)\nfor box in boxes:\n    x, y, w, h = box\n    cv2.rectangle(im, (x,y),(x+w, y+h), (255, 0, 0), 2)</pre>\n垂直，水平投影做分割，这里没找到直接可用的接口，就自己实现\n<pre>#首先需要的是一张二值图im，以白底黑字为例\ndivision=np.array([[255.0]*width]*height)\n#水平投影，可以用来确定字的上下边缘\nfor i in range(im.shape[0]):\n     n=0\n     for j in range(im.shape[1]):\n         if closed[i][j]==0:\n             division[i][n]=0\n             n+=1\n#垂直投影，可以用来确定字的左右边缘已经字符中间的空隙\nfor i in range(im.shape[1]):\n    n=0\n    for j in range(im.shape[0]):\n        if division[j][i]==0:\n            division[height-1-n][i]=0\n            n+=1\n</pre>\n边缘检测，尝试了findContours和sobel算子和canny算子\n<pre>#这里也需要二值图im\ncontours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(img,contours,-1,(0,0,255),3)</pre>\n<pre>x = cv2.Sobel(im,cv2.CV_16S,1,0)  \ny = cv2.Sobel(im,cv2.CV_16S,0,1)  \nabsX = cv2.convertScaleAbs(x)\nabsY = cv2.convertScaleAbs(y)  \ndst = cv2.addWeighted(absX,0.5,absY,0.5,0)</pre>\n<pre>#最大最小阀值\ncanny = cv2.Canny(im, 50, 150)</pre>\n入门至此把，python写起来还比较方便，至于最后还得上c++。\n\n真实中图像各异，总的还得实践出真知！\n","source":"_posts/2017/article_39_python cv2图像处理小结.md","raw":"\n---\ntitle: python cv2图像处理小结\ncatalog: true\ndate: 2017-8-6 11:22:43\n---\n\n这里做图像处理初学的一个阶段性小结。从简单的读写到复杂点的开闭运算。还有一些用到过的边缘提取，垂直水平投影等方法。<!--more-->\n\n首先是读写和展示\n<pre>import cv2\n#imread第二个参数不写默认是rgb彩色，有0读取到的就是黑白二值图\nim = cv2.imread(\"image.jpg\",0)\n#写入文件\ncv2.imwrite(\"img.jpg\",im)\n#展示\ncv2.imshow(\"imageName\",im)\ncv2.waitKey(0)</pre>\n一般复制粘贴的话可以用numpy，因为cv2本身图像保存的就是一个np矩阵。\n\n这里的注意点就是先是y再是x。\n<pre>crop = im[y:y+height,x:x+width]</pre>\n改尺寸\n<pre>res = cv2.resize(im,(width, height), interpolation = cv2.INTER_CUBIC)</pre>\n灰度，二值（手动阀值和自动阀值）\n<pre>im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n#第二个参数为手动阀值\nretval,im_hb = cv2.threshold(im_gray, 120, 255, cv2.THRESH_BINARY) \n#自动阀值\n#这里255是二值中的高值，cv2.ADAPTIVE_THRESH_MEAN_C可以用cv2.ADAPTIVE_THRESH_GAUSSIAN_C\n#cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV是黑白相反的\n#最后两个参数可以调整来改变黑白区域\nim_hb = cv2.adaptiveThreshold(im_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 1)</pre>\n膨胀，腐蚀，开闭运算，待尝试（形态学梯度、顶帽、黑帽）\n<pre>#首先定义一个核，一般矩形用的多\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))\n#膨胀腐蚀是对图中白色部分而言，膨胀便是白色变多，腐蚀是白色变少\n#腐蚀\neroded = cv2.erode(img,kernel)\n#膨胀\ndilated = cv2.dilate(img,kernel) \n#闭运算=先膨胀后腐蚀\nclosed = cv2.morphologyEx(im, cv2.MORPH_CLOSE, kernel) \n#开运算=先腐蚀后膨胀\nopen = cv2.morphologyEx(im, cv2.MORPH_OPEN, kernel)</pre>\nmser连通域检测，原理貌似是把图像看做高低起伏的地形，然后往下灌水。\n<pre>#图片如果底色比较单一就能用来截出内容，这里需要自己控制_min_area\nmser = cv2.MSER_create(_min_area=1800)\nregions, boxes = mser.detectRegions(im_hb)\nfor box in boxes:\n    x, y, w, h = box\n    cv2.rectangle(im, (x,y),(x+w, y+h), (255, 0, 0), 2)</pre>\n垂直，水平投影做分割，这里没找到直接可用的接口，就自己实现\n<pre>#首先需要的是一张二值图im，以白底黑字为例\ndivision=np.array([[255.0]*width]*height)\n#水平投影，可以用来确定字的上下边缘\nfor i in range(im.shape[0]):\n     n=0\n     for j in range(im.shape[1]):\n         if closed[i][j]==0:\n             division[i][n]=0\n             n+=1\n#垂直投影，可以用来确定字的左右边缘已经字符中间的空隙\nfor i in range(im.shape[1]):\n    n=0\n    for j in range(im.shape[0]):\n        if division[j][i]==0:\n            division[height-1-n][i]=0\n            n+=1\n</pre>\n边缘检测，尝试了findContours和sobel算子和canny算子\n<pre>#这里也需要二值图im\ncontours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(img,contours,-1,(0,0,255),3)</pre>\n<pre>x = cv2.Sobel(im,cv2.CV_16S,1,0)  \ny = cv2.Sobel(im,cv2.CV_16S,0,1)  \nabsX = cv2.convertScaleAbs(x)\nabsY = cv2.convertScaleAbs(y)  \ndst = cv2.addWeighted(absX,0.5,absY,0.5,0)</pre>\n<pre>#最大最小阀值\ncanny = cv2.Canny(im, 50, 150)</pre>\n入门至此把，python写起来还比较方便，至于最后还得上c++。\n\n真实中图像各异，总的还得实践出真知！\n","slug":"2017/article_39_python cv2图像处理小结","published":1,"updated":"2021-01-27T04:46:28.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72o00170770raydo2q8","content":"<p>这里做图像处理初学的一个阶段性小结。从简单的读写到复杂点的开闭运算。还有一些用到过的边缘提取，垂直水平投影等方法。<a id=\"more\"></a></p>\n<p>首先是读写和展示</p>\n<pre>import cv2\n#imread第二个参数不写默认是rgb彩色，有0读取到的就是黑白二值图\nim = cv2.imread(\"image.jpg\",0)\n#写入文件\ncv2.imwrite(\"img.jpg\",im)\n#展示\ncv2.imshow(\"imageName\",im)\ncv2.waitKey(0)</pre>\n<p>一般复制粘贴的话可以用numpy，因为cv2本身图像保存的就是一个np矩阵。</p>\n<p>这里的注意点就是先是y再是x。</p>\n<pre>crop = im[y:y+height,x:x+width]</pre>\n<p>改尺寸</p>\n<pre>res = cv2.resize(im,(width, height), interpolation = cv2.INTER_CUBIC)</pre>\n<p>灰度，二值（手动阀值和自动阀值）</p>\n<pre>im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n#第二个参数为手动阀值\nretval,im_hb = cv2.threshold(im_gray, 120, 255, cv2.THRESH_BINARY) \n#自动阀值\n#这里255是二值中的高值，cv2.ADAPTIVE_THRESH_MEAN_C可以用cv2.ADAPTIVE_THRESH_GAUSSIAN_C\n#cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV是黑白相反的\n#最后两个参数可以调整来改变黑白区域\nim_hb = cv2.adaptiveThreshold(im_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 1)</pre>\n<p>膨胀，腐蚀，开闭运算，待尝试（形态学梯度、顶帽、黑帽）</p>\n<pre>#首先定义一个核，一般矩形用的多\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))\n#膨胀腐蚀是对图中白色部分而言，膨胀便是白色变多，腐蚀是白色变少\n#腐蚀\neroded = cv2.erode(img,kernel)\n#膨胀\ndilated = cv2.dilate(img,kernel) \n#闭运算=先膨胀后腐蚀\nclosed = cv2.morphologyEx(im, cv2.MORPH_CLOSE, kernel) \n#开运算=先腐蚀后膨胀\nopen = cv2.morphologyEx(im, cv2.MORPH_OPEN, kernel)</pre>\n<p>mser连通域检测，原理貌似是把图像看做高低起伏的地形，然后往下灌水。</p>\n<pre>#图片如果底色比较单一就能用来截出内容，这里需要自己控制_min_area\nmser = cv2.MSER_create(_min_area=1800)\nregions, boxes = mser.detectRegions(im_hb)\nfor box in boxes:\n    x, y, w, h = box\n    cv2.rectangle(im, (x,y),(x+w, y+h), (255, 0, 0), 2)</pre>\n<p>垂直，水平投影做分割，这里没找到直接可用的接口，就自己实现</p>\n<pre>#首先需要的是一张二值图im，以白底黑字为例\ndivision=np.array([[255.0]*width]*height)\n#水平投影，可以用来确定字的上下边缘\nfor i in range(im.shape[0]):\n     n=0\n     for j in range(im.shape[1]):\n         if closed[i][j]==0:\n             division[i][n]=0\n             n+=1\n#垂直投影，可以用来确定字的左右边缘已经字符中间的空隙\nfor i in range(im.shape[1]):\n    n=0\n    for j in range(im.shape[0]):\n        if division[j][i]==0:\n            division[height-1-n][i]=0\n            n+=1\n</pre>\n<p>边缘检测，尝试了findContours和sobel算子和canny算子</p>\n<pre>#这里也需要二值图im\ncontours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(img,contours,-1,(0,0,255),3)</pre>\n<pre>x = cv2.Sobel(im,cv2.CV_16S,1,0)  \ny = cv2.Sobel(im,cv2.CV_16S,0,1)  \nabsX = cv2.convertScaleAbs(x)\nabsY = cv2.convertScaleAbs(y)  \ndst = cv2.addWeighted(absX,0.5,absY,0.5,0)</pre>\n<pre>#最大最小阀值\ncanny = cv2.Canny(im, 50, 150)</pre>\n<p>入门至此把，python写起来还比较方便，至于最后还得上c++。</p>\n<p>真实中图像各异，总的还得实践出真知！</p>\n","excerpt":"<p>这里做图像处理初学的一个阶段性小结。从简单的读写到复杂点的开闭运算。还有一些用到过的边缘提取，垂直水平投影等方法。","more":"</p>\n<p>首先是读写和展示</p>\n<pre>import cv2\n#imread第二个参数不写默认是rgb彩色，有0读取到的就是黑白二值图\nim = cv2.imread(\"image.jpg\",0)\n#写入文件\ncv2.imwrite(\"img.jpg\",im)\n#展示\ncv2.imshow(\"imageName\",im)\ncv2.waitKey(0)</pre>\n<p>一般复制粘贴的话可以用numpy，因为cv2本身图像保存的就是一个np矩阵。</p>\n<p>这里的注意点就是先是y再是x。</p>\n<pre>crop = im[y:y+height,x:x+width]</pre>\n<p>改尺寸</p>\n<pre>res = cv2.resize(im,(width, height), interpolation = cv2.INTER_CUBIC)</pre>\n<p>灰度，二值（手动阀值和自动阀值）</p>\n<pre>im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n#第二个参数为手动阀值\nretval,im_hb = cv2.threshold(im_gray, 120, 255, cv2.THRESH_BINARY) \n#自动阀值\n#这里255是二值中的高值，cv2.ADAPTIVE_THRESH_MEAN_C可以用cv2.ADAPTIVE_THRESH_GAUSSIAN_C\n#cv2.THRESH_BINARY和cv2.THRESH_BINARY_INV是黑白相反的\n#最后两个参数可以调整来改变黑白区域\nim_hb = cv2.adaptiveThreshold(im_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 1)</pre>\n<p>膨胀，腐蚀，开闭运算，待尝试（形态学梯度、顶帽、黑帽）</p>\n<pre>#首先定义一个核，一般矩形用的多\nkernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))\n#膨胀腐蚀是对图中白色部分而言，膨胀便是白色变多，腐蚀是白色变少\n#腐蚀\neroded = cv2.erode(img,kernel)\n#膨胀\ndilated = cv2.dilate(img,kernel) \n#闭运算=先膨胀后腐蚀\nclosed = cv2.morphologyEx(im, cv2.MORPH_CLOSE, kernel) \n#开运算=先腐蚀后膨胀\nopen = cv2.morphologyEx(im, cv2.MORPH_OPEN, kernel)</pre>\n<p>mser连通域检测，原理貌似是把图像看做高低起伏的地形，然后往下灌水。</p>\n<pre>#图片如果底色比较单一就能用来截出内容，这里需要自己控制_min_area\nmser = cv2.MSER_create(_min_area=1800)\nregions, boxes = mser.detectRegions(im_hb)\nfor box in boxes:\n    x, y, w, h = box\n    cv2.rectangle(im, (x,y),(x+w, y+h), (255, 0, 0), 2)</pre>\n<p>垂直，水平投影做分割，这里没找到直接可用的接口，就自己实现</p>\n<pre>#首先需要的是一张二值图im，以白底黑字为例\ndivision=np.array([[255.0]*width]*height)\n#水平投影，可以用来确定字的上下边缘\nfor i in range(im.shape[0]):\n     n=0\n     for j in range(im.shape[1]):\n         if closed[i][j]==0:\n             division[i][n]=0\n             n+=1\n#垂直投影，可以用来确定字的左右边缘已经字符中间的空隙\nfor i in range(im.shape[1]):\n    n=0\n    for j in range(im.shape[0]):\n        if division[j][i]==0:\n            division[height-1-n][i]=0\n            n+=1\n</pre>\n<p>边缘检测，尝试了findContours和sobel算子和canny算子</p>\n<pre>#这里也需要二值图im\ncontours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(img,contours,-1,(0,0,255),3)</pre>\n<pre>x = cv2.Sobel(im,cv2.CV_16S,1,0)  \ny = cv2.Sobel(im,cv2.CV_16S,0,1)  \nabsX = cv2.convertScaleAbs(x)\nabsY = cv2.convertScaleAbs(y)  \ndst = cv2.addWeighted(absX,0.5,absY,0.5,0)</pre>\n<pre>#最大最小阀值\ncanny = cv2.Canny(im, 50, 150)</pre>\n<p>入门至此把，python写起来还比较方便，至于最后还得上c++。</p>\n<p>真实中图像各异，总的还得实践出真知！</p>"},{"title":"简单线性回归---学习篇","catalog":true,"date":"2017-03-07T09:57:45.000Z","_content":"\n先讲回归这个概念，我的理解：如果是二维平面里，指根据现有的点拟合出直线，在用直线做分析与预测。\n\n简单线性回归便是全部的点都在一类之下。拟合出直线用于发现其中的关系。<!--more-->\n\nlogistic回归是在两类里做分类，完成训练后，拟合出的直线一边各一类，新来的点就可以很轻易的分类。\n\nsoftmax回归便是多分类。\n\n这是简单线性回归的一般公式：<a href=\"/img/uploads/2017/03/IMG_3031.jpg\"><img class=\"alignnone wp-image-47 size-thumbnail\" src=\"/img/uploads/2017/03/IMG_3031-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a>\n\n然后用python进行了尝试\n<pre>#python2.7\nimport numpy as np\nimport matplotlib.pyplot as plt\nnum=1000\nvectors=[]\nxx=0;xy=0;ex=0;ey=0\nfor i in xrange(num):\n    x1=np.random.normal(0.0,0.55)\n    y1=x1*0.1+0.3+np.random.normal(0.0,0.03)\n    xx+=x1*x1\n    xy+=x1*y1\n    ex+=x1\n    ey+=y1\n    vectors.append([x1,y1])\nx_data=[v[0] for v in vectors]\ny_data=[v[1] for v in vectors]\nplt.plot(x_data,y_data,'ro',label='data')\nb=(xy-ex*ey/num)/(xx-ex*ex/num)\na=ey/num-b*ex/num\ntmpx=[-2,0,2]\ntmpy=[]\nfor i in tmpx:\n    tmpy.append(b*i+a)\nplt.plot(tmpx,tmpy)\nplt.legend()\nplt.show()\n</pre>\n<img class=\"alignnone size-medium wp-image-49\" src=\"/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg\" alt=\"\" width=\"300\" height=\"230\" />\n\n效果还可以，之后会对回归进行更多的优化和尝试，最小二乘法，梯度下降等等\n","source":"_posts/2017/article_3_简单线性回归---学习篇.md","raw":"\n---\ntitle: 简单线性回归---学习篇\ncatalog: true\ndate: 2017-3-7 17:57:45\n---\n\n先讲回归这个概念，我的理解：如果是二维平面里，指根据现有的点拟合出直线，在用直线做分析与预测。\n\n简单线性回归便是全部的点都在一类之下。拟合出直线用于发现其中的关系。<!--more-->\n\nlogistic回归是在两类里做分类，完成训练后，拟合出的直线一边各一类，新来的点就可以很轻易的分类。\n\nsoftmax回归便是多分类。\n\n这是简单线性回归的一般公式：<a href=\"/img/uploads/2017/03/IMG_3031.jpg\"><img class=\"alignnone wp-image-47 size-thumbnail\" src=\"/img/uploads/2017/03/IMG_3031-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a>\n\n然后用python进行了尝试\n<pre>#python2.7\nimport numpy as np\nimport matplotlib.pyplot as plt\nnum=1000\nvectors=[]\nxx=0;xy=0;ex=0;ey=0\nfor i in xrange(num):\n    x1=np.random.normal(0.0,0.55)\n    y1=x1*0.1+0.3+np.random.normal(0.0,0.03)\n    xx+=x1*x1\n    xy+=x1*y1\n    ex+=x1\n    ey+=y1\n    vectors.append([x1,y1])\nx_data=[v[0] for v in vectors]\ny_data=[v[1] for v in vectors]\nplt.plot(x_data,y_data,'ro',label='data')\nb=(xy-ex*ey/num)/(xx-ex*ex/num)\na=ey/num-b*ex/num\ntmpx=[-2,0,2]\ntmpy=[]\nfor i in tmpx:\n    tmpy.append(b*i+a)\nplt.plot(tmpx,tmpy)\nplt.legend()\nplt.show()\n</pre>\n<img class=\"alignnone size-medium wp-image-49\" src=\"/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg\" alt=\"\" width=\"300\" height=\"230\" />\n\n效果还可以，之后会对回归进行更多的优化和尝试，最小二乘法，梯度下降等等\n","slug":"2017/article_3_简单线性回归---学习篇","published":1,"updated":"2021-01-27T04:46:28.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72o00180770l61du39q","content":"<p>先讲回归这个概念，我的理解：如果是二维平面里，指根据现有的点拟合出直线，在用直线做分析与预测。</p>\n<p>简单线性回归便是全部的点都在一类之下。拟合出直线用于发现其中的关系。<a id=\"more\"></a></p>\n<p>logistic回归是在两类里做分类，完成训练后，拟合出的直线一边各一类，新来的点就可以很轻易的分类。</p>\n<p>softmax回归便是多分类。</p>\n<p>这是简单线性回归的一般公式：<a href=\"/img/uploads/2017/03/IMG_3031.jpg\"><img class=\"alignnone wp-image-47 size-thumbnail\" src=\"/img/uploads/2017/03/IMG_3031-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\"></a></p>\n<p>然后用python进行了尝试</p>\n<pre>#python2.7\nimport numpy as np\nimport matplotlib.pyplot as plt\nnum=1000\nvectors=[]\nxx=0;xy=0;ex=0;ey=0\nfor i in xrange(num):\n    x1=np.random.normal(0.0,0.55)\n    y1=x1*0.1+0.3+np.random.normal(0.0,0.03)\n    xx+=x1*x1\n    xy+=x1*y1\n    ex+=x1\n    ey+=y1\n    vectors.append([x1,y1])\nx_data=[v[0] for v in vectors]\ny_data=[v[1] for v in vectors]\nplt.plot(x_data,y_data,'ro',label='data')\nb=(xy-ex*ey/num)/(xx-ex*ex/num)\na=ey/num-b*ex/num\ntmpx=[-2,0,2]\ntmpy=[]\nfor i in tmpx:\n    tmpy.append(b*i+a)\nplt.plot(tmpx,tmpy)\nplt.legend()\nplt.show()\n</pre>\n<img class=\"alignnone size-medium wp-image-49\" src=\"/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg\" alt=\"\" width=\"300\" height=\"230\">\n<p>效果还可以，之后会对回归进行更多的优化和尝试，最小二乘法，梯度下降等等</p>\n","excerpt":"<p>先讲回归这个概念，我的理解：如果是二维平面里，指根据现有的点拟合出直线，在用直线做分析与预测。</p>\n<p>简单线性回归便是全部的点都在一类之下。拟合出直线用于发现其中的关系。","more":"</p>\n<p>logistic回归是在两类里做分类，完成训练后，拟合出的直线一边各一类，新来的点就可以很轻易的分类。</p>\n<p>softmax回归便是多分类。</p>\n<p>这是简单线性回归的一般公式：<a href=\"/img/uploads/2017/03/IMG_3031.jpg\"><img class=\"alignnone wp-image-47 size-thumbnail\" src=\"/img/uploads/2017/03/IMG_3031-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" /></a></p>\n<p>然后用python进行了尝试</p>\n<pre>#python2.7\nimport numpy as np\nimport matplotlib.pyplot as plt\nnum=1000\nvectors=[]\nxx=0;xy=0;ex=0;ey=0\nfor i in xrange(num):\n    x1=np.random.normal(0.0,0.55)\n    y1=x1*0.1+0.3+np.random.normal(0.0,0.03)\n    xx+=x1*x1\n    xy+=x1*y1\n    ex+=x1\n    ey+=y1\n    vectors.append([x1,y1])\nx_data=[v[0] for v in vectors]\ny_data=[v[1] for v in vectors]\nplt.plot(x_data,y_data,'ro',label='data')\nb=(xy-ex*ey/num)/(xx-ex*ex/num)\na=ey/num-b*ex/num\ntmpx=[-2,0,2]\ntmpy=[]\nfor i in tmpx:\n    tmpy.append(b*i+a)\nplt.plot(tmpx,tmpy)\nplt.legend()\nplt.show()\n</pre>\n<img class=\"alignnone size-medium wp-image-49\" src=\"/img/uploads/2017/03/QQ截图20170307175022-300x230.jpg\" alt=\"\" width=\"300\" height=\"230\" />\n<p>效果还可以，之后会对回归进行更多的优化和尝试，最小二乘法，梯度下降等等</p>"},{"title":"爬虫技术栈小结","catalog":true,"date":"2017-11-05T08:41:51.000Z","_content":"\n做了接近一个月爬虫，中间爬到数据多的爬过唯品会，dpchallenge，frilly。百度图片和1688也是取了一部分数据来。这里做一些爬虫技术总结记录，包括基本的requests使用，json，bs4，OrderedDict，下载图片，多进程以及post一个数组。<!--more-->\n\n首先，基本的爬虫以唯品会（这里以女装做示范），主要用以接口获取json数据，json解析，json格式化。\n\n首先获取一下他的分类列表，由于返回的是callback里的函数，便去掉前后一些字符然后json格式化。\n<pre>req=requests.Session()\ncateurl='https://category.vip.com/ajax/getCategory.php?callback=getCategory&amp;tree_id=117'\npplist=req.get(cateurl).text\nppjson=json.loads(pplist[12:-1])\npparr=ppjson['data'][0]['children'][0]['children']</pre>\n之后访问分类的具体页面，用一点正则到他的js里解析出productIds，解析json，然后再通过里面的每个productid的拼接构成一个url，获取到商品服装信息（这里可得缩略图）。再进入服装详情页，得到商品大图。\n<pre>for item in pparr:\n    searchurl='https://category.vip.com/'+item['url']\n        sec1=req.get(searchurl\n        jsonpic=re.findall(r'\"productIds\":(.*?),\"',sec1.text)\n        piclist=json.loads(jsonpic[0])\n        for n in range(2):\n            productIds='%2C'.join(map(str,piclist[50*n:(n+1)*50]))\n            resp=req.get('https://category.vip.com/ajax/mapi.php?service=product_info&amp;productIds='+productIds+'&amp;warehouse=VIP_SH')\n            projson=json.loads(resp.text)\n            if cate &gt; -5:\n                for j in projson['data']['products']:\n                    detail=req.get('https://detail.vip.com/detail-'+str(j['brandId'])+'-'+str(j['productId'])+'.html?f=ad')\n                    match=re.findall(r'&lt;a href=\"(.*?)\" class=\"J-mer-bigImgZoom\"&gt;',detail.text)\n                    for url in match:\n                        print(url)</pre>\n插一个从网页下载图片到本地的小技巧\n<pre>img=req.get(imageurl).content\nwith open('test.jpg','wb') as f:\n    f.write(img)\n    f.close()</pre>\ndpchallenge.com，这是个摄影网站，除了爬图片还得爬摄影信息及评论，主要靠beautifulsoup和正则解析html文本。\n\n这里先爬了信息，其中也包括图片地址。之后在把所有图下载下来。\n\n这里做一部分beautifulsoup的记录\n<pre>soup=BeautifulSoup(response.text,\"lxml\")\nsource_url=soup.find_all('标签',{'属性':'值(写True则代表有这个属性)'</pre>\n另一个这里要注意的便是OrderedDict，由于python的object读取显示出来时会乱序或者并不是按写入的顺序显示的。所以需要用OrderedDict作代替\n<pre>from collections import OrderedDict\ntest=OrderedDict()\ntest[\"c\"]=\"1\"\ntest[\"b\"]=\"2\"\ntest[\"a\"]=\"3\"\nprint(test)</pre>\n最后这里在做一下爬虫期间所用的多进程的简单使用，这里用到了进程池以及进程锁：\n<pre>from multiprocessing import Pool,Manager\ndef func(n,lock):\n    with lock:\n        print(n)\nif __name__==\"__main__\":\n    pool=Pool()\n    lock=Manager().Lock()\n    for i in range(10):\n        pool.apply_async(func, (i,lock))#这边也可以加回调\n    pool.close()\n    pool.join()</pre>\n最后考虑一个post时发现的问题，也是平常可能会忽略而出错的。\n\nhttp://test.ganjiacheng.cn/testspider/test.php是一个返回post数据的接口\n\n在js的jquery的ajax里，\n<pre>$.post(\"./test.php\",{du:\"0\",data:[\"1\",\"2\",\"3\"]},function(data){\n    console.log(data)\n})\n//结果：{\"du\":\"0\",\"data\":[\"1\",\"2\",\"3\"]}</pre>\n而在python里\n<pre>import requests\nimport json\npost_data={\n    \"du\":\"0\",\n    \"data\":[\"1\",\"2\",\"3\"],\n}\nres=requests.post('http://test.ganjiacheng.cn/testspider/test.php',data=post_data)\nprint(res.json())\n#结果：{'du': '0', 'data': '3'}</pre>\n也便是数组形式如[]在post传输过程是不能保持的，上面的post_data传输的信息形式应该如du=0&amp;data%5B%5D=1&amp;data%5B%5D=2&amp;data%5B%5D=3。\n\n后来用了拼接的方法来解决这个问题。\n\n有待提升的地方，在有较多js操作及判断的网页中，要爬到对应信息需进行复刻同样的js操作，首先要读懂js，再来要自己实现一遍，对于综合能力要求还是比较高的。对于1688这种检测到爬虫的一些行为后会需要你登录后进行操作，虽然登录后通过chrome拿到cookie是可以使用的，但可能会有时限等限制。还有待探索！\n","source":"_posts/2017/article_42_爬虫技术栈小结.md","raw":"\n---\ntitle: 爬虫技术栈小结\ncatalog: true\ndate: 2017-11-5 16:41:51\n---\n\n做了接近一个月爬虫，中间爬到数据多的爬过唯品会，dpchallenge，frilly。百度图片和1688也是取了一部分数据来。这里做一些爬虫技术总结记录，包括基本的requests使用，json，bs4，OrderedDict，下载图片，多进程以及post一个数组。<!--more-->\n\n首先，基本的爬虫以唯品会（这里以女装做示范），主要用以接口获取json数据，json解析，json格式化。\n\n首先获取一下他的分类列表，由于返回的是callback里的函数，便去掉前后一些字符然后json格式化。\n<pre>req=requests.Session()\ncateurl='https://category.vip.com/ajax/getCategory.php?callback=getCategory&amp;tree_id=117'\npplist=req.get(cateurl).text\nppjson=json.loads(pplist[12:-1])\npparr=ppjson['data'][0]['children'][0]['children']</pre>\n之后访问分类的具体页面，用一点正则到他的js里解析出productIds，解析json，然后再通过里面的每个productid的拼接构成一个url，获取到商品服装信息（这里可得缩略图）。再进入服装详情页，得到商品大图。\n<pre>for item in pparr:\n    searchurl='https://category.vip.com/'+item['url']\n        sec1=req.get(searchurl\n        jsonpic=re.findall(r'\"productIds\":(.*?),\"',sec1.text)\n        piclist=json.loads(jsonpic[0])\n        for n in range(2):\n            productIds='%2C'.join(map(str,piclist[50*n:(n+1)*50]))\n            resp=req.get('https://category.vip.com/ajax/mapi.php?service=product_info&amp;productIds='+productIds+'&amp;warehouse=VIP_SH')\n            projson=json.loads(resp.text)\n            if cate &gt; -5:\n                for j in projson['data']['products']:\n                    detail=req.get('https://detail.vip.com/detail-'+str(j['brandId'])+'-'+str(j['productId'])+'.html?f=ad')\n                    match=re.findall(r'&lt;a href=\"(.*?)\" class=\"J-mer-bigImgZoom\"&gt;',detail.text)\n                    for url in match:\n                        print(url)</pre>\n插一个从网页下载图片到本地的小技巧\n<pre>img=req.get(imageurl).content\nwith open('test.jpg','wb') as f:\n    f.write(img)\n    f.close()</pre>\ndpchallenge.com，这是个摄影网站，除了爬图片还得爬摄影信息及评论，主要靠beautifulsoup和正则解析html文本。\n\n这里先爬了信息，其中也包括图片地址。之后在把所有图下载下来。\n\n这里做一部分beautifulsoup的记录\n<pre>soup=BeautifulSoup(response.text,\"lxml\")\nsource_url=soup.find_all('标签',{'属性':'值(写True则代表有这个属性)'</pre>\n另一个这里要注意的便是OrderedDict，由于python的object读取显示出来时会乱序或者并不是按写入的顺序显示的。所以需要用OrderedDict作代替\n<pre>from collections import OrderedDict\ntest=OrderedDict()\ntest[\"c\"]=\"1\"\ntest[\"b\"]=\"2\"\ntest[\"a\"]=\"3\"\nprint(test)</pre>\n最后这里在做一下爬虫期间所用的多进程的简单使用，这里用到了进程池以及进程锁：\n<pre>from multiprocessing import Pool,Manager\ndef func(n,lock):\n    with lock:\n        print(n)\nif __name__==\"__main__\":\n    pool=Pool()\n    lock=Manager().Lock()\n    for i in range(10):\n        pool.apply_async(func, (i,lock))#这边也可以加回调\n    pool.close()\n    pool.join()</pre>\n最后考虑一个post时发现的问题，也是平常可能会忽略而出错的。\n\nhttp://test.ganjiacheng.cn/testspider/test.php是一个返回post数据的接口\n\n在js的jquery的ajax里，\n<pre>$.post(\"./test.php\",{du:\"0\",data:[\"1\",\"2\",\"3\"]},function(data){\n    console.log(data)\n})\n//结果：{\"du\":\"0\",\"data\":[\"1\",\"2\",\"3\"]}</pre>\n而在python里\n<pre>import requests\nimport json\npost_data={\n    \"du\":\"0\",\n    \"data\":[\"1\",\"2\",\"3\"],\n}\nres=requests.post('http://test.ganjiacheng.cn/testspider/test.php',data=post_data)\nprint(res.json())\n#结果：{'du': '0', 'data': '3'}</pre>\n也便是数组形式如[]在post传输过程是不能保持的，上面的post_data传输的信息形式应该如du=0&amp;data%5B%5D=1&amp;data%5B%5D=2&amp;data%5B%5D=3。\n\n后来用了拼接的方法来解决这个问题。\n\n有待提升的地方，在有较多js操作及判断的网页中，要爬到对应信息需进行复刻同样的js操作，首先要读懂js，再来要自己实现一遍，对于综合能力要求还是比较高的。对于1688这种检测到爬虫的一些行为后会需要你登录后进行操作，虽然登录后通过chrome拿到cookie是可以使用的，但可能会有时限等限制。还有待探索！\n","slug":"2017/article_42_爬虫技术栈小结","published":1,"updated":"2021-01-27T04:46:28.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72p00190770w3loppwa","content":"<p>做了接近一个月爬虫，中间爬到数据多的爬过唯品会，dpchallenge，frilly。百度图片和1688也是取了一部分数据来。这里做一些爬虫技术总结记录，包括基本的requests使用，json，bs4，OrderedDict，下载图片，多进程以及post一个数组。<a id=\"more\"></a></p>\n<p>首先，基本的爬虫以唯品会（这里以女装做示范），主要用以接口获取json数据，json解析，json格式化。</p>\n<p>首先获取一下他的分类列表，由于返回的是callback里的函数，便去掉前后一些字符然后json格式化。</p>\n<pre>req=requests.Session()\ncateurl='https://category.vip.com/ajax/getCategory.php?callback=getCategory&amp;tree_id=117'\npplist=req.get(cateurl).text\nppjson=json.loads(pplist[12:-1])\npparr=ppjson['data'][0]['children'][0]['children']</pre>\n<p>之后访问分类的具体页面，用一点正则到他的js里解析出productIds，解析json，然后再通过里面的每个productid的拼接构成一个url，获取到商品服装信息（这里可得缩略图）。再进入服装详情页，得到商品大图。</p>\n<pre>for item in pparr:\n    searchurl='https://category.vip.com/'+item['url']\n        sec1=req.get(searchurl\n        jsonpic=re.findall(r'\"productIds\":(.*?),\"',sec1.text)\n        piclist=json.loads(jsonpic[0])\n        for n in range(2):\n            productIds='%2C'.join(map(str,piclist[50*n:(n+1)*50]))\n            resp=req.get('https://category.vip.com/ajax/mapi.php?service=product_info&amp;productIds='+productIds+'&amp;warehouse=VIP_SH')\n            projson=json.loads(resp.text)\n            if cate &gt; -5:\n                for j in projson['data']['products']:\n                    detail=req.get('https://detail.vip.com/detail-'+str(j['brandId'])+'-'+str(j['productId'])+'.html?f=ad')\n                    match=re.findall(r'&lt;a href=\"(.*?)\" class=\"J-mer-bigImgZoom\"&gt;',detail.text)\n                    for url in match:\n                        print(url)</pre>\n<p>插一个从网页下载图片到本地的小技巧</p>\n<pre>img=req.get(imageurl).content\nwith open('test.jpg','wb') as f:\n    f.write(img)\n    f.close()</pre>\n<p><a href=\"http://dpchallenge.com\" target=\"_blank\" rel=\"external\">dpchallenge.com</a>，这是个摄影网站，除了爬图片还得爬摄影信息及评论，主要靠beautifulsoup和正则解析html文本。</p>\n<p>这里先爬了信息，其中也包括图片地址。之后在把所有图下载下来。</p>\n<p>这里做一部分beautifulsoup的记录</p>\n<pre>soup=BeautifulSoup(response.text,\"lxml\")\nsource_url=soup.find_all('标签',{'属性':'值(写True则代表有这个属性)'</pre>\n<p>另一个这里要注意的便是OrderedDict，由于python的object读取显示出来时会乱序或者并不是按写入的顺序显示的。所以需要用OrderedDict作代替</p>\n<pre>from collections import OrderedDict\ntest=OrderedDict()\ntest[\"c\"]=\"1\"\ntest[\"b\"]=\"2\"\ntest[\"a\"]=\"3\"\nprint(test)</pre>\n<p>最后这里在做一下爬虫期间所用的多进程的简单使用，这里用到了进程池以及进程锁：</p>\n<pre>from multiprocessing import Pool,Manager\ndef func(n,lock):\n    with lock:\n        print(n)\nif __name__==\"__main__\":\n    pool=Pool()\n    lock=Manager().Lock()\n    for i in range(10):\n        pool.apply_async(func, (i,lock))#这边也可以加回调\n    pool.close()\n    pool.join()</pre>\n<p>最后考虑一个post时发现的问题，也是平常可能会忽略而出错的。</p>\n<p><a href=\"http://test.ganjiacheng.cn/testspider/test.php%E6%98%AF%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9Epost%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8E%A5%E5%8F%A3\" target=\"_blank\" rel=\"external\">http://test.ganjiacheng.cn/testspider/test.php是一个返回post数据的接口</a></p>\n<p>在js的jquery的ajax里，</p>\n<pre>$.post(\"./test.php\",{du:\"0\",data:[\"1\",\"2\",\"3\"]},function(data){\n    console.log(data)\n})\n//结果：{\"du\":\"0\",\"data\":[\"1\",\"2\",\"3\"]}</pre>\n<p>而在python里</p>\n<pre>import requests\nimport json\npost_data={\n    \"du\":\"0\",\n    \"data\":[\"1\",\"2\",\"3\"],\n}\nres=requests.post('http://test.ganjiacheng.cn/testspider/test.php',data=post_data)\nprint(res.json())\n#结果：{'du': '0', 'data': '3'}</pre>\n<p>也便是数组形式如[]在post传输过程是不能保持的，上面的post_data传输的信息形式应该如du=0&amp;data%5B%5D=1&amp;data%5B%5D=2&amp;data%5B%5D=3。</p>\n<p>后来用了拼接的方法来解决这个问题。</p>\n<p>有待提升的地方，在有较多js操作及判断的网页中，要爬到对应信息需进行复刻同样的js操作，首先要读懂js，再来要自己实现一遍，对于综合能力要求还是比较高的。对于1688这种检测到爬虫的一些行为后会需要你登录后进行操作，虽然登录后通过chrome拿到cookie是可以使用的，但可能会有时限等限制。还有待探索！</p>\n","excerpt":"<p>做了接近一个月爬虫，中间爬到数据多的爬过唯品会，dpchallenge，frilly。百度图片和1688也是取了一部分数据来。这里做一些爬虫技术总结记录，包括基本的requests使用，json，bs4，OrderedDict，下载图片，多进程以及post一个数组。","more":"</p>\n<p>首先，基本的爬虫以唯品会（这里以女装做示范），主要用以接口获取json数据，json解析，json格式化。</p>\n<p>首先获取一下他的分类列表，由于返回的是callback里的函数，便去掉前后一些字符然后json格式化。</p>\n<pre>req=requests.Session()\ncateurl='https://category.vip.com/ajax/getCategory.php?callback=getCategory&amp;tree_id=117'\npplist=req.get(cateurl).text\nppjson=json.loads(pplist[12:-1])\npparr=ppjson['data'][0]['children'][0]['children']</pre>\n<p>之后访问分类的具体页面，用一点正则到他的js里解析出productIds，解析json，然后再通过里面的每个productid的拼接构成一个url，获取到商品服装信息（这里可得缩略图）。再进入服装详情页，得到商品大图。</p>\n<pre>for item in pparr:\n    searchurl='https://category.vip.com/'+item['url']\n        sec1=req.get(searchurl\n        jsonpic=re.findall(r'\"productIds\":(.*?),\"',sec1.text)\n        piclist=json.loads(jsonpic[0])\n        for n in range(2):\n            productIds='%2C'.join(map(str,piclist[50*n:(n+1)*50]))\n            resp=req.get('https://category.vip.com/ajax/mapi.php?service=product_info&amp;productIds='+productIds+'&amp;warehouse=VIP_SH')\n            projson=json.loads(resp.text)\n            if cate &gt; -5:\n                for j in projson['data']['products']:\n                    detail=req.get('https://detail.vip.com/detail-'+str(j['brandId'])+'-'+str(j['productId'])+'.html?f=ad')\n                    match=re.findall(r'&lt;a href=\"(.*?)\" class=\"J-mer-bigImgZoom\"&gt;',detail.text)\n                    for url in match:\n                        print(url)</pre>\n<p>插一个从网页下载图片到本地的小技巧</p>\n<pre>img=req.get(imageurl).content\nwith open('test.jpg','wb') as f:\n    f.write(img)\n    f.close()</pre>\n<p><a href=\"http://dpchallenge.com\">dpchallenge.com</a>，这是个摄影网站，除了爬图片还得爬摄影信息及评论，主要靠beautifulsoup和正则解析html文本。</p>\n<p>这里先爬了信息，其中也包括图片地址。之后在把所有图下载下来。</p>\n<p>这里做一部分beautifulsoup的记录</p>\n<pre>soup=BeautifulSoup(response.text,\"lxml\")\nsource_url=soup.find_all('标签',{'属性':'值(写True则代表有这个属性)'</pre>\n<p>另一个这里要注意的便是OrderedDict，由于python的object读取显示出来时会乱序或者并不是按写入的顺序显示的。所以需要用OrderedDict作代替</p>\n<pre>from collections import OrderedDict\ntest=OrderedDict()\ntest[\"c\"]=\"1\"\ntest[\"b\"]=\"2\"\ntest[\"a\"]=\"3\"\nprint(test)</pre>\n<p>最后这里在做一下爬虫期间所用的多进程的简单使用，这里用到了进程池以及进程锁：</p>\n<pre>from multiprocessing import Pool,Manager\ndef func(n,lock):\n    with lock:\n        print(n)\nif __name__==\"__main__\":\n    pool=Pool()\n    lock=Manager().Lock()\n    for i in range(10):\n        pool.apply_async(func, (i,lock))#这边也可以加回调\n    pool.close()\n    pool.join()</pre>\n<p>最后考虑一个post时发现的问题，也是平常可能会忽略而出错的。</p>\n<p><a href=\"http://test.ganjiacheng.cn/testspider/test.php%E6%98%AF%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9Epost%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8E%A5%E5%8F%A3\">http://test.ganjiacheng.cn/testspider/test.php是一个返回post数据的接口</a></p>\n<p>在js的jquery的ajax里，</p>\n<pre>$.post(\"./test.php\",{du:\"0\",data:[\"1\",\"2\",\"3\"]},function(data){\n    console.log(data)\n})\n//结果：{\"du\":\"0\",\"data\":[\"1\",\"2\",\"3\"]}</pre>\n<p>而在python里</p>\n<pre>import requests\nimport json\npost_data={\n    \"du\":\"0\",\n    \"data\":[\"1\",\"2\",\"3\"],\n}\nres=requests.post('http://test.ganjiacheng.cn/testspider/test.php',data=post_data)\nprint(res.json())\n#结果：{'du': '0', 'data': '3'}</pre>\n<p>也便是数组形式如[]在post传输过程是不能保持的，上面的post_data传输的信息形式应该如du=0&amp;data%5B%5D=1&amp;data%5B%5D=2&amp;data%5B%5D=3。</p>\n<p>后来用了拼接的方法来解决这个问题。</p>\n<p>有待提升的地方，在有较多js操作及判断的网页中，要爬到对应信息需进行复刻同样的js操作，首先要读懂js，再来要自己实现一遍，对于综合能力要求还是比较高的。对于1688这种检测到爬虫的一些行为后会需要你登录后进行操作，虽然登录后通过chrome拿到cookie是可以使用的，但可能会有时限等限制。还有待探索！</p>"},{"title":"用google的GAE部署kindle的自动推送","catalog":true,"date":"2017-10-08T01:24:01.000Z","_content":"\n偶然在github看到一个<a href=\"https://github.com/cdhigh/kindleear/\">kindleear</a>，发现可以在google的gea配置推送到kindle，便来试试，这里记下最简单的几步操作。<!--more-->\n\n具体可以参考网页---<a href=\"https://bookfere.com/post/19.html\">https://bookfere.com/post/19.html</a>\n\n首先，到google的<a href=\"https://console.developers.google.com/project?hl=zh-cn\">https://console.developers.google.com/project?hl=zh-cn</a>创建一个新项目。\n\n之后在<a href=\"https://console.cloud.google.com/\">https://console.cloud.google.com/</a>这里便可以看到已创建的项目（或者选择到已创建的项目）。\n\n在点击右上角 &gt;_ 这个按钮打开云端shell命令行。运行下面命令\n<pre class=\" language-bash\"><code class=\" language-bash\">gcloud beta app create</code></pre>\n完成后，在运行下面命令\n<pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">rm</span> -f uploader.sh* <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/kindlefere/KindleEar-Uploader/master/uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">chmod</span> +x uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n./uploader.sh</code></pre>\n输入你的 Gmail 地址和已有的项目ID，就完成了创建。\n\n完成后打开https://项目ID.appspot.com/ 就可以访问到配置界面\n\n用admin，admin登录，里面进行kindle以及订阅的一些设置。（可以选择每日自动推送）\n\n<strong>注：</strong>登录不了或者订阅打不开的话喝杯咖啡等一会儿就会好。\n\n<strong>以下两步必做</strong>\n\n<strong>注：要在亚马逊设备---kindle---设置---已认可的发件人电子邮箱列表，把刚刚的gmail加进去</strong>\n\n<strong>注：发送出现wrong SRC_EMAIL错误，点项目主页的左上角菜单---App引擎---设置---Email API 已获授权的发件人，添加自己的gmail即可</strong>\n\n具体效果：\n\n<img class=\"alignnone size-medium wp-image-415\" src=\"/img/uploads/2017/10/IMG_3516-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /><img class=\"alignnone size-medium wp-image-414\" src=\"/img/uploads/2017/10/IMG_3517-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" />\n","source":"_posts/2017/article_41_用google的GAE部署kindle的自动推送.md","raw":"\n---\ntitle: 用google的GAE部署kindle的自动推送\ncatalog: true\ndate: 2017-10-8 09:24:01\n---\n\n偶然在github看到一个<a href=\"https://github.com/cdhigh/kindleear/\">kindleear</a>，发现可以在google的gea配置推送到kindle，便来试试，这里记下最简单的几步操作。<!--more-->\n\n具体可以参考网页---<a href=\"https://bookfere.com/post/19.html\">https://bookfere.com/post/19.html</a>\n\n首先，到google的<a href=\"https://console.developers.google.com/project?hl=zh-cn\">https://console.developers.google.com/project?hl=zh-cn</a>创建一个新项目。\n\n之后在<a href=\"https://console.cloud.google.com/\">https://console.cloud.google.com/</a>这里便可以看到已创建的项目（或者选择到已创建的项目）。\n\n在点击右上角 &gt;_ 这个按钮打开云端shell命令行。运行下面命令\n<pre class=\" language-bash\"><code class=\" language-bash\">gcloud beta app create</code></pre>\n完成后，在运行下面命令\n<pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">rm</span> -f uploader.sh* <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/kindlefere/KindleEar-Uploader/master/uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">chmod</span> +x uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n./uploader.sh</code></pre>\n输入你的 Gmail 地址和已有的项目ID，就完成了创建。\n\n完成后打开https://项目ID.appspot.com/ 就可以访问到配置界面\n\n用admin，admin登录，里面进行kindle以及订阅的一些设置。（可以选择每日自动推送）\n\n<strong>注：</strong>登录不了或者订阅打不开的话喝杯咖啡等一会儿就会好。\n\n<strong>以下两步必做</strong>\n\n<strong>注：要在亚马逊设备---kindle---设置---已认可的发件人电子邮箱列表，把刚刚的gmail加进去</strong>\n\n<strong>注：发送出现wrong SRC_EMAIL错误，点项目主页的左上角菜单---App引擎---设置---Email API 已获授权的发件人，添加自己的gmail即可</strong>\n\n具体效果：\n\n<img class=\"alignnone size-medium wp-image-415\" src=\"/img/uploads/2017/10/IMG_3516-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /><img class=\"alignnone size-medium wp-image-414\" src=\"/img/uploads/2017/10/IMG_3517-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" />\n","slug":"2017/article_41_用google的GAE部署kindle的自动推送","published":1,"updated":"2021-01-27T04:46:28.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72q001a0770bot75j5r","content":"<p>偶然在github看到一个<a href=\"https://github.com/cdhigh/kindleear/\" target=\"_blank\" rel=\"external\">kindleear</a>，发现可以在google的gea配置推送到kindle，便来试试，这里记下最简单的几步操作。<a id=\"more\"></a></p>\n<p>具体可以参考网页—<a href=\"https://bookfere.com/post/19.html\" target=\"_blank\" rel=\"external\">https://bookfere.com/post/19.html</a></p>\n<p>首先，到google的<a href=\"https://console.developers.google.com/project?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://console.developers.google.com/project?hl=zh-cn</a>创建一个新项目。</p>\n<p>之后在<a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"external\">https://console.cloud.google.com/</a>这里便可以看到已创建的项目（或者选择到已创建的项目）。</p>\n<p>在点击右上角 &gt;_ 这个按钮打开云端shell命令行。运行下面命令</p>\n<pre class=\" language-bash\"><code class=\" language-bash\">gcloud beta app create</code></pre>\n<p>完成后，在运行下面命令</p>\n<pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">rm</span> -f uploader.sh* <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/kindlefere/KindleEar-Uploader/master/uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">chmod</span> +x uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n./uploader.sh</code></pre>\n<p>输入你的 Gmail 地址和已有的项目ID，就完成了创建。</p>\n<p>完成后打开https://项目ID.appspot.com/ 就可以访问到配置界面</p>\n<p>用admin，admin登录，里面进行kindle以及订阅的一些设置。（可以选择每日自动推送）</p>\n<p><strong>注：</strong>登录不了或者订阅打不开的话喝杯咖啡等一会儿就会好。</p>\n<p><strong>以下两步必做</strong></p>\n<p><strong>注：要在亚马逊设备—kindle—设置—已认可的发件人电子邮箱列表，把刚刚的gmail加进去</strong></p>\n<p><strong>注：发送出现wrong SRC_EMAIL错误，点项目主页的左上角菜单—App引擎—设置—Email API 已获授权的发件人，添加自己的gmail即可</strong></p>\n<p>具体效果：</p>\n<p><img class=\"alignnone size-medium wp-image-415\" src=\"/img/uploads/2017/10/IMG_3516-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\"><img class=\"alignnone size-medium wp-image-414\" src=\"/img/uploads/2017/10/IMG_3517-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\"></p>\n","excerpt":"<p>偶然在github看到一个<a href=\"https://github.com/cdhigh/kindleear/\">kindleear</a>，发现可以在google的gea配置推送到kindle，便来试试，这里记下最简单的几步操作。","more":"</p>\n<p>具体可以参考网页—<a href=\"https://bookfere.com/post/19.html\">https://bookfere.com/post/19.html</a></p>\n<p>首先，到google的<a href=\"https://console.developers.google.com/project?hl=zh-cn\">https://console.developers.google.com/project?hl=zh-cn</a>创建一个新项目。</p>\n<p>之后在<a href=\"https://console.cloud.google.com/\">https://console.cloud.google.com/</a>这里便可以看到已创建的项目（或者选择到已创建的项目）。</p>\n<p>在点击右上角 &gt;_ 这个按钮打开云端shell命令行。运行下面命令</p>\n<pre class=\" language-bash\"><code class=\" language-bash\">gcloud beta app create</code></pre>\n<p>完成后，在运行下面命令</p>\n<pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">rm</span> -f uploader.sh* <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/kindlefere/KindleEar-Uploader/master/uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">chmod</span> +x uploader.sh <span class=\"token operator\">&amp;&amp;</span> \\\n./uploader.sh</code></pre>\n<p>输入你的 Gmail 地址和已有的项目ID，就完成了创建。</p>\n<p>完成后打开https://项目ID.appspot.com/ 就可以访问到配置界面</p>\n<p>用admin，admin登录，里面进行kindle以及订阅的一些设置。（可以选择每日自动推送）</p>\n<p><strong>注：</strong>登录不了或者订阅打不开的话喝杯咖啡等一会儿就会好。</p>\n<p><strong>以下两步必做</strong></p>\n<p><strong>注：要在亚马逊设备—kindle—设置—已认可的发件人电子邮箱列表，把刚刚的gmail加进去</strong></p>\n<p><strong>注：发送出现wrong SRC_EMAIL错误，点项目主页的左上角菜单—App引擎—设置—Email API 已获授权的发件人，添加自己的gmail即可</strong></p>\n<p>具体效果：</p>\n<p><img class=\"alignnone size-medium wp-image-415\" src=\"/img/uploads/2017/10/IMG_3516-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /><img class=\"alignnone size-medium wp-image-414\" src=\"/img/uploads/2017/10/IMG_3517-225x300.jpg\" alt=\"\" width=\"225\" height=\"300\" /></p>"},{"title":"不会停下的setInterval","catalog":true,"date":"2017-12-07T14:38:35.000Z","_content":"\n关于定时器，如果把浏览器最小化或者看其他页面的时候，页面都会处于未激活状态，也就是对于chrome定时器会变1s运行一次，手机定时器则会直接暂停。<!--more-->\n\n比如运行如下代码，页面切到后台的话，定时器chrome会变一秒变一次，手机则会暂停。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test js&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var time=0;\n        setInterval(function(){\n            time++;\n            document.write(time+\" \");\n            document.title=time+\" \";\n        },100);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n然后先尝试一个web worker实现的不停下的setInterval，类似于让定时器部分js在后台运行，这样就可以一直运行定时器，前台收到msg展示即可。下面是html部分\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker = new Worker(\"worker.js\");\n\n        // 向worker.js发送信息\n        worker.postMessage( 'hello world' );\n\n        // 接收从worker.js发送的信息，存储在event.data中\n        worker.onmessage = function(event){\n            document.write(event.data+\" \");\n            document.title=event.data+\" \";\n        }\n\n        // 报错信息\n        worker.onerror=function(error){\n            console.log(error.filename,error.lineno,error.message);\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n下面是web worker的js部分。\n<pre>onmessage = function(event){\n    var data = event.data;\n    var time=0;\n    setInterval(function(){\n        // 向前端页面发送信息\n        postMessage(time);\n        time++;\n    }, 100)\n}</pre>\n再来一种比较奇妙的实现，主要参考<a href=\"https://imququ.com/post/ios-none-freeze-timer.html\">这里</a>。\n\n通过mate的refresh和setInterval的配合实现。不过这个好像最小只能实现一秒。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"2\" id=\"refresh\"&gt;\n    &lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var meta = document.getElementById(\"refresh\");\n        var time = 0;\n        setInterval(function() {\n            meta.content = meta.content;\n            document.title=time+\" \";\n            document.write(time+\" \");\n            time++;\n        }, parseInt(meta.content / 2) * 1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n最后再扯扯这个问题的初衷，一次面试被问到页面定时器显示时间由于会停止，后台运行（最小化）后回来时间不对了怎么办。\n\n这个容易调入上面的陷阱，想着怎么让定时器持续运行，其实只要setInterval获取系统时间便可以。即使停了回来也会运行一次获取到系统时间。代码如下\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;time&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"time\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        setInterval(function(){\n            document.getElementById(\"time\").innerHTML=new Date().toString();\n        },1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\nThat's all；\n","source":"_posts/2017/article_47_不会停下的setInterval.md","raw":"\n---\ntitle: 不会停下的setInterval\ncatalog: true\ndate: 2017-12-7 22:38:35\n---\n\n关于定时器，如果把浏览器最小化或者看其他页面的时候，页面都会处于未激活状态，也就是对于chrome定时器会变1s运行一次，手机定时器则会直接暂停。<!--more-->\n\n比如运行如下代码，页面切到后台的话，定时器chrome会变一秒变一次，手机则会暂停。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test js&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var time=0;\n        setInterval(function(){\n            time++;\n            document.write(time+\" \");\n            document.title=time+\" \";\n        },100);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n然后先尝试一个web worker实现的不停下的setInterval，类似于让定时器部分js在后台运行，这样就可以一直运行定时器，前台收到msg展示即可。下面是html部分\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker = new Worker(\"worker.js\");\n\n        // 向worker.js发送信息\n        worker.postMessage( 'hello world' );\n\n        // 接收从worker.js发送的信息，存储在event.data中\n        worker.onmessage = function(event){\n            document.write(event.data+\" \");\n            document.title=event.data+\" \";\n        }\n\n        // 报错信息\n        worker.onerror=function(error){\n            console.log(error.filename,error.lineno,error.message);\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n下面是web worker的js部分。\n<pre>onmessage = function(event){\n    var data = event.data;\n    var time=0;\n    setInterval(function(){\n        // 向前端页面发送信息\n        postMessage(time);\n        time++;\n    }, 100)\n}</pre>\n再来一种比较奇妙的实现，主要参考<a href=\"https://imququ.com/post/ios-none-freeze-timer.html\">这里</a>。\n\n通过mate的refresh和setInterval的配合实现。不过这个好像最小只能实现一秒。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"2\" id=\"refresh\"&gt;\n    &lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var meta = document.getElementById(\"refresh\");\n        var time = 0;\n        setInterval(function() {\n            meta.content = meta.content;\n            document.title=time+\" \";\n            document.write(time+\" \");\n            time++;\n        }, parseInt(meta.content / 2) * 1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n最后再扯扯这个问题的初衷，一次面试被问到页面定时器显示时间由于会停止，后台运行（最小化）后回来时间不对了怎么办。\n\n这个容易调入上面的陷阱，想着怎么让定时器持续运行，其实只要setInterval获取系统时间便可以。即使停了回来也会运行一次获取到系统时间。代码如下\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;time&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"time\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        setInterval(function(){\n            document.getElementById(\"time\").innerHTML=new Date().toString();\n        },1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\nThat's all；\n","slug":"2017/article_47_不会停下的setInterval","published":1,"updated":"2021-01-27T04:46:28.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72r001b0770mupyu0yr","content":"<p>关于定时器，如果把浏览器最小化或者看其他页面的时候，页面都会处于未激活状态，也就是对于chrome定时器会变1s运行一次，手机定时器则会直接暂停。<a id=\"more\"></a></p>\n<p>比如运行如下代码，页面切到后台的话，定时器chrome会变一秒变一次，手机则会暂停。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test js&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var time=0;\n        setInterval(function(){\n            time++;\n            document.write(time+\" \");\n            document.title=time+\" \";\n        },100);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>然后先尝试一个web worker实现的不停下的setInterval，类似于让定时器部分js在后台运行，这样就可以一直运行定时器，前台收到msg展示即可。下面是html部分</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker = new Worker(\"worker.js\");\n\n        // 向worker.js发送信息\n        worker.postMessage( 'hello world' );\n\n        // 接收从worker.js发送的信息，存储在event.data中\n        worker.onmessage = function(event){\n            document.write(event.data+\" \");\n            document.title=event.data+\" \";\n        }\n\n        // 报错信息\n        worker.onerror=function(error){\n            console.log(error.filename,error.lineno,error.message);\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>下面是web worker的js部分。</p>\n<pre>onmessage = function(event){\n    var data = event.data;\n    var time=0;\n    setInterval(function(){\n        // 向前端页面发送信息\n        postMessage(time);\n        time++;\n    }, 100)\n}</pre>\n<p>再来一种比较奇妙的实现，主要参考<a href=\"https://imququ.com/post/ios-none-freeze-timer.html\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>通过mate的refresh和setInterval的配合实现。不过这个好像最小只能实现一秒。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"2\" id=\"refresh\"&gt;\n    &lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var meta = document.getElementById(\"refresh\");\n        var time = 0;\n        setInterval(function() {\n            meta.content = meta.content;\n            document.title=time+\" \";\n            document.write(time+\" \");\n            time++;\n        }, parseInt(meta.content / 2) * 1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>最后再扯扯这个问题的初衷，一次面试被问到页面定时器显示时间由于会停止，后台运行（最小化）后回来时间不对了怎么办。</p>\n<p>这个容易调入上面的陷阱，想着怎么让定时器持续运行，其实只要setInterval获取系统时间便可以。即使停了回来也会运行一次获取到系统时间。代码如下</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;time&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"time\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        setInterval(function(){\n            document.getElementById(\"time\").innerHTML=new Date().toString();\n        },1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>That’s all；</p>\n","excerpt":"<p>关于定时器，如果把浏览器最小化或者看其他页面的时候，页面都会处于未激活状态，也就是对于chrome定时器会变1s运行一次，手机定时器则会直接暂停。","more":"</p>\n<p>比如运行如下代码，页面切到后台的话，定时器chrome会变一秒变一次，手机则会暂停。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test js&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var time=0;\n        setInterval(function(){\n            time++;\n            document.write(time+\" \");\n            document.title=time+\" \";\n        },100);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>然后先尝试一个web worker实现的不停下的setInterval，类似于让定时器部分js在后台运行，这样就可以一直运行定时器，前台收到msg展示即可。下面是html部分</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var worker = new Worker(\"worker.js\");\n\n        // 向worker.js发送信息\n        worker.postMessage( 'hello world' );\n\n        // 接收从worker.js发送的信息，存储在event.data中\n        worker.onmessage = function(event){\n            document.write(event.data+\" \");\n            document.title=event.data+\" \";\n        }\n\n        // 报错信息\n        worker.onerror=function(error){\n            console.log(error.filename,error.lineno,error.message);\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>下面是web worker的js部分。</p>\n<pre>onmessage = function(event){\n    var data = event.data;\n    var time=0;\n    setInterval(function(){\n        // 向前端页面发送信息\n        postMessage(time);\n        time++;\n    }, 100)\n}</pre>\n<p>再来一种比较奇妙的实现，主要参考<a href=\"https://imququ.com/post/ios-none-freeze-timer.html\">这里</a>。</p>\n<p>通过mate的refresh和setInterval的配合实现。不过这个好像最小只能实现一秒。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"2\" id=\"refresh\"&gt;\n    &lt;title&gt;123&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var meta = document.getElementById(\"refresh\");\n        var time = 0;\n        setInterval(function() {\n            meta.content = meta.content;\n            document.title=time+\" \";\n            document.write(time+\" \");\n            time++;\n        }, parseInt(meta.content / 2) * 1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>最后再扯扯这个问题的初衷，一次面试被问到页面定时器显示时间由于会停止，后台运行（最小化）后回来时间不对了怎么办。</p>\n<p>这个容易调入上面的陷阱，想着怎么让定时器持续运行，其实只要setInterval获取系统时间便可以。即使停了回来也会运行一次获取到系统时间。代码如下</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;time&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"time\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        setInterval(function(){\n            document.getElementById(\"time\").innerHTML=new Date().toString();\n        },1000);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>That’s all；</p>"},{"title":"sublime装个google翻译的package","catalog":true,"date":"2017-11-26T05:25:56.000Z","_content":"\n原以为翻译这种包package control就可以解决，还是有许多问题出现，所以记录一下。顺便了解一下sublime包文件结构，毕竟也是python写的！<!--more-->\n\n这里引用的是github上的一个<a href=\"https://github.com/mullnerz/SublimeText-Google-Translate-Plugin\">google 翻译包</a>，这是另一个人改过的，主要更新了google的api，他的原作是在<a href=\"https://github.com/MTimer/SublimeText-Google-Translate-Plugin\">这里</a>。\n\n这里的操作皆为windows平台下，首先用git\n<pre><code>git clone https://github.com/MTimer/SublimeText-Google-Translate-Plugin 'Inline Google Translate'</code></pre>\n打开sublime，点击preferences-&gt;browse packages。把clone下来的文件复制到这里，文件名必须为 Inline Google Translate。\n\n直接使用当然还会有问题，这里首先是使用代理的问题，由于gwf，需要通过代理来访问google api。因此在preferences-&gt;package setting-&gt;google translate-&gt;setting user中，添加以下，proxy部分添加自己电脑使用的代理的协议和端口，这里使用的是shadowsocks的默认的http和端口。\n<pre>{     \n    \"source_language\": \"\", // 默认是 '自动检测'\n    \"target_language\": \"zh-CN\", // 默认是 en  英文\n    \"target_type\": \"html\",  // 输出格式，plain 或者 html 格式\n    \"proxy_enable\": \"yes\",  // 开启或关闭代理\n    \"proxy_type\": \"http\", // socks4 或者 socks5 或者 http\n    \"proxy_host\": \"127.0.0.1\",  // 比如 127.0.0.1\n    \"proxy_port\": \"1080\"    // 比如 9050\n}</pre>\n到这里可以尝试选中一行单词，按下ctrl+alt+g，如果有效果，则前面部分完成了；如果没效果，则按ctrl+~看命令行输出的错误。\n\n这个包还有另一个问题就是如果选择多行只会翻译第一行。因此对其中的python代码做一定的修改。在goTranslate.py 第一个run函数部分\n<pre>def run(self, edit, proxy_enable = settings.get(\"proxy_enable\"), proxy_type = settings.get(\"proxy_type\"), proxy_host = settings.get(\"proxy_host\"), proxy_port = settings.get(\"proxy_port\"), source_language = settings.get(\"source_language\"), target_language = settings.get(\"target_language\")):\n        if not source_language:\n            source_language = settings.get(\"source_language\")\n        if not target_language:\n            target_language = settings.get(\"target_language\")\n        if not proxy_enable:\n            proxy_enable = settings.get(\"proxy_enable\")\n        if not proxy_type:\n            proxy_type = settings.get(\"proxy_type\")\n        if not proxy_host:\n            proxy_host = settings.get(\"proxy_host\")\n        if not proxy_port:\n            proxy_port = settings.get(\"proxy_port\")\n        target_type = settings.get(\"target_type\")\n\n        for region in self.view.sel():\n            if not region.empty():\n\n                v = self.view\n                selection = v.substr(region).encode('utf-8')\n                print(selection)\n                translate = GoogleTranslate(proxy_enable, proxy_type, proxy_host, proxy_port, source_language, target_language)\n                #主要改了这下面部分，使用分行获取翻译结果并合并\n                tmp=[]\n                if not target_language:\n                    self.view.run_command(\"go_translate_to\")\n                    return                          \n                else:\n                    for line in selection.split(b\"\\n\"):\n                        tmp.append(translate.translate(line, target_type))\n                    result=\"\\n\".join(tmp)\n\n                v.replace(edit, region, result)\n                if not source_language:\n                    detected = 'Auto'\n                else:\n                    detected = source_language\n                sublime.status_message(u'Done! (translate '+detected+' --&gt; '+target_language+')')</pre>\n完成保存sublime就会自动重新加载包。\n\n之后再可以试试多行的效果。\n\n另外插一个就是快捷键，由于这里的ctrl+alt+g一般一只手操作不来，所以也想自定义一下。\n\n以文本的形式打开同目录下的Default (Windows).sublime-keymap。改第一个keys的内容便是修改快捷键，我这里修改为了ctrl+alt+z，因为ctrl+z可以回撤一步，两个便可以配合使用。\n\n这里涉及到了sublime包的一些编写和使用，感觉也并不是十分复杂，必要也可以自己写个！\n","source":"_posts/2017/article_44_sublime装个google翻译的package.md","raw":"\n---\ntitle: sublime装个google翻译的package\ncatalog: true\ndate: 2017-11-26 13:25:56\n---\n\n原以为翻译这种包package control就可以解决，还是有许多问题出现，所以记录一下。顺便了解一下sublime包文件结构，毕竟也是python写的！<!--more-->\n\n这里引用的是github上的一个<a href=\"https://github.com/mullnerz/SublimeText-Google-Translate-Plugin\">google 翻译包</a>，这是另一个人改过的，主要更新了google的api，他的原作是在<a href=\"https://github.com/MTimer/SublimeText-Google-Translate-Plugin\">这里</a>。\n\n这里的操作皆为windows平台下，首先用git\n<pre><code>git clone https://github.com/MTimer/SublimeText-Google-Translate-Plugin 'Inline Google Translate'</code></pre>\n打开sublime，点击preferences-&gt;browse packages。把clone下来的文件复制到这里，文件名必须为 Inline Google Translate。\n\n直接使用当然还会有问题，这里首先是使用代理的问题，由于gwf，需要通过代理来访问google api。因此在preferences-&gt;package setting-&gt;google translate-&gt;setting user中，添加以下，proxy部分添加自己电脑使用的代理的协议和端口，这里使用的是shadowsocks的默认的http和端口。\n<pre>{     \n    \"source_language\": \"\", // 默认是 '自动检测'\n    \"target_language\": \"zh-CN\", // 默认是 en  英文\n    \"target_type\": \"html\",  // 输出格式，plain 或者 html 格式\n    \"proxy_enable\": \"yes\",  // 开启或关闭代理\n    \"proxy_type\": \"http\", // socks4 或者 socks5 或者 http\n    \"proxy_host\": \"127.0.0.1\",  // 比如 127.0.0.1\n    \"proxy_port\": \"1080\"    // 比如 9050\n}</pre>\n到这里可以尝试选中一行单词，按下ctrl+alt+g，如果有效果，则前面部分完成了；如果没效果，则按ctrl+~看命令行输出的错误。\n\n这个包还有另一个问题就是如果选择多行只会翻译第一行。因此对其中的python代码做一定的修改。在goTranslate.py 第一个run函数部分\n<pre>def run(self, edit, proxy_enable = settings.get(\"proxy_enable\"), proxy_type = settings.get(\"proxy_type\"), proxy_host = settings.get(\"proxy_host\"), proxy_port = settings.get(\"proxy_port\"), source_language = settings.get(\"source_language\"), target_language = settings.get(\"target_language\")):\n        if not source_language:\n            source_language = settings.get(\"source_language\")\n        if not target_language:\n            target_language = settings.get(\"target_language\")\n        if not proxy_enable:\n            proxy_enable = settings.get(\"proxy_enable\")\n        if not proxy_type:\n            proxy_type = settings.get(\"proxy_type\")\n        if not proxy_host:\n            proxy_host = settings.get(\"proxy_host\")\n        if not proxy_port:\n            proxy_port = settings.get(\"proxy_port\")\n        target_type = settings.get(\"target_type\")\n\n        for region in self.view.sel():\n            if not region.empty():\n\n                v = self.view\n                selection = v.substr(region).encode('utf-8')\n                print(selection)\n                translate = GoogleTranslate(proxy_enable, proxy_type, proxy_host, proxy_port, source_language, target_language)\n                #主要改了这下面部分，使用分行获取翻译结果并合并\n                tmp=[]\n                if not target_language:\n                    self.view.run_command(\"go_translate_to\")\n                    return                          \n                else:\n                    for line in selection.split(b\"\\n\"):\n                        tmp.append(translate.translate(line, target_type))\n                    result=\"\\n\".join(tmp)\n\n                v.replace(edit, region, result)\n                if not source_language:\n                    detected = 'Auto'\n                else:\n                    detected = source_language\n                sublime.status_message(u'Done! (translate '+detected+' --&gt; '+target_language+')')</pre>\n完成保存sublime就会自动重新加载包。\n\n之后再可以试试多行的效果。\n\n另外插一个就是快捷键，由于这里的ctrl+alt+g一般一只手操作不来，所以也想自定义一下。\n\n以文本的形式打开同目录下的Default (Windows).sublime-keymap。改第一个keys的内容便是修改快捷键，我这里修改为了ctrl+alt+z，因为ctrl+z可以回撤一步，两个便可以配合使用。\n\n这里涉及到了sublime包的一些编写和使用，感觉也并不是十分复杂，必要也可以自己写个！\n","slug":"2017/article_44_sublime装个google翻译的package","published":1,"updated":"2021-01-27T04:46:28.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72u001c0770z0og1npb","content":"<p>原以为翻译这种包package control就可以解决，还是有许多问题出现，所以记录一下。顺便了解一下sublime包文件结构，毕竟也是python写的！<a id=\"more\"></a></p>\n<p>这里引用的是github上的一个<a href=\"https://github.com/mullnerz/SublimeText-Google-Translate-Plugin\" target=\"_blank\" rel=\"external\">google 翻译包</a>，这是另一个人改过的，主要更新了google的api，他的原作是在<a href=\"https://github.com/MTimer/SublimeText-Google-Translate-Plugin\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>这里的操作皆为windows平台下，首先用git</p>\n<pre><code>git clone https://github.com/MTimer/SublimeText-Google-Translate-Plugin 'Inline Google Translate'</code></pre>\n<p>打开sublime，点击preferences-&gt;browse packages。把clone下来的文件复制到这里，文件名必须为 Inline Google Translate。</p>\n<p>直接使用当然还会有问题，这里首先是使用代理的问题，由于gwf，需要通过代理来访问google api。因此在preferences-&gt;package setting-&gt;google translate-&gt;setting user中，添加以下，proxy部分添加自己电脑使用的代理的协议和端口，这里使用的是shadowsocks的默认的http和端口。</p>\n<pre>{     \n    \"source_language\": \"\", // 默认是 '自动检测'\n    \"target_language\": \"zh-CN\", // 默认是 en  英文\n    \"target_type\": \"html\",  // 输出格式，plain 或者 html 格式\n    \"proxy_enable\": \"yes\",  // 开启或关闭代理\n    \"proxy_type\": \"http\", // socks4 或者 socks5 或者 http\n    \"proxy_host\": \"127.0.0.1\",  // 比如 127.0.0.1\n    \"proxy_port\": \"1080\"    // 比如 9050\n}</pre>\n<p>到这里可以尝试选中一行单词，按下ctrl+alt+g，如果有效果，则前面部分完成了；如果没效果，则按ctrl+~看命令行输出的错误。</p>\n<p>这个包还有另一个问题就是如果选择多行只会翻译第一行。因此对其中的python代码做一定的修改。<a href=\"http://xn--goTranslate-7k1t.py\" target=\"_blank\" rel=\"external\">在goTranslate.py</a> 第一个run函数部分</p>\n<pre>def run(self, edit, proxy_enable = settings.get(\"proxy_enable\"), proxy_type = settings.get(\"proxy_type\"), proxy_host = settings.get(\"proxy_host\"), proxy_port = settings.get(\"proxy_port\"), source_language = settings.get(\"source_language\"), target_language = settings.get(\"target_language\")):\n        if not source_language:\n            source_language = settings.get(\"source_language\")\n        if not target_language:\n            target_language = settings.get(\"target_language\")\n        if not proxy_enable:\n            proxy_enable = settings.get(\"proxy_enable\")\n        if not proxy_type:\n            proxy_type = settings.get(\"proxy_type\")\n        if not proxy_host:\n            proxy_host = settings.get(\"proxy_host\")\n        if not proxy_port:\n            proxy_port = settings.get(\"proxy_port\")\n        target_type = settings.get(\"target_type\")\n\n        for region in self.view.sel():\n            if not region.empty():\n\n                v = self.view\n                selection = v.substr(region).encode('utf-8')\n                print(selection)\n                translate = GoogleTranslate(proxy_enable, proxy_type, proxy_host, proxy_port, source_language, target_language)\n                #主要改了这下面部分，使用分行获取翻译结果并合并\n                tmp=[]\n                if not target_language:\n                    self.view.run_command(\"go_translate_to\")\n                    return                          \n                else:\n                    for line in selection.split(b\"\\n\"):\n                        tmp.append(translate.translate(line, target_type))\n                    result=\"\\n\".join(tmp)\n\n                v.replace(edit, region, result)\n                if not source_language:\n                    detected = 'Auto'\n                else:\n                    detected = source_language\n                sublime.status_message(u'Done! (translate '+detected+' --&gt; '+target_language+')')</pre>\n<p>完成保存sublime就会自动重新加载包。</p>\n<p>之后再可以试试多行的效果。</p>\n<p>另外插一个就是快捷键，由于这里的ctrl+alt+g一般一只手操作不来，所以也想自定义一下。</p>\n<p>以文本的形式打开同目录下的Default (Windows).sublime-keymap。改第一个keys的内容便是修改快捷键，我这里修改为了ctrl+alt+z，因为ctrl+z可以回撤一步，两个便可以配合使用。</p>\n<p>这里涉及到了sublime包的一些编写和使用，感觉也并不是十分复杂，必要也可以自己写个！</p>\n","excerpt":"<p>原以为翻译这种包package control就可以解决，还是有许多问题出现，所以记录一下。顺便了解一下sublime包文件结构，毕竟也是python写的！","more":"</p>\n<p>这里引用的是github上的一个<a href=\"https://github.com/mullnerz/SublimeText-Google-Translate-Plugin\">google 翻译包</a>，这是另一个人改过的，主要更新了google的api，他的原作是在<a href=\"https://github.com/MTimer/SublimeText-Google-Translate-Plugin\">这里</a>。</p>\n<p>这里的操作皆为windows平台下，首先用git</p>\n<pre><code>git clone https://github.com/MTimer/SublimeText-Google-Translate-Plugin 'Inline Google Translate'</code></pre>\n<p>打开sublime，点击preferences-&gt;browse packages。把clone下来的文件复制到这里，文件名必须为 Inline Google Translate。</p>\n<p>直接使用当然还会有问题，这里首先是使用代理的问题，由于gwf，需要通过代理来访问google api。因此在preferences-&gt;package setting-&gt;google translate-&gt;setting user中，添加以下，proxy部分添加自己电脑使用的代理的协议和端口，这里使用的是shadowsocks的默认的http和端口。</p>\n<pre>{     \n    \"source_language\": \"\", // 默认是 '自动检测'\n    \"target_language\": \"zh-CN\", // 默认是 en  英文\n    \"target_type\": \"html\",  // 输出格式，plain 或者 html 格式\n    \"proxy_enable\": \"yes\",  // 开启或关闭代理\n    \"proxy_type\": \"http\", // socks4 或者 socks5 或者 http\n    \"proxy_host\": \"127.0.0.1\",  // 比如 127.0.0.1\n    \"proxy_port\": \"1080\"    // 比如 9050\n}</pre>\n<p>到这里可以尝试选中一行单词，按下ctrl+alt+g，如果有效果，则前面部分完成了；如果没效果，则按ctrl+~看命令行输出的错误。</p>\n<p>这个包还有另一个问题就是如果选择多行只会翻译第一行。因此对其中的python代码做一定的修改。<a href=\"http://xn--goTranslate-7k1t.py\">在goTranslate.py</a> 第一个run函数部分</p>\n<pre>def run(self, edit, proxy_enable = settings.get(\"proxy_enable\"), proxy_type = settings.get(\"proxy_type\"), proxy_host = settings.get(\"proxy_host\"), proxy_port = settings.get(\"proxy_port\"), source_language = settings.get(\"source_language\"), target_language = settings.get(\"target_language\")):\n        if not source_language:\n            source_language = settings.get(\"source_language\")\n        if not target_language:\n            target_language = settings.get(\"target_language\")\n        if not proxy_enable:\n            proxy_enable = settings.get(\"proxy_enable\")\n        if not proxy_type:\n            proxy_type = settings.get(\"proxy_type\")\n        if not proxy_host:\n            proxy_host = settings.get(\"proxy_host\")\n        if not proxy_port:\n            proxy_port = settings.get(\"proxy_port\")\n        target_type = settings.get(\"target_type\")\n\n        for region in self.view.sel():\n            if not region.empty():\n\n                v = self.view\n                selection = v.substr(region).encode('utf-8')\n                print(selection)\n                translate = GoogleTranslate(proxy_enable, proxy_type, proxy_host, proxy_port, source_language, target_language)\n                #主要改了这下面部分，使用分行获取翻译结果并合并\n                tmp=[]\n                if not target_language:\n                    self.view.run_command(\"go_translate_to\")\n                    return                          \n                else:\n                    for line in selection.split(b\"\\n\"):\n                        tmp.append(translate.translate(line, target_type))\n                    result=\"\\n\".join(tmp)\n\n                v.replace(edit, region, result)\n                if not source_language:\n                    detected = 'Auto'\n                else:\n                    detected = source_language\n                sublime.status_message(u'Done! (translate '+detected+' --&gt; '+target_language+')')</pre>\n<p>完成保存sublime就会自动重新加载包。</p>\n<p>之后再可以试试多行的效果。</p>\n<p>另外插一个就是快捷键，由于这里的ctrl+alt+g一般一只手操作不来，所以也想自定义一下。</p>\n<p>以文本的形式打开同目录下的Default (Windows).sublime-keymap。改第一个keys的内容便是修改快捷键，我这里修改为了ctrl+alt+z，因为ctrl+z可以回撤一步，两个便可以配合使用。</p>\n<p>这里涉及到了sublime包的一些编写和使用，感觉也并不是十分复杂，必要也可以自己写个！</p>"},{"title":"three.js第四发，粒子与第一视角的尝试","catalog":true,"date":"2017-08-01T07:52:15.000Z","_content":"\n<a href=\"http://test.ganjiacheng.cn/3d/test3d5.html\">点这里先看效果</a>，会有点晕，毕竟第一视角。\n\n其中的大致思路：首先是舞台， 摄像机，渲染器。然后有一个clock，用于更新摄像机位置时候。<!--more-->FirstPersonControls用于制作第一视角的，后面也设置了许多参数。createSprites函数中先是创造了点云的几何和材料，然后把向量点加进去，最后在把点云加到舞台。通过渲染持续创造点云，为所有点云改变位置。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/FirstPersonControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var clock = new THREE.Clock();\n            var stats=initStats();\n\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(0,0,0);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0x000000);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n\n            var camControls = new THREE.FirstPersonControls(camera);\n            camControls.lookSpeed = 0.4;\n            camControls.movementSpeed = 20;\n            camControls.noFly = true;\n            camControls.lookVertical = true;\n            camControls.constrainVertical = true;\n            camControls.verticalMin = 1.0;\n            camControls.verticalMax = 2.0;\n            camControls.lon = -180;\n            camControls.lat = 180;\n\n            function createSprites(){\n                pic=\"image/Sam\"+Math.floor(Math.random()*10)+\".jpg\";\n                var texture=THREE.ImageUtils.loadTexture(pic);\n                var geom=new THREE.Geometry();\n                var material=new THREE.PointCloudMaterial({\n                    size:4,\n                    transparent:true,\n                    map: texture,\n                    blending: THREE.AdditiveBlending,\n                    color:0x5fe0ff,\n                });\n                var range=500;\n                for(var i=0;i&lt;500;i++){\n                    var particle=new THREE.Vector3(Math.random() * range - range / 2, Math.random() * range + range / 5, Math.random() * range - range / 2);\n                    geom.vertices.push(particle);\n                    var color=new THREE.Color(0x00ff00);\n                    color.setHSL(color.getHSL().h,color.getHSL().s,Math.random()*color.getHSL().l);\n                    geom.colors.push(color);\n                }\n                cloud=new THREE.PointCloud(geom,material);\n                cloud.sortParticles=true;\n                scene.add(cloud);\n            }\n\n            function fulldown(){\n                scene.children.pop();\n            }\n\n            createSprites();\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n            \n            var step=0;\n            var v=0;\n            function rendererScene(){\n                stats.update();\n                var delta = clock.getDelta();\n                camControls.update(delta);\n                step+=2;\n                if(step%100==0){\n                    createSprites();\n                }\n                for(var i=0;i&lt;scene.children.length;i++){\n                    scene.children[i].position.y-=2;\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果是不断有数字掉落，这种还可以模拟下雨下雪之类。\n","source":"_posts/2017/article_38_three.js第四发，粒子与第一视角的尝试.md","raw":"\n---\ntitle: three.js第四发，粒子与第一视角的尝试\ncatalog: true\ndate: 2017-8-1 15:52:15\n---\n\n<a href=\"http://test.ganjiacheng.cn/3d/test3d5.html\">点这里先看效果</a>，会有点晕，毕竟第一视角。\n\n其中的大致思路：首先是舞台， 摄像机，渲染器。然后有一个clock，用于更新摄像机位置时候。<!--more-->FirstPersonControls用于制作第一视角的，后面也设置了许多参数。createSprites函数中先是创造了点云的几何和材料，然后把向量点加进去，最后在把点云加到舞台。通过渲染持续创造点云，为所有点云改变位置。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/FirstPersonControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var clock = new THREE.Clock();\n            var stats=initStats();\n\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(0,0,0);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0x000000);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n\n            var camControls = new THREE.FirstPersonControls(camera);\n            camControls.lookSpeed = 0.4;\n            camControls.movementSpeed = 20;\n            camControls.noFly = true;\n            camControls.lookVertical = true;\n            camControls.constrainVertical = true;\n            camControls.verticalMin = 1.0;\n            camControls.verticalMax = 2.0;\n            camControls.lon = -180;\n            camControls.lat = 180;\n\n            function createSprites(){\n                pic=\"image/Sam\"+Math.floor(Math.random()*10)+\".jpg\";\n                var texture=THREE.ImageUtils.loadTexture(pic);\n                var geom=new THREE.Geometry();\n                var material=new THREE.PointCloudMaterial({\n                    size:4,\n                    transparent:true,\n                    map: texture,\n                    blending: THREE.AdditiveBlending,\n                    color:0x5fe0ff,\n                });\n                var range=500;\n                for(var i=0;i&lt;500;i++){\n                    var particle=new THREE.Vector3(Math.random() * range - range / 2, Math.random() * range + range / 5, Math.random() * range - range / 2);\n                    geom.vertices.push(particle);\n                    var color=new THREE.Color(0x00ff00);\n                    color.setHSL(color.getHSL().h,color.getHSL().s,Math.random()*color.getHSL().l);\n                    geom.colors.push(color);\n                }\n                cloud=new THREE.PointCloud(geom,material);\n                cloud.sortParticles=true;\n                scene.add(cloud);\n            }\n\n            function fulldown(){\n                scene.children.pop();\n            }\n\n            createSprites();\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n            \n            var step=0;\n            var v=0;\n            function rendererScene(){\n                stats.update();\n                var delta = clock.getDelta();\n                camControls.update(delta);\n                step+=2;\n                if(step%100==0){\n                    createSprites();\n                }\n                for(var i=0;i&lt;scene.children.length;i++){\n                    scene.children[i].position.y-=2;\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果是不断有数字掉落，这种还可以模拟下雨下雪之类。\n","slug":"2017/article_38_three.js第四发，粒子与第一视角的尝试","published":1,"updated":"2021-01-27T04:46:28.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72v001d0770d1jxtam2","content":"<p><a href=\"http://test.ganjiacheng.cn/3d/test3d5.html\" target=\"_blank\" rel=\"external\">点这里先看效果</a>，会有点晕，毕竟第一视角。</p>\n<p>其中的大致思路：首先是舞台， 摄像机，渲染器。然后有一个clock，用于更新摄像机位置时候。<a id=\"more\"></a>FirstPersonControls用于制作第一视角的，后面也设置了许多参数。createSprites函数中先是创造了点云的几何和材料，然后把向量点加进去，最后在把点云加到舞台。通过渲染持续创造点云，为所有点云改变位置。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/FirstPersonControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var clock = new THREE.Clock();\n            var stats=initStats();\n\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(0,0,0);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0x000000);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n\n            var camControls = new THREE.FirstPersonControls(camera);\n            camControls.lookSpeed = 0.4;\n            camControls.movementSpeed = 20;\n            camControls.noFly = true;\n            camControls.lookVertical = true;\n            camControls.constrainVertical = true;\n            camControls.verticalMin = 1.0;\n            camControls.verticalMax = 2.0;\n            camControls.lon = -180;\n            camControls.lat = 180;\n\n            function createSprites(){\n                pic=\"image/Sam\"+Math.floor(Math.random()*10)+\".jpg\";\n                var texture=THREE.ImageUtils.loadTexture(pic);\n                var geom=new THREE.Geometry();\n                var material=new THREE.PointCloudMaterial({\n                    size:4,\n                    transparent:true,\n                    map: texture,\n                    blending: THREE.AdditiveBlending,\n                    color:0x5fe0ff,\n                });\n                var range=500;\n                for(var i=0;i&lt;500;i++){\n                    var particle=new THREE.Vector3(Math.random() * range - range / 2, Math.random() * range + range / 5, Math.random() * range - range / 2);\n                    geom.vertices.push(particle);\n                    var color=new THREE.Color(0x00ff00);\n                    color.setHSL(color.getHSL().h,color.getHSL().s,Math.random()*color.getHSL().l);\n                    geom.colors.push(color);\n                }\n                cloud=new THREE.PointCloud(geom,material);\n                cloud.sortParticles=true;\n                scene.add(cloud);\n            }\n\n            function fulldown(){\n                scene.children.pop();\n            }\n\n            createSprites();\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n            \n            var step=0;\n            var v=0;\n            function rendererScene(){\n                stats.update();\n                var delta = clock.getDelta();\n                camControls.update(delta);\n                step+=2;\n                if(step%100==0){\n                    createSprites();\n                }\n                for(var i=0;i&lt;scene.children.length;i++){\n                    scene.children[i].position.y-=2;\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果是不断有数字掉落，这种还可以模拟下雨下雪之类。</p>\n","excerpt":"<p><a href=\"http://test.ganjiacheng.cn/3d/test3d5.html\">点这里先看效果</a>，会有点晕，毕竟第一视角。</p>\n<p>其中的大致思路：首先是舞台， 摄像机，渲染器。然后有一个clock，用于更新摄像机位置时候。","more":"FirstPersonControls用于制作第一视角的，后面也设置了许多参数。createSprites函数中先是创造了点云的几何和材料，然后把向量点加进去，最后在把点云加到舞台。通过渲染持续创造点云，为所有点云改变位置。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;test3d3&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        body{\n            margin: 0;\n            overflow: hidden;\n        }\n        #stats{\n            position: absolute;\n            left: 0;\n            top: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"stats\"&gt;&lt;/div&gt;\n    &lt;div id=\"webgl\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/three.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/stats.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"learning-threejs/libs/FirstPersonControls.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function init(){\n            var clock = new THREE.Clock();\n            var stats=initStats();\n\n            var scene=new THREE.Scene();\n\n            var camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n            camera.position.set(0,0,0);\n            camera.lookAt(scene.position);\n            \n            var renderer=new THREE.WebGLRenderer();\n            renderer.setClearColor(0x000000);\n            renderer.setSize(window.innerWidth,window.innerHeight);\n            renderer.shadowMapEnable=true;\n\n            var camControls = new THREE.FirstPersonControls(camera);\n            camControls.lookSpeed = 0.4;\n            camControls.movementSpeed = 20;\n            camControls.noFly = true;\n            camControls.lookVertical = true;\n            camControls.constrainVertical = true;\n            camControls.verticalMin = 1.0;\n            camControls.verticalMax = 2.0;\n            camControls.lon = -180;\n            camControls.lat = 180;\n\n            function createSprites(){\n                pic=\"image/Sam\"+Math.floor(Math.random()*10)+\".jpg\";\n                var texture=THREE.ImageUtils.loadTexture(pic);\n                var geom=new THREE.Geometry();\n                var material=new THREE.PointCloudMaterial({\n                    size:4,\n                    transparent:true,\n                    map: texture,\n                    blending: THREE.AdditiveBlending,\n                    color:0x5fe0ff,\n                });\n                var range=500;\n                for(var i=0;i&lt;500;i++){\n                    var particle=new THREE.Vector3(Math.random() * range - range / 2, Math.random() * range + range / 5, Math.random() * range - range / 2);\n                    geom.vertices.push(particle);\n                    var color=new THREE.Color(0x00ff00);\n                    color.setHSL(color.getHSL().h,color.getHSL().s,Math.random()*color.getHSL().l);\n                    geom.colors.push(color);\n                }\n                cloud=new THREE.PointCloud(geom,material);\n                cloud.sortParticles=true;\n                scene.add(cloud);\n            }\n\n            function fulldown(){\n                scene.children.pop();\n            }\n\n            createSprites();\n            \n            document.getElementById(\"webgl\").appendChild(renderer.domElement);\n            renderer.render(scene,camera);\n            \n            var step=0;\n            var v=0;\n            function rendererScene(){\n                stats.update();\n                var delta = clock.getDelta();\n                camControls.update(delta);\n                step+=2;\n                if(step%100==0){\n                    createSprites();\n                }\n                for(var i=0;i&lt;scene.children.length;i++){\n                    scene.children[i].position.y-=2;\n                }\n                requestAnimationFrame(rendererScene);\n                renderer.render(scene,camera);\n            }\n\n            function initStats(){\n                var stats=new Stats();\n                stats.setMode(0);\n                document.getElementById(\"stats\").appendChild(stats.domElement);\n                return stats;\n            }\n\n            rendererScene();\n        }\n        window.onload=init;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果是不断有数字掉落，这种还可以模拟下雨下雪之类。</p>"},{"title":"解决各种问题集","catalog":true,"date":"2017-11-30T09:45:55.000Z","_content":"\npython篇：\n\n1.windows上，在pip install xxx失败的时候怎么办？\n\n答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。\n\n<!--more-->\n\n2.解决pip3报错Fatal error in launcher: Unable to create process using '\"'。\n\n一种：\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n另一种：\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n3.linux上python3中文会显示UnicodeEncodeError: 'ascii' codec can't encode character。\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n4.requests爬到的中文网页输出在windows cmd会出错\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n5.cv2.imread读取中文路径出错\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n6.sublime字体高低不齐\n\n下载安装字体 http://cloud.alphadn.com/blog/yahei-consolas.zip\n修改user_setting中的font_face为\n<pre>\"font_face\": \"YaHei Consolas Hybrid\",</pre>\n7.windows上编写的shell文件在linux运行报错\n<pre>vim file.sh\n:set ff=unix</pre>\n","source":"_posts/2017/article_45_解决各种问题集.md","raw":"\n---\ntitle: 解决各种问题集\ncatalog: true\ndate: 2017-11-30 17:45:55\n---\n\npython篇：\n\n1.windows上，在pip install xxx失败的时候怎么办？\n\n答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。\n\n<!--more-->\n\n2.解决pip3报错Fatal error in launcher: Unable to create process using '\"'。\n\n一种：\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n另一种：\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n3.linux上python3中文会显示UnicodeEncodeError: 'ascii' codec can't encode character。\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n4.requests爬到的中文网页输出在windows cmd会出错\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n5.cv2.imread读取中文路径出错\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n6.sublime字体高低不齐\n\n下载安装字体 http://cloud.alphadn.com/blog/yahei-consolas.zip\n修改user_setting中的font_face为\n<pre>\"font_face\": \"YaHei Consolas Hybrid\",</pre>\n7.windows上编写的shell文件在linux运行报错\n<pre>vim file.sh\n:set ff=unix</pre>\n","slug":"2017/article_45_解决各种问题集","published":1,"updated":"2021-01-27T04:46:28.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72v001e07707p68t6pn","content":"<p>python篇：</p>\n<p>1.windows上，在pip install xxx失败的时候怎么办？</p>\n<p>答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p>\n<a id=\"more\"></a>\n<p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p>\n<p>一种：</p>\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n<p>另一种：</p>\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n<p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p>\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n<p>4.requests爬到的中文网页输出在windows cmd会出错</p>\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n<p>5.cv2.imread读取中文路径出错</p>\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n<p>6.sublime字体高低不齐</p>\n<p>下载安装字体 <a href=\"http://cloud.alphadn.com/blog/yahei-consolas.zip\" target=\"_blank\" rel=\"external\">http://cloud.alphadn.com/blog/yahei-consolas.zip</a><br>\n修改user_setting中的font_face为</p>\n<pre>\"font_face\": \"YaHei Consolas Hybrid\",</pre>\n<p>7.windows上编写的shell文件在linux运行报错</p>\n<pre>vim file.sh\n:set ff=unix</pre>\n","excerpt":"<p>python篇：</p>\n<p>1.windows上，在pip install xxx失败的时候怎么办？</p>\n<p>答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p>","more":"<p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p>\n<p>一种：</p>\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n<p>另一种：</p>\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n<p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p>\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n<p>4.requests爬到的中文网页输出在windows cmd会出错</p>\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n<p>5.cv2.imread读取中文路径出错</p>\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n<p>6.sublime字体高低不齐</p>\n<p>下载安装字体 <a href=\"http://cloud.alphadn.com/blog/yahei-consolas.zip\">http://cloud.alphadn.com/blog/yahei-consolas.zip</a><br>\n修改user_setting中的font_face为</p>\n<pre>\"font_face\": \"YaHei Consolas Hybrid\",</pre>\n<p>7.windows上编写的shell文件在linux运行报错</p>\n<pre>vim file.sh\n:set ff=unix</pre>"},{"title":"数字杭电的模拟登陆(带验证码)","catalog":true,"date":"2017-03-08T05:11:21.000Z","_content":"\n对于一个学生，研究学校网站还是比较有趣滴！\n\nTalk is cheap！Then I show the code.\n\n下面是用php的实现，具体细节在注释里讲解<!--more-->\n<pre>//登录之前先获取cookie及lt(一次性使用，lt很关键)\nfunction GetCookie(){\n    //cookie的地址\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //curl来模拟登陆一次教务网站获取返回的页面代码\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/login'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $res=curl_exec($ch);\n    curl_close($ch);\n    //用正则匹配到代码里的lt存起来\n    $preg = '|&lt;input type=\"hidden\" name=\"lt\" value=[\\\"](.*?)[\\\"] /&gt;|U';\n    preg_match_all($preg, $res, $arr); \n    $lt=$arr[1][0];\n    //把lt存在session里\n    $_SESSION['lt']=$lt;\n    //带着刚才的cookie在curl一次验证码的网站得到验证码图片\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/Captcha.jpg'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $data=curl_exec($ch);\n    curl_close($ch);\n    //获取时间(为确保验证码唯一性)\n    $time=time();\n    //把验证码保存成jpg\n    file_put_contents(dirname(__FILE__).'/yzm/'.$time.'.jpg',$data);\n    //为了方便这里返回时间\n    return $time;\n }</pre>\n<pre>//验证是否登录成功\nfunction VerLogin($username,$password,$yzm){\n    //cookie路径\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //获取在session里的lt\n    $lt=$_SESSION['lt'];\n    //构造post内容\n    $post_data=array(\n        'encodedService'=&gt;'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service'=&gt;'http://i.hdu.edu.cn/dcp/index.jsp',\n        'serviceName'=&gt;'null',\n        'loginErrCnt'=&gt;'0',\n        'username'=&gt;$username,\n        'password'=&gt;md5($password),\n        'lt'=&gt;$lt,\n        'captcha'=&gt;$yzm\n     );\n    //带着cookie模拟登陆(为了防止被认出来构造的比较完整，嘻嘻)\n    $curl = curl_init();\n    curl_setopt($curl, CURLOPT_URL, \"http://cas.hdu.edu.cn/cas/login\");\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt ($curl,CURLOPT_REFERER,'http://cas.hdu.edu.cn/cas/login?service=http%3A%2F%2Fi.hdu.edu.cn%2Fdcp%2Findex.jsp');\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'); \n    curl_setopt($curl, CURLOPT_POST, 1);\n    curl_setopt($curl, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); \n    $res=curl_exec($curl);\n    curl_close($curl);\n    //得到一个自带跳转的页面的代码(跳转过去就是登陆后的主页面了哦)\n    //用正则匹配跳转，如果有则返回成功，没则返回失败\n    preg_match_all('/window.location.href=[\\\"](.*)[\\\"]/i', $res, $results);\n    if($results[1][0]==null){\n        return false;\n    }else{\n        return true;\n    }\n }</pre>\n<pre>//使用函数\n//获取cookie\n$time=GetCookie();\n//下面是验证码图片路径，根据图片得到正确验证码\n//$Imgdir=dirname(__file__).\"/yzm/\".$time.\".jpg\";\n//根据得到的验证码加上学号密码登录\n$stuid=\"15******\";\n$password=\"********\";\n$yzm=\"****\";\nif(VerLogin($stuid,$password,$yzm)){\n    echo \"登录成功\";\n}else{\n    echo \"登录失败\";\n}</pre>\n个人推荐使用的是fiddler来抓包，其他的网页的登陆也可以用相同的思路来研究。\n","source":"_posts/2017/article_4_数字杭电的模拟登陆(带验证码).md","raw":"\n---\ntitle: 数字杭电的模拟登陆(带验证码)\ncatalog: true\ndate: 2017-3-8 13:11:21\n---\n\n对于一个学生，研究学校网站还是比较有趣滴！\n\nTalk is cheap！Then I show the code.\n\n下面是用php的实现，具体细节在注释里讲解<!--more-->\n<pre>//登录之前先获取cookie及lt(一次性使用，lt很关键)\nfunction GetCookie(){\n    //cookie的地址\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //curl来模拟登陆一次教务网站获取返回的页面代码\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/login'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $res=curl_exec($ch);\n    curl_close($ch);\n    //用正则匹配到代码里的lt存起来\n    $preg = '|&lt;input type=\"hidden\" name=\"lt\" value=[\\\"](.*?)[\\\"] /&gt;|U';\n    preg_match_all($preg, $res, $arr); \n    $lt=$arr[1][0];\n    //把lt存在session里\n    $_SESSION['lt']=$lt;\n    //带着刚才的cookie在curl一次验证码的网站得到验证码图片\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/Captcha.jpg'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $data=curl_exec($ch);\n    curl_close($ch);\n    //获取时间(为确保验证码唯一性)\n    $time=time();\n    //把验证码保存成jpg\n    file_put_contents(dirname(__FILE__).'/yzm/'.$time.'.jpg',$data);\n    //为了方便这里返回时间\n    return $time;\n }</pre>\n<pre>//验证是否登录成功\nfunction VerLogin($username,$password,$yzm){\n    //cookie路径\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //获取在session里的lt\n    $lt=$_SESSION['lt'];\n    //构造post内容\n    $post_data=array(\n        'encodedService'=&gt;'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service'=&gt;'http://i.hdu.edu.cn/dcp/index.jsp',\n        'serviceName'=&gt;'null',\n        'loginErrCnt'=&gt;'0',\n        'username'=&gt;$username,\n        'password'=&gt;md5($password),\n        'lt'=&gt;$lt,\n        'captcha'=&gt;$yzm\n     );\n    //带着cookie模拟登陆(为了防止被认出来构造的比较完整，嘻嘻)\n    $curl = curl_init();\n    curl_setopt($curl, CURLOPT_URL, \"http://cas.hdu.edu.cn/cas/login\");\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt ($curl,CURLOPT_REFERER,'http://cas.hdu.edu.cn/cas/login?service=http%3A%2F%2Fi.hdu.edu.cn%2Fdcp%2Findex.jsp');\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'); \n    curl_setopt($curl, CURLOPT_POST, 1);\n    curl_setopt($curl, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); \n    $res=curl_exec($curl);\n    curl_close($curl);\n    //得到一个自带跳转的页面的代码(跳转过去就是登陆后的主页面了哦)\n    //用正则匹配跳转，如果有则返回成功，没则返回失败\n    preg_match_all('/window.location.href=[\\\"](.*)[\\\"]/i', $res, $results);\n    if($results[1][0]==null){\n        return false;\n    }else{\n        return true;\n    }\n }</pre>\n<pre>//使用函数\n//获取cookie\n$time=GetCookie();\n//下面是验证码图片路径，根据图片得到正确验证码\n//$Imgdir=dirname(__file__).\"/yzm/\".$time.\".jpg\";\n//根据得到的验证码加上学号密码登录\n$stuid=\"15******\";\n$password=\"********\";\n$yzm=\"****\";\nif(VerLogin($stuid,$password,$yzm)){\n    echo \"登录成功\";\n}else{\n    echo \"登录失败\";\n}</pre>\n个人推荐使用的是fiddler来抓包，其他的网页的登陆也可以用相同的思路来研究。\n","slug":"2017/article_4_数字杭电的模拟登陆(带验证码)","published":1,"updated":"2021-01-27T04:46:28.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72w001f077075zk7xwd","content":"<p>对于一个学生，研究学校网站还是比较有趣滴！</p>\n<p>Talk is cheap！Then I show the code.</p>\n<p>下面是用php的实现，具体细节在注释里讲解<a id=\"more\"></a></p>\n<pre>//登录之前先获取cookie及lt(一次性使用，lt很关键)\nfunction GetCookie(){\n    //cookie的地址\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //curl来模拟登陆一次教务网站获取返回的页面代码\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/login'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $res=curl_exec($ch);\n    curl_close($ch);\n    //用正则匹配到代码里的lt存起来\n    $preg = '|&lt;input type=\"hidden\" name=\"lt\" value=[\\\"](.*?)[\\\"] /&gt;|U';\n    preg_match_all($preg, $res, $arr); \n    $lt=$arr[1][0];\n    //把lt存在session里\n    $_SESSION['lt']=$lt;\n    //带着刚才的cookie在curl一次验证码的网站得到验证码图片\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/Captcha.jpg'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $data=curl_exec($ch);\n    curl_close($ch);\n    //获取时间(为确保验证码唯一性)\n    $time=time();\n    //把验证码保存成jpg\n    file_put_contents(dirname(__FILE__).'/yzm/'.$time.'.jpg',$data);\n    //为了方便这里返回时间\n    return $time;\n }</pre>\n<pre>//验证是否登录成功\nfunction VerLogin($username,$password,$yzm){\n    //cookie路径\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //获取在session里的lt\n    $lt=$_SESSION['lt'];\n    //构造post内容\n    $post_data=array(\n        'encodedService'=&gt;'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service'=&gt;'http://i.hdu.edu.cn/dcp/index.jsp',\n        'serviceName'=&gt;'null',\n        'loginErrCnt'=&gt;'0',\n        'username'=&gt;$username,\n        'password'=&gt;md5($password),\n        'lt'=&gt;$lt,\n        'captcha'=&gt;$yzm\n     );\n    //带着cookie模拟登陆(为了防止被认出来构造的比较完整，嘻嘻)\n    $curl = curl_init();\n    curl_setopt($curl, CURLOPT_URL, \"http://cas.hdu.edu.cn/cas/login\");\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt ($curl,CURLOPT_REFERER,'http://cas.hdu.edu.cn/cas/login?service=http%3A%2F%2Fi.hdu.edu.cn%2Fdcp%2Findex.jsp');\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'); \n    curl_setopt($curl, CURLOPT_POST, 1);\n    curl_setopt($curl, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); \n    $res=curl_exec($curl);\n    curl_close($curl);\n    //得到一个自带跳转的页面的代码(跳转过去就是登陆后的主页面了哦)\n    //用正则匹配跳转，如果有则返回成功，没则返回失败\n    preg_match_all('/window.location.href=[\\\"](.*)[\\\"]/i', $res, $results);\n    if($results[1][0]==null){\n        return false;\n    }else{\n        return true;\n    }\n }</pre>\n<pre>//使用函数\n//获取cookie\n$time=GetCookie();\n//下面是验证码图片路径，根据图片得到正确验证码\n//$Imgdir=dirname(__file__).\"/yzm/\".$time.\".jpg\";\n//根据得到的验证码加上学号密码登录\n$stuid=\"15******\";\n$password=\"********\";\n$yzm=\"****\";\nif(VerLogin($stuid,$password,$yzm)){\n    echo \"登录成功\";\n}else{\n    echo \"登录失败\";\n}</pre>\n<p>个人推荐使用的是fiddler来抓包，其他的网页的登陆也可以用相同的思路来研究。</p>\n","excerpt":"<p>对于一个学生，研究学校网站还是比较有趣滴！</p>\n<p>Talk is cheap！Then I show the code.</p>\n<p>下面是用php的实现，具体细节在注释里讲解","more":"</p>\n<pre>//登录之前先获取cookie及lt(一次性使用，lt很关键)\nfunction GetCookie(){\n    //cookie的地址\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //curl来模拟登陆一次教务网站获取返回的页面代码\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/login'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $res=curl_exec($ch);\n    curl_close($ch);\n    //用正则匹配到代码里的lt存起来\n    $preg = '|&lt;input type=\"hidden\" name=\"lt\" value=[\\\"](.*?)[\\\"] /&gt;|U';\n    preg_match_all($preg, $res, $arr); \n    $lt=$arr[1][0];\n    //把lt存在session里\n    $_SESSION['lt']=$lt;\n    //带着刚才的cookie在curl一次验证码的网站得到验证码图片\n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, 'http://cas.hdu.edu.cn/cas/Captcha.jpg'); \n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $data=curl_exec($ch);\n    curl_close($ch);\n    //获取时间(为确保验证码唯一性)\n    $time=time();\n    //把验证码保存成jpg\n    file_put_contents(dirname(__FILE__).'/yzm/'.$time.'.jpg',$data);\n    //为了方便这里返回时间\n    return $time;\n }</pre>\n<pre>//验证是否登录成功\nfunction VerLogin($username,$password,$yzm){\n    //cookie路径\n    $cookie=dirname(__FILE__).'/cookie.txt';\n    //获取在session里的lt\n    $lt=$_SESSION['lt'];\n    //构造post内容\n    $post_data=array(\n        'encodedService'=&gt;'http%3a%2f%2fi.hdu.edu.cn%2fdcp%2findex.jsp',\n        'service'=&gt;'http://i.hdu.edu.cn/dcp/index.jsp',\n        'serviceName'=&gt;'null',\n        'loginErrCnt'=&gt;'0',\n        'username'=&gt;$username,\n        'password'=&gt;md5($password),\n        'lt'=&gt;$lt,\n        'captcha'=&gt;$yzm\n     );\n    //带着cookie模拟登陆(为了防止被认出来构造的比较完整，嘻嘻)\n    $curl = curl_init();\n    curl_setopt($curl, CURLOPT_URL, \"http://cas.hdu.edu.cn/cas/login\");\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt ($curl,CURLOPT_REFERER,'http://cas.hdu.edu.cn/cas/login?service=http%3A%2F%2Fi.hdu.edu.cn%2Fdcp%2Findex.jsp');\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'); \n    curl_setopt($curl, CURLOPT_POST, 1);\n    curl_setopt($curl, CURLOPT_COOKIEFILE, $cookie);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); \n    $res=curl_exec($curl);\n    curl_close($curl);\n    //得到一个自带跳转的页面的代码(跳转过去就是登陆后的主页面了哦)\n    //用正则匹配跳转，如果有则返回成功，没则返回失败\n    preg_match_all('/window.location.href=[\\\"](.*)[\\\"]/i', $res, $results);\n    if($results[1][0]==null){\n        return false;\n    }else{\n        return true;\n    }\n }</pre>\n<pre>//使用函数\n//获取cookie\n$time=GetCookie();\n//下面是验证码图片路径，根据图片得到正确验证码\n//$Imgdir=dirname(__file__).\"/yzm/\".$time.\".jpg\";\n//根据得到的验证码加上学号密码登录\n$stuid=\"15******\";\n$password=\"********\";\n$yzm=\"****\";\nif(VerLogin($stuid,$password,$yzm)){\n    echo \"登录成功\";\n}else{\n    echo \"登录失败\";\n}</pre>\n<p>个人推荐使用的是fiddler来抓包，其他的网页的登陆也可以用相同的思路来研究。</p>"},{"title":"flask+mongodb+gunicron初试","catalog":true,"date":"2017-12-21T05:37:52.000Z","_content":"\n最近接触些python后端开发，记录下所用到的一些技术。<!--more-->\n\nflask，这个在他的官网里也有详细文档，这里简单论述一个登录+后台管理的例子。\n<pre>#引入一个蓝图，蓝图封装一些接口\nfrom lantu import simple_page\nfrom flask import Flask,render_template,request,session,redirect,url_for\nimport json\nimport hashlib\n#定义app，secret_key主要在生成session时候用\napp=Flask(__name__)\napp.secret_key='gjc'\n#绑定蓝图\napp.register_blueprint(simple_page)\n#主页跳转到登录\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n#登录判断session，有则跳转到主页\n@app.route(\"/login\")\ndef login():\n    if \"username\" not in session:\n        return render_template('login.html')\n    else:\n        return redirect(url_for('simple_page.main'))\n#登录验证接口\n@app.route(\"/login/loginYz\",methods=['POST'])\ndef loginyz():\n    psd=hashlib.sha256()\n    psd.update('root'.encode('utf-8'))\n    if request.form['username']!='root':\n        res={\n            \"state\":\"1001\",\n            \"result\":\"username error\"\n        }\n        return json.dumps(res)\n    elif psd.hexdigest()!=request.form['password']:\n        res={\n            \"state\":\"1002\",\n            \"result\":\"password error\"\n        }\n        return json.dumps(res)\n    else:\n        session['username'] = request.form['username']\n        res={\n            \"state\":\"1000\",\n            \"result\":\"success\",\n            \"linkTo\":\"/main\"\n        }\n        return json.dumps(res) \n#登出接口，删除session\n@app.route(\"/loginout\")\ndef loginout():\n    session.pop('username', None)\n    return redirect(url_for('login'))\n#开始出程序\nif __name__=='__main__':\n    app.run(\"0.0.0.0\",debug=True)</pre>\n上面绑定的蓝图\n<pre>from flask import Blueprint,render_template,abort,session,request\nfrom jinja2 import TemplateNotFound\nfrom pymongo import MongoClient\nimport json\n#连接mongodb数据库\nclient=MongoClient()\ndb=client.test_database\nposts=db.posts\n#定义一个蓝图\nsimple_page=Blueprint('simple_page',__name__,template_folder='templates')\n#管理主页\n@simple_page.route(\"/main\")\ndef main():\n    if \"username\" in session:\n        data={}\n        data['username']=session['username']\n        data['info']=[post for post in posts.find()]\n        return render_template(\"main.html\",data=data)\n    else:\n        return render_template('login.html')\n#增加数据\n@simple_page.route(\"/main/add\",methods=['POST'])\ndef add():\n    post={\n        \"name\":request.form['name'],\n        \"email\":request.form['email'],\n        \"phone\":request.form['tel'],\n        \"more\":request.form['more']\n    }\n    if posts.insert_one(post).inserted_id!=\"\":\n        return json.dumps({\"state\":\"1000\",\"result\":\"success\"})\n    else:\n        return json.dumps({\"state\":\"1004\",\"result\":\"insert error\"})\n#删除数据\n@simple_page.route(\"/main/dele\",methods=['POST'])\ndef dele():\n    result=posts.delete_one({\"name\":request.form['name']})\n    if result.deleted_count&gt;0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['name']})\n    else:\n        return json.dumps({\"state\":\"1005\",\"result\":\"delete error\"})\n#修改数据\n@simple_page.route(\"/main/edit\",methods=['POST'])\ndef edit():\n    result=posts.update_one({\"name\":request.form['org_name']},{\"$set\":{\n        \"name\":request.form['ch_name'],\n        \"email\":request.form['ch_email'],\n        \"phone\":request.form['ch_phone'],\n        \"more\":request.form['ch_more']\n    } })\n    if result.matched_count!=0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['ch_name']})\n    else:\n        return json.dumps({\"state\":\"1006\",\"result\":\"edit error\"})\n    #return json.dumps({\"state\":\"1000\",\"result\":result.matched_count})</pre>\n关于前端页面这里不做展示了，接下来使用gunicorn运行该flask程序\n\n首先可以配置一下gunicorn的config，flask项目touch一个config.py，复制如下内容，当然也可以自行修改配置，内容也可以在<a href=\"https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\">这里</a>下载。\n<pre>bind = '0.0.0.0:8000'\nbacklog = 2048\nworkers = 1\nworker_class = 'sync'\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\nspew = False\ndaemon = False\npidfile = None\numask = 0\nuser = None\ngroup = None\ntmp_upload_dir = None\nerrorlog = '-'\nloglevel = 'info'\naccesslog = '-'\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\nproc_name = None\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef pre_fork(server, worker):\n    pass\n\ndef pre_exec(server):\n    server.log.info(\"Forked child, re-executing.\")\n\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef worker_int(worker):\n    worker.log.info(\"worker received INT or QUIT signal\")\n\n    ## get traceback info\n    import threading, sys, traceback\n    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])\n    code = []\n    for threadId, stack in sys._current_frames().items():\n        code.append(\"\\n# Thread: %s(%d)\" % (id2name.get(threadId,\"\"),\n            threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename,\n                lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    worker.log.debug(\"\\n\".join(code))\n\ndef worker_abort(worker):\n    worker.log.info(\"worker received SIGABRT signal\")</pre>\n然后运行\n<pre>gunicorn -c config.py main:app</pre>\n就可以多线程运行flask程序啦！\n","source":"_posts/2017/article_48_flask+mongodb+gunicron初试.md","raw":"\n---\ntitle: flask+mongodb+gunicron初试\ncatalog: true\ndate: 2017-12-21 13:37:52\n---\n\n最近接触些python后端开发，记录下所用到的一些技术。<!--more-->\n\nflask，这个在他的官网里也有详细文档，这里简单论述一个登录+后台管理的例子。\n<pre>#引入一个蓝图，蓝图封装一些接口\nfrom lantu import simple_page\nfrom flask import Flask,render_template,request,session,redirect,url_for\nimport json\nimport hashlib\n#定义app，secret_key主要在生成session时候用\napp=Flask(__name__)\napp.secret_key='gjc'\n#绑定蓝图\napp.register_blueprint(simple_page)\n#主页跳转到登录\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n#登录判断session，有则跳转到主页\n@app.route(\"/login\")\ndef login():\n    if \"username\" not in session:\n        return render_template('login.html')\n    else:\n        return redirect(url_for('simple_page.main'))\n#登录验证接口\n@app.route(\"/login/loginYz\",methods=['POST'])\ndef loginyz():\n    psd=hashlib.sha256()\n    psd.update('root'.encode('utf-8'))\n    if request.form['username']!='root':\n        res={\n            \"state\":\"1001\",\n            \"result\":\"username error\"\n        }\n        return json.dumps(res)\n    elif psd.hexdigest()!=request.form['password']:\n        res={\n            \"state\":\"1002\",\n            \"result\":\"password error\"\n        }\n        return json.dumps(res)\n    else:\n        session['username'] = request.form['username']\n        res={\n            \"state\":\"1000\",\n            \"result\":\"success\",\n            \"linkTo\":\"/main\"\n        }\n        return json.dumps(res) \n#登出接口，删除session\n@app.route(\"/loginout\")\ndef loginout():\n    session.pop('username', None)\n    return redirect(url_for('login'))\n#开始出程序\nif __name__=='__main__':\n    app.run(\"0.0.0.0\",debug=True)</pre>\n上面绑定的蓝图\n<pre>from flask import Blueprint,render_template,abort,session,request\nfrom jinja2 import TemplateNotFound\nfrom pymongo import MongoClient\nimport json\n#连接mongodb数据库\nclient=MongoClient()\ndb=client.test_database\nposts=db.posts\n#定义一个蓝图\nsimple_page=Blueprint('simple_page',__name__,template_folder='templates')\n#管理主页\n@simple_page.route(\"/main\")\ndef main():\n    if \"username\" in session:\n        data={}\n        data['username']=session['username']\n        data['info']=[post for post in posts.find()]\n        return render_template(\"main.html\",data=data)\n    else:\n        return render_template('login.html')\n#增加数据\n@simple_page.route(\"/main/add\",methods=['POST'])\ndef add():\n    post={\n        \"name\":request.form['name'],\n        \"email\":request.form['email'],\n        \"phone\":request.form['tel'],\n        \"more\":request.form['more']\n    }\n    if posts.insert_one(post).inserted_id!=\"\":\n        return json.dumps({\"state\":\"1000\",\"result\":\"success\"})\n    else:\n        return json.dumps({\"state\":\"1004\",\"result\":\"insert error\"})\n#删除数据\n@simple_page.route(\"/main/dele\",methods=['POST'])\ndef dele():\n    result=posts.delete_one({\"name\":request.form['name']})\n    if result.deleted_count&gt;0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['name']})\n    else:\n        return json.dumps({\"state\":\"1005\",\"result\":\"delete error\"})\n#修改数据\n@simple_page.route(\"/main/edit\",methods=['POST'])\ndef edit():\n    result=posts.update_one({\"name\":request.form['org_name']},{\"$set\":{\n        \"name\":request.form['ch_name'],\n        \"email\":request.form['ch_email'],\n        \"phone\":request.form['ch_phone'],\n        \"more\":request.form['ch_more']\n    } })\n    if result.matched_count!=0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['ch_name']})\n    else:\n        return json.dumps({\"state\":\"1006\",\"result\":\"edit error\"})\n    #return json.dumps({\"state\":\"1000\",\"result\":result.matched_count})</pre>\n关于前端页面这里不做展示了，接下来使用gunicorn运行该flask程序\n\n首先可以配置一下gunicorn的config，flask项目touch一个config.py，复制如下内容，当然也可以自行修改配置，内容也可以在<a href=\"https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\">这里</a>下载。\n<pre>bind = '0.0.0.0:8000'\nbacklog = 2048\nworkers = 1\nworker_class = 'sync'\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\nspew = False\ndaemon = False\npidfile = None\numask = 0\nuser = None\ngroup = None\ntmp_upload_dir = None\nerrorlog = '-'\nloglevel = 'info'\naccesslog = '-'\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\nproc_name = None\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef pre_fork(server, worker):\n    pass\n\ndef pre_exec(server):\n    server.log.info(\"Forked child, re-executing.\")\n\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef worker_int(worker):\n    worker.log.info(\"worker received INT or QUIT signal\")\n\n    ## get traceback info\n    import threading, sys, traceback\n    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])\n    code = []\n    for threadId, stack in sys._current_frames().items():\n        code.append(\"\\n# Thread: %s(%d)\" % (id2name.get(threadId,\"\"),\n            threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename,\n                lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    worker.log.debug(\"\\n\".join(code))\n\ndef worker_abort(worker):\n    worker.log.info(\"worker received SIGABRT signal\")</pre>\n然后运行\n<pre>gunicorn -c config.py main:app</pre>\n就可以多线程运行flask程序啦！\n","slug":"2017/article_48_flask+mongodb+gunicron初试","published":1,"updated":"2021-01-27T04:46:28.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72w001g07702t4xnpyk","content":"<p>最近接触些python后端开发，记录下所用到的一些技术。<a id=\"more\"></a></p>\n<p>flask，这个在他的官网里也有详细文档，这里简单论述一个登录+后台管理的例子。</p>\n<pre>#引入一个蓝图，蓝图封装一些接口\nfrom lantu import simple_page\nfrom flask import Flask,render_template,request,session,redirect,url_for\nimport json\nimport hashlib\n#定义app，secret_key主要在生成session时候用\napp=Flask(__name__)\napp.secret_key='gjc'\n#绑定蓝图\napp.register_blueprint(simple_page)\n#主页跳转到登录\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n#登录判断session，有则跳转到主页\n@app.route(\"/login\")\ndef login():\n    if \"username\" not in session:\n        return render_template('login.html')\n    else:\n        return redirect(url_for('simple_page.main'))\n#登录验证接口\n@app.route(\"/login/loginYz\",methods=['POST'])\ndef loginyz():\n    psd=hashlib.sha256()\n    psd.update('root'.encode('utf-8'))\n    if request.form['username']!='root':\n        res={\n            \"state\":\"1001\",\n            \"result\":\"username error\"\n        }\n        return json.dumps(res)\n    elif psd.hexdigest()!=request.form['password']:\n        res={\n            \"state\":\"1002\",\n            \"result\":\"password error\"\n        }\n        return json.dumps(res)\n    else:\n        session['username'] = request.form['username']\n        res={\n            \"state\":\"1000\",\n            \"result\":\"success\",\n            \"linkTo\":\"/main\"\n        }\n        return json.dumps(res) \n#登出接口，删除session\n@app.route(\"/loginout\")\ndef loginout():\n    session.pop('username', None)\n    return redirect(url_for('login'))\n#开始出程序\nif __name__=='__main__':\n    app.run(\"0.0.0.0\",debug=True)</pre>\n<p>上面绑定的蓝图</p>\n<pre>from flask import Blueprint,render_template,abort,session,request\nfrom jinja2 import TemplateNotFound\nfrom pymongo import MongoClient\nimport json\n#连接mongodb数据库\nclient=MongoClient()\ndb=client.test_database\nposts=db.posts\n#定义一个蓝图\nsimple_page=Blueprint('simple_page',__name__,template_folder='templates')\n#管理主页\n@simple_page.route(\"/main\")\ndef main():\n    if \"username\" in session:\n        data={}\n        data['username']=session['username']\n        data['info']=[post for post in posts.find()]\n        return render_template(\"main.html\",data=data)\n    else:\n        return render_template('login.html')\n#增加数据\n@simple_page.route(\"/main/add\",methods=['POST'])\ndef add():\n    post={\n        \"name\":request.form['name'],\n        \"email\":request.form['email'],\n        \"phone\":request.form['tel'],\n        \"more\":request.form['more']\n    }\n    if posts.insert_one(post).inserted_id!=\"\":\n        return json.dumps({\"state\":\"1000\",\"result\":\"success\"})\n    else:\n        return json.dumps({\"state\":\"1004\",\"result\":\"insert error\"})\n#删除数据\n@simple_page.route(\"/main/dele\",methods=['POST'])\ndef dele():\n    result=posts.delete_one({\"name\":request.form['name']})\n    if result.deleted_count&gt;0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['name']})\n    else:\n        return json.dumps({\"state\":\"1005\",\"result\":\"delete error\"})\n#修改数据\n@simple_page.route(\"/main/edit\",methods=['POST'])\ndef edit():\n    result=posts.update_one({\"name\":request.form['org_name']},{\"$set\":{\n        \"name\":request.form['ch_name'],\n        \"email\":request.form['ch_email'],\n        \"phone\":request.form['ch_phone'],\n        \"more\":request.form['ch_more']\n    } })\n    if result.matched_count!=0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['ch_name']})\n    else:\n        return json.dumps({\"state\":\"1006\",\"result\":\"edit error\"})\n    #return json.dumps({\"state\":\"1000\",\"result\":result.matched_count})</pre>\n<p>关于前端页面这里不做展示了，接下来使用gunicorn运行该flask程序</p>\n<p>首先可以配置一下gunicorn的config，<a href=\"http://xn--flasktouchconfig-4l9yvvf013d3guf.py\" target=\"_blank\" rel=\"external\">flask项目touch一个config.py</a>，复制如下内容，当然也可以自行修改配置，内容也可以在<a href=\"https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\" target=\"_blank\" rel=\"external\">这里</a>下载。</p>\n<pre>bind = '0.0.0.0:8000'\nbacklog = 2048\nworkers = 1\nworker_class = 'sync'\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\nspew = False\ndaemon = False\npidfile = None\numask = 0\nuser = None\ngroup = None\ntmp_upload_dir = None\nerrorlog = '-'\nloglevel = 'info'\naccesslog = '-'\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\nproc_name = None\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef pre_fork(server, worker):\n    pass\n\ndef pre_exec(server):\n    server.log.info(\"Forked child, re-executing.\")\n\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef worker_int(worker):\n    worker.log.info(\"worker received INT or QUIT signal\")\n\n    ## get traceback info\n    import threading, sys, traceback\n    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])\n    code = []\n    for threadId, stack in sys._current_frames().items():\n        code.append(\"\\n# Thread: %s(%d)\" % (id2name.get(threadId,\"\"),\n            threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename,\n                lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    worker.log.debug(\"\\n\".join(code))\n\ndef worker_abort(worker):\n    worker.log.info(\"worker received SIGABRT signal\")</pre>\n<p>然后运行</p>\n<pre>gunicorn -c config.py main:app</pre>\n<p>就可以多线程运行flask程序啦！</p>\n","excerpt":"<p>最近接触些python后端开发，记录下所用到的一些技术。","more":"</p>\n<p>flask，这个在他的官网里也有详细文档，这里简单论述一个登录+后台管理的例子。</p>\n<pre>#引入一个蓝图，蓝图封装一些接口\nfrom lantu import simple_page\nfrom flask import Flask,render_template,request,session,redirect,url_for\nimport json\nimport hashlib\n#定义app，secret_key主要在生成session时候用\napp=Flask(__name__)\napp.secret_key='gjc'\n#绑定蓝图\napp.register_blueprint(simple_page)\n#主页跳转到登录\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n#登录判断session，有则跳转到主页\n@app.route(\"/login\")\ndef login():\n    if \"username\" not in session:\n        return render_template('login.html')\n    else:\n        return redirect(url_for('simple_page.main'))\n#登录验证接口\n@app.route(\"/login/loginYz\",methods=['POST'])\ndef loginyz():\n    psd=hashlib.sha256()\n    psd.update('root'.encode('utf-8'))\n    if request.form['username']!='root':\n        res={\n            \"state\":\"1001\",\n            \"result\":\"username error\"\n        }\n        return json.dumps(res)\n    elif psd.hexdigest()!=request.form['password']:\n        res={\n            \"state\":\"1002\",\n            \"result\":\"password error\"\n        }\n        return json.dumps(res)\n    else:\n        session['username'] = request.form['username']\n        res={\n            \"state\":\"1000\",\n            \"result\":\"success\",\n            \"linkTo\":\"/main\"\n        }\n        return json.dumps(res) \n#登出接口，删除session\n@app.route(\"/loginout\")\ndef loginout():\n    session.pop('username', None)\n    return redirect(url_for('login'))\n#开始出程序\nif __name__=='__main__':\n    app.run(\"0.0.0.0\",debug=True)</pre>\n<p>上面绑定的蓝图</p>\n<pre>from flask import Blueprint,render_template,abort,session,request\nfrom jinja2 import TemplateNotFound\nfrom pymongo import MongoClient\nimport json\n#连接mongodb数据库\nclient=MongoClient()\ndb=client.test_database\nposts=db.posts\n#定义一个蓝图\nsimple_page=Blueprint('simple_page',__name__,template_folder='templates')\n#管理主页\n@simple_page.route(\"/main\")\ndef main():\n    if \"username\" in session:\n        data={}\n        data['username']=session['username']\n        data['info']=[post for post in posts.find()]\n        return render_template(\"main.html\",data=data)\n    else:\n        return render_template('login.html')\n#增加数据\n@simple_page.route(\"/main/add\",methods=['POST'])\ndef add():\n    post={\n        \"name\":request.form['name'],\n        \"email\":request.form['email'],\n        \"phone\":request.form['tel'],\n        \"more\":request.form['more']\n    }\n    if posts.insert_one(post).inserted_id!=\"\":\n        return json.dumps({\"state\":\"1000\",\"result\":\"success\"})\n    else:\n        return json.dumps({\"state\":\"1004\",\"result\":\"insert error\"})\n#删除数据\n@simple_page.route(\"/main/dele\",methods=['POST'])\ndef dele():\n    result=posts.delete_one({\"name\":request.form['name']})\n    if result.deleted_count&gt;0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['name']})\n    else:\n        return json.dumps({\"state\":\"1005\",\"result\":\"delete error\"})\n#修改数据\n@simple_page.route(\"/main/edit\",methods=['POST'])\ndef edit():\n    result=posts.update_one({\"name\":request.form['org_name']},{\"$set\":{\n        \"name\":request.form['ch_name'],\n        \"email\":request.form['ch_email'],\n        \"phone\":request.form['ch_phone'],\n        \"more\":request.form['ch_more']\n    } })\n    if result.matched_count!=0:\n        return json.dumps({\"state\":\"1000\",\"result\":request.form['ch_name']})\n    else:\n        return json.dumps({\"state\":\"1006\",\"result\":\"edit error\"})\n    #return json.dumps({\"state\":\"1000\",\"result\":result.matched_count})</pre>\n<p>关于前端页面这里不做展示了，接下来使用gunicorn运行该flask程序</p>\n<p>首先可以配置一下gunicorn的config，<a href=\"http://xn--flasktouchconfig-4l9yvvf013d3guf.py\">flask项目touch一个config.py</a>，复制如下内容，当然也可以自行修改配置，内容也可以在<a href=\"https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\">这里</a>下载。</p>\n<pre>bind = '0.0.0.0:8000'\nbacklog = 2048\nworkers = 1\nworker_class = 'sync'\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\nspew = False\ndaemon = False\npidfile = None\numask = 0\nuser = None\ngroup = None\ntmp_upload_dir = None\nerrorlog = '-'\nloglevel = 'info'\naccesslog = '-'\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\nproc_name = None\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef pre_fork(server, worker):\n    pass\n\ndef pre_exec(server):\n    server.log.info(\"Forked child, re-executing.\")\n\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef worker_int(worker):\n    worker.log.info(\"worker received INT or QUIT signal\")\n\n    ## get traceback info\n    import threading, sys, traceback\n    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])\n    code = []\n    for threadId, stack in sys._current_frames().items():\n        code.append(\"\\n# Thread: %s(%d)\" % (id2name.get(threadId,\"\"),\n            threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename,\n                lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    worker.log.debug(\"\\n\".join(code))\n\ndef worker_abort(worker):\n    worker.log.info(\"worker received SIGABRT signal\")</pre>\n<p>然后运行</p>\n<pre>gunicorn -c config.py main:app</pre>\n<p>就可以多线程运行flask程序啦！</p>"},{"title":"用python写个自动改壁纸的桌面程序","catalog":true,"date":"2017-11-10T10:11:31.000Z","_content":"\n忍无可忍桌面壁纸软件的广告了，终于决定自己写个，总体逻辑上也并不复杂。\n\n先是随机爬取某bing站的壁纸图片，调用win32接口改桌面壁纸，之后用tk的桌面程序来获取用户输入时间间隔，最后封装成exe使得更通用，在后台运行以及加个图标。<!--more-->不说了，直接上代码。\n\n由于是python3.x，库win32api库可能下载会有问题。建议直接去<a href=\"https://sourceforge.net/projects/pywin32/\">这里</a>手动下载安装。\n<pre>#coding:utf-8\n#python3.5\n#windows\nfrom PIL import Image\nimport win32api,win32con,win32gui  \nimport re,os  \nimport requests\nfrom io import BytesIO\nfrom bs4 import BeautifulSoup\nimport tkinter\nimport random\nimport math\nimport time\nimport re\n\ndef set_wallpaper_from_bmp(bmp_path):  \n    #打开指定注册表路径  \n    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER,\"Control Panel\\\\Desktop\",0,win32con.KEY_SET_VALUE)  \n    #最后的参数:2拉伸,0居中,6适应,10填充,0平铺  \n    win32api.RegSetValueEx(reg_key, \"WallpaperStyle\", 0, win32con.REG_SZ, \"2\")  \n    #最后的参数:1表示平铺,拉伸居中等都是0  \n    win32api.RegSetValueEx(reg_key, \"TileWallpaper\", 0, win32con.REG_SZ, \"0\")  \n    #刷新桌面  \n    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,bmp_path, win32con.SPIF_SENDWININICHANGE)  \n  \ndef set_wallpaper(bgimg):  \n    #把图片格式统一转换成bmp格式,并放在源图片的同一目录  \n    #注意地址必须是绝对地址\n    new_bmp_path=\"C:/backgroundPicture/wallpaper.bmp\"\n    bmpImage = Image.open(BytesIO(bgimg))\n    bmpImage.save(new_bmp_path, \"BMP\")  \n    set_wallpaper_from_bmp(new_bmp_path)  \n\ndef getPicurl():\n    #爬虫部分，主要从这个网站随机取页随机取壁纸，返回图片二进制。\n    req=requests.Session()\n    resp=req.get(\"https://bing.ioliu.cn/?p=1\")\n    soup=BeautifulSoup(resp.text,\"lxml\")\n    pageall=soup.find_all(\"span\")[-1].get_text()\n    maxpage=int(pageall.split(\"/\")[1].strip())\n    ran=math.floor(random.random()*maxpage)+1\n    resp1=req.get(\"https://bing.ioliu.cn?p=\"+str(ran))\n    soup1=BeautifulSoup(resp1.text,\"lxml\")\n    allimg=soup1.find_all(\"img\")\n    ran1=math.floor(random.random()*len(allimg))\n    resp2=req.get(\"https://bing.ioliu.cn\"+allimg[ran1].next_sibling['href'])\n    url=re.findall(r'src=\"http(.*?)\"',resp2.text)[0]\n    image=req.get(\"http\"+url)\n    return image.content\n\ndef inputint():\n    #获取用户输入的时间\n    global t\n    try:\n        t = int(var.get().strip())\n    except:\n        t = 30\n    root.destroy()\n\nif __name__ == '__main__':  \n    t=0\n    if not os.path.exists('C:/backgroundPicture/'):\n        os.mkdir(\"C:/backgroundPicture/\")\n    root = tkinter.Tk(className='请输入间隔时间(按分钟计)')  # 弹出框框名\n    root.geometry('350x60')     # 设置弹出框的大小 w x h\n    var = tkinter.StringVar()   # 这即是输入框中的内容\n    var.set(30) # 通过var.get()/var.set() 来 获取/设置var的值\n    entry1 = tkinter.Entry(root, textvariable=var)  # 设置\"文本变量\"为var\n    entry1.pack()   # 将entry\"打上去\"\n    btn1 = tkinter.Button(root, text='确认', command=inputint)     # 按下此按钮(Input), 触发inputint函数\n    btn1.pack(side='bottom')\n    root.mainloop()\n    #一直运行并用sleep间隔\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))</pre>\n关于打包成exe，在python3有个pyinstaller，直接用pip安装就行。\n\n使用方式是以下，-F打包单个文件，-w不显示命令窗口，-i图标\n<pre>pyinstaller -F -w -i bitbug_favicon.ico filename.py</pre>\n以上便是自动换桌面壁纸，另附这里添加一个功能，就是在程序运行时用按键触发换壁纸。要做的便是另写一个线程做按键监听。这里用pyHook做按键监听，关于pyhook的安装，不能简单用pip，不然用按键监听的时候会有一个bug。\n\n参考：<a href=\"https://blog.csdn.net/dongfuguo/article/details/70226384#reply\">https://blog.csdn.net/dongfuguo/article/details/70226384#reply</a>\n<pre>from ctypes import *\nimport pyHook\nimport pythoncom\nimport threading\ndef onKeyboardEvent(event):\n    global lt\n    #96为1左边那个按键，这里写法是双击\n    if event.Ascii==96:\n        if time.time()-lt&lt;2:\n            bgimg=getPicurl()\n            set_wallpaper(bgimg)\n        else:\n            lt=time.time()\n    return True\ndef task0():\n    hm = pyHook.HookManager()\n    hm.KeyDown = onKeyboardEvent\n    hm.HookKeyboard()\n    pythoncom.PumpMessages()\ndef task1():\n    global t\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))\nthreads = []\n    t1 = threading.Thread(target=task0)\n    threads.append(t1)\n    t0 = threading.Thread(target=task1)\n    threads.append(t0)\n    for i in range(2):\n        threads[i].start()\n    for i in range(2):\n        threads[i].join()</pre>\n这段代码结合上面部分便可以完成一个自动换桌面且可按键手动换桌面的程序。\n\n最后贴一下应用程序<a href=\"http://pan.baidu.com/s/1c1YXoje\">下载地址。</a>\n","source":"_posts/2017/article_43_用python写个自动改壁纸的桌面程序.md","raw":"\n---\ntitle: 用python写个自动改壁纸的桌面程序\ncatalog: true\ndate: 2017-11-10 18:11:31\n---\n\n忍无可忍桌面壁纸软件的广告了，终于决定自己写个，总体逻辑上也并不复杂。\n\n先是随机爬取某bing站的壁纸图片，调用win32接口改桌面壁纸，之后用tk的桌面程序来获取用户输入时间间隔，最后封装成exe使得更通用，在后台运行以及加个图标。<!--more-->不说了，直接上代码。\n\n由于是python3.x，库win32api库可能下载会有问题。建议直接去<a href=\"https://sourceforge.net/projects/pywin32/\">这里</a>手动下载安装。\n<pre>#coding:utf-8\n#python3.5\n#windows\nfrom PIL import Image\nimport win32api,win32con,win32gui  \nimport re,os  \nimport requests\nfrom io import BytesIO\nfrom bs4 import BeautifulSoup\nimport tkinter\nimport random\nimport math\nimport time\nimport re\n\ndef set_wallpaper_from_bmp(bmp_path):  \n    #打开指定注册表路径  \n    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER,\"Control Panel\\\\Desktop\",0,win32con.KEY_SET_VALUE)  \n    #最后的参数:2拉伸,0居中,6适应,10填充,0平铺  \n    win32api.RegSetValueEx(reg_key, \"WallpaperStyle\", 0, win32con.REG_SZ, \"2\")  \n    #最后的参数:1表示平铺,拉伸居中等都是0  \n    win32api.RegSetValueEx(reg_key, \"TileWallpaper\", 0, win32con.REG_SZ, \"0\")  \n    #刷新桌面  \n    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,bmp_path, win32con.SPIF_SENDWININICHANGE)  \n  \ndef set_wallpaper(bgimg):  \n    #把图片格式统一转换成bmp格式,并放在源图片的同一目录  \n    #注意地址必须是绝对地址\n    new_bmp_path=\"C:/backgroundPicture/wallpaper.bmp\"\n    bmpImage = Image.open(BytesIO(bgimg))\n    bmpImage.save(new_bmp_path, \"BMP\")  \n    set_wallpaper_from_bmp(new_bmp_path)  \n\ndef getPicurl():\n    #爬虫部分，主要从这个网站随机取页随机取壁纸，返回图片二进制。\n    req=requests.Session()\n    resp=req.get(\"https://bing.ioliu.cn/?p=1\")\n    soup=BeautifulSoup(resp.text,\"lxml\")\n    pageall=soup.find_all(\"span\")[-1].get_text()\n    maxpage=int(pageall.split(\"/\")[1].strip())\n    ran=math.floor(random.random()*maxpage)+1\n    resp1=req.get(\"https://bing.ioliu.cn?p=\"+str(ran))\n    soup1=BeautifulSoup(resp1.text,\"lxml\")\n    allimg=soup1.find_all(\"img\")\n    ran1=math.floor(random.random()*len(allimg))\n    resp2=req.get(\"https://bing.ioliu.cn\"+allimg[ran1].next_sibling['href'])\n    url=re.findall(r'src=\"http(.*?)\"',resp2.text)[0]\n    image=req.get(\"http\"+url)\n    return image.content\n\ndef inputint():\n    #获取用户输入的时间\n    global t\n    try:\n        t = int(var.get().strip())\n    except:\n        t = 30\n    root.destroy()\n\nif __name__ == '__main__':  \n    t=0\n    if not os.path.exists('C:/backgroundPicture/'):\n        os.mkdir(\"C:/backgroundPicture/\")\n    root = tkinter.Tk(className='请输入间隔时间(按分钟计)')  # 弹出框框名\n    root.geometry('350x60')     # 设置弹出框的大小 w x h\n    var = tkinter.StringVar()   # 这即是输入框中的内容\n    var.set(30) # 通过var.get()/var.set() 来 获取/设置var的值\n    entry1 = tkinter.Entry(root, textvariable=var)  # 设置\"文本变量\"为var\n    entry1.pack()   # 将entry\"打上去\"\n    btn1 = tkinter.Button(root, text='确认', command=inputint)     # 按下此按钮(Input), 触发inputint函数\n    btn1.pack(side='bottom')\n    root.mainloop()\n    #一直运行并用sleep间隔\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))</pre>\n关于打包成exe，在python3有个pyinstaller，直接用pip安装就行。\n\n使用方式是以下，-F打包单个文件，-w不显示命令窗口，-i图标\n<pre>pyinstaller -F -w -i bitbug_favicon.ico filename.py</pre>\n以上便是自动换桌面壁纸，另附这里添加一个功能，就是在程序运行时用按键触发换壁纸。要做的便是另写一个线程做按键监听。这里用pyHook做按键监听，关于pyhook的安装，不能简单用pip，不然用按键监听的时候会有一个bug。\n\n参考：<a href=\"https://blog.csdn.net/dongfuguo/article/details/70226384#reply\">https://blog.csdn.net/dongfuguo/article/details/70226384#reply</a>\n<pre>from ctypes import *\nimport pyHook\nimport pythoncom\nimport threading\ndef onKeyboardEvent(event):\n    global lt\n    #96为1左边那个按键，这里写法是双击\n    if event.Ascii==96:\n        if time.time()-lt&lt;2:\n            bgimg=getPicurl()\n            set_wallpaper(bgimg)\n        else:\n            lt=time.time()\n    return True\ndef task0():\n    hm = pyHook.HookManager()\n    hm.KeyDown = onKeyboardEvent\n    hm.HookKeyboard()\n    pythoncom.PumpMessages()\ndef task1():\n    global t\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))\nthreads = []\n    t1 = threading.Thread(target=task0)\n    threads.append(t1)\n    t0 = threading.Thread(target=task1)\n    threads.append(t0)\n    for i in range(2):\n        threads[i].start()\n    for i in range(2):\n        threads[i].join()</pre>\n这段代码结合上面部分便可以完成一个自动换桌面且可按键手动换桌面的程序。\n\n最后贴一下应用程序<a href=\"http://pan.baidu.com/s/1c1YXoje\">下载地址。</a>\n","slug":"2017/article_43_用python写个自动改壁纸的桌面程序","published":1,"updated":"2021-01-27T04:46:28.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72x001h0770vucapb0s","content":"<p>忍无可忍桌面壁纸软件的广告了，终于决定自己写个，总体逻辑上也并不复杂。</p>\n<p>先是随机爬取某bing站的壁纸图片，调用win32接口改桌面壁纸，之后用tk的桌面程序来获取用户输入时间间隔，最后封装成exe使得更通用，在后台运行以及加个图标。<a id=\"more\"></a>不说了，直接上代码。</p>\n<p>由于是python3.x，库win32api库可能下载会有问题。建议直接去<a href=\"https://sourceforge.net/projects/pywin32/\" target=\"_blank\" rel=\"external\">这里</a>手动下载安装。</p>\n<pre>#coding:utf-8\n#python3.5\n#windows\nfrom PIL import Image\nimport win32api,win32con,win32gui  \nimport re,os  \nimport requests\nfrom io import BytesIO\nfrom bs4 import BeautifulSoup\nimport tkinter\nimport random\nimport math\nimport time\nimport re\n\ndef set_wallpaper_from_bmp(bmp_path):  \n    #打开指定注册表路径  \n    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER,\"Control Panel\\\\Desktop\",0,win32con.KEY_SET_VALUE)  \n    #最后的参数:2拉伸,0居中,6适应,10填充,0平铺  \n    win32api.RegSetValueEx(reg_key, \"WallpaperStyle\", 0, win32con.REG_SZ, \"2\")  \n    #最后的参数:1表示平铺,拉伸居中等都是0  \n    win32api.RegSetValueEx(reg_key, \"TileWallpaper\", 0, win32con.REG_SZ, \"0\")  \n    #刷新桌面  \n    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,bmp_path, win32con.SPIF_SENDWININICHANGE)  \n  \ndef set_wallpaper(bgimg):  \n    #把图片格式统一转换成bmp格式,并放在源图片的同一目录  \n    #注意地址必须是绝对地址\n    new_bmp_path=\"C:/backgroundPicture/wallpaper.bmp\"\n    bmpImage = Image.open(BytesIO(bgimg))\n    bmpImage.save(new_bmp_path, \"BMP\")  \n    set_wallpaper_from_bmp(new_bmp_path)  \n\ndef getPicurl():\n    #爬虫部分，主要从这个网站随机取页随机取壁纸，返回图片二进制。\n    req=requests.Session()\n    resp=req.get(\"https://bing.ioliu.cn/?p=1\")\n    soup=BeautifulSoup(resp.text,\"lxml\")\n    pageall=soup.find_all(\"span\")[-1].get_text()\n    maxpage=int(pageall.split(\"/\")[1].strip())\n    ran=math.floor(random.random()*maxpage)+1\n    resp1=req.get(\"https://bing.ioliu.cn?p=\"+str(ran))\n    soup1=BeautifulSoup(resp1.text,\"lxml\")\n    allimg=soup1.find_all(\"img\")\n    ran1=math.floor(random.random()*len(allimg))\n    resp2=req.get(\"https://bing.ioliu.cn\"+allimg[ran1].next_sibling['href'])\n    url=re.findall(r'src=\"http(.*?)\"',resp2.text)[0]\n    image=req.get(\"http\"+url)\n    return image.content\n\ndef inputint():\n    #获取用户输入的时间\n    global t\n    try:\n        t = int(var.get().strip())\n    except:\n        t = 30\n    root.destroy()\n\nif __name__ == '__main__':  \n    t=0\n    if not os.path.exists('C:/backgroundPicture/'):\n        os.mkdir(\"C:/backgroundPicture/\")\n    root = tkinter.Tk(className='请输入间隔时间(按分钟计)')  # 弹出框框名\n    root.geometry('350x60')     # 设置弹出框的大小 w x h\n    var = tkinter.StringVar()   # 这即是输入框中的内容\n    var.set(30) # 通过var.get()/var.set() 来 获取/设置var的值\n    entry1 = tkinter.Entry(root, textvariable=var)  # 设置\"文本变量\"为var\n    entry1.pack()   # 将entry\"打上去\"\n    btn1 = tkinter.Button(root, text='确认', command=inputint)     # 按下此按钮(Input), 触发inputint函数\n    btn1.pack(side='bottom')\n    root.mainloop()\n    #一直运行并用sleep间隔\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))</pre>\n<p>关于打包成exe，在python3有个pyinstaller，直接用pip安装就行。</p>\n<p>使用方式是以下，-F打包单个文件，-w不显示命令窗口，-i图标</p>\n<pre>pyinstaller -F -w -i bitbug_favicon.ico filename.py</pre>\n<p>以上便是自动换桌面壁纸，另附这里添加一个功能，就是在程序运行时用按键触发换壁纸。要做的便是另写一个线程做按键监听。这里用pyHook做按键监听，关于pyhook的安装，不能简单用pip，不然用按键监听的时候会有一个bug。</p>\n<p>参考：<a href=\"https://blog.csdn.net/dongfuguo/article/details/70226384#reply\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/dongfuguo/article/details/70226384#reply</a></p>\n<pre>from ctypes import *\nimport pyHook\nimport pythoncom\nimport threading\ndef onKeyboardEvent(event):\n    global lt\n    #96为1左边那个按键，这里写法是双击\n    if event.Ascii==96:\n        if time.time()-lt&lt;2:\n            bgimg=getPicurl()\n            set_wallpaper(bgimg)\n        else:\n            lt=time.time()\n    return True\ndef task0():\n    hm = pyHook.HookManager()\n    hm.KeyDown = onKeyboardEvent\n    hm.HookKeyboard()\n    pythoncom.PumpMessages()\ndef task1():\n    global t\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))\nthreads = []\n    t1 = threading.Thread(target=task0)\n    threads.append(t1)\n    t0 = threading.Thread(target=task1)\n    threads.append(t0)\n    for i in range(2):\n        threads[i].start()\n    for i in range(2):\n        threads[i].join()</pre>\n<p>这段代码结合上面部分便可以完成一个自动换桌面且可按键手动换桌面的程序。</p>\n<p>最后贴一下应用程序<a href=\"http://pan.baidu.com/s/1c1YXoje\" target=\"_blank\" rel=\"external\">下载地址。</a></p>\n","excerpt":"<p>忍无可忍桌面壁纸软件的广告了，终于决定自己写个，总体逻辑上也并不复杂。</p>\n<p>先是随机爬取某bing站的壁纸图片，调用win32接口改桌面壁纸，之后用tk的桌面程序来获取用户输入时间间隔，最后封装成exe使得更通用，在后台运行以及加个图标。","more":"不说了，直接上代码。</p>\n<p>由于是python3.x，库win32api库可能下载会有问题。建议直接去<a href=\"https://sourceforge.net/projects/pywin32/\">这里</a>手动下载安装。</p>\n<pre>#coding:utf-8\n#python3.5\n#windows\nfrom PIL import Image\nimport win32api,win32con,win32gui  \nimport re,os  \nimport requests\nfrom io import BytesIO\nfrom bs4 import BeautifulSoup\nimport tkinter\nimport random\nimport math\nimport time\nimport re\n\ndef set_wallpaper_from_bmp(bmp_path):  \n    #打开指定注册表路径  \n    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER,\"Control Panel\\\\Desktop\",0,win32con.KEY_SET_VALUE)  \n    #最后的参数:2拉伸,0居中,6适应,10填充,0平铺  \n    win32api.RegSetValueEx(reg_key, \"WallpaperStyle\", 0, win32con.REG_SZ, \"2\")  \n    #最后的参数:1表示平铺,拉伸居中等都是0  \n    win32api.RegSetValueEx(reg_key, \"TileWallpaper\", 0, win32con.REG_SZ, \"0\")  \n    #刷新桌面  \n    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER,bmp_path, win32con.SPIF_SENDWININICHANGE)  \n  \ndef set_wallpaper(bgimg):  \n    #把图片格式统一转换成bmp格式,并放在源图片的同一目录  \n    #注意地址必须是绝对地址\n    new_bmp_path=\"C:/backgroundPicture/wallpaper.bmp\"\n    bmpImage = Image.open(BytesIO(bgimg))\n    bmpImage.save(new_bmp_path, \"BMP\")  \n    set_wallpaper_from_bmp(new_bmp_path)  \n\ndef getPicurl():\n    #爬虫部分，主要从这个网站随机取页随机取壁纸，返回图片二进制。\n    req=requests.Session()\n    resp=req.get(\"https://bing.ioliu.cn/?p=1\")\n    soup=BeautifulSoup(resp.text,\"lxml\")\n    pageall=soup.find_all(\"span\")[-1].get_text()\n    maxpage=int(pageall.split(\"/\")[1].strip())\n    ran=math.floor(random.random()*maxpage)+1\n    resp1=req.get(\"https://bing.ioliu.cn?p=\"+str(ran))\n    soup1=BeautifulSoup(resp1.text,\"lxml\")\n    allimg=soup1.find_all(\"img\")\n    ran1=math.floor(random.random()*len(allimg))\n    resp2=req.get(\"https://bing.ioliu.cn\"+allimg[ran1].next_sibling['href'])\n    url=re.findall(r'src=\"http(.*?)\"',resp2.text)[0]\n    image=req.get(\"http\"+url)\n    return image.content\n\ndef inputint():\n    #获取用户输入的时间\n    global t\n    try:\n        t = int(var.get().strip())\n    except:\n        t = 30\n    root.destroy()\n\nif __name__ == '__main__':  \n    t=0\n    if not os.path.exists('C:/backgroundPicture/'):\n        os.mkdir(\"C:/backgroundPicture/\")\n    root = tkinter.Tk(className='请输入间隔时间(按分钟计)')  # 弹出框框名\n    root.geometry('350x60')     # 设置弹出框的大小 w x h\n    var = tkinter.StringVar()   # 这即是输入框中的内容\n    var.set(30) # 通过var.get()/var.set() 来 获取/设置var的值\n    entry1 = tkinter.Entry(root, textvariable=var)  # 设置\"文本变量\"为var\n    entry1.pack()   # 将entry\"打上去\"\n    btn1 = tkinter.Button(root, text='确认', command=inputint)     # 按下此按钮(Input), 触发inputint函数\n    btn1.pack(side='bottom')\n    root.mainloop()\n    #一直运行并用sleep间隔\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))</pre>\n<p>关于打包成exe，在python3有个pyinstaller，直接用pip安装就行。</p>\n<p>使用方式是以下，-F打包单个文件，-w不显示命令窗口，-i图标</p>\n<pre>pyinstaller -F -w -i bitbug_favicon.ico filename.py</pre>\n<p>以上便是自动换桌面壁纸，另附这里添加一个功能，就是在程序运行时用按键触发换壁纸。要做的便是另写一个线程做按键监听。这里用pyHook做按键监听，关于pyhook的安装，不能简单用pip，不然用按键监听的时候会有一个bug。</p>\n<p>参考：<a href=\"https://blog.csdn.net/dongfuguo/article/details/70226384#reply\">https://blog.csdn.net/dongfuguo/article/details/70226384#reply</a></p>\n<pre>from ctypes import *\nimport pyHook\nimport pythoncom\nimport threading\ndef onKeyboardEvent(event):\n    global lt\n    #96为1左边那个按键，这里写法是双击\n    if event.Ascii==96:\n        if time.time()-lt&lt;2:\n            bgimg=getPicurl()\n            set_wallpaper(bgimg)\n        else:\n            lt=time.time()\n    return True\ndef task0():\n    hm = pyHook.HookManager()\n    hm.KeyDown = onKeyboardEvent\n    hm.HookKeyboard()\n    pythoncom.PumpMessages()\ndef task1():\n    global t\n    while True:\n        bgimg=getPicurl()\n        set_wallpaper(bgimg)\n        time.sleep(int(t*60))\nthreads = []\n    t1 = threading.Thread(target=task0)\n    threads.append(t1)\n    t0 = threading.Thread(target=task1)\n    threads.append(t0)\n    for i in range(2):\n        threads[i].start()\n    for i in range(2):\n        threads[i].join()</pre>\n<p>这段代码结合上面部分便可以完成一个自动换桌面且可按键手动换桌面的程序。</p>\n<p>最后贴一下应用程序<a href=\"http://pan.baidu.com/s/1c1YXoje\">下载地址。</a></p>"},{"title":"swoole初试，作为一个你画我猜的websocket server","catalog":true,"date":"2017-12-07T08:57:13.000Z","_content":"\nswoole也是一个php比较强大的扩展，可以实现高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket。这里实现一个WebSocket的server端的你画我猜。自我觉得还是踩坑之旅，生产环节用还是值得斟酌。<!--more-->\n\n安装环节这里不多叙述，linux上按<a href=\"https://wiki.swoole.com/wiki/page/6.html\">这里</a>的进行就可以，插一句修改php.ini那个只要加在第一行就行。\n\n然后touch一个php文件，这里命名为drawguess.php。具体内容解释在代码注释中。还有结尾彩蛋。\n<pre>&lt;?php\n//创建全局变量表，这里用于存储用户id，1024为最大容量。\n$table = new swoole_table(1024);\n$table-&gt;column('fd', swoole_table::TYPE_INT);\n$table-&gt;create();\n//定义server\n$server = new swoole_websocket_server(\"0.0.0.0\", 9501);\n$server-&gt;table = $table;\n//这里定义答案\n$anstr=\"苹果,李子,梨子,榴莲,香蕉,橙子,番茄,柿子,葡萄,水蜜桃,核桃,哈密瓜,西瓜,菠萝,蓝莓,草莓,释迦,杨桃,椰子,板栗,樱桃,荔枝,龙眼,青梅,山楂,柠檬,金桔,芒果,坚果,胡桃,枇杷\";\n$ansarr=split(\",\", $anstr);\n$ran=rand(0,count($ansarr));\n$ans=$ansarr[$ran];\n//全局计数，不同进程之间共享\n$startGame=new swoole_atomic(0);\n$players=new swoole_atomic(999);\n$k=new swoole_atomic(0);\n//定义open事件，把用户id加入表中\n//push为推送数据到客户端,这里广播需要用foreach实现。\n$server-&gt;on('open', function($server, $req) {\n    global $ans,$players,$startGame;\n    $server-&gt;table-&gt;set($req-&gt;fd, array('fd' =&gt; $req-&gt;fd));\n    if(count($server-&gt;table)==1){\n        $data=json_encode(array(\"start\"=&gt;\"-2\",\"data\"));\n        $server-&gt;push($req-&gt;fd,$data);\n    }\n    if(count($server-&gt;table)==$players-&gt;get()){\n        if($startGame-&gt;get()==0){\n            $startGame-&gt;set(1);\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$req-&gt;fd){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }\n    }\n});\n//定义接受到数据触发事件。\n//这里主逻辑为接受getdata数据，解析，start为状态，\n/*\n-4---时间到0事件\n-3---第一个玩家选择人数\n-2---第一个玩家进入事件\n-1---玩家到齐，开始游戏事件\n0----touchstart事件\n1----touchmove事件\n2----设置线条宽度\n3----设置橡皮宽度\n4----清空事件\n5----设置颜色事件\n6----答案提交事件，判断成功与否\n*/\n$server-&gt;on('message', function($server, $frame) {\n    //$server-&gt;push($frame-&gt;fd, $frame-&gt;data);\n    global $ans,$ansarr,$players,$k;\n    $getdata=json_decode($frame-&gt;data);\n    if($getdata-&gt;start==-4){\n        $ran=rand(0,count($ansarr));\n        $ans=$ansarr[$ran];\n        $i=0;\n        foreach($server-&gt;table as $u) {\n            if($i&lt;$k-&gt;get()){\n                $i++;\n            }else{\n                $player=$u[\"fd\"];\n                $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                break;\n            }\n        }\n        foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n    }\n    if($getdata-&gt;start==-3){\n        $players-&gt;set(intval($getdata-&gt;players));\n    }else{\n        if($getdata-&gt;start==6){\n            echo $getdata-&gt;answer;\n        }\n        if($getdata-&gt;start==6 &amp;&amp; $getdata-&gt;answer==$ans){\n            foreach ($server-&gt;table as $u) {\n                $res=array(\"start\"=&gt;\"6\",\"win\"=&gt;$frame-&gt;fd);\n                $server-&gt;push($u['fd'], json_encode($res));//消息广播给所有客户端    \n            }  \n            $ran=rand(0,count($ansarr));\n            $ans=$ansarr[$ran];\n            $i=0;\n            foreach($server-&gt;table as $u) {\n                if($i&lt;$k-&gt;get()){\n                    $i++;\n                }else{\n                    $player=$u[\"fd\"];\n                    $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                    break;\n                }\n            }\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }else{\n            foreach ($server-&gt;table as $u) {\n                $server-&gt;push($u['fd'], $frame-&gt;data);//消息广播给所有客户端\n            }     \n        }\n    }\n});\n//定义关闭websocket事件\n$server-&gt;on('close', function($server, $fd) {\n    echo \"client-{$fd} is closed\\n\"; \n    global $startGame;\n    $server-&gt;table-&gt;del($fd);\n    if(count($server-&gt;table)==1){\n        $startGame-&gt;set(0);\n    }\n});\n//开启server\n$server-&gt;start();</pre>\n再附上前端代码。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,minimum-scale=1.0\" name=\"viewport\" &gt;\n    &lt;title&gt;draw and guess&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        html,body{\n            padding: 0px;\n            margin: 0px;\n            -webkit-tap-highlight-color:rgba(0,0,0,0);\n        }\n        canvas{\n            border: solid 1px black;\n        }\n        input{\n            border: none;\n            border-bottom: solid 1px black;\n            line-height: 20px;\n            font-size: 20px;\n            height: 25px;\n            outline:none;\n            border-radius: 0px;\n            width: 70%;\n        }\n        button{\n            height: 30px;\n            width: 20%;\n            background-color: rgba(255,255,255,0.5);\n            border: solid 1px black;\n            border-radius: 10px;\n            outline: none;\n        }\n        .sel li{\n            list-style: none;\n            display: inline-block;\n            width: 23%;\n        }\n        .color{\n            position: absolute;\n            width: 100%;\n            margin-top: -140px;\n        }\n        .red{\n            width: 100%;\n            position: relative;\n            top: 0px;\n        }\n        .green{\n            width: 100%;\n            position: relative;\n            top:30px;\n        }\n        .blue{\n            width: 100%;\n            position: relative;\n            top: 60px;\n        }\n        .ky{\n            width: 20px;\n            height: 20px;\n            border-radius: 20px;\n            background-color: black;\n            position: absolute;\n        }\n        .jd{\n            position: absolute;\n            margin-top: 4px;\n            border: solid 1px black;\n            width: 80%;\n            height: 10px;\n            border-radius: 10px;\n        }\n        .colorz{\n            position: absolute;\n            right: 10%;\n        }\n        .showcol{\n            width: 50px;\n            height: 20px;\n            margin: 5px;\n            border:solid 1px black;\n            background-color: #000;\n        }\n        .bs li{\n            list-style: none;\n            width: 50px;\n            height: 20px;\n        }\n        .bsdiv{\n            position: absolute;\n            margin-top: -140px;\n            margin-left: 25%;\n        }\n        .ans{\n            position: absolute;\n            top: 0px;\n            right: 5px;\n        }\n        .error{\n            position: absolute;\n            top: 0;\n            left: 5px;\n        }\n        .showinfo{\n            position: absolute;\n            top: 0px;\n            width: 100%;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"ans\" id=\"answer\"&gt;&lt;/div&gt;\n    &lt;div class=\"error\" id=\"error\"&gt;&lt;/div&gt;\n    &lt;div class=\"showinfo\" id=\"showinfo\"&gt;123&lt;/div&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"600\"&gt;not support&lt;/canvas&gt;\n    &lt;div class=\"color\" id=\"col\" style=\"display:none;\"&gt;\n        &lt;div class=\"showcol\" id=\"showcolor\"&gt;&lt;/div&gt;\n        &lt;div class=\"red\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"redmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;r&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"green\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"greenmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;g&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"blue\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"bluemove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;b&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"sel\"&gt;\n        &lt;ul&gt;\n            &lt;li id=\"colorblock\"&gt;颜色&lt;/li&gt;\n            &lt;li id=\"bsblock\" style=\"margin-left:-10px;\"&gt;\n                &lt;select name=\"\" id=\"selbs\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;画笔&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li style=\"margin-right:10px;\"&gt;\n                &lt;select name=\"\" id=\"xpsel\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;橡皮&lt;/option&gt;\n                    &lt;option value=\"0\"&gt;取消&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li id=\"clear\"&gt;清空&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;input type=\"text\" id=\"ans\"&gt;\n    &lt;button class=\"btn\" id=\"sub\"&gt;提交&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        showinfo(\"您已进入游戏，请等待\");\n        var wsServer = 'ws://123.206.217.190:9501';\n        var ws = new WebSocket(wsServer);\n        var can=document.getElementById(\"can\");\n        var color=document.getElementById(\"col\");\n        var rm=document.getElementById(\"redmove\");\n        var gm=document.getElementById(\"greenmove\");\n        var bm=document.getElementById(\"bluemove\");\n        var showcol=document.getElementById(\"showcolor\");\n        var bsdiv=document.getElementById(\"bsdiv\");\n        var sub=document.getElementById(\"sub\");\n        var colorclicked=0;\n        var colorshow=[0,0,0];\n        var lineWidth=1;\n        var xpWidth=0;\n        var myturn=0;\n        var players=0;\n        var deadtime=60;\n        var timejishu;\n\n        var cvs=can.getContext(\"2d\");\n        var whmin = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w=can.width=whmin-2;\n        var h=can.height=whmin-2;\n\n        color.addEventListener('touchstart',stcolor,{passive:false});\n        color.addEventListener('touchmove',chcolor,{passtive:false});\n        rm.addEventListener('touchstart',colormove,{passive:false});\n        gm.addEventListener('touchstart',colormove,{passive:false});\n        bm.addEventListener('touchstart',colormove,{passive:false});\n\n        ws.onopen=function(e){\n            can.addEventListener('touchstart',sendstart,{passive:false});\n            can.addEventListener('touchmove',sendmove,{passive:false});\n            function sendstart(e){\n                e.preventDefault();\n                let data={\"start\":\"0\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n            function sendmove(e){\n                e.preventDefault();\n                let data={\"start\":\"1\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n        }\n\n        ws.onmessage=function(e){\n            var con=JSON.parse(e.data);\n            switch(con.start){\n                case \"-2\":\n                    console.log(con)\n                    players=prompt(\"请选择玩家人数\");\n                    let data={\"start\":\"-3\",\"players\":players};\n                    ws.send(JSON.stringify(data));\n                    break\n                case \"-1\":\n                    if(con.draw==\"1\"){\n                        console.log(timejishu)\n                        showinfo(\"该你画咯\");\n                        document.getElementById(\"answer\").innerHTML=con.ans;\n                        timejishu=setInterval(function(){\n                            deadtime--;\n                            if(deadtime&lt;55){\n                                document.getElementById(\"showinfo\").innerHTML=deadtime;\n                            }\n                            if(deadtime==0){\n                                let data={\"start\":\"-4\"};\n                                ws.send(JSON.stringify(data));\n                                deadtime=60;\n                                clearInterval(timejishu);\n                            }\n                        },1000);\n                        myturn=1;\n                    }else{\n                        showinfo(\"游戏开始\");\n                        document.getElementById(\"answer\").innerHTML=\"\";\n                        if(timejishu!=undefined){\n                            clearInterval(timejishu);\n                        }\n                        myturn=0;\n                    }\n                    break\n                case \"0\":\n                    tstart(con.coor[0],con.coor[1]);\n                    break\n                case \"1\":\n                    move(con.coor[0],con.coor[1]);\n                    break\n                case \"2\":\n                    lineWidth=con.lineWidth;\n                    break;\n                case \"3\":\n                    xpWidth=con.xpWidth;\n                    break;\n                case \"4\":\n                    cvs.clearRect(0,0,w,h); \n                    break;\n                case \"5\":\n                    colorshow=con.color;\n                    break;\n                case \"6\":\n                    if(con.win!=undefined){\n                        alert(con.win+\" win!\");\n                        deadtime=60;\n                    }else{\n                        document.getElementById(\"error\").innerHTML=\"error:\\n\"+con.answer;\n                    }\n            }\n        }\n        \n        document.getElementById(\"colorblock\").onclick=function(){\n            if(color.style.display==\"none\"){\n                color.style.display=\"block\";\n                this.innerHTML=\"确认\";\n            }else{\n                color.style.display=\"none\";\n                let data={\"start\":\"5\",\"color\":colorshow};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n                this.innerHTML=\"颜色\";\n            }\n        }\n        document.getElementById(\"selbs\").onchange=function(){\n            let data={\"start\":\"2\",\"lineWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"xpsel\").onchange=function(){\n            let data={\"start\":\"3\",\"xpWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"clear\").onclick=function(){\n            if(myturn==1){\n                ws.send(JSON.stringify({\"start\":\"4\"}));  \n            }\n        }\n        sub.onclick=function(){\n            var ans=document.getElementById(\"ans\").value;\n            let data={\"start\":\"6\",\"answer\":ans};\n            ws.send(JSON.stringify(data));\n        }\n\n        function showinfo(info){\n            document.getElementById(\"showinfo\").innerHTML=info;\n        }\n\n        function tstart(x,y){\n            //e.preventDefault();\n            cvs.beginPath();\n            cvs.moveTo(x,y);\n        }\n        function move(x,y){\n            //e.preventDefault();\n            if(xpWidth!=0){\n                cvs.clearRect(x-xpWidth*2,y-xpWidth*2,xpWidth*4,xpWidth*4);\n            }else{\n                cvs.lineTo(x,y);\n                cvs.lineWidth=lineWidth*2;\n                cvs.lineCap='round';\n                cvs.lineJoin=\"round\";\n                cvs.strokeStyle=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n                cvs.stroke();\n            }\n        }\n        function stcolor(e){\n            e.preventDefault();\n        }\n        function chcolor(e){\n            e.preventDefault();\n            if(e.targetTouches[0].clientX&lt;window.innerWidth*0.8){\n                this.children[colorclicked].children[1].style.left=e.targetTouches[0].clientX+\"px\";\n                colorshow[colorclicked-1]=parseInt(e.targetTouches[0].clientX/(window.innerWidth*0.8)*255)\n            }\n            showcol.style.backgroundColor=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n        }\n        function colormove(e){\n            e.preventDefault();\n            if(this.id==\"redmove\"){\n                colorclicked=1;\n            }else if(this.id==\"greenmove\"){\n                colorclicked=2;\n            }else{\n                colorclicked=3;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n运行的话，服务器端\n<pre>php drawguess.php</pre>\n客户端，swoole的http服务器的话这里不做叙述，可使用python2.x作为http服务器\n<pre>python -m SimpleHTTPServer 80</pre>\n或者python3.x\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">server</span> <span class=\"mi\">80</span></pre>\n特别说明，这里还会有个bug，回答问题时有正确答案判断为错误，感觉是编码问题，然后这个服务器端运行的时候也是如果有输出中文的话也会输出乱码。有看到改php.ini什么为utf-8，好像也没效果。\n\n另一个若是开发阶段，经常改服务器端，但每次去找pid并kill比较麻烦，因此可以写个shell命令来自动做一步。\n<pre>#!/bin/sh\nkill `lsof -t -i:此处写server的端口`\nsleep 2\nphp 此处写绝对路径/drawguess.php\nsleep 1\nnetstat -ntlp</pre>\nswoole值得探究的可能还很多，然而确实踩坑。。。。\n","source":"_posts/2017/article_46_swoole初试，作为一个你画我猜的websocket server.md","raw":"\n---\ntitle: swoole初试，作为一个你画我猜的websocket server\ncatalog: true\ndate: 2017-12-7 16:57:13\n---\n\nswoole也是一个php比较强大的扩展，可以实现高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket。这里实现一个WebSocket的server端的你画我猜。自我觉得还是踩坑之旅，生产环节用还是值得斟酌。<!--more-->\n\n安装环节这里不多叙述，linux上按<a href=\"https://wiki.swoole.com/wiki/page/6.html\">这里</a>的进行就可以，插一句修改php.ini那个只要加在第一行就行。\n\n然后touch一个php文件，这里命名为drawguess.php。具体内容解释在代码注释中。还有结尾彩蛋。\n<pre>&lt;?php\n//创建全局变量表，这里用于存储用户id，1024为最大容量。\n$table = new swoole_table(1024);\n$table-&gt;column('fd', swoole_table::TYPE_INT);\n$table-&gt;create();\n//定义server\n$server = new swoole_websocket_server(\"0.0.0.0\", 9501);\n$server-&gt;table = $table;\n//这里定义答案\n$anstr=\"苹果,李子,梨子,榴莲,香蕉,橙子,番茄,柿子,葡萄,水蜜桃,核桃,哈密瓜,西瓜,菠萝,蓝莓,草莓,释迦,杨桃,椰子,板栗,樱桃,荔枝,龙眼,青梅,山楂,柠檬,金桔,芒果,坚果,胡桃,枇杷\";\n$ansarr=split(\",\", $anstr);\n$ran=rand(0,count($ansarr));\n$ans=$ansarr[$ran];\n//全局计数，不同进程之间共享\n$startGame=new swoole_atomic(0);\n$players=new swoole_atomic(999);\n$k=new swoole_atomic(0);\n//定义open事件，把用户id加入表中\n//push为推送数据到客户端,这里广播需要用foreach实现。\n$server-&gt;on('open', function($server, $req) {\n    global $ans,$players,$startGame;\n    $server-&gt;table-&gt;set($req-&gt;fd, array('fd' =&gt; $req-&gt;fd));\n    if(count($server-&gt;table)==1){\n        $data=json_encode(array(\"start\"=&gt;\"-2\",\"data\"));\n        $server-&gt;push($req-&gt;fd,$data);\n    }\n    if(count($server-&gt;table)==$players-&gt;get()){\n        if($startGame-&gt;get()==0){\n            $startGame-&gt;set(1);\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$req-&gt;fd){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }\n    }\n});\n//定义接受到数据触发事件。\n//这里主逻辑为接受getdata数据，解析，start为状态，\n/*\n-4---时间到0事件\n-3---第一个玩家选择人数\n-2---第一个玩家进入事件\n-1---玩家到齐，开始游戏事件\n0----touchstart事件\n1----touchmove事件\n2----设置线条宽度\n3----设置橡皮宽度\n4----清空事件\n5----设置颜色事件\n6----答案提交事件，判断成功与否\n*/\n$server-&gt;on('message', function($server, $frame) {\n    //$server-&gt;push($frame-&gt;fd, $frame-&gt;data);\n    global $ans,$ansarr,$players,$k;\n    $getdata=json_decode($frame-&gt;data);\n    if($getdata-&gt;start==-4){\n        $ran=rand(0,count($ansarr));\n        $ans=$ansarr[$ran];\n        $i=0;\n        foreach($server-&gt;table as $u) {\n            if($i&lt;$k-&gt;get()){\n                $i++;\n            }else{\n                $player=$u[\"fd\"];\n                $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                break;\n            }\n        }\n        foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n    }\n    if($getdata-&gt;start==-3){\n        $players-&gt;set(intval($getdata-&gt;players));\n    }else{\n        if($getdata-&gt;start==6){\n            echo $getdata-&gt;answer;\n        }\n        if($getdata-&gt;start==6 &amp;&amp; $getdata-&gt;answer==$ans){\n            foreach ($server-&gt;table as $u) {\n                $res=array(\"start\"=&gt;\"6\",\"win\"=&gt;$frame-&gt;fd);\n                $server-&gt;push($u['fd'], json_encode($res));//消息广播给所有客户端    \n            }  \n            $ran=rand(0,count($ansarr));\n            $ans=$ansarr[$ran];\n            $i=0;\n            foreach($server-&gt;table as $u) {\n                if($i&lt;$k-&gt;get()){\n                    $i++;\n                }else{\n                    $player=$u[\"fd\"];\n                    $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                    break;\n                }\n            }\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }else{\n            foreach ($server-&gt;table as $u) {\n                $server-&gt;push($u['fd'], $frame-&gt;data);//消息广播给所有客户端\n            }     \n        }\n    }\n});\n//定义关闭websocket事件\n$server-&gt;on('close', function($server, $fd) {\n    echo \"client-{$fd} is closed\\n\"; \n    global $startGame;\n    $server-&gt;table-&gt;del($fd);\n    if(count($server-&gt;table)==1){\n        $startGame-&gt;set(0);\n    }\n});\n//开启server\n$server-&gt;start();</pre>\n再附上前端代码。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,minimum-scale=1.0\" name=\"viewport\" &gt;\n    &lt;title&gt;draw and guess&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        html,body{\n            padding: 0px;\n            margin: 0px;\n            -webkit-tap-highlight-color:rgba(0,0,0,0);\n        }\n        canvas{\n            border: solid 1px black;\n        }\n        input{\n            border: none;\n            border-bottom: solid 1px black;\n            line-height: 20px;\n            font-size: 20px;\n            height: 25px;\n            outline:none;\n            border-radius: 0px;\n            width: 70%;\n        }\n        button{\n            height: 30px;\n            width: 20%;\n            background-color: rgba(255,255,255,0.5);\n            border: solid 1px black;\n            border-radius: 10px;\n            outline: none;\n        }\n        .sel li{\n            list-style: none;\n            display: inline-block;\n            width: 23%;\n        }\n        .color{\n            position: absolute;\n            width: 100%;\n            margin-top: -140px;\n        }\n        .red{\n            width: 100%;\n            position: relative;\n            top: 0px;\n        }\n        .green{\n            width: 100%;\n            position: relative;\n            top:30px;\n        }\n        .blue{\n            width: 100%;\n            position: relative;\n            top: 60px;\n        }\n        .ky{\n            width: 20px;\n            height: 20px;\n            border-radius: 20px;\n            background-color: black;\n            position: absolute;\n        }\n        .jd{\n            position: absolute;\n            margin-top: 4px;\n            border: solid 1px black;\n            width: 80%;\n            height: 10px;\n            border-radius: 10px;\n        }\n        .colorz{\n            position: absolute;\n            right: 10%;\n        }\n        .showcol{\n            width: 50px;\n            height: 20px;\n            margin: 5px;\n            border:solid 1px black;\n            background-color: #000;\n        }\n        .bs li{\n            list-style: none;\n            width: 50px;\n            height: 20px;\n        }\n        .bsdiv{\n            position: absolute;\n            margin-top: -140px;\n            margin-left: 25%;\n        }\n        .ans{\n            position: absolute;\n            top: 0px;\n            right: 5px;\n        }\n        .error{\n            position: absolute;\n            top: 0;\n            left: 5px;\n        }\n        .showinfo{\n            position: absolute;\n            top: 0px;\n            width: 100%;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"ans\" id=\"answer\"&gt;&lt;/div&gt;\n    &lt;div class=\"error\" id=\"error\"&gt;&lt;/div&gt;\n    &lt;div class=\"showinfo\" id=\"showinfo\"&gt;123&lt;/div&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"600\"&gt;not support&lt;/canvas&gt;\n    &lt;div class=\"color\" id=\"col\" style=\"display:none;\"&gt;\n        &lt;div class=\"showcol\" id=\"showcolor\"&gt;&lt;/div&gt;\n        &lt;div class=\"red\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"redmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;r&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"green\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"greenmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;g&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"blue\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"bluemove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;b&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"sel\"&gt;\n        &lt;ul&gt;\n            &lt;li id=\"colorblock\"&gt;颜色&lt;/li&gt;\n            &lt;li id=\"bsblock\" style=\"margin-left:-10px;\"&gt;\n                &lt;select name=\"\" id=\"selbs\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;画笔&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li style=\"margin-right:10px;\"&gt;\n                &lt;select name=\"\" id=\"xpsel\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;橡皮&lt;/option&gt;\n                    &lt;option value=\"0\"&gt;取消&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li id=\"clear\"&gt;清空&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;input type=\"text\" id=\"ans\"&gt;\n    &lt;button class=\"btn\" id=\"sub\"&gt;提交&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        showinfo(\"您已进入游戏，请等待\");\n        var wsServer = 'ws://123.206.217.190:9501';\n        var ws = new WebSocket(wsServer);\n        var can=document.getElementById(\"can\");\n        var color=document.getElementById(\"col\");\n        var rm=document.getElementById(\"redmove\");\n        var gm=document.getElementById(\"greenmove\");\n        var bm=document.getElementById(\"bluemove\");\n        var showcol=document.getElementById(\"showcolor\");\n        var bsdiv=document.getElementById(\"bsdiv\");\n        var sub=document.getElementById(\"sub\");\n        var colorclicked=0;\n        var colorshow=[0,0,0];\n        var lineWidth=1;\n        var xpWidth=0;\n        var myturn=0;\n        var players=0;\n        var deadtime=60;\n        var timejishu;\n\n        var cvs=can.getContext(\"2d\");\n        var whmin = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w=can.width=whmin-2;\n        var h=can.height=whmin-2;\n\n        color.addEventListener('touchstart',stcolor,{passive:false});\n        color.addEventListener('touchmove',chcolor,{passtive:false});\n        rm.addEventListener('touchstart',colormove,{passive:false});\n        gm.addEventListener('touchstart',colormove,{passive:false});\n        bm.addEventListener('touchstart',colormove,{passive:false});\n\n        ws.onopen=function(e){\n            can.addEventListener('touchstart',sendstart,{passive:false});\n            can.addEventListener('touchmove',sendmove,{passive:false});\n            function sendstart(e){\n                e.preventDefault();\n                let data={\"start\":\"0\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n            function sendmove(e){\n                e.preventDefault();\n                let data={\"start\":\"1\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n        }\n\n        ws.onmessage=function(e){\n            var con=JSON.parse(e.data);\n            switch(con.start){\n                case \"-2\":\n                    console.log(con)\n                    players=prompt(\"请选择玩家人数\");\n                    let data={\"start\":\"-3\",\"players\":players};\n                    ws.send(JSON.stringify(data));\n                    break\n                case \"-1\":\n                    if(con.draw==\"1\"){\n                        console.log(timejishu)\n                        showinfo(\"该你画咯\");\n                        document.getElementById(\"answer\").innerHTML=con.ans;\n                        timejishu=setInterval(function(){\n                            deadtime--;\n                            if(deadtime&lt;55){\n                                document.getElementById(\"showinfo\").innerHTML=deadtime;\n                            }\n                            if(deadtime==0){\n                                let data={\"start\":\"-4\"};\n                                ws.send(JSON.stringify(data));\n                                deadtime=60;\n                                clearInterval(timejishu);\n                            }\n                        },1000);\n                        myturn=1;\n                    }else{\n                        showinfo(\"游戏开始\");\n                        document.getElementById(\"answer\").innerHTML=\"\";\n                        if(timejishu!=undefined){\n                            clearInterval(timejishu);\n                        }\n                        myturn=0;\n                    }\n                    break\n                case \"0\":\n                    tstart(con.coor[0],con.coor[1]);\n                    break\n                case \"1\":\n                    move(con.coor[0],con.coor[1]);\n                    break\n                case \"2\":\n                    lineWidth=con.lineWidth;\n                    break;\n                case \"3\":\n                    xpWidth=con.xpWidth;\n                    break;\n                case \"4\":\n                    cvs.clearRect(0,0,w,h); \n                    break;\n                case \"5\":\n                    colorshow=con.color;\n                    break;\n                case \"6\":\n                    if(con.win!=undefined){\n                        alert(con.win+\" win!\");\n                        deadtime=60;\n                    }else{\n                        document.getElementById(\"error\").innerHTML=\"error:\\n\"+con.answer;\n                    }\n            }\n        }\n        \n        document.getElementById(\"colorblock\").onclick=function(){\n            if(color.style.display==\"none\"){\n                color.style.display=\"block\";\n                this.innerHTML=\"确认\";\n            }else{\n                color.style.display=\"none\";\n                let data={\"start\":\"5\",\"color\":colorshow};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n                this.innerHTML=\"颜色\";\n            }\n        }\n        document.getElementById(\"selbs\").onchange=function(){\n            let data={\"start\":\"2\",\"lineWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"xpsel\").onchange=function(){\n            let data={\"start\":\"3\",\"xpWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"clear\").onclick=function(){\n            if(myturn==1){\n                ws.send(JSON.stringify({\"start\":\"4\"}));  \n            }\n        }\n        sub.onclick=function(){\n            var ans=document.getElementById(\"ans\").value;\n            let data={\"start\":\"6\",\"answer\":ans};\n            ws.send(JSON.stringify(data));\n        }\n\n        function showinfo(info){\n            document.getElementById(\"showinfo\").innerHTML=info;\n        }\n\n        function tstart(x,y){\n            //e.preventDefault();\n            cvs.beginPath();\n            cvs.moveTo(x,y);\n        }\n        function move(x,y){\n            //e.preventDefault();\n            if(xpWidth!=0){\n                cvs.clearRect(x-xpWidth*2,y-xpWidth*2,xpWidth*4,xpWidth*4);\n            }else{\n                cvs.lineTo(x,y);\n                cvs.lineWidth=lineWidth*2;\n                cvs.lineCap='round';\n                cvs.lineJoin=\"round\";\n                cvs.strokeStyle=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n                cvs.stroke();\n            }\n        }\n        function stcolor(e){\n            e.preventDefault();\n        }\n        function chcolor(e){\n            e.preventDefault();\n            if(e.targetTouches[0].clientX&lt;window.innerWidth*0.8){\n                this.children[colorclicked].children[1].style.left=e.targetTouches[0].clientX+\"px\";\n                colorshow[colorclicked-1]=parseInt(e.targetTouches[0].clientX/(window.innerWidth*0.8)*255)\n            }\n            showcol.style.backgroundColor=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n        }\n        function colormove(e){\n            e.preventDefault();\n            if(this.id==\"redmove\"){\n                colorclicked=1;\n            }else if(this.id==\"greenmove\"){\n                colorclicked=2;\n            }else{\n                colorclicked=3;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n运行的话，服务器端\n<pre>php drawguess.php</pre>\n客户端，swoole的http服务器的话这里不做叙述，可使用python2.x作为http服务器\n<pre>python -m SimpleHTTPServer 80</pre>\n或者python3.x\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">server</span> <span class=\"mi\">80</span></pre>\n特别说明，这里还会有个bug，回答问题时有正确答案判断为错误，感觉是编码问题，然后这个服务器端运行的时候也是如果有输出中文的话也会输出乱码。有看到改php.ini什么为utf-8，好像也没效果。\n\n另一个若是开发阶段，经常改服务器端，但每次去找pid并kill比较麻烦，因此可以写个shell命令来自动做一步。\n<pre>#!/bin/sh\nkill `lsof -t -i:此处写server的端口`\nsleep 2\nphp 此处写绝对路径/drawguess.php\nsleep 1\nnetstat -ntlp</pre>\nswoole值得探究的可能还很多，然而确实踩坑。。。。\n","slug":"2017/article_46_swoole初试，作为一个你画我猜的websocket server","published":1,"updated":"2021-01-27T04:46:28.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72y001i0770afd50mhu","content":"<p>swoole也是一个php比较强大的扩展，可以实现高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket。这里实现一个WebSocket的server端的你画我猜。自我觉得还是踩坑之旅，生产环节用还是值得斟酌。<a id=\"more\"></a></p>\n<p>安装环节这里不多叙述，linux上按<a href=\"https://wiki.swoole.com/wiki/page/6.html\" target=\"_blank\" rel=\"external\">这里</a>的进行就可以，插一句修改php.ini那个只要加在第一行就行。</p>\n<p>然后touch一个php文件，这里命名为drawguess.php。具体内容解释在代码注释中。还有结尾彩蛋。</p>\n<pre>&lt;?php\n//创建全局变量表，这里用于存储用户id，1024为最大容量。\n$table = new swoole_table(1024);\n$table-&gt;column('fd', swoole_table::TYPE_INT);\n$table-&gt;create();\n//定义server\n$server = new swoole_websocket_server(\"0.0.0.0\", 9501);\n$server-&gt;table = $table;\n//这里定义答案\n$anstr=\"苹果,李子,梨子,榴莲,香蕉,橙子,番茄,柿子,葡萄,水蜜桃,核桃,哈密瓜,西瓜,菠萝,蓝莓,草莓,释迦,杨桃,椰子,板栗,樱桃,荔枝,龙眼,青梅,山楂,柠檬,金桔,芒果,坚果,胡桃,枇杷\";\n$ansarr=split(\",\", $anstr);\n$ran=rand(0,count($ansarr));\n$ans=$ansarr[$ran];\n//全局计数，不同进程之间共享\n$startGame=new swoole_atomic(0);\n$players=new swoole_atomic(999);\n$k=new swoole_atomic(0);\n//定义open事件，把用户id加入表中\n//push为推送数据到客户端,这里广播需要用foreach实现。\n$server-&gt;on('open', function($server, $req) {\n    global $ans,$players,$startGame;\n    $server-&gt;table-&gt;set($req-&gt;fd, array('fd' =&gt; $req-&gt;fd));\n    if(count($server-&gt;table)==1){\n        $data=json_encode(array(\"start\"=&gt;\"-2\",\"data\"));\n        $server-&gt;push($req-&gt;fd,$data);\n    }\n    if(count($server-&gt;table)==$players-&gt;get()){\n        if($startGame-&gt;get()==0){\n            $startGame-&gt;set(1);\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$req-&gt;fd){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }\n    }\n});\n//定义接受到数据触发事件。\n//这里主逻辑为接受getdata数据，解析，start为状态，\n/*\n-4---时间到0事件\n-3---第一个玩家选择人数\n-2---第一个玩家进入事件\n-1---玩家到齐，开始游戏事件\n0----touchstart事件\n1----touchmove事件\n2----设置线条宽度\n3----设置橡皮宽度\n4----清空事件\n5----设置颜色事件\n6----答案提交事件，判断成功与否\n*/\n$server-&gt;on('message', function($server, $frame) {\n    //$server-&gt;push($frame-&gt;fd, $frame-&gt;data);\n    global $ans,$ansarr,$players,$k;\n    $getdata=json_decode($frame-&gt;data);\n    if($getdata-&gt;start==-4){\n        $ran=rand(0,count($ansarr));\n        $ans=$ansarr[$ran];\n        $i=0;\n        foreach($server-&gt;table as $u) {\n            if($i&lt;$k-&gt;get()){\n                $i++;\n            }else{\n                $player=$u[\"fd\"];\n                $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                break;\n            }\n        }\n        foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n    }\n    if($getdata-&gt;start==-3){\n        $players-&gt;set(intval($getdata-&gt;players));\n    }else{\n        if($getdata-&gt;start==6){\n            echo $getdata-&gt;answer;\n        }\n        if($getdata-&gt;start==6 &amp;&amp; $getdata-&gt;answer==$ans){\n            foreach ($server-&gt;table as $u) {\n                $res=array(\"start\"=&gt;\"6\",\"win\"=&gt;$frame-&gt;fd);\n                $server-&gt;push($u['fd'], json_encode($res));//消息广播给所有客户端    \n            }  \n            $ran=rand(0,count($ansarr));\n            $ans=$ansarr[$ran];\n            $i=0;\n            foreach($server-&gt;table as $u) {\n                if($i&lt;$k-&gt;get()){\n                    $i++;\n                }else{\n                    $player=$u[\"fd\"];\n                    $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                    break;\n                }\n            }\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }else{\n            foreach ($server-&gt;table as $u) {\n                $server-&gt;push($u['fd'], $frame-&gt;data);//消息广播给所有客户端\n            }     \n        }\n    }\n});\n//定义关闭websocket事件\n$server-&gt;on('close', function($server, $fd) {\n    echo \"client-{$fd} is closed\\n\"; \n    global $startGame;\n    $server-&gt;table-&gt;del($fd);\n    if(count($server-&gt;table)==1){\n        $startGame-&gt;set(0);\n    }\n});\n//开启server\n$server-&gt;start();</pre>\n<p>再附上前端代码。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,minimum-scale=1.0\" name=\"viewport\" &gt;\n    &lt;title&gt;draw and guess&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        html,body{\n            padding: 0px;\n            margin: 0px;\n            -webkit-tap-highlight-color:rgba(0,0,0,0);\n        }\n        canvas{\n            border: solid 1px black;\n        }\n        input{\n            border: none;\n            border-bottom: solid 1px black;\n            line-height: 20px;\n            font-size: 20px;\n            height: 25px;\n            outline:none;\n            border-radius: 0px;\n            width: 70%;\n        }\n        button{\n            height: 30px;\n            width: 20%;\n            background-color: rgba(255,255,255,0.5);\n            border: solid 1px black;\n            border-radius: 10px;\n            outline: none;\n        }\n        .sel li{\n            list-style: none;\n            display: inline-block;\n            width: 23%;\n        }\n        .color{\n            position: absolute;\n            width: 100%;\n            margin-top: -140px;\n        }\n        .red{\n            width: 100%;\n            position: relative;\n            top: 0px;\n        }\n        .green{\n            width: 100%;\n            position: relative;\n            top:30px;\n        }\n        .blue{\n            width: 100%;\n            position: relative;\n            top: 60px;\n        }\n        .ky{\n            width: 20px;\n            height: 20px;\n            border-radius: 20px;\n            background-color: black;\n            position: absolute;\n        }\n        .jd{\n            position: absolute;\n            margin-top: 4px;\n            border: solid 1px black;\n            width: 80%;\n            height: 10px;\n            border-radius: 10px;\n        }\n        .colorz{\n            position: absolute;\n            right: 10%;\n        }\n        .showcol{\n            width: 50px;\n            height: 20px;\n            margin: 5px;\n            border:solid 1px black;\n            background-color: #000;\n        }\n        .bs li{\n            list-style: none;\n            width: 50px;\n            height: 20px;\n        }\n        .bsdiv{\n            position: absolute;\n            margin-top: -140px;\n            margin-left: 25%;\n        }\n        .ans{\n            position: absolute;\n            top: 0px;\n            right: 5px;\n        }\n        .error{\n            position: absolute;\n            top: 0;\n            left: 5px;\n        }\n        .showinfo{\n            position: absolute;\n            top: 0px;\n            width: 100%;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"ans\" id=\"answer\"&gt;&lt;/div&gt;\n    &lt;div class=\"error\" id=\"error\"&gt;&lt;/div&gt;\n    &lt;div class=\"showinfo\" id=\"showinfo\"&gt;123&lt;/div&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"600\"&gt;not support&lt;/canvas&gt;\n    &lt;div class=\"color\" id=\"col\" style=\"display:none;\"&gt;\n        &lt;div class=\"showcol\" id=\"showcolor\"&gt;&lt;/div&gt;\n        &lt;div class=\"red\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"redmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;r&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"green\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"greenmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;g&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"blue\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"bluemove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;b&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"sel\"&gt;\n        &lt;ul&gt;\n            &lt;li id=\"colorblock\"&gt;颜色&lt;/li&gt;\n            &lt;li id=\"bsblock\" style=\"margin-left:-10px;\"&gt;\n                &lt;select name=\"\" id=\"selbs\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;画笔&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li style=\"margin-right:10px;\"&gt;\n                &lt;select name=\"\" id=\"xpsel\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;橡皮&lt;/option&gt;\n                    &lt;option value=\"0\"&gt;取消&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li id=\"clear\"&gt;清空&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;input type=\"text\" id=\"ans\"&gt;\n    &lt;button class=\"btn\" id=\"sub\"&gt;提交&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        showinfo(\"您已进入游戏，请等待\");\n        var wsServer = 'ws://123.206.217.190:9501';\n        var ws = new WebSocket(wsServer);\n        var can=document.getElementById(\"can\");\n        var color=document.getElementById(\"col\");\n        var rm=document.getElementById(\"redmove\");\n        var gm=document.getElementById(\"greenmove\");\n        var bm=document.getElementById(\"bluemove\");\n        var showcol=document.getElementById(\"showcolor\");\n        var bsdiv=document.getElementById(\"bsdiv\");\n        var sub=document.getElementById(\"sub\");\n        var colorclicked=0;\n        var colorshow=[0,0,0];\n        var lineWidth=1;\n        var xpWidth=0;\n        var myturn=0;\n        var players=0;\n        var deadtime=60;\n        var timejishu;\n\n        var cvs=can.getContext(\"2d\");\n        var whmin = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w=can.width=whmin-2;\n        var h=can.height=whmin-2;\n\n        color.addEventListener('touchstart',stcolor,{passive:false});\n        color.addEventListener('touchmove',chcolor,{passtive:false});\n        rm.addEventListener('touchstart',colormove,{passive:false});\n        gm.addEventListener('touchstart',colormove,{passive:false});\n        bm.addEventListener('touchstart',colormove,{passive:false});\n\n        ws.onopen=function(e){\n            can.addEventListener('touchstart',sendstart,{passive:false});\n            can.addEventListener('touchmove',sendmove,{passive:false});\n            function sendstart(e){\n                e.preventDefault();\n                let data={\"start\":\"0\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n            function sendmove(e){\n                e.preventDefault();\n                let data={\"start\":\"1\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n        }\n\n        ws.onmessage=function(e){\n            var con=JSON.parse(e.data);\n            switch(con.start){\n                case \"-2\":\n                    console.log(con)\n                    players=prompt(\"请选择玩家人数\");\n                    let data={\"start\":\"-3\",\"players\":players};\n                    ws.send(JSON.stringify(data));\n                    break\n                case \"-1\":\n                    if(con.draw==\"1\"){\n                        console.log(timejishu)\n                        showinfo(\"该你画咯\");\n                        document.getElementById(\"answer\").innerHTML=con.ans;\n                        timejishu=setInterval(function(){\n                            deadtime--;\n                            if(deadtime&lt;55){\n                                document.getElementById(\"showinfo\").innerHTML=deadtime;\n                            }\n                            if(deadtime==0){\n                                let data={\"start\":\"-4\"};\n                                ws.send(JSON.stringify(data));\n                                deadtime=60;\n                                clearInterval(timejishu);\n                            }\n                        },1000);\n                        myturn=1;\n                    }else{\n                        showinfo(\"游戏开始\");\n                        document.getElementById(\"answer\").innerHTML=\"\";\n                        if(timejishu!=undefined){\n                            clearInterval(timejishu);\n                        }\n                        myturn=0;\n                    }\n                    break\n                case \"0\":\n                    tstart(con.coor[0],con.coor[1]);\n                    break\n                case \"1\":\n                    move(con.coor[0],con.coor[1]);\n                    break\n                case \"2\":\n                    lineWidth=con.lineWidth;\n                    break;\n                case \"3\":\n                    xpWidth=con.xpWidth;\n                    break;\n                case \"4\":\n                    cvs.clearRect(0,0,w,h); \n                    break;\n                case \"5\":\n                    colorshow=con.color;\n                    break;\n                case \"6\":\n                    if(con.win!=undefined){\n                        alert(con.win+\" win!\");\n                        deadtime=60;\n                    }else{\n                        document.getElementById(\"error\").innerHTML=\"error:\\n\"+con.answer;\n                    }\n            }\n        }\n        \n        document.getElementById(\"colorblock\").onclick=function(){\n            if(color.style.display==\"none\"){\n                color.style.display=\"block\";\n                this.innerHTML=\"确认\";\n            }else{\n                color.style.display=\"none\";\n                let data={\"start\":\"5\",\"color\":colorshow};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n                this.innerHTML=\"颜色\";\n            }\n        }\n        document.getElementById(\"selbs\").onchange=function(){\n            let data={\"start\":\"2\",\"lineWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"xpsel\").onchange=function(){\n            let data={\"start\":\"3\",\"xpWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"clear\").onclick=function(){\n            if(myturn==1){\n                ws.send(JSON.stringify({\"start\":\"4\"}));  \n            }\n        }\n        sub.onclick=function(){\n            var ans=document.getElementById(\"ans\").value;\n            let data={\"start\":\"6\",\"answer\":ans};\n            ws.send(JSON.stringify(data));\n        }\n\n        function showinfo(info){\n            document.getElementById(\"showinfo\").innerHTML=info;\n        }\n\n        function tstart(x,y){\n            //e.preventDefault();\n            cvs.beginPath();\n            cvs.moveTo(x,y);\n        }\n        function move(x,y){\n            //e.preventDefault();\n            if(xpWidth!=0){\n                cvs.clearRect(x-xpWidth*2,y-xpWidth*2,xpWidth*4,xpWidth*4);\n            }else{\n                cvs.lineTo(x,y);\n                cvs.lineWidth=lineWidth*2;\n                cvs.lineCap='round';\n                cvs.lineJoin=\"round\";\n                cvs.strokeStyle=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n                cvs.stroke();\n            }\n        }\n        function stcolor(e){\n            e.preventDefault();\n        }\n        function chcolor(e){\n            e.preventDefault();\n            if(e.targetTouches[0].clientX&lt;window.innerWidth*0.8){\n                this.children[colorclicked].children[1].style.left=e.targetTouches[0].clientX+\"px\";\n                colorshow[colorclicked-1]=parseInt(e.targetTouches[0].clientX/(window.innerWidth*0.8)*255)\n            }\n            showcol.style.backgroundColor=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n        }\n        function colormove(e){\n            e.preventDefault();\n            if(this.id==\"redmove\"){\n                colorclicked=1;\n            }else if(this.id==\"greenmove\"){\n                colorclicked=2;\n            }else{\n                colorclicked=3;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>运行的话，服务器端</p>\n<pre>php drawguess.php</pre>\n<p>客户端，swoole的http服务器的话这里不做叙述，可使用python2.x作为http服务器</p>\n<pre>python -m SimpleHTTPServer 80</pre>\n<p>或者python3.x</p>\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">server</span> <span class=\"mi\">80</span></pre>\n<p>特别说明，这里还会有个bug，回答问题时有正确答案判断为错误，感觉是编码问题，然后这个服务器端运行的时候也是如果有输出中文的话也会输出乱码。有看到改php.ini什么为utf-8，好像也没效果。</p>\n<p>另一个若是开发阶段，经常改服务器端，但每次去找pid并kill比较麻烦，因此可以写个shell命令来自动做一步。</p>\n<pre>#!/bin/sh\nkill `lsof -t -i:此处写server的端口`\nsleep 2\nphp 此处写绝对路径/drawguess.php\nsleep 1\nnetstat -ntlp</pre>\n<p>swoole值得探究的可能还很多，然而确实踩坑。。。。</p>\n","excerpt":"<p>swoole也是一个php比较强大的扩展，可以实现高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket。这里实现一个WebSocket的server端的你画我猜。自我觉得还是踩坑之旅，生产环节用还是值得斟酌。","more":"</p>\n<p>安装环节这里不多叙述，linux上按<a href=\"https://wiki.swoole.com/wiki/page/6.html\">这里</a>的进行就可以，插一句修改php.ini那个只要加在第一行就行。</p>\n<p>然后touch一个php文件，这里命名为drawguess.php。具体内容解释在代码注释中。还有结尾彩蛋。</p>\n<pre>&lt;?php\n//创建全局变量表，这里用于存储用户id，1024为最大容量。\n$table = new swoole_table(1024);\n$table-&gt;column('fd', swoole_table::TYPE_INT);\n$table-&gt;create();\n//定义server\n$server = new swoole_websocket_server(\"0.0.0.0\", 9501);\n$server-&gt;table = $table;\n//这里定义答案\n$anstr=\"苹果,李子,梨子,榴莲,香蕉,橙子,番茄,柿子,葡萄,水蜜桃,核桃,哈密瓜,西瓜,菠萝,蓝莓,草莓,释迦,杨桃,椰子,板栗,樱桃,荔枝,龙眼,青梅,山楂,柠檬,金桔,芒果,坚果,胡桃,枇杷\";\n$ansarr=split(\",\", $anstr);\n$ran=rand(0,count($ansarr));\n$ans=$ansarr[$ran];\n//全局计数，不同进程之间共享\n$startGame=new swoole_atomic(0);\n$players=new swoole_atomic(999);\n$k=new swoole_atomic(0);\n//定义open事件，把用户id加入表中\n//push为推送数据到客户端,这里广播需要用foreach实现。\n$server-&gt;on('open', function($server, $req) {\n    global $ans,$players,$startGame;\n    $server-&gt;table-&gt;set($req-&gt;fd, array('fd' =&gt; $req-&gt;fd));\n    if(count($server-&gt;table)==1){\n        $data=json_encode(array(\"start\"=&gt;\"-2\",\"data\"));\n        $server-&gt;push($req-&gt;fd,$data);\n    }\n    if(count($server-&gt;table)==$players-&gt;get()){\n        if($startGame-&gt;get()==0){\n            $startGame-&gt;set(1);\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$req-&gt;fd){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }\n    }\n});\n//定义接受到数据触发事件。\n//这里主逻辑为接受getdata数据，解析，start为状态，\n/*\n-4---时间到0事件\n-3---第一个玩家选择人数\n-2---第一个玩家进入事件\n-1---玩家到齐，开始游戏事件\n0----touchstart事件\n1----touchmove事件\n2----设置线条宽度\n3----设置橡皮宽度\n4----清空事件\n5----设置颜色事件\n6----答案提交事件，判断成功与否\n*/\n$server-&gt;on('message', function($server, $frame) {\n    //$server-&gt;push($frame-&gt;fd, $frame-&gt;data);\n    global $ans,$ansarr,$players,$k;\n    $getdata=json_decode($frame-&gt;data);\n    if($getdata-&gt;start==-4){\n        $ran=rand(0,count($ansarr));\n        $ans=$ansarr[$ran];\n        $i=0;\n        foreach($server-&gt;table as $u) {\n            if($i&lt;$k-&gt;get()){\n                $i++;\n            }else{\n                $player=$u[\"fd\"];\n                $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                break;\n            }\n        }\n        foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n    }\n    if($getdata-&gt;start==-3){\n        $players-&gt;set(intval($getdata-&gt;players));\n    }else{\n        if($getdata-&gt;start==6){\n            echo $getdata-&gt;answer;\n        }\n        if($getdata-&gt;start==6 &amp;&amp; $getdata-&gt;answer==$ans){\n            foreach ($server-&gt;table as $u) {\n                $res=array(\"start\"=&gt;\"6\",\"win\"=&gt;$frame-&gt;fd);\n                $server-&gt;push($u['fd'], json_encode($res));//消息广播给所有客户端    \n            }  \n            $ran=rand(0,count($ansarr));\n            $ans=$ansarr[$ran];\n            $i=0;\n            foreach($server-&gt;table as $u) {\n                if($i&lt;$k-&gt;get()){\n                    $i++;\n                }else{\n                    $player=$u[\"fd\"];\n                    $k-&gt;set(($k-&gt;get()+1)%$players-&gt;get());\n                    break;\n                }\n            }\n            foreach ($server-&gt;table as $u) {\n                if($u['fd']==$player){\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"1\",\"ans\"=&gt;$ans));\n                    $server-&gt;push($u['fd'],$data);\n                }else{\n                    $data=json_encode(array(\"start\"=&gt;\"-1\",\"draw\"=&gt;\"0\"));\n                    $server-&gt;push($u['fd'],$data);\n                }\n            }\n        }else{\n            foreach ($server-&gt;table as $u) {\n                $server-&gt;push($u['fd'], $frame-&gt;data);//消息广播给所有客户端\n            }     \n        }\n    }\n});\n//定义关闭websocket事件\n$server-&gt;on('close', function($server, $fd) {\n    echo \"client-{$fd} is closed\\n\"; \n    global $startGame;\n    $server-&gt;table-&gt;del($fd);\n    if(count($server-&gt;table)==1){\n        $startGame-&gt;set(0);\n    }\n});\n//开启server\n$server-&gt;start();</pre>\n<p>再附上前端代码。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no,minimum-scale=1.0\" name=\"viewport\" &gt;\n    &lt;title&gt;draw and guess&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        html,body{\n            padding: 0px;\n            margin: 0px;\n            -webkit-tap-highlight-color:rgba(0,0,0,0);\n        }\n        canvas{\n            border: solid 1px black;\n        }\n        input{\n            border: none;\n            border-bottom: solid 1px black;\n            line-height: 20px;\n            font-size: 20px;\n            height: 25px;\n            outline:none;\n            border-radius: 0px;\n            width: 70%;\n        }\n        button{\n            height: 30px;\n            width: 20%;\n            background-color: rgba(255,255,255,0.5);\n            border: solid 1px black;\n            border-radius: 10px;\n            outline: none;\n        }\n        .sel li{\n            list-style: none;\n            display: inline-block;\n            width: 23%;\n        }\n        .color{\n            position: absolute;\n            width: 100%;\n            margin-top: -140px;\n        }\n        .red{\n            width: 100%;\n            position: relative;\n            top: 0px;\n        }\n        .green{\n            width: 100%;\n            position: relative;\n            top:30px;\n        }\n        .blue{\n            width: 100%;\n            position: relative;\n            top: 60px;\n        }\n        .ky{\n            width: 20px;\n            height: 20px;\n            border-radius: 20px;\n            background-color: black;\n            position: absolute;\n        }\n        .jd{\n            position: absolute;\n            margin-top: 4px;\n            border: solid 1px black;\n            width: 80%;\n            height: 10px;\n            border-radius: 10px;\n        }\n        .colorz{\n            position: absolute;\n            right: 10%;\n        }\n        .showcol{\n            width: 50px;\n            height: 20px;\n            margin: 5px;\n            border:solid 1px black;\n            background-color: #000;\n        }\n        .bs li{\n            list-style: none;\n            width: 50px;\n            height: 20px;\n        }\n        .bsdiv{\n            position: absolute;\n            margin-top: -140px;\n            margin-left: 25%;\n        }\n        .ans{\n            position: absolute;\n            top: 0px;\n            right: 5px;\n        }\n        .error{\n            position: absolute;\n            top: 0;\n            left: 5px;\n        }\n        .showinfo{\n            position: absolute;\n            top: 0px;\n            width: 100%;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"ans\" id=\"answer\"&gt;&lt;/div&gt;\n    &lt;div class=\"error\" id=\"error\"&gt;&lt;/div&gt;\n    &lt;div class=\"showinfo\" id=\"showinfo\"&gt;123&lt;/div&gt;\n    &lt;canvas id=\"can\" width=\"600\" height=\"600\"&gt;not support&lt;/canvas&gt;\n    &lt;div class=\"color\" id=\"col\" style=\"display:none;\"&gt;\n        &lt;div class=\"showcol\" id=\"showcolor\"&gt;&lt;/div&gt;\n        &lt;div class=\"red\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"redmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;r&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"green\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"greenmove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;g&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=\"blue\"&gt;\n            &lt;div class=\"jd\"&gt;&lt;/div&gt;\n            &lt;div class=\"ky\" id=\"bluemove\"&gt;&lt;/div&gt;\n            &lt;div class=\"colorz\"&gt;b&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"sel\"&gt;\n        &lt;ul&gt;\n            &lt;li id=\"colorblock\"&gt;颜色&lt;/li&gt;\n            &lt;li id=\"bsblock\" style=\"margin-left:-10px;\"&gt;\n                &lt;select name=\"\" id=\"selbs\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;画笔&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li style=\"margin-right:10px;\"&gt;\n                &lt;select name=\"\" id=\"xpsel\"&gt;\n                    &lt;option value=\"\" disabled selected=\"selected\"&gt;橡皮&lt;/option&gt;\n                    &lt;option value=\"0\"&gt;取消&lt;/option&gt;\n                    &lt;option value=\"1\"&gt;1&lt;/option&gt;\n                    &lt;option value=\"2\"&gt;2&lt;/option&gt;\n                    &lt;option value=\"3\"&gt;3&lt;/option&gt;\n                    &lt;option value=\"4\"&gt;4&lt;/option&gt;\n                    &lt;option value=\"5\"&gt;5&lt;/option&gt;\n                    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n                    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n                    &lt;option value=\"8\"&gt;8&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/li&gt;\n            &lt;li id=\"clear\"&gt;清空&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;input type=\"text\" id=\"ans\"&gt;\n    &lt;button class=\"btn\" id=\"sub\"&gt;提交&lt;/button&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        showinfo(\"您已进入游戏，请等待\");\n        var wsServer = 'ws://123.206.217.190:9501';\n        var ws = new WebSocket(wsServer);\n        var can=document.getElementById(\"can\");\n        var color=document.getElementById(\"col\");\n        var rm=document.getElementById(\"redmove\");\n        var gm=document.getElementById(\"greenmove\");\n        var bm=document.getElementById(\"bluemove\");\n        var showcol=document.getElementById(\"showcolor\");\n        var bsdiv=document.getElementById(\"bsdiv\");\n        var sub=document.getElementById(\"sub\");\n        var colorclicked=0;\n        var colorshow=[0,0,0];\n        var lineWidth=1;\n        var xpWidth=0;\n        var myturn=0;\n        var players=0;\n        var deadtime=60;\n        var timejishu;\n\n        var cvs=can.getContext(\"2d\");\n        var whmin = window.innerWidth&gt;window.innerHeight?window.innerHeight:window.innerWidth;\n        var w=can.width=whmin-2;\n        var h=can.height=whmin-2;\n\n        color.addEventListener('touchstart',stcolor,{passive:false});\n        color.addEventListener('touchmove',chcolor,{passtive:false});\n        rm.addEventListener('touchstart',colormove,{passive:false});\n        gm.addEventListener('touchstart',colormove,{passive:false});\n        bm.addEventListener('touchstart',colormove,{passive:false});\n\n        ws.onopen=function(e){\n            can.addEventListener('touchstart',sendstart,{passive:false});\n            can.addEventListener('touchmove',sendmove,{passive:false});\n            function sendstart(e){\n                e.preventDefault();\n                let data={\"start\":\"0\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n            function sendmove(e){\n                e.preventDefault();\n                let data={\"start\":\"1\",\"coor\":[e.touches[0].clientX,e.touches[0].clientY]};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n            }\n        }\n\n        ws.onmessage=function(e){\n            var con=JSON.parse(e.data);\n            switch(con.start){\n                case \"-2\":\n                    console.log(con)\n                    players=prompt(\"请选择玩家人数\");\n                    let data={\"start\":\"-3\",\"players\":players};\n                    ws.send(JSON.stringify(data));\n                    break\n                case \"-1\":\n                    if(con.draw==\"1\"){\n                        console.log(timejishu)\n                        showinfo(\"该你画咯\");\n                        document.getElementById(\"answer\").innerHTML=con.ans;\n                        timejishu=setInterval(function(){\n                            deadtime--;\n                            if(deadtime&lt;55){\n                                document.getElementById(\"showinfo\").innerHTML=deadtime;\n                            }\n                            if(deadtime==0){\n                                let data={\"start\":\"-4\"};\n                                ws.send(JSON.stringify(data));\n                                deadtime=60;\n                                clearInterval(timejishu);\n                            }\n                        },1000);\n                        myturn=1;\n                    }else{\n                        showinfo(\"游戏开始\");\n                        document.getElementById(\"answer\").innerHTML=\"\";\n                        if(timejishu!=undefined){\n                            clearInterval(timejishu);\n                        }\n                        myturn=0;\n                    }\n                    break\n                case \"0\":\n                    tstart(con.coor[0],con.coor[1]);\n                    break\n                case \"1\":\n                    move(con.coor[0],con.coor[1]);\n                    break\n                case \"2\":\n                    lineWidth=con.lineWidth;\n                    break;\n                case \"3\":\n                    xpWidth=con.xpWidth;\n                    break;\n                case \"4\":\n                    cvs.clearRect(0,0,w,h); \n                    break;\n                case \"5\":\n                    colorshow=con.color;\n                    break;\n                case \"6\":\n                    if(con.win!=undefined){\n                        alert(con.win+\" win!\");\n                        deadtime=60;\n                    }else{\n                        document.getElementById(\"error\").innerHTML=\"error:\\n\"+con.answer;\n                    }\n            }\n        }\n        \n        document.getElementById(\"colorblock\").onclick=function(){\n            if(color.style.display==\"none\"){\n                color.style.display=\"block\";\n                this.innerHTML=\"确认\";\n            }else{\n                color.style.display=\"none\";\n                let data={\"start\":\"5\",\"color\":colorshow};\n                if(myturn==1){\n                    ws.send(JSON.stringify(data));\n                }\n                this.innerHTML=\"颜色\";\n            }\n        }\n        document.getElementById(\"selbs\").onchange=function(){\n            let data={\"start\":\"2\",\"lineWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"xpsel\").onchange=function(){\n            let data={\"start\":\"3\",\"xpWidth\":this.value};\n            if(myturn==1){\n                ws.send(JSON.stringify(data));\n            }\n        }\n        document.getElementById(\"clear\").onclick=function(){\n            if(myturn==1){\n                ws.send(JSON.stringify({\"start\":\"4\"}));  \n            }\n        }\n        sub.onclick=function(){\n            var ans=document.getElementById(\"ans\").value;\n            let data={\"start\":\"6\",\"answer\":ans};\n            ws.send(JSON.stringify(data));\n        }\n\n        function showinfo(info){\n            document.getElementById(\"showinfo\").innerHTML=info;\n        }\n\n        function tstart(x,y){\n            //e.preventDefault();\n            cvs.beginPath();\n            cvs.moveTo(x,y);\n        }\n        function move(x,y){\n            //e.preventDefault();\n            if(xpWidth!=0){\n                cvs.clearRect(x-xpWidth*2,y-xpWidth*2,xpWidth*4,xpWidth*4);\n            }else{\n                cvs.lineTo(x,y);\n                cvs.lineWidth=lineWidth*2;\n                cvs.lineCap='round';\n                cvs.lineJoin=\"round\";\n                cvs.strokeStyle=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n                cvs.stroke();\n            }\n        }\n        function stcolor(e){\n            e.preventDefault();\n        }\n        function chcolor(e){\n            e.preventDefault();\n            if(e.targetTouches[0].clientX&lt;window.innerWidth*0.8){\n                this.children[colorclicked].children[1].style.left=e.targetTouches[0].clientX+\"px\";\n                colorshow[colorclicked-1]=parseInt(e.targetTouches[0].clientX/(window.innerWidth*0.8)*255)\n            }\n            showcol.style.backgroundColor=\"rgb(\"+colorshow[0]+\",\"+colorshow[1]+\",\"+colorshow[2]+\")\";\n        }\n        function colormove(e){\n            e.preventDefault();\n            if(this.id==\"redmove\"){\n                colorclicked=1;\n            }else if(this.id==\"greenmove\"){\n                colorclicked=2;\n            }else{\n                colorclicked=3;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>运行的话，服务器端</p>\n<pre>php drawguess.php</pre>\n<p>客户端，swoole的http服务器的话这里不做叙述，可使用python2.x作为http服务器</p>\n<pre>python -m SimpleHTTPServer 80</pre>\n<p>或者python3.x</p>\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">server</span> <span class=\"mi\">80</span></pre>\n<p>特别说明，这里还会有个bug，回答问题时有正确答案判断为错误，感觉是编码问题，然后这个服务器端运行的时候也是如果有输出中文的话也会输出乱码。有看到改php.ini什么为utf-8，好像也没效果。</p>\n<p>另一个若是开发阶段，经常改服务器端，但每次去找pid并kill比较麻烦，因此可以写个shell命令来自动做一步。</p>\n<pre>#!/bin/sh\nkill `lsof -t -i:此处写server的端口`\nsleep 2\nphp 此处写绝对路径/drawguess.php\nsleep 1\nnetstat -ntlp</pre>\n<p>swoole值得探究的可能还很多，然而确实踩坑。。。。</p>"},{"title":"前端回忆录---上篇","catalog":true,"date":"2017-03-11T10:21:15.000Z","_content":"\n前端起家，而最终还是没留在这块‘宝地’，虽然火，但也不和大波人抢饭吃啦！！\n\n记载回忆篇教程---'老年人'的理解（这里不讲教程，而是整个的学习过程）<!--more-->\n\n一款好的文本编辑器是必须先入手的，sublime是我一直在用且功能强大的文本编辑器，软件自寻，装好之后装一些插件,在工具栏Preference-&gt;Browse Packdges先安装包，之后Preference-&gt;Packdge Control-&gt;Install Packdges，搜Emmet，先下这个吧，其他看需求。（之下还有讲sublime的）\n\n然后开始前端的部分啦！！（不理解的名词自行谷歌哦）先纠正一下外来人对于做网页的理解，可能认为网页只是图片和文字的拼接，这种理解很片面。那你的登陆信息呢？那在网页某宝怎么实现支付呢？用户在访问互联网的时候，很多是通过浏览器，而最开始的前端就是写网页用户直接看到的用到的部分。然后你得收集数据，和后端交互数据，把数据可视化，数据安全等等。甚至前端写的不好，黑客可以通过入侵网页和服务器然后用户访问了网址之后就入侵了他的电脑。当然正常也没这么吓人，但也要防患于未然。\n\n前端最初始的部分便是html，css，js。什么其他库啊，框架啊，预处理器啊都最终会回到这三个。因为浏览器就认识这三个咯！！关于前端的亲戚------浏览器还有一些有趣的历史故事，大家可以自行发掘。\n\nhtml是使用标签来组成网页内能看到的内容。有html，head，body，div，p，h1，a，img，span，input，button，form等等标签，常用的就没几个，知道每个标签的代表的意思就行。这里算是刚刚开始，所以推荐的教程是w3school。\n\ncss是网页中的用来定位，美化的html内容的。这部分和审美设计就相关啦，不过前端基础的一些也得会写。包括布局，居中，字体，盒子模型等等。一般写在head里的style标签内，用选择器来选择html元素，其内写css代码改进网页。很多情况我们会引入外部css文件，写在head的link标签里。\n\n之后可以写一个简单页面咯，sublime里新建文件保存为xxx.html。输入html:5+tab就会生成一个html的一般模板。在其内继续补充内容。这部分需要大量的练习来熟悉和巩固使用html和css。然后，直到展示类页面基本成型。这里补充写的时候很重要的一点就是理解html块级元素和行内元素，css的定位方法。然后在写的时候进行合理的布局，而不是所有不按自己想法占位的元素，都进行浮动和绝对定位。这对于网页在其他不同大小的屏上效果展示很重要。\n\n这里先不介绍js，先来尝试一下bootstrap这个奇妙的框架。前面写网页的经历应该会让你发现直接写一个看得过去的页面是一件略复杂的事情，然后前人为了造福后人就帮你把很多展示层面的css和js写好了，你直接引用就行。先找到bootstrap3中文官网的起步部分，在页面头部引入bootstrap的那几个文件。之后按照后面的全局css样式和组件来尝试写页面的每一部分，写起来便轻松愉快啦！！bootstrap更强的是他是移动设备优先，这个之后在述。\n\n前面部分貌似都感觉不到自己在编程，更像是美工，然后js就来啦，js在网页里充当给网页增加动态的角色。他可以改变html和css的内容，做各种特效，处理提交的数据等等。写js就完完全全有写编程语言的感觉啦，当然这也注定了它将会是前端最难的一部分。\n\n写js先从基本语法开始，如果接触过c一类的语言，应该很快上手，没接触过也不要紧，基础的语法并不难，很快就能搞定。js可以写在head里也可以在body最下方，大部分情况建议写在body最下方，因为同步的代码从上往下执行，这样就可以先展示html，也就是页面反应变快一些。这部分虽然简单，但在写复杂网页程序的时候往往错误就出在不经意的语法错误。细节决定成败，简单也要严谨。\n\n上面是js作为一门语言的语法，然后作为网页里的一部分，它还能操作dom，也就是改变html和css。先通过选择器获取dom节点，之后进行操作。当然也可以直接创建dom，网页里的它可以说无所不能。react框架就是用编译成js的jsx包揽了全部页面。\n\n这里插入一个前端开发者必备功能，这里以chrome为例，那就是会用chrome的开发者工具。我们通过打开浏览器然后按f12或者右键审查元素打开，我习惯会把网页在左边，开发者工具在右边，可以按开发者工具右上角切换。前面js的基本语法里有个console.log便是在开发者工具里的console选项里输出内容，这里可以输出一些数组，对象等等alert不能输出的内容，当然也可以在这里直接像命令行一样输入js进行调试。在elements选项里是所有html内容，network里是所有加载的资源以及获取方式，加载时间等等有用信息，这里还能看到网页header，cookie等的信息，分析别人网页的时候很有用哦。中间那一块是css部分，可以直接在这里写css，然后就能看到效果啦，这里比较强大的两个一个是写一个color:#000;点击彩色小方块，然后会有出现一个颜色板和拾色器。另一个是在写css3动画的时候，写一个速度曲线，点击小方块，会出现一个可调整二次贝塞尔曲线的速度曲线改变面板。css右边还有一个盒子模型，必要时还是挺有用的。\n\n至此你应该已经得会写轮播图，瀑布流，分页等等网页特效，甚至于写个简单的贪吃蛇，扫雷游戏。当然这里的逻辑还是需要挺多的，想想挺简单，用原生js写起来自然会感觉到吃力。除非之前进行过编程或者算法训练，不然很容易绕在里面，感觉不上不下。之前我自己的感受就是无数自己想想的小demo死在了我代码写到一半的时候。然后会感觉很吃力，如瓶颈一般。现在想想，与其纠结于此，不如去追求更广的天空。\n\n所以继续来学习jquery，虽然都说用这个的都是老年人，但这些话都是已经把这个库用烂了的人说的。对于一个新手，学jquery也是很重要的一环，这个部分，你会体验到快速开发的乐趣。jquery相当于帮你封装了很多又难理解又难写的原生js，然后你可以直接调用它设定的更简便的形式来写js。在html文件里引入jquery文件，一般推荐min的那个，就可以直接按jquery的语法写啦。开始的话jquery写起来速度可以达到js的好几倍，立刻爱上jquery!!如果用jquery来重写上面那些网页特效，可能会轻松很多。当然网上jquery插件和特效也数不胜数，随便上某度搜就行。前期还是建议自己先造造轮子。\n\n这里插一个提醒，之后讲的很多东西要在服务器运行，ajax也是。所以先配置一下服务器的环境。windows下建议wamp，linux下建议<a href=\"https://lnmp.org/\">lnmp</a>。都是集成安装环境，安装完就可以直接用。然后windows用浏览器访问localhost打开www文件目录，Linux用浏览器访问公网ip会打开wwwroot文件下default文件下index.html文件。这样就可以继续进行下去啦，之后尽量把文件放服务器。如果想要了解服务器知识的话就走向了后端了哦，但前端也可以稍微了解。\n\n然后讲一个js里神奇的东西，为什么放在jquery下面呢，因为从jquery的语法来理解他会变得简单易行，他就是ajax。它是一种对js来说跨时代的技术。如果直接用原生来实现当然也可以，但对于菜鸟时候的我晦涩难懂。所以当我看到jquery实现的ajax，jquery好感++；ajax相当于可以在页面不跳转的情况下直接与后台进行交流。看似简单，但却实用，几乎每个页面都或多或少有ajax的身影，特别是对于前后端数据交流频繁的页面。\n\n通过ajax，再来理解这里面的要用到的其他几个东西。一个是json，它是一种数据格式，常常用于前后端数据交流。因为这种数据很轻便，前后端解析json也很简单。出现json之前很多用的是xml，相比于json，xml解析起来很复杂，现在也少用，但也可以了解。另一个是异步和回调。自行搜异步和同步区别哦，ajax默认是异步的，也就是执行ajax时不会停在这里等数据回来，而是发出了一个ajax执行的指令，然后浏览器就继续扫描执行下面的代码啦，至于ajax，浏览器不去管他什么时候执行完，因为他执行完可以调用一个函数来告诉浏览器执行完了，那个函数就是回调函数。这个弄明白对于以后写node.js很重要。\n\n最近h5这个名词总是很火，那现在就来讲讲html5和css3，html5和css3都是在原来的基础上增加了许多内容。目前主流的浏览器基本也都支持了大部分特性，所以可以放心大胆的写，不放心就看看手册，到这里你应该是查手册和看文档的时候，而不是又看之前看过的教程，那太慢啦。h5新增了很多带语义的标签，js里也开放了很多接口。可以试试，有个大致的了解。css3也一样，增加的一些css属性，有些还非常强大，比如做个3d什么的，也可以实现。这个名词虽然被炒的很高大上的样子，但其实质还是搭在原来的基础知识之上。在基础很牢固之后再去看这些就感到得心应手咯!\n\n看到这的你已经大致走完了入门之路，接下来的进阶才是真正考验人的时候。都说前端入门很容易，确实，自从有了jquery，js的dom操作变得容易，而jquery可能只要半天时间就能学会。而jquery现在的弊端也很明显就是dom操作太多了，导致网页反应慢。大部分的页面用前面的知识都可以做出成果，但要效果最好肯定远不止这些。接下来，就将进入进阶的时候！！！\n","source":"_posts/2017/article_7_前端回忆录---上篇.md","raw":"\n---\ntitle: 前端回忆录---上篇\ncatalog: true\ndate: 2017-3-11 18:21:15\n---\n\n前端起家，而最终还是没留在这块‘宝地’，虽然火，但也不和大波人抢饭吃啦！！\n\n记载回忆篇教程---'老年人'的理解（这里不讲教程，而是整个的学习过程）<!--more-->\n\n一款好的文本编辑器是必须先入手的，sublime是我一直在用且功能强大的文本编辑器，软件自寻，装好之后装一些插件,在工具栏Preference-&gt;Browse Packdges先安装包，之后Preference-&gt;Packdge Control-&gt;Install Packdges，搜Emmet，先下这个吧，其他看需求。（之下还有讲sublime的）\n\n然后开始前端的部分啦！！（不理解的名词自行谷歌哦）先纠正一下外来人对于做网页的理解，可能认为网页只是图片和文字的拼接，这种理解很片面。那你的登陆信息呢？那在网页某宝怎么实现支付呢？用户在访问互联网的时候，很多是通过浏览器，而最开始的前端就是写网页用户直接看到的用到的部分。然后你得收集数据，和后端交互数据，把数据可视化，数据安全等等。甚至前端写的不好，黑客可以通过入侵网页和服务器然后用户访问了网址之后就入侵了他的电脑。当然正常也没这么吓人，但也要防患于未然。\n\n前端最初始的部分便是html，css，js。什么其他库啊，框架啊，预处理器啊都最终会回到这三个。因为浏览器就认识这三个咯！！关于前端的亲戚------浏览器还有一些有趣的历史故事，大家可以自行发掘。\n\nhtml是使用标签来组成网页内能看到的内容。有html，head，body，div，p，h1，a，img，span，input，button，form等等标签，常用的就没几个，知道每个标签的代表的意思就行。这里算是刚刚开始，所以推荐的教程是w3school。\n\ncss是网页中的用来定位，美化的html内容的。这部分和审美设计就相关啦，不过前端基础的一些也得会写。包括布局，居中，字体，盒子模型等等。一般写在head里的style标签内，用选择器来选择html元素，其内写css代码改进网页。很多情况我们会引入外部css文件，写在head的link标签里。\n\n之后可以写一个简单页面咯，sublime里新建文件保存为xxx.html。输入html:5+tab就会生成一个html的一般模板。在其内继续补充内容。这部分需要大量的练习来熟悉和巩固使用html和css。然后，直到展示类页面基本成型。这里补充写的时候很重要的一点就是理解html块级元素和行内元素，css的定位方法。然后在写的时候进行合理的布局，而不是所有不按自己想法占位的元素，都进行浮动和绝对定位。这对于网页在其他不同大小的屏上效果展示很重要。\n\n这里先不介绍js，先来尝试一下bootstrap这个奇妙的框架。前面写网页的经历应该会让你发现直接写一个看得过去的页面是一件略复杂的事情，然后前人为了造福后人就帮你把很多展示层面的css和js写好了，你直接引用就行。先找到bootstrap3中文官网的起步部分，在页面头部引入bootstrap的那几个文件。之后按照后面的全局css样式和组件来尝试写页面的每一部分，写起来便轻松愉快啦！！bootstrap更强的是他是移动设备优先，这个之后在述。\n\n前面部分貌似都感觉不到自己在编程，更像是美工，然后js就来啦，js在网页里充当给网页增加动态的角色。他可以改变html和css的内容，做各种特效，处理提交的数据等等。写js就完完全全有写编程语言的感觉啦，当然这也注定了它将会是前端最难的一部分。\n\n写js先从基本语法开始，如果接触过c一类的语言，应该很快上手，没接触过也不要紧，基础的语法并不难，很快就能搞定。js可以写在head里也可以在body最下方，大部分情况建议写在body最下方，因为同步的代码从上往下执行，这样就可以先展示html，也就是页面反应变快一些。这部分虽然简单，但在写复杂网页程序的时候往往错误就出在不经意的语法错误。细节决定成败，简单也要严谨。\n\n上面是js作为一门语言的语法，然后作为网页里的一部分，它还能操作dom，也就是改变html和css。先通过选择器获取dom节点，之后进行操作。当然也可以直接创建dom，网页里的它可以说无所不能。react框架就是用编译成js的jsx包揽了全部页面。\n\n这里插入一个前端开发者必备功能，这里以chrome为例，那就是会用chrome的开发者工具。我们通过打开浏览器然后按f12或者右键审查元素打开，我习惯会把网页在左边，开发者工具在右边，可以按开发者工具右上角切换。前面js的基本语法里有个console.log便是在开发者工具里的console选项里输出内容，这里可以输出一些数组，对象等等alert不能输出的内容，当然也可以在这里直接像命令行一样输入js进行调试。在elements选项里是所有html内容，network里是所有加载的资源以及获取方式，加载时间等等有用信息，这里还能看到网页header，cookie等的信息，分析别人网页的时候很有用哦。中间那一块是css部分，可以直接在这里写css，然后就能看到效果啦，这里比较强大的两个一个是写一个color:#000;点击彩色小方块，然后会有出现一个颜色板和拾色器。另一个是在写css3动画的时候，写一个速度曲线，点击小方块，会出现一个可调整二次贝塞尔曲线的速度曲线改变面板。css右边还有一个盒子模型，必要时还是挺有用的。\n\n至此你应该已经得会写轮播图，瀑布流，分页等等网页特效，甚至于写个简单的贪吃蛇，扫雷游戏。当然这里的逻辑还是需要挺多的，想想挺简单，用原生js写起来自然会感觉到吃力。除非之前进行过编程或者算法训练，不然很容易绕在里面，感觉不上不下。之前我自己的感受就是无数自己想想的小demo死在了我代码写到一半的时候。然后会感觉很吃力，如瓶颈一般。现在想想，与其纠结于此，不如去追求更广的天空。\n\n所以继续来学习jquery，虽然都说用这个的都是老年人，但这些话都是已经把这个库用烂了的人说的。对于一个新手，学jquery也是很重要的一环，这个部分，你会体验到快速开发的乐趣。jquery相当于帮你封装了很多又难理解又难写的原生js，然后你可以直接调用它设定的更简便的形式来写js。在html文件里引入jquery文件，一般推荐min的那个，就可以直接按jquery的语法写啦。开始的话jquery写起来速度可以达到js的好几倍，立刻爱上jquery!!如果用jquery来重写上面那些网页特效，可能会轻松很多。当然网上jquery插件和特效也数不胜数，随便上某度搜就行。前期还是建议自己先造造轮子。\n\n这里插一个提醒，之后讲的很多东西要在服务器运行，ajax也是。所以先配置一下服务器的环境。windows下建议wamp，linux下建议<a href=\"https://lnmp.org/\">lnmp</a>。都是集成安装环境，安装完就可以直接用。然后windows用浏览器访问localhost打开www文件目录，Linux用浏览器访问公网ip会打开wwwroot文件下default文件下index.html文件。这样就可以继续进行下去啦，之后尽量把文件放服务器。如果想要了解服务器知识的话就走向了后端了哦，但前端也可以稍微了解。\n\n然后讲一个js里神奇的东西，为什么放在jquery下面呢，因为从jquery的语法来理解他会变得简单易行，他就是ajax。它是一种对js来说跨时代的技术。如果直接用原生来实现当然也可以，但对于菜鸟时候的我晦涩难懂。所以当我看到jquery实现的ajax，jquery好感++；ajax相当于可以在页面不跳转的情况下直接与后台进行交流。看似简单，但却实用，几乎每个页面都或多或少有ajax的身影，特别是对于前后端数据交流频繁的页面。\n\n通过ajax，再来理解这里面的要用到的其他几个东西。一个是json，它是一种数据格式，常常用于前后端数据交流。因为这种数据很轻便，前后端解析json也很简单。出现json之前很多用的是xml，相比于json，xml解析起来很复杂，现在也少用，但也可以了解。另一个是异步和回调。自行搜异步和同步区别哦，ajax默认是异步的，也就是执行ajax时不会停在这里等数据回来，而是发出了一个ajax执行的指令，然后浏览器就继续扫描执行下面的代码啦，至于ajax，浏览器不去管他什么时候执行完，因为他执行完可以调用一个函数来告诉浏览器执行完了，那个函数就是回调函数。这个弄明白对于以后写node.js很重要。\n\n最近h5这个名词总是很火，那现在就来讲讲html5和css3，html5和css3都是在原来的基础上增加了许多内容。目前主流的浏览器基本也都支持了大部分特性，所以可以放心大胆的写，不放心就看看手册，到这里你应该是查手册和看文档的时候，而不是又看之前看过的教程，那太慢啦。h5新增了很多带语义的标签，js里也开放了很多接口。可以试试，有个大致的了解。css3也一样，增加的一些css属性，有些还非常强大，比如做个3d什么的，也可以实现。这个名词虽然被炒的很高大上的样子，但其实质还是搭在原来的基础知识之上。在基础很牢固之后再去看这些就感到得心应手咯!\n\n看到这的你已经大致走完了入门之路，接下来的进阶才是真正考验人的时候。都说前端入门很容易，确实，自从有了jquery，js的dom操作变得容易，而jquery可能只要半天时间就能学会。而jquery现在的弊端也很明显就是dom操作太多了，导致网页反应慢。大部分的页面用前面的知识都可以做出成果，但要效果最好肯定远不止这些。接下来，就将进入进阶的时候！！！\n","slug":"2017/article_7_前端回忆录---上篇","published":1,"updated":"2021-01-27T04:46:28.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72y001j07709efpxqr3","content":"<p>前端起家，而最终还是没留在这块‘宝地’，虽然火，但也不和大波人抢饭吃啦！！</p>\n<p>记载回忆篇教程—'老年人’的理解（这里不讲教程，而是整个的学习过程）<a id=\"more\"></a></p>\n<p>一款好的文本编辑器是必须先入手的，sublime是我一直在用且功能强大的文本编辑器，软件自寻，装好之后装一些插件,在工具栏Preference-&gt;Browse Packdges先安装包，之后Preference-&gt;Packdge Control-&gt;Install Packdges，搜Emmet，先下这个吧，其他看需求。（之下还有讲sublime的）</p>\n<p>然后开始前端的部分啦！！（不理解的名词自行谷歌哦）先纠正一下外来人对于做网页的理解，可能认为网页只是图片和文字的拼接，这种理解很片面。那你的登陆信息呢？那在网页某宝怎么实现支付呢？用户在访问互联网的时候，很多是通过浏览器，而最开始的前端就是写网页用户直接看到的用到的部分。然后你得收集数据，和后端交互数据，把数据可视化，数据安全等等。甚至前端写的不好，黑客可以通过入侵网页和服务器然后用户访问了网址之后就入侵了他的电脑。当然正常也没这么吓人，但也要防患于未然。</p>\n<p>前端最初始的部分便是html，css，js。什么其他库啊，框架啊，预处理器啊都最终会回到这三个。因为浏览器就认识这三个咯！！关于前端的亲戚------浏览器还有一些有趣的历史故事，大家可以自行发掘。</p>\n<p>html是使用标签来组成网页内能看到的内容。有html，head，body，div，p，h1，a，img，span，input，button，form等等标签，常用的就没几个，知道每个标签的代表的意思就行。这里算是刚刚开始，所以推荐的教程是w3school。</p>\n<p>css是网页中的用来定位，美化的html内容的。这部分和审美设计就相关啦，不过前端基础的一些也得会写。包括布局，居中，字体，盒子模型等等。一般写在head里的style标签内，用选择器来选择html元素，其内写css代码改进网页。很多情况我们会引入外部css文件，写在head的link标签里。</p>\n<p>之后可以写一个简单页面咯，sublime里新建文件保存为xxx.html。输入html:5+tab就会生成一个html的一般模板。在其内继续补充内容。这部分需要大量的练习来熟悉和巩固使用html和css。然后，直到展示类页面基本成型。这里补充写的时候很重要的一点就是理解html块级元素和行内元素，css的定位方法。然后在写的时候进行合理的布局，而不是所有不按自己想法占位的元素，都进行浮动和绝对定位。这对于网页在其他不同大小的屏上效果展示很重要。</p>\n<p>这里先不介绍js，先来尝试一下bootstrap这个奇妙的框架。前面写网页的经历应该会让你发现直接写一个看得过去的页面是一件略复杂的事情，然后前人为了造福后人就帮你把很多展示层面的css和js写好了，你直接引用就行。先找到bootstrap3中文官网的起步部分，在页面头部引入bootstrap的那几个文件。之后按照后面的全局css样式和组件来尝试写页面的每一部分，写起来便轻松愉快啦！！bootstrap更强的是他是移动设备优先，这个之后在述。</p>\n<p>前面部分貌似都感觉不到自己在编程，更像是美工，然后js就来啦，js在网页里充当给网页增加动态的角色。他可以改变html和css的内容，做各种特效，处理提交的数据等等。写js就完完全全有写编程语言的感觉啦，当然这也注定了它将会是前端最难的一部分。</p>\n<p>写js先从基本语法开始，如果接触过c一类的语言，应该很快上手，没接触过也不要紧，基础的语法并不难，很快就能搞定。js可以写在head里也可以在body最下方，大部分情况建议写在body最下方，因为同步的代码从上往下执行，这样就可以先展示html，也就是页面反应变快一些。这部分虽然简单，但在写复杂网页程序的时候往往错误就出在不经意的语法错误。细节决定成败，简单也要严谨。</p>\n<p>上面是js作为一门语言的语法，然后作为网页里的一部分，它还能操作dom，也就是改变html和css。先通过选择器获取dom节点，之后进行操作。当然也可以直接创建dom，网页里的它可以说无所不能。react框架就是用编译成js的jsx包揽了全部页面。</p>\n<p>这里插入一个前端开发者必备功能，这里以chrome为例，那就是会用chrome的开发者工具。我们通过打开浏览器然后按f12或者右键审查元素打开，我习惯会把网页在左边，开发者工具在右边，可以按开发者工具右上角切换。前面js的基本语法里有个console.log便是在开发者工具里的console选项里输出内容，这里可以输出一些数组，对象等等alert不能输出的内容，当然也可以在这里直接像命令行一样输入js进行调试。在elements选项里是所有html内容，network里是所有加载的资源以及获取方式，加载时间等等有用信息，这里还能看到网页header，cookie等的信息，分析别人网页的时候很有用哦。中间那一块是css部分，可以直接在这里写css，然后就能看到效果啦，这里比较强大的两个一个是写一个color:#000;点击彩色小方块，然后会有出现一个颜色板和拾色器。另一个是在写css3动画的时候，写一个速度曲线，点击小方块，会出现一个可调整二次贝塞尔曲线的速度曲线改变面板。css右边还有一个盒子模型，必要时还是挺有用的。</p>\n<p>至此你应该已经得会写轮播图，瀑布流，分页等等网页特效，甚至于写个简单的贪吃蛇，扫雷游戏。当然这里的逻辑还是需要挺多的，想想挺简单，用原生js写起来自然会感觉到吃力。除非之前进行过编程或者算法训练，不然很容易绕在里面，感觉不上不下。之前我自己的感受就是无数自己想想的小demo死在了我代码写到一半的时候。然后会感觉很吃力，如瓶颈一般。现在想想，与其纠结于此，不如去追求更广的天空。</p>\n<p>所以继续来学习jquery，虽然都说用这个的都是老年人，但这些话都是已经把这个库用烂了的人说的。对于一个新手，学jquery也是很重要的一环，这个部分，你会体验到快速开发的乐趣。jquery相当于帮你封装了很多又难理解又难写的原生js，然后你可以直接调用它设定的更简便的形式来写js。在html文件里引入jquery文件，一般推荐min的那个，就可以直接按jquery的语法写啦。开始的话jquery写起来速度可以达到js的好几倍，立刻爱上jquery!!如果用jquery来重写上面那些网页特效，可能会轻松很多。当然网上jquery插件和特效也数不胜数，随便上某度搜就行。前期还是建议自己先造造轮子。</p>\n<p>这里插一个提醒，之后讲的很多东西要在服务器运行，ajax也是。所以先配置一下服务器的环境。windows下建议wamp，linux下建议<a href=\"https://lnmp.org/\" target=\"_blank\" rel=\"external\">lnmp</a>。都是集成安装环境，安装完就可以直接用。然后windows用浏览器访问localhost打开www文件目录，Linux用浏览器访问公网ip会打开wwwroot文件下default文件下index.html文件。这样就可以继续进行下去啦，之后尽量把文件放服务器。如果想要了解服务器知识的话就走向了后端了哦，但前端也可以稍微了解。</p>\n<p>然后讲一个js里神奇的东西，为什么放在jquery下面呢，因为从jquery的语法来理解他会变得简单易行，他就是ajax。它是一种对js来说跨时代的技术。如果直接用原生来实现当然也可以，但对于菜鸟时候的我晦涩难懂。所以当我看到jquery实现的ajax，jquery好感++；ajax相当于可以在页面不跳转的情况下直接与后台进行交流。看似简单，但却实用，几乎每个页面都或多或少有ajax的身影，特别是对于前后端数据交流频繁的页面。</p>\n<p>通过ajax，再来理解这里面的要用到的其他几个东西。一个是json，它是一种数据格式，常常用于前后端数据交流。因为这种数据很轻便，前后端解析json也很简单。出现json之前很多用的是xml，相比于json，xml解析起来很复杂，现在也少用，但也可以了解。另一个是异步和回调。自行搜异步和同步区别哦，ajax默认是异步的，也就是执行ajax时不会停在这里等数据回来，而是发出了一个ajax执行的指令，然后浏览器就继续扫描执行下面的代码啦，至于ajax，浏览器不去管他什么时候执行完，因为他执行完可以调用一个函数来告诉浏览器执行完了，那个函数就是回调函数。这个弄明白对于以后写node.js很重要。</p>\n<p>最近h5这个名词总是很火，那现在就来讲讲html5和css3，html5和css3都是在原来的基础上增加了许多内容。目前主流的浏览器基本也都支持了大部分特性，所以可以放心大胆的写，不放心就看看手册，到这里你应该是查手册和看文档的时候，而不是又看之前看过的教程，那太慢啦。h5新增了很多带语义的标签，js里也开放了很多接口。可以试试，有个大致的了解。css3也一样，增加的一些css属性，有些还非常强大，比如做个3d什么的，也可以实现。这个名词虽然被炒的很高大上的样子，但其实质还是搭在原来的基础知识之上。在基础很牢固之后再去看这些就感到得心应手咯!</p>\n<p>看到这的你已经大致走完了入门之路，接下来的进阶才是真正考验人的时候。都说前端入门很容易，确实，自从有了jquery，js的dom操作变得容易，而jquery可能只要半天时间就能学会。而jquery现在的弊端也很明显就是dom操作太多了，导致网页反应慢。大部分的页面用前面的知识都可以做出成果，但要效果最好肯定远不止这些。接下来，就将进入进阶的时候！！！</p>\n","excerpt":"<p>前端起家，而最终还是没留在这块‘宝地’，虽然火，但也不和大波人抢饭吃啦！！</p>\n<p>记载回忆篇教程—'老年人’的理解（这里不讲教程，而是整个的学习过程）","more":"</p>\n<p>一款好的文本编辑器是必须先入手的，sublime是我一直在用且功能强大的文本编辑器，软件自寻，装好之后装一些插件,在工具栏Preference-&gt;Browse Packdges先安装包，之后Preference-&gt;Packdge Control-&gt;Install Packdges，搜Emmet，先下这个吧，其他看需求。（之下还有讲sublime的）</p>\n<p>然后开始前端的部分啦！！（不理解的名词自行谷歌哦）先纠正一下外来人对于做网页的理解，可能认为网页只是图片和文字的拼接，这种理解很片面。那你的登陆信息呢？那在网页某宝怎么实现支付呢？用户在访问互联网的时候，很多是通过浏览器，而最开始的前端就是写网页用户直接看到的用到的部分。然后你得收集数据，和后端交互数据，把数据可视化，数据安全等等。甚至前端写的不好，黑客可以通过入侵网页和服务器然后用户访问了网址之后就入侵了他的电脑。当然正常也没这么吓人，但也要防患于未然。</p>\n<p>前端最初始的部分便是html，css，js。什么其他库啊，框架啊，预处理器啊都最终会回到这三个。因为浏览器就认识这三个咯！！关于前端的亲戚------浏览器还有一些有趣的历史故事，大家可以自行发掘。</p>\n<p>html是使用标签来组成网页内能看到的内容。有html，head，body，div，p，h1，a，img，span，input，button，form等等标签，常用的就没几个，知道每个标签的代表的意思就行。这里算是刚刚开始，所以推荐的教程是w3school。</p>\n<p>css是网页中的用来定位，美化的html内容的。这部分和审美设计就相关啦，不过前端基础的一些也得会写。包括布局，居中，字体，盒子模型等等。一般写在head里的style标签内，用选择器来选择html元素，其内写css代码改进网页。很多情况我们会引入外部css文件，写在head的link标签里。</p>\n<p>之后可以写一个简单页面咯，sublime里新建文件保存为xxx.html。输入html:5+tab就会生成一个html的一般模板。在其内继续补充内容。这部分需要大量的练习来熟悉和巩固使用html和css。然后，直到展示类页面基本成型。这里补充写的时候很重要的一点就是理解html块级元素和行内元素，css的定位方法。然后在写的时候进行合理的布局，而不是所有不按自己想法占位的元素，都进行浮动和绝对定位。这对于网页在其他不同大小的屏上效果展示很重要。</p>\n<p>这里先不介绍js，先来尝试一下bootstrap这个奇妙的框架。前面写网页的经历应该会让你发现直接写一个看得过去的页面是一件略复杂的事情，然后前人为了造福后人就帮你把很多展示层面的css和js写好了，你直接引用就行。先找到bootstrap3中文官网的起步部分，在页面头部引入bootstrap的那几个文件。之后按照后面的全局css样式和组件来尝试写页面的每一部分，写起来便轻松愉快啦！！bootstrap更强的是他是移动设备优先，这个之后在述。</p>\n<p>前面部分貌似都感觉不到自己在编程，更像是美工，然后js就来啦，js在网页里充当给网页增加动态的角色。他可以改变html和css的内容，做各种特效，处理提交的数据等等。写js就完完全全有写编程语言的感觉啦，当然这也注定了它将会是前端最难的一部分。</p>\n<p>写js先从基本语法开始，如果接触过c一类的语言，应该很快上手，没接触过也不要紧，基础的语法并不难，很快就能搞定。js可以写在head里也可以在body最下方，大部分情况建议写在body最下方，因为同步的代码从上往下执行，这样就可以先展示html，也就是页面反应变快一些。这部分虽然简单，但在写复杂网页程序的时候往往错误就出在不经意的语法错误。细节决定成败，简单也要严谨。</p>\n<p>上面是js作为一门语言的语法，然后作为网页里的一部分，它还能操作dom，也就是改变html和css。先通过选择器获取dom节点，之后进行操作。当然也可以直接创建dom，网页里的它可以说无所不能。react框架就是用编译成js的jsx包揽了全部页面。</p>\n<p>这里插入一个前端开发者必备功能，这里以chrome为例，那就是会用chrome的开发者工具。我们通过打开浏览器然后按f12或者右键审查元素打开，我习惯会把网页在左边，开发者工具在右边，可以按开发者工具右上角切换。前面js的基本语法里有个console.log便是在开发者工具里的console选项里输出内容，这里可以输出一些数组，对象等等alert不能输出的内容，当然也可以在这里直接像命令行一样输入js进行调试。在elements选项里是所有html内容，network里是所有加载的资源以及获取方式，加载时间等等有用信息，这里还能看到网页header，cookie等的信息，分析别人网页的时候很有用哦。中间那一块是css部分，可以直接在这里写css，然后就能看到效果啦，这里比较强大的两个一个是写一个color:#000;点击彩色小方块，然后会有出现一个颜色板和拾色器。另一个是在写css3动画的时候，写一个速度曲线，点击小方块，会出现一个可调整二次贝塞尔曲线的速度曲线改变面板。css右边还有一个盒子模型，必要时还是挺有用的。</p>\n<p>至此你应该已经得会写轮播图，瀑布流，分页等等网页特效，甚至于写个简单的贪吃蛇，扫雷游戏。当然这里的逻辑还是需要挺多的，想想挺简单，用原生js写起来自然会感觉到吃力。除非之前进行过编程或者算法训练，不然很容易绕在里面，感觉不上不下。之前我自己的感受就是无数自己想想的小demo死在了我代码写到一半的时候。然后会感觉很吃力，如瓶颈一般。现在想想，与其纠结于此，不如去追求更广的天空。</p>\n<p>所以继续来学习jquery，虽然都说用这个的都是老年人，但这些话都是已经把这个库用烂了的人说的。对于一个新手，学jquery也是很重要的一环，这个部分，你会体验到快速开发的乐趣。jquery相当于帮你封装了很多又难理解又难写的原生js，然后你可以直接调用它设定的更简便的形式来写js。在html文件里引入jquery文件，一般推荐min的那个，就可以直接按jquery的语法写啦。开始的话jquery写起来速度可以达到js的好几倍，立刻爱上jquery!!如果用jquery来重写上面那些网页特效，可能会轻松很多。当然网上jquery插件和特效也数不胜数，随便上某度搜就行。前期还是建议自己先造造轮子。</p>\n<p>这里插一个提醒，之后讲的很多东西要在服务器运行，ajax也是。所以先配置一下服务器的环境。windows下建议wamp，linux下建议<a href=\"https://lnmp.org/\">lnmp</a>。都是集成安装环境，安装完就可以直接用。然后windows用浏览器访问localhost打开www文件目录，Linux用浏览器访问公网ip会打开wwwroot文件下default文件下index.html文件。这样就可以继续进行下去啦，之后尽量把文件放服务器。如果想要了解服务器知识的话就走向了后端了哦，但前端也可以稍微了解。</p>\n<p>然后讲一个js里神奇的东西，为什么放在jquery下面呢，因为从jquery的语法来理解他会变得简单易行，他就是ajax。它是一种对js来说跨时代的技术。如果直接用原生来实现当然也可以，但对于菜鸟时候的我晦涩难懂。所以当我看到jquery实现的ajax，jquery好感++；ajax相当于可以在页面不跳转的情况下直接与后台进行交流。看似简单，但却实用，几乎每个页面都或多或少有ajax的身影，特别是对于前后端数据交流频繁的页面。</p>\n<p>通过ajax，再来理解这里面的要用到的其他几个东西。一个是json，它是一种数据格式，常常用于前后端数据交流。因为这种数据很轻便，前后端解析json也很简单。出现json之前很多用的是xml，相比于json，xml解析起来很复杂，现在也少用，但也可以了解。另一个是异步和回调。自行搜异步和同步区别哦，ajax默认是异步的，也就是执行ajax时不会停在这里等数据回来，而是发出了一个ajax执行的指令，然后浏览器就继续扫描执行下面的代码啦，至于ajax，浏览器不去管他什么时候执行完，因为他执行完可以调用一个函数来告诉浏览器执行完了，那个函数就是回调函数。这个弄明白对于以后写node.js很重要。</p>\n<p>最近h5这个名词总是很火，那现在就来讲讲html5和css3，html5和css3都是在原来的基础上增加了许多内容。目前主流的浏览器基本也都支持了大部分特性，所以可以放心大胆的写，不放心就看看手册，到这里你应该是查手册和看文档的时候，而不是又看之前看过的教程，那太慢啦。h5新增了很多带语义的标签，js里也开放了很多接口。可以试试，有个大致的了解。css3也一样，增加的一些css属性，有些还非常强大，比如做个3d什么的，也可以实现。这个名词虽然被炒的很高大上的样子，但其实质还是搭在原来的基础知识之上。在基础很牢固之后再去看这些就感到得心应手咯!</p>\n<p>看到这的你已经大致走完了入门之路，接下来的进阶才是真正考验人的时候。都说前端入门很容易，确实，自从有了jquery，js的dom操作变得容易，而jquery可能只要半天时间就能学会。而jquery现在的弊端也很明显就是dom操作太多了，导致网页反应慢。大部分的页面用前面的知识都可以做出成果，但要效果最好肯定远不止这些。接下来，就将进入进阶的时候！！！</p>"},{"title":"KNN实现手写数字0-9识别","catalog":true,"date":"2017-03-08T16:07:34.000Z","_content":"\nKNN：我的简单理解为计算各个点到原点的距离，对于于样本数据以相差远近排序，取前面K个，属于哪个类别比较多的就当做最后分类，样本越多就越精确。<!--more-->\n\n举个栗子：样本点：[a,b,c,d,e,f]，类别：[1,2,3,2,3,5]，假定a-f分别为相差从近到远；\n\n如果K取1，那分类结果属于1，如果K取值为4，拿结果便为2。\n\n废话不多说直接上代码：\n<pre>//KNN分类的主程序\nfrom numpy import *\nimport operator\ndef classify(inX,dataSet,labels,k):\n    dataSetSize=dataSet.shape[0] \n    #获取行\n    diffMat=tile(inX,(dataSetSize,1))-dataSet \n    #=array([行数个inX])-dataSet\n    sqDiffMat=diffMat**2 \n    #每个数**2\n    sqDistances=sqDiffMat.sum(axis=1) \n    #.sum()--所有数相加 .sum(axis=0)--列 .sum(axis=1)--行\n    distances=sqDistances**0.5\n    #每个数**0.5\n    sortedDistIndicies=distances.argsort()\n    #.argsort()返回排好序后的索引值\n    classCount={}\n    for i in xrange(k):\n        voteIlabel=labels[sortedDistIndicies[i]]\n        #获取由近到远的类别\n        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1\n        #.get(key,default) 对类别进行计数\n    sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)\n    #.iteritems()返回迭代器 operator.itemgetter(1)返回第一个域的值    reverse=True倒序\n    return sortedClassCount[0][0]\n    #输出频率高（靠近）的一个</pre>\n这里简单在提一下图像的处理PIL，以后会详细研究\n<pre>from PIL import Image\nim=Image.open(\"xxx.jpg\")\ndata=im.getdata()\n//data里便是像素点数据</pre>\n之后要做的就是手写好一大部分的图，并用文件名来标记图所代表的数字，这些用来作为训练。\n\n再把像素点转为numpy的矩阵，并标记好每个代表的数字。\n\n载入新来的一张图得到矩阵，带入到上面的classify()就能得出结果，至于K应该取多少，凭经验来做判断，或者用大量数据做训练得出正确率最高的K值。\n\n&nbsp;\n","source":"_posts/2017/article_5_KNN实现手写数字0-9识别.md","raw":"\n---\ntitle: KNN实现手写数字0-9识别\ncatalog: true\ndate: 2017-3-9 00:07:34\n---\n\nKNN：我的简单理解为计算各个点到原点的距离，对于于样本数据以相差远近排序，取前面K个，属于哪个类别比较多的就当做最后分类，样本越多就越精确。<!--more-->\n\n举个栗子：样本点：[a,b,c,d,e,f]，类别：[1,2,3,2,3,5]，假定a-f分别为相差从近到远；\n\n如果K取1，那分类结果属于1，如果K取值为4，拿结果便为2。\n\n废话不多说直接上代码：\n<pre>//KNN分类的主程序\nfrom numpy import *\nimport operator\ndef classify(inX,dataSet,labels,k):\n    dataSetSize=dataSet.shape[0] \n    #获取行\n    diffMat=tile(inX,(dataSetSize,1))-dataSet \n    #=array([行数个inX])-dataSet\n    sqDiffMat=diffMat**2 \n    #每个数**2\n    sqDistances=sqDiffMat.sum(axis=1) \n    #.sum()--所有数相加 .sum(axis=0)--列 .sum(axis=1)--行\n    distances=sqDistances**0.5\n    #每个数**0.5\n    sortedDistIndicies=distances.argsort()\n    #.argsort()返回排好序后的索引值\n    classCount={}\n    for i in xrange(k):\n        voteIlabel=labels[sortedDistIndicies[i]]\n        #获取由近到远的类别\n        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1\n        #.get(key,default) 对类别进行计数\n    sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)\n    #.iteritems()返回迭代器 operator.itemgetter(1)返回第一个域的值    reverse=True倒序\n    return sortedClassCount[0][0]\n    #输出频率高（靠近）的一个</pre>\n这里简单在提一下图像的处理PIL，以后会详细研究\n<pre>from PIL import Image\nim=Image.open(\"xxx.jpg\")\ndata=im.getdata()\n//data里便是像素点数据</pre>\n之后要做的就是手写好一大部分的图，并用文件名来标记图所代表的数字，这些用来作为训练。\n\n再把像素点转为numpy的矩阵，并标记好每个代表的数字。\n\n载入新来的一张图得到矩阵，带入到上面的classify()就能得出结果，至于K应该取多少，凭经验来做判断，或者用大量数据做训练得出正确率最高的K值。\n\n&nbsp;\n","slug":"2017/article_5_KNN实现手写数字0-9识别","published":1,"updated":"2021-01-27T04:46:28.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72z001k0770ys5m6ma5","content":"<p>KNN：我的简单理解为计算各个点到原点的距离，对于于样本数据以相差远近排序，取前面K个，属于哪个类别比较多的就当做最后分类，样本越多就越精确。<a id=\"more\"></a></p>\n<p>举个栗子：样本点：[a,b,c,d,e,f]，类别：[1,2,3,2,3,5]，假定a-f分别为相差从近到远；</p>\n<p>如果K取1，那分类结果属于1，如果K取值为4，拿结果便为2。</p>\n<p>废话不多说直接上代码：</p>\n<pre>//KNN分类的主程序\nfrom numpy import *\nimport operator\ndef classify(inX,dataSet,labels,k):\n    dataSetSize=dataSet.shape[0] \n    #获取行\n    diffMat=tile(inX,(dataSetSize,1))-dataSet \n    #=array([行数个inX])-dataSet\n    sqDiffMat=diffMat**2 \n    #每个数**2\n    sqDistances=sqDiffMat.sum(axis=1) \n    #.sum()--所有数相加 .sum(axis=0)--列 .sum(axis=1)--行\n    distances=sqDistances**0.5\n    #每个数**0.5\n    sortedDistIndicies=distances.argsort()\n    #.argsort()返回排好序后的索引值\n    classCount={}\n    for i in xrange(k):\n        voteIlabel=labels[sortedDistIndicies[i]]\n        #获取由近到远的类别\n        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1\n        #.get(key,default) 对类别进行计数\n    sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)\n    #.iteritems()返回迭代器 operator.itemgetter(1)返回第一个域的值    reverse=True倒序\n    return sortedClassCount[0][0]\n    #输出频率高（靠近）的一个</pre>\n<p>这里简单在提一下图像的处理PIL，以后会详细研究</p>\n<pre>from PIL import Image\nim=Image.open(\"xxx.jpg\")\ndata=im.getdata()\n//data里便是像素点数据</pre>\n<p>之后要做的就是手写好一大部分的图，并用文件名来标记图所代表的数字，这些用来作为训练。</p>\n<p>再把像素点转为numpy的矩阵，并标记好每个代表的数字。</p>\n<p>载入新来的一张图得到矩阵，带入到上面的classify()就能得出结果，至于K应该取多少，凭经验来做判断，或者用大量数据做训练得出正确率最高的K值。</p>\n<p> </p>\n","excerpt":"<p>KNN：我的简单理解为计算各个点到原点的距离，对于于样本数据以相差远近排序，取前面K个，属于哪个类别比较多的就当做最后分类，样本越多就越精确。","more":"</p>\n<p>举个栗子：样本点：[a,b,c,d,e,f]，类别：[1,2,3,2,3,5]，假定a-f分别为相差从近到远；</p>\n<p>如果K取1，那分类结果属于1，如果K取值为4，拿结果便为2。</p>\n<p>废话不多说直接上代码：</p>\n<pre>//KNN分类的主程序\nfrom numpy import *\nimport operator\ndef classify(inX,dataSet,labels,k):\n    dataSetSize=dataSet.shape[0] \n    #获取行\n    diffMat=tile(inX,(dataSetSize,1))-dataSet \n    #=array([行数个inX])-dataSet\n    sqDiffMat=diffMat**2 \n    #每个数**2\n    sqDistances=sqDiffMat.sum(axis=1) \n    #.sum()--所有数相加 .sum(axis=0)--列 .sum(axis=1)--行\n    distances=sqDistances**0.5\n    #每个数**0.5\n    sortedDistIndicies=distances.argsort()\n    #.argsort()返回排好序后的索引值\n    classCount={}\n    for i in xrange(k):\n        voteIlabel=labels[sortedDistIndicies[i]]\n        #获取由近到远的类别\n        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1\n        #.get(key,default) 对类别进行计数\n    sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)\n    #.iteritems()返回迭代器 operator.itemgetter(1)返回第一个域的值    reverse=True倒序\n    return sortedClassCount[0][0]\n    #输出频率高（靠近）的一个</pre>\n<p>这里简单在提一下图像的处理PIL，以后会详细研究</p>\n<pre>from PIL import Image\nim=Image.open(\"xxx.jpg\")\ndata=im.getdata()\n//data里便是像素点数据</pre>\n<p>之后要做的就是手写好一大部分的图，并用文件名来标记图所代表的数字，这些用来作为训练。</p>\n<p>再把像素点转为numpy的矩阵，并标记好每个代表的数字。</p>\n<p>载入新来的一张图得到矩阵，带入到上面的classify()就能得出结果，至于K应该取多少，凭经验来做判断，或者用大量数据做训练得出正确率最高的K值。</p>\n<p> </p>"},{"title":"python日常问答篇--更新中","catalog":true,"date":"2017-03-11T15:14:44.000Z","_content":"\npython篇：\n\n1.windows上，在pip install xxx失败的时候怎么办？\n\n答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。\n\n<!--more-->\n\n2.解决pip3报错Fatal error in launcher: Unable to create process using '\"'。\n\n一种：\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n另一种：\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n3.linux上python3中文会显示UnicodeEncodeError: 'ascii' codec can't encode character。\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n4.requests爬到的中文网页输出在windows cmd会出错\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n5.cv2.imread读取中文路径出错\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n&nbsp;\n","source":"_posts/2017/article_8_python日常问答篇--更新中.md","raw":"\n---\ntitle: python日常问答篇--更新中\ncatalog: true\ndate: 2017-3-11 23:14:44\n---\n\npython篇：\n\n1.windows上，在pip install xxx失败的时候怎么办？\n\n答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。\n\n<!--more-->\n\n2.解决pip3报错Fatal error in launcher: Unable to create process using '\"'。\n\n一种：\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n另一种：\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n3.linux上python3中文会显示UnicodeEncodeError: 'ascii' codec can't encode character。\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n4.requests爬到的中文网页输出在windows cmd会出错\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n5.cv2.imread读取中文路径出错\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n&nbsp;\n","slug":"2017/article_8_python日常问答篇--更新中","published":1,"updated":"2021-01-27T04:46:28.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh72z001l0770ep7xxwnh","content":"<p>python篇：</p>\n<p>1.windows上，在pip install xxx失败的时候怎么办？</p>\n<p>答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p>\n<a id=\"more\"></a>\n<p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p>\n<p>一种：</p>\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n<p>另一种：</p>\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n<p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p>\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n<p>4.requests爬到的中文网页输出在windows cmd会出错</p>\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n<p>5.cv2.imread读取中文路径出错</p>\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n<p> </p>\n","excerpt":"<p>python篇：</p>\n<p>1.windows上，在pip install xxx失败的时候怎么办？</p>\n<p>答：<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>到这里面寻找whl，下载之后用 pip install xxx.whl 来安装。</p>","more":"<p>2.解决pip3报错Fatal error in launcher: Unable to create process using ‘&quot;’。</p>\n<p>一种：</p>\n<pre>import pip\npip.main(['install','ModuleName'])</pre>\n<p>另一种：</p>\n<pre class=\"lang-py prettyprint prettyprinted\"><code><span class=\"pln\">python3 </span><span class=\"pun\">-</span><span class=\"pln\">m pip install whlName\n</span></code></pre>\n<p>3.linux上python3中文会显示UnicodeEncodeError: ‘ascii’ codec can’t encode character。</p>\n<pre>import io \nimport sys \nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')</pre>\n<p>4.requests爬到的中文网页输出在windows cmd会出错</p>\n<pre>res=requests.get(url)\nres.encoding='gbk'\nprint(res.text)</pre>\n<p>5.cv2.imread读取中文路径出错</p>\n<pre>#读取\nim = cv2.imdecode(np.fromfile(file,dtype=np.uint8),-1)\n#写入\ncv2.imencode('.jpg',res)[1].tofile(file)</pre>\n<p> </p>"},{"title":"leetcode解题篇Python法1-5题","catalog":true,"date":"2017-03-10T07:53:28.000Z","_content":"\n具体详细题目请到<a href=\"https://leetcode.com/problemset/algorithms/\">https://leetcode.com/problemset/algorithms/</a>查看\n\n之下解法都属第一思路，大可改进。\n\n悄悄自问一句：今天ac了吗？<!--more-->\n\n1. Two Sum\n<pre>class Solution(object):\n    def twoSum(self, nums, target):\n    l=len(nums)\n    for i in xrange(l):\n        for j in xrange(l):\n            if(j==i):\n                pass\n            else:\n                if((nums[i]+nums[j])==target):\n                    return [i,j]\n</pre>\n2. Add Two Numbers\n<pre>class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        res=[]\n        jw=0\n        while(hasattr(l1,'val') or hasattr(l2,'val')):\n            if hasattr(l2,'val') and (not hasattr(l1,'val')):\n                if l2.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l2.val+jw)\n                    jw=0\n                l2=l2.next\n            elif hasattr(l1,'val') and not hasattr(l2,'val'):\n                if l1.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l1.val+jw)\n                    jw=0\n                l1=l1.next\n            else:\n                if l1.val+l2.val+jw&gt;=10:\n                    tmp=l1.val+l2.val+jw-10\n                    jw=1\n                else:\n                    tmp=l1.val+l2.val+jw\n                    jw=0\n                res.append(tmp)\n                l1=l1.next\n                l2=l2.next\n        if(jw):\n            res.append(1)\n        return res\n</pre>\n3. Longest Substring Without Repeating Characters\n<pre>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        l=len(s)\n        res=0\n        tmp=0\n        k=1\n        for i in xrange(l):\n            for j in xrange(k,l+2):\n                if len(set(s[i:j]))!=j-i:\n                    k=j\n                    tmp=j-i\n                    break\n            if tmp&gt;res:\n                res=tmp\n            tmp=0\n            o=1\n        if s=='':\n            res=1\n        return res-1</pre>\n4. Median of Two Sorted Arrays\n<pre>class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        c=(nums1+nums2)\n        c.sort()\n        l=len(c)\n        if l%2==0:\n            res=(c[l/2]+c[l/2-1])*1.0/2\n        else:\n            res=(c[l/2])*1.0\n        return res</pre>\n5. Longest Palindromic Substring\n<pre>class Solution(object):\n    def longestPalindrome(self, s):\n        l=len(s)\n        tmp=0\n        maxl,maxr=0,0\n        for i in xrange(l):\n            m=i+1\n            n=i\n            while m&lt;l and n&gt;=0:\n                if s[m]==s[n]:\n                    if m-n+1&gt;tmp:\n                        tmp=m-n+1\n                        maxl=n\n                        maxr=m\n                    m+=1\n                    n-=1\n                else:\n                    break\n            j=i-1\n            k=i+1\n            while j&gt;=0 and k&lt;l:\n                if s[j]==s[k]:\n                    if k-j+1&gt;tmp:\n                        tmp=k-j+1\n                        maxl=j\n                        maxr=k\n                    j-=1\n                    k+=1\n                else:\n                    break\n        return s[maxl:maxr+1]</pre>\n&nbsp;\n","source":"_posts/2017/article_6_leetcode解题篇Python法1-5题.md","raw":"\n---\ntitle: leetcode解题篇Python法1-5题\ncatalog: true\ndate: 2017-3-10 15:53:28\n---\n\n具体详细题目请到<a href=\"https://leetcode.com/problemset/algorithms/\">https://leetcode.com/problemset/algorithms/</a>查看\n\n之下解法都属第一思路，大可改进。\n\n悄悄自问一句：今天ac了吗？<!--more-->\n\n1. Two Sum\n<pre>class Solution(object):\n    def twoSum(self, nums, target):\n    l=len(nums)\n    for i in xrange(l):\n        for j in xrange(l):\n            if(j==i):\n                pass\n            else:\n                if((nums[i]+nums[j])==target):\n                    return [i,j]\n</pre>\n2. Add Two Numbers\n<pre>class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        res=[]\n        jw=0\n        while(hasattr(l1,'val') or hasattr(l2,'val')):\n            if hasattr(l2,'val') and (not hasattr(l1,'val')):\n                if l2.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l2.val+jw)\n                    jw=0\n                l2=l2.next\n            elif hasattr(l1,'val') and not hasattr(l2,'val'):\n                if l1.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l1.val+jw)\n                    jw=0\n                l1=l1.next\n            else:\n                if l1.val+l2.val+jw&gt;=10:\n                    tmp=l1.val+l2.val+jw-10\n                    jw=1\n                else:\n                    tmp=l1.val+l2.val+jw\n                    jw=0\n                res.append(tmp)\n                l1=l1.next\n                l2=l2.next\n        if(jw):\n            res.append(1)\n        return res\n</pre>\n3. Longest Substring Without Repeating Characters\n<pre>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        l=len(s)\n        res=0\n        tmp=0\n        k=1\n        for i in xrange(l):\n            for j in xrange(k,l+2):\n                if len(set(s[i:j]))!=j-i:\n                    k=j\n                    tmp=j-i\n                    break\n            if tmp&gt;res:\n                res=tmp\n            tmp=0\n            o=1\n        if s=='':\n            res=1\n        return res-1</pre>\n4. Median of Two Sorted Arrays\n<pre>class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        c=(nums1+nums2)\n        c.sort()\n        l=len(c)\n        if l%2==0:\n            res=(c[l/2]+c[l/2-1])*1.0/2\n        else:\n            res=(c[l/2])*1.0\n        return res</pre>\n5. Longest Palindromic Substring\n<pre>class Solution(object):\n    def longestPalindrome(self, s):\n        l=len(s)\n        tmp=0\n        maxl,maxr=0,0\n        for i in xrange(l):\n            m=i+1\n            n=i\n            while m&lt;l and n&gt;=0:\n                if s[m]==s[n]:\n                    if m-n+1&gt;tmp:\n                        tmp=m-n+1\n                        maxl=n\n                        maxr=m\n                    m+=1\n                    n-=1\n                else:\n                    break\n            j=i-1\n            k=i+1\n            while j&gt;=0 and k&lt;l:\n                if s[j]==s[k]:\n                    if k-j+1&gt;tmp:\n                        tmp=k-j+1\n                        maxl=j\n                        maxr=k\n                    j-=1\n                    k+=1\n                else:\n                    break\n        return s[maxl:maxr+1]</pre>\n&nbsp;\n","slug":"2017/article_6_leetcode解题篇Python法1-5题","published":1,"updated":"2021-01-27T04:46:28.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh730001m0770qaispw5h","content":"<p>具体详细题目请到<a href=\"https://leetcode.com/problemset/algorithms/\" target=\"_blank\" rel=\"external\">https://leetcode.com/problemset/algorithms/</a>查看</p>\n<p>之下解法都属第一思路，大可改进。</p>\n<p>悄悄自问一句：今天ac了吗？<a id=\"more\"></a></p>\n<ol>\n<li>Two Sum</li>\n</ol>\n<pre>class Solution(object):\n    def twoSum(self, nums, target):\n    l=len(nums)\n    for i in xrange(l):\n        for j in xrange(l):\n            if(j==i):\n                pass\n            else:\n                if((nums[i]+nums[j])==target):\n                    return [i,j]\n</pre>\n<ol start=\"2\">\n<li>Add Two Numbers</li>\n</ol>\n<pre>class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        res=[]\n        jw=0\n        while(hasattr(l1,'val') or hasattr(l2,'val')):\n            if hasattr(l2,'val') and (not hasattr(l1,'val')):\n                if l2.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l2.val+jw)\n                    jw=0\n                l2=l2.next\n            elif hasattr(l1,'val') and not hasattr(l2,'val'):\n                if l1.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l1.val+jw)\n                    jw=0\n                l1=l1.next\n            else:\n                if l1.val+l2.val+jw&gt;=10:\n                    tmp=l1.val+l2.val+jw-10\n                    jw=1\n                else:\n                    tmp=l1.val+l2.val+jw\n                    jw=0\n                res.append(tmp)\n                l1=l1.next\n                l2=l2.next\n        if(jw):\n            res.append(1)\n        return res\n</pre>\n<ol start=\"3\">\n<li>Longest Substring Without Repeating Characters</li>\n</ol>\n<pre>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        l=len(s)\n        res=0\n        tmp=0\n        k=1\n        for i in xrange(l):\n            for j in xrange(k,l+2):\n                if len(set(s[i:j]))!=j-i:\n                    k=j\n                    tmp=j-i\n                    break\n            if tmp&gt;res:\n                res=tmp\n            tmp=0\n            o=1\n        if s=='':\n            res=1\n        return res-1</pre>\n<ol start=\"4\">\n<li>Median of Two Sorted Arrays</li>\n</ol>\n<pre>class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        c=(nums1+nums2)\n        c.sort()\n        l=len(c)\n        if l%2==0:\n            res=(c[l/2]+c[l/2-1])*1.0/2\n        else:\n            res=(c[l/2])*1.0\n        return res</pre>\n<ol start=\"5\">\n<li>Longest Palindromic Substring</li>\n</ol>\n<pre>class Solution(object):\n    def longestPalindrome(self, s):\n        l=len(s)\n        tmp=0\n        maxl,maxr=0,0\n        for i in xrange(l):\n            m=i+1\n            n=i\n            while m&lt;l and n&gt;=0:\n                if s[m]==s[n]:\n                    if m-n+1&gt;tmp:\n                        tmp=m-n+1\n                        maxl=n\n                        maxr=m\n                    m+=1\n                    n-=1\n                else:\n                    break\n            j=i-1\n            k=i+1\n            while j&gt;=0 and k&lt;l:\n                if s[j]==s[k]:\n                    if k-j+1&gt;tmp:\n                        tmp=k-j+1\n                        maxl=j\n                        maxr=k\n                    j-=1\n                    k+=1\n                else:\n                    break\n        return s[maxl:maxr+1]</pre>\n<p> </p>\n","excerpt":"<p>具体详细题目请到<a href=\"https://leetcode.com/problemset/algorithms/\">https://leetcode.com/problemset/algorithms/</a>查看</p>\n<p>之下解法都属第一思路，大可改进。</p>\n<p>悄悄自问一句：今天ac了吗？","more":"</p>\n<ol>\n<li>Two Sum</li>\n</ol>\n<pre>class Solution(object):\n    def twoSum(self, nums, target):\n    l=len(nums)\n    for i in xrange(l):\n        for j in xrange(l):\n            if(j==i):\n                pass\n            else:\n                if((nums[i]+nums[j])==target):\n                    return [i,j]\n</pre>\n<ol start=\"2\">\n<li>Add Two Numbers</li>\n</ol>\n<pre>class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        res=[]\n        jw=0\n        while(hasattr(l1,'val') or hasattr(l2,'val')):\n            if hasattr(l2,'val') and (not hasattr(l1,'val')):\n                if l2.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l2.val+jw)\n                    jw=0\n                l2=l2.next\n            elif hasattr(l1,'val') and not hasattr(l2,'val'):\n                if l1.val+jw==10:\n                    jw=1\n                    res.append(0)\n                else:\n                    res.append(l1.val+jw)\n                    jw=0\n                l1=l1.next\n            else:\n                if l1.val+l2.val+jw&gt;=10:\n                    tmp=l1.val+l2.val+jw-10\n                    jw=1\n                else:\n                    tmp=l1.val+l2.val+jw\n                    jw=0\n                res.append(tmp)\n                l1=l1.next\n                l2=l2.next\n        if(jw):\n            res.append(1)\n        return res\n</pre>\n<ol start=\"3\">\n<li>Longest Substring Without Repeating Characters</li>\n</ol>\n<pre>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        l=len(s)\n        res=0\n        tmp=0\n        k=1\n        for i in xrange(l):\n            for j in xrange(k,l+2):\n                if len(set(s[i:j]))!=j-i:\n                    k=j\n                    tmp=j-i\n                    break\n            if tmp&gt;res:\n                res=tmp\n            tmp=0\n            o=1\n        if s=='':\n            res=1\n        return res-1</pre>\n<ol start=\"4\">\n<li>Median of Two Sorted Arrays</li>\n</ol>\n<pre>class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        c=(nums1+nums2)\n        c.sort()\n        l=len(c)\n        if l%2==0:\n            res=(c[l/2]+c[l/2-1])*1.0/2\n        else:\n            res=(c[l/2])*1.0\n        return res</pre>\n<ol start=\"5\">\n<li>Longest Palindromic Substring</li>\n</ol>\n<pre>class Solution(object):\n    def longestPalindrome(self, s):\n        l=len(s)\n        tmp=0\n        maxl,maxr=0,0\n        for i in xrange(l):\n            m=i+1\n            n=i\n            while m&lt;l and n&gt;=0:\n                if s[m]==s[n]:\n                    if m-n+1&gt;tmp:\n                        tmp=m-n+1\n                        maxl=n\n                        maxr=m\n                    m+=1\n                    n-=1\n                else:\n                    break\n            j=i-1\n            k=i+1\n            while j&gt;=0 and k&lt;l:\n                if s[j]==s[k]:\n                    if k-j+1&gt;tmp:\n                        tmp=k-j+1\n                        maxl=j\n                        maxr=k\n                    j-=1\n                    k+=1\n                else:\n                    break\n        return s[maxl:maxr+1]</pre>\n<p> </p>"},{"title":"在线接口测试及生成文档","catalog":true,"date":"2018-03-14T09:31:20.000Z","_content":"\n由于每次更改后端接口都要经过测试，然后又要去修改接口文档，就想着能不能整合这两步，为了自己能灵活修改，便自己来写个。\n\n<a href=\"https://github.com/webgjc/ApiTestToMd\">https://github.com/webgjc/ApiTestToMd</a><!--more-->\n\n这次的代码有点多，就不直接展示了，放在github上，也可方便下载使用。\n\n&nbsp;\n\n写写思路及主要用到的工具：\n\n后端使用flask框架，requests作为接口测试，增加了百度翻译api作为参数翻译，另外写了一些文件的接口。\n\n前端使用bootstrap4作为测试接口页面的主要ui。测试记录存在sessionStorage里，只是刷新标签并不会使记消失。\n\n前端接口文档编辑主要从sessionStorage获取到记录，用固定格式产生md文本，参数使用百度api翻译一下，再用了marked.js把md转成html文件，md和html分居左右也可以边改边看效果。\n\n之后又增加了文件保存读取的效果，可以复用上次改下的接口文档。\n\nhtml的效果就是css，借鉴于<a href=\"http://coolaf.com/tool/md\">http://coolaf.com/tool/md</a>\n\n就这么多功能，前前后后改了一星期左右，没有很多难点，但有些细节也是实际用了才发现去改，可能功能还能完善，差不多作为一个日常小工具也足够啦。\n","source":"_posts/2018/article_10_在线接口测试及生成文档.md","raw":"\n---\ntitle: 在线接口测试及生成文档\ncatalog: true\ndate: 2018-3-14 17:31:20\n---\n\n由于每次更改后端接口都要经过测试，然后又要去修改接口文档，就想着能不能整合这两步，为了自己能灵活修改，便自己来写个。\n\n<a href=\"https://github.com/webgjc/ApiTestToMd\">https://github.com/webgjc/ApiTestToMd</a><!--more-->\n\n这次的代码有点多，就不直接展示了，放在github上，也可方便下载使用。\n\n&nbsp;\n\n写写思路及主要用到的工具：\n\n后端使用flask框架，requests作为接口测试，增加了百度翻译api作为参数翻译，另外写了一些文件的接口。\n\n前端使用bootstrap4作为测试接口页面的主要ui。测试记录存在sessionStorage里，只是刷新标签并不会使记消失。\n\n前端接口文档编辑主要从sessionStorage获取到记录，用固定格式产生md文本，参数使用百度api翻译一下，再用了marked.js把md转成html文件，md和html分居左右也可以边改边看效果。\n\n之后又增加了文件保存读取的效果，可以复用上次改下的接口文档。\n\nhtml的效果就是css，借鉴于<a href=\"http://coolaf.com/tool/md\">http://coolaf.com/tool/md</a>\n\n就这么多功能，前前后后改了一星期左右，没有很多难点，但有些细节也是实际用了才发现去改，可能功能还能完善，差不多作为一个日常小工具也足够啦。\n","slug":"2018/article_10_在线接口测试及生成文档","published":1,"updated":"2021-01-27T04:46:28.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh731001n0770jh48wog5","content":"<p>由于每次更改后端接口都要经过测试，然后又要去修改接口文档，就想着能不能整合这两步，为了自己能灵活修改，便自己来写个。</p>\n<p><a href=\"https://github.com/webgjc/ApiTestToMd\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/ApiTestToMd</a><a id=\"more\"></a></p>\n<p>这次的代码有点多，就不直接展示了，放在github上，也可方便下载使用。</p>\n<p> </p>\n<p>写写思路及主要用到的工具：</p>\n<p>后端使用flask框架，requests作为接口测试，增加了百度翻译api作为参数翻译，另外写了一些文件的接口。</p>\n<p>前端使用bootstrap4作为测试接口页面的主要ui。测试记录存在sessionStorage里，只是刷新标签并不会使记消失。</p>\n<p>前端接口文档编辑主要从sessionStorage获取到记录，用固定格式产生md文本，参数使用百度api翻译一下，再用了marked.js把md转成html文件，md和html分居左右也可以边改边看效果。</p>\n<p>之后又增加了文件保存读取的效果，可以复用上次改下的接口文档。</p>\n<p>html的效果就是css，借鉴于<a href=\"http://coolaf.com/tool/md\" target=\"_blank\" rel=\"external\">http://coolaf.com/tool/md</a></p>\n<p>就这么多功能，前前后后改了一星期左右，没有很多难点，但有些细节也是实际用了才发现去改，可能功能还能完善，差不多作为一个日常小工具也足够啦。</p>\n","excerpt":"<p>由于每次更改后端接口都要经过测试，然后又要去修改接口文档，就想着能不能整合这两步，为了自己能灵活修改，便自己来写个。</p>\n<p><a href=\"https://github.com/webgjc/ApiTestToMd\">https://github.com/webgjc/ApiTestToMd</a>","more":"</p>\n<p>这次的代码有点多，就不直接展示了，放在github上，也可方便下载使用。</p>\n<p> </p>\n<p>写写思路及主要用到的工具：</p>\n<p>后端使用flask框架，requests作为接口测试，增加了百度翻译api作为参数翻译，另外写了一些文件的接口。</p>\n<p>前端使用bootstrap4作为测试接口页面的主要ui。测试记录存在sessionStorage里，只是刷新标签并不会使记消失。</p>\n<p>前端接口文档编辑主要从sessionStorage获取到记录，用固定格式产生md文本，参数使用百度api翻译一下，再用了marked.js把md转成html文件，md和html分居左右也可以边改边看效果。</p>\n<p>之后又增加了文件保存读取的效果，可以复用上次改下的接口文档。</p>\n<p>html的效果就是css，借鉴于<a href=\"http://coolaf.com/tool/md\">http://coolaf.com/tool/md</a></p>\n<p>就这么多功能，前前后后改了一星期左右，没有很多难点，但有些细节也是实际用了才发现去改，可能功能还能完善，差不多作为一个日常小工具也足够啦。</p>"},{"title":"常用编程小操作","catalog":true,"date":"2017-11-30T09:45:47.000Z","_content":"\n包括，批量重命名，待更新。。。\n\n1.批量重命名  changeName.py\n<pre>import os\nf=os.listdir(\"./\")\nf.remove(\"changeName.py\")\nj=0\nfor i in f:\n os.renames(i,str(j)+\".jpg\")\n j+=1</pre>\n2.实现数组next并循环---js版\n<pre>(now+1)%array.length</pre>\n3.python字典自动初始化为0\n<pre>from collections import defaultdict\nd=defaultdict(int)\nd['count']+=1</pre>\n4.linux+windows 查看端口监听并kill\n<pre>#linux\nnetstat -apn|grep 8000\n或者\nps -aux|grep 8000\nkill -9 pid\n\n#windows\nnetstat -ano|findstr 3000\nnetstat -ano</pre>\n5.linux开启防火墙\n<pre>firewall-cmd --zone=public --add-port=8892/tcp --permanent\nsystemctl restart firewalld</pre>\n6.linux下python后台运行\n<pre>nohup python -u filename.py &gt; filename.out 2&gt;&amp;1 &amp;\ntail -f filename.out</pre>\n7.git add，git commit提交错误\n<pre>git status\ngit reset HEAD</pre>\n<pre>git log\ngit reset --soft commit_id</pre>\n如果使用hard reset 了\n<pre>git reflog\ngit reset --hard 前面的id</pre>\n8.linux查看文件行数（windows可用git bash）\n<pre>cat code.py | wc -l</pre>\n","source":"_posts/2017/article_9_常用编程小操作.md","raw":"\n---\ntitle: 常用编程小操作\ncatalog: true\ndate: 2017-11-30 17:45:47\n---\n\n包括，批量重命名，待更新。。。\n\n1.批量重命名  changeName.py\n<pre>import os\nf=os.listdir(\"./\")\nf.remove(\"changeName.py\")\nj=0\nfor i in f:\n os.renames(i,str(j)+\".jpg\")\n j+=1</pre>\n2.实现数组next并循环---js版\n<pre>(now+1)%array.length</pre>\n3.python字典自动初始化为0\n<pre>from collections import defaultdict\nd=defaultdict(int)\nd['count']+=1</pre>\n4.linux+windows 查看端口监听并kill\n<pre>#linux\nnetstat -apn|grep 8000\n或者\nps -aux|grep 8000\nkill -9 pid\n\n#windows\nnetstat -ano|findstr 3000\nnetstat -ano</pre>\n5.linux开启防火墙\n<pre>firewall-cmd --zone=public --add-port=8892/tcp --permanent\nsystemctl restart firewalld</pre>\n6.linux下python后台运行\n<pre>nohup python -u filename.py &gt; filename.out 2&gt;&amp;1 &amp;\ntail -f filename.out</pre>\n7.git add，git commit提交错误\n<pre>git status\ngit reset HEAD</pre>\n<pre>git log\ngit reset --soft commit_id</pre>\n如果使用hard reset 了\n<pre>git reflog\ngit reset --hard 前面的id</pre>\n8.linux查看文件行数（windows可用git bash）\n<pre>cat code.py | wc -l</pre>\n","slug":"2017/article_9_常用编程小操作","published":1,"updated":"2021-01-27T04:46:28.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh733001o0770szckbt1j","content":"<p>包括，批量重命名，待更新。。。</p>\n<p>1.批量重命名  <a href=\"http://changeName.py\" target=\"_blank\" rel=\"external\">changeName.py</a></p>\n<pre>import os\nf=os.listdir(\"./\")\nf.remove(\"changeName.py\")\nj=0\nfor i in f:\n os.renames(i,str(j)+\".jpg\")\n j+=1</pre>\n<p>2.实现数组next并循环—js版</p>\n<pre>(now+1)%array.length</pre>\n<p>3.python字典自动初始化为0</p>\n<pre>from collections import defaultdict\nd=defaultdict(int)\nd['count']+=1</pre>\n<p>4.linux+windows 查看端口监听并kill</p>\n<pre>#linux\nnetstat -apn|grep 8000\n或者\nps -aux|grep 8000\nkill -9 pid\n\n#windows\nnetstat -ano|findstr 3000\nnetstat -ano</pre>\n<p>5.linux开启防火墙</p>\n<pre>firewall-cmd --zone=public --add-port=8892/tcp --permanent\nsystemctl restart firewalld</pre>\n<p>6.linux下python后台运行</p>\n<pre>nohup python -u filename.py &gt; filename.out 2&gt;&amp;1 &amp;\ntail -f filename.out</pre>\n<p>7.git add，git commit提交错误</p>\n<pre>git status\ngit reset HEAD</pre>\n<pre>git log\ngit reset --soft commit_id</pre>\n<p>如果使用hard reset 了</p>\n<pre>git reflog\ngit reset --hard 前面的id</pre>\n<p>8.linux查看文件行数（windows可用git bash）</p>\n<pre>cat code.py | wc -l</pre>\n","excerpt":"","more":"<p>包括，批量重命名，待更新。。。</p>\n<p>1.批量重命名  <a href=\"http://changeName.py\">changeName.py</a></p>\n<pre>import os\nf=os.listdir(\"./\")\nf.remove(\"changeName.py\")\nj=0\nfor i in f:\n os.renames(i,str(j)+\".jpg\")\n j+=1</pre>\n<p>2.实现数组next并循环—js版</p>\n<pre>(now+1)%array.length</pre>\n<p>3.python字典自动初始化为0</p>\n<pre>from collections import defaultdict\nd=defaultdict(int)\nd['count']+=1</pre>\n<p>4.linux+windows 查看端口监听并kill</p>\n<pre>#linux\nnetstat -apn|grep 8000\n或者\nps -aux|grep 8000\nkill -9 pid\n\n#windows\nnetstat -ano|findstr 3000\nnetstat -ano</pre>\n<p>5.linux开启防火墙</p>\n<pre>firewall-cmd --zone=public --add-port=8892/tcp --permanent\nsystemctl restart firewalld</pre>\n<p>6.linux下python后台运行</p>\n<pre>nohup python -u filename.py &gt; filename.out 2&gt;&amp;1 &amp;\ntail -f filename.out</pre>\n<p>7.git add，git commit提交错误</p>\n<pre>git status\ngit reset HEAD</pre>\n<pre>git log\ngit reset --soft commit_id</pre>\n<p>如果使用hard reset 了</p>\n<pre>git reflog\ngit reset --hard 前面的id</pre>\n<p>8.linux查看文件行数（windows可用git bash）</p>\n<pre>cat code.py | wc -l</pre>\n"},{"title":"又双叒叕建博客","catalog":true,"toc_nav_num":true,"date":"2019-11-13T09:05:00.000Z","subtitle":"讲讲本次建博客中间那些事","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","source":"_posts/2019/article_1_又双叒叕建博客.md","raw":"---\ntitle: \"又双叒叕建博客\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-11-13 17:05:00\nsubtitle: \"讲讲本次建博客中间那些事\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。\n\n本次又心血来潮，使用node的hexo和github的gh-pages来搭建。\n\n开篇就以博客搭建过程为主要内容。\n\n## 工具准备\n\n> git, node, github账号, vscode(非必备), 域名(非必备)\n\n这里需要自行搜索学习安装了\n\n## 动手搭建\n\n> 贴个官方地址\n> https://hexo.io/zh-cn/\n\n这里就不跟着官方教程走了，不过大同小异\n\n先到 [主题页](https://hexo.io/themes/) 找个喜欢的主题\n\n这里选了 [A-Boy](https://github.com/huweihuang/hexo-theme-huweihuang) 这个主题，🙄主要是他比较像我之前的博客风格。\n\n```\n# 下载hexo命令行工具\nnpm install hexo-cli -g\n\n# 创建文件夹\nmkdir blog\n\n# \b下载主题到该文件夹\ngit clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog\n\n# 下载依赖包\ncd blog\nnpm install\n```\n\n文件组织结构大致如下\n```\n/_config.xml\n主要配置文件\n\n/source\n存放文章 ./_posts\n图片 ./img\n\n/themes\n主题的一些模板文件\n\n/scaffolds\n一些脚手架，原生就在\n\n/node_modules\n外部依赖的模块\n\n/db.json\n存储服务器解析出来的临时文章数据\n\n/还有一些暂时用不到的文件\n```\n\n先到github建立自己的仓库，就长下面这样\n![github](/img/mypost/github.png)\n\n然后对主题的_config.xml一些配置项\n```\n# 配置刚才的github仓库, 一般使用gh-pages分支\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n```\n# 配置路由，这里使用域名的绝对路径，相对路径会有个坑->图片写绝对路径时不会把root路径加上\nurl: http://ganjiacheng.cn/\nroot: /\n```\n\n```\n# 配置主题，/theme/下的子目录文件夹\ntheme: huweihuang\n```\n\n```\n# 侧边栏的一些配置\nsidebar: true    \nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\nwidgets:  \n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\n```\n# markdown编译器的一些配置\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\n这里有配置背景图\n推荐一个常用的[壁纸网站](https://bing.ioliu.cn/)\n\n\n下面是一些命令行命令\n```\n# 新建文章\nhexo new post \"<post name>\" \n\n# 删除临时数据库\nhexo clean\n\n# 编译为html\nhexo generate \n\n# 开启server\nhexo server\n\n# 上传到github，第一次要写账号密码，后面就不用了\nhexo deploy \n```\n\n## 使用vscode写文章\n\n打开建立的项目文件夹\n\n在/source/_posts/下新建md文件为新文章\n\n由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，  \n其他可选择的也有写文章的hexo插件 [hexo-admin](https://github.com/jaredly/hexo-admin)\n\ncommand+shift+p 搜索markdown open preview to the side\n\n就可以在左边写右边实时查看效果了\n\n推荐一个自己记录最简markdown手册 [markdown手册](https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md)\n\n在markdown文件开头加上一些文章的必备信息\n```\n---\ntitle: \"标题\"\ndate: 1999-01-01 00:00:00\nsubtitle: \"副标题\"\nheader-img: \"/img/图片.jpg\"\ntags:\n- 标签\n---\n```\n\n然后开始写文章\n```\n此处省略一万字\n```\n\n## 介绍一些插件\n\n原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。\n\n也有一些主题也内置了一些插件，直接配置即可。\n\n由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。\n\n### 访问次数插件\n\n这里试用下 [不蒜子](http://busuanzi.ibruce.info/) 来做访问次数。\n\n编辑 /_config.yml 在最后加上\n```\nbusuanzi:\n  enable: true\n```\n\n找到/themes/主题名/layout/_partial/footer.ejs\n\n在底部\\</footer>标签前加上，就是网站次数统计，或者自己想加哪加哪\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n    <div style=\"text-align: center;\">\n        <span>\n            本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n            </span>\n            <span class=\"post-meta-divider\">|</span>\n        <span>\n            本站访客数<span id=\"busuanzi_value_site_uv\"></span>人\n        </span>\n    </div>\n<% } %>\n```\n下面这个是页面访问次数\n```\n<% if (theme.busuanzi && theme.busuanzi.enable){ %>\n    <span>\n        Viewed <span id=\"busuanzi_value_page_pv\"></span> times\n    </span>\n<% } %>\n```\n\n### 评论插件\n\n这里使用的是[valine](https://valine.js.org/) 和 [leancloud](https://leancloud.cn/)\n\nvaline是前端部分嵌入组件，leancloud来存储信息\n\n注册等步骤就不贴了,看[这里](https://valine.js.org/quickstart.html)\n\n说下嵌入的部分，在/themes/主题名/post.ejs\n\n找个合适的标签下面加入，基本就和上面文章对齐就行\n\n```\n<script src='//unpkg.com/valine/dist/Valine.min.js'></script>\n<h5>COMMENT</h5>\n<div id=\"vcomments\"></div>\n<script>\n    new Valine({\n        el: '#vcomments',\n        appId: '<AppId>', #这个要注册后拿到\n        appKey: '<AppKey>', #这个同上\n        notify:false, \n        verify:false, \n        avatar:'mp', \n        placeholder: '来了老弟 #markdown格式'\n    })\n    setTimeout(() => {\n        document.getElementsByClassName(\"info\")[0].style.display=\"none\";\n    }, 1000)\n</script>\n```\n特地说下加settimeout那步是为了隐藏自带的power信息🙃\n\n评论，然后就可以在leancloud 存储->结构化数据->comment看到评论信息\n\n\n敲黑板，下面是重点👇😁😁\n\n> 左边妹子的插件就搜下 [hexo live2d](https://www.baidu.com/s?ie=UTF-8&wd=hexo%20live2d) \n\n\n## 域名配置\n\n最后来了解一下上传到github后域名配置。\n\n在 hexo deploy 前\n\n配置 /source/CNAME, 写解析后的域名\n\n在买域名的域名管理处进行域名解析 \n\n记录类型CNAME => github账号.github.io\n\n就可以通过域名访问啦！\n\n## 多终端同步\n\n这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。\n\n如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。\n\n一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。\n\n```\n项目根目录下/\n# 引入git\ngit init\n\n# 设置远程地址\ngit remote add origin git地址\n\n# pull一下远程的提交，有冲突就解决下/文件备份/重命名\ngit pull origin master --allow-unrelated-histories\n\n# 添加.gitignore，加入\npublic/\n.vscode\nnode_modules\n\n# git三连\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n终端使用写博客前先clone / pull一下，\n\n写完deploy后 再 git三连就行\n\n## 拓展内容\n\n自建主题\n\n别人的主题要自定义的话还是改很多，有想法可以自行开发主题\n\n从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,  \n然后修改_config.yml的主题配置\n\n```\n主题下主要文件结构\n/layout # 主要布局，样式文件\n/source # 外部js css等\n_config.yml # 配置文件\n```\n数据主要靠模板的方式加载，其他还是和原生js差不多\n\n贴个不错的[教程](https://www.cnblogs.com/yyhh/p/11058985.html)\n\n## 最后一席话\n\ngithub有时会被墙，有时会访问慢，这个国内不一定稳定🤔\n\n体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，\n\n但胜在可以自定义花里胡哨的东西(装逼万岁)。\n\n为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。\n\n希望这个博客可以坚持久一些~","slug":"2019/article_1_又双叒叕建博客","published":1,"updated":"2021-01-27T04:46:28.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh734001p0770jet2a5lk","content":"<h2 id=\"前言\">前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2 id=\"工具准备\">工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2 id=\"动手搭建\">动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\" target=\"_blank\" rel=\"external\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"external\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用vscode写文章\">使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"external\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\" target=\"_blank\" rel=\"external\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2 id=\"介绍一些插件\">介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3 id=\"访问次数插件\">访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"评论插件\">评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"external\">valine</a> 和 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\" target=\"_blank\" rel=\"external\">hexo live2d</a></p>\n</blockquote>\n<h2 id=\"域名配置\">域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\" target=\"_blank\" rel=\"external\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2 id=\"多终端同步\">多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2 id=\"拓展内容\">拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\" target=\"_blank\" rel=\"external\">教程</a></p>\n<h2 id=\"最后一席话\">最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>第二次搭建博客了，第一次是用的自己的服务器搭建了wordpress博客，写了两年左右60+篇，在服务器废弃后也不再维护了。</p>\n<p>本次又心血来潮，使用node的hexo和github的gh-pages来搭建。</p>\n<p>开篇就以博客搭建过程为主要内容。</p>\n<h2>工具准备</h2>\n<blockquote>\n<p>git, node, github账号, vscode(非必备), 域名(非必备)</p>\n</blockquote>\n<p>这里需要自行搜索学习安装了</p>\n<h2>动手搭建</h2>\n<blockquote>\n<p>贴个官方地址<br>\n<a href=\"https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></p>\n</blockquote>\n<p>这里就不跟着官方教程走了，不过大同小异</p>\n<p>先到 <a href=\"https://hexo.io/themes/\">主题页</a> 找个喜欢的主题</p>\n<p>这里选了 <a href=\"https://github.com/huweihuang/hexo-theme-huweihuang\">A-Boy</a> 这个主题，🙄主要是他比较像我之前的博客风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载hexo命令行工具</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文件夹</span><br><span class=\"line\">mkdir blog</span><br><span class=\"line\"></span><br><span class=\"line\"># \b下载主题到该文件夹</span><br><span class=\"line\">git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖包</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>文件组织结构大致如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_config.xml</span><br><span class=\"line\">主要配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">/source</span><br><span class=\"line\">存放文章 ./_posts</span><br><span class=\"line\">图片 ./img</span><br><span class=\"line\"></span><br><span class=\"line\">/themes</span><br><span class=\"line\">主题的一些模板文件</span><br><span class=\"line\"></span><br><span class=\"line\">/scaffolds</span><br><span class=\"line\">一些脚手架，原生就在</span><br><span class=\"line\"></span><br><span class=\"line\">/node_modules</span><br><span class=\"line\">外部依赖的模块</span><br><span class=\"line\"></span><br><span class=\"line\">/db.json</span><br><span class=\"line\">存储服务器解析出来的临时文章数据</span><br><span class=\"line\"></span><br><span class=\"line\">/还有一些暂时用不到的文件</span><br></pre></td></tr></table></figure>\n<p>先到github建立自己的仓库，就长下面这样<br>\n<img src=\"/img/mypost/github.png\" alt=\"github\"></p>\n<p>然后对主题的_config.xml一些配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置刚才的github仓库, 一般使用gh-pages分支</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br><span class=\"line\">  branch: &lt;your-branch&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置路由，这里使用域名的绝对路径，相对路径会有个坑-&gt;图片写绝对路径时不会把root路径加上</span><br><span class=\"line\">url: http://ganjiacheng.cn/</span><br><span class=\"line\">root: /</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置主题，/theme/下的子目录文件夹</span><br><span class=\"line\">theme: huweihuang</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 侧边栏的一些配置</span><br><span class=\"line\">sidebar: true    </span><br><span class=\"line\">sidebar-about-description: &quot;&lt;your description&gt;&quot;</span><br><span class=\"line\">sidebar-avatar: img/&lt;your avatar path&gt;</span><br><span class=\"line\">widgets:  </span><br><span class=\"line\">- featured-tags</span><br><span class=\"line\">- short-about</span><br><span class=\"line\">- recent-posts</span><br><span class=\"line\">- friends-blog</span><br><span class=\"line\">- archive</span><br><span class=\"line\">- category</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># markdown编译器的一些配置</span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    html: true</span><br><span class=\"line\">    xhtmlOut: false</span><br><span class=\"line\">    breaks: true</span><br><span class=\"line\">    linkify: true</span><br><span class=\"line\">    typographer: true</span><br><span class=\"line\">    quotes: &apos;“”‘’&apos;</span><br></pre></td></tr></table></figure>\n<p>这里有配置背景图<br>\n推荐一个常用的<a href=\"https://bing.ioliu.cn/\">壁纸网站</a></p>\n<p>下面是一些命令行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除临时数据库</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译为html</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 开启server</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传到github，第一次要写账号密码，后面就不用了</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h2>使用vscode写文章</h2>\n<p>打开建立的项目文件夹</p>\n<p>在/source/_posts/下新建md文件为新文章</p>\n<p>由于文章都是markdown格式，用一般文本编辑器比较困难，故而选则vscode，因为它带markdown插件，<br>\n其他可选择的也有写文章的hexo插件 <a href=\"https://github.com/jaredly/hexo-admin\">hexo-admin</a></p>\n<p>command+shift+p 搜索markdown open preview to the side</p>\n<p>就可以在左边写右边实时查看效果了</p>\n<p>推荐一个自己记录最简markdown手册 <a href=\"https://github.com/webgjc/ApiTestToMd/blob/master/md/markdown.md\">markdown手册</a></p>\n<p>在markdown文件开头加上一些文章的必备信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;标题&quot;</span><br><span class=\"line\">date: 1999-01-01 00:00:00</span><br><span class=\"line\">subtitle: &quot;副标题&quot;</span><br><span class=\"line\">header-img: &quot;/img/图片.jpg&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后开始写文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此处省略一万字</span><br></pre></td></tr></table></figure>\n<h2>介绍一些插件</h2>\n<p>原生的博客不带插件，少了很多功能，比如统计访问次数，评论系统等。</p>\n<p>也有一些主题也内置了一些插件，直接配置即可。</p>\n<p>由于这些功能都得带后端存储，自己做个又麻烦，因此使用一些别人做的免费的。</p>\n<h3>访问次数插件</h3>\n<p>这里试用下 <a href=\"http://busuanzi.ibruce.info/\">不蒜子</a> 来做访问次数。</p>\n<p>编辑 /_config.yml 在最后加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<p>找到/themes/主题名/layout/_partial/footer.ejs</p>\n<p>在底部&lt;/footer&gt;标签前加上，就是网站次数统计，或者自己想加哪加哪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">            本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>下面这个是页面访问次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">    &lt;span&gt;</span><br><span class=\"line\">        Viewed &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; times</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3>评论插件</h3>\n<p>这里使用的是<a href=\"https://valine.js.org/\">valine</a> 和 <a href=\"https://leancloud.cn/\">leancloud</a></p>\n<p>valine是前端部分嵌入组件，leancloud来存储信息</p>\n<p>注册等步骤就不贴了,看<a href=\"https://valine.js.org/quickstart.html\">这里</a></p>\n<p>说下嵌入的部分，在/themes/主题名/post.ejs</p>\n<p>找个合适的标签下面加入，基本就和上面文章对齐就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&apos;//unpkg.com/valine/dist/Valine.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;h5&gt;COMMENT&lt;/h5&gt;</span><br><span class=\"line\">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    new Valine(&#123;</span><br><span class=\"line\">        el: &apos;#vcomments&apos;,</span><br><span class=\"line\">        appId: &apos;&lt;AppId&gt;&apos;, #这个要注册后拿到</span><br><span class=\"line\">        appKey: &apos;&lt;AppKey&gt;&apos;, #这个同上</span><br><span class=\"line\">        notify:false, </span><br><span class=\"line\">        verify:false, </span><br><span class=\"line\">        avatar:&apos;mp&apos;, </span><br><span class=\"line\">        placeholder: &apos;来了老弟 #markdown格式&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">        document.getElementsByClassName(&quot;info&quot;)[0].style.display=&quot;none&quot;;</span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>特地说下加settimeout那步是为了隐藏自带的power信息🙃</p>\n<p>评论，然后就可以在leancloud 存储-&gt;结构化数据-&gt;comment看到评论信息</p>\n<p>敲黑板，下面是重点👇😁😁</p>\n<blockquote>\n<p>左边妹子的插件就搜下 <a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=hexo%20live2d\">hexo live2d</a></p>\n</blockquote>\n<h2>域名配置</h2>\n<p>最后来了解一下上传到github后域名配置。</p>\n<p>在 hexo deploy 前</p>\n<p>配置 /source/CNAME, 写解析后的域名</p>\n<p>在买域名的域名管理处进行域名解析</p>\n<p>记录类型CNAME =&gt; <a href=\"http://xn--github-ud6jy198a.github.io\">github账号.github.io</a></p>\n<p>就可以通过域名访问啦！</p>\n<h2>多终端同步</h2>\n<p>这个也很常见，就是在多个地方写博客，想这边写完同步到各个客户端。</p>\n<p>如果是有自己服务器的，就装个hexo-admin的插件，开启hexo server后监听到公网端口，不放心的话入口加个认证，就可以在线编辑。</p>\n<p>一般的做法是使用刚才建的github仓库的master分支作为文章源码，gh-pages分支作为静态博客。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">项目根目录下/</span><br><span class=\"line\"># 引入git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置远程地址</span><br><span class=\"line\">git remote add origin git地址</span><br><span class=\"line\"></span><br><span class=\"line\"># pull一下远程的提交，有冲突就解决下/文件备份/重命名</span><br><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加.gitignore，加入</span><br><span class=\"line\">public/</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"># git三连</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>终端使用写博客前先clone / pull一下，</p>\n<p>写完deploy后 再 git三连就行</p>\n<h2>拓展内容</h2>\n<p>自建主题</p>\n<p>别人的主题要自定义的话还是改很多，有想法可以自行开发主题</p>\n<p>从上面基本也可以知道主题的就是在 /theme/下创建的文件夹,<br>\n然后修改_config.yml的主题配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主题下主要文件结构</span><br><span class=\"line\">/layout # 主要布局，样式文件</span><br><span class=\"line\">/source # 外部js css等</span><br><span class=\"line\">_config.yml # 配置文件</span><br></pre></td></tr></table></figure>\n<p>数据主要靠模板的方式加载，其他还是和原生js差不多</p>\n<p>贴个不错的<a href=\"https://www.cnblogs.com/yyhh/p/11058985.html\">教程</a></p>\n<h2>最后一席话</h2>\n<p>github有时会被墙，有时会访问慢，这个国内不一定稳定🤔</p>\n<p>体验来说相比于简书等来说，搭建过程还是需要一定基础，写起来也都markdown，</p>\n<p>但胜在可以自定义花里胡哨的东西(装逼万岁)。</p>\n<p>为了坚持写博客之前一直用的是先立标题文章，几星期过去有想法和方法了再去填充完成剩下的文章内容，这个一直都还不错。</p>\n<p>希望这个博客可以坚持久一些~</p>\n"},{"title":"聊聊深度优先搜索算法及应用","catalog":true,"date":"2018-03-31T07:45:20.000Z","_content":"\n之前看算法书对于深搜一直是一个坎，有点难以理解或者理解了一些但没法下手写，这回来重新探讨一下个人目前的理解及解决方案。文章从全排入手，到解决八皇后，和尚妖怪过河等问题。<!--more-->\n\n首先，看一个全排序，传入一个数组（其中有n个可不等长的数组），得到的结果是其中每个数组取一个数组成的新数组的集合，如下\n<pre>result=[0]*3\narr=[[1,2,3],[4,5],[7,8,9]]\nres=[]\n#算法部分，遍历其中每个数组，在result保存临时一个数组。\n#copy是因为append只是插入了一个类似指针，而result内容会变，因此要用copy换一个地址。\ndef dfs(arr, depth):\n    global res\n    for i in range(len(arr[depth])):\n        result[depth] = arr[depth][i]\n        if depth != len(arr) - 1:\n            dfs(arr, depth + 1)\n        else:\n            res.append(result.copy())\ndfs(arr,0)\nprint(res)\n#结果为\n[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [2, 4, 7], [2\n, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [3, 4, 7], [3, 4, 8], [3, 4\n, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9]]</pre>\n在来看个升级版，一个数组如[1,2,3,4,5]的全排，这里for中递归的思路则和上次基本不一样，用的是交换，遍历完所有可能的交换值，但因为只有一个数组，所以交换完保存数后还得在交换回来，也就是递归下面一行和上面一行的区别。\n<pre>COUNT=0  \nres=[]\n\n#for第一次是0和所有交换，递归后是1和所有的交换\n#但运行过程则会0和0换，之后跳到递归中1和1换，直到最后，得到第一情况，也就是没换，这时begin=end\n#然后回退一步，那时begin应该是end-1，所以最后两个换下，又得到一种情况。\n#就这样回退到最初的for，就可以遍历所有交换情况\ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\n\nN=4\nn=[i for i in range(N)]\nperm(n,0,len(n))\nprint(res)</pre>\n然后看几个应用，基本也是自己学了之后用上去！\n\n第一个，九宫格中文输入得到输入项的所有组合。用到上面第一个全排序，只需要把输入转换成已按按键的字母数组。如\n<pre>arr=[[a,b,c],[c,d,e],[g,h,i]]</pre>\n第二个，八皇后，也就是8*8棋盘上放8个皇后，每个皇后横竖左斜右斜都不能有其他皇后。总共有92中情况。这里的解法便是先得到长为8的数组的全排，在逐个检验，当然检验是有技巧的。\n<pre>#这里把数组如[1,2,3,4,5,6,7,8]下标作为棋盘x，值作为棋盘y\n#因为横竖都不在线上，所以求全排\n#然后检查的就是左斜右斜便可\n#全排，请看前面的讲解\nCOUNT=0  \ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\nres=[]\nN=8\nn=[i for i in range(N)]\nperm(n,0,len(n))\n\n#检验的是数组中有没有重复值\ndef check(l):\n    return len(set(l))==len(l)\n\nresult = []\n\n#左斜的位置x-y相同的会在一条线上，右斜的位置x+y相同的会在一条线上。\n#由此检验\nfor i in res:\n    s = [i[j]+j for j in range(N)]\n    c = [i[j]-j for j in range(N)]\n    if check(s) and check(c):\n        print(i)\n        result.append(i)\n#得到92个解\nprint(len(result))</pre>\n最后一个应用：和尚与妖怪过河问题。\n\n问题大致是河左岸有三个妖怪三个和尚，要全部过河到右岸，有一条能载两人的船，只要左岸或右岸妖怪数大于和尚数，妖怪就会把和尚吃掉。需得所有简单解法（中间不包括重复循环步骤）。\n\n关键点和上面的其实是差不多，只是比较难抽象出遍历的东西，一不小心就会死在中间的死循环。\n<pre>class River():\n    def __init__(self):\n        self.ship = 1 #1--左岸，-1--右岸\n        self.left = [3,3] #和尚，妖怪\n        self.right = [0,0] #和尚，妖怪\n        #状态改变只有这五种和取反后的五种\n        self.change = [ [-1, -1],\n                        [-2, 0],\n                        [0, -2],\n                        [-1, 0],\n                        [0, -1]]\n        #保存上一个状态，直接排除一样的来回\n        self.lastState = -1\n        #如果遍历是一棵树，保存的则根到某个枝条\n        self.lineHis = [[3, 3, 0, 0, 1]]\n    #改变状态\n    def move(self,n):\n        self.left = [self.left[i]+self.ship*self.change[n][i] for i in range(2)]\n        self.right = [self.right[i]-self.ship*self.change[n][i] for i in range(2)]\n        self.ship = -self.ship\n        self.lastState = n\n    #获取下一步可移动点，比如只有一个怪兽在左岸，就要排除两个妖怪过河的方案，这个剪枝很重要。\n    def getState(self):\n        states = []\n        if self.ship == 1:\n            state = self.left\n        else:\n            state = self.right\n        for i in range(len(self.change)):\n            if min(state[0]+self.change[i][0],state[1]+self.change[i][1])&gt;=0:\n                states.append(i)\n        return states\n    #主算法部分，断掉妖怪大于和尚的分支。\n    #在遍历中，最重要的一步就是在这条支线上，如果这一种状态之前出现过，就不要继续深入。\n    def dfs(self):\n        if self.left==[0,0] and self.right==[3,3]:\n            print(self.lineHis)\n            return \n        elif (self.left[1]&gt;self.left[0] and self.left[0]!=0) or (self.right[1]&gt;self.right[0] and self.right[0]!=0):\n            return\n        else:\n            states = self.getState()\n            for i in states:\n                if i != self.lastState:\n                    self.move(i)\n                    self.lineHis.append(self.left+self.right+[self.ship])\n                    if self.lineHis[-1] not in self.lineHis[0:-1]:\n                        self.dfs()\n                    self.move(i)\n                    self.lineHis.pop()\n        \nif __name__ == \"__main__\":\n    s = River()\n    s.dfs()\n    #可得4个最简解。</pre>\n总结：深度优先搜索主要部分是提炼出搜索的树，然后好坏在于剪枝。\n","source":"_posts/2018/article_11_聊聊深度优先搜索算法及应用.md","raw":"\n---\ntitle: 聊聊深度优先搜索算法及应用\ncatalog: true\ndate: 2018-3-31 15:45:20\n---\n\n之前看算法书对于深搜一直是一个坎，有点难以理解或者理解了一些但没法下手写，这回来重新探讨一下个人目前的理解及解决方案。文章从全排入手，到解决八皇后，和尚妖怪过河等问题。<!--more-->\n\n首先，看一个全排序，传入一个数组（其中有n个可不等长的数组），得到的结果是其中每个数组取一个数组成的新数组的集合，如下\n<pre>result=[0]*3\narr=[[1,2,3],[4,5],[7,8,9]]\nres=[]\n#算法部分，遍历其中每个数组，在result保存临时一个数组。\n#copy是因为append只是插入了一个类似指针，而result内容会变，因此要用copy换一个地址。\ndef dfs(arr, depth):\n    global res\n    for i in range(len(arr[depth])):\n        result[depth] = arr[depth][i]\n        if depth != len(arr) - 1:\n            dfs(arr, depth + 1)\n        else:\n            res.append(result.copy())\ndfs(arr,0)\nprint(res)\n#结果为\n[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [2, 4, 7], [2\n, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [3, 4, 7], [3, 4, 8], [3, 4\n, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9]]</pre>\n在来看个升级版，一个数组如[1,2,3,4,5]的全排，这里for中递归的思路则和上次基本不一样，用的是交换，遍历完所有可能的交换值，但因为只有一个数组，所以交换完保存数后还得在交换回来，也就是递归下面一行和上面一行的区别。\n<pre>COUNT=0  \nres=[]\n\n#for第一次是0和所有交换，递归后是1和所有的交换\n#但运行过程则会0和0换，之后跳到递归中1和1换，直到最后，得到第一情况，也就是没换，这时begin=end\n#然后回退一步，那时begin应该是end-1，所以最后两个换下，又得到一种情况。\n#就这样回退到最初的for，就可以遍历所有交换情况\ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\n\nN=4\nn=[i for i in range(N)]\nperm(n,0,len(n))\nprint(res)</pre>\n然后看几个应用，基本也是自己学了之后用上去！\n\n第一个，九宫格中文输入得到输入项的所有组合。用到上面第一个全排序，只需要把输入转换成已按按键的字母数组。如\n<pre>arr=[[a,b,c],[c,d,e],[g,h,i]]</pre>\n第二个，八皇后，也就是8*8棋盘上放8个皇后，每个皇后横竖左斜右斜都不能有其他皇后。总共有92中情况。这里的解法便是先得到长为8的数组的全排，在逐个检验，当然检验是有技巧的。\n<pre>#这里把数组如[1,2,3,4,5,6,7,8]下标作为棋盘x，值作为棋盘y\n#因为横竖都不在线上，所以求全排\n#然后检查的就是左斜右斜便可\n#全排，请看前面的讲解\nCOUNT=0  \ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\nres=[]\nN=8\nn=[i for i in range(N)]\nperm(n,0,len(n))\n\n#检验的是数组中有没有重复值\ndef check(l):\n    return len(set(l))==len(l)\n\nresult = []\n\n#左斜的位置x-y相同的会在一条线上，右斜的位置x+y相同的会在一条线上。\n#由此检验\nfor i in res:\n    s = [i[j]+j for j in range(N)]\n    c = [i[j]-j for j in range(N)]\n    if check(s) and check(c):\n        print(i)\n        result.append(i)\n#得到92个解\nprint(len(result))</pre>\n最后一个应用：和尚与妖怪过河问题。\n\n问题大致是河左岸有三个妖怪三个和尚，要全部过河到右岸，有一条能载两人的船，只要左岸或右岸妖怪数大于和尚数，妖怪就会把和尚吃掉。需得所有简单解法（中间不包括重复循环步骤）。\n\n关键点和上面的其实是差不多，只是比较难抽象出遍历的东西，一不小心就会死在中间的死循环。\n<pre>class River():\n    def __init__(self):\n        self.ship = 1 #1--左岸，-1--右岸\n        self.left = [3,3] #和尚，妖怪\n        self.right = [0,0] #和尚，妖怪\n        #状态改变只有这五种和取反后的五种\n        self.change = [ [-1, -1],\n                        [-2, 0],\n                        [0, -2],\n                        [-1, 0],\n                        [0, -1]]\n        #保存上一个状态，直接排除一样的来回\n        self.lastState = -1\n        #如果遍历是一棵树，保存的则根到某个枝条\n        self.lineHis = [[3, 3, 0, 0, 1]]\n    #改变状态\n    def move(self,n):\n        self.left = [self.left[i]+self.ship*self.change[n][i] for i in range(2)]\n        self.right = [self.right[i]-self.ship*self.change[n][i] for i in range(2)]\n        self.ship = -self.ship\n        self.lastState = n\n    #获取下一步可移动点，比如只有一个怪兽在左岸，就要排除两个妖怪过河的方案，这个剪枝很重要。\n    def getState(self):\n        states = []\n        if self.ship == 1:\n            state = self.left\n        else:\n            state = self.right\n        for i in range(len(self.change)):\n            if min(state[0]+self.change[i][0],state[1]+self.change[i][1])&gt;=0:\n                states.append(i)\n        return states\n    #主算法部分，断掉妖怪大于和尚的分支。\n    #在遍历中，最重要的一步就是在这条支线上，如果这一种状态之前出现过，就不要继续深入。\n    def dfs(self):\n        if self.left==[0,0] and self.right==[3,3]:\n            print(self.lineHis)\n            return \n        elif (self.left[1]&gt;self.left[0] and self.left[0]!=0) or (self.right[1]&gt;self.right[0] and self.right[0]!=0):\n            return\n        else:\n            states = self.getState()\n            for i in states:\n                if i != self.lastState:\n                    self.move(i)\n                    self.lineHis.append(self.left+self.right+[self.ship])\n                    if self.lineHis[-1] not in self.lineHis[0:-1]:\n                        self.dfs()\n                    self.move(i)\n                    self.lineHis.pop()\n        \nif __name__ == \"__main__\":\n    s = River()\n    s.dfs()\n    #可得4个最简解。</pre>\n总结：深度优先搜索主要部分是提炼出搜索的树，然后好坏在于剪枝。\n","slug":"2018/article_11_聊聊深度优先搜索算法及应用","published":1,"updated":"2021-01-27T04:46:28.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh735001q0770ty7a0sv9","content":"<p>之前看算法书对于深搜一直是一个坎，有点难以理解或者理解了一些但没法下手写，这回来重新探讨一下个人目前的理解及解决方案。文章从全排入手，到解决八皇后，和尚妖怪过河等问题。<a id=\"more\"></a></p>\n<p>首先，看一个全排序，传入一个数组（其中有n个可不等长的数组），得到的结果是其中每个数组取一个数组成的新数组的集合，如下</p>\n<pre>result=[0]*3\narr=[[1,2,3],[4,5],[7,8,9]]\nres=[]\n#算法部分，遍历其中每个数组，在result保存临时一个数组。\n#copy是因为append只是插入了一个类似指针，而result内容会变，因此要用copy换一个地址。\ndef dfs(arr, depth):\n    global res\n    for i in range(len(arr[depth])):\n        result[depth] = arr[depth][i]\n        if depth != len(arr) - 1:\n            dfs(arr, depth + 1)\n        else:\n            res.append(result.copy())\ndfs(arr,0)\nprint(res)\n#结果为\n[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [2, 4, 7], [2\n, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [3, 4, 7], [3, 4, 8], [3, 4\n, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9]]</pre>\n<p>在来看个升级版，一个数组如[1,2,3,4,5]的全排，这里for中递归的思路则和上次基本不一样，用的是交换，遍历完所有可能的交换值，但因为只有一个数组，所以交换完保存数后还得在交换回来，也就是递归下面一行和上面一行的区别。</p>\n<pre>COUNT=0  \nres=[]\n\n#for第一次是0和所有交换，递归后是1和所有的交换\n#但运行过程则会0和0换，之后跳到递归中1和1换，直到最后，得到第一情况，也就是没换，这时begin=end\n#然后回退一步，那时begin应该是end-1，所以最后两个换下，又得到一种情况。\n#就这样回退到最初的for，就可以遍历所有交换情况\ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\n\nN=4\nn=[i for i in range(N)]\nperm(n,0,len(n))\nprint(res)</pre>\n<p>然后看几个应用，基本也是自己学了之后用上去！</p>\n<p>第一个，九宫格中文输入得到输入项的所有组合。用到上面第一个全排序，只需要把输入转换成已按按键的字母数组。如</p>\n<pre>arr=[[a,b,c],[c,d,e],[g,h,i]]</pre>\n<p>第二个，八皇后，也就是8*8棋盘上放8个皇后，每个皇后横竖左斜右斜都不能有其他皇后。总共有92中情况。这里的解法便是先得到长为8的数组的全排，在逐个检验，当然检验是有技巧的。</p>\n<pre>#这里把数组如[1,2,3,4,5,6,7,8]下标作为棋盘x，值作为棋盘y\n#因为横竖都不在线上，所以求全排\n#然后检查的就是左斜右斜便可\n#全排，请看前面的讲解\nCOUNT=0  \ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\nres=[]\nN=8\nn=[i for i in range(N)]\nperm(n,0,len(n))\n\n#检验的是数组中有没有重复值\ndef check(l):\n    return len(set(l))==len(l)\n\nresult = []\n\n#左斜的位置x-y相同的会在一条线上，右斜的位置x+y相同的会在一条线上。\n#由此检验\nfor i in res:\n    s = [i[j]+j for j in range(N)]\n    c = [i[j]-j for j in range(N)]\n    if check(s) and check(c):\n        print(i)\n        result.append(i)\n#得到92个解\nprint(len(result))</pre>\n<p>最后一个应用：和尚与妖怪过河问题。</p>\n<p>问题大致是河左岸有三个妖怪三个和尚，要全部过河到右岸，有一条能载两人的船，只要左岸或右岸妖怪数大于和尚数，妖怪就会把和尚吃掉。需得所有简单解法（中间不包括重复循环步骤）。</p>\n<p>关键点和上面的其实是差不多，只是比较难抽象出遍历的东西，一不小心就会死在中间的死循环。</p>\n<pre>class River():\n    def __init__(self):\n        self.ship = 1 #1--左岸，-1--右岸\n        self.left = [3,3] #和尚，妖怪\n        self.right = [0,0] #和尚，妖怪\n        #状态改变只有这五种和取反后的五种\n        self.change = [ [-1, -1],\n                        [-2, 0],\n                        [0, -2],\n                        [-1, 0],\n                        [0, -1]]\n        #保存上一个状态，直接排除一样的来回\n        self.lastState = -1\n        #如果遍历是一棵树，保存的则根到某个枝条\n        self.lineHis = [[3, 3, 0, 0, 1]]\n    #改变状态\n    def move(self,n):\n        self.left = [self.left[i]+self.ship*self.change[n][i] for i in range(2)]\n        self.right = [self.right[i]-self.ship*self.change[n][i] for i in range(2)]\n        self.ship = -self.ship\n        self.lastState = n\n    #获取下一步可移动点，比如只有一个怪兽在左岸，就要排除两个妖怪过河的方案，这个剪枝很重要。\n    def getState(self):\n        states = []\n        if self.ship == 1:\n            state = self.left\n        else:\n            state = self.right\n        for i in range(len(self.change)):\n            if min(state[0]+self.change[i][0],state[1]+self.change[i][1])&gt;=0:\n                states.append(i)\n        return states\n    #主算法部分，断掉妖怪大于和尚的分支。\n    #在遍历中，最重要的一步就是在这条支线上，如果这一种状态之前出现过，就不要继续深入。\n    def dfs(self):\n        if self.left==[0,0] and self.right==[3,3]:\n            print(self.lineHis)\n            return \n        elif (self.left[1]&gt;self.left[0] and self.left[0]!=0) or (self.right[1]&gt;self.right[0] and self.right[0]!=0):\n            return\n        else:\n            states = self.getState()\n            for i in states:\n                if i != self.lastState:\n                    self.move(i)\n                    self.lineHis.append(self.left+self.right+[self.ship])\n                    if self.lineHis[-1] not in self.lineHis[0:-1]:\n                        self.dfs()\n                    self.move(i)\n                    self.lineHis.pop()\n        \nif __name__ == \"__main__\":\n    s = River()\n    s.dfs()\n    #可得4个最简解。</pre>\n<p>总结：深度优先搜索主要部分是提炼出搜索的树，然后好坏在于剪枝。</p>\n","excerpt":"<p>之前看算法书对于深搜一直是一个坎，有点难以理解或者理解了一些但没法下手写，这回来重新探讨一下个人目前的理解及解决方案。文章从全排入手，到解决八皇后，和尚妖怪过河等问题。","more":"</p>\n<p>首先，看一个全排序，传入一个数组（其中有n个可不等长的数组），得到的结果是其中每个数组取一个数组成的新数组的集合，如下</p>\n<pre>result=[0]*3\narr=[[1,2,3],[4,5],[7,8,9]]\nres=[]\n#算法部分，遍历其中每个数组，在result保存临时一个数组。\n#copy是因为append只是插入了一个类似指针，而result内容会变，因此要用copy换一个地址。\ndef dfs(arr, depth):\n    global res\n    for i in range(len(arr[depth])):\n        result[depth] = arr[depth][i]\n        if depth != len(arr) - 1:\n            dfs(arr, depth + 1)\n        else:\n            res.append(result.copy())\ndfs(arr,0)\nprint(res)\n#结果为\n[[1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 5, 7], [1, 5, 8], [1, 5, 9], [2, 4, 7], [2\n, 4, 8], [2, 4, 9], [2, 5, 7], [2, 5, 8], [2, 5, 9], [3, 4, 7], [3, 4, 8], [3, 4\n, 9], [3, 5, 7], [3, 5, 8], [3, 5, 9]]</pre>\n<p>在来看个升级版，一个数组如[1,2,3,4,5]的全排，这里for中递归的思路则和上次基本不一样，用的是交换，遍历完所有可能的交换值，但因为只有一个数组，所以交换完保存数后还得在交换回来，也就是递归下面一行和上面一行的区别。</p>\n<pre>COUNT=0  \nres=[]\n\n#for第一次是0和所有交换，递归后是1和所有的交换\n#但运行过程则会0和0换，之后跳到递归中1和1换，直到最后，得到第一情况，也就是没换，这时begin=end\n#然后回退一步，那时begin应该是end-1，所以最后两个换下，又得到一种情况。\n#就这样回退到最初的for，就可以遍历所有交换情况\ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\n\nN=4\nn=[i for i in range(N)]\nperm(n,0,len(n))\nprint(res)</pre>\n<p>然后看几个应用，基本也是自己学了之后用上去！</p>\n<p>第一个，九宫格中文输入得到输入项的所有组合。用到上面第一个全排序，只需要把输入转换成已按按键的字母数组。如</p>\n<pre>arr=[[a,b,c],[c,d,e],[g,h,i]]</pre>\n<p>第二个，八皇后，也就是8*8棋盘上放8个皇后，每个皇后横竖左斜右斜都不能有其他皇后。总共有92中情况。这里的解法便是先得到长为8的数组的全排，在逐个检验，当然检验是有技巧的。</p>\n<pre>#这里把数组如[1,2,3,4,5,6,7,8]下标作为棋盘x，值作为棋盘y\n#因为横竖都不在线上，所以求全排\n#然后检查的就是左斜右斜便可\n#全排，请看前面的讲解\nCOUNT=0  \ndef perm(n,begin,end):  \n    global COUNT,res\n    if begin&gt;=end:  \n        res.append(n)\n    else:  \n        i=begin  \n        for num in range(begin,end):  \n            n[num],n[i]=n[i],n[num] \n            perm(n.copy(),begin+1,end)\n            n[num],n[i]=n[i],n[num]\nres=[]\nN=8\nn=[i for i in range(N)]\nperm(n,0,len(n))\n\n#检验的是数组中有没有重复值\ndef check(l):\n    return len(set(l))==len(l)\n\nresult = []\n\n#左斜的位置x-y相同的会在一条线上，右斜的位置x+y相同的会在一条线上。\n#由此检验\nfor i in res:\n    s = [i[j]+j for j in range(N)]\n    c = [i[j]-j for j in range(N)]\n    if check(s) and check(c):\n        print(i)\n        result.append(i)\n#得到92个解\nprint(len(result))</pre>\n<p>最后一个应用：和尚与妖怪过河问题。</p>\n<p>问题大致是河左岸有三个妖怪三个和尚，要全部过河到右岸，有一条能载两人的船，只要左岸或右岸妖怪数大于和尚数，妖怪就会把和尚吃掉。需得所有简单解法（中间不包括重复循环步骤）。</p>\n<p>关键点和上面的其实是差不多，只是比较难抽象出遍历的东西，一不小心就会死在中间的死循环。</p>\n<pre>class River():\n    def __init__(self):\n        self.ship = 1 #1--左岸，-1--右岸\n        self.left = [3,3] #和尚，妖怪\n        self.right = [0,0] #和尚，妖怪\n        #状态改变只有这五种和取反后的五种\n        self.change = [ [-1, -1],\n                        [-2, 0],\n                        [0, -2],\n                        [-1, 0],\n                        [0, -1]]\n        #保存上一个状态，直接排除一样的来回\n        self.lastState = -1\n        #如果遍历是一棵树，保存的则根到某个枝条\n        self.lineHis = [[3, 3, 0, 0, 1]]\n    #改变状态\n    def move(self,n):\n        self.left = [self.left[i]+self.ship*self.change[n][i] for i in range(2)]\n        self.right = [self.right[i]-self.ship*self.change[n][i] for i in range(2)]\n        self.ship = -self.ship\n        self.lastState = n\n    #获取下一步可移动点，比如只有一个怪兽在左岸，就要排除两个妖怪过河的方案，这个剪枝很重要。\n    def getState(self):\n        states = []\n        if self.ship == 1:\n            state = self.left\n        else:\n            state = self.right\n        for i in range(len(self.change)):\n            if min(state[0]+self.change[i][0],state[1]+self.change[i][1])&gt;=0:\n                states.append(i)\n        return states\n    #主算法部分，断掉妖怪大于和尚的分支。\n    #在遍历中，最重要的一步就是在这条支线上，如果这一种状态之前出现过，就不要继续深入。\n    def dfs(self):\n        if self.left==[0,0] and self.right==[3,3]:\n            print(self.lineHis)\n            return \n        elif (self.left[1]&gt;self.left[0] and self.left[0]!=0) or (self.right[1]&gt;self.right[0] and self.right[0]!=0):\n            return\n        else:\n            states = self.getState()\n            for i in states:\n                if i != self.lastState:\n                    self.move(i)\n                    self.lineHis.append(self.left+self.right+[self.ship])\n                    if self.lineHis[-1] not in self.lineHis[0:-1]:\n                        self.dfs()\n                    self.move(i)\n                    self.lineHis.pop()\n        \nif __name__ == \"__main__\":\n    s = River()\n    s.dfs()\n    #可得4个最简解。</pre>\n<p>总结：深度优先搜索主要部分是提炼出搜索的树，然后好坏在于剪枝。</p>"},{"title":"爬虫--钢琴曲谱","catalog":true,"date":"2018-03-29T05:19:58.000Z","_content":"\n最近学钢琴，也经常会用到曲谱，但网上大多数曲谱不清晰，或者清晰的要vip。因此研究下某曲谱网站，进行爬取vip才能下载的曲谱并组合为pdf。<!--more-->\n\n可以在<a href=\"http://123.206.217.190:8888\">http://123.206.217.190:8888</a>试用效果\n\n下面的是python3.x代码，在window可直接本地运行，在linux做一些注释中的修改。\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\nimport sys\nimport io\nfrom PIL import Image\nfrom reportlab.lib.pagesizes import A4, landscape\nfrom reportlab.pdfgen import canvas\nimport time\nimport random\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\n\n#输入弹琴吧所需琴谱的网址\n#把网址变成手机访问的网址\nreq = requests.Session()\nurl=\"\"\n#url = \"http://www.tan8.com/yuepu-58546.html\"\nstate=True\n\nwhile state:\n    url = input(\"输入弹琴吧钢琴曲网址：\\n\")\n    if url.find(\"-m.html\")==-1:\n        url = url.replace(\".html\",\"-m.html\")\n        imgdir = \"tmpimgtan8/\"\n\n    if url.find(\"-m.html\")==-1:\n        print(\"请输入正确网址\")\n    else:\n        imgdir = \"tmpimgtan8/\"\n        state=False\n\nif not os.path.exists(imgdir):\n    os.mkdir(\"tmpimgtan8\")\n#爬下来解析出mp3，图片地址\n#保存MP3，图片\nresp = req.get(url)\n\nsoup=BeautifulSoup(resp.text,\"lxml\")\n\n#windows可以用这个中文名做文件名\ntitle = soup.find_all(\"title\")[0].text.replace(\" \",\"\").replace(\"/\",\"\")\n#linux用下面的随机数做文件名\n#title = str(int(random.random()*8999)+1000)\n\nmp3 = soup.find_all(\"source\")[0][\"src\"]\nmreq = req.get(mp3)\nprint(title)\nwith open(title+\".mp3\",\"wb\") as f:\n    f.write(mreq.content)\n    f.close()\n\npicul = soup.find_all(\"ul\",{\"class\":\"swiper-wrapper\"})[0]\n\nimages = picul.find_all(\"img\")\n\nfor i in images:\n    imgurl = req.get(i['src'])\n    with open(imgdir+\".\".join(i['src'].split(\".\")[-2:]),\"wb\") as f:\n        f.write(imgurl.content)\n        f.close()\n\nfiles=os.listdir(imgdir)\n\nif \"Thumbs.db\" in files:\n    files.remove(\"Thumbs.db\")\n#把图片连接成pdf\nf_pdf = title+\".pdf\"\n(w, h) = landscape(A4)\nc = canvas.Canvas(f_pdf, pagesize = (h,w))\n\nfor file in files:\n    c.drawImage(imgdir+file,0,0,h,w)\n    c.showPage()\n    os.remove(imgdir+file)\nc.save()\ntry:\n    os.rmdir(\"tmpimgtan8\")\nexcept:\n    print(\"请手动删除 tmpimgtan8\")</pre>\n同时，还顺手写了个web服务的代码。\n\n可以到<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a>的tan8/查看。\n","source":"_posts/2018/article_12_爬虫--钢琴曲谱.md","raw":"\n---\ntitle: 爬虫--钢琴曲谱\ncatalog: true\ndate: 2018-3-29 13:19:58\n---\n\n最近学钢琴，也经常会用到曲谱，但网上大多数曲谱不清晰，或者清晰的要vip。因此研究下某曲谱网站，进行爬取vip才能下载的曲谱并组合为pdf。<!--more-->\n\n可以在<a href=\"http://123.206.217.190:8888\">http://123.206.217.190:8888</a>试用效果\n\n下面的是python3.x代码，在window可直接本地运行，在linux做一些注释中的修改。\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\nimport sys\nimport io\nfrom PIL import Image\nfrom reportlab.lib.pagesizes import A4, landscape\nfrom reportlab.pdfgen import canvas\nimport time\nimport random\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\n\n#输入弹琴吧所需琴谱的网址\n#把网址变成手机访问的网址\nreq = requests.Session()\nurl=\"\"\n#url = \"http://www.tan8.com/yuepu-58546.html\"\nstate=True\n\nwhile state:\n    url = input(\"输入弹琴吧钢琴曲网址：\\n\")\n    if url.find(\"-m.html\")==-1:\n        url = url.replace(\".html\",\"-m.html\")\n        imgdir = \"tmpimgtan8/\"\n\n    if url.find(\"-m.html\")==-1:\n        print(\"请输入正确网址\")\n    else:\n        imgdir = \"tmpimgtan8/\"\n        state=False\n\nif not os.path.exists(imgdir):\n    os.mkdir(\"tmpimgtan8\")\n#爬下来解析出mp3，图片地址\n#保存MP3，图片\nresp = req.get(url)\n\nsoup=BeautifulSoup(resp.text,\"lxml\")\n\n#windows可以用这个中文名做文件名\ntitle = soup.find_all(\"title\")[0].text.replace(\" \",\"\").replace(\"/\",\"\")\n#linux用下面的随机数做文件名\n#title = str(int(random.random()*8999)+1000)\n\nmp3 = soup.find_all(\"source\")[0][\"src\"]\nmreq = req.get(mp3)\nprint(title)\nwith open(title+\".mp3\",\"wb\") as f:\n    f.write(mreq.content)\n    f.close()\n\npicul = soup.find_all(\"ul\",{\"class\":\"swiper-wrapper\"})[0]\n\nimages = picul.find_all(\"img\")\n\nfor i in images:\n    imgurl = req.get(i['src'])\n    with open(imgdir+\".\".join(i['src'].split(\".\")[-2:]),\"wb\") as f:\n        f.write(imgurl.content)\n        f.close()\n\nfiles=os.listdir(imgdir)\n\nif \"Thumbs.db\" in files:\n    files.remove(\"Thumbs.db\")\n#把图片连接成pdf\nf_pdf = title+\".pdf\"\n(w, h) = landscape(A4)\nc = canvas.Canvas(f_pdf, pagesize = (h,w))\n\nfor file in files:\n    c.drawImage(imgdir+file,0,0,h,w)\n    c.showPage()\n    os.remove(imgdir+file)\nc.save()\ntry:\n    os.rmdir(\"tmpimgtan8\")\nexcept:\n    print(\"请手动删除 tmpimgtan8\")</pre>\n同时，还顺手写了个web服务的代码。\n\n可以到<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a>的tan8/查看。\n","slug":"2018/article_12_爬虫--钢琴曲谱","published":1,"updated":"2021-01-27T04:46:28.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73h001s0770vfsdccgr","content":"<p>最近学钢琴，也经常会用到曲谱，但网上大多数曲谱不清晰，或者清晰的要vip。因此研究下某曲谱网站，进行爬取vip才能下载的曲谱并组合为pdf。<a id=\"more\"></a></p>\n<p>可以在<a href=\"http://123.206.217.190:8888\" target=\"_blank\" rel=\"external\">http://123.206.217.190:8888</a>试用效果</p>\n<p>下面的是python3.x代码，在window可直接本地运行，在linux做一些注释中的修改。</p>\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\nimport sys\nimport io\nfrom PIL import Image\nfrom reportlab.lib.pagesizes import A4, landscape\nfrom reportlab.pdfgen import canvas\nimport time\nimport random\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\n\n#输入弹琴吧所需琴谱的网址\n#把网址变成手机访问的网址\nreq = requests.Session()\nurl=\"\"\n#url = \"http://www.tan8.com/yuepu-58546.html\"\nstate=True\n\nwhile state:\n    url = input(\"输入弹琴吧钢琴曲网址：\\n\")\n    if url.find(\"-m.html\")==-1:\n        url = url.replace(\".html\",\"-m.html\")\n        imgdir = \"tmpimgtan8/\"\n\n    if url.find(\"-m.html\")==-1:\n        print(\"请输入正确网址\")\n    else:\n        imgdir = \"tmpimgtan8/\"\n        state=False\n\nif not os.path.exists(imgdir):\n    os.mkdir(\"tmpimgtan8\")\n#爬下来解析出mp3，图片地址\n#保存MP3，图片\nresp = req.get(url)\n\nsoup=BeautifulSoup(resp.text,\"lxml\")\n\n#windows可以用这个中文名做文件名\ntitle = soup.find_all(\"title\")[0].text.replace(\" \",\"\").replace(\"/\",\"\")\n#linux用下面的随机数做文件名\n#title = str(int(random.random()*8999)+1000)\n\nmp3 = soup.find_all(\"source\")[0][\"src\"]\nmreq = req.get(mp3)\nprint(title)\nwith open(title+\".mp3\",\"wb\") as f:\n    f.write(mreq.content)\n    f.close()\n\npicul = soup.find_all(\"ul\",{\"class\":\"swiper-wrapper\"})[0]\n\nimages = picul.find_all(\"img\")\n\nfor i in images:\n    imgurl = req.get(i['src'])\n    with open(imgdir+\".\".join(i['src'].split(\".\")[-2:]),\"wb\") as f:\n        f.write(imgurl.content)\n        f.close()\n\nfiles=os.listdir(imgdir)\n\nif \"Thumbs.db\" in files:\n    files.remove(\"Thumbs.db\")\n#把图片连接成pdf\nf_pdf = title+\".pdf\"\n(w, h) = landscape(A4)\nc = canvas.Canvas(f_pdf, pagesize = (h,w))\n\nfor file in files:\n    c.drawImage(imgdir+file,0,0,h,w)\n    c.showPage()\n    os.remove(imgdir+file)\nc.save()\ntry:\n    os.rmdir(\"tmpimgtan8\")\nexcept:\n    print(\"请手动删除 tmpimgtan8\")</pre>\n<p>同时，还顺手写了个web服务的代码。</p>\n<p>可以到<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/blog</a>的tan8/查看。</p>\n","excerpt":"<p>最近学钢琴，也经常会用到曲谱，但网上大多数曲谱不清晰，或者清晰的要vip。因此研究下某曲谱网站，进行爬取vip才能下载的曲谱并组合为pdf。","more":"</p>\n<p>可以在<a href=\"http://123.206.217.190:8888\">http://123.206.217.190:8888</a>试用效果</p>\n<p>下面的是python3.x代码，在window可直接本地运行，在linux做一些注释中的修改。</p>\n<pre>#coding:utf-8\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\nimport sys\nimport io\nfrom PIL import Image\nfrom reportlab.lib.pagesizes import A4, landscape\nfrom reportlab.pdfgen import canvas\nimport time\nimport random\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\n\n#输入弹琴吧所需琴谱的网址\n#把网址变成手机访问的网址\nreq = requests.Session()\nurl=\"\"\n#url = \"http://www.tan8.com/yuepu-58546.html\"\nstate=True\n\nwhile state:\n    url = input(\"输入弹琴吧钢琴曲网址：\\n\")\n    if url.find(\"-m.html\")==-1:\n        url = url.replace(\".html\",\"-m.html\")\n        imgdir = \"tmpimgtan8/\"\n\n    if url.find(\"-m.html\")==-1:\n        print(\"请输入正确网址\")\n    else:\n        imgdir = \"tmpimgtan8/\"\n        state=False\n\nif not os.path.exists(imgdir):\n    os.mkdir(\"tmpimgtan8\")\n#爬下来解析出mp3，图片地址\n#保存MP3，图片\nresp = req.get(url)\n\nsoup=BeautifulSoup(resp.text,\"lxml\")\n\n#windows可以用这个中文名做文件名\ntitle = soup.find_all(\"title\")[0].text.replace(\" \",\"\").replace(\"/\",\"\")\n#linux用下面的随机数做文件名\n#title = str(int(random.random()*8999)+1000)\n\nmp3 = soup.find_all(\"source\")[0][\"src\"]\nmreq = req.get(mp3)\nprint(title)\nwith open(title+\".mp3\",\"wb\") as f:\n    f.write(mreq.content)\n    f.close()\n\npicul = soup.find_all(\"ul\",{\"class\":\"swiper-wrapper\"})[0]\n\nimages = picul.find_all(\"img\")\n\nfor i in images:\n    imgurl = req.get(i['src'])\n    with open(imgdir+\".\".join(i['src'].split(\".\")[-2:]),\"wb\") as f:\n        f.write(imgurl.content)\n        f.close()\n\nfiles=os.listdir(imgdir)\n\nif \"Thumbs.db\" in files:\n    files.remove(\"Thumbs.db\")\n#把图片连接成pdf\nf_pdf = title+\".pdf\"\n(w, h) = landscape(A4)\nc = canvas.Canvas(f_pdf, pagesize = (h,w))\n\nfor file in files:\n    c.drawImage(imgdir+file,0,0,h,w)\n    c.showPage()\n    os.remove(imgdir+file)\nc.save()\ntry:\n    os.rmdir(\"tmpimgtan8\")\nexcept:\n    print(\"请手动删除 tmpimgtan8\")</pre>\n<p>同时，还顺手写了个web服务的代码。</p>\n<p>可以到<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a>的tan8/查看。</p>"},{"title":"沉迷深搜，来做个解数独的","catalog":true,"date":"2018-04-02T01:29:14.000Z","_content":"\n还记得以前高中默默盯着数独的能看半天，然后还一个个凑，这回来彻底解决一下这个问题。顺便理清一下深度优先搜索的设计流程。<!--more-->\n\n首先数独规则自行了解，这里做最基础的9宫格数独。\n\n拿到数独题，分一部分已知点和一部分未知点，未知点的状态是有限的，每个点都不能与横竖加九宫格内的数重复，因此可以根据这个遍历所有状态。\n<pre>深度优先搜索设计\nfor 上一个点的可用状态：\n    尝试下点\n    进入下一个点（递归）\n    还原下点(回溯)</pre>\n<pre>剪枝过程\n一大部分都在获取可用状态中去掉了（上一步下错的话，总有下一步会出现无可用状态）\n然后还要限制的是到最终点停止</pre>\n<pre>判断成功\n只要数独状态中全部下满了，就是成功了</pre>\n<pre>class ShuDu():\n    #初始化数独长度，数独空点位置\n    def __init__(self,state):\n        self.STATE = state\n        self.N = len(self.STATE[0])\n        self.ZERO = [[i,j] for i in range(self.N) for j in range(self.N) if self.STATE[i][j] == 0]\n        self.hasAnswer = 0\n    #获取空点的可用状态\n    def get_state(self,n):\n        tmp_state = []\n        for i in range(self.N):\n            tmp_state.append(self.STATE[self.ZERO[n][0]][i])\n            tmp_state.append(self.STATE[i][self.ZERO[n][1]])\n        tmp_ny = int(self.ZERO[n][0] / 3)\n        tmp_nx = int(self.ZERO[n][1] / 3)\n        for i in range(tmp_ny * 3, tmp_ny * 3 + 3):\n            for j in range(tmp_nx * 3, tmp_nx * 3 + 3):\n                tmp_state.append(self.STATE[i][j])\n        '''\n        if self.ZERO[n][0] == self.ZERO[n][1]:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][i])\n        if self.ZERO[n][0] + self.ZERO[n][1] == 8:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][self.N-1-i])\n        '''\n        return [i for i in range(1,self.N+1) if i not in list(set(tmp_state))]\n    #深度优先搜索部分\n    def dfs(self,k=0):\n        if \"0\" not in str(self.STATE):\n            self.hasAnswer = 1\n            for i in range(self.N):\n                print(self.STATE[i])\n        if k &gt;= len(self.ZERO) or self.hasAnswer == 1:\n            return\n        for i in self.get_state(k):\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = i\n            self.dfs(k+1)\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = 0\n\nif __name__ == \"__main__\":\n    #据说是最难数独，0代表空的点\n    state = [[8,0,0,0,0,0,0,0,0],\n             [0,0,3,6,0,0,0,0,0],\n             [0,7,0,0,9,0,2,0,0],\n             [0,5,0,0,0,7,0,0,0],\n             [0,0,0,0,4,5,7,0,0],\n             [0,0,0,1,0,0,0,3,0],\n             [0,0,1,0,0,0,0,6,8],\n             [0,0,8,5,0,0,0,1,0],\n             [0,9,0,0,0,0,4,0,0]]\n    s = ShuDu(state)\n    #秒秒钟解出来\n    s.dfs()</pre>\n<pre>结果为：\n[8, 1, 2, 7, 5, 3, 6, 4, 9]\n[9, 4, 3, 6, 8, 2, 1, 7, 5]\n[6, 7, 5, 4, 9, 1, 2, 8, 3]\n[1, 5, 4, 2, 3, 7, 8, 9, 6]\n[3, 6, 9, 8, 4, 5, 7, 2, 1]\n[2, 8, 7, 1, 6, 9, 5, 3, 4]\n[5, 2, 1, 9, 7, 4, 3, 6, 8]\n[4, 3, 8, 5, 2, 6, 9, 1, 7]\n[7, 9, 6, 3, 1, 8, 4, 5, 2]</pre>\n","source":"_posts/2018/article_13_沉迷深搜，来做个解数独的.md","raw":"\n---\ntitle: 沉迷深搜，来做个解数独的\ncatalog: true\ndate: 2018-4-2 09:29:14\n---\n\n还记得以前高中默默盯着数独的能看半天，然后还一个个凑，这回来彻底解决一下这个问题。顺便理清一下深度优先搜索的设计流程。<!--more-->\n\n首先数独规则自行了解，这里做最基础的9宫格数独。\n\n拿到数独题，分一部分已知点和一部分未知点，未知点的状态是有限的，每个点都不能与横竖加九宫格内的数重复，因此可以根据这个遍历所有状态。\n<pre>深度优先搜索设计\nfor 上一个点的可用状态：\n    尝试下点\n    进入下一个点（递归）\n    还原下点(回溯)</pre>\n<pre>剪枝过程\n一大部分都在获取可用状态中去掉了（上一步下错的话，总有下一步会出现无可用状态）\n然后还要限制的是到最终点停止</pre>\n<pre>判断成功\n只要数独状态中全部下满了，就是成功了</pre>\n<pre>class ShuDu():\n    #初始化数独长度，数独空点位置\n    def __init__(self,state):\n        self.STATE = state\n        self.N = len(self.STATE[0])\n        self.ZERO = [[i,j] for i in range(self.N) for j in range(self.N) if self.STATE[i][j] == 0]\n        self.hasAnswer = 0\n    #获取空点的可用状态\n    def get_state(self,n):\n        tmp_state = []\n        for i in range(self.N):\n            tmp_state.append(self.STATE[self.ZERO[n][0]][i])\n            tmp_state.append(self.STATE[i][self.ZERO[n][1]])\n        tmp_ny = int(self.ZERO[n][0] / 3)\n        tmp_nx = int(self.ZERO[n][1] / 3)\n        for i in range(tmp_ny * 3, tmp_ny * 3 + 3):\n            for j in range(tmp_nx * 3, tmp_nx * 3 + 3):\n                tmp_state.append(self.STATE[i][j])\n        '''\n        if self.ZERO[n][0] == self.ZERO[n][1]:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][i])\n        if self.ZERO[n][0] + self.ZERO[n][1] == 8:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][self.N-1-i])\n        '''\n        return [i for i in range(1,self.N+1) if i not in list(set(tmp_state))]\n    #深度优先搜索部分\n    def dfs(self,k=0):\n        if \"0\" not in str(self.STATE):\n            self.hasAnswer = 1\n            for i in range(self.N):\n                print(self.STATE[i])\n        if k &gt;= len(self.ZERO) or self.hasAnswer == 1:\n            return\n        for i in self.get_state(k):\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = i\n            self.dfs(k+1)\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = 0\n\nif __name__ == \"__main__\":\n    #据说是最难数独，0代表空的点\n    state = [[8,0,0,0,0,0,0,0,0],\n             [0,0,3,6,0,0,0,0,0],\n             [0,7,0,0,9,0,2,0,0],\n             [0,5,0,0,0,7,0,0,0],\n             [0,0,0,0,4,5,7,0,0],\n             [0,0,0,1,0,0,0,3,0],\n             [0,0,1,0,0,0,0,6,8],\n             [0,0,8,5,0,0,0,1,0],\n             [0,9,0,0,0,0,4,0,0]]\n    s = ShuDu(state)\n    #秒秒钟解出来\n    s.dfs()</pre>\n<pre>结果为：\n[8, 1, 2, 7, 5, 3, 6, 4, 9]\n[9, 4, 3, 6, 8, 2, 1, 7, 5]\n[6, 7, 5, 4, 9, 1, 2, 8, 3]\n[1, 5, 4, 2, 3, 7, 8, 9, 6]\n[3, 6, 9, 8, 4, 5, 7, 2, 1]\n[2, 8, 7, 1, 6, 9, 5, 3, 4]\n[5, 2, 1, 9, 7, 4, 3, 6, 8]\n[4, 3, 8, 5, 2, 6, 9, 1, 7]\n[7, 9, 6, 3, 1, 8, 4, 5, 2]</pre>\n","slug":"2018/article_13_沉迷深搜，来做个解数独的","published":1,"updated":"2021-01-27T04:46:28.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73j001t07701xo9tx7z","content":"<p>还记得以前高中默默盯着数独的能看半天，然后还一个个凑，这回来彻底解决一下这个问题。顺便理清一下深度优先搜索的设计流程。<a id=\"more\"></a></p>\n<p>首先数独规则自行了解，这里做最基础的9宫格数独。</p>\n<p>拿到数独题，分一部分已知点和一部分未知点，未知点的状态是有限的，每个点都不能与横竖加九宫格内的数重复，因此可以根据这个遍历所有状态。</p>\n<pre>深度优先搜索设计\nfor 上一个点的可用状态：\n    尝试下点\n    进入下一个点（递归）\n    还原下点(回溯)</pre>\n<pre>剪枝过程\n一大部分都在获取可用状态中去掉了（上一步下错的话，总有下一步会出现无可用状态）\n然后还要限制的是到最终点停止</pre>\n<pre>判断成功\n只要数独状态中全部下满了，就是成功了</pre>\n<pre>class ShuDu():\n    #初始化数独长度，数独空点位置\n    def __init__(self,state):\n        self.STATE = state\n        self.N = len(self.STATE[0])\n        self.ZERO = [[i,j] for i in range(self.N) for j in range(self.N) if self.STATE[i][j] == 0]\n        self.hasAnswer = 0\n    #获取空点的可用状态\n    def get_state(self,n):\n        tmp_state = []\n        for i in range(self.N):\n            tmp_state.append(self.STATE[self.ZERO[n][0]][i])\n            tmp_state.append(self.STATE[i][self.ZERO[n][1]])\n        tmp_ny = int(self.ZERO[n][0] / 3)\n        tmp_nx = int(self.ZERO[n][1] / 3)\n        for i in range(tmp_ny * 3, tmp_ny * 3 + 3):\n            for j in range(tmp_nx * 3, tmp_nx * 3 + 3):\n                tmp_state.append(self.STATE[i][j])\n        '''\n        if self.ZERO[n][0] == self.ZERO[n][1]:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][i])\n        if self.ZERO[n][0] + self.ZERO[n][1] == 8:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][self.N-1-i])\n        '''\n        return [i for i in range(1,self.N+1) if i not in list(set(tmp_state))]\n    #深度优先搜索部分\n    def dfs(self,k=0):\n        if \"0\" not in str(self.STATE):\n            self.hasAnswer = 1\n            for i in range(self.N):\n                print(self.STATE[i])\n        if k &gt;= len(self.ZERO) or self.hasAnswer == 1:\n            return\n        for i in self.get_state(k):\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = i\n            self.dfs(k+1)\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = 0\n\nif __name__ == \"__main__\":\n    #据说是最难数独，0代表空的点\n    state = [[8,0,0,0,0,0,0,0,0],\n             [0,0,3,6,0,0,0,0,0],\n             [0,7,0,0,9,0,2,0,0],\n             [0,5,0,0,0,7,0,0,0],\n             [0,0,0,0,4,5,7,0,0],\n             [0,0,0,1,0,0,0,3,0],\n             [0,0,1,0,0,0,0,6,8],\n             [0,0,8,5,0,0,0,1,0],\n             [0,9,0,0,0,0,4,0,0]]\n    s = ShuDu(state)\n    #秒秒钟解出来\n    s.dfs()</pre>\n<pre>结果为：\n[8, 1, 2, 7, 5, 3, 6, 4, 9]\n[9, 4, 3, 6, 8, 2, 1, 7, 5]\n[6, 7, 5, 4, 9, 1, 2, 8, 3]\n[1, 5, 4, 2, 3, 7, 8, 9, 6]\n[3, 6, 9, 8, 4, 5, 7, 2, 1]\n[2, 8, 7, 1, 6, 9, 5, 3, 4]\n[5, 2, 1, 9, 7, 4, 3, 6, 8]\n[4, 3, 8, 5, 2, 6, 9, 1, 7]\n[7, 9, 6, 3, 1, 8, 4, 5, 2]</pre>\n","excerpt":"<p>还记得以前高中默默盯着数独的能看半天，然后还一个个凑，这回来彻底解决一下这个问题。顺便理清一下深度优先搜索的设计流程。","more":"</p>\n<p>首先数独规则自行了解，这里做最基础的9宫格数独。</p>\n<p>拿到数独题，分一部分已知点和一部分未知点，未知点的状态是有限的，每个点都不能与横竖加九宫格内的数重复，因此可以根据这个遍历所有状态。</p>\n<pre>深度优先搜索设计\nfor 上一个点的可用状态：\n    尝试下点\n    进入下一个点（递归）\n    还原下点(回溯)</pre>\n<pre>剪枝过程\n一大部分都在获取可用状态中去掉了（上一步下错的话，总有下一步会出现无可用状态）\n然后还要限制的是到最终点停止</pre>\n<pre>判断成功\n只要数独状态中全部下满了，就是成功了</pre>\n<pre>class ShuDu():\n    #初始化数独长度，数独空点位置\n    def __init__(self,state):\n        self.STATE = state\n        self.N = len(self.STATE[0])\n        self.ZERO = [[i,j] for i in range(self.N) for j in range(self.N) if self.STATE[i][j] == 0]\n        self.hasAnswer = 0\n    #获取空点的可用状态\n    def get_state(self,n):\n        tmp_state = []\n        for i in range(self.N):\n            tmp_state.append(self.STATE[self.ZERO[n][0]][i])\n            tmp_state.append(self.STATE[i][self.ZERO[n][1]])\n        tmp_ny = int(self.ZERO[n][0] / 3)\n        tmp_nx = int(self.ZERO[n][1] / 3)\n        for i in range(tmp_ny * 3, tmp_ny * 3 + 3):\n            for j in range(tmp_nx * 3, tmp_nx * 3 + 3):\n                tmp_state.append(self.STATE[i][j])\n        '''\n        if self.ZERO[n][0] == self.ZERO[n][1]:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][i])\n        if self.ZERO[n][0] + self.ZERO[n][1] == 8:\n            for i in range(self.N):\n                tmp_state.append(self.STATE[i][self.N-1-i])\n        '''\n        return [i for i in range(1,self.N+1) if i not in list(set(tmp_state))]\n    #深度优先搜索部分\n    def dfs(self,k=0):\n        if \"0\" not in str(self.STATE):\n            self.hasAnswer = 1\n            for i in range(self.N):\n                print(self.STATE[i])\n        if k &gt;= len(self.ZERO) or self.hasAnswer == 1:\n            return\n        for i in self.get_state(k):\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = i\n            self.dfs(k+1)\n            self.STATE[self.ZERO[k][0]][self.ZERO[k][1]] = 0\n\nif __name__ == \"__main__\":\n    #据说是最难数独，0代表空的点\n    state = [[8,0,0,0,0,0,0,0,0],\n             [0,0,3,6,0,0,0,0,0],\n             [0,7,0,0,9,0,2,0,0],\n             [0,5,0,0,0,7,0,0,0],\n             [0,0,0,0,4,5,7,0,0],\n             [0,0,0,1,0,0,0,3,0],\n             [0,0,1,0,0,0,0,6,8],\n             [0,0,8,5,0,0,0,1,0],\n             [0,9,0,0,0,0,4,0,0]]\n    s = ShuDu(state)\n    #秒秒钟解出来\n    s.dfs()</pre>\n<pre>结果为：\n[8, 1, 2, 7, 5, 3, 6, 4, 9]\n[9, 4, 3, 6, 8, 2, 1, 7, 5]\n[6, 7, 5, 4, 9, 1, 2, 8, 3]\n[1, 5, 4, 2, 3, 7, 8, 9, 6]\n[3, 6, 9, 8, 4, 5, 7, 2, 1]\n[2, 8, 7, 1, 6, 9, 5, 3, 4]\n[5, 2, 1, 9, 7, 4, 3, 6, 8]\n[4, 3, 8, 5, 2, 6, 9, 1, 7]\n[7, 9, 6, 3, 1, 8, 4, 5, 2]</pre>"},{"title":"花 与 字 （持续更新）","catalog":true,"date":"2018-06-04T08:29:50.000Z","_content":"\n如有雷同，纯属巧合。\n\n<!--more-->\n<ul>\n \t<li>封闭的修炼 与 随性的创作</li>\n</ul>\n常常想着要提升自己，又由很多闭门修炼的别人家的故事的影响，也想尝试一把。\n\n常常会憋出病来，或许就是前者的一般结局，主要由于不太规律的饮食习惯和作息，一个人常常就会如此。\n\n随性创作则是在日常生活的基础上有空便随性的想一些事情，有时候便会有特别的灵感。然后在对此进行特别的记录与操作。\n\n本人较为喜欢走走路然后想着事情，或许就会得到最佳的解决方案。\n<ul>\n \t<li>所谓的原则 与 我可以将就</li>\n</ul>\n主要还是本人租房时的一些所遇，如果你不准确的定一个上线和下线，你将难以租到想要的房子，因为总会有更好看的价格贵些，更便宜的设施差些，而那些推荐你的人总会推荐更贵的，一次次下压你的底线。\n\n如果这时候你讲一句 我可以将就，那相当于你的底线进一步得到了下降，他还可以推荐给你更好一些的，价格也就贵一丢丢。然后你又要考虑将就不将就呢。\n\n而定下原则即对于各种指标定好上下限，无论怎么诱惑你也不能超过这个原则，则你马上就能找到与原则相应的目标。\n<ul>\n \t<li>有车 与 没车</li>\n</ul>\n看到一个说法：有说有车没车是完全不一样的人生，而豪车和二手车对人生来说差不了多少。暂时接纳这个观点，虽然还没到买车的地步。公共交通出行对于我一个人来说是没什么，但身边总不止我一个人，还有我家人，甚至未来的女友孩子。我想在路上有一个独立的小空间供聊聊天，出门再也不用看天气，说旅行就旅行等都是车带来的享受。暂定个小目标买车！\n<ul>\n \t<li>规划的是 与 非</li>\n</ul>\n规划真是个奇妙的东西，之前我还一直觉得规划好的事情做起来比较顺手，可以去除自身的焦虑，如每天要干什么（如今天规划明天，上午的我有课，下午弹会琴，晚上看直播，随机写代码）。\n\n没想到心内的焦虑也有一部分是规划产生的。就比如我大学的6月份，找着实习的机会，但只能暑假才开始入职，这个本是对暑假以及日后的一种规划，没想到很快找着了，但想着一个月后一定会去那里工作反而产生一种既想去又想去后会发生的事情的焦虑，所以这个我觉得在我入职前都会伴随着这种心绪，影响肯定是坏的，至少在一个月里坏了我不少心情与增加了不少压力。\n\n猜测可能日常的你可调的规划是好的（如你要看一本书，你可以规划这周看完，但你看不完也没人管），带压力的强制的规划是自己给自己找麻烦（如你想着去考个英语46级，考试临近你的焦虑自然便产生了，而且是递增的）。或许：船到桥头自然直才是最好的。\n","source":"_posts/2018/article_16_花 与 字 （持续更新）.md","raw":"\n---\ntitle: 花 与 字 （持续更新）\ncatalog: true\ndate: 2018-6-4 16:29:50\n---\n\n如有雷同，纯属巧合。\n\n<!--more-->\n<ul>\n \t<li>封闭的修炼 与 随性的创作</li>\n</ul>\n常常想着要提升自己，又由很多闭门修炼的别人家的故事的影响，也想尝试一把。\n\n常常会憋出病来，或许就是前者的一般结局，主要由于不太规律的饮食习惯和作息，一个人常常就会如此。\n\n随性创作则是在日常生活的基础上有空便随性的想一些事情，有时候便会有特别的灵感。然后在对此进行特别的记录与操作。\n\n本人较为喜欢走走路然后想着事情，或许就会得到最佳的解决方案。\n<ul>\n \t<li>所谓的原则 与 我可以将就</li>\n</ul>\n主要还是本人租房时的一些所遇，如果你不准确的定一个上线和下线，你将难以租到想要的房子，因为总会有更好看的价格贵些，更便宜的设施差些，而那些推荐你的人总会推荐更贵的，一次次下压你的底线。\n\n如果这时候你讲一句 我可以将就，那相当于你的底线进一步得到了下降，他还可以推荐给你更好一些的，价格也就贵一丢丢。然后你又要考虑将就不将就呢。\n\n而定下原则即对于各种指标定好上下限，无论怎么诱惑你也不能超过这个原则，则你马上就能找到与原则相应的目标。\n<ul>\n \t<li>有车 与 没车</li>\n</ul>\n看到一个说法：有说有车没车是完全不一样的人生，而豪车和二手车对人生来说差不了多少。暂时接纳这个观点，虽然还没到买车的地步。公共交通出行对于我一个人来说是没什么，但身边总不止我一个人，还有我家人，甚至未来的女友孩子。我想在路上有一个独立的小空间供聊聊天，出门再也不用看天气，说旅行就旅行等都是车带来的享受。暂定个小目标买车！\n<ul>\n \t<li>规划的是 与 非</li>\n</ul>\n规划真是个奇妙的东西，之前我还一直觉得规划好的事情做起来比较顺手，可以去除自身的焦虑，如每天要干什么（如今天规划明天，上午的我有课，下午弹会琴，晚上看直播，随机写代码）。\n\n没想到心内的焦虑也有一部分是规划产生的。就比如我大学的6月份，找着实习的机会，但只能暑假才开始入职，这个本是对暑假以及日后的一种规划，没想到很快找着了，但想着一个月后一定会去那里工作反而产生一种既想去又想去后会发生的事情的焦虑，所以这个我觉得在我入职前都会伴随着这种心绪，影响肯定是坏的，至少在一个月里坏了我不少心情与增加了不少压力。\n\n猜测可能日常的你可调的规划是好的（如你要看一本书，你可以规划这周看完，但你看不完也没人管），带压力的强制的规划是自己给自己找麻烦（如你想着去考个英语46级，考试临近你的焦虑自然便产生了，而且是递增的）。或许：船到桥头自然直才是最好的。\n","slug":"2018/article_16_花 与 字 （持续更新）","published":1,"updated":"2021-01-27T04:46:28.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73k001u0770g4vnj7ek","content":"<p>如有雷同，纯属巧合。</p>\n<a id=\"more\"></a>\n<ul>\n \t<li>封闭的修炼 与 随性的创作</li>\n</ul>\n常常想着要提升自己，又由很多闭门修炼的别人家的故事的影响，也想尝试一把。\n<p>常常会憋出病来，或许就是前者的一般结局，主要由于不太规律的饮食习惯和作息，一个人常常就会如此。</p>\n<p>随性创作则是在日常生活的基础上有空便随性的想一些事情，有时候便会有特别的灵感。然后在对此进行特别的记录与操作。</p>\n<p>本人较为喜欢走走路然后想着事情，或许就会得到最佳的解决方案。</p>\n<ul>\n \t<li>所谓的原则 与 我可以将就</li>\n</ul>\n主要还是本人租房时的一些所遇，如果你不准确的定一个上线和下线，你将难以租到想要的房子，因为总会有更好看的价格贵些，更便宜的设施差些，而那些推荐你的人总会推荐更贵的，一次次下压你的底线。\n<p>如果这时候你讲一句 我可以将就，那相当于你的底线进一步得到了下降，他还可以推荐给你更好一些的，价格也就贵一丢丢。然后你又要考虑将就不将就呢。</p>\n<p>而定下原则即对于各种指标定好上下限，无论怎么诱惑你也不能超过这个原则，则你马上就能找到与原则相应的目标。</p>\n<ul>\n \t<li>有车 与 没车</li>\n</ul>\n看到一个说法：有说有车没车是完全不一样的人生，而豪车和二手车对人生来说差不了多少。暂时接纳这个观点，虽然还没到买车的地步。公共交通出行对于我一个人来说是没什么，但身边总不止我一个人，还有我家人，甚至未来的女友孩子。我想在路上有一个独立的小空间供聊聊天，出门再也不用看天气，说旅行就旅行等都是车带来的享受。暂定个小目标买车！\n<ul>\n \t<li>规划的是 与 非</li>\n</ul>\n规划真是个奇妙的东西，之前我还一直觉得规划好的事情做起来比较顺手，可以去除自身的焦虑，如每天要干什么（如今天规划明天，上午的我有课，下午弹会琴，晚上看直播，随机写代码）。\n<p>没想到心内的焦虑也有一部分是规划产生的。就比如我大学的6月份，找着实习的机会，但只能暑假才开始入职，这个本是对暑假以及日后的一种规划，没想到很快找着了，但想着一个月后一定会去那里工作反而产生一种既想去又想去后会发生的事情的焦虑，所以这个我觉得在我入职前都会伴随着这种心绪，影响肯定是坏的，至少在一个月里坏了我不少心情与增加了不少压力。</p>\n<p>猜测可能日常的你可调的规划是好的（如你要看一本书，你可以规划这周看完，但你看不完也没人管），带压力的强制的规划是自己给自己找麻烦（如你想着去考个英语46级，考试临近你的焦虑自然便产生了，而且是递增的）。或许：船到桥头自然直才是最好的。</p>\n","excerpt":"<p>如有雷同，纯属巧合。</p>","more":"<ul>\n \t<li>封闭的修炼 与 随性的创作</li>\n</ul>\n常常想着要提升自己，又由很多闭门修炼的别人家的故事的影响，也想尝试一把。\n<p>常常会憋出病来，或许就是前者的一般结局，主要由于不太规律的饮食习惯和作息，一个人常常就会如此。</p>\n<p>随性创作则是在日常生活的基础上有空便随性的想一些事情，有时候便会有特别的灵感。然后在对此进行特别的记录与操作。</p>\n<p>本人较为喜欢走走路然后想着事情，或许就会得到最佳的解决方案。</p>\n<ul>\n \t<li>所谓的原则 与 我可以将就</li>\n</ul>\n主要还是本人租房时的一些所遇，如果你不准确的定一个上线和下线，你将难以租到想要的房子，因为总会有更好看的价格贵些，更便宜的设施差些，而那些推荐你的人总会推荐更贵的，一次次下压你的底线。\n<p>如果这时候你讲一句 我可以将就，那相当于你的底线进一步得到了下降，他还可以推荐给你更好一些的，价格也就贵一丢丢。然后你又要考虑将就不将就呢。</p>\n<p>而定下原则即对于各种指标定好上下限，无论怎么诱惑你也不能超过这个原则，则你马上就能找到与原则相应的目标。</p>\n<ul>\n \t<li>有车 与 没车</li>\n</ul>\n看到一个说法：有说有车没车是完全不一样的人生，而豪车和二手车对人生来说差不了多少。暂时接纳这个观点，虽然还没到买车的地步。公共交通出行对于我一个人来说是没什么，但身边总不止我一个人，还有我家人，甚至未来的女友孩子。我想在路上有一个独立的小空间供聊聊天，出门再也不用看天气，说旅行就旅行等都是车带来的享受。暂定个小目标买车！\n<ul>\n \t<li>规划的是 与 非</li>\n</ul>\n规划真是个奇妙的东西，之前我还一直觉得规划好的事情做起来比较顺手，可以去除自身的焦虑，如每天要干什么（如今天规划明天，上午的我有课，下午弹会琴，晚上看直播，随机写代码）。\n<p>没想到心内的焦虑也有一部分是规划产生的。就比如我大学的6月份，找着实习的机会，但只能暑假才开始入职，这个本是对暑假以及日后的一种规划，没想到很快找着了，但想着一个月后一定会去那里工作反而产生一种既想去又想去后会发生的事情的焦虑，所以这个我觉得在我入职前都会伴随着这种心绪，影响肯定是坏的，至少在一个月里坏了我不少心情与增加了不少压力。</p>\n<p>猜测可能日常的你可调的规划是好的（如你要看一本书，你可以规划这周看完，但你看不完也没人管），带压力的强制的规划是自己给自己找麻烦（如你想着去考个英语46级，考试临近你的焦虑自然便产生了，而且是递增的）。或许：船到桥头自然直才是最好的。</p>"},{"title":"手搓一个kmeans聚类","catalog":true,"date":"2018-04-11T06:05:33.000Z","_content":"\n起意是在看一些招聘算法机器学习面经的时候有看到好几次让直接写一个kmeans。之前用sklearn试过这个聚类算法，这次也来手写实现一下。<!--more-->\n<pre>import random\nimport matplotlib.pyplot as plt\n\n#生成点\ndef make_points():\n    points = []\n    for i in range(100):\n        points.append([random.random()*10,random.random()*10])\n        points.append([random.random()*-10,random.random()*-10])\n        points.append([random.random()*10,random.random()*-10])\n        points.append([random.random()*-10,random.random()*10])\n    return points\n\n#计算距离，这里用欧式距离，也可以换其他距离\ndef calc_distance(p1,p2):\n    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\n\n#转置\ndef listT(arr):\n    return list(map(list, zip(*arr)))\n\n#主算法部分，递归实现\ndef kmeans(points,cate_num,cate_mid=None,n=0,nmax=100):\n    #初始化中心点\n    if cate_mid == None:\n        cate_mid = [points[i] for i in range(cate_num)]\n    category = {}\n    #初始化类别\n    for i in range(cate_num):\n        category[i] = []\n    #计算每个点与中心点的距离，去最小值，划入那个中心点的类中\n    for point in points:\n        dis = [calc_distance(point,i) for i in cate_mid]\n        category[dis.index(min(dis))].append(point)\n    #转置得到每类点的x和y，并求平均。\n    ch_cate_mid = []\n    for i in category:\n        tmpx,tmpy = listT(category[i])\n        count = len(tmpx)\n        ch_cate_mid.append([sum(tmpx)/count,sum(tmpy)/count])\n    #n为次数，次数达到后返回类别与点\n    if n &gt;= nmax:\n        return category\n    else:\n        return kmeans(points,cate_num,ch_cate_mid,n+1)\n\nif __name__ == \"__main__\":\n    #运行kmeans\n    points = make_points()\n    cate_num = 4\n    category = kmeans(points,cate_num)\n\n    #画图部分\n    color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']\n    for i in category:\n        xy = listT(category[i])\n        plt.plot(xy[0],xy[1],color[i]+\".\")\n    #plt.show()\n    plt.savefig(\"kmeans.png\")</pre>\n效果展示：\n\n<a href=\"/img/uploads/2018/04/test.png\"><img class=\"alignnone wp-image-601 size-medium\" src=\"/img/uploads/2018/04/test-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n","source":"_posts/2018/article_15_手搓一个kmeans聚类.md","raw":"\n---\ntitle: 手搓一个kmeans聚类\ncatalog: true\ndate: 2018-4-11 14:05:33\n---\n\n起意是在看一些招聘算法机器学习面经的时候有看到好几次让直接写一个kmeans。之前用sklearn试过这个聚类算法，这次也来手写实现一下。<!--more-->\n<pre>import random\nimport matplotlib.pyplot as plt\n\n#生成点\ndef make_points():\n    points = []\n    for i in range(100):\n        points.append([random.random()*10,random.random()*10])\n        points.append([random.random()*-10,random.random()*-10])\n        points.append([random.random()*10,random.random()*-10])\n        points.append([random.random()*-10,random.random()*10])\n    return points\n\n#计算距离，这里用欧式距离，也可以换其他距离\ndef calc_distance(p1,p2):\n    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\n\n#转置\ndef listT(arr):\n    return list(map(list, zip(*arr)))\n\n#主算法部分，递归实现\ndef kmeans(points,cate_num,cate_mid=None,n=0,nmax=100):\n    #初始化中心点\n    if cate_mid == None:\n        cate_mid = [points[i] for i in range(cate_num)]\n    category = {}\n    #初始化类别\n    for i in range(cate_num):\n        category[i] = []\n    #计算每个点与中心点的距离，去最小值，划入那个中心点的类中\n    for point in points:\n        dis = [calc_distance(point,i) for i in cate_mid]\n        category[dis.index(min(dis))].append(point)\n    #转置得到每类点的x和y，并求平均。\n    ch_cate_mid = []\n    for i in category:\n        tmpx,tmpy = listT(category[i])\n        count = len(tmpx)\n        ch_cate_mid.append([sum(tmpx)/count,sum(tmpy)/count])\n    #n为次数，次数达到后返回类别与点\n    if n &gt;= nmax:\n        return category\n    else:\n        return kmeans(points,cate_num,ch_cate_mid,n+1)\n\nif __name__ == \"__main__\":\n    #运行kmeans\n    points = make_points()\n    cate_num = 4\n    category = kmeans(points,cate_num)\n\n    #画图部分\n    color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']\n    for i in category:\n        xy = listT(category[i])\n        plt.plot(xy[0],xy[1],color[i]+\".\")\n    #plt.show()\n    plt.savefig(\"kmeans.png\")</pre>\n效果展示：\n\n<a href=\"/img/uploads/2018/04/test.png\"><img class=\"alignnone wp-image-601 size-medium\" src=\"/img/uploads/2018/04/test-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a>\n","slug":"2018/article_15_手搓一个kmeans聚类","published":1,"updated":"2021-01-27T04:46:28.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73l001w0770l1ir0dwx","content":"<p>起意是在看一些招聘算法机器学习面经的时候有看到好几次让直接写一个kmeans。之前用sklearn试过这个聚类算法，这次也来手写实现一下。<a id=\"more\"></a></p>\n<pre>import random\nimport matplotlib.pyplot as plt\n\n#生成点\ndef make_points():\n    points = []\n    for i in range(100):\n        points.append([random.random()*10,random.random()*10])\n        points.append([random.random()*-10,random.random()*-10])\n        points.append([random.random()*10,random.random()*-10])\n        points.append([random.random()*-10,random.random()*10])\n    return points\n\n#计算距离，这里用欧式距离，也可以换其他距离\ndef calc_distance(p1,p2):\n    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\n\n#转置\ndef listT(arr):\n    return list(map(list, zip(*arr)))\n\n#主算法部分，递归实现\ndef kmeans(points,cate_num,cate_mid=None,n=0,nmax=100):\n    #初始化中心点\n    if cate_mid == None:\n        cate_mid = [points[i] for i in range(cate_num)]\n    category = {}\n    #初始化类别\n    for i in range(cate_num):\n        category[i] = []\n    #计算每个点与中心点的距离，去最小值，划入那个中心点的类中\n    for point in points:\n        dis = [calc_distance(point,i) for i in cate_mid]\n        category[dis.index(min(dis))].append(point)\n    #转置得到每类点的x和y，并求平均。\n    ch_cate_mid = []\n    for i in category:\n        tmpx,tmpy = listT(category[i])\n        count = len(tmpx)\n        ch_cate_mid.append([sum(tmpx)/count,sum(tmpy)/count])\n    #n为次数，次数达到后返回类别与点\n    if n &gt;= nmax:\n        return category\n    else:\n        return kmeans(points,cate_num,ch_cate_mid,n+1)\n\nif __name__ == \"__main__\":\n    #运行kmeans\n    points = make_points()\n    cate_num = 4\n    category = kmeans(points,cate_num)\n\n    #画图部分\n    color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']\n    for i in category:\n        xy = listT(category[i])\n        plt.plot(xy[0],xy[1],color[i]+\".\")\n    #plt.show()\n    plt.savefig(\"kmeans.png\")</pre>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2018/04/test.png\"><img class=\"alignnone wp-image-601 size-medium\" src=\"/img/uploads/2018/04/test-300x225.png\" alt=\"\" width=\"300\" height=\"225\"></a></p>\n","excerpt":"<p>起意是在看一些招聘算法机器学习面经的时候有看到好几次让直接写一个kmeans。之前用sklearn试过这个聚类算法，这次也来手写实现一下。","more":"</p>\n<pre>import random\nimport matplotlib.pyplot as plt\n\n#生成点\ndef make_points():\n    points = []\n    for i in range(100):\n        points.append([random.random()*10,random.random()*10])\n        points.append([random.random()*-10,random.random()*-10])\n        points.append([random.random()*10,random.random()*-10])\n        points.append([random.random()*-10,random.random()*10])\n    return points\n\n#计算距离，这里用欧式距离，也可以换其他距离\ndef calc_distance(p1,p2):\n    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\n\n#转置\ndef listT(arr):\n    return list(map(list, zip(*arr)))\n\n#主算法部分，递归实现\ndef kmeans(points,cate_num,cate_mid=None,n=0,nmax=100):\n    #初始化中心点\n    if cate_mid == None:\n        cate_mid = [points[i] for i in range(cate_num)]\n    category = {}\n    #初始化类别\n    for i in range(cate_num):\n        category[i] = []\n    #计算每个点与中心点的距离，去最小值，划入那个中心点的类中\n    for point in points:\n        dis = [calc_distance(point,i) for i in cate_mid]\n        category[dis.index(min(dis))].append(point)\n    #转置得到每类点的x和y，并求平均。\n    ch_cate_mid = []\n    for i in category:\n        tmpx,tmpy = listT(category[i])\n        count = len(tmpx)\n        ch_cate_mid.append([sum(tmpx)/count,sum(tmpy)/count])\n    #n为次数，次数达到后返回类别与点\n    if n &gt;= nmax:\n        return category\n    else:\n        return kmeans(points,cate_num,ch_cate_mid,n+1)\n\nif __name__ == \"__main__\":\n    #运行kmeans\n    points = make_points()\n    cate_num = 4\n    category = kmeans(points,cate_num)\n\n    #画图部分\n    color = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']\n    for i in category:\n        xy = listT(category[i])\n        plt.plot(xy[0],xy[1],color[i]+\".\")\n    #plt.show()\n    plt.savefig(\"kmeans.png\")</pre>\n<p>效果展示：</p>\n<p><a href=\"/img/uploads/2018/04/test.png\"><img class=\"alignnone wp-image-601 size-medium\" src=\"/img/uploads/2018/04/test-300x225.png\" alt=\"\" width=\"300\" height=\"225\" /></a></p>"},{"title":"练手c语言算法一","catalog":true,"date":"2018-05-06T03:53:07.000Z","_content":"\n大华2018年软件挑战赛初赛题\n\n<a href=\"/img/uploads/2018/05/%E5%88%9D%E8%B5%9B.xlsx\">初赛　十道题，题目此在</a>，主要讲讲自己的思路，这里是前五题。<!--more-->\n\n１.不相邻最大子序和。不相邻所以奇偶分开写状态转移，然后取两者较大值。类似于leetcode中house robber。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint calc(int *nums,int n){\n    int a=0,b=0,i;\n    for(i=0;i&lt;n;i++){\n        if(i%2 == 0){\n            a = max(b,a+nums[i]);\n        }else{\n            b = max(a,b+nums[i]);\n        }\n    }\n    return max(a,b);\n}\n\nint main(){\n    int T,i,n,j;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(i=0;i&lt;T;i++){\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(j=0;j&lt;n;j++){\n            scanf(\"%d\",&amp;nums[j]);\n        }\n        res[i] = calc(nums,n);\n    }\n    for(i=0;i&lt;T;i++){\n        printf(\"%d\\n\",res[i]);\n    }\n}</pre>\n2.链表部分翻转。我还是用数组实现的，翻转就是遍历前一半的长度，和后一半换一下。然后在数组分割的每部分调用这个翻转完成。\n<pre>#include \"stdio.h\"\n\nvoid reverse(int *arr,int n,int start){\n    int m=(n+1)/2+start,i,j,tmp;\n    for(i=start;i&lt;m;i++){\n        j=n+2*start-i-1;\n        tmp=arr[i];\n        arr[i]=arr[j];\n        arr[j]=tmp;\n    }\n}\n\nint main(){\n    int n,i,j,k,l,T,z=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[1000],kk[10];\n    for(k=0;k&lt;T;k++){\n        j=0;\n        scanf(\"%d\",&amp;n);\n        kk[k] = n;\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        scanf(\"%d\",&amp;l);\n        while(j+l&lt;=n){\n            reverse(nums,l,j);\n            j+=l;\n        }\n        reverse(nums,n-j,j);\n        for(i=0;i&lt;n;i++){\n            res[z+i]=nums[i];\n        }\n        z+=n;\n    }\n    for(k=0;k&lt;T;k++){\n        for(i=tmp;i&lt;kk[k]+tmp;i++){\n            printf(\"%d \",res[i]);\n        }\n        tmp+=kk[k];\n        printf(\"\\n\");\n    }\n}</pre>\n3.霍夫曼编码，这里有参考网上的算法代码，<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\">参考地址</a>，也不用造轮子啦。\n<pre>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef int ElemType;\nstruct BTreeNode\n{\n    struct BTreeNode* left;\n    struct BTreeNode* right;\n    ElemType data;\n};\n\nvoid PrintBTree_int(struct BTreeNode* BT)\n{\n    if (BT != NULL)\n    {\n        printf(\"%d\", BT-&gt;data);\n        if (BT-&gt;left != NULL || BT-&gt;right != NULL)\n        {\n            printf(\"(\");\n            PrintBTree_int(BT-&gt;left);\n            if (BT-&gt;right != NULL)\n                printf(\",\");\n            PrintBTree_int(BT-&gt;right);\n            printf(\")\");\n        }\n    }\n}\n\nstruct BTreeNode* CreateHuffman(ElemType a[], int n)\n{\n    int i, j;\n    struct BTreeNode **b, *q;\n    b = malloc(n*sizeof(struct BTreeNode));\n    for (i = 0; i &lt; n; i++)\n    {\n        b[i] = malloc(sizeof(struct BTreeNode));\n        b[i]-&gt;data = a[i];\n        b[i]-&gt;left = b[i]-&gt;right = NULL;\n    }\n    for (i = 1; i &lt; n; i++)\n    {\n        int k1 = -1, k2;\n        for (j = 0; j &lt; n; j++)\n        {\n            if (b[j] != NULL &amp;&amp; k1 == -1)\n            {\n                k1 = j;\n                continue;\n            }\n            if (b[j] != NULL)\n            {\n                k2 = j;\n                break;\n            }\n        }\n        for (j = k2; j &lt; n; j++)\n        {\n            if (b[j] != NULL)\n            {\n                if (b[j]-&gt;data &lt; b[k1]-&gt;data)\n                {\n                    k2 = k1;\n                    k1 = j;\n                }\n                else if (b[j]-&gt;data &lt; b[k2]-&gt;data)\n                    k2 = j;\n            }\n        }\n        q = malloc(sizeof(struct BTreeNode));\n        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;\n        q-&gt;left = b[k1];\n        q-&gt;right = b[k2];\n\n        b[k1] = q;\n        b[k2] = NULL;\n    }\n    free(b);\n    return q;\n}\n\nElemType WeightPathLength(struct BTreeNode* FBT, int len)\n{\n    if (FBT == NULL)\n        return 0;\n    else\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n            return FBT-&gt;data * len;\n        else\n            return WeightPathLength(FBT-&gt;left,len+1)+WeightPathLength(FBT-&gt;right,len+1);\n    }\n}\n\nint res[26][100];\n\nvoid HuffManCoding(struct BTreeNode* FBT, int len,int n,int *idx)\n{\n    static int a[10];\n    if (FBT != NULL)\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n        {\n            int i;\n            res[idx[n-FBT-&gt;data]][0]=len;\n            for (i = 0; i &lt; len; i++)\n                res[idx[n-FBT-&gt;data]][i+1]=a[i];\n        }\n        else{\n            a[len] = 0;\n            HuffManCoding(FBT-&gt;left, len + 1,n,idx);\n            a[len] = 1;\n            HuffManCoding(FBT-&gt;right, len + 1,n,idx);\n        }\n    }\n}\n\nconst int* par = 0;\n\nint compare(const void* p1, const void* p2)\n{\n    int a = *(int*)p1;\n    int b = *(int*)p2;\n\n    if (par[a] &gt; par[b])\n        return 1;\n    else if (par[a] == par[b])\n        return 0;\n    else\n        return -1;\n}\n\nvoid sort_index(const int ar[], int index[], int num)\n{\n    par = ar;\n    qsort(index, num, sizeof(int), &amp;compare);\n}\n\n\nint main()\n{\n    int T,k,kl=0,z=0;\n    scanf(\"%d\",&amp;T);\n    int rrr[10000],lll[T];\n    for(k=0;k&lt;T;k++){\n        int i,l,n=0,j,tmp,midx=0,mm=0,ll=0;\n        int asc[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n        char s[100];\n        scanf(\"%s\",s);\n        for(l=0;s[l]!='\\0';++l);\n        for(i=0;i&lt;l;i++){\n            asc[s[i]-65]++;\n        }\n\n        ElemType* a;\n        struct BTreeNode* fbt;\n        for(i=0;i&lt;26;i++){\n            if(asc[i]!=0){\n                n++;\n            }\n        }\n        int idxs[n];\n        for(j=0;j&lt;n;j++){\n            mm=0;\n            midx=0;\n            for(i=0;i&lt;26;i++){\n                if(asc[i]&gt;mm){\n                    mm=asc[i];\n                    midx=i;\n                }\n            }\n            idxs[j]=midx;\n            asc[midx]=0;\n        }\n\n        a = malloc(n*sizeof(ElemType));\n        for (i = 0; i &lt; n; i++)\n            a[i]=n-i;\n        fbt = CreateHuffman(a, n);\n        HuffManCoding(fbt, 0, n, idxs);\n        for(i=0;i&lt;l;i++){\n            tmp = s[i]-65;\n            for(j=1;j&lt;res[tmp][0]+1;j++){\n                rrr[kl] = res[tmp][j];\n                kl++;\n                ll++;\n            }\n        }\n        lll[k] = ll;\n    }\n    kl=0;\n    for(k=0;k&lt;T;k++){\n        for(z=0;z&lt;lll[k];z++){\n            printf(\"%d\",rrr[z+kl]);\n        }\n        kl+=lll[k];\n        printf(\"\\n\");\n    }\n}</pre>\n４.子串出现次数。也就用比较老土的办法一个个比较过去，如果对应上count+1，对不上就再回到原来后一个位置继续比较。\n<pre>#include \"stdio.h\"\n\nint pp(char *s1,char *s2,int l1,int l2){\n    int count=0,i,j=0;\n    for(i=0;i&lt;l1;i++){\n        if(s1[i]==s2[j]){\n            j++;\n            if(j==l2){\n                count++;\n                i=i-j+1;\n                j=0;\n            }\n        }else{\n            i=i-j;\n            j=0;\n        }\n    }\n    return count;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int count = 0,i,l1,l2;\n        char s1[100],s2[100];\n        scanf(\"%s\",&amp;s1);\n        scanf(\"%s\",&amp;s2);\n        for(l1=0;s1[l1]!='\\0';++l1);\n        for(l2=0;s2[l2]!='\\0';++l2);\n        res[k] = pp(s1,s2,l1,l2);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n5.吃金币游戏。这个我也没通过。本人思路是先找第一个点，然后遍历和它连接的下一步可行点，然后每个点在递归运行，这个是dfs主要部分。剪枝的话：如果在两步以外又回到走过的点就是形成环舍去，两步以内或没走过可行；同一路同方向不重复走（考虑他下一个递归讲将和之前完全一模一样）。结果：每次求该路径的金币数，取最大值。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint x=1;\nint line_his[10000]={0};\nint line_dir[10000];\nint maxV=0;\n\nint check(int n){\n    int i;\n    for(i=x-2;i&gt;=x-3;i--){\n        if(line_his[i]==n){\n            return 1;\n        }\n    }\n    for(i=x-4;i&gt;=0;i--){\n        if(line_his[i]==n){\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint get_road(int *arr,int r,int n,int *tmp){\n    int t=0,i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n || arr[i+1]==n){\n            tmp[t]=arr[i]==n?arr[i+1]:arr[i];\n            t++;\n        }\n    }\n    return t;\n}\n\nint get_value(int *arr,int r,int n1,int n2){\n    int i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n1 &amp;&amp; arr[i+1]==n2){\n            return arr[i+2];\n        }\n        if(arr[i]==n2 &amp;&amp; arr[i+1]==n1){\n            return arr[i+2];\n        }\n    }\n}\n\nint calc_v(int *arr,int r,int p){\n    int tmp = 0,i;\n    int his[10000]={};\n    for(i=0;i&lt;x-1;i++){\n        if(his[line_his[i]*p+line_his[i+1]]!=1){\n            tmp+=get_value(arr,r,line_his[i],line_his[i+1]);\n        }\n        his[line_his[i]*p+line_his[i+1]]=1;\n        his[line_his[i]+line_his[i+1]*p]=1;\n    }\n    return tmp;\n}\n\n/*int check_all(int p){\n    int i,j,in=0;\n    for(i=0;i&lt;p;i++){\n        for(j=0;j&lt;x;j++){\n            if(i==line_his[j]){\n                in++;\n                break;\n            }\n        }\n    }\n    if(in==p){\n        return 1;\n    }else{\n        return 0;\n    }\n}*/\n\nint dfs(int *arr,int r,int p,int n){\n    int i,t,tt;\n    int tmp[10000];\n    //if(check_all(p)){\n    tt = calc_v(arr,r,p);\n    maxV = max(maxV,tt);\n    t = get_road(arr,r,n,tmp);\n    for(i=0;i&lt;t;i++){\n        if(line_dir[n*p+tmp[i]]==1){\n            continue;\n        }\n        line_his[x]=tmp[i];\n        line_dir[n*p+tmp[i]]=1;\n        x++;\n        if(check(tmp[i]))\n            dfs(arr,r,p,tmp[i]);\n        line_his[x]=-1;\n        line_dir[n*p+tmp[i]]=-1;\n        x--;\n    }\n    return maxV;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        maxV=0;\n        x=1;\n        int p,r,i,t;\n        scanf(\"%d\",&amp;p);\n        scanf(\"%d\",&amp;r);\n        int arr[r*3];\n        for(i=0;i&lt;r*3;i++){\n            scanf(\"%d\",&amp;arr[i]);\n        }\n        result[k] = dfs(arr,r,p,0);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n","source":"_posts/2018/article_18_练手c语言算法一.md","raw":"\n---\ntitle: 练手c语言算法一\ncatalog: true\ndate: 2018-5-6 11:53:07\n---\n\n大华2018年软件挑战赛初赛题\n\n<a href=\"/img/uploads/2018/05/%E5%88%9D%E8%B5%9B.xlsx\">初赛　十道题，题目此在</a>，主要讲讲自己的思路，这里是前五题。<!--more-->\n\n１.不相邻最大子序和。不相邻所以奇偶分开写状态转移，然后取两者较大值。类似于leetcode中house robber。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint calc(int *nums,int n){\n    int a=0,b=0,i;\n    for(i=0;i&lt;n;i++){\n        if(i%2 == 0){\n            a = max(b,a+nums[i]);\n        }else{\n            b = max(a,b+nums[i]);\n        }\n    }\n    return max(a,b);\n}\n\nint main(){\n    int T,i,n,j;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(i=0;i&lt;T;i++){\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(j=0;j&lt;n;j++){\n            scanf(\"%d\",&amp;nums[j]);\n        }\n        res[i] = calc(nums,n);\n    }\n    for(i=0;i&lt;T;i++){\n        printf(\"%d\\n\",res[i]);\n    }\n}</pre>\n2.链表部分翻转。我还是用数组实现的，翻转就是遍历前一半的长度，和后一半换一下。然后在数组分割的每部分调用这个翻转完成。\n<pre>#include \"stdio.h\"\n\nvoid reverse(int *arr,int n,int start){\n    int m=(n+1)/2+start,i,j,tmp;\n    for(i=start;i&lt;m;i++){\n        j=n+2*start-i-1;\n        tmp=arr[i];\n        arr[i]=arr[j];\n        arr[j]=tmp;\n    }\n}\n\nint main(){\n    int n,i,j,k,l,T,z=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[1000],kk[10];\n    for(k=0;k&lt;T;k++){\n        j=0;\n        scanf(\"%d\",&amp;n);\n        kk[k] = n;\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        scanf(\"%d\",&amp;l);\n        while(j+l&lt;=n){\n            reverse(nums,l,j);\n            j+=l;\n        }\n        reverse(nums,n-j,j);\n        for(i=0;i&lt;n;i++){\n            res[z+i]=nums[i];\n        }\n        z+=n;\n    }\n    for(k=0;k&lt;T;k++){\n        for(i=tmp;i&lt;kk[k]+tmp;i++){\n            printf(\"%d \",res[i]);\n        }\n        tmp+=kk[k];\n        printf(\"\\n\");\n    }\n}</pre>\n3.霍夫曼编码，这里有参考网上的算法代码，<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\">参考地址</a>，也不用造轮子啦。\n<pre>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef int ElemType;\nstruct BTreeNode\n{\n    struct BTreeNode* left;\n    struct BTreeNode* right;\n    ElemType data;\n};\n\nvoid PrintBTree_int(struct BTreeNode* BT)\n{\n    if (BT != NULL)\n    {\n        printf(\"%d\", BT-&gt;data);\n        if (BT-&gt;left != NULL || BT-&gt;right != NULL)\n        {\n            printf(\"(\");\n            PrintBTree_int(BT-&gt;left);\n            if (BT-&gt;right != NULL)\n                printf(\",\");\n            PrintBTree_int(BT-&gt;right);\n            printf(\")\");\n        }\n    }\n}\n\nstruct BTreeNode* CreateHuffman(ElemType a[], int n)\n{\n    int i, j;\n    struct BTreeNode **b, *q;\n    b = malloc(n*sizeof(struct BTreeNode));\n    for (i = 0; i &lt; n; i++)\n    {\n        b[i] = malloc(sizeof(struct BTreeNode));\n        b[i]-&gt;data = a[i];\n        b[i]-&gt;left = b[i]-&gt;right = NULL;\n    }\n    for (i = 1; i &lt; n; i++)\n    {\n        int k1 = -1, k2;\n        for (j = 0; j &lt; n; j++)\n        {\n            if (b[j] != NULL &amp;&amp; k1 == -1)\n            {\n                k1 = j;\n                continue;\n            }\n            if (b[j] != NULL)\n            {\n                k2 = j;\n                break;\n            }\n        }\n        for (j = k2; j &lt; n; j++)\n        {\n            if (b[j] != NULL)\n            {\n                if (b[j]-&gt;data &lt; b[k1]-&gt;data)\n                {\n                    k2 = k1;\n                    k1 = j;\n                }\n                else if (b[j]-&gt;data &lt; b[k2]-&gt;data)\n                    k2 = j;\n            }\n        }\n        q = malloc(sizeof(struct BTreeNode));\n        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;\n        q-&gt;left = b[k1];\n        q-&gt;right = b[k2];\n\n        b[k1] = q;\n        b[k2] = NULL;\n    }\n    free(b);\n    return q;\n}\n\nElemType WeightPathLength(struct BTreeNode* FBT, int len)\n{\n    if (FBT == NULL)\n        return 0;\n    else\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n            return FBT-&gt;data * len;\n        else\n            return WeightPathLength(FBT-&gt;left,len+1)+WeightPathLength(FBT-&gt;right,len+1);\n    }\n}\n\nint res[26][100];\n\nvoid HuffManCoding(struct BTreeNode* FBT, int len,int n,int *idx)\n{\n    static int a[10];\n    if (FBT != NULL)\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n        {\n            int i;\n            res[idx[n-FBT-&gt;data]][0]=len;\n            for (i = 0; i &lt; len; i++)\n                res[idx[n-FBT-&gt;data]][i+1]=a[i];\n        }\n        else{\n            a[len] = 0;\n            HuffManCoding(FBT-&gt;left, len + 1,n,idx);\n            a[len] = 1;\n            HuffManCoding(FBT-&gt;right, len + 1,n,idx);\n        }\n    }\n}\n\nconst int* par = 0;\n\nint compare(const void* p1, const void* p2)\n{\n    int a = *(int*)p1;\n    int b = *(int*)p2;\n\n    if (par[a] &gt; par[b])\n        return 1;\n    else if (par[a] == par[b])\n        return 0;\n    else\n        return -1;\n}\n\nvoid sort_index(const int ar[], int index[], int num)\n{\n    par = ar;\n    qsort(index, num, sizeof(int), &amp;compare);\n}\n\n\nint main()\n{\n    int T,k,kl=0,z=0;\n    scanf(\"%d\",&amp;T);\n    int rrr[10000],lll[T];\n    for(k=0;k&lt;T;k++){\n        int i,l,n=0,j,tmp,midx=0,mm=0,ll=0;\n        int asc[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n        char s[100];\n        scanf(\"%s\",s);\n        for(l=0;s[l]!='\\0';++l);\n        for(i=0;i&lt;l;i++){\n            asc[s[i]-65]++;\n        }\n\n        ElemType* a;\n        struct BTreeNode* fbt;\n        for(i=0;i&lt;26;i++){\n            if(asc[i]!=0){\n                n++;\n            }\n        }\n        int idxs[n];\n        for(j=0;j&lt;n;j++){\n            mm=0;\n            midx=0;\n            for(i=0;i&lt;26;i++){\n                if(asc[i]&gt;mm){\n                    mm=asc[i];\n                    midx=i;\n                }\n            }\n            idxs[j]=midx;\n            asc[midx]=0;\n        }\n\n        a = malloc(n*sizeof(ElemType));\n        for (i = 0; i &lt; n; i++)\n            a[i]=n-i;\n        fbt = CreateHuffman(a, n);\n        HuffManCoding(fbt, 0, n, idxs);\n        for(i=0;i&lt;l;i++){\n            tmp = s[i]-65;\n            for(j=1;j&lt;res[tmp][0]+1;j++){\n                rrr[kl] = res[tmp][j];\n                kl++;\n                ll++;\n            }\n        }\n        lll[k] = ll;\n    }\n    kl=0;\n    for(k=0;k&lt;T;k++){\n        for(z=0;z&lt;lll[k];z++){\n            printf(\"%d\",rrr[z+kl]);\n        }\n        kl+=lll[k];\n        printf(\"\\n\");\n    }\n}</pre>\n４.子串出现次数。也就用比较老土的办法一个个比较过去，如果对应上count+1，对不上就再回到原来后一个位置继续比较。\n<pre>#include \"stdio.h\"\n\nint pp(char *s1,char *s2,int l1,int l2){\n    int count=0,i,j=0;\n    for(i=0;i&lt;l1;i++){\n        if(s1[i]==s2[j]){\n            j++;\n            if(j==l2){\n                count++;\n                i=i-j+1;\n                j=0;\n            }\n        }else{\n            i=i-j;\n            j=0;\n        }\n    }\n    return count;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int count = 0,i,l1,l2;\n        char s1[100],s2[100];\n        scanf(\"%s\",&amp;s1);\n        scanf(\"%s\",&amp;s2);\n        for(l1=0;s1[l1]!='\\0';++l1);\n        for(l2=0;s2[l2]!='\\0';++l2);\n        res[k] = pp(s1,s2,l1,l2);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n5.吃金币游戏。这个我也没通过。本人思路是先找第一个点，然后遍历和它连接的下一步可行点，然后每个点在递归运行，这个是dfs主要部分。剪枝的话：如果在两步以外又回到走过的点就是形成环舍去，两步以内或没走过可行；同一路同方向不重复走（考虑他下一个递归讲将和之前完全一模一样）。结果：每次求该路径的金币数，取最大值。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint x=1;\nint line_his[10000]={0};\nint line_dir[10000];\nint maxV=0;\n\nint check(int n){\n    int i;\n    for(i=x-2;i&gt;=x-3;i--){\n        if(line_his[i]==n){\n            return 1;\n        }\n    }\n    for(i=x-4;i&gt;=0;i--){\n        if(line_his[i]==n){\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint get_road(int *arr,int r,int n,int *tmp){\n    int t=0,i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n || arr[i+1]==n){\n            tmp[t]=arr[i]==n?arr[i+1]:arr[i];\n            t++;\n        }\n    }\n    return t;\n}\n\nint get_value(int *arr,int r,int n1,int n2){\n    int i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n1 &amp;&amp; arr[i+1]==n2){\n            return arr[i+2];\n        }\n        if(arr[i]==n2 &amp;&amp; arr[i+1]==n1){\n            return arr[i+2];\n        }\n    }\n}\n\nint calc_v(int *arr,int r,int p){\n    int tmp = 0,i;\n    int his[10000]={};\n    for(i=0;i&lt;x-1;i++){\n        if(his[line_his[i]*p+line_his[i+1]]!=1){\n            tmp+=get_value(arr,r,line_his[i],line_his[i+1]);\n        }\n        his[line_his[i]*p+line_his[i+1]]=1;\n        his[line_his[i]+line_his[i+1]*p]=1;\n    }\n    return tmp;\n}\n\n/*int check_all(int p){\n    int i,j,in=0;\n    for(i=0;i&lt;p;i++){\n        for(j=0;j&lt;x;j++){\n            if(i==line_his[j]){\n                in++;\n                break;\n            }\n        }\n    }\n    if(in==p){\n        return 1;\n    }else{\n        return 0;\n    }\n}*/\n\nint dfs(int *arr,int r,int p,int n){\n    int i,t,tt;\n    int tmp[10000];\n    //if(check_all(p)){\n    tt = calc_v(arr,r,p);\n    maxV = max(maxV,tt);\n    t = get_road(arr,r,n,tmp);\n    for(i=0;i&lt;t;i++){\n        if(line_dir[n*p+tmp[i]]==1){\n            continue;\n        }\n        line_his[x]=tmp[i];\n        line_dir[n*p+tmp[i]]=1;\n        x++;\n        if(check(tmp[i]))\n            dfs(arr,r,p,tmp[i]);\n        line_his[x]=-1;\n        line_dir[n*p+tmp[i]]=-1;\n        x--;\n    }\n    return maxV;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        maxV=0;\n        x=1;\n        int p,r,i,t;\n        scanf(\"%d\",&amp;p);\n        scanf(\"%d\",&amp;r);\n        int arr[r*3];\n        for(i=0;i&lt;r*3;i++){\n            scanf(\"%d\",&amp;arr[i]);\n        }\n        result[k] = dfs(arr,r,p,0);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n","slug":"2018/article_18_练手c语言算法一","published":1,"updated":"2021-01-27T04:46:28.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73m001x077077l5n8tx","content":"<p>大华2018年软件挑战赛初赛题</p>\n<p><a href=\"/img/uploads/2018/05/%E5%88%9D%E8%B5%9B.xlsx\">初赛　十道题，题目此在</a>，主要讲讲自己的思路，这里是前五题。<a id=\"more\"></a></p>\n<p>１.不相邻最大子序和。不相邻所以奇偶分开写状态转移，然后取两者较大值。类似于leetcode中house robber。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint calc(int *nums,int n){\n    int a=0,b=0,i;\n    for(i=0;i&lt;n;i++){\n        if(i%2 == 0){\n            a = max(b,a+nums[i]);\n        }else{\n            b = max(a,b+nums[i]);\n        }\n    }\n    return max(a,b);\n}\n\nint main(){\n    int T,i,n,j;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(i=0;i&lt;T;i++){\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(j=0;j&lt;n;j++){\n            scanf(\"%d\",&amp;nums[j]);\n        }\n        res[i] = calc(nums,n);\n    }\n    for(i=0;i&lt;T;i++){\n        printf(\"%d\\n\",res[i]);\n    }\n}</pre>\n<p>2.链表部分翻转。我还是用数组实现的，翻转就是遍历前一半的长度，和后一半换一下。然后在数组分割的每部分调用这个翻转完成。</p>\n<pre>#include \"stdio.h\"\n\nvoid reverse(int *arr,int n,int start){\n    int m=(n+1)/2+start,i,j,tmp;\n    for(i=start;i&lt;m;i++){\n        j=n+2*start-i-1;\n        tmp=arr[i];\n        arr[i]=arr[j];\n        arr[j]=tmp;\n    }\n}\n\nint main(){\n    int n,i,j,k,l,T,z=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[1000],kk[10];\n    for(k=0;k&lt;T;k++){\n        j=0;\n        scanf(\"%d\",&amp;n);\n        kk[k] = n;\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        scanf(\"%d\",&amp;l);\n        while(j+l&lt;=n){\n            reverse(nums,l,j);\n            j+=l;\n        }\n        reverse(nums,n-j,j);\n        for(i=0;i&lt;n;i++){\n            res[z+i]=nums[i];\n        }\n        z+=n;\n    }\n    for(k=0;k&lt;T;k++){\n        for(i=tmp;i&lt;kk[k]+tmp;i++){\n            printf(\"%d \",res[i]);\n        }\n        tmp+=kk[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>3.霍夫曼编码，这里有参考网上的算法代码，<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\" target=\"_blank\" rel=\"external\">参考地址</a>，也不用造轮子啦。</p>\n<pre>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef int ElemType;\nstruct BTreeNode\n{\n    struct BTreeNode* left;\n    struct BTreeNode* right;\n    ElemType data;\n};\n\nvoid PrintBTree_int(struct BTreeNode* BT)\n{\n    if (BT != NULL)\n    {\n        printf(\"%d\", BT-&gt;data);\n        if (BT-&gt;left != NULL || BT-&gt;right != NULL)\n        {\n            printf(\"(\");\n            PrintBTree_int(BT-&gt;left);\n            if (BT-&gt;right != NULL)\n                printf(\",\");\n            PrintBTree_int(BT-&gt;right);\n            printf(\")\");\n        }\n    }\n}\n\nstruct BTreeNode* CreateHuffman(ElemType a[], int n)\n{\n    int i, j;\n    struct BTreeNode **b, *q;\n    b = malloc(n*sizeof(struct BTreeNode));\n    for (i = 0; i &lt; n; i++)\n    {\n        b[i] = malloc(sizeof(struct BTreeNode));\n        b[i]-&gt;data = a[i];\n        b[i]-&gt;left = b[i]-&gt;right = NULL;\n    }\n    for (i = 1; i &lt; n; i++)\n    {\n        int k1 = -1, k2;\n        for (j = 0; j &lt; n; j++)\n        {\n            if (b[j] != NULL &amp;&amp; k1 == -1)\n            {\n                k1 = j;\n                continue;\n            }\n            if (b[j] != NULL)\n            {\n                k2 = j;\n                break;\n            }\n        }\n        for (j = k2; j &lt; n; j++)\n        {\n            if (b[j] != NULL)\n            {\n                if (b[j]-&gt;data &lt; b[k1]-&gt;data)\n                {\n                    k2 = k1;\n                    k1 = j;\n                }\n                else if (b[j]-&gt;data &lt; b[k2]-&gt;data)\n                    k2 = j;\n            }\n        }\n        q = malloc(sizeof(struct BTreeNode));\n        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;\n        q-&gt;left = b[k1];\n        q-&gt;right = b[k2];\n\n        b[k1] = q;\n        b[k2] = NULL;\n    }\n    free(b);\n    return q;\n}\n\nElemType WeightPathLength(struct BTreeNode* FBT, int len)\n{\n    if (FBT == NULL)\n        return 0;\n    else\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n            return FBT-&gt;data * len;\n        else\n            return WeightPathLength(FBT-&gt;left,len+1)+WeightPathLength(FBT-&gt;right,len+1);\n    }\n}\n\nint res[26][100];\n\nvoid HuffManCoding(struct BTreeNode* FBT, int len,int n,int *idx)\n{\n    static int a[10];\n    if (FBT != NULL)\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n        {\n            int i;\n            res[idx[n-FBT-&gt;data]][0]=len;\n            for (i = 0; i &lt; len; i++)\n                res[idx[n-FBT-&gt;data]][i+1]=a[i];\n        }\n        else{\n            a[len] = 0;\n            HuffManCoding(FBT-&gt;left, len + 1,n,idx);\n            a[len] = 1;\n            HuffManCoding(FBT-&gt;right, len + 1,n,idx);\n        }\n    }\n}\n\nconst int* par = 0;\n\nint compare(const void* p1, const void* p2)\n{\n    int a = *(int*)p1;\n    int b = *(int*)p2;\n\n    if (par[a] &gt; par[b])\n        return 1;\n    else if (par[a] == par[b])\n        return 0;\n    else\n        return -1;\n}\n\nvoid sort_index(const int ar[], int index[], int num)\n{\n    par = ar;\n    qsort(index, num, sizeof(int), &amp;compare);\n}\n\n\nint main()\n{\n    int T,k,kl=0,z=0;\n    scanf(\"%d\",&amp;T);\n    int rrr[10000],lll[T];\n    for(k=0;k&lt;T;k++){\n        int i,l,n=0,j,tmp,midx=0,mm=0,ll=0;\n        int asc[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n        char s[100];\n        scanf(\"%s\",s);\n        for(l=0;s[l]!='\\0';++l);\n        for(i=0;i&lt;l;i++){\n            asc[s[i]-65]++;\n        }\n\n        ElemType* a;\n        struct BTreeNode* fbt;\n        for(i=0;i&lt;26;i++){\n            if(asc[i]!=0){\n                n++;\n            }\n        }\n        int idxs[n];\n        for(j=0;j&lt;n;j++){\n            mm=0;\n            midx=0;\n            for(i=0;i&lt;26;i++){\n                if(asc[i]&gt;mm){\n                    mm=asc[i];\n                    midx=i;\n                }\n            }\n            idxs[j]=midx;\n            asc[midx]=0;\n        }\n\n        a = malloc(n*sizeof(ElemType));\n        for (i = 0; i &lt; n; i++)\n            a[i]=n-i;\n        fbt = CreateHuffman(a, n);\n        HuffManCoding(fbt, 0, n, idxs);\n        for(i=0;i&lt;l;i++){\n            tmp = s[i]-65;\n            for(j=1;j&lt;res[tmp][0]+1;j++){\n                rrr[kl] = res[tmp][j];\n                kl++;\n                ll++;\n            }\n        }\n        lll[k] = ll;\n    }\n    kl=0;\n    for(k=0;k&lt;T;k++){\n        for(z=0;z&lt;lll[k];z++){\n            printf(\"%d\",rrr[z+kl]);\n        }\n        kl+=lll[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>４.子串出现次数。也就用比较老土的办法一个个比较过去，如果对应上count+1，对不上就再回到原来后一个位置继续比较。</p>\n<pre>#include \"stdio.h\"\n\nint pp(char *s1,char *s2,int l1,int l2){\n    int count=0,i,j=0;\n    for(i=0;i&lt;l1;i++){\n        if(s1[i]==s2[j]){\n            j++;\n            if(j==l2){\n                count++;\n                i=i-j+1;\n                j=0;\n            }\n        }else{\n            i=i-j;\n            j=0;\n        }\n    }\n    return count;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int count = 0,i,l1,l2;\n        char s1[100],s2[100];\n        scanf(\"%s\",&amp;s1);\n        scanf(\"%s\",&amp;s2);\n        for(l1=0;s1[l1]!='\\0';++l1);\n        for(l2=0;s2[l2]!='\\0';++l2);\n        res[k] = pp(s1,s2,l1,l2);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>5.吃金币游戏。这个我也没通过。本人思路是先找第一个点，然后遍历和它连接的下一步可行点，然后每个点在递归运行，这个是dfs主要部分。剪枝的话：如果在两步以外又回到走过的点就是形成环舍去，两步以内或没走过可行；同一路同方向不重复走（考虑他下一个递归讲将和之前完全一模一样）。结果：每次求该路径的金币数，取最大值。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint x=1;\nint line_his[10000]={0};\nint line_dir[10000];\nint maxV=0;\n\nint check(int n){\n    int i;\n    for(i=x-2;i&gt;=x-3;i--){\n        if(line_his[i]==n){\n            return 1;\n        }\n    }\n    for(i=x-4;i&gt;=0;i--){\n        if(line_his[i]==n){\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint get_road(int *arr,int r,int n,int *tmp){\n    int t=0,i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n || arr[i+1]==n){\n            tmp[t]=arr[i]==n?arr[i+1]:arr[i];\n            t++;\n        }\n    }\n    return t;\n}\n\nint get_value(int *arr,int r,int n1,int n2){\n    int i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n1 &amp;&amp; arr[i+1]==n2){\n            return arr[i+2];\n        }\n        if(arr[i]==n2 &amp;&amp; arr[i+1]==n1){\n            return arr[i+2];\n        }\n    }\n}\n\nint calc_v(int *arr,int r,int p){\n    int tmp = 0,i;\n    int his[10000]={};\n    for(i=0;i&lt;x-1;i++){\n        if(his[line_his[i]*p+line_his[i+1]]!=1){\n            tmp+=get_value(arr,r,line_his[i],line_his[i+1]);\n        }\n        his[line_his[i]*p+line_his[i+1]]=1;\n        his[line_his[i]+line_his[i+1]*p]=1;\n    }\n    return tmp;\n}\n\n/*int check_all(int p){\n    int i,j,in=0;\n    for(i=0;i&lt;p;i++){\n        for(j=0;j&lt;x;j++){\n            if(i==line_his[j]){\n                in++;\n                break;\n            }\n        }\n    }\n    if(in==p){\n        return 1;\n    }else{\n        return 0;\n    }\n}*/\n\nint dfs(int *arr,int r,int p,int n){\n    int i,t,tt;\n    int tmp[10000];\n    //if(check_all(p)){\n    tt = calc_v(arr,r,p);\n    maxV = max(maxV,tt);\n    t = get_road(arr,r,n,tmp);\n    for(i=0;i&lt;t;i++){\n        if(line_dir[n*p+tmp[i]]==1){\n            continue;\n        }\n        line_his[x]=tmp[i];\n        line_dir[n*p+tmp[i]]=1;\n        x++;\n        if(check(tmp[i]))\n            dfs(arr,r,p,tmp[i]);\n        line_his[x]=-1;\n        line_dir[n*p+tmp[i]]=-1;\n        x--;\n    }\n    return maxV;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        maxV=0;\n        x=1;\n        int p,r,i,t;\n        scanf(\"%d\",&amp;p);\n        scanf(\"%d\",&amp;r);\n        int arr[r*3];\n        for(i=0;i&lt;r*3;i++){\n            scanf(\"%d\",&amp;arr[i]);\n        }\n        result[k] = dfs(arr,r,p,0);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n","excerpt":"<p>大华2018年软件挑战赛初赛题</p>\n<p><a href=\"/img/uploads/2018/05/%E5%88%9D%E8%B5%9B.xlsx\">初赛　十道题，题目此在</a>，主要讲讲自己的思路，这里是前五题。","more":"</p>\n<p>１.不相邻最大子序和。不相邻所以奇偶分开写状态转移，然后取两者较大值。类似于leetcode中house robber。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint calc(int *nums,int n){\n    int a=0,b=0,i;\n    for(i=0;i&lt;n;i++){\n        if(i%2 == 0){\n            a = max(b,a+nums[i]);\n        }else{\n            b = max(a,b+nums[i]);\n        }\n    }\n    return max(a,b);\n}\n\nint main(){\n    int T,i,n,j;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(i=0;i&lt;T;i++){\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(j=0;j&lt;n;j++){\n            scanf(\"%d\",&amp;nums[j]);\n        }\n        res[i] = calc(nums,n);\n    }\n    for(i=0;i&lt;T;i++){\n        printf(\"%d\\n\",res[i]);\n    }\n}</pre>\n<p>2.链表部分翻转。我还是用数组实现的，翻转就是遍历前一半的长度，和后一半换一下。然后在数组分割的每部分调用这个翻转完成。</p>\n<pre>#include \"stdio.h\"\n\nvoid reverse(int *arr,int n,int start){\n    int m=(n+1)/2+start,i,j,tmp;\n    for(i=start;i&lt;m;i++){\n        j=n+2*start-i-1;\n        tmp=arr[i];\n        arr[i]=arr[j];\n        arr[j]=tmp;\n    }\n}\n\nint main(){\n    int n,i,j,k,l,T,z=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[1000],kk[10];\n    for(k=0;k&lt;T;k++){\n        j=0;\n        scanf(\"%d\",&amp;n);\n        kk[k] = n;\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        scanf(\"%d\",&amp;l);\n        while(j+l&lt;=n){\n            reverse(nums,l,j);\n            j+=l;\n        }\n        reverse(nums,n-j,j);\n        for(i=0;i&lt;n;i++){\n            res[z+i]=nums[i];\n        }\n        z+=n;\n    }\n    for(k=0;k&lt;T;k++){\n        for(i=tmp;i&lt;kk[k]+tmp;i++){\n            printf(\"%d \",res[i]);\n        }\n        tmp+=kk[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>3.霍夫曼编码，这里有参考网上的算法代码，<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\">参考地址</a>，也不用造轮子啦。</p>\n<pre>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef int ElemType;\nstruct BTreeNode\n{\n    struct BTreeNode* left;\n    struct BTreeNode* right;\n    ElemType data;\n};\n\nvoid PrintBTree_int(struct BTreeNode* BT)\n{\n    if (BT != NULL)\n    {\n        printf(\"%d\", BT-&gt;data);\n        if (BT-&gt;left != NULL || BT-&gt;right != NULL)\n        {\n            printf(\"(\");\n            PrintBTree_int(BT-&gt;left);\n            if (BT-&gt;right != NULL)\n                printf(\",\");\n            PrintBTree_int(BT-&gt;right);\n            printf(\")\");\n        }\n    }\n}\n\nstruct BTreeNode* CreateHuffman(ElemType a[], int n)\n{\n    int i, j;\n    struct BTreeNode **b, *q;\n    b = malloc(n*sizeof(struct BTreeNode));\n    for (i = 0; i &lt; n; i++)\n    {\n        b[i] = malloc(sizeof(struct BTreeNode));\n        b[i]-&gt;data = a[i];\n        b[i]-&gt;left = b[i]-&gt;right = NULL;\n    }\n    for (i = 1; i &lt; n; i++)\n    {\n        int k1 = -1, k2;\n        for (j = 0; j &lt; n; j++)\n        {\n            if (b[j] != NULL &amp;&amp; k1 == -1)\n            {\n                k1 = j;\n                continue;\n            }\n            if (b[j] != NULL)\n            {\n                k2 = j;\n                break;\n            }\n        }\n        for (j = k2; j &lt; n; j++)\n        {\n            if (b[j] != NULL)\n            {\n                if (b[j]-&gt;data &lt; b[k1]-&gt;data)\n                {\n                    k2 = k1;\n                    k1 = j;\n                }\n                else if (b[j]-&gt;data &lt; b[k2]-&gt;data)\n                    k2 = j;\n            }\n        }\n        q = malloc(sizeof(struct BTreeNode));\n        q-&gt;data = b[k1]-&gt;data + b[k2]-&gt;data;\n        q-&gt;left = b[k1];\n        q-&gt;right = b[k2];\n\n        b[k1] = q;\n        b[k2] = NULL;\n    }\n    free(b);\n    return q;\n}\n\nElemType WeightPathLength(struct BTreeNode* FBT, int len)\n{\n    if (FBT == NULL)\n        return 0;\n    else\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n            return FBT-&gt;data * len;\n        else\n            return WeightPathLength(FBT-&gt;left,len+1)+WeightPathLength(FBT-&gt;right,len+1);\n    }\n}\n\nint res[26][100];\n\nvoid HuffManCoding(struct BTreeNode* FBT, int len,int n,int *idx)\n{\n    static int a[10];\n    if (FBT != NULL)\n    {\n        if (FBT-&gt;left == NULL &amp;&amp; FBT-&gt;right == NULL)\n        {\n            int i;\n            res[idx[n-FBT-&gt;data]][0]=len;\n            for (i = 0; i &lt; len; i++)\n                res[idx[n-FBT-&gt;data]][i+1]=a[i];\n        }\n        else{\n            a[len] = 0;\n            HuffManCoding(FBT-&gt;left, len + 1,n,idx);\n            a[len] = 1;\n            HuffManCoding(FBT-&gt;right, len + 1,n,idx);\n        }\n    }\n}\n\nconst int* par = 0;\n\nint compare(const void* p1, const void* p2)\n{\n    int a = *(int*)p1;\n    int b = *(int*)p2;\n\n    if (par[a] &gt; par[b])\n        return 1;\n    else if (par[a] == par[b])\n        return 0;\n    else\n        return -1;\n}\n\nvoid sort_index(const int ar[], int index[], int num)\n{\n    par = ar;\n    qsort(index, num, sizeof(int), &amp;compare);\n}\n\n\nint main()\n{\n    int T,k,kl=0,z=0;\n    scanf(\"%d\",&amp;T);\n    int rrr[10000],lll[T];\n    for(k=0;k&lt;T;k++){\n        int i,l,n=0,j,tmp,midx=0,mm=0,ll=0;\n        int asc[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n        char s[100];\n        scanf(\"%s\",s);\n        for(l=0;s[l]!='\\0';++l);\n        for(i=0;i&lt;l;i++){\n            asc[s[i]-65]++;\n        }\n\n        ElemType* a;\n        struct BTreeNode* fbt;\n        for(i=0;i&lt;26;i++){\n            if(asc[i]!=0){\n                n++;\n            }\n        }\n        int idxs[n];\n        for(j=0;j&lt;n;j++){\n            mm=0;\n            midx=0;\n            for(i=0;i&lt;26;i++){\n                if(asc[i]&gt;mm){\n                    mm=asc[i];\n                    midx=i;\n                }\n            }\n            idxs[j]=midx;\n            asc[midx]=0;\n        }\n\n        a = malloc(n*sizeof(ElemType));\n        for (i = 0; i &lt; n; i++)\n            a[i]=n-i;\n        fbt = CreateHuffman(a, n);\n        HuffManCoding(fbt, 0, n, idxs);\n        for(i=0;i&lt;l;i++){\n            tmp = s[i]-65;\n            for(j=1;j&lt;res[tmp][0]+1;j++){\n                rrr[kl] = res[tmp][j];\n                kl++;\n                ll++;\n            }\n        }\n        lll[k] = ll;\n    }\n    kl=0;\n    for(k=0;k&lt;T;k++){\n        for(z=0;z&lt;lll[k];z++){\n            printf(\"%d\",rrr[z+kl]);\n        }\n        kl+=lll[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>４.子串出现次数。也就用比较老土的办法一个个比较过去，如果对应上count+1，对不上就再回到原来后一个位置继续比较。</p>\n<pre>#include \"stdio.h\"\n\nint pp(char *s1,char *s2,int l1,int l2){\n    int count=0,i,j=0;\n    for(i=0;i&lt;l1;i++){\n        if(s1[i]==s2[j]){\n            j++;\n            if(j==l2){\n                count++;\n                i=i-j+1;\n                j=0;\n            }\n        }else{\n            i=i-j;\n            j=0;\n        }\n    }\n    return count;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int count = 0,i,l1,l2;\n        char s1[100],s2[100];\n        scanf(\"%s\",&amp;s1);\n        scanf(\"%s\",&amp;s2);\n        for(l1=0;s1[l1]!='\\0';++l1);\n        for(l2=0;s2[l2]!='\\0';++l2);\n        res[k] = pp(s1,s2,l1,l2);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>5.吃金币游戏。这个我也没通过。本人思路是先找第一个点，然后遍历和它连接的下一步可行点，然后每个点在递归运行，这个是dfs主要部分。剪枝的话：如果在两步以外又回到走过的点就是形成环舍去，两步以内或没走过可行；同一路同方向不重复走（考虑他下一个递归讲将和之前完全一模一样）。结果：每次求该路径的金币数，取最大值。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint x=1;\nint line_his[10000]={0};\nint line_dir[10000];\nint maxV=0;\n\nint check(int n){\n    int i;\n    for(i=x-2;i&gt;=x-3;i--){\n        if(line_his[i]==n){\n            return 1;\n        }\n    }\n    for(i=x-4;i&gt;=0;i--){\n        if(line_his[i]==n){\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint get_road(int *arr,int r,int n,int *tmp){\n    int t=0,i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n || arr[i+1]==n){\n            tmp[t]=arr[i]==n?arr[i+1]:arr[i];\n            t++;\n        }\n    }\n    return t;\n}\n\nint get_value(int *arr,int r,int n1,int n2){\n    int i;\n    for(i=0;i&lt;r*3;i+=3){\n        if(arr[i]==n1 &amp;&amp; arr[i+1]==n2){\n            return arr[i+2];\n        }\n        if(arr[i]==n2 &amp;&amp; arr[i+1]==n1){\n            return arr[i+2];\n        }\n    }\n}\n\nint calc_v(int *arr,int r,int p){\n    int tmp = 0,i;\n    int his[10000]={};\n    for(i=0;i&lt;x-1;i++){\n        if(his[line_his[i]*p+line_his[i+1]]!=1){\n            tmp+=get_value(arr,r,line_his[i],line_his[i+1]);\n        }\n        his[line_his[i]*p+line_his[i+1]]=1;\n        his[line_his[i]+line_his[i+1]*p]=1;\n    }\n    return tmp;\n}\n\n/*int check_all(int p){\n    int i,j,in=0;\n    for(i=0;i&lt;p;i++){\n        for(j=0;j&lt;x;j++){\n            if(i==line_his[j]){\n                in++;\n                break;\n            }\n        }\n    }\n    if(in==p){\n        return 1;\n    }else{\n        return 0;\n    }\n}*/\n\nint dfs(int *arr,int r,int p,int n){\n    int i,t,tt;\n    int tmp[10000];\n    //if(check_all(p)){\n    tt = calc_v(arr,r,p);\n    maxV = max(maxV,tt);\n    t = get_road(arr,r,n,tmp);\n    for(i=0;i&lt;t;i++){\n        if(line_dir[n*p+tmp[i]]==1){\n            continue;\n        }\n        line_his[x]=tmp[i];\n        line_dir[n*p+tmp[i]]=1;\n        x++;\n        if(check(tmp[i]))\n            dfs(arr,r,p,tmp[i]);\n        line_his[x]=-1;\n        line_dir[n*p+tmp[i]]=-1;\n        x--;\n    }\n    return maxV;\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        maxV=0;\n        x=1;\n        int p,r,i,t;\n        scanf(\"%d\",&amp;p);\n        scanf(\"%d\",&amp;r);\n        int arr[r*3];\n        for(i=0;i&lt;r*3;i++){\n            scanf(\"%d\",&amp;arr[i]);\n        }\n        result[k] = dfs(arr,r,p,0);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>"},{"title":"整理下二叉树","catalog":true,"date":"2018-04-22T05:16:24.000Z","_content":"\n在leetcode遇到二叉树就卡机，恶补下这种数据结构，想想都难。<!--more-->\n\n首先是节点构建和插入，这里的插入形式用来下面排序，小的在左，大的在右。\n<pre>class Node():\n    def __init__(self, val=None, left= None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def add(self, val):\n        if val &lt; self.val:\n            if self.left is None:\n                self.left = Node(val)\n            else:\n                self.left.add(val)\n        else:\n            if self.right is None:\n                self.right = Node(val)\n            else:\n                self.right.add(val)</pre>\n然后是三种遍历方式\n<pre>#先序\ndef front(root,res=[]):\n    if root == None:\n        return\n    res.append(root.val)\n    front(root.left,res)\n    front(root.right,res)\n    return res\n#中序（这个的得到的便是排序后的数组）\ndef middle(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    res.append(root.val)\n    front(root.right,res)\n    return res\n#后序\ndef end(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    front(root.right,res)\n    res.append(root.val)\n    return res</pre>\n下面是一些应用\n\n1.判断二叉树是否是左右镜像的\n\n思路：输入根节点左右两个节点，判断两节点是否相同，然后递归判断左节点的左节点和右节点的右节点 以及 左节点的右节点和右节点的左节点。\n<pre>def judge(left,right):\n    if left is None and right is None:\n        return True\n    if (left is None and right is not None) or (right is None and left is not None) or right.val != left.val:\n        return False\n    return judge(left.left,right.right) and judge(left.right,right.left)</pre>\n2.二叉树最大深度\n\n思路：左右节点分别设一个长度，进入深一层长度就加一，返回的是两者之间大的一方，也就的到所有路径深度中最大的一个。\n<pre>def depth(root):\n    if root is None:\n        return 0\n    l = depth(root.left)\n    r = depth(root.right)\n    return max([l,r])+1</pre>\n3.左右翻转二叉树\n\n思路：也就是把二叉树中所有的左右节点都换一下便可。\n<pre>def invertTree(root):\n    if root is None:\n        return None\n    if root.left:\n        invertTree(root.left)\n    if root.right:\n        invertTree(root.right)\n    root.left,root.right = root.right,root.left\n    return root</pre>\n4.二叉树右往左的叠加和\n\n思路：设立一个全局的和，对于每个节点都加上这个和，然后更新和，把节点从右往左遍历便是把中序遍历反一下。\n<pre>sum = 0\ndef bst(self,root):\n    if root is None:\n        return\n    self.bst(root.right)\n    root.val += sum\n    sum = root.val\n    self.bst(root.left)</pre>\n5.最长子树长度，可不过根节点\n\n思路：在最大深度的基础上，添加一个变量来计算每次的左右子树和。\n<pre>res = 0\ndef depth(self,root):\n    if root is None:\n        return 0\n    l = self.depth(root.left)\n    r = self.depth(root.right)\n    res = max(res,l+r)\n    return max([l,r])+1</pre>\n6.判断一个树是否是另一个的子树\n\n思路：对主树递归所有节点，只要有一个是子树成立便可。每次在递归检查子树与主树是否相同，这里所有节点都要一样。\n<pre>class Solution(object):\n    def isSubtree(self, s, t):\n        if not s or not t:\n            return not s and not t\n        if self.check(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def check(self,s,t):\n        if not s or not t:\n            return not s and not t\n        if s.val != t.val:\n            return False\n        return self.check(s.left,t.left) and self.check(s.right,t.right)</pre>\n7.合并二叉树\n\n思路：遍历两个二叉树的节点，把和加到一个二叉树上\n<pre>def mergeTrees(self, t1, t2):\n    if t1 is not None and t2 is not None:\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        t1.val += t2.val\n        return t1\n    return t1 if t2 is None else t2</pre>\n","source":"_posts/2018/article_17_整理下二叉树.md","raw":"\n---\ntitle: 整理下二叉树\ncatalog: true\ndate: 2018-4-22 13:16:24\n---\n\n在leetcode遇到二叉树就卡机，恶补下这种数据结构，想想都难。<!--more-->\n\n首先是节点构建和插入，这里的插入形式用来下面排序，小的在左，大的在右。\n<pre>class Node():\n    def __init__(self, val=None, left= None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def add(self, val):\n        if val &lt; self.val:\n            if self.left is None:\n                self.left = Node(val)\n            else:\n                self.left.add(val)\n        else:\n            if self.right is None:\n                self.right = Node(val)\n            else:\n                self.right.add(val)</pre>\n然后是三种遍历方式\n<pre>#先序\ndef front(root,res=[]):\n    if root == None:\n        return\n    res.append(root.val)\n    front(root.left,res)\n    front(root.right,res)\n    return res\n#中序（这个的得到的便是排序后的数组）\ndef middle(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    res.append(root.val)\n    front(root.right,res)\n    return res\n#后序\ndef end(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    front(root.right,res)\n    res.append(root.val)\n    return res</pre>\n下面是一些应用\n\n1.判断二叉树是否是左右镜像的\n\n思路：输入根节点左右两个节点，判断两节点是否相同，然后递归判断左节点的左节点和右节点的右节点 以及 左节点的右节点和右节点的左节点。\n<pre>def judge(left,right):\n    if left is None and right is None:\n        return True\n    if (left is None and right is not None) or (right is None and left is not None) or right.val != left.val:\n        return False\n    return judge(left.left,right.right) and judge(left.right,right.left)</pre>\n2.二叉树最大深度\n\n思路：左右节点分别设一个长度，进入深一层长度就加一，返回的是两者之间大的一方，也就的到所有路径深度中最大的一个。\n<pre>def depth(root):\n    if root is None:\n        return 0\n    l = depth(root.left)\n    r = depth(root.right)\n    return max([l,r])+1</pre>\n3.左右翻转二叉树\n\n思路：也就是把二叉树中所有的左右节点都换一下便可。\n<pre>def invertTree(root):\n    if root is None:\n        return None\n    if root.left:\n        invertTree(root.left)\n    if root.right:\n        invertTree(root.right)\n    root.left,root.right = root.right,root.left\n    return root</pre>\n4.二叉树右往左的叠加和\n\n思路：设立一个全局的和，对于每个节点都加上这个和，然后更新和，把节点从右往左遍历便是把中序遍历反一下。\n<pre>sum = 0\ndef bst(self,root):\n    if root is None:\n        return\n    self.bst(root.right)\n    root.val += sum\n    sum = root.val\n    self.bst(root.left)</pre>\n5.最长子树长度，可不过根节点\n\n思路：在最大深度的基础上，添加一个变量来计算每次的左右子树和。\n<pre>res = 0\ndef depth(self,root):\n    if root is None:\n        return 0\n    l = self.depth(root.left)\n    r = self.depth(root.right)\n    res = max(res,l+r)\n    return max([l,r])+1</pre>\n6.判断一个树是否是另一个的子树\n\n思路：对主树递归所有节点，只要有一个是子树成立便可。每次在递归检查子树与主树是否相同，这里所有节点都要一样。\n<pre>class Solution(object):\n    def isSubtree(self, s, t):\n        if not s or not t:\n            return not s and not t\n        if self.check(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def check(self,s,t):\n        if not s or not t:\n            return not s and not t\n        if s.val != t.val:\n            return False\n        return self.check(s.left,t.left) and self.check(s.right,t.right)</pre>\n7.合并二叉树\n\n思路：遍历两个二叉树的节点，把和加到一个二叉树上\n<pre>def mergeTrees(self, t1, t2):\n    if t1 is not None and t2 is not None:\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        t1.val += t2.val\n        return t1\n    return t1 if t2 is None else t2</pre>\n","slug":"2018/article_17_整理下二叉树","published":1,"updated":"2021-01-27T04:46:28.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73o001y0770sfg124hs","content":"<p>在leetcode遇到二叉树就卡机，恶补下这种数据结构，想想都难。<a id=\"more\"></a></p>\n<p>首先是节点构建和插入，这里的插入形式用来下面排序，小的在左，大的在右。</p>\n<pre>class Node():\n    def __init__(self, val=None, left= None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def add(self, val):\n        if val &lt; self.val:\n            if self.left is None:\n                self.left = Node(val)\n            else:\n                self.left.add(val)\n        else:\n            if self.right is None:\n                self.right = Node(val)\n            else:\n                self.right.add(val)</pre>\n<p>然后是三种遍历方式</p>\n<pre>#先序\ndef front(root,res=[]):\n    if root == None:\n        return\n    res.append(root.val)\n    front(root.left,res)\n    front(root.right,res)\n    return res\n#中序（这个的得到的便是排序后的数组）\ndef middle(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    res.append(root.val)\n    front(root.right,res)\n    return res\n#后序\ndef end(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    front(root.right,res)\n    res.append(root.val)\n    return res</pre>\n<p>下面是一些应用</p>\n<p>1.判断二叉树是否是左右镜像的</p>\n<p>思路：输入根节点左右两个节点，判断两节点是否相同，然后递归判断左节点的左节点和右节点的右节点 以及 左节点的右节点和右节点的左节点。</p>\n<pre>def judge(left,right):\n    if left is None and right is None:\n        return True\n    if (left is None and right is not None) or (right is None and left is not None) or right.val != left.val:\n        return False\n    return judge(left.left,right.right) and judge(left.right,right.left)</pre>\n<p>2.二叉树最大深度</p>\n<p>思路：左右节点分别设一个长度，进入深一层长度就加一，返回的是两者之间大的一方，也就的到所有路径深度中最大的一个。</p>\n<pre>def depth(root):\n    if root is None:\n        return 0\n    l = depth(root.left)\n    r = depth(root.right)\n    return max([l,r])+1</pre>\n<p>3.左右翻转二叉树</p>\n<p>思路：也就是把二叉树中所有的左右节点都换一下便可。</p>\n<pre>def invertTree(root):\n    if root is None:\n        return None\n    if root.left:\n        invertTree(root.left)\n    if root.right:\n        invertTree(root.right)\n    root.left,root.right = root.right,root.left\n    return root</pre>\n<p>4.二叉树右往左的叠加和</p>\n<p>思路：设立一个全局的和，对于每个节点都加上这个和，然后更新和，把节点从右往左遍历便是把中序遍历反一下。</p>\n<pre>sum = 0\ndef bst(self,root):\n    if root is None:\n        return\n    self.bst(root.right)\n    root.val += sum\n    sum = root.val\n    self.bst(root.left)</pre>\n<p>5.最长子树长度，可不过根节点</p>\n<p>思路：在最大深度的基础上，添加一个变量来计算每次的左右子树和。</p>\n<pre>res = 0\ndef depth(self,root):\n    if root is None:\n        return 0\n    l = self.depth(root.left)\n    r = self.depth(root.right)\n    res = max(res,l+r)\n    return max([l,r])+1</pre>\n<p>6.判断一个树是否是另一个的子树</p>\n<p>思路：对主树递归所有节点，只要有一个是子树成立便可。每次在递归检查子树与主树是否相同，这里所有节点都要一样。</p>\n<pre>class Solution(object):\n    def isSubtree(self, s, t):\n        if not s or not t:\n            return not s and not t\n        if self.check(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def check(self,s,t):\n        if not s or not t:\n            return not s and not t\n        if s.val != t.val:\n            return False\n        return self.check(s.left,t.left) and self.check(s.right,t.right)</pre>\n<p>7.合并二叉树</p>\n<p>思路：遍历两个二叉树的节点，把和加到一个二叉树上</p>\n<pre>def mergeTrees(self, t1, t2):\n    if t1 is not None and t2 is not None:\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        t1.val += t2.val\n        return t1\n    return t1 if t2 is None else t2</pre>\n","excerpt":"<p>在leetcode遇到二叉树就卡机，恶补下这种数据结构，想想都难。","more":"</p>\n<p>首先是节点构建和插入，这里的插入形式用来下面排序，小的在左，大的在右。</p>\n<pre>class Node():\n    def __init__(self, val=None, left= None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def add(self, val):\n        if val &lt; self.val:\n            if self.left is None:\n                self.left = Node(val)\n            else:\n                self.left.add(val)\n        else:\n            if self.right is None:\n                self.right = Node(val)\n            else:\n                self.right.add(val)</pre>\n<p>然后是三种遍历方式</p>\n<pre>#先序\ndef front(root,res=[]):\n    if root == None:\n        return\n    res.append(root.val)\n    front(root.left,res)\n    front(root.right,res)\n    return res\n#中序（这个的得到的便是排序后的数组）\ndef middle(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    res.append(root.val)\n    front(root.right,res)\n    return res\n#后序\ndef end(root,res=[]):\n    if root == None:\n        return\n    front(root.left,res)\n    front(root.right,res)\n    res.append(root.val)\n    return res</pre>\n<p>下面是一些应用</p>\n<p>1.判断二叉树是否是左右镜像的</p>\n<p>思路：输入根节点左右两个节点，判断两节点是否相同，然后递归判断左节点的左节点和右节点的右节点 以及 左节点的右节点和右节点的左节点。</p>\n<pre>def judge(left,right):\n    if left is None and right is None:\n        return True\n    if (left is None and right is not None) or (right is None and left is not None) or right.val != left.val:\n        return False\n    return judge(left.left,right.right) and judge(left.right,right.left)</pre>\n<p>2.二叉树最大深度</p>\n<p>思路：左右节点分别设一个长度，进入深一层长度就加一，返回的是两者之间大的一方，也就的到所有路径深度中最大的一个。</p>\n<pre>def depth(root):\n    if root is None:\n        return 0\n    l = depth(root.left)\n    r = depth(root.right)\n    return max([l,r])+1</pre>\n<p>3.左右翻转二叉树</p>\n<p>思路：也就是把二叉树中所有的左右节点都换一下便可。</p>\n<pre>def invertTree(root):\n    if root is None:\n        return None\n    if root.left:\n        invertTree(root.left)\n    if root.right:\n        invertTree(root.right)\n    root.left,root.right = root.right,root.left\n    return root</pre>\n<p>4.二叉树右往左的叠加和</p>\n<p>思路：设立一个全局的和，对于每个节点都加上这个和，然后更新和，把节点从右往左遍历便是把中序遍历反一下。</p>\n<pre>sum = 0\ndef bst(self,root):\n    if root is None:\n        return\n    self.bst(root.right)\n    root.val += sum\n    sum = root.val\n    self.bst(root.left)</pre>\n<p>5.最长子树长度，可不过根节点</p>\n<p>思路：在最大深度的基础上，添加一个变量来计算每次的左右子树和。</p>\n<pre>res = 0\ndef depth(self,root):\n    if root is None:\n        return 0\n    l = self.depth(root.left)\n    r = self.depth(root.right)\n    res = max(res,l+r)\n    return max([l,r])+1</pre>\n<p>6.判断一个树是否是另一个的子树</p>\n<p>思路：对主树递归所有节点，只要有一个是子树成立便可。每次在递归检查子树与主树是否相同，这里所有节点都要一样。</p>\n<pre>class Solution(object):\n    def isSubtree(self, s, t):\n        if not s or not t:\n            return not s and not t\n        if self.check(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n    \n    def check(self,s,t):\n        if not s or not t:\n            return not s and not t\n        if s.val != t.val:\n            return False\n        return self.check(s.left,t.left) and self.check(s.right,t.right)</pre>\n<p>7.合并二叉树</p>\n<p>思路：遍历两个二叉树的节点，把和加到一个二叉树上</p>\n<pre>def mergeTrees(self, t1, t2):\n    if t1 is not None and t2 is not None:\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        t1.val += t2.val\n        return t1\n    return t1 if t2 is None else t2</pre>"},{"title":"练手c语言算法二","catalog":true,"date":"2018-05-06T03:53:42.000Z","_content":"\n大华2018软件挑战赛，这里是后五题。<!--more-->\n\n6.视频编解码。16进制的数存储，加些简单的判断（开头判断，结尾判断，中间舍去部分判断）。\n<pre>#include \"stdio.h\"\n\nint main(){\n    int T,k,x=0,y=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[10000],ns[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,start=0,t=0;\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%x\",&amp;nums[i]);\n        }\n        for(i=0;i&lt;n-3;i++){\n            if(start==5 &amp;&amp; nums[i-2]==0 &amp;&amp; nums[i-1]==0 &amp;&amp; nums[i]==03 &amp;&amp; nums[i+1]==0){\n                continue;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==0){\n                start=1;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==5){\n                start=0;\n            }\n            if(start&gt;=1 &amp;&amp; start&lt;=4){\n                start++;\n            }\n            if(start==5){\n                res[x]=nums[i];\n                x++;\n                t++;\n            }\n        }\n        ns[k] = t;\n    }\n    for(k=0;k&lt;T;k++){\n        for(y=0;y&lt;ns[k];y++){\n            printf(\"%x \",res[y+tmp]);\n        }\n        tmp += ns[k];\n        printf(\"\\n\");\n    }\n}</pre>\n7.不重复最长子串长度。也是状态转移，一个变量指在子串左边，一个在右边移动。另外用一个数组存位置和判断值是否存在。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int l1,i,tmp,ml=0,left=0,m=0;\n        char s[100],asc[26];\n        scanf(\"%s\",&amp;s);\n        for(l1=0;s[l1]!='\\0';++l1);\n        for(i=0;i&lt;26;i++){\n            asc[i]=-1;\n        }\n        for(i=0;i&lt;l1;i++){\n            tmp = s[i]-97;\n            if(asc[tmp]==-1 || asc[tmp]&lt;left){\n                asc[tmp]=i;\n            }else{\n                left=asc[tmp]+1;\n                asc[tmp]=i;\n            }\n            m = max(i-left+1,m);\n        }\n        res[k]=m;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n8.二进制位数和等于十进制位数和。这边就暴力的每个算过来判断是不是这种数。\n<pre>#include \"stdio.h\"\n\nint judge(n){\n    int b=n,tmp=0;\n    while(b!=0)\n    {\n        tmp+=b%2;\n        b=b/2;\n    }\n    b=n;\n    while(b!=0){\n        tmp-=b%10;\n        b=b/10;\n    }\n    if(tmp==0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,res=0;\n        scanf(\"%d\",&amp;n);\n        for(i=1;i&lt;=n;i++){\n            res+=judge(i);\n        }\n        result[k]=res;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n9.买卖交易。这个和leetcode上有个讲股票买卖的差不多，就每次后面比前面大的话就卖出买入就可以。\n<pre>#include \"stdio.h\"\n\nint calc(int *nums,int n){\n    int i,res=0;\n    for(i=0;i&lt;n-1;i++){\n        res += nums[i+1]&gt;nums[i]?nums[i+1]-nums[i]:0;\n    }\n    return res;\n}\n\nint main(){\n    int T,k,n,i;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    scanf(\"%d\",&amp;n);\n    int nums[n];\n    for(k=0;k&lt;T;k++){\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        res[k] = calc(nums,n);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n10.二叉树右视图，主要还是用先序构建二叉树，右视图的话就是右子树优先遍历即可。\n<pre>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;malloc.h&gt;\n\ntypedef int   ElemType;\ntypedef struct BiTNode{\n    ElemType   data;\n    struct BiTNode*lChild, *rChild;\n}BiTNode, *BiTree;\n\nint i=0,maxdepth=0,al=0;\nint res[100],nums[100];\n\nint CreateBiTree(BiTree *T,char *s)\n{\n    ElemType ch;\n    ch = s[i];\n    i++;\n\n    if(ch=='#'){\n        *T = NULL;\n    }else{\n        *T = (BiTree)malloc(sizeof(BiTNode));\n        if (!(*T)) exit(-1);\n\n        (*T)-&gt;data = ch-'0';\n        CreateBiTree(&amp;(*T)-&gt;lChild,s);\n        CreateBiTree(&amp;(*T)-&gt;rChild,s);\n    }\n    return 1;\n}\n\nvoid calc(BiTree T, int depth){\n    if(depth&gt;maxdepth){\n        res[maxdepth+al] = T-&gt;data;\n        maxdepth = depth;\n    }\n    if(T-&gt;rChild!=NULL) calc(T-&gt;rChild, depth+1);\n    if(T-&gt;lChild!=NULL) calc(T-&gt;lChild, depth+1);\n}\n\nint main(void)\n{\n    int t,k,all=0;\n    scanf(\"%d\",&amp;t);\n    BiTree T;\n    for(k=0;k&lt;t;k++){\n        i=0;\n        T = NULL;\n        maxdepth=0;\n        char s[1000];\n        scanf(\"%s\",&amp;s);\n        CreateBiTree(&amp;T,s);\n        calc(T,1);\n        al+=maxdepth;\n        nums[k]=maxdepth;\n    }\n    for(i=0;i&lt;t;i++){\n        for(k=0;k&lt;nums[i];k++){\n            printf(\"%d\",res[k+all]);\n        }\n        all+=nums[i];\n        printf(\"\\n\");\n    }\n}</pre>\n","source":"_posts/2018/article_19_练手c语言算法二.md","raw":"\n---\ntitle: 练手c语言算法二\ncatalog: true\ndate: 2018-5-6 11:53:42\n---\n\n大华2018软件挑战赛，这里是后五题。<!--more-->\n\n6.视频编解码。16进制的数存储，加些简单的判断（开头判断，结尾判断，中间舍去部分判断）。\n<pre>#include \"stdio.h\"\n\nint main(){\n    int T,k,x=0,y=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[10000],ns[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,start=0,t=0;\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%x\",&amp;nums[i]);\n        }\n        for(i=0;i&lt;n-3;i++){\n            if(start==5 &amp;&amp; nums[i-2]==0 &amp;&amp; nums[i-1]==0 &amp;&amp; nums[i]==03 &amp;&amp; nums[i+1]==0){\n                continue;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==0){\n                start=1;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==5){\n                start=0;\n            }\n            if(start&gt;=1 &amp;&amp; start&lt;=4){\n                start++;\n            }\n            if(start==5){\n                res[x]=nums[i];\n                x++;\n                t++;\n            }\n        }\n        ns[k] = t;\n    }\n    for(k=0;k&lt;T;k++){\n        for(y=0;y&lt;ns[k];y++){\n            printf(\"%x \",res[y+tmp]);\n        }\n        tmp += ns[k];\n        printf(\"\\n\");\n    }\n}</pre>\n7.不重复最长子串长度。也是状态转移，一个变量指在子串左边，一个在右边移动。另外用一个数组存位置和判断值是否存在。\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int l1,i,tmp,ml=0,left=0,m=0;\n        char s[100],asc[26];\n        scanf(\"%s\",&amp;s);\n        for(l1=0;s[l1]!='\\0';++l1);\n        for(i=0;i&lt;26;i++){\n            asc[i]=-1;\n        }\n        for(i=0;i&lt;l1;i++){\n            tmp = s[i]-97;\n            if(asc[tmp]==-1 || asc[tmp]&lt;left){\n                asc[tmp]=i;\n            }else{\n                left=asc[tmp]+1;\n                asc[tmp]=i;\n            }\n            m = max(i-left+1,m);\n        }\n        res[k]=m;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n8.二进制位数和等于十进制位数和。这边就暴力的每个算过来判断是不是这种数。\n<pre>#include \"stdio.h\"\n\nint judge(n){\n    int b=n,tmp=0;\n    while(b!=0)\n    {\n        tmp+=b%2;\n        b=b/2;\n    }\n    b=n;\n    while(b!=0){\n        tmp-=b%10;\n        b=b/10;\n    }\n    if(tmp==0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,res=0;\n        scanf(\"%d\",&amp;n);\n        for(i=1;i&lt;=n;i++){\n            res+=judge(i);\n        }\n        result[k]=res;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n9.买卖交易。这个和leetcode上有个讲股票买卖的差不多，就每次后面比前面大的话就卖出买入就可以。\n<pre>#include \"stdio.h\"\n\nint calc(int *nums,int n){\n    int i,res=0;\n    for(i=0;i&lt;n-1;i++){\n        res += nums[i+1]&gt;nums[i]?nums[i+1]-nums[i]:0;\n    }\n    return res;\n}\n\nint main(){\n    int T,k,n,i;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    scanf(\"%d\",&amp;n);\n    int nums[n];\n    for(k=0;k&lt;T;k++){\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        res[k] = calc(nums,n);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n10.二叉树右视图，主要还是用先序构建二叉树，右视图的话就是右子树优先遍历即可。\n<pre>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;malloc.h&gt;\n\ntypedef int   ElemType;\ntypedef struct BiTNode{\n    ElemType   data;\n    struct BiTNode*lChild, *rChild;\n}BiTNode, *BiTree;\n\nint i=0,maxdepth=0,al=0;\nint res[100],nums[100];\n\nint CreateBiTree(BiTree *T,char *s)\n{\n    ElemType ch;\n    ch = s[i];\n    i++;\n\n    if(ch=='#'){\n        *T = NULL;\n    }else{\n        *T = (BiTree)malloc(sizeof(BiTNode));\n        if (!(*T)) exit(-1);\n\n        (*T)-&gt;data = ch-'0';\n        CreateBiTree(&amp;(*T)-&gt;lChild,s);\n        CreateBiTree(&amp;(*T)-&gt;rChild,s);\n    }\n    return 1;\n}\n\nvoid calc(BiTree T, int depth){\n    if(depth&gt;maxdepth){\n        res[maxdepth+al] = T-&gt;data;\n        maxdepth = depth;\n    }\n    if(T-&gt;rChild!=NULL) calc(T-&gt;rChild, depth+1);\n    if(T-&gt;lChild!=NULL) calc(T-&gt;lChild, depth+1);\n}\n\nint main(void)\n{\n    int t,k,all=0;\n    scanf(\"%d\",&amp;t);\n    BiTree T;\n    for(k=0;k&lt;t;k++){\n        i=0;\n        T = NULL;\n        maxdepth=0;\n        char s[1000];\n        scanf(\"%s\",&amp;s);\n        CreateBiTree(&amp;T,s);\n        calc(T,1);\n        al+=maxdepth;\n        nums[k]=maxdepth;\n    }\n    for(i=0;i&lt;t;i++){\n        for(k=0;k&lt;nums[i];k++){\n            printf(\"%d\",res[k+all]);\n        }\n        all+=nums[i];\n        printf(\"\\n\");\n    }\n}</pre>\n","slug":"2018/article_19_练手c语言算法二","published":1,"updated":"2021-01-27T04:46:28.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73p001z0770h4w44sqp","content":"<p>大华2018软件挑战赛，这里是后五题。<a id=\"more\"></a></p>\n<p>6.视频编解码。16进制的数存储，加些简单的判断（开头判断，结尾判断，中间舍去部分判断）。</p>\n<pre>#include \"stdio.h\"\n\nint main(){\n    int T,k,x=0,y=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[10000],ns[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,start=0,t=0;\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%x\",&amp;nums[i]);\n        }\n        for(i=0;i&lt;n-3;i++){\n            if(start==5 &amp;&amp; nums[i-2]==0 &amp;&amp; nums[i-1]==0 &amp;&amp; nums[i]==03 &amp;&amp; nums[i+1]==0){\n                continue;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==0){\n                start=1;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==5){\n                start=0;\n            }\n            if(start&gt;=1 &amp;&amp; start&lt;=4){\n                start++;\n            }\n            if(start==5){\n                res[x]=nums[i];\n                x++;\n                t++;\n            }\n        }\n        ns[k] = t;\n    }\n    for(k=0;k&lt;T;k++){\n        for(y=0;y&lt;ns[k];y++){\n            printf(\"%x \",res[y+tmp]);\n        }\n        tmp += ns[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>7.不重复最长子串长度。也是状态转移，一个变量指在子串左边，一个在右边移动。另外用一个数组存位置和判断值是否存在。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int l1,i,tmp,ml=0,left=0,m=0;\n        char s[100],asc[26];\n        scanf(\"%s\",&amp;s);\n        for(l1=0;s[l1]!='\\0';++l1);\n        for(i=0;i&lt;26;i++){\n            asc[i]=-1;\n        }\n        for(i=0;i&lt;l1;i++){\n            tmp = s[i]-97;\n            if(asc[tmp]==-1 || asc[tmp]&lt;left){\n                asc[tmp]=i;\n            }else{\n                left=asc[tmp]+1;\n                asc[tmp]=i;\n            }\n            m = max(i-left+1,m);\n        }\n        res[k]=m;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>8.二进制位数和等于十进制位数和。这边就暴力的每个算过来判断是不是这种数。</p>\n<pre>#include \"stdio.h\"\n\nint judge(n){\n    int b=n,tmp=0;\n    while(b!=0)\n    {\n        tmp+=b%2;\n        b=b/2;\n    }\n    b=n;\n    while(b!=0){\n        tmp-=b%10;\n        b=b/10;\n    }\n    if(tmp==0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,res=0;\n        scanf(\"%d\",&amp;n);\n        for(i=1;i&lt;=n;i++){\n            res+=judge(i);\n        }\n        result[k]=res;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n<p>9.买卖交易。这个和leetcode上有个讲股票买卖的差不多，就每次后面比前面大的话就卖出买入就可以。</p>\n<pre>#include \"stdio.h\"\n\nint calc(int *nums,int n){\n    int i,res=0;\n    for(i=0;i&lt;n-1;i++){\n        res += nums[i+1]&gt;nums[i]?nums[i+1]-nums[i]:0;\n    }\n    return res;\n}\n\nint main(){\n    int T,k,n,i;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    scanf(\"%d\",&amp;n);\n    int nums[n];\n    for(k=0;k&lt;T;k++){\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        res[k] = calc(nums,n);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>10.二叉树右视图，主要还是用先序构建二叉树，右视图的话就是右子树优先遍历即可。</p>\n<pre>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;malloc.h&gt;\n\ntypedef int   ElemType;\ntypedef struct BiTNode{\n    ElemType   data;\n    struct BiTNode*lChild, *rChild;\n}BiTNode, *BiTree;\n\nint i=0,maxdepth=0,al=0;\nint res[100],nums[100];\n\nint CreateBiTree(BiTree *T,char *s)\n{\n    ElemType ch;\n    ch = s[i];\n    i++;\n\n    if(ch=='#'){\n        *T = NULL;\n    }else{\n        *T = (BiTree)malloc(sizeof(BiTNode));\n        if (!(*T)) exit(-1);\n\n        (*T)-&gt;data = ch-'0';\n        CreateBiTree(&amp;(*T)-&gt;lChild,s);\n        CreateBiTree(&amp;(*T)-&gt;rChild,s);\n    }\n    return 1;\n}\n\nvoid calc(BiTree T, int depth){\n    if(depth&gt;maxdepth){\n        res[maxdepth+al] = T-&gt;data;\n        maxdepth = depth;\n    }\n    if(T-&gt;rChild!=NULL) calc(T-&gt;rChild, depth+1);\n    if(T-&gt;lChild!=NULL) calc(T-&gt;lChild, depth+1);\n}\n\nint main(void)\n{\n    int t,k,all=0;\n    scanf(\"%d\",&amp;t);\n    BiTree T;\n    for(k=0;k&lt;t;k++){\n        i=0;\n        T = NULL;\n        maxdepth=0;\n        char s[1000];\n        scanf(\"%s\",&amp;s);\n        CreateBiTree(&amp;T,s);\n        calc(T,1);\n        al+=maxdepth;\n        nums[k]=maxdepth;\n    }\n    for(i=0;i&lt;t;i++){\n        for(k=0;k&lt;nums[i];k++){\n            printf(\"%d\",res[k+all]);\n        }\n        all+=nums[i];\n        printf(\"\\n\");\n    }\n}</pre>\n","excerpt":"<p>大华2018软件挑战赛，这里是后五题。","more":"</p>\n<p>6.视频编解码。16进制的数存储，加些简单的判断（开头判断，结尾判断，中间舍去部分判断）。</p>\n<pre>#include \"stdio.h\"\n\nint main(){\n    int T,k,x=0,y=0,tmp=0;\n    scanf(\"%d\",&amp;T);\n    int res[10000],ns[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,start=0,t=0;\n        scanf(\"%d\",&amp;n);\n        int nums[n];\n        for(i=0;i&lt;n;i++){\n            scanf(\"%x\",&amp;nums[i]);\n        }\n        for(i=0;i&lt;n-3;i++){\n            if(start==5 &amp;&amp; nums[i-2]==0 &amp;&amp; nums[i-1]==0 &amp;&amp; nums[i]==03 &amp;&amp; nums[i+1]==0){\n                continue;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==0){\n                start=1;\n            }\n            if(nums[i]==0 &amp;&amp; nums[i+1]==0 &amp;&amp; nums[i+2]==01 &amp;&amp; start==5){\n                start=0;\n            }\n            if(start&gt;=1 &amp;&amp; start&lt;=4){\n                start++;\n            }\n            if(start==5){\n                res[x]=nums[i];\n                x++;\n                t++;\n            }\n        }\n        ns[k] = t;\n    }\n    for(k=0;k&lt;T;k++){\n        for(y=0;y&lt;ns[k];y++){\n            printf(\"%x \",res[y+tmp]);\n        }\n        tmp += ns[k];\n        printf(\"\\n\");\n    }\n}</pre>\n<p>7.不重复最长子串长度。也是状态转移，一个变量指在子串左边，一个在右边移动。另外用一个数组存位置和判断值是否存在。</p>\n<pre>#include \"stdio.h\"\n#define max(a,b) ((a)&gt;(b)?(a):(b))\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    for(k=0;k&lt;T;k++){\n        int l1,i,tmp,ml=0,left=0,m=0;\n        char s[100],asc[26];\n        scanf(\"%s\",&amp;s);\n        for(l1=0;s[l1]!='\\0';++l1);\n        for(i=0;i&lt;26;i++){\n            asc[i]=-1;\n        }\n        for(i=0;i&lt;l1;i++){\n            tmp = s[i]-97;\n            if(asc[tmp]==-1 || asc[tmp]&lt;left){\n                asc[tmp]=i;\n            }else{\n                left=asc[tmp]+1;\n                asc[tmp]=i;\n            }\n            m = max(i-left+1,m);\n        }\n        res[k]=m;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>8.二进制位数和等于十进制位数和。这边就暴力的每个算过来判断是不是这种数。</p>\n<pre>#include \"stdio.h\"\n\nint judge(n){\n    int b=n,tmp=0;\n    while(b!=0)\n    {\n        tmp+=b%2;\n        b=b/2;\n    }\n    b=n;\n    while(b!=0){\n        tmp-=b%10;\n        b=b/10;\n    }\n    if(tmp==0){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int T,k;\n    scanf(\"%d\",&amp;T);\n    int result[T];\n    for(k=0;k&lt;T;k++){\n        int n,i,res=0;\n        scanf(\"%d\",&amp;n);\n        for(i=1;i&lt;=n;i++){\n            res+=judge(i);\n        }\n        result[k]=res;\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",result[k]);\n    }\n}</pre>\n<p>9.买卖交易。这个和leetcode上有个讲股票买卖的差不多，就每次后面比前面大的话就卖出买入就可以。</p>\n<pre>#include \"stdio.h\"\n\nint calc(int *nums,int n){\n    int i,res=0;\n    for(i=0;i&lt;n-1;i++){\n        res += nums[i+1]&gt;nums[i]?nums[i+1]-nums[i]:0;\n    }\n    return res;\n}\n\nint main(){\n    int T,k,n,i;\n    scanf(\"%d\",&amp;T);\n    int res[T];\n    scanf(\"%d\",&amp;n);\n    int nums[n];\n    for(k=0;k&lt;T;k++){\n        for(i=0;i&lt;n;i++){\n            scanf(\"%d\",&amp;nums[i]);\n        }\n        res[k] = calc(nums,n);\n    }\n    for(k=0;k&lt;T;k++){\n        printf(\"%d\\n\",res[k]);\n    }\n}</pre>\n<p>10.二叉树右视图，主要还是用先序构建二叉树，右视图的话就是右子树优先遍历即可。</p>\n<pre>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;malloc.h&gt;\n\ntypedef int   ElemType;\ntypedef struct BiTNode{\n    ElemType   data;\n    struct BiTNode*lChild, *rChild;\n}BiTNode, *BiTree;\n\nint i=0,maxdepth=0,al=0;\nint res[100],nums[100];\n\nint CreateBiTree(BiTree *T,char *s)\n{\n    ElemType ch;\n    ch = s[i];\n    i++;\n\n    if(ch=='#'){\n        *T = NULL;\n    }else{\n        *T = (BiTree)malloc(sizeof(BiTNode));\n        if (!(*T)) exit(-1);\n\n        (*T)-&gt;data = ch-'0';\n        CreateBiTree(&amp;(*T)-&gt;lChild,s);\n        CreateBiTree(&amp;(*T)-&gt;rChild,s);\n    }\n    return 1;\n}\n\nvoid calc(BiTree T, int depth){\n    if(depth&gt;maxdepth){\n        res[maxdepth+al] = T-&gt;data;\n        maxdepth = depth;\n    }\n    if(T-&gt;rChild!=NULL) calc(T-&gt;rChild, depth+1);\n    if(T-&gt;lChild!=NULL) calc(T-&gt;lChild, depth+1);\n}\n\nint main(void)\n{\n    int t,k,all=0;\n    scanf(\"%d\",&amp;t);\n    BiTree T;\n    for(k=0;k&lt;t;k++){\n        i=0;\n        T = NULL;\n        maxdepth=0;\n        char s[1000];\n        scanf(\"%s\",&amp;s);\n        CreateBiTree(&amp;T,s);\n        calc(T,1);\n        al+=maxdepth;\n        nums[k]=maxdepth;\n    }\n    for(i=0;i&lt;t;i++){\n        for(k=0;k&lt;nums[i];k++){\n            printf(\"%d\",res[k+all]);\n        }\n        all+=nums[i];\n        printf(\"\\n\");\n    }\n}</pre>"},{"title":"手持弹幕效果--网页版","catalog":true,"date":"2018-04-06T02:39:27.000Z","_content":"\n看到抖音上手持弹幕的效果，想想应该不复杂，也可以自己在浏览器实现一个。主要问题在于怎么把浏览器上面的搜索框去掉而实现一种伪全屏。结尾有彩蛋。<!--more-->\n\n效果暂时可以在<a href=\"https://ganjiacheng.cn/danmu.html\">https://ganjiacheng.cn/danmu.html</a> 查看。\n\n直接上代码，在其中论述方法。\n<pre> &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;title&gt;手持弹幕&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        html,body{\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            background: #000;\n        }\n        #txt{\n            overflow: visible;\n            white-space: nowrap;\n            transform-origin: 0% 0%;\n            transform: rotate(90deg);\n        }\n        #config{\n            position: absolute;\n            bottom: 0px;\n            width: 100%;\n        }\n        #config input{\n            display: block;\n            width: 100%;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            color: #495057;\n            background-color: #fff;\n            background-clip: padding-box;\n            border: 1px solid #ced4da;\n            border-radius: .25rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n        }\n        #config button{\n            width: 23.5%;\n            display: inline-block;\n            font-weight: 400;\n            text-align: center;\n            white-space: nowrap;\n            vertical-align: middle;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            border: 1px solid transparent;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            border-radius: .25rem;\n            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n            color: #fff;\n            background-color: transparent;\n            background-image: none;\n            border-color: #343a40;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"txt\"&gt;点一下屏幕进入设置&lt;/div&gt;\n    &lt;div id=\"config\" style=\"display:none;\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入文本,tip:上拉一下就可全屏\" id=\"txtContent\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入颜色rgb，格式如:125 125 125\" id=\"color\"&gt;\n        &lt;button id=\"turnLeft\"&gt;左移&lt;/button&gt;\n        &lt;button id=\"turnRight\"&gt;右移&lt;/button&gt;\n        &lt;button id=\"bigger\"&gt;增大&lt;/button&gt;\n        &lt;button id=\"smaller\"&gt;减小&lt;/button&gt;\n        &lt;button id=\"quicker\"&gt;加快&lt;/button&gt;\n        &lt;button id=\"slower\"&gt;减慢&lt;/button&gt;\n        &lt;button id=\"changeFont\"&gt;字体&lt;/button&gt;\n        &lt;button id=\"stunt\"&gt;特技&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取到所需dom\n        var txt = document.getElementById(\"txt\");\n        var config = document.getElementById(\"config\");\n        var txtContent = document.getElementById(\"txtContent\");\n        var color = document.getElementById(\"color\");\n        var turnLeft = document.getElementById(\"turnLeft\");\n        var turnRight = document.getElementById(\"turnRight\");\n        var bigger = document.getElementById(\"bigger\");\n        var smaller = document.getElementById(\"smaller\");\n        var quicker = document.getElementById(\"quicker\");\n        var slower = document.getElementById(\"slower\");\n        var changeFont = document.getElementById(\"changeFont\");\n        var stunt = document.getElementById(\"stunt\");\n        var height = document.body.clientHeight;\n        var width = document.body.clientWidth;\n        var state = 0;\n        var v = 10;\n        var k = 0;\n        //初始化设置，下面改起来方便些\n        txt.style.marginTop = height+\"px\";\n        txt.style.fontSize = \"380px\";\n        txt.style.marginLeft = \"450px\";\n        txt.style.color = \"rgba(255,255,255,1)\"\n\n        config.onclick = function(){\n            state = 1;\n        }\n        //显隐设置栏，消除搜索框也是无意间发现。\n        //由于加了设置栏大于一屏然后可以上拉，上拉后搜索框会折叠。\n        //然后在点击消除设置栏，一些浏览器就会自动占满屏，有些浏览器好像下面会有一栏空。\n        document.body.onclick = function(e){\n            if(state != 1){\n                config.style.display = config.style.display == \"none\" ? \"block\" : \"none\";\n            }\n            state = 0;\n        }\n        //绑定设置输入框和按钮操作\n        txtContent.onchange = function(){\n            txt.innerHTML = this.value\n            txt.style.marginTop = height + \"px\";\n        }\n\n        color.onchange = function(){\n            colors = this.value.split(\" \");\n            txt.style.color = \"rgba(\"+colors[0]+\",\"+colors[1]+\",\"+colors[2]+\",1)\";\n            txt.style.marginTop = height + \"px\";\n        }\n\n        turnLeft.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) - 10 + \"px\";\n        }\n\n        turnRight.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) + 10 + \"px\";\n        }\n\n        bigger.onclick = function(){\n            txt.style.fontSize = parseInt(txt.style.fontSize) + 10 + \"px\";\n        }\n\n        smaller.onclick = function(){\n            console.log(txt.style.fontSize)\n            txt.style.fontSize = parseInt(txt.style.fontSize) - 10 + \"px\";\n            console.log(txt.style.fontSize)\n        }\n\n        quicker.onclick = function(){\n            v += 2\n        }\n\n        slower.onclick = function(){\n            v -= 2\n        }\n\n        changeFont.onclick = function(){\n            fonts = [\"SimSun\",\"SimHei\",\"Microsoft YaHei\",\"Microsoft JhengHei\",\"NSimSun\",\"PMingLiU\",\"MingLiU\",\"DFKai-SB\",\"FangSong\",\"KaiTi\",\"FangSong_GB2312\",\"KaiTi_GB2312\",\"：STHeiti\",\"STKaiti\",\"STSong\",\"STFangsong\",\"LiSu\",\"YouYuan\",\"STXihei\",\"STKaiti\",\"STKaiti\",\"STSong\",\"STZhongsong\",\"STZhongsong\",\"STFangsong\",\"FZYaoti\",\"STZhongsong\",\"STCaiyun\",\"STHupo\",\"STLiti\",\"STXingkai\",\"STXinwei\"]\n            txt.style.fontFamily = fonts[k];\n            k+=1;\n        }\n\n        stunt.onclick = function(){\n            alert(\"要什么特技呢\");\n            return\n        }\n        //设置字体移动\n        function move(){\n            txt.style.marginTop = parseInt(txt.style.marginTop) - v + \"px\";\n            if(parseInt(txt.style.marginTop) &lt;= -parseInt(txt.style.fontSize)*txt.innerHTML.length) txt.style.marginTop = height + \"px\";\n            window.requestAnimationFrame(move);\n        }\n        window.requestAnimationFrame(move);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果展示：<a href=\"/img/uploads/2018/04/微信图片_20180406103608.png\"><img class=\"alignnone wp-image-595 size-medium\" src=\"/img/uploads/2018/04/微信图片_20180406103608-150x300.png\" alt=\"\" width=\"150\" height=\"300\" /></a>\n\n再来聊聊我对于自身前端的发展意向；\n\n自身没有太多精力去看一些工程上的问题（比如浏览器适配，框架，css预处理等），所以大部分我会专注于效果的实现（由于网页展示起来比较方便）。\n\n使用的多数也会在原生js行列，偶尔用个jquery，必要时看一些包的使用（如之前markdown解析器）。\n\n随性写些启发性前端代码，可能是逻辑上的sao操作，可能是效果上的模仿或涂鸦，，可能是我未知新技术上的demo，and so on；我自己的手机跑的动就好啦。\n\n就这样了吗，恩，然后就没有然后了。\n","source":"_posts/2018/article_14_手持弹幕效果--网页版.md","raw":"\n---\ntitle: 手持弹幕效果--网页版\ncatalog: true\ndate: 2018-4-6 10:39:27\n---\n\n看到抖音上手持弹幕的效果，想想应该不复杂，也可以自己在浏览器实现一个。主要问题在于怎么把浏览器上面的搜索框去掉而实现一种伪全屏。结尾有彩蛋。<!--more-->\n\n效果暂时可以在<a href=\"https://ganjiacheng.cn/danmu.html\">https://ganjiacheng.cn/danmu.html</a> 查看。\n\n直接上代码，在其中论述方法。\n<pre> &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;title&gt;手持弹幕&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        html,body{\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            background: #000;\n        }\n        #txt{\n            overflow: visible;\n            white-space: nowrap;\n            transform-origin: 0% 0%;\n            transform: rotate(90deg);\n        }\n        #config{\n            position: absolute;\n            bottom: 0px;\n            width: 100%;\n        }\n        #config input{\n            display: block;\n            width: 100%;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            color: #495057;\n            background-color: #fff;\n            background-clip: padding-box;\n            border: 1px solid #ced4da;\n            border-radius: .25rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n        }\n        #config button{\n            width: 23.5%;\n            display: inline-block;\n            font-weight: 400;\n            text-align: center;\n            white-space: nowrap;\n            vertical-align: middle;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            border: 1px solid transparent;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            border-radius: .25rem;\n            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n            color: #fff;\n            background-color: transparent;\n            background-image: none;\n            border-color: #343a40;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"txt\"&gt;点一下屏幕进入设置&lt;/div&gt;\n    &lt;div id=\"config\" style=\"display:none;\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入文本,tip:上拉一下就可全屏\" id=\"txtContent\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入颜色rgb，格式如:125 125 125\" id=\"color\"&gt;\n        &lt;button id=\"turnLeft\"&gt;左移&lt;/button&gt;\n        &lt;button id=\"turnRight\"&gt;右移&lt;/button&gt;\n        &lt;button id=\"bigger\"&gt;增大&lt;/button&gt;\n        &lt;button id=\"smaller\"&gt;减小&lt;/button&gt;\n        &lt;button id=\"quicker\"&gt;加快&lt;/button&gt;\n        &lt;button id=\"slower\"&gt;减慢&lt;/button&gt;\n        &lt;button id=\"changeFont\"&gt;字体&lt;/button&gt;\n        &lt;button id=\"stunt\"&gt;特技&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取到所需dom\n        var txt = document.getElementById(\"txt\");\n        var config = document.getElementById(\"config\");\n        var txtContent = document.getElementById(\"txtContent\");\n        var color = document.getElementById(\"color\");\n        var turnLeft = document.getElementById(\"turnLeft\");\n        var turnRight = document.getElementById(\"turnRight\");\n        var bigger = document.getElementById(\"bigger\");\n        var smaller = document.getElementById(\"smaller\");\n        var quicker = document.getElementById(\"quicker\");\n        var slower = document.getElementById(\"slower\");\n        var changeFont = document.getElementById(\"changeFont\");\n        var stunt = document.getElementById(\"stunt\");\n        var height = document.body.clientHeight;\n        var width = document.body.clientWidth;\n        var state = 0;\n        var v = 10;\n        var k = 0;\n        //初始化设置，下面改起来方便些\n        txt.style.marginTop = height+\"px\";\n        txt.style.fontSize = \"380px\";\n        txt.style.marginLeft = \"450px\";\n        txt.style.color = \"rgba(255,255,255,1)\"\n\n        config.onclick = function(){\n            state = 1;\n        }\n        //显隐设置栏，消除搜索框也是无意间发现。\n        //由于加了设置栏大于一屏然后可以上拉，上拉后搜索框会折叠。\n        //然后在点击消除设置栏，一些浏览器就会自动占满屏，有些浏览器好像下面会有一栏空。\n        document.body.onclick = function(e){\n            if(state != 1){\n                config.style.display = config.style.display == \"none\" ? \"block\" : \"none\";\n            }\n            state = 0;\n        }\n        //绑定设置输入框和按钮操作\n        txtContent.onchange = function(){\n            txt.innerHTML = this.value\n            txt.style.marginTop = height + \"px\";\n        }\n\n        color.onchange = function(){\n            colors = this.value.split(\" \");\n            txt.style.color = \"rgba(\"+colors[0]+\",\"+colors[1]+\",\"+colors[2]+\",1)\";\n            txt.style.marginTop = height + \"px\";\n        }\n\n        turnLeft.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) - 10 + \"px\";\n        }\n\n        turnRight.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) + 10 + \"px\";\n        }\n\n        bigger.onclick = function(){\n            txt.style.fontSize = parseInt(txt.style.fontSize) + 10 + \"px\";\n        }\n\n        smaller.onclick = function(){\n            console.log(txt.style.fontSize)\n            txt.style.fontSize = parseInt(txt.style.fontSize) - 10 + \"px\";\n            console.log(txt.style.fontSize)\n        }\n\n        quicker.onclick = function(){\n            v += 2\n        }\n\n        slower.onclick = function(){\n            v -= 2\n        }\n\n        changeFont.onclick = function(){\n            fonts = [\"SimSun\",\"SimHei\",\"Microsoft YaHei\",\"Microsoft JhengHei\",\"NSimSun\",\"PMingLiU\",\"MingLiU\",\"DFKai-SB\",\"FangSong\",\"KaiTi\",\"FangSong_GB2312\",\"KaiTi_GB2312\",\"：STHeiti\",\"STKaiti\",\"STSong\",\"STFangsong\",\"LiSu\",\"YouYuan\",\"STXihei\",\"STKaiti\",\"STKaiti\",\"STSong\",\"STZhongsong\",\"STZhongsong\",\"STFangsong\",\"FZYaoti\",\"STZhongsong\",\"STCaiyun\",\"STHupo\",\"STLiti\",\"STXingkai\",\"STXinwei\"]\n            txt.style.fontFamily = fonts[k];\n            k+=1;\n        }\n\n        stunt.onclick = function(){\n            alert(\"要什么特技呢\");\n            return\n        }\n        //设置字体移动\n        function move(){\n            txt.style.marginTop = parseInt(txt.style.marginTop) - v + \"px\";\n            if(parseInt(txt.style.marginTop) &lt;= -parseInt(txt.style.fontSize)*txt.innerHTML.length) txt.style.marginTop = height + \"px\";\n            window.requestAnimationFrame(move);\n        }\n        window.requestAnimationFrame(move);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n效果展示：<a href=\"/img/uploads/2018/04/微信图片_20180406103608.png\"><img class=\"alignnone wp-image-595 size-medium\" src=\"/img/uploads/2018/04/微信图片_20180406103608-150x300.png\" alt=\"\" width=\"150\" height=\"300\" /></a>\n\n再来聊聊我对于自身前端的发展意向；\n\n自身没有太多精力去看一些工程上的问题（比如浏览器适配，框架，css预处理等），所以大部分我会专注于效果的实现（由于网页展示起来比较方便）。\n\n使用的多数也会在原生js行列，偶尔用个jquery，必要时看一些包的使用（如之前markdown解析器）。\n\n随性写些启发性前端代码，可能是逻辑上的sao操作，可能是效果上的模仿或涂鸦，，可能是我未知新技术上的demo，and so on；我自己的手机跑的动就好啦。\n\n就这样了吗，恩，然后就没有然后了。\n","slug":"2018/article_14_手持弹幕效果--网页版","published":1,"updated":"2021-01-27T04:46:28.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73q00200770piozlj1u","content":"<p>看到抖音上手持弹幕的效果，想想应该不复杂，也可以自己在浏览器实现一个。主要问题在于怎么把浏览器上面的搜索框去掉而实现一种伪全屏。结尾有彩蛋。<a id=\"more\"></a></p>\n<p>效果暂时可以在<a href=\"https://ganjiacheng.cn/danmu.html\">https://ganjiacheng.cn/danmu.html</a> 查看。</p>\n<p>直接上代码，在其中论述方法。</p>\n<pre> &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;title&gt;手持弹幕&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        html,body{\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            background: #000;\n        }\n        #txt{\n            overflow: visible;\n            white-space: nowrap;\n            transform-origin: 0% 0%;\n            transform: rotate(90deg);\n        }\n        #config{\n            position: absolute;\n            bottom: 0px;\n            width: 100%;\n        }\n        #config input{\n            display: block;\n            width: 100%;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            color: #495057;\n            background-color: #fff;\n            background-clip: padding-box;\n            border: 1px solid #ced4da;\n            border-radius: .25rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n        }\n        #config button{\n            width: 23.5%;\n            display: inline-block;\n            font-weight: 400;\n            text-align: center;\n            white-space: nowrap;\n            vertical-align: middle;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            border: 1px solid transparent;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            border-radius: .25rem;\n            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n            color: #fff;\n            background-color: transparent;\n            background-image: none;\n            border-color: #343a40;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"txt\"&gt;点一下屏幕进入设置&lt;/div&gt;\n    &lt;div id=\"config\" style=\"display:none;\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入文本,tip:上拉一下就可全屏\" id=\"txtContent\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入颜色rgb，格式如:125 125 125\" id=\"color\"&gt;\n        &lt;button id=\"turnLeft\"&gt;左移&lt;/button&gt;\n        &lt;button id=\"turnRight\"&gt;右移&lt;/button&gt;\n        &lt;button id=\"bigger\"&gt;增大&lt;/button&gt;\n        &lt;button id=\"smaller\"&gt;减小&lt;/button&gt;\n        &lt;button id=\"quicker\"&gt;加快&lt;/button&gt;\n        &lt;button id=\"slower\"&gt;减慢&lt;/button&gt;\n        &lt;button id=\"changeFont\"&gt;字体&lt;/button&gt;\n        &lt;button id=\"stunt\"&gt;特技&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取到所需dom\n        var txt = document.getElementById(\"txt\");\n        var config = document.getElementById(\"config\");\n        var txtContent = document.getElementById(\"txtContent\");\n        var color = document.getElementById(\"color\");\n        var turnLeft = document.getElementById(\"turnLeft\");\n        var turnRight = document.getElementById(\"turnRight\");\n        var bigger = document.getElementById(\"bigger\");\n        var smaller = document.getElementById(\"smaller\");\n        var quicker = document.getElementById(\"quicker\");\n        var slower = document.getElementById(\"slower\");\n        var changeFont = document.getElementById(\"changeFont\");\n        var stunt = document.getElementById(\"stunt\");\n        var height = document.body.clientHeight;\n        var width = document.body.clientWidth;\n        var state = 0;\n        var v = 10;\n        var k = 0;\n        //初始化设置，下面改起来方便些\n        txt.style.marginTop = height+\"px\";\n        txt.style.fontSize = \"380px\";\n        txt.style.marginLeft = \"450px\";\n        txt.style.color = \"rgba(255,255,255,1)\"\n\n        config.onclick = function(){\n            state = 1;\n        }\n        //显隐设置栏，消除搜索框也是无意间发现。\n        //由于加了设置栏大于一屏然后可以上拉，上拉后搜索框会折叠。\n        //然后在点击消除设置栏，一些浏览器就会自动占满屏，有些浏览器好像下面会有一栏空。\n        document.body.onclick = function(e){\n            if(state != 1){\n                config.style.display = config.style.display == \"none\" ? \"block\" : \"none\";\n            }\n            state = 0;\n        }\n        //绑定设置输入框和按钮操作\n        txtContent.onchange = function(){\n            txt.innerHTML = this.value\n            txt.style.marginTop = height + \"px\";\n        }\n\n        color.onchange = function(){\n            colors = this.value.split(\" \");\n            txt.style.color = \"rgba(\"+colors[0]+\",\"+colors[1]+\",\"+colors[2]+\",1)\";\n            txt.style.marginTop = height + \"px\";\n        }\n\n        turnLeft.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) - 10 + \"px\";\n        }\n\n        turnRight.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) + 10 + \"px\";\n        }\n\n        bigger.onclick = function(){\n            txt.style.fontSize = parseInt(txt.style.fontSize) + 10 + \"px\";\n        }\n\n        smaller.onclick = function(){\n            console.log(txt.style.fontSize)\n            txt.style.fontSize = parseInt(txt.style.fontSize) - 10 + \"px\";\n            console.log(txt.style.fontSize)\n        }\n\n        quicker.onclick = function(){\n            v += 2\n        }\n\n        slower.onclick = function(){\n            v -= 2\n        }\n\n        changeFont.onclick = function(){\n            fonts = [\"SimSun\",\"SimHei\",\"Microsoft YaHei\",\"Microsoft JhengHei\",\"NSimSun\",\"PMingLiU\",\"MingLiU\",\"DFKai-SB\",\"FangSong\",\"KaiTi\",\"FangSong_GB2312\",\"KaiTi_GB2312\",\"：STHeiti\",\"STKaiti\",\"STSong\",\"STFangsong\",\"LiSu\",\"YouYuan\",\"STXihei\",\"STKaiti\",\"STKaiti\",\"STSong\",\"STZhongsong\",\"STZhongsong\",\"STFangsong\",\"FZYaoti\",\"STZhongsong\",\"STCaiyun\",\"STHupo\",\"STLiti\",\"STXingkai\",\"STXinwei\"]\n            txt.style.fontFamily = fonts[k];\n            k+=1;\n        }\n\n        stunt.onclick = function(){\n            alert(\"要什么特技呢\");\n            return\n        }\n        //设置字体移动\n        function move(){\n            txt.style.marginTop = parseInt(txt.style.marginTop) - v + \"px\";\n            if(parseInt(txt.style.marginTop) &lt;= -parseInt(txt.style.fontSize)*txt.innerHTML.length) txt.style.marginTop = height + \"px\";\n            window.requestAnimationFrame(move);\n        }\n        window.requestAnimationFrame(move);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果展示：<a href=\"/img/uploads/2018/04/微信图片_20180406103608.png\"><img class=\"alignnone wp-image-595 size-medium\" src=\"/img/uploads/2018/04/微信图片_20180406103608-150x300.png\" alt=\"\" width=\"150\" height=\"300\"></a></p>\n<p>再来聊聊我对于自身前端的发展意向；</p>\n<p>自身没有太多精力去看一些工程上的问题（比如浏览器适配，框架，css预处理等），所以大部分我会专注于效果的实现（由于网页展示起来比较方便）。</p>\n<p>使用的多数也会在原生js行列，偶尔用个jquery，必要时看一些包的使用（如之前markdown解析器）。</p>\n<p>随性写些启发性前端代码，可能是逻辑上的sao操作，可能是效果上的模仿或涂鸦，，可能是我未知新技术上的demo，and so on；我自己的手机跑的动就好啦。</p>\n<p>就这样了吗，恩，然后就没有然后了。</p>\n","excerpt":"<p>看到抖音上手持弹幕的效果，想想应该不复杂，也可以自己在浏览器实现一个。主要问题在于怎么把浏览器上面的搜索框去掉而实现一种伪全屏。结尾有彩蛋。","more":"</p>\n<p>效果暂时可以在<a href=\"https://ganjiacheng.cn/danmu.html\">https://ganjiacheng.cn/danmu.html</a> 查看。</p>\n<p>直接上代码，在其中论述方法。</p>\n<pre> &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;title&gt;手持弹幕&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            margin: 0px;\n            padding: 0px;\n        }\n        html,body{\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n            background: #000;\n        }\n        #txt{\n            overflow: visible;\n            white-space: nowrap;\n            transform-origin: 0% 0%;\n            transform: rotate(90deg);\n        }\n        #config{\n            position: absolute;\n            bottom: 0px;\n            width: 100%;\n        }\n        #config input{\n            display: block;\n            width: 100%;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            color: #495057;\n            background-color: #fff;\n            background-clip: padding-box;\n            border: 1px solid #ced4da;\n            border-radius: .25rem;\n            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n        }\n        #config button{\n            width: 23.5%;\n            display: inline-block;\n            font-weight: 400;\n            text-align: center;\n            white-space: nowrap;\n            vertical-align: middle;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            border: 1px solid transparent;\n            padding: .375rem .75rem;\n            font-size: 1rem;\n            line-height: 1.5;\n            border-radius: .25rem;\n            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n            color: #fff;\n            background-color: transparent;\n            background-image: none;\n            border-color: #343a40;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"txt\"&gt;点一下屏幕进入设置&lt;/div&gt;\n    &lt;div id=\"config\" style=\"display:none;\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入文本,tip:上拉一下就可全屏\" id=\"txtContent\"&gt;\n        &lt;input type=\"text\" placeholder=\"输入颜色rgb，格式如:125 125 125\" id=\"color\"&gt;\n        &lt;button id=\"turnLeft\"&gt;左移&lt;/button&gt;\n        &lt;button id=\"turnRight\"&gt;右移&lt;/button&gt;\n        &lt;button id=\"bigger\"&gt;增大&lt;/button&gt;\n        &lt;button id=\"smaller\"&gt;减小&lt;/button&gt;\n        &lt;button id=\"quicker\"&gt;加快&lt;/button&gt;\n        &lt;button id=\"slower\"&gt;减慢&lt;/button&gt;\n        &lt;button id=\"changeFont\"&gt;字体&lt;/button&gt;\n        &lt;button id=\"stunt\"&gt;特技&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        //获取到所需dom\n        var txt = document.getElementById(\"txt\");\n        var config = document.getElementById(\"config\");\n        var txtContent = document.getElementById(\"txtContent\");\n        var color = document.getElementById(\"color\");\n        var turnLeft = document.getElementById(\"turnLeft\");\n        var turnRight = document.getElementById(\"turnRight\");\n        var bigger = document.getElementById(\"bigger\");\n        var smaller = document.getElementById(\"smaller\");\n        var quicker = document.getElementById(\"quicker\");\n        var slower = document.getElementById(\"slower\");\n        var changeFont = document.getElementById(\"changeFont\");\n        var stunt = document.getElementById(\"stunt\");\n        var height = document.body.clientHeight;\n        var width = document.body.clientWidth;\n        var state = 0;\n        var v = 10;\n        var k = 0;\n        //初始化设置，下面改起来方便些\n        txt.style.marginTop = height+\"px\";\n        txt.style.fontSize = \"380px\";\n        txt.style.marginLeft = \"450px\";\n        txt.style.color = \"rgba(255,255,255,1)\"\n\n        config.onclick = function(){\n            state = 1;\n        }\n        //显隐设置栏，消除搜索框也是无意间发现。\n        //由于加了设置栏大于一屏然后可以上拉，上拉后搜索框会折叠。\n        //然后在点击消除设置栏，一些浏览器就会自动占满屏，有些浏览器好像下面会有一栏空。\n        document.body.onclick = function(e){\n            if(state != 1){\n                config.style.display = config.style.display == \"none\" ? \"block\" : \"none\";\n            }\n            state = 0;\n        }\n        //绑定设置输入框和按钮操作\n        txtContent.onchange = function(){\n            txt.innerHTML = this.value\n            txt.style.marginTop = height + \"px\";\n        }\n\n        color.onchange = function(){\n            colors = this.value.split(\" \");\n            txt.style.color = \"rgba(\"+colors[0]+\",\"+colors[1]+\",\"+colors[2]+\",1)\";\n            txt.style.marginTop = height + \"px\";\n        }\n\n        turnLeft.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) - 10 + \"px\";\n        }\n\n        turnRight.onclick = function(){\n            txt.style.marginLeft = parseInt(txt.style.marginLeft) + 10 + \"px\";\n        }\n\n        bigger.onclick = function(){\n            txt.style.fontSize = parseInt(txt.style.fontSize) + 10 + \"px\";\n        }\n\n        smaller.onclick = function(){\n            console.log(txt.style.fontSize)\n            txt.style.fontSize = parseInt(txt.style.fontSize) - 10 + \"px\";\n            console.log(txt.style.fontSize)\n        }\n\n        quicker.onclick = function(){\n            v += 2\n        }\n\n        slower.onclick = function(){\n            v -= 2\n        }\n\n        changeFont.onclick = function(){\n            fonts = [\"SimSun\",\"SimHei\",\"Microsoft YaHei\",\"Microsoft JhengHei\",\"NSimSun\",\"PMingLiU\",\"MingLiU\",\"DFKai-SB\",\"FangSong\",\"KaiTi\",\"FangSong_GB2312\",\"KaiTi_GB2312\",\"：STHeiti\",\"STKaiti\",\"STSong\",\"STFangsong\",\"LiSu\",\"YouYuan\",\"STXihei\",\"STKaiti\",\"STKaiti\",\"STSong\",\"STZhongsong\",\"STZhongsong\",\"STFangsong\",\"FZYaoti\",\"STZhongsong\",\"STCaiyun\",\"STHupo\",\"STLiti\",\"STXingkai\",\"STXinwei\"]\n            txt.style.fontFamily = fonts[k];\n            k+=1;\n        }\n\n        stunt.onclick = function(){\n            alert(\"要什么特技呢\");\n            return\n        }\n        //设置字体移动\n        function move(){\n            txt.style.marginTop = parseInt(txt.style.marginTop) - v + \"px\";\n            if(parseInt(txt.style.marginTop) &lt;= -parseInt(txt.style.fontSize)*txt.innerHTML.length) txt.style.marginTop = height + \"px\";\n            window.requestAnimationFrame(move);\n        }\n        window.requestAnimationFrame(move);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>效果展示：<a href=\"/img/uploads/2018/04/微信图片_20180406103608.png\"><img class=\"alignnone wp-image-595 size-medium\" src=\"/img/uploads/2018/04/微信图片_20180406103608-150x300.png\" alt=\"\" width=\"150\" height=\"300\" /></a></p>\n<p>再来聊聊我对于自身前端的发展意向；</p>\n<p>自身没有太多精力去看一些工程上的问题（比如浏览器适配，框架，css预处理等），所以大部分我会专注于效果的实现（由于网页展示起来比较方便）。</p>\n<p>使用的多数也会在原生js行列，偶尔用个jquery，必要时看一些包的使用（如之前markdown解析器）。</p>\n<p>随性写些启发性前端代码，可能是逻辑上的sao操作，可能是效果上的模仿或涂鸦，，可能是我未知新技术上的demo，and so on；我自己的手机跑的动就好啦。</p>\n<p>就这样了吗，恩，然后就没有然后了。</p>"},{"title":"2017总结咯","catalog":true,"date":"2018-01-01T01:12:09.000Z","_content":"\n之前的博客多数以技术为主，今后将加入Life板块，用以记录生活，随笔，杂念～\n\n首篇就做一篇2017年总结，也算有东西写，不ga聊。<!--more-->\n\n2017上半年，我大二上，还当着宿管会技术部的部长，事情也是一大堆。\n\n开年印象比较深刻的是我作为主负责人之一的项目在上线前一刻被pass了，这可能也是后来我离开宿管原因之一。\n\n我找了半个女朋友，咋么这么说呢，至少那时候没有确定关系吧，聊得挺开的，也经常一起吃饭看电影，或许是我自嗨吧。事实如此，到暑假便忙的说话都少了，九月自然分开。对于感情好像没什么多说的，都靠感觉呗。\n\n上半年技术部中我还在积极的培训与探讨下任的问题，这件事也算在5月份落地。\n\n技术上由于之前想好了转python，上半年开始接触到一些机器学习的内容，也找到了可靠的图像方面的导师，但下半年还是没有坚持下去，中间也做了一段时间爬虫，这可能不是主要原因，我觉得还是内心平静不下来学习，经常是一个人钻牛角尖，借一句话：便纵有千种风情，更与何人说。\n\n6月份参加了数学建模校赛，好像二等奖吧，就进了集训队，暑假集训忙的不可开交，七月集训完，我选择了退出，当时的考虑是体验过付出过便好，回报拿奖什么都不在乎，二来我希望在机器学习方面多深入一点。现在回头来看我应该也不会后悔吧，反正都是让我更上一层的，经历越丰富越好。\n\n下半年，一个比较担心的事情是技术部名义上的存在。没有事情与可替代一定会来，虽然退出了，但毕竟也是一手带过来的，希望能有好ending吧。\n\n之后也就是忙了一个月上面说的爬虫，总共也有爬下百g的图片和数据吧。后来觉得这是个耗时不讨好的活（爬下来的数据不是给我自己用，也没报酬）便不干了。\n\n11，12月，事情不多每天水水，琢磨着找个实习罢，很幸运还能有内推机会，参加了网易前端面试，虽然没过，然后又来到了现在所在公司，做着python后端和数据处理。虽然都以前端名义投的简历，当时也没多想具体找什么工作，没有强求吧。现在看来其实也没什么，自身的进步在于自身而不在于所在的公司和工作吧。\n\n在一家小做互联网金融的公司，接触很多股票方面的、我觉得也算一个了解的机会，本来可能很难接触到的一些，现在可能就在眼前，就看自己去学习。至于后端应该问题不大，对于我还比较轻松。不确定能长久做下去，但在做的时候有进步就好吧，不管是技术还是其他领域。\n\n2018-01-01\n\n临山开往杭州的汽车上\n","source":"_posts/2018/article_1_2017总结咯.md","raw":"\n---\ntitle: 2017总结咯\ncatalog: true\ndate: 2018-1-1 09:12:09\n---\n\n之前的博客多数以技术为主，今后将加入Life板块，用以记录生活，随笔，杂念～\n\n首篇就做一篇2017年总结，也算有东西写，不ga聊。<!--more-->\n\n2017上半年，我大二上，还当着宿管会技术部的部长，事情也是一大堆。\n\n开年印象比较深刻的是我作为主负责人之一的项目在上线前一刻被pass了，这可能也是后来我离开宿管原因之一。\n\n我找了半个女朋友，咋么这么说呢，至少那时候没有确定关系吧，聊得挺开的，也经常一起吃饭看电影，或许是我自嗨吧。事实如此，到暑假便忙的说话都少了，九月自然分开。对于感情好像没什么多说的，都靠感觉呗。\n\n上半年技术部中我还在积极的培训与探讨下任的问题，这件事也算在5月份落地。\n\n技术上由于之前想好了转python，上半年开始接触到一些机器学习的内容，也找到了可靠的图像方面的导师，但下半年还是没有坚持下去，中间也做了一段时间爬虫，这可能不是主要原因，我觉得还是内心平静不下来学习，经常是一个人钻牛角尖，借一句话：便纵有千种风情，更与何人说。\n\n6月份参加了数学建模校赛，好像二等奖吧，就进了集训队，暑假集训忙的不可开交，七月集训完，我选择了退出，当时的考虑是体验过付出过便好，回报拿奖什么都不在乎，二来我希望在机器学习方面多深入一点。现在回头来看我应该也不会后悔吧，反正都是让我更上一层的，经历越丰富越好。\n\n下半年，一个比较担心的事情是技术部名义上的存在。没有事情与可替代一定会来，虽然退出了，但毕竟也是一手带过来的，希望能有好ending吧。\n\n之后也就是忙了一个月上面说的爬虫，总共也有爬下百g的图片和数据吧。后来觉得这是个耗时不讨好的活（爬下来的数据不是给我自己用，也没报酬）便不干了。\n\n11，12月，事情不多每天水水，琢磨着找个实习罢，很幸运还能有内推机会，参加了网易前端面试，虽然没过，然后又来到了现在所在公司，做着python后端和数据处理。虽然都以前端名义投的简历，当时也没多想具体找什么工作，没有强求吧。现在看来其实也没什么，自身的进步在于自身而不在于所在的公司和工作吧。\n\n在一家小做互联网金融的公司，接触很多股票方面的、我觉得也算一个了解的机会，本来可能很难接触到的一些，现在可能就在眼前，就看自己去学习。至于后端应该问题不大，对于我还比较轻松。不确定能长久做下去，但在做的时候有进步就好吧，不管是技术还是其他领域。\n\n2018-01-01\n\n临山开往杭州的汽车上\n","slug":"2018/article_1_2017总结咯","published":1,"updated":"2021-01-27T04:46:28.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73r002107708acukv7w","content":"<p>之前的博客多数以技术为主，今后将加入Life板块，用以记录生活，随笔，杂念～</p>\n<p>首篇就做一篇2017年总结，也算有东西写，不ga聊。<a id=\"more\"></a></p>\n<p>2017上半年，我大二上，还当着宿管会技术部的部长，事情也是一大堆。</p>\n<p>开年印象比较深刻的是我作为主负责人之一的项目在上线前一刻被pass了，这可能也是后来我离开宿管原因之一。</p>\n<p>我找了半个女朋友，咋么这么说呢，至少那时候没有确定关系吧，聊得挺开的，也经常一起吃饭看电影，或许是我自嗨吧。事实如此，到暑假便忙的说话都少了，九月自然分开。对于感情好像没什么多说的，都靠感觉呗。</p>\n<p>上半年技术部中我还在积极的培训与探讨下任的问题，这件事也算在5月份落地。</p>\n<p>技术上由于之前想好了转python，上半年开始接触到一些机器学习的内容，也找到了可靠的图像方面的导师，但下半年还是没有坚持下去，中间也做了一段时间爬虫，这可能不是主要原因，我觉得还是内心平静不下来学习，经常是一个人钻牛角尖，借一句话：便纵有千种风情，更与何人说。</p>\n<p>6月份参加了数学建模校赛，好像二等奖吧，就进了集训队，暑假集训忙的不可开交，七月集训完，我选择了退出，当时的考虑是体验过付出过便好，回报拿奖什么都不在乎，二来我希望在机器学习方面多深入一点。现在回头来看我应该也不会后悔吧，反正都是让我更上一层的，经历越丰富越好。</p>\n<p>下半年，一个比较担心的事情是技术部名义上的存在。没有事情与可替代一定会来，虽然退出了，但毕竟也是一手带过来的，希望能有好ending吧。</p>\n<p>之后也就是忙了一个月上面说的爬虫，总共也有爬下百g的图片和数据吧。后来觉得这是个耗时不讨好的活（爬下来的数据不是给我自己用，也没报酬）便不干了。</p>\n<p>11，12月，事情不多每天水水，琢磨着找个实习罢，很幸运还能有内推机会，参加了网易前端面试，虽然没过，然后又来到了现在所在公司，做着python后端和数据处理。虽然都以前端名义投的简历，当时也没多想具体找什么工作，没有强求吧。现在看来其实也没什么，自身的进步在于自身而不在于所在的公司和工作吧。</p>\n<p>在一家小做互联网金融的公司，接触很多股票方面的、我觉得也算一个了解的机会，本来可能很难接触到的一些，现在可能就在眼前，就看自己去学习。至于后端应该问题不大，对于我还比较轻松。不确定能长久做下去，但在做的时候有进步就好吧，不管是技术还是其他领域。</p>\n<p>2018-01-01</p>\n<p>临山开往杭州的汽车上</p>\n","excerpt":"<p>之前的博客多数以技术为主，今后将加入Life板块，用以记录生活，随笔，杂念～</p>\n<p>首篇就做一篇2017年总结，也算有东西写，不ga聊。","more":"</p>\n<p>2017上半年，我大二上，还当着宿管会技术部的部长，事情也是一大堆。</p>\n<p>开年印象比较深刻的是我作为主负责人之一的项目在上线前一刻被pass了，这可能也是后来我离开宿管原因之一。</p>\n<p>我找了半个女朋友，咋么这么说呢，至少那时候没有确定关系吧，聊得挺开的，也经常一起吃饭看电影，或许是我自嗨吧。事实如此，到暑假便忙的说话都少了，九月自然分开。对于感情好像没什么多说的，都靠感觉呗。</p>\n<p>上半年技术部中我还在积极的培训与探讨下任的问题，这件事也算在5月份落地。</p>\n<p>技术上由于之前想好了转python，上半年开始接触到一些机器学习的内容，也找到了可靠的图像方面的导师，但下半年还是没有坚持下去，中间也做了一段时间爬虫，这可能不是主要原因，我觉得还是内心平静不下来学习，经常是一个人钻牛角尖，借一句话：便纵有千种风情，更与何人说。</p>\n<p>6月份参加了数学建模校赛，好像二等奖吧，就进了集训队，暑假集训忙的不可开交，七月集训完，我选择了退出，当时的考虑是体验过付出过便好，回报拿奖什么都不在乎，二来我希望在机器学习方面多深入一点。现在回头来看我应该也不会后悔吧，反正都是让我更上一层的，经历越丰富越好。</p>\n<p>下半年，一个比较担心的事情是技术部名义上的存在。没有事情与可替代一定会来，虽然退出了，但毕竟也是一手带过来的，希望能有好ending吧。</p>\n<p>之后也就是忙了一个月上面说的爬虫，总共也有爬下百g的图片和数据吧。后来觉得这是个耗时不讨好的活（爬下来的数据不是给我自己用，也没报酬）便不干了。</p>\n<p>11，12月，事情不多每天水水，琢磨着找个实习罢，很幸运还能有内推机会，参加了网易前端面试，虽然没过，然后又来到了现在所在公司，做着python后端和数据处理。虽然都以前端名义投的简历，当时也没多想具体找什么工作，没有强求吧。现在看来其实也没什么，自身的进步在于自身而不在于所在的公司和工作吧。</p>\n<p>在一家小做互联网金融的公司，接触很多股票方面的、我觉得也算一个了解的机会，本来可能很难接触到的一些，现在可能就在眼前，就看自己去学习。至于后端应该问题不大，对于我还比较轻松。不确定能长久做下去，但在做的时候有进步就好吧，不管是技术还是其他领域。</p>\n<p>2018-01-01</p>\n<p>临山开往杭州的汽车上</p>"},{"title":"svm的一些理解---《机器学习》周志华","catalog":true,"date":"2018-05-12T15:23:00.000Z","_content":"\nsvm的一些笔记，自己的一些见解，挑了自己能看懂的部分，点击看原图。<!--more-->\n\n<a href=\"/img/uploads/2018/05/IMG20180512230730.jpg\"><img class=\"alignnone wp-image-641 size-large\" src=\"/img/uploads/2018/05/IMG20180512230730-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a>\n\n<a href=\"/img/uploads/2018/05/IMG20180512230754.jpg\"><img class=\"alignnone wp-image-642 size-large\" src=\"/img/uploads/2018/05/IMG20180512230754-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a>\n","source":"_posts/2018/article_21_svm的一些理解---《机器学习》周志华.md","raw":"\n---\ntitle: svm的一些理解---《机器学习》周志华\ncatalog: true\ndate: 2018-5-12 23:23:00\n---\n\nsvm的一些笔记，自己的一些见解，挑了自己能看懂的部分，点击看原图。<!--more-->\n\n<a href=\"/img/uploads/2018/05/IMG20180512230730.jpg\"><img class=\"alignnone wp-image-641 size-large\" src=\"/img/uploads/2018/05/IMG20180512230730-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a>\n\n<a href=\"/img/uploads/2018/05/IMG20180512230754.jpg\"><img class=\"alignnone wp-image-642 size-large\" src=\"/img/uploads/2018/05/IMG20180512230754-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a>\n","slug":"2018/article_21_svm的一些理解---《机器学习》周志华","published":1,"updated":"2021-01-27T04:46:28.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73t00220770qngb3zx2","content":"<p>svm的一些笔记，自己的一些见解，挑了自己能看懂的部分，点击看原图。<a id=\"more\"></a></p>\n<p><a href=\"/img/uploads/2018/05/IMG20180512230730.jpg\"><img class=\"alignnone wp-image-641 size-large\" src=\"/img/uploads/2018/05/IMG20180512230730-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\"></a></p>\n<p><a href=\"/img/uploads/2018/05/IMG20180512230754.jpg\"><img class=\"alignnone wp-image-642 size-large\" src=\"/img/uploads/2018/05/IMG20180512230754-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\"></a></p>\n","excerpt":"<p>svm的一些笔记，自己的一些见解，挑了自己能看懂的部分，点击看原图。","more":"</p>\n<p><a href=\"/img/uploads/2018/05/IMG20180512230730.jpg\"><img class=\"alignnone wp-image-641 size-large\" src=\"/img/uploads/2018/05/IMG20180512230730-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a></p>\n<p><a href=\"/img/uploads/2018/05/IMG20180512230754.jpg\"><img class=\"alignnone wp-image-642 size-large\" src=\"/img/uploads/2018/05/IMG20180512230754-768x1024.jpg\" alt=\"\" width=\"525\" height=\"700\" /></a></p>"},{"title":"上班，上班","catalog":true,"date":"2018-07-11T09:55:42.000Z","_content":"\n生活总是要过的，班也总是要上的。<!--more-->\n\n上班一周，虽然也是第二次上班了，但感受还是很不一样的。\n\n开始有些顾虑，顾虑后面的发展与自我的价值。\n\n之前很多事情来的突然，求职，面试，租房，搬家，上班，都只能凭着自己的感觉走。\n\n不知道自己第六感的感觉是对是错，或许需要些时日能看出。\n\n虽然知道事情总是会水到渠成，自己能做的也只能是放平心态。\n\n公司不大不小，不好说啥，不求带来什么大的改变，做好自己的吧。\n\n尽快融入集体把，按经验来看我还是个比较容易融入的人。\n\n选择性的交一些朋友，没有理由，靠的都是眼缘吧。\n\n技术上的拓展目测大部分还是在于广度，看今后的博文或许能反应。\n\n也是有水平厉害的人在周边，或许我的学习动力还不够。\n\n这甚至让我怀疑老了还能不能做不做技术。\n\n租的房子虽然小而北，有机会可以尝试装饰一下不同风格。\n\n合租的朋友也是缘分，希望可以有机会交流人生，谈谈理想。\n\n小区离工作地方还有1.5公里路，天气凉走走也挺好，天热还是比较蓝瘦的。\n\n有决心了就买个电动轮，还可以开辟远一些的生活活动区域。\n\n公司加班有顿饭，没啥大事基本上也就加了，或许这少了些本可以做的生活上的事情。\n\n暂时还没想到能开辟啥其他生活上的事情，之后再看，如做饭，健身等。\n\n练琴看来是要规划一下每天的时间，定点才有执行率。\n\n目前还没好好计划周末，看来是可以规划规划，当然回家也是需要滴。\n\n感情可以先放一放，我或许需要安定一下再来考虑。\n\n也不知道我所谓的安定是啥，在这个巨大的城市里。是物质的追求如房车吗，内心尽量着不同意这个观念。但也没其他观点。\n\n仿佛是需要一定程度的认识和了解才会有追求的想法，还没到相亲的地步，也基本不会有一见钟情的杂想。\n\n因此这个对于我这种小圈子的人是比较难的，比较不会刻意。\n\n在学校说起来还就大三，咋这么社会了呢，毕竟还有一大部分追求着考研的学术路的学子呢。回头自己的这些个实习的过程确实有影响着自己的思想。\n\n出来后大部分人说你还年轻，还有说可以去北上广闯闯，我需要梁静茹。\n\n仿佛一般的暖文书籍已经治愈不了我了，看来需要一些其他风格的书籍。\n\n近期再找找书籍，每天上班放在桌边，能看一小会，算作工作期间小有的娱乐。\n\n关于开头讲的自我价值，希望在工作中可以领悟到，而不是工作几年后觉得自己做的都是无用功，到时候从头再来就比现在晚多了。\n\n看到一些文章讲心灵上或许减少一些对赞美的需求和对物质的抱怨更容易发现自己的价值。\n\n后面的发展谁知道呢，一些在学校时小清新的目标转而模糊，面对现实，该咋地咋地呗。就像那个演讲------别让任何人打乱你的人生节奏，自己能做的仅仅就是BE PATIENT。\n\n近期貌似少有去旅行，或许有机会好好策划一下所谓的毕业旅行，给自己一个出去的理由。\n","source":"_posts/2018/article_24_上班，上班.md","raw":"\n---\ntitle: 上班，上班\ncatalog: true\ndate: 2018-7-11 17:55:42\n---\n\n生活总是要过的，班也总是要上的。<!--more-->\n\n上班一周，虽然也是第二次上班了，但感受还是很不一样的。\n\n开始有些顾虑，顾虑后面的发展与自我的价值。\n\n之前很多事情来的突然，求职，面试，租房，搬家，上班，都只能凭着自己的感觉走。\n\n不知道自己第六感的感觉是对是错，或许需要些时日能看出。\n\n虽然知道事情总是会水到渠成，自己能做的也只能是放平心态。\n\n公司不大不小，不好说啥，不求带来什么大的改变，做好自己的吧。\n\n尽快融入集体把，按经验来看我还是个比较容易融入的人。\n\n选择性的交一些朋友，没有理由，靠的都是眼缘吧。\n\n技术上的拓展目测大部分还是在于广度，看今后的博文或许能反应。\n\n也是有水平厉害的人在周边，或许我的学习动力还不够。\n\n这甚至让我怀疑老了还能不能做不做技术。\n\n租的房子虽然小而北，有机会可以尝试装饰一下不同风格。\n\n合租的朋友也是缘分，希望可以有机会交流人生，谈谈理想。\n\n小区离工作地方还有1.5公里路，天气凉走走也挺好，天热还是比较蓝瘦的。\n\n有决心了就买个电动轮，还可以开辟远一些的生活活动区域。\n\n公司加班有顿饭，没啥大事基本上也就加了，或许这少了些本可以做的生活上的事情。\n\n暂时还没想到能开辟啥其他生活上的事情，之后再看，如做饭，健身等。\n\n练琴看来是要规划一下每天的时间，定点才有执行率。\n\n目前还没好好计划周末，看来是可以规划规划，当然回家也是需要滴。\n\n感情可以先放一放，我或许需要安定一下再来考虑。\n\n也不知道我所谓的安定是啥，在这个巨大的城市里。是物质的追求如房车吗，内心尽量着不同意这个观念。但也没其他观点。\n\n仿佛是需要一定程度的认识和了解才会有追求的想法，还没到相亲的地步，也基本不会有一见钟情的杂想。\n\n因此这个对于我这种小圈子的人是比较难的，比较不会刻意。\n\n在学校说起来还就大三，咋这么社会了呢，毕竟还有一大部分追求着考研的学术路的学子呢。回头自己的这些个实习的过程确实有影响着自己的思想。\n\n出来后大部分人说你还年轻，还有说可以去北上广闯闯，我需要梁静茹。\n\n仿佛一般的暖文书籍已经治愈不了我了，看来需要一些其他风格的书籍。\n\n近期再找找书籍，每天上班放在桌边，能看一小会，算作工作期间小有的娱乐。\n\n关于开头讲的自我价值，希望在工作中可以领悟到，而不是工作几年后觉得自己做的都是无用功，到时候从头再来就比现在晚多了。\n\n看到一些文章讲心灵上或许减少一些对赞美的需求和对物质的抱怨更容易发现自己的价值。\n\n后面的发展谁知道呢，一些在学校时小清新的目标转而模糊，面对现实，该咋地咋地呗。就像那个演讲------别让任何人打乱你的人生节奏，自己能做的仅仅就是BE PATIENT。\n\n近期貌似少有去旅行，或许有机会好好策划一下所谓的毕业旅行，给自己一个出去的理由。\n","slug":"2018/article_24_上班，上班","published":1,"updated":"2021-01-27T04:46:28.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73v00230770mmzfedi6","content":"<p>生活总是要过的，班也总是要上的。<a id=\"more\"></a></p>\n<p>上班一周，虽然也是第二次上班了，但感受还是很不一样的。</p>\n<p>开始有些顾虑，顾虑后面的发展与自我的价值。</p>\n<p>之前很多事情来的突然，求职，面试，租房，搬家，上班，都只能凭着自己的感觉走。</p>\n<p>不知道自己第六感的感觉是对是错，或许需要些时日能看出。</p>\n<p>虽然知道事情总是会水到渠成，自己能做的也只能是放平心态。</p>\n<p>公司不大不小，不好说啥，不求带来什么大的改变，做好自己的吧。</p>\n<p>尽快融入集体把，按经验来看我还是个比较容易融入的人。</p>\n<p>选择性的交一些朋友，没有理由，靠的都是眼缘吧。</p>\n<p>技术上的拓展目测大部分还是在于广度，看今后的博文或许能反应。</p>\n<p>也是有水平厉害的人在周边，或许我的学习动力还不够。</p>\n<p>这甚至让我怀疑老了还能不能做不做技术。</p>\n<p>租的房子虽然小而北，有机会可以尝试装饰一下不同风格。</p>\n<p>合租的朋友也是缘分，希望可以有机会交流人生，谈谈理想。</p>\n<p>小区离工作地方还有1.5公里路，天气凉走走也挺好，天热还是比较蓝瘦的。</p>\n<p>有决心了就买个电动轮，还可以开辟远一些的生活活动区域。</p>\n<p>公司加班有顿饭，没啥大事基本上也就加了，或许这少了些本可以做的生活上的事情。</p>\n<p>暂时还没想到能开辟啥其他生活上的事情，之后再看，如做饭，健身等。</p>\n<p>练琴看来是要规划一下每天的时间，定点才有执行率。</p>\n<p>目前还没好好计划周末，看来是可以规划规划，当然回家也是需要滴。</p>\n<p>感情可以先放一放，我或许需要安定一下再来考虑。</p>\n<p>也不知道我所谓的安定是啥，在这个巨大的城市里。是物质的追求如房车吗，内心尽量着不同意这个观念。但也没其他观点。</p>\n<p>仿佛是需要一定程度的认识和了解才会有追求的想法，还没到相亲的地步，也基本不会有一见钟情的杂想。</p>\n<p>因此这个对于我这种小圈子的人是比较难的，比较不会刻意。</p>\n<p>在学校说起来还就大三，咋这么社会了呢，毕竟还有一大部分追求着考研的学术路的学子呢。回头自己的这些个实习的过程确实有影响着自己的思想。</p>\n<p>出来后大部分人说你还年轻，还有说可以去北上广闯闯，我需要梁静茹。</p>\n<p>仿佛一般的暖文书籍已经治愈不了我了，看来需要一些其他风格的书籍。</p>\n<p>近期再找找书籍，每天上班放在桌边，能看一小会，算作工作期间小有的娱乐。</p>\n<p>关于开头讲的自我价值，希望在工作中可以领悟到，而不是工作几年后觉得自己做的都是无用功，到时候从头再来就比现在晚多了。</p>\n<p>看到一些文章讲心灵上或许减少一些对赞美的需求和对物质的抱怨更容易发现自己的价值。</p>\n<p>后面的发展谁知道呢，一些在学校时小清新的目标转而模糊，面对现实，该咋地咋地呗。就像那个演讲------别让任何人打乱你的人生节奏，自己能做的仅仅就是BE PATIENT。</p>\n<p>近期貌似少有去旅行，或许有机会好好策划一下所谓的毕业旅行，给自己一个出去的理由。</p>\n","excerpt":"<p>生活总是要过的，班也总是要上的。","more":"</p>\n<p>上班一周，虽然也是第二次上班了，但感受还是很不一样的。</p>\n<p>开始有些顾虑，顾虑后面的发展与自我的价值。</p>\n<p>之前很多事情来的突然，求职，面试，租房，搬家，上班，都只能凭着自己的感觉走。</p>\n<p>不知道自己第六感的感觉是对是错，或许需要些时日能看出。</p>\n<p>虽然知道事情总是会水到渠成，自己能做的也只能是放平心态。</p>\n<p>公司不大不小，不好说啥，不求带来什么大的改变，做好自己的吧。</p>\n<p>尽快融入集体把，按经验来看我还是个比较容易融入的人。</p>\n<p>选择性的交一些朋友，没有理由，靠的都是眼缘吧。</p>\n<p>技术上的拓展目测大部分还是在于广度，看今后的博文或许能反应。</p>\n<p>也是有水平厉害的人在周边，或许我的学习动力还不够。</p>\n<p>这甚至让我怀疑老了还能不能做不做技术。</p>\n<p>租的房子虽然小而北，有机会可以尝试装饰一下不同风格。</p>\n<p>合租的朋友也是缘分，希望可以有机会交流人生，谈谈理想。</p>\n<p>小区离工作地方还有1.5公里路，天气凉走走也挺好，天热还是比较蓝瘦的。</p>\n<p>有决心了就买个电动轮，还可以开辟远一些的生活活动区域。</p>\n<p>公司加班有顿饭，没啥大事基本上也就加了，或许这少了些本可以做的生活上的事情。</p>\n<p>暂时还没想到能开辟啥其他生活上的事情，之后再看，如做饭，健身等。</p>\n<p>练琴看来是要规划一下每天的时间，定点才有执行率。</p>\n<p>目前还没好好计划周末，看来是可以规划规划，当然回家也是需要滴。</p>\n<p>感情可以先放一放，我或许需要安定一下再来考虑。</p>\n<p>也不知道我所谓的安定是啥，在这个巨大的城市里。是物质的追求如房车吗，内心尽量着不同意这个观念。但也没其他观点。</p>\n<p>仿佛是需要一定程度的认识和了解才会有追求的想法，还没到相亲的地步，也基本不会有一见钟情的杂想。</p>\n<p>因此这个对于我这种小圈子的人是比较难的，比较不会刻意。</p>\n<p>在学校说起来还就大三，咋这么社会了呢，毕竟还有一大部分追求着考研的学术路的学子呢。回头自己的这些个实习的过程确实有影响着自己的思想。</p>\n<p>出来后大部分人说你还年轻，还有说可以去北上广闯闯，我需要梁静茹。</p>\n<p>仿佛一般的暖文书籍已经治愈不了我了，看来需要一些其他风格的书籍。</p>\n<p>近期再找找书籍，每天上班放在桌边，能看一小会，算作工作期间小有的娱乐。</p>\n<p>关于开头讲的自我价值，希望在工作中可以领悟到，而不是工作几年后觉得自己做的都是无用功，到时候从头再来就比现在晚多了。</p>\n<p>看到一些文章讲心灵上或许减少一些对赞美的需求和对物质的抱怨更容易发现自己的价值。</p>\n<p>后面的发展谁知道呢，一些在学校时小清新的目标转而模糊，面对现实，该咋地咋地呗。就像那个演讲------别让任何人打乱你的人生节奏，自己能做的仅仅就是BE PATIENT。</p>\n<p>近期貌似少有去旅行，或许有机会好好策划一下所谓的毕业旅行，给自己一个出去的理由。</p>"},{"title":"一小波面经","catalog":true,"date":"2018-06-04T07:59:41.000Z","_content":"\n这是一波2018年456月间找暑假及应届生实习时的面试经验记录。<!--more-->\n\n第一个面到的是海康威视。\n\n投的是测试开发岗。我个人对测试开发的态度是工具可能没用过，学起来就好了。编程基础还是在的，掌握起来不难，所以比较自信。\n\n发邮箱投了回复的很快，没两天就笔试，然后面试。笔试比较简单就一个工具的使用(打包安装包)，当然是看不懂他初始的代码，但根据报错信息也改对了。\n\n我因为特殊情况也实际表态了要暑假入职。然而没过两天还是收到面试邀请了。不出意外他们招人很急，(这么快肯定急呀)。面试过程也没多墨迹，简单了解简历上的经历后，让当场看段代码说出功能，这段应该是他们正在用的吧，各个函数还得深入进去也比较复杂(不是逻辑上的复杂，而是不在那个情景中你知道他要干嘛)，我有些犹豫，因为我想明白的是他整个main的目的，而不是只是把ifelse逻辑说一说，就一直询问着，然后就没了，直接拒绝了。总的30分钟。\n\n想来他们是要急招的，而我要暑假入职，这点和hr就我明说了，如果因为这点被t，那我是不服的。当然如果我超级符合要求他们也可以等，但我本来也不是做测试的(谁tm大学本科学测试啊)，肯定不会很符合啊，都要学起来的。总的来说给我感觉就很随意，这场面试本来就注定失败。抬走，下一个。\n\n<hr />\n\n阿里。投的是新零售的算法实习岗，先有初步测验(性格测验)，然后等了近一个月，才开放了在线笔试，中间还莫名有个笔试模拟题，感觉没啥帮助，只让我感受一下难度。在线笔试，30分钟11个选择题，每个题都不是瞄一眼可得到结果的(对我这种小白来说)，涉及算法复杂度，机器学习基础概念，概率论，长到不想读的题，算也算不出的题，题目读不懂的题等。笔试还有两道编程题，时间1h，我的两个题都是用dfs解决的，第一时间想不到好的方法就暴力的遍历，当然其中剪枝做得好其实也不慢。本地运行可以了放上去运行竟然0%通过，那时时间也不多了也就没想着再改算法了，草草交卷。\n\n<hr />\n\n大华。投的是测试实习岗，因为算法岗都要研究生以上，投了也没软用。我恰好参加了个他们公司弄的软件挑战赛(初赛比的是基础的算法解题，类似leetcode,在博客前几篇有具体讲述)，又恰好进了复赛(也就可以免笔试资格)，待续～\n\n<hr />\n\n蘑菇街。投的是算法实习岗。投了以后两星期以内参加了在线笔试，但他那个笔试系统是在牛客网上的，题库应该也是牛客网提供。有些题甚至有些眼熟，哈哈。笔试有选择题，简答题，编程题。难度比阿里肯定简单些，而且如果你日常在牛客网刷题，那些个题很多能熟悉。然后一个月没消息，只能说雷声大雨点小。\n\n<hr />\n\n还有一些较小公司的，没有这么多复杂的环节，发了简历都是直接上来技术面试，我觉得倒是对于自己来说比较轻松（讨厌刁难人的笔试，首先我做的你看不看我不知道，参考多少也不知道，但我还得拼命做，死了脑细胞做完了直接拒绝/接受面试等权利都在你手上，仿佛我只有等结果的份？难道真是在笔试中学习不足，这就和你是啥啥就该干啥啥的一个套路。如年轻人就该多吃苦）。\n\n默安科技；投的是python开发，没几天hr就来了电，也没聊什么，直接就让换个时间技术电话面试。晚9点左右的电话面试（看来他们9点还没下班啊！！），我也没特地准备，该知道的就说，不知道的直接回不知道（拖着反而尴尬）。几类问题吧：简介，项目经验（问各个用到的技术点以及拓展，比如我说用了mongodb，就问你mongodb和mysql对比），数据结构（二叉树，问了从上往下遍历递归版非递归版；链表，问了如何确定中间点，快慢指针法），算法（了解的几个排序，具体的说了快排的思路），linux（问了看端口监听，看进程的命令），计算机网络（问了ping的协议，tcp/udp的区别）；    总的来说问的不是特别难，在我说不会时也不会特地刁难，总长在25分钟不到，竟然问了这么多问题，很紧凑，目的明确，不拖泥带水（觉得这个对于面试者和被面试者都很重要）。隔天收到offer。\n","source":"_posts/2018/article_20_一小波面经.md","raw":"\n---\ntitle: 一小波面经\ncatalog: true\ndate: 2018-6-4 15:59:41\n---\n\n这是一波2018年456月间找暑假及应届生实习时的面试经验记录。<!--more-->\n\n第一个面到的是海康威视。\n\n投的是测试开发岗。我个人对测试开发的态度是工具可能没用过，学起来就好了。编程基础还是在的，掌握起来不难，所以比较自信。\n\n发邮箱投了回复的很快，没两天就笔试，然后面试。笔试比较简单就一个工具的使用(打包安装包)，当然是看不懂他初始的代码，但根据报错信息也改对了。\n\n我因为特殊情况也实际表态了要暑假入职。然而没过两天还是收到面试邀请了。不出意外他们招人很急，(这么快肯定急呀)。面试过程也没多墨迹，简单了解简历上的经历后，让当场看段代码说出功能，这段应该是他们正在用的吧，各个函数还得深入进去也比较复杂(不是逻辑上的复杂，而是不在那个情景中你知道他要干嘛)，我有些犹豫，因为我想明白的是他整个main的目的，而不是只是把ifelse逻辑说一说，就一直询问着，然后就没了，直接拒绝了。总的30分钟。\n\n想来他们是要急招的，而我要暑假入职，这点和hr就我明说了，如果因为这点被t，那我是不服的。当然如果我超级符合要求他们也可以等，但我本来也不是做测试的(谁tm大学本科学测试啊)，肯定不会很符合啊，都要学起来的。总的来说给我感觉就很随意，这场面试本来就注定失败。抬走，下一个。\n\n<hr />\n\n阿里。投的是新零售的算法实习岗，先有初步测验(性格测验)，然后等了近一个月，才开放了在线笔试，中间还莫名有个笔试模拟题，感觉没啥帮助，只让我感受一下难度。在线笔试，30分钟11个选择题，每个题都不是瞄一眼可得到结果的(对我这种小白来说)，涉及算法复杂度，机器学习基础概念，概率论，长到不想读的题，算也算不出的题，题目读不懂的题等。笔试还有两道编程题，时间1h，我的两个题都是用dfs解决的，第一时间想不到好的方法就暴力的遍历，当然其中剪枝做得好其实也不慢。本地运行可以了放上去运行竟然0%通过，那时时间也不多了也就没想着再改算法了，草草交卷。\n\n<hr />\n\n大华。投的是测试实习岗，因为算法岗都要研究生以上，投了也没软用。我恰好参加了个他们公司弄的软件挑战赛(初赛比的是基础的算法解题，类似leetcode,在博客前几篇有具体讲述)，又恰好进了复赛(也就可以免笔试资格)，待续～\n\n<hr />\n\n蘑菇街。投的是算法实习岗。投了以后两星期以内参加了在线笔试，但他那个笔试系统是在牛客网上的，题库应该也是牛客网提供。有些题甚至有些眼熟，哈哈。笔试有选择题，简答题，编程题。难度比阿里肯定简单些，而且如果你日常在牛客网刷题，那些个题很多能熟悉。然后一个月没消息，只能说雷声大雨点小。\n\n<hr />\n\n还有一些较小公司的，没有这么多复杂的环节，发了简历都是直接上来技术面试，我觉得倒是对于自己来说比较轻松（讨厌刁难人的笔试，首先我做的你看不看我不知道，参考多少也不知道，但我还得拼命做，死了脑细胞做完了直接拒绝/接受面试等权利都在你手上，仿佛我只有等结果的份？难道真是在笔试中学习不足，这就和你是啥啥就该干啥啥的一个套路。如年轻人就该多吃苦）。\n\n默安科技；投的是python开发，没几天hr就来了电，也没聊什么，直接就让换个时间技术电话面试。晚9点左右的电话面试（看来他们9点还没下班啊！！），我也没特地准备，该知道的就说，不知道的直接回不知道（拖着反而尴尬）。几类问题吧：简介，项目经验（问各个用到的技术点以及拓展，比如我说用了mongodb，就问你mongodb和mysql对比），数据结构（二叉树，问了从上往下遍历递归版非递归版；链表，问了如何确定中间点，快慢指针法），算法（了解的几个排序，具体的说了快排的思路），linux（问了看端口监听，看进程的命令），计算机网络（问了ping的协议，tcp/udp的区别）；    总的来说问的不是特别难，在我说不会时也不会特地刁难，总长在25分钟不到，竟然问了这么多问题，很紧凑，目的明确，不拖泥带水（觉得这个对于面试者和被面试者都很重要）。隔天收到offer。\n","slug":"2018/article_20_一小波面经","published":1,"updated":"2021-01-27T04:46:28.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73x00240770tgp3xto6","content":"<p>这是一波2018年456月间找暑假及应届生实习时的面试经验记录。<a id=\"more\"></a></p>\n<p>第一个面到的是海康威视。</p>\n<p>投的是测试开发岗。我个人对测试开发的态度是工具可能没用过，学起来就好了。编程基础还是在的，掌握起来不难，所以比较自信。</p>\n<p>发邮箱投了回复的很快，没两天就笔试，然后面试。笔试比较简单就一个工具的使用(打包安装包)，当然是看不懂他初始的代码，但根据报错信息也改对了。</p>\n<p>我因为特殊情况也实际表态了要暑假入职。然而没过两天还是收到面试邀请了。不出意外他们招人很急，(这么快肯定急呀)。面试过程也没多墨迹，简单了解简历上的经历后，让当场看段代码说出功能，这段应该是他们正在用的吧，各个函数还得深入进去也比较复杂(不是逻辑上的复杂，而是不在那个情景中你知道他要干嘛)，我有些犹豫，因为我想明白的是他整个main的目的，而不是只是把ifelse逻辑说一说，就一直询问着，然后就没了，直接拒绝了。总的30分钟。</p>\n<p>想来他们是要急招的，而我要暑假入职，这点和hr就我明说了，如果因为这点被t，那我是不服的。当然如果我超级符合要求他们也可以等，但我本来也不是做测试的(谁tm大学本科学测试啊)，肯定不会很符合啊，都要学起来的。总的来说给我感觉就很随意，这场面试本来就注定失败。抬走，下一个。</p>\n<hr>\n<p>阿里。投的是新零售的算法实习岗，先有初步测验(性格测验)，然后等了近一个月，才开放了在线笔试，中间还莫名有个笔试模拟题，感觉没啥帮助，只让我感受一下难度。在线笔试，30分钟11个选择题，每个题都不是瞄一眼可得到结果的(对我这种小白来说)，涉及算法复杂度，机器学习基础概念，概率论，长到不想读的题，算也算不出的题，题目读不懂的题等。笔试还有两道编程题，时间1h，我的两个题都是用dfs解决的，第一时间想不到好的方法就暴力的遍历，当然其中剪枝做得好其实也不慢。本地运行可以了放上去运行竟然0%通过，那时时间也不多了也就没想着再改算法了，草草交卷。</p>\n<hr>\n<p>大华。投的是测试实习岗，因为算法岗都要研究生以上，投了也没软用。我恰好参加了个他们公司弄的软件挑战赛(初赛比的是基础的算法解题，类似leetcode,在博客前几篇有具体讲述)，又恰好进了复赛(也就可以免笔试资格)，待续～</p>\n<hr>\n<p>蘑菇街。投的是算法实习岗。投了以后两星期以内参加了在线笔试，但他那个笔试系统是在牛客网上的，题库应该也是牛客网提供。有些题甚至有些眼熟，哈哈。笔试有选择题，简答题，编程题。难度比阿里肯定简单些，而且如果你日常在牛客网刷题，那些个题很多能熟悉。然后一个月没消息，只能说雷声大雨点小。</p>\n<hr>\n<p>还有一些较小公司的，没有这么多复杂的环节，发了简历都是直接上来技术面试，我觉得倒是对于自己来说比较轻松（讨厌刁难人的笔试，首先我做的你看不看我不知道，参考多少也不知道，但我还得拼命做，死了脑细胞做完了直接拒绝/接受面试等权利都在你手上，仿佛我只有等结果的份？难道真是在笔试中学习不足，这就和你是啥啥就该干啥啥的一个套路。如年轻人就该多吃苦）。</p>\n<p>默安科技；投的是python开发，没几天hr就来了电，也没聊什么，直接就让换个时间技术电话面试。晚9点左右的电话面试（看来他们9点还没下班啊！！），我也没特地准备，该知道的就说，不知道的直接回不知道（拖着反而尴尬）。几类问题吧：简介，项目经验（问各个用到的技术点以及拓展，比如我说用了mongodb，就问你mongodb和mysql对比），数据结构（二叉树，问了从上往下遍历递归版非递归版；链表，问了如何确定中间点，快慢指针法），算法（了解的几个排序，具体的说了快排的思路），linux（问了看端口监听，看进程的命令），计算机网络（问了ping的协议，tcp/udp的区别）；    总的来说问的不是特别难，在我说不会时也不会特地刁难，总长在25分钟不到，竟然问了这么多问题，很紧凑，目的明确，不拖泥带水（觉得这个对于面试者和被面试者都很重要）。隔天收到offer。</p>\n","excerpt":"<p>这是一波2018年456月间找暑假及应届生实习时的面试经验记录。","more":"</p>\n<p>第一个面到的是海康威视。</p>\n<p>投的是测试开发岗。我个人对测试开发的态度是工具可能没用过，学起来就好了。编程基础还是在的，掌握起来不难，所以比较自信。</p>\n<p>发邮箱投了回复的很快，没两天就笔试，然后面试。笔试比较简单就一个工具的使用(打包安装包)，当然是看不懂他初始的代码，但根据报错信息也改对了。</p>\n<p>我因为特殊情况也实际表态了要暑假入职。然而没过两天还是收到面试邀请了。不出意外他们招人很急，(这么快肯定急呀)。面试过程也没多墨迹，简单了解简历上的经历后，让当场看段代码说出功能，这段应该是他们正在用的吧，各个函数还得深入进去也比较复杂(不是逻辑上的复杂，而是不在那个情景中你知道他要干嘛)，我有些犹豫，因为我想明白的是他整个main的目的，而不是只是把ifelse逻辑说一说，就一直询问着，然后就没了，直接拒绝了。总的30分钟。</p>\n<p>想来他们是要急招的，而我要暑假入职，这点和hr就我明说了，如果因为这点被t，那我是不服的。当然如果我超级符合要求他们也可以等，但我本来也不是做测试的(谁tm大学本科学测试啊)，肯定不会很符合啊，都要学起来的。总的来说给我感觉就很随意，这场面试本来就注定失败。抬走，下一个。</p>\n<hr />\n<p>阿里。投的是新零售的算法实习岗，先有初步测验(性格测验)，然后等了近一个月，才开放了在线笔试，中间还莫名有个笔试模拟题，感觉没啥帮助，只让我感受一下难度。在线笔试，30分钟11个选择题，每个题都不是瞄一眼可得到结果的(对我这种小白来说)，涉及算法复杂度，机器学习基础概念，概率论，长到不想读的题，算也算不出的题，题目读不懂的题等。笔试还有两道编程题，时间1h，我的两个题都是用dfs解决的，第一时间想不到好的方法就暴力的遍历，当然其中剪枝做得好其实也不慢。本地运行可以了放上去运行竟然0%通过，那时时间也不多了也就没想着再改算法了，草草交卷。</p>\n<hr />\n<p>大华。投的是测试实习岗，因为算法岗都要研究生以上，投了也没软用。我恰好参加了个他们公司弄的软件挑战赛(初赛比的是基础的算法解题，类似leetcode,在博客前几篇有具体讲述)，又恰好进了复赛(也就可以免笔试资格)，待续～</p>\n<hr />\n<p>蘑菇街。投的是算法实习岗。投了以后两星期以内参加了在线笔试，但他那个笔试系统是在牛客网上的，题库应该也是牛客网提供。有些题甚至有些眼熟，哈哈。笔试有选择题，简答题，编程题。难度比阿里肯定简单些，而且如果你日常在牛客网刷题，那些个题很多能熟悉。然后一个月没消息，只能说雷声大雨点小。</p>\n<hr />\n<p>还有一些较小公司的，没有这么多复杂的环节，发了简历都是直接上来技术面试，我觉得倒是对于自己来说比较轻松（讨厌刁难人的笔试，首先我做的你看不看我不知道，参考多少也不知道，但我还得拼命做，死了脑细胞做完了直接拒绝/接受面试等权利都在你手上，仿佛我只有等结果的份？难道真是在笔试中学习不足，这就和你是啥啥就该干啥啥的一个套路。如年轻人就该多吃苦）。</p>\n<p>默安科技；投的是python开发，没几天hr就来了电，也没聊什么，直接就让换个时间技术电话面试。晚9点左右的电话面试（看来他们9点还没下班啊！！），我也没特地准备，该知道的就说，不知道的直接回不知道（拖着反而尴尬）。几类问题吧：简介，项目经验（问各个用到的技术点以及拓展，比如我说用了mongodb，就问你mongodb和mysql对比），数据结构（二叉树，问了从上往下遍历递归版非递归版；链表，问了如何确定中间点，快慢指针法），算法（了解的几个排序，具体的说了快排的思路），linux（问了看端口监听，看进程的命令），计算机网络（问了ping的协议，tcp/udp的区别）；    总的来说问的不是特别难，在我说不会时也不会特地刁难，总长在25分钟不到，竟然问了这么多问题，很紧凑，目的明确，不拖泥带水（觉得这个对于面试者和被面试者都很重要）。隔天收到offer。</p>"},{"title":"打造基金小数据库","catalog":true,"date":"2018-06-30T08:32:13.000Z","_content":"\n买过些基金，想着也可以自己打造个管理基金的，这会儿先弄来个基金数据库。<!--more-->\n\n基金数据来自于chinafund。\n\n先前准备：配置好mongodb的环境和下载好pymongo库且使用默认配置\n\n用于获取数据：jj.py\n<pre>#coding:utf-8\n#author:~!@#$%^&amp;*()_+ganster\nimport io \nimport re\nimport sys \nimport json\nimport requests\nimport datetime\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport time\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\nreq = requests.Session()\ntoday = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n\n#获取单个基金历史净值\n#只能用于开放基金\n#返回数据dataframe\ndef get_jjjz(code,start=\"2018-01-01\",end=today):\n    data = {\n        \"startdate\": start,\n        \"enddate\": today,\n        \"code\": code\n    }\n    resp = req.post(\"http://info.chinafund.cn/fund/\"+code+\"/jjjz/\",data=data)\n    htmlstr = resp.text\n    print(htmlstr,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    arrstr = re.findall(r\"fundlsjz = (.*);\",htmlstr)[0].replace(\"\\'\",\"\\\"\")\n    jsondata = json.loads(arrstr)\n    data = pd.DataFrame(jsondata,columns=[\"date\",\"dwjz\",\"ljjz\"])\n    return data\n\n#代码 简称 分类 单位净值 累计净值 日增值 日增长 周增 月增 季增 半年增 年增\n#获取当日所有基金净值,月增长等\n#返回数据dataframe,日期string\ndef get_day_info():\n    htmlstr = req.get(\"http://data.chinafund.cn/?WebShieldDRSessionVerify=b1U3PfdG5OPHxthA5c4k\")\n    htmlstr.encoding=\"gbk\"\n    #保存html\n    #print(htmlstr.text,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    soup = BeautifulSoup(htmlstr.text,\"lxml\")\n    date = soup.title.get_text()[10:20]\n    node = soup.find_all(\"table\",{\"id\":\"tablesorter\"})[0]\n    trnode = node.find_all(\"tr\")\n    data = []\n    for i in range(1,len(trnode)):\n        tdnodes = trnode[i].find_all(\"td\")\n        tmp = [tdnodes[2].get_text(),tdnodes[3].get_text(),tdnodes[4].img[\"src\"][-5],tdnodes[5].get_text(),tdnodes[6].get_text(),tdnodes[7].get_text(),tdnodes[8].get_text(),tdnodes[9].get_text(),tdnodes[10].get_text(),tdnodes[11].get_text(),tdnodes[12].get_text(),tdnodes[13].get_text()]\n        data.append(tmp)\n    res = pd.DataFrame(data,columns=[\"code\",\"name\",\"cate\",\"dwjz\",\"ljjz\",\"rzzhi\",\"rzzha\",\"zhz\",\"yz\",\"jz\",\"bnz\",\"nz\"])\n    return res,date\n\n#获取开放基金列表\n#jj_list.csv为上面获取的当日基金code列\n#注：当日基金中为全部基金，开放基金只有一部分。\ndef get_jj_list():\n    return pd.read_csv(\"jj_list1.csv\",index_col=0)\n    #make jj_list\n    '''\n    res = []\n    jj_list = pd.read_csv(\"jj_list.csv\")\n    resp = req.get(\"http://info.chinafund.cn/\")\n    resp.encoding=\"gbk\"\n    soup = BeautifulSoup(resp.text,\"lxml\")\n    for n in range(1,24):\n        divnode = soup.find_all(\"div\",{\"id\":\"kfjj_\"+str(n)})[0]\n        trnodes = divnode.find_all(\"tr\")\n        for i in range(1,len(trnodes)):\n            tdnodes = trnodes[i].find_all(\"td\")\n            tmp = [tdnodes[0].get_text(),tdnodes[1].get_text()]\n            try:\n                tmp.append(int(jj_list[jj_list[\"code\"]==int(tmp[0])][\"cate\"].values[0]))\n            except:\n                tmp.append(0)\n            res.append(tmp)\n    data = pd.DataFrame(res,columns=[\"code\",\"name\",\"cate\"])\n    '''\n\n#保存为csv格式\ndef save_csv(data,filename=\"nofilename\"):\n    data.to_csv(filename+\".csv\",encoding='utf_8_sig')\n\n#计算关注基金涨跌幅\n#返回list\ndef jj_zdf(code,start):\n    tmp = get_jjjz(code,start=start)\n    dwjz = tmp[\"dwjz\"]\n    first = dwjz[len(tmp)-1]\n    zdf = ((dwjz-first)/first).tolist()[::-1]\n    return zdf\n\n#计算关注股票的涨跌幅\n#返回字典，key为基金code\ndef jj_follow_zdf(follow):\n    zdfs = {}\n    for jj in follow:\n        print(jj[0])\n        try:\n            zdfs[jj[0]] = jj_zdf(jj[0],jj[1])\n        except:\n            print(\"error:\"+jj[0])\n        time.sleep(10)\n    return zdfs\n\n#以类别筛选基金\n#1-股票型，2-指数型，3-混合型，4-债券型，5-QDII\ndef jj_select_cate(category=\"2\"):\n    jj_list,_ = get_day_info()\n    return jj_list[jj_list['cate']==category]\n\n#筛选指数型基金并获取一个月涨跌幅\ndef jj_test():\n    jjs = jj_select_cate(2)\n    follow = []\n    for i in jjs[\"code\"]:\n        follow.append([str(i).zfill(6),\"2018-05-07\"])\n    print(json.dump(jj_follow_zdf(follow),open(\"test.json\",\"w\")))</pre>\n用于数据库插入：jjdb.py\n<pre>from pymongo import MongoClient\nimport datetime\nimport jj\n\nclient = MongoClient()\nDB = client.jj\n\n#检查时间是否今天（今天是否是交易日）\ndef check_time(date):\n    today = datetime.date.today().strftime(\"%Y-%m-%d\")\n    if date == today:\n        return True\n    else:\n        return False\n\n#str转换成float\ndef trans_float(num):\n    try:\n        res = float(num)\n    except:\n        res = float(0)\n    return res\n\n#插入日期和单位净值\ndef insert_data(data,date):\n    for i in range(len(data)):\n        collection = DB[data.iloc[i][\"code\"]]\n        posts = {\"_id\":date,\"value\":trans_float(data.iloc[i][\"dwjz\"])}\n        collection.insert_one(posts)\n\n#主函数\ndef main():\n    data,date = jj.get_day_info()\n    if check_time(date):\n        insert_data(data,date)\n    else:\n        return\n\nif __name__ == \"__main__\":\n    main()</pre>\n为了每天定时运行，这里顺便来学一下linux的crontab\n<pre>#修改crontab配置文件\ncrontab -e</pre>\n<pre>示例：\n前五个分别为分(0-59) 时(0-23) 天(1-31) 月(1-12) 星期(0-6) \n后面是命令\n&gt;&gt;之后是log文件\n2&gt;&amp;1表示正确错误的log都打印到log文件\n* * * * * /usr/local/bin/python3 /home/jjdb.py &gt;&gt; /root/test/test.log 2&gt;&amp;1</pre>\n修改完保存就能用。\n\n这里只做了进净值存储，后期还可以做一些基金管理，统计分析之类的。\n","source":"_posts/2018/article_23_打造基金小数据库.md","raw":"\n---\ntitle: 打造基金小数据库\ncatalog: true\ndate: 2018-6-30 16:32:13\n---\n\n买过些基金，想着也可以自己打造个管理基金的，这会儿先弄来个基金数据库。<!--more-->\n\n基金数据来自于chinafund。\n\n先前准备：配置好mongodb的环境和下载好pymongo库且使用默认配置\n\n用于获取数据：jj.py\n<pre>#coding:utf-8\n#author:~!@#$%^&amp;*()_+ganster\nimport io \nimport re\nimport sys \nimport json\nimport requests\nimport datetime\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport time\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\nreq = requests.Session()\ntoday = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n\n#获取单个基金历史净值\n#只能用于开放基金\n#返回数据dataframe\ndef get_jjjz(code,start=\"2018-01-01\",end=today):\n    data = {\n        \"startdate\": start,\n        \"enddate\": today,\n        \"code\": code\n    }\n    resp = req.post(\"http://info.chinafund.cn/fund/\"+code+\"/jjjz/\",data=data)\n    htmlstr = resp.text\n    print(htmlstr,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    arrstr = re.findall(r\"fundlsjz = (.*);\",htmlstr)[0].replace(\"\\'\",\"\\\"\")\n    jsondata = json.loads(arrstr)\n    data = pd.DataFrame(jsondata,columns=[\"date\",\"dwjz\",\"ljjz\"])\n    return data\n\n#代码 简称 分类 单位净值 累计净值 日增值 日增长 周增 月增 季增 半年增 年增\n#获取当日所有基金净值,月增长等\n#返回数据dataframe,日期string\ndef get_day_info():\n    htmlstr = req.get(\"http://data.chinafund.cn/?WebShieldDRSessionVerify=b1U3PfdG5OPHxthA5c4k\")\n    htmlstr.encoding=\"gbk\"\n    #保存html\n    #print(htmlstr.text,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    soup = BeautifulSoup(htmlstr.text,\"lxml\")\n    date = soup.title.get_text()[10:20]\n    node = soup.find_all(\"table\",{\"id\":\"tablesorter\"})[0]\n    trnode = node.find_all(\"tr\")\n    data = []\n    for i in range(1,len(trnode)):\n        tdnodes = trnode[i].find_all(\"td\")\n        tmp = [tdnodes[2].get_text(),tdnodes[3].get_text(),tdnodes[4].img[\"src\"][-5],tdnodes[5].get_text(),tdnodes[6].get_text(),tdnodes[7].get_text(),tdnodes[8].get_text(),tdnodes[9].get_text(),tdnodes[10].get_text(),tdnodes[11].get_text(),tdnodes[12].get_text(),tdnodes[13].get_text()]\n        data.append(tmp)\n    res = pd.DataFrame(data,columns=[\"code\",\"name\",\"cate\",\"dwjz\",\"ljjz\",\"rzzhi\",\"rzzha\",\"zhz\",\"yz\",\"jz\",\"bnz\",\"nz\"])\n    return res,date\n\n#获取开放基金列表\n#jj_list.csv为上面获取的当日基金code列\n#注：当日基金中为全部基金，开放基金只有一部分。\ndef get_jj_list():\n    return pd.read_csv(\"jj_list1.csv\",index_col=0)\n    #make jj_list\n    '''\n    res = []\n    jj_list = pd.read_csv(\"jj_list.csv\")\n    resp = req.get(\"http://info.chinafund.cn/\")\n    resp.encoding=\"gbk\"\n    soup = BeautifulSoup(resp.text,\"lxml\")\n    for n in range(1,24):\n        divnode = soup.find_all(\"div\",{\"id\":\"kfjj_\"+str(n)})[0]\n        trnodes = divnode.find_all(\"tr\")\n        for i in range(1,len(trnodes)):\n            tdnodes = trnodes[i].find_all(\"td\")\n            tmp = [tdnodes[0].get_text(),tdnodes[1].get_text()]\n            try:\n                tmp.append(int(jj_list[jj_list[\"code\"]==int(tmp[0])][\"cate\"].values[0]))\n            except:\n                tmp.append(0)\n            res.append(tmp)\n    data = pd.DataFrame(res,columns=[\"code\",\"name\",\"cate\"])\n    '''\n\n#保存为csv格式\ndef save_csv(data,filename=\"nofilename\"):\n    data.to_csv(filename+\".csv\",encoding='utf_8_sig')\n\n#计算关注基金涨跌幅\n#返回list\ndef jj_zdf(code,start):\n    tmp = get_jjjz(code,start=start)\n    dwjz = tmp[\"dwjz\"]\n    first = dwjz[len(tmp)-1]\n    zdf = ((dwjz-first)/first).tolist()[::-1]\n    return zdf\n\n#计算关注股票的涨跌幅\n#返回字典，key为基金code\ndef jj_follow_zdf(follow):\n    zdfs = {}\n    for jj in follow:\n        print(jj[0])\n        try:\n            zdfs[jj[0]] = jj_zdf(jj[0],jj[1])\n        except:\n            print(\"error:\"+jj[0])\n        time.sleep(10)\n    return zdfs\n\n#以类别筛选基金\n#1-股票型，2-指数型，3-混合型，4-债券型，5-QDII\ndef jj_select_cate(category=\"2\"):\n    jj_list,_ = get_day_info()\n    return jj_list[jj_list['cate']==category]\n\n#筛选指数型基金并获取一个月涨跌幅\ndef jj_test():\n    jjs = jj_select_cate(2)\n    follow = []\n    for i in jjs[\"code\"]:\n        follow.append([str(i).zfill(6),\"2018-05-07\"])\n    print(json.dump(jj_follow_zdf(follow),open(\"test.json\",\"w\")))</pre>\n用于数据库插入：jjdb.py\n<pre>from pymongo import MongoClient\nimport datetime\nimport jj\n\nclient = MongoClient()\nDB = client.jj\n\n#检查时间是否今天（今天是否是交易日）\ndef check_time(date):\n    today = datetime.date.today().strftime(\"%Y-%m-%d\")\n    if date == today:\n        return True\n    else:\n        return False\n\n#str转换成float\ndef trans_float(num):\n    try:\n        res = float(num)\n    except:\n        res = float(0)\n    return res\n\n#插入日期和单位净值\ndef insert_data(data,date):\n    for i in range(len(data)):\n        collection = DB[data.iloc[i][\"code\"]]\n        posts = {\"_id\":date,\"value\":trans_float(data.iloc[i][\"dwjz\"])}\n        collection.insert_one(posts)\n\n#主函数\ndef main():\n    data,date = jj.get_day_info()\n    if check_time(date):\n        insert_data(data,date)\n    else:\n        return\n\nif __name__ == \"__main__\":\n    main()</pre>\n为了每天定时运行，这里顺便来学一下linux的crontab\n<pre>#修改crontab配置文件\ncrontab -e</pre>\n<pre>示例：\n前五个分别为分(0-59) 时(0-23) 天(1-31) 月(1-12) 星期(0-6) \n后面是命令\n&gt;&gt;之后是log文件\n2&gt;&amp;1表示正确错误的log都打印到log文件\n* * * * * /usr/local/bin/python3 /home/jjdb.py &gt;&gt; /root/test/test.log 2&gt;&amp;1</pre>\n修改完保存就能用。\n\n这里只做了进净值存储，后期还可以做一些基金管理，统计分析之类的。\n","slug":"2018/article_23_打造基金小数据库","published":1,"updated":"2021-01-27T04:46:28.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh73z00250770bahkleiu","content":"<p>买过些基金，想着也可以自己打造个管理基金的，这会儿先弄来个基金数据库。<a id=\"more\"></a></p>\n<p>基金数据来自于chinafund。</p>\n<p>先前准备：配置好mongodb的环境和下载好pymongo库且使用默认配置</p>\n<p>用于获取数据：<a href=\"http://jj.py\" target=\"_blank\" rel=\"external\">jj.py</a></p>\n<pre>#coding:utf-8\n#author:~!@#$%^&amp;*()_+ganster\nimport io \nimport re\nimport sys \nimport json\nimport requests\nimport datetime\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport time\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\nreq = requests.Session()\ntoday = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n\n#获取单个基金历史净值\n#只能用于开放基金\n#返回数据dataframe\ndef get_jjjz(code,start=\"2018-01-01\",end=today):\n    data = {\n        \"startdate\": start,\n        \"enddate\": today,\n        \"code\": code\n    }\n    resp = req.post(\"http://info.chinafund.cn/fund/\"+code+\"/jjjz/\",data=data)\n    htmlstr = resp.text\n    print(htmlstr,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    arrstr = re.findall(r\"fundlsjz = (.*);\",htmlstr)[0].replace(\"\\'\",\"\\\"\")\n    jsondata = json.loads(arrstr)\n    data = pd.DataFrame(jsondata,columns=[\"date\",\"dwjz\",\"ljjz\"])\n    return data\n\n#代码 简称 分类 单位净值 累计净值 日增值 日增长 周增 月增 季增 半年增 年增\n#获取当日所有基金净值,月增长等\n#返回数据dataframe,日期string\ndef get_day_info():\n    htmlstr = req.get(\"http://data.chinafund.cn/?WebShieldDRSessionVerify=b1U3PfdG5OPHxthA5c4k\")\n    htmlstr.encoding=\"gbk\"\n    #保存html\n    #print(htmlstr.text,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    soup = BeautifulSoup(htmlstr.text,\"lxml\")\n    date = soup.title.get_text()[10:20]\n    node = soup.find_all(\"table\",{\"id\":\"tablesorter\"})[0]\n    trnode = node.find_all(\"tr\")\n    data = []\n    for i in range(1,len(trnode)):\n        tdnodes = trnode[i].find_all(\"td\")\n        tmp = [tdnodes[2].get_text(),tdnodes[3].get_text(),tdnodes[4].img[\"src\"][-5],tdnodes[5].get_text(),tdnodes[6].get_text(),tdnodes[7].get_text(),tdnodes[8].get_text(),tdnodes[9].get_text(),tdnodes[10].get_text(),tdnodes[11].get_text(),tdnodes[12].get_text(),tdnodes[13].get_text()]\n        data.append(tmp)\n    res = pd.DataFrame(data,columns=[\"code\",\"name\",\"cate\",\"dwjz\",\"ljjz\",\"rzzhi\",\"rzzha\",\"zhz\",\"yz\",\"jz\",\"bnz\",\"nz\"])\n    return res,date\n\n#获取开放基金列表\n#jj_list.csv为上面获取的当日基金code列\n#注：当日基金中为全部基金，开放基金只有一部分。\ndef get_jj_list():\n    return pd.read_csv(\"jj_list1.csv\",index_col=0)\n    #make jj_list\n    '''\n    res = []\n    jj_list = pd.read_csv(\"jj_list.csv\")\n    resp = req.get(\"http://info.chinafund.cn/\")\n    resp.encoding=\"gbk\"\n    soup = BeautifulSoup(resp.text,\"lxml\")\n    for n in range(1,24):\n        divnode = soup.find_all(\"div\",{\"id\":\"kfjj_\"+str(n)})[0]\n        trnodes = divnode.find_all(\"tr\")\n        for i in range(1,len(trnodes)):\n            tdnodes = trnodes[i].find_all(\"td\")\n            tmp = [tdnodes[0].get_text(),tdnodes[1].get_text()]\n            try:\n                tmp.append(int(jj_list[jj_list[\"code\"]==int(tmp[0])][\"cate\"].values[0]))\n            except:\n                tmp.append(0)\n            res.append(tmp)\n    data = pd.DataFrame(res,columns=[\"code\",\"name\",\"cate\"])\n    '''\n\n#保存为csv格式\ndef save_csv(data,filename=\"nofilename\"):\n    data.to_csv(filename+\".csv\",encoding='utf_8_sig')\n\n#计算关注基金涨跌幅\n#返回list\ndef jj_zdf(code,start):\n    tmp = get_jjjz(code,start=start)\n    dwjz = tmp[\"dwjz\"]\n    first = dwjz[len(tmp)-1]\n    zdf = ((dwjz-first)/first).tolist()[::-1]\n    return zdf\n\n#计算关注股票的涨跌幅\n#返回字典，key为基金code\ndef jj_follow_zdf(follow):\n    zdfs = {}\n    for jj in follow:\n        print(jj[0])\n        try:\n            zdfs[jj[0]] = jj_zdf(jj[0],jj[1])\n        except:\n            print(\"error:\"+jj[0])\n        time.sleep(10)\n    return zdfs\n\n#以类别筛选基金\n#1-股票型，2-指数型，3-混合型，4-债券型，5-QDII\ndef jj_select_cate(category=\"2\"):\n    jj_list,_ = get_day_info()\n    return jj_list[jj_list['cate']==category]\n\n#筛选指数型基金并获取一个月涨跌幅\ndef jj_test():\n    jjs = jj_select_cate(2)\n    follow = []\n    for i in jjs[\"code\"]:\n        follow.append([str(i).zfill(6),\"2018-05-07\"])\n    print(json.dump(jj_follow_zdf(follow),open(\"test.json\",\"w\")))</pre>\n<p>用于数据库插入：<a href=\"http://jjdb.py\" target=\"_blank\" rel=\"external\">jjdb.py</a></p>\n<pre>from pymongo import MongoClient\nimport datetime\nimport jj\n\nclient = MongoClient()\nDB = client.jj\n\n#检查时间是否今天（今天是否是交易日）\ndef check_time(date):\n    today = datetime.date.today().strftime(\"%Y-%m-%d\")\n    if date == today:\n        return True\n    else:\n        return False\n\n#str转换成float\ndef trans_float(num):\n    try:\n        res = float(num)\n    except:\n        res = float(0)\n    return res\n\n#插入日期和单位净值\ndef insert_data(data,date):\n    for i in range(len(data)):\n        collection = DB[data.iloc[i][\"code\"]]\n        posts = {\"_id\":date,\"value\":trans_float(data.iloc[i][\"dwjz\"])}\n        collection.insert_one(posts)\n\n#主函数\ndef main():\n    data,date = jj.get_day_info()\n    if check_time(date):\n        insert_data(data,date)\n    else:\n        return\n\nif __name__ == \"__main__\":\n    main()</pre>\n<p>为了每天定时运行，这里顺便来学一下linux的crontab</p>\n<pre>#修改crontab配置文件\ncrontab -e</pre>\n<pre>示例：\n前五个分别为分(0-59) 时(0-23) 天(1-31) 月(1-12) 星期(0-6) \n后面是命令\n&gt;&gt;之后是log文件\n2&gt;&amp;1表示正确错误的log都打印到log文件\n* * * * * /usr/local/bin/python3 /home/jjdb.py &gt;&gt; /root/test/test.log 2&gt;&amp;1</pre>\n<p>修改完保存就能用。</p>\n<p>这里只做了进净值存储，后期还可以做一些基金管理，统计分析之类的。</p>\n","excerpt":"<p>买过些基金，想着也可以自己打造个管理基金的，这会儿先弄来个基金数据库。","more":"</p>\n<p>基金数据来自于chinafund。</p>\n<p>先前准备：配置好mongodb的环境和下载好pymongo库且使用默认配置</p>\n<p>用于获取数据：<a href=\"http://jj.py\">jj.py</a></p>\n<pre>#coding:utf-8\n#author:~!@#$%^&amp;*()_+ganster\nimport io \nimport re\nimport sys \nimport json\nimport requests\nimport datetime\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport time\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf-8')\nreq = requests.Session()\ntoday = datetime.datetime.today().strftime(\"%Y-%m-%d\")\n\n#获取单个基金历史净值\n#只能用于开放基金\n#返回数据dataframe\ndef get_jjjz(code,start=\"2018-01-01\",end=today):\n    data = {\n        \"startdate\": start,\n        \"enddate\": today,\n        \"code\": code\n    }\n    resp = req.post(\"http://info.chinafund.cn/fund/\"+code+\"/jjjz/\",data=data)\n    htmlstr = resp.text\n    print(htmlstr,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    arrstr = re.findall(r\"fundlsjz = (.*);\",htmlstr)[0].replace(\"\\'\",\"\\\"\")\n    jsondata = json.loads(arrstr)\n    data = pd.DataFrame(jsondata,columns=[\"date\",\"dwjz\",\"ljjz\"])\n    return data\n\n#代码 简称 分类 单位净值 累计净值 日增值 日增长 周增 月增 季增 半年增 年增\n#获取当日所有基金净值,月增长等\n#返回数据dataframe,日期string\ndef get_day_info():\n    htmlstr = req.get(\"http://data.chinafund.cn/?WebShieldDRSessionVerify=b1U3PfdG5OPHxthA5c4k\")\n    htmlstr.encoding=\"gbk\"\n    #保存html\n    #print(htmlstr.text,file=open(\"test.html\",\"w\",encoding=\"utf-8\"))\n    soup = BeautifulSoup(htmlstr.text,\"lxml\")\n    date = soup.title.get_text()[10:20]\n    node = soup.find_all(\"table\",{\"id\":\"tablesorter\"})[0]\n    trnode = node.find_all(\"tr\")\n    data = []\n    for i in range(1,len(trnode)):\n        tdnodes = trnode[i].find_all(\"td\")\n        tmp = [tdnodes[2].get_text(),tdnodes[3].get_text(),tdnodes[4].img[\"src\"][-5],tdnodes[5].get_text(),tdnodes[6].get_text(),tdnodes[7].get_text(),tdnodes[8].get_text(),tdnodes[9].get_text(),tdnodes[10].get_text(),tdnodes[11].get_text(),tdnodes[12].get_text(),tdnodes[13].get_text()]\n        data.append(tmp)\n    res = pd.DataFrame(data,columns=[\"code\",\"name\",\"cate\",\"dwjz\",\"ljjz\",\"rzzhi\",\"rzzha\",\"zhz\",\"yz\",\"jz\",\"bnz\",\"nz\"])\n    return res,date\n\n#获取开放基金列表\n#jj_list.csv为上面获取的当日基金code列\n#注：当日基金中为全部基金，开放基金只有一部分。\ndef get_jj_list():\n    return pd.read_csv(\"jj_list1.csv\",index_col=0)\n    #make jj_list\n    '''\n    res = []\n    jj_list = pd.read_csv(\"jj_list.csv\")\n    resp = req.get(\"http://info.chinafund.cn/\")\n    resp.encoding=\"gbk\"\n    soup = BeautifulSoup(resp.text,\"lxml\")\n    for n in range(1,24):\n        divnode = soup.find_all(\"div\",{\"id\":\"kfjj_\"+str(n)})[0]\n        trnodes = divnode.find_all(\"tr\")\n        for i in range(1,len(trnodes)):\n            tdnodes = trnodes[i].find_all(\"td\")\n            tmp = [tdnodes[0].get_text(),tdnodes[1].get_text()]\n            try:\n                tmp.append(int(jj_list[jj_list[\"code\"]==int(tmp[0])][\"cate\"].values[0]))\n            except:\n                tmp.append(0)\n            res.append(tmp)\n    data = pd.DataFrame(res,columns=[\"code\",\"name\",\"cate\"])\n    '''\n\n#保存为csv格式\ndef save_csv(data,filename=\"nofilename\"):\n    data.to_csv(filename+\".csv\",encoding='utf_8_sig')\n\n#计算关注基金涨跌幅\n#返回list\ndef jj_zdf(code,start):\n    tmp = get_jjjz(code,start=start)\n    dwjz = tmp[\"dwjz\"]\n    first = dwjz[len(tmp)-1]\n    zdf = ((dwjz-first)/first).tolist()[::-1]\n    return zdf\n\n#计算关注股票的涨跌幅\n#返回字典，key为基金code\ndef jj_follow_zdf(follow):\n    zdfs = {}\n    for jj in follow:\n        print(jj[0])\n        try:\n            zdfs[jj[0]] = jj_zdf(jj[0],jj[1])\n        except:\n            print(\"error:\"+jj[0])\n        time.sleep(10)\n    return zdfs\n\n#以类别筛选基金\n#1-股票型，2-指数型，3-混合型，4-债券型，5-QDII\ndef jj_select_cate(category=\"2\"):\n    jj_list,_ = get_day_info()\n    return jj_list[jj_list['cate']==category]\n\n#筛选指数型基金并获取一个月涨跌幅\ndef jj_test():\n    jjs = jj_select_cate(2)\n    follow = []\n    for i in jjs[\"code\"]:\n        follow.append([str(i).zfill(6),\"2018-05-07\"])\n    print(json.dump(jj_follow_zdf(follow),open(\"test.json\",\"w\")))</pre>\n<p>用于数据库插入：<a href=\"http://jjdb.py\">jjdb.py</a></p>\n<pre>from pymongo import MongoClient\nimport datetime\nimport jj\n\nclient = MongoClient()\nDB = client.jj\n\n#检查时间是否今天（今天是否是交易日）\ndef check_time(date):\n    today = datetime.date.today().strftime(\"%Y-%m-%d\")\n    if date == today:\n        return True\n    else:\n        return False\n\n#str转换成float\ndef trans_float(num):\n    try:\n        res = float(num)\n    except:\n        res = float(0)\n    return res\n\n#插入日期和单位净值\ndef insert_data(data,date):\n    for i in range(len(data)):\n        collection = DB[data.iloc[i][\"code\"]]\n        posts = {\"_id\":date,\"value\":trans_float(data.iloc[i][\"dwjz\"])}\n        collection.insert_one(posts)\n\n#主函数\ndef main():\n    data,date = jj.get_day_info()\n    if check_time(date):\n        insert_data(data,date)\n    else:\n        return\n\nif __name__ == \"__main__\":\n    main()</pre>\n<p>为了每天定时运行，这里顺便来学一下linux的crontab</p>\n<pre>#修改crontab配置文件\ncrontab -e</pre>\n<pre>示例：\n前五个分别为分(0-59) 时(0-23) 天(1-31) 月(1-12) 星期(0-6) \n后面是命令\n&gt;&gt;之后是log文件\n2&gt;&amp;1表示正确错误的log都打印到log文件\n* * * * * /usr/local/bin/python3 /home/jjdb.py &gt;&gt; /root/test/test.log 2&gt;&amp;1</pre>\n<p>修改完保存就能用。</p>\n<p>这里只做了进净值存储，后期还可以做一些基金管理，统计分析之类的。</p>"},{"title":"视频运动检测尝试","catalog":true,"date":"2018-06-06T10:55:43.000Z","_content":"\n这里主要尝试一个用背景减除法实现运动检测<!--more-->\n\n视频是yuv格式，这里讲一下yuv的格式读取。用二进制读取yuv文件，从开头开始前w*h个字符的ascii码则是第一帧的灰度图（8位int），后面第w//2*h//2*2个字符存的是rgb信息。然后开始是第二帧。\n\n这里基本思路就是每次更新背景，然后做差分，然后优化噪声。\n\n直接上代码\n<pre>import cv2\nimport os\nimport numpy as np\n\nclass AnimTest():\n    def __init__(self):\n        self.bg = None    #存背景，用int16\n        self.n = 0        #用于计数第几张图\n\n    def resolution(self, w, h):\n        self.w = w\n        self.h = h\n        self.im = np.zeros((h,w))   #差分去噪处理后的返回矩阵\n\n    def cell_split(self, row, col):  \n        self.r = self.h // row     #每格高\n        self.c = self.w // col     #每格宽\n\n        # draw\n        '''\n        for i in range(self.r-1, self.h-1, self.r):\n            self.im[i] = 0\n        for j in range(self.c-1, self.w-1, self.c):\n            tmp = self.im.T\n            tmp[j] = 0\n        self.im = tmp.T\n        '''\n\n    def dir_region(self, x, y, x1, y1):\n        #计算真实的左上，右下坐标\n        self.x = self.c * x         \n        self.y = self.r * y\n        self.x1 = self.c * x1 - 1\n        self.y1 = self.r * y1 - 1\n        #print(self.x,self.y,self.x1,self.y1)\n\n        #draw\n        '''\n        for i in range(self.c * x,self.c * x1):\n            self.im[self.y][i] = 255\n            self.im[self.y1][i] = 255\n        for i in range(self.r * y,self.r * y1):\n            self.im[i][self.x] = 255\n            self.im[i][self.x1] = 255\n        '''\n\n    def set_threshold(self, t, s):\n        self.t = t\n        self.s = s\n\n    def yuv_process(self,im):\n        if self.bg is None:\n            self.bg = im.astype(np.int16)\n        #self.im = np.abs(self.bg-im)\n        '''\n        for i in range(self.x,self.x1):\n            for j in range(self.y,self.y1):\n                if im[i][j]&gt;self.bg[i][j]:\n                    self.im[i][j] = im[i][j]-self.bg[i][j]\n                else:\n                    self.im[i][j] = self.bg[i][j]-im[i][j]\n                if self.im[i][j] &lt; 20:\n                    self.im[i][j] = 0\n        '''\n        #self.im = self.fgbg.apply(im)\n        #背景数据得新背景\n        self.n += 1\n        tmpbg = (self.bg / self.n).astype(np.uint8)  #背景除次数，转为uint8格式\n\n        #优化图像与背景差分后的图像\n        self.im = cv2.absdiff(im,tmpbg)            #做差\n        self.im[np.where(self.im&lt;50)] = 0          #二值\n        self.im[np.where(self.im&gt;=50)] = 255\n        #mean = self.im.mean()\n        #var = self.im.std()\n        #print(mean,var)\n        #self.im[np.where(np.abs(self.im - mean) - 2.0 * var &gt; 0)] = 255\n        #self.im[np.where(self.im != 255)] = 0\n\n        #背景迭代更新储存背景数据\n        #im[np.where(self.im==255)] = 0\n        self.bg = self.bg + im                    #背景叠加\n        #print(self.bg[0][0])\n        #print(im.dtype)\n\n\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))      #膨胀或腐蚀大小\n        #self.im = cv2.erode(self.im,kernel)        #膨胀\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))\n        #self.im = cv2.dilate(self.im,kernel)       #腐蚀\n        #self.im = cv2.morphologyEx(self.im, cv2.MORPH_OPEN, kernel)    #开运算\n        #这里没返回，直接到展示show()\n\n    def show(self,i):\n        res=cv2.resize(self.im,(192*5,108*5),interpolation = cv2.INTER_CUBIC)\n        cv2.imshow('image', res)\n        cv2.waitKey(20)\n        #print(i)\n        #cv2.imwrite(\"tmp/\"+str(i)+\".jpg\",self.im)\n\n\ndef readYuvFile1(fp,width,height):\n    uv_width=width//2\n    uv_height=height//2\n\n    Y=np.zeros((height,width),np.uint8,'C')\n\n    for m in range(height):\n        for n in range(width):\n            Y[m,n]=ord(fp.read(1))\n\n    fp.read(uv_height*uv_width*2)\n\n    return Y\n\n\nif __name__ == \"__main__\": \n    #fgbg = cv2.bgsegm.createBackgroundSubtractorMOG()       #opencv 封装的一些背景减除方法MOG，MOG2等\n    #下载图\n    '''\n    width = 1920\n    height = 1080\n    fp = open(\"雨+夜+马路1_1920x1080.yuv\",'rb+')\n\n    for i in range(100):\n        print(i)\n        data = readYuvFile(fp,width,height)\n        Y=data[0]\n        cv2.imwrite(\"image/\"+str(i)+\".jpg\",Y)\n    '''\n\n    #初始化\n    t = AnimTest()\n    width = 1920\n    height = 1080\n    t.resolution(width,height)\n    t.cell_split(108,192)\n    t.dir_region(0,0,108,192)\n    t.set_threshold(10,50)\n\n    #处理展示，这里直接用的下载好的图\n    for i in range(100):\n        #im = readYuvFile1(fp,width,height)\n        im = cv2.imread(\"image/\"+str(i)+\".jpg\",0)\n        t.yuv_process(im)\n        t.show(i)</pre>\n效果如下：\n\n<img class=\"alignnone size-medium wp-image-671\" src=\"/img/uploads/2018/06/微信图片_20180606185250-300x169.png\" alt=\"\" width=\"300\" height=\"169\" />\n\n对于室内人物移动效果还是可以的，但对于不位移或有遮挡干扰等效果还是不行。\n","source":"_posts/2018/article_22_视频运动检测尝试.md","raw":"\n---\ntitle: 视频运动检测尝试\ncatalog: true\ndate: 2018-6-6 18:55:43\n---\n\n这里主要尝试一个用背景减除法实现运动检测<!--more-->\n\n视频是yuv格式，这里讲一下yuv的格式读取。用二进制读取yuv文件，从开头开始前w*h个字符的ascii码则是第一帧的灰度图（8位int），后面第w//2*h//2*2个字符存的是rgb信息。然后开始是第二帧。\n\n这里基本思路就是每次更新背景，然后做差分，然后优化噪声。\n\n直接上代码\n<pre>import cv2\nimport os\nimport numpy as np\n\nclass AnimTest():\n    def __init__(self):\n        self.bg = None    #存背景，用int16\n        self.n = 0        #用于计数第几张图\n\n    def resolution(self, w, h):\n        self.w = w\n        self.h = h\n        self.im = np.zeros((h,w))   #差分去噪处理后的返回矩阵\n\n    def cell_split(self, row, col):  \n        self.r = self.h // row     #每格高\n        self.c = self.w // col     #每格宽\n\n        # draw\n        '''\n        for i in range(self.r-1, self.h-1, self.r):\n            self.im[i] = 0\n        for j in range(self.c-1, self.w-1, self.c):\n            tmp = self.im.T\n            tmp[j] = 0\n        self.im = tmp.T\n        '''\n\n    def dir_region(self, x, y, x1, y1):\n        #计算真实的左上，右下坐标\n        self.x = self.c * x         \n        self.y = self.r * y\n        self.x1 = self.c * x1 - 1\n        self.y1 = self.r * y1 - 1\n        #print(self.x,self.y,self.x1,self.y1)\n\n        #draw\n        '''\n        for i in range(self.c * x,self.c * x1):\n            self.im[self.y][i] = 255\n            self.im[self.y1][i] = 255\n        for i in range(self.r * y,self.r * y1):\n            self.im[i][self.x] = 255\n            self.im[i][self.x1] = 255\n        '''\n\n    def set_threshold(self, t, s):\n        self.t = t\n        self.s = s\n\n    def yuv_process(self,im):\n        if self.bg is None:\n            self.bg = im.astype(np.int16)\n        #self.im = np.abs(self.bg-im)\n        '''\n        for i in range(self.x,self.x1):\n            for j in range(self.y,self.y1):\n                if im[i][j]&gt;self.bg[i][j]:\n                    self.im[i][j] = im[i][j]-self.bg[i][j]\n                else:\n                    self.im[i][j] = self.bg[i][j]-im[i][j]\n                if self.im[i][j] &lt; 20:\n                    self.im[i][j] = 0\n        '''\n        #self.im = self.fgbg.apply(im)\n        #背景数据得新背景\n        self.n += 1\n        tmpbg = (self.bg / self.n).astype(np.uint8)  #背景除次数，转为uint8格式\n\n        #优化图像与背景差分后的图像\n        self.im = cv2.absdiff(im,tmpbg)            #做差\n        self.im[np.where(self.im&lt;50)] = 0          #二值\n        self.im[np.where(self.im&gt;=50)] = 255\n        #mean = self.im.mean()\n        #var = self.im.std()\n        #print(mean,var)\n        #self.im[np.where(np.abs(self.im - mean) - 2.0 * var &gt; 0)] = 255\n        #self.im[np.where(self.im != 255)] = 0\n\n        #背景迭代更新储存背景数据\n        #im[np.where(self.im==255)] = 0\n        self.bg = self.bg + im                    #背景叠加\n        #print(self.bg[0][0])\n        #print(im.dtype)\n\n\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))      #膨胀或腐蚀大小\n        #self.im = cv2.erode(self.im,kernel)        #膨胀\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))\n        #self.im = cv2.dilate(self.im,kernel)       #腐蚀\n        #self.im = cv2.morphologyEx(self.im, cv2.MORPH_OPEN, kernel)    #开运算\n        #这里没返回，直接到展示show()\n\n    def show(self,i):\n        res=cv2.resize(self.im,(192*5,108*5),interpolation = cv2.INTER_CUBIC)\n        cv2.imshow('image', res)\n        cv2.waitKey(20)\n        #print(i)\n        #cv2.imwrite(\"tmp/\"+str(i)+\".jpg\",self.im)\n\n\ndef readYuvFile1(fp,width,height):\n    uv_width=width//2\n    uv_height=height//2\n\n    Y=np.zeros((height,width),np.uint8,'C')\n\n    for m in range(height):\n        for n in range(width):\n            Y[m,n]=ord(fp.read(1))\n\n    fp.read(uv_height*uv_width*2)\n\n    return Y\n\n\nif __name__ == \"__main__\": \n    #fgbg = cv2.bgsegm.createBackgroundSubtractorMOG()       #opencv 封装的一些背景减除方法MOG，MOG2等\n    #下载图\n    '''\n    width = 1920\n    height = 1080\n    fp = open(\"雨+夜+马路1_1920x1080.yuv\",'rb+')\n\n    for i in range(100):\n        print(i)\n        data = readYuvFile(fp,width,height)\n        Y=data[0]\n        cv2.imwrite(\"image/\"+str(i)+\".jpg\",Y)\n    '''\n\n    #初始化\n    t = AnimTest()\n    width = 1920\n    height = 1080\n    t.resolution(width,height)\n    t.cell_split(108,192)\n    t.dir_region(0,0,108,192)\n    t.set_threshold(10,50)\n\n    #处理展示，这里直接用的下载好的图\n    for i in range(100):\n        #im = readYuvFile1(fp,width,height)\n        im = cv2.imread(\"image/\"+str(i)+\".jpg\",0)\n        t.yuv_process(im)\n        t.show(i)</pre>\n效果如下：\n\n<img class=\"alignnone size-medium wp-image-671\" src=\"/img/uploads/2018/06/微信图片_20180606185250-300x169.png\" alt=\"\" width=\"300\" height=\"169\" />\n\n对于室内人物移动效果还是可以的，但对于不位移或有遮挡干扰等效果还是不行。\n","slug":"2018/article_22_视频运动检测尝试","published":1,"updated":"2021-01-27T04:46:28.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74100260770we8r1l3i","content":"<p>这里主要尝试一个用背景减除法实现运动检测<a id=\"more\"></a></p>\n<p>视频是yuv格式，这里讲一下yuv的格式读取。用二进制读取yuv文件，从开头开始前w<em>h个字符的ascii码则是第一帧的灰度图（8位int），后面第w//2</em>h//2*2个字符存的是rgb信息。然后开始是第二帧。</p>\n<p>这里基本思路就是每次更新背景，然后做差分，然后优化噪声。</p>\n<p>直接上代码</p>\n<pre>import cv2\nimport os\nimport numpy as np\n\nclass AnimTest():\n    def __init__(self):\n        self.bg = None    #存背景，用int16\n        self.n = 0        #用于计数第几张图\n\n    def resolution(self, w, h):\n        self.w = w\n        self.h = h\n        self.im = np.zeros((h,w))   #差分去噪处理后的返回矩阵\n\n    def cell_split(self, row, col):  \n        self.r = self.h // row     #每格高\n        self.c = self.w // col     #每格宽\n\n        # draw\n        '''\n        for i in range(self.r-1, self.h-1, self.r):\n            self.im[i] = 0\n        for j in range(self.c-1, self.w-1, self.c):\n            tmp = self.im.T\n            tmp[j] = 0\n        self.im = tmp.T\n        '''\n\n    def dir_region(self, x, y, x1, y1):\n        #计算真实的左上，右下坐标\n        self.x = self.c * x         \n        self.y = self.r * y\n        self.x1 = self.c * x1 - 1\n        self.y1 = self.r * y1 - 1\n        #print(self.x,self.y,self.x1,self.y1)\n\n        #draw\n        '''\n        for i in range(self.c * x,self.c * x1):\n            self.im[self.y][i] = 255\n            self.im[self.y1][i] = 255\n        for i in range(self.r * y,self.r * y1):\n            self.im[i][self.x] = 255\n            self.im[i][self.x1] = 255\n        '''\n\n    def set_threshold(self, t, s):\n        self.t = t\n        self.s = s\n\n    def yuv_process(self,im):\n        if self.bg is None:\n            self.bg = im.astype(np.int16)\n        #self.im = np.abs(self.bg-im)\n        '''\n        for i in range(self.x,self.x1):\n            for j in range(self.y,self.y1):\n                if im[i][j]&gt;self.bg[i][j]:\n                    self.im[i][j] = im[i][j]-self.bg[i][j]\n                else:\n                    self.im[i][j] = self.bg[i][j]-im[i][j]\n                if self.im[i][j] &lt; 20:\n                    self.im[i][j] = 0\n        '''\n        #self.im = self.fgbg.apply(im)\n        #背景数据得新背景\n        self.n += 1\n        tmpbg = (self.bg / self.n).astype(np.uint8)  #背景除次数，转为uint8格式\n\n        #优化图像与背景差分后的图像\n        self.im = cv2.absdiff(im,tmpbg)            #做差\n        self.im[np.where(self.im&lt;50)] = 0          #二值\n        self.im[np.where(self.im&gt;=50)] = 255\n        #mean = self.im.mean()\n        #var = self.im.std()\n        #print(mean,var)\n        #self.im[np.where(np.abs(self.im - mean) - 2.0 * var &gt; 0)] = 255\n        #self.im[np.where(self.im != 255)] = 0\n\n        #背景迭代更新储存背景数据\n        #im[np.where(self.im==255)] = 0\n        self.bg = self.bg + im                    #背景叠加\n        #print(self.bg[0][0])\n        #print(im.dtype)\n\n\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))      #膨胀或腐蚀大小\n        #self.im = cv2.erode(self.im,kernel)        #膨胀\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))\n        #self.im = cv2.dilate(self.im,kernel)       #腐蚀\n        #self.im = cv2.morphologyEx(self.im, cv2.MORPH_OPEN, kernel)    #开运算\n        #这里没返回，直接到展示show()\n\n    def show(self,i):\n        res=cv2.resize(self.im,(192*5,108*5),interpolation = cv2.INTER_CUBIC)\n        cv2.imshow('image', res)\n        cv2.waitKey(20)\n        #print(i)\n        #cv2.imwrite(\"tmp/\"+str(i)+\".jpg\",self.im)\n\n\ndef readYuvFile1(fp,width,height):\n    uv_width=width//2\n    uv_height=height//2\n\n    Y=np.zeros((height,width),np.uint8,'C')\n\n    for m in range(height):\n        for n in range(width):\n            Y[m,n]=ord(fp.read(1))\n\n    fp.read(uv_height*uv_width*2)\n\n    return Y\n\n\nif __name__ == \"__main__\": \n    #fgbg = cv2.bgsegm.createBackgroundSubtractorMOG()       #opencv 封装的一些背景减除方法MOG，MOG2等\n    #下载图\n    '''\n    width = 1920\n    height = 1080\n    fp = open(\"雨+夜+马路1_1920x1080.yuv\",'rb+')\n\n    for i in range(100):\n        print(i)\n        data = readYuvFile(fp,width,height)\n        Y=data[0]\n        cv2.imwrite(\"image/\"+str(i)+\".jpg\",Y)\n    '''\n\n    #初始化\n    t = AnimTest()\n    width = 1920\n    height = 1080\n    t.resolution(width,height)\n    t.cell_split(108,192)\n    t.dir_region(0,0,108,192)\n    t.set_threshold(10,50)\n\n    #处理展示，这里直接用的下载好的图\n    for i in range(100):\n        #im = readYuvFile1(fp,width,height)\n        im = cv2.imread(\"image/\"+str(i)+\".jpg\",0)\n        t.yuv_process(im)\n        t.show(i)</pre>\n<p>效果如下：</p>\n<img class=\"alignnone size-medium wp-image-671\" src=\"/img/uploads/2018/06/微信图片_20180606185250-300x169.png\" alt=\"\" width=\"300\" height=\"169\">\n<p>对于室内人物移动效果还是可以的，但对于不位移或有遮挡干扰等效果还是不行。</p>\n","excerpt":"<p>这里主要尝试一个用背景减除法实现运动检测","more":"</p>\n<p>视频是yuv格式，这里讲一下yuv的格式读取。用二进制读取yuv文件，从开头开始前w<em>h个字符的ascii码则是第一帧的灰度图（8位int），后面第w//2</em>h//2*2个字符存的是rgb信息。然后开始是第二帧。</p>\n<p>这里基本思路就是每次更新背景，然后做差分，然后优化噪声。</p>\n<p>直接上代码</p>\n<pre>import cv2\nimport os\nimport numpy as np\n\nclass AnimTest():\n    def __init__(self):\n        self.bg = None    #存背景，用int16\n        self.n = 0        #用于计数第几张图\n\n    def resolution(self, w, h):\n        self.w = w\n        self.h = h\n        self.im = np.zeros((h,w))   #差分去噪处理后的返回矩阵\n\n    def cell_split(self, row, col):  \n        self.r = self.h // row     #每格高\n        self.c = self.w // col     #每格宽\n\n        # draw\n        '''\n        for i in range(self.r-1, self.h-1, self.r):\n            self.im[i] = 0\n        for j in range(self.c-1, self.w-1, self.c):\n            tmp = self.im.T\n            tmp[j] = 0\n        self.im = tmp.T\n        '''\n\n    def dir_region(self, x, y, x1, y1):\n        #计算真实的左上，右下坐标\n        self.x = self.c * x         \n        self.y = self.r * y\n        self.x1 = self.c * x1 - 1\n        self.y1 = self.r * y1 - 1\n        #print(self.x,self.y,self.x1,self.y1)\n\n        #draw\n        '''\n        for i in range(self.c * x,self.c * x1):\n            self.im[self.y][i] = 255\n            self.im[self.y1][i] = 255\n        for i in range(self.r * y,self.r * y1):\n            self.im[i][self.x] = 255\n            self.im[i][self.x1] = 255\n        '''\n\n    def set_threshold(self, t, s):\n        self.t = t\n        self.s = s\n\n    def yuv_process(self,im):\n        if self.bg is None:\n            self.bg = im.astype(np.int16)\n        #self.im = np.abs(self.bg-im)\n        '''\n        for i in range(self.x,self.x1):\n            for j in range(self.y,self.y1):\n                if im[i][j]&gt;self.bg[i][j]:\n                    self.im[i][j] = im[i][j]-self.bg[i][j]\n                else:\n                    self.im[i][j] = self.bg[i][j]-im[i][j]\n                if self.im[i][j] &lt; 20:\n                    self.im[i][j] = 0\n        '''\n        #self.im = self.fgbg.apply(im)\n        #背景数据得新背景\n        self.n += 1\n        tmpbg = (self.bg / self.n).astype(np.uint8)  #背景除次数，转为uint8格式\n\n        #优化图像与背景差分后的图像\n        self.im = cv2.absdiff(im,tmpbg)            #做差\n        self.im[np.where(self.im&lt;50)] = 0          #二值\n        self.im[np.where(self.im&gt;=50)] = 255\n        #mean = self.im.mean()\n        #var = self.im.std()\n        #print(mean,var)\n        #self.im[np.where(np.abs(self.im - mean) - 2.0 * var &gt; 0)] = 255\n        #self.im[np.where(self.im != 255)] = 0\n\n        #背景迭代更新储存背景数据\n        #im[np.where(self.im==255)] = 0\n        self.bg = self.bg + im                    #背景叠加\n        #print(self.bg[0][0])\n        #print(im.dtype)\n\n\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))      #膨胀或腐蚀大小\n        #self.im = cv2.erode(self.im,kernel)        #膨胀\n        #kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(10,10))\n        #self.im = cv2.dilate(self.im,kernel)       #腐蚀\n        #self.im = cv2.morphologyEx(self.im, cv2.MORPH_OPEN, kernel)    #开运算\n        #这里没返回，直接到展示show()\n\n    def show(self,i):\n        res=cv2.resize(self.im,(192*5,108*5),interpolation = cv2.INTER_CUBIC)\n        cv2.imshow('image', res)\n        cv2.waitKey(20)\n        #print(i)\n        #cv2.imwrite(\"tmp/\"+str(i)+\".jpg\",self.im)\n\n\ndef readYuvFile1(fp,width,height):\n    uv_width=width//2\n    uv_height=height//2\n\n    Y=np.zeros((height,width),np.uint8,'C')\n\n    for m in range(height):\n        for n in range(width):\n            Y[m,n]=ord(fp.read(1))\n\n    fp.read(uv_height*uv_width*2)\n\n    return Y\n\n\nif __name__ == \"__main__\": \n    #fgbg = cv2.bgsegm.createBackgroundSubtractorMOG()       #opencv 封装的一些背景减除方法MOG，MOG2等\n    #下载图\n    '''\n    width = 1920\n    height = 1080\n    fp = open(\"雨+夜+马路1_1920x1080.yuv\",'rb+')\n\n    for i in range(100):\n        print(i)\n        data = readYuvFile(fp,width,height)\n        Y=data[0]\n        cv2.imwrite(\"image/\"+str(i)+\".jpg\",Y)\n    '''\n\n    #初始化\n    t = AnimTest()\n    width = 1920\n    height = 1080\n    t.resolution(width,height)\n    t.cell_split(108,192)\n    t.dir_region(0,0,108,192)\n    t.set_threshold(10,50)\n\n    #处理展示，这里直接用的下载好的图\n    for i in range(100):\n        #im = readYuvFile1(fp,width,height)\n        im = cv2.imread(\"image/\"+str(i)+\".jpg\",0)\n        t.yuv_process(im)\n        t.show(i)</pre>\n<p>效果如下：</p>\n<img class=\"alignnone size-medium wp-image-671\" src=\"/img/uploads/2018/06/微信图片_20180606185250-300x169.png\" alt=\"\" width=\"300\" height=\"169\" />\n<p>对于室内人物移动效果还是可以的，但对于不位移或有遮挡干扰等效果还是不行。</p>"},{"title":"用virsh进行虚拟机管理","catalog":true,"date":"2018-08-21T11:49:16.000Z","_content":"\n最近做运维，觉得学得比较实用点的技能就是管理虚拟机了。<!--more-->\n\n这里使用的环境是已经装了centos的物理机上。\n\n首先配置所需库，用yum下载就可以\n<pre>yum -y install qemu-kvm qemu-key-tools virt-manager libvirt virt-install python-virtinst bridge-utils\nyum -y install kvm qemu libvirt virt-viewer qemu-system\nyum -y install libguestfs-tools</pre>\n在/home下mkdir创建一个vm文件夹用于存放img镜像\n<pre>qemu-img create -f qcow2 /home/vm/名称.img 容量(例：100G)</pre>\n当然还得有需要准备要装的系统的iso镜像\n\n下面命令为安装虚拟机，参数分别为：虚拟机名称，cpu，内存，iso镜像路径，img镜像路径，vnc端口\n<pre>virt-install \\\n--name name \\\n--vcpus=2 \\\n--ram 2048 \\\n--cdrom=/home/CentOS-7-x86_64-DVD-1511.iso –disk \\\npath=/home/gjc/CentOS7_DVD1511.img \\\n--graphics vnc,listen=0.0.0.0,port=5910</pre>\n安装完的虚拟机配置文件在/etc/libvirt/qemu/xxx.xml，可以修改配置文件在virsh define xxx一下就可以更新配置。\n\n下载打开软件tightVNC，输入对应的ip和port，连接进行对应系统的图形化安装。\n\n这里以linux centos7.2图形安装为例：\n\n选择Install Centos Linux7 进入下一步\n\n配置时间为北京时间，看左下角时间可能有偏差，调整一下\n\n进入Software Selection，左边选择Virtualization Host，右边选择virtualization Platform和Development Tools。\n\n下面一个是磁盘分区，在物理机装的话分一下\n<pre>/boot 分 2g，/swap 分 16g，/ 分 100g，其他给/home</pre>\n虚拟机的话自动分配就行。\n\n然后是配置网络，IPv4 Setting中add一个写ip（写和主机ip最后一个端不同就行），子网掩码（255.255.255.0），网关(和主机网关一样)。写一个常用的dns服务器。\n\nIPV6设置ignore\n\n点击install就开始安装\n\n然后设置root用户的密码，就可以等待安装完成。\n\n虚拟机和主机通过桥连。\n\n主机网络配置：在/etc/sysconfig/network-scripts/下加一个ifcfg-br0网卡，配置连接方式为桥连，其他与之前配置的网卡一样。\n\n改之前的网卡的BRIDGE为br0，其他ipv4设置的一些都可以去掉。\n\n虚拟机的话就之前安装时写的网络配置就行。\n\n以下是virsh日常管理操作\n<pre>列出running的虚拟机 (--all)为所有虚拟机\nvirsh list\n开关虚拟机\nvirsh start name\nvirsh shutdown name/num\nvirsh destroy name/num\n删除虚拟机，删除前需关闭\nvirsh undefine name\n虚拟机快照(很有用)\nvirsh snapshot-list name/num\n虚拟机快照回退，回退后要到具体的机器上校准时间\nvirsh snapshot-revert name/num snapid\n删除快照\nvirsh snapshot-delete name/num snapid\n克隆虚拟机\nvirt-clone -o 克隆虚拟机名称 -n 目标虚拟机名称 -f 路径/name.img</pre>\n下面是克隆虚拟机的全部过程脚本\n<pre>name=clone1 #虚拟机名称\nport=5901 # vnc端口\nip=192.168.199.63 #虚拟机网卡ip\ndir=/home/vm/ #img路径\nvirsh destroy base #基础虚拟机叫base\nrm -rf $dir$name.img\nvirt-clone -o base -n $name -f $dir$name.img #克隆\nvirt-copy-out -d $name /etc/sysconfig/network-scripts/ifcfg-eth0 ./\nsed -i \"s/IPADDR=.<em>/IPADDR=\\\"$ip\\\"/\" ifcfg-eth0 #改网卡\nvirt-copy-in -d $name ./ifcfg-eth0 /etc/sysconfig/network-scripts/\nrm -rf ./ifcfg-eht0\nsed -i \"s/&lt;graphics.</em>//\" /etc/libvirt/qemu/$name.xml #改配置\nvirsh define /etc/libvirt/qemu/$name.xml\nvirsh start $name #重启\nvirsh start base</pre>\n其中用的较多的就是克隆和快照，一个方便复制机器，一个方便回到过去。\n\n掌握这两个日常虚拟机管理就基本无压力咯。\n","source":"_posts/2018/article_26_用virsh进行虚拟机管理.md","raw":"\n---\ntitle: 用virsh进行虚拟机管理\ncatalog: true\ndate: 2018-8-21 19:49:16\n---\n\n最近做运维，觉得学得比较实用点的技能就是管理虚拟机了。<!--more-->\n\n这里使用的环境是已经装了centos的物理机上。\n\n首先配置所需库，用yum下载就可以\n<pre>yum -y install qemu-kvm qemu-key-tools virt-manager libvirt virt-install python-virtinst bridge-utils\nyum -y install kvm qemu libvirt virt-viewer qemu-system\nyum -y install libguestfs-tools</pre>\n在/home下mkdir创建一个vm文件夹用于存放img镜像\n<pre>qemu-img create -f qcow2 /home/vm/名称.img 容量(例：100G)</pre>\n当然还得有需要准备要装的系统的iso镜像\n\n下面命令为安装虚拟机，参数分别为：虚拟机名称，cpu，内存，iso镜像路径，img镜像路径，vnc端口\n<pre>virt-install \\\n--name name \\\n--vcpus=2 \\\n--ram 2048 \\\n--cdrom=/home/CentOS-7-x86_64-DVD-1511.iso –disk \\\npath=/home/gjc/CentOS7_DVD1511.img \\\n--graphics vnc,listen=0.0.0.0,port=5910</pre>\n安装完的虚拟机配置文件在/etc/libvirt/qemu/xxx.xml，可以修改配置文件在virsh define xxx一下就可以更新配置。\n\n下载打开软件tightVNC，输入对应的ip和port，连接进行对应系统的图形化安装。\n\n这里以linux centos7.2图形安装为例：\n\n选择Install Centos Linux7 进入下一步\n\n配置时间为北京时间，看左下角时间可能有偏差，调整一下\n\n进入Software Selection，左边选择Virtualization Host，右边选择virtualization Platform和Development Tools。\n\n下面一个是磁盘分区，在物理机装的话分一下\n<pre>/boot 分 2g，/swap 分 16g，/ 分 100g，其他给/home</pre>\n虚拟机的话自动分配就行。\n\n然后是配置网络，IPv4 Setting中add一个写ip（写和主机ip最后一个端不同就行），子网掩码（255.255.255.0），网关(和主机网关一样)。写一个常用的dns服务器。\n\nIPV6设置ignore\n\n点击install就开始安装\n\n然后设置root用户的密码，就可以等待安装完成。\n\n虚拟机和主机通过桥连。\n\n主机网络配置：在/etc/sysconfig/network-scripts/下加一个ifcfg-br0网卡，配置连接方式为桥连，其他与之前配置的网卡一样。\n\n改之前的网卡的BRIDGE为br0，其他ipv4设置的一些都可以去掉。\n\n虚拟机的话就之前安装时写的网络配置就行。\n\n以下是virsh日常管理操作\n<pre>列出running的虚拟机 (--all)为所有虚拟机\nvirsh list\n开关虚拟机\nvirsh start name\nvirsh shutdown name/num\nvirsh destroy name/num\n删除虚拟机，删除前需关闭\nvirsh undefine name\n虚拟机快照(很有用)\nvirsh snapshot-list name/num\n虚拟机快照回退，回退后要到具体的机器上校准时间\nvirsh snapshot-revert name/num snapid\n删除快照\nvirsh snapshot-delete name/num snapid\n克隆虚拟机\nvirt-clone -o 克隆虚拟机名称 -n 目标虚拟机名称 -f 路径/name.img</pre>\n下面是克隆虚拟机的全部过程脚本\n<pre>name=clone1 #虚拟机名称\nport=5901 # vnc端口\nip=192.168.199.63 #虚拟机网卡ip\ndir=/home/vm/ #img路径\nvirsh destroy base #基础虚拟机叫base\nrm -rf $dir$name.img\nvirt-clone -o base -n $name -f $dir$name.img #克隆\nvirt-copy-out -d $name /etc/sysconfig/network-scripts/ifcfg-eth0 ./\nsed -i \"s/IPADDR=.<em>/IPADDR=\\\"$ip\\\"/\" ifcfg-eth0 #改网卡\nvirt-copy-in -d $name ./ifcfg-eth0 /etc/sysconfig/network-scripts/\nrm -rf ./ifcfg-eht0\nsed -i \"s/&lt;graphics.</em>//\" /etc/libvirt/qemu/$name.xml #改配置\nvirsh define /etc/libvirt/qemu/$name.xml\nvirsh start $name #重启\nvirsh start base</pre>\n其中用的较多的就是克隆和快照，一个方便复制机器，一个方便回到过去。\n\n掌握这两个日常虚拟机管理就基本无压力咯。\n","slug":"2018/article_26_用virsh进行虚拟机管理","published":1,"updated":"2021-01-27T04:46:28.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74600270770hoyr0k2s","content":"<p>最近做运维，觉得学得比较实用点的技能就是管理虚拟机了。<a id=\"more\"></a></p>\n<p>这里使用的环境是已经装了centos的物理机上。</p>\n<p>首先配置所需库，用yum下载就可以</p>\n<pre>yum -y install qemu-kvm qemu-key-tools virt-manager libvirt virt-install python-virtinst bridge-utils\nyum -y install kvm qemu libvirt virt-viewer qemu-system\nyum -y install libguestfs-tools</pre>\n<p>在/home下mkdir创建一个vm文件夹用于存放img镜像</p>\n<pre>qemu-img create -f qcow2 /home/vm/名称.img 容量(例：100G)</pre>\n<p>当然还得有需要准备要装的系统的iso镜像</p>\n<p>下面命令为安装虚拟机，参数分别为：虚拟机名称，cpu，内存，iso镜像路径，img镜像路径，vnc端口</p>\n<pre>virt-install \\\n--name name \\\n--vcpus=2 \\\n--ram 2048 \\\n--cdrom=/home/CentOS-7-x86_64-DVD-1511.iso –disk \\\npath=/home/gjc/CentOS7_DVD1511.img \\\n--graphics vnc,listen=0.0.0.0,port=5910</pre>\n<p>安装完的虚拟机配置文件在/etc/libvirt/qemu/xxx.xml，可以修改配置文件在virsh define xxx一下就可以更新配置。</p>\n<p>下载打开软件tightVNC，输入对应的ip和port，连接进行对应系统的图形化安装。</p>\n<p>这里以linux centos7.2图形安装为例：</p>\n<p>选择Install Centos Linux7 进入下一步</p>\n<p>配置时间为北京时间，看左下角时间可能有偏差，调整一下</p>\n<p>进入Software Selection，左边选择Virtualization Host，右边选择virtualization Platform和Development Tools。</p>\n<p>下面一个是磁盘分区，在物理机装的话分一下</p>\n<pre>/boot 分 2g，/swap 分 16g，/ 分 100g，其他给/home</pre>\n<p>虚拟机的话自动分配就行。</p>\n<p>然后是配置网络，IPv4 Setting中add一个写ip（写和主机ip最后一个端不同就行），子网掩码（255.255.255.0），网关(和主机网关一样)。写一个常用的dns服务器。</p>\n<p>IPV6设置ignore</p>\n<p>点击install就开始安装</p>\n<p>然后设置root用户的密码，就可以等待安装完成。</p>\n<p>虚拟机和主机通过桥连。</p>\n<p>主机网络配置：在/etc/sysconfig/network-scripts/下加一个ifcfg-br0网卡，配置连接方式为桥连，其他与之前配置的网卡一样。</p>\n<p>改之前的网卡的BRIDGE为br0，其他ipv4设置的一些都可以去掉。</p>\n<p>虚拟机的话就之前安装时写的网络配置就行。</p>\n<p>以下是virsh日常管理操作</p>\n<pre>列出running的虚拟机 (--all)为所有虚拟机\nvirsh list\n开关虚拟机\nvirsh start name\nvirsh shutdown name/num\nvirsh destroy name/num\n删除虚拟机，删除前需关闭\nvirsh undefine name\n虚拟机快照(很有用)\nvirsh snapshot-list name/num\n虚拟机快照回退，回退后要到具体的机器上校准时间\nvirsh snapshot-revert name/num snapid\n删除快照\nvirsh snapshot-delete name/num snapid\n克隆虚拟机\nvirt-clone -o 克隆虚拟机名称 -n 目标虚拟机名称 -f 路径/name.img</pre>\n<p>下面是克隆虚拟机的全部过程脚本</p>\n<pre>name=clone1 #虚拟机名称\nport=5901 # vnc端口\nip=192.168.199.63 #虚拟机网卡ip\ndir=/home/vm/ #img路径\nvirsh destroy base #基础虚拟机叫base\nrm -rf $dir$name.img\nvirt-clone -o base -n $name -f $dir$name.img #克隆\nvirt-copy-out -d $name /etc/sysconfig/network-scripts/ifcfg-eth0 ./\nsed -i \"s/IPADDR=.<em>/IPADDR=\\\"$ip\\\"/\" ifcfg-eth0 #改网卡\nvirt-copy-in -d $name ./ifcfg-eth0 /etc/sysconfig/network-scripts/\nrm -rf ./ifcfg-eht0\nsed -i \"s/&lt;graphics.</em>//\" /etc/libvirt/qemu/$name.xml #改配置\nvirsh define /etc/libvirt/qemu/$name.xml\nvirsh start $name #重启\nvirsh start base</pre>\n<p>其中用的较多的就是克隆和快照，一个方便复制机器，一个方便回到过去。</p>\n<p>掌握这两个日常虚拟机管理就基本无压力咯。</p>\n","excerpt":"<p>最近做运维，觉得学得比较实用点的技能就是管理虚拟机了。","more":"</p>\n<p>这里使用的环境是已经装了centos的物理机上。</p>\n<p>首先配置所需库，用yum下载就可以</p>\n<pre>yum -y install qemu-kvm qemu-key-tools virt-manager libvirt virt-install python-virtinst bridge-utils\nyum -y install kvm qemu libvirt virt-viewer qemu-system\nyum -y install libguestfs-tools</pre>\n<p>在/home下mkdir创建一个vm文件夹用于存放img镜像</p>\n<pre>qemu-img create -f qcow2 /home/vm/名称.img 容量(例：100G)</pre>\n<p>当然还得有需要准备要装的系统的iso镜像</p>\n<p>下面命令为安装虚拟机，参数分别为：虚拟机名称，cpu，内存，iso镜像路径，img镜像路径，vnc端口</p>\n<pre>virt-install \\\n--name name \\\n--vcpus=2 \\\n--ram 2048 \\\n--cdrom=/home/CentOS-7-x86_64-DVD-1511.iso –disk \\\npath=/home/gjc/CentOS7_DVD1511.img \\\n--graphics vnc,listen=0.0.0.0,port=5910</pre>\n<p>安装完的虚拟机配置文件在/etc/libvirt/qemu/xxx.xml，可以修改配置文件在virsh define xxx一下就可以更新配置。</p>\n<p>下载打开软件tightVNC，输入对应的ip和port，连接进行对应系统的图形化安装。</p>\n<p>这里以linux centos7.2图形安装为例：</p>\n<p>选择Install Centos Linux7 进入下一步</p>\n<p>配置时间为北京时间，看左下角时间可能有偏差，调整一下</p>\n<p>进入Software Selection，左边选择Virtualization Host，右边选择virtualization Platform和Development Tools。</p>\n<p>下面一个是磁盘分区，在物理机装的话分一下</p>\n<pre>/boot 分 2g，/swap 分 16g，/ 分 100g，其他给/home</pre>\n<p>虚拟机的话自动分配就行。</p>\n<p>然后是配置网络，IPv4 Setting中add一个写ip（写和主机ip最后一个端不同就行），子网掩码（255.255.255.0），网关(和主机网关一样)。写一个常用的dns服务器。</p>\n<p>IPV6设置ignore</p>\n<p>点击install就开始安装</p>\n<p>然后设置root用户的密码，就可以等待安装完成。</p>\n<p>虚拟机和主机通过桥连。</p>\n<p>主机网络配置：在/etc/sysconfig/network-scripts/下加一个ifcfg-br0网卡，配置连接方式为桥连，其他与之前配置的网卡一样。</p>\n<p>改之前的网卡的BRIDGE为br0，其他ipv4设置的一些都可以去掉。</p>\n<p>虚拟机的话就之前安装时写的网络配置就行。</p>\n<p>以下是virsh日常管理操作</p>\n<pre>列出running的虚拟机 (--all)为所有虚拟机\nvirsh list\n开关虚拟机\nvirsh start name\nvirsh shutdown name/num\nvirsh destroy name/num\n删除虚拟机，删除前需关闭\nvirsh undefine name\n虚拟机快照(很有用)\nvirsh snapshot-list name/num\n虚拟机快照回退，回退后要到具体的机器上校准时间\nvirsh snapshot-revert name/num snapid\n删除快照\nvirsh snapshot-delete name/num snapid\n克隆虚拟机\nvirt-clone -o 克隆虚拟机名称 -n 目标虚拟机名称 -f 路径/name.img</pre>\n<p>下面是克隆虚拟机的全部过程脚本</p>\n<pre>name=clone1 #虚拟机名称\nport=5901 # vnc端口\nip=192.168.199.63 #虚拟机网卡ip\ndir=/home/vm/ #img路径\nvirsh destroy base #基础虚拟机叫base\nrm -rf $dir$name.img\nvirt-clone -o base -n $name -f $dir$name.img #克隆\nvirt-copy-out -d $name /etc/sysconfig/network-scripts/ifcfg-eth0 ./\nsed -i \"s/IPADDR=.<em>/IPADDR=\\\"$ip\\\"/\" ifcfg-eth0 #改网卡\nvirt-copy-in -d $name ./ifcfg-eth0 /etc/sysconfig/network-scripts/\nrm -rf ./ifcfg-eht0\nsed -i \"s/&lt;graphics.</em>//\" /etc/libvirt/qemu/$name.xml #改配置\nvirsh define /etc/libvirt/qemu/$name.xml\nvirsh start $name #重启\nvirsh start base</pre>\n<p>其中用的较多的就是克隆和快照，一个方便复制机器，一个方便回到过去。</p>\n<p>掌握这两个日常虚拟机管理就基本无压力咯。</p>"},{"title":"写个基于screen和expect的服务器管理小工具","catalog":true,"date":"2018-08-29T12:14:06.000Z","_content":"\n日常管理的服务器如果很多，总会感觉连完这个连那个，要么要重复输入用户密码，要么在如xshell中的一个长列表中找寻所需的服务器。比较难受就自己写个工具来连接多台服务器，并用screen保持会话。<!--more-->\n\n先配环境，此处默认centos咯。\n<pre>yum install -y screen\nyum install -y expect</pre>\n由于ssh连接要输入用户密码，因此得写expect脚本。\n\n先创建一个ssh.conf用来放需要连接的服务器,格式为\n<pre>name1 root@192.168.1.1 password1\nname2 root@192.168.1.2 password2</pre>\n同目录下写个expect脚本screen.sh，修改其权限为755.\n<pre>chmod 755 screen.sh</pre>\n主要功能为创建screen，登录用户名密码。\n<div class=\"highlight\">\n<pre> 1 #!/bin/expect -f \n 2 \n 3 set timeout 30\n 4 \n 5 set fid [open screen.conf r]\n 6 while {[gets $fid line] &gt;= 0} {\n 7     set name [lindex $line 0]\n 8     set port [lindex $line 1]\n 9     set pwd [lindex $line 2]\n10     spawn screen -S $name ssh $port\n11     expect {\n12         \"*yes/no\" { send \"yes\\r\"; exp_continue }\n13         \"*password:\" { send \"$pwd\\r\" } \n14     }\n15     expect { \n16         \"Last login*\" {\n17             send \"\\01d\"\n18         }\n19     }\n20     puts \"$name | $port added\"\n21 }</pre>\n再在同目录下创建个start.sh\n\n用于检测有哪些会话没起来写入screen.conf,再调用screen.sh重启一遍。\n<div class=\"highlight\">\n<pre> 1 #!/bin/bash\n 2 \n 3 while true\n 4 do\n 5 \n 6     rm -rf screen.conf\n 7 \n 8     n=0\n 9 \n10     while read ll\n11     do\n12         name=`echo $ll |awk '{print $1}'`\n13         ss=`screen -ls |grep \"\\.$name\"`\n14         if [ ${ #ss} -lt 5 ];then\n15             echo $ll &gt;&gt; screen.conf\n16             n=`expr $n + 1`\n17         fi\n18     done &lt; ssh.conf\n19 \n20     if [ $n -gt 0 ];then\n21        ./screen.sh\n22     fi\n23 \n24     rm -rf screen.conf\n25     sleep 10\n26 done</pre>\n运行：\n<pre>nohup start.sh &gt;&gt; screen.log 2&gt;&amp;1 &amp;</pre>\n</div>\n<div class=\"highlight\">\n\n以前嫌弃没机器，性能不行，现在手头机器太多也都是烦恼呢。\n\n</div>\n</div>\n","source":"_posts/2018/article_27_写个基于screen和expect的服务器管理小工具.md","raw":"\n---\ntitle: 写个基于screen和expect的服务器管理小工具\ncatalog: true\ndate: 2018-8-29 20:14:06\n---\n\n日常管理的服务器如果很多，总会感觉连完这个连那个，要么要重复输入用户密码，要么在如xshell中的一个长列表中找寻所需的服务器。比较难受就自己写个工具来连接多台服务器，并用screen保持会话。<!--more-->\n\n先配环境，此处默认centos咯。\n<pre>yum install -y screen\nyum install -y expect</pre>\n由于ssh连接要输入用户密码，因此得写expect脚本。\n\n先创建一个ssh.conf用来放需要连接的服务器,格式为\n<pre>name1 root@192.168.1.1 password1\nname2 root@192.168.1.2 password2</pre>\n同目录下写个expect脚本screen.sh，修改其权限为755.\n<pre>chmod 755 screen.sh</pre>\n主要功能为创建screen，登录用户名密码。\n<div class=\"highlight\">\n<pre> 1 #!/bin/expect -f \n 2 \n 3 set timeout 30\n 4 \n 5 set fid [open screen.conf r]\n 6 while {[gets $fid line] &gt;= 0} {\n 7     set name [lindex $line 0]\n 8     set port [lindex $line 1]\n 9     set pwd [lindex $line 2]\n10     spawn screen -S $name ssh $port\n11     expect {\n12         \"*yes/no\" { send \"yes\\r\"; exp_continue }\n13         \"*password:\" { send \"$pwd\\r\" } \n14     }\n15     expect { \n16         \"Last login*\" {\n17             send \"\\01d\"\n18         }\n19     }\n20     puts \"$name | $port added\"\n21 }</pre>\n再在同目录下创建个start.sh\n\n用于检测有哪些会话没起来写入screen.conf,再调用screen.sh重启一遍。\n<div class=\"highlight\">\n<pre> 1 #!/bin/bash\n 2 \n 3 while true\n 4 do\n 5 \n 6     rm -rf screen.conf\n 7 \n 8     n=0\n 9 \n10     while read ll\n11     do\n12         name=`echo $ll |awk '{print $1}'`\n13         ss=`screen -ls |grep \"\\.$name\"`\n14         if [ ${ #ss} -lt 5 ];then\n15             echo $ll &gt;&gt; screen.conf\n16             n=`expr $n + 1`\n17         fi\n18     done &lt; ssh.conf\n19 \n20     if [ $n -gt 0 ];then\n21        ./screen.sh\n22     fi\n23 \n24     rm -rf screen.conf\n25     sleep 10\n26 done</pre>\n运行：\n<pre>nohup start.sh &gt;&gt; screen.log 2&gt;&amp;1 &amp;</pre>\n</div>\n<div class=\"highlight\">\n\n以前嫌弃没机器，性能不行，现在手头机器太多也都是烦恼呢。\n\n</div>\n</div>\n","slug":"2018/article_27_写个基于screen和expect的服务器管理小工具","published":1,"updated":"2021-01-27T04:46:28.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74800280770s63dbnby","content":"<p>日常管理的服务器如果很多，总会感觉连完这个连那个，要么要重复输入用户密码，要么在如xshell中的一个长列表中找寻所需的服务器。比较难受就自己写个工具来连接多台服务器，并用screen保持会话。<a id=\"more\"></a></p>\n<p>先配环境，此处默认centos咯。</p>\n<pre>yum install -y screen\nyum install -y expect</pre>\n<p>由于ssh连接要输入用户密码，因此得写expect脚本。</p>\n<p>先创建一个ssh.conf用来放需要连接的服务器,格式为</p>\n<pre>name1 root@192.168.1.1 password1\nname2 root@192.168.1.2 password2</pre>\n<p><a href=\"http://xn--expectscreen-ix4ssno35buqji53cpr3aut6dks0b.sh\" target=\"_blank\" rel=\"external\">同目录下写个expect脚本screen.sh</a>，修改其权限为755.</p>\n<pre>chmod 755 screen.sh</pre>\n<p>主要功能为创建screen，登录用户名密码。</p>\n<div class=\"highlight\">\n<pre> 1 #!/bin/expect -f \n 2 \n 3 set timeout 30\n 4 \n 5 set fid [open screen.conf r]\n 6 while {[gets $fid line] &gt;= 0} {\n 7     set name [lindex $line 0]\n 8     set port [lindex $line 1]\n 9     set pwd [lindex $line 2]\n10     spawn screen -S $name ssh $port\n11     expect {\n12         \"*yes/no\" { send \"yes\\r\"; exp_continue }\n13         \"*password:\" { send \"$pwd\\r\" } \n14     }\n15     expect { \n16         \"Last login*\" {\n17             send \"\\01d\"\n18         }\n19     }\n20     puts \"$name | $port added\"\n21 }</pre>\n再在同目录下创建个start.sh\n<p>用于检测有哪些会话没起来写入screen.conf,再调用screen.sh重启一遍。</p>\n<div class=\"highlight\">\n<pre> 1 #!/bin/bash\n 2 \n 3 while true\n 4 do\n 5 \n 6     rm -rf screen.conf\n 7 \n 8     n=0\n 9 \n10     while read ll\n11     do\n12         name=`echo $ll |awk '{print $1}'`\n13         ss=`screen -ls |grep \"\\.$name\"`\n14         if [ ${ #ss} -lt 5 ];then\n15             echo $ll &gt;&gt; screen.conf\n16             n=`expr $n + 1`\n17         fi\n18     done &lt; ssh.conf\n19 \n20     if [ $n -gt 0 ];then\n21        ./screen.sh\n22     fi\n23 \n24     rm -rf screen.conf\n25     sleep 10\n26 done</pre>\n运行：\n<pre>nohup start.sh &gt;&gt; screen.log 2&gt;&amp;1 &amp;</pre>\n</div>\n<div class=\"highlight\">\n<p>以前嫌弃没机器，性能不行，现在手头机器太多也都是烦恼呢。</p>\n</div>\n</div>\n","excerpt":"<p>日常管理的服务器如果很多，总会感觉连完这个连那个，要么要重复输入用户密码，要么在如xshell中的一个长列表中找寻所需的服务器。比较难受就自己写个工具来连接多台服务器，并用screen保持会话。","more":"</p>\n<p>先配环境，此处默认centos咯。</p>\n<pre>yum install -y screen\nyum install -y expect</pre>\n<p>由于ssh连接要输入用户密码，因此得写expect脚本。</p>\n<p>先创建一个ssh.conf用来放需要连接的服务器,格式为</p>\n<pre>name1 root@192.168.1.1 password1\nname2 root@192.168.1.2 password2</pre>\n<p><a href=\"http://xn--expectscreen-ix4ssno35buqji53cpr3aut6dks0b.sh\">同目录下写个expect脚本screen.sh</a>，修改其权限为755.</p>\n<pre>chmod 755 screen.sh</pre>\n<p>主要功能为创建screen，登录用户名密码。</p>\n<div class=\"highlight\">\n<pre> 1 #!/bin/expect -f \n 2 \n 3 set timeout 30\n 4 \n 5 set fid [open screen.conf r]\n 6 while {[gets $fid line] &gt;= 0} {\n 7     set name [lindex $line 0]\n 8     set port [lindex $line 1]\n 9     set pwd [lindex $line 2]\n10     spawn screen -S $name ssh $port\n11     expect {\n12         \"*yes/no\" { send \"yes\\r\"; exp_continue }\n13         \"*password:\" { send \"$pwd\\r\" } \n14     }\n15     expect { \n16         \"Last login*\" {\n17             send \"\\01d\"\n18         }\n19     }\n20     puts \"$name | $port added\"\n21 }</pre>\n再在同目录下创建个start.sh\n<p>用于检测有哪些会话没起来写入screen.conf,再调用screen.sh重启一遍。</p>\n<div class=\"highlight\">\n<pre> 1 #!/bin/bash\n 2 \n 3 while true\n 4 do\n 5 \n 6     rm -rf screen.conf\n 7 \n 8     n=0\n 9 \n10     while read ll\n11     do\n12         name=`echo $ll |awk '{print $1}'`\n13         ss=`screen -ls |grep \"\\.$name\"`\n14         if [ ${ #ss} -lt 5 ];then\n15             echo $ll &gt;&gt; screen.conf\n16             n=`expr $n + 1`\n17         fi\n18     done &lt; ssh.conf\n19 \n20     if [ $n -gt 0 ];then\n21        ./screen.sh\n22     fi\n23 \n24     rm -rf screen.conf\n25     sleep 10\n26 done</pre>\n运行：\n<pre>nohup start.sh &gt;&gt; screen.log 2&gt;&amp;1 &amp;</pre>\n</div>\n<div class=\"highlight\">\n<p>以前嫌弃没机器，性能不行，现在手头机器太多也都是烦恼呢。</p>\n</div>\n</div>"},{"title":"试试树莓派，反正也是python","catalog":true,"date":"2018-07-15T06:55:54.000Z","_content":"\n学校一个课程用到，在linux实现一个qt界面来控制几个硬件功能：摄像头，温湿度，超声波测距，红绿灯。<!--more-->\n\n安装对应库，运行代码前就是要把器件连到对应的引脚上。\n<pre>#coding:utf-8\n#author:!@#$%^&amp;*()_+ganster\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication,QLCDNumber,QVBoxLayout,QGridLayout,QCheckBox,QPushButton\nfrom PyQt5.QtGui import QPixmap,QImage\nfrom PyQt5.QtCore import QThread,Qt,pyqtSignal\nfrom picamera.array import PiRGBArray\nfrom picamera import PiCamera\nimport RPi.GPIO as GPIO\nimport numpy as np\nimport sys\nimport time\nimport cv2\nimport os\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(16, GPIO.OUT)  #红\nGPIO.setup(20,GPIO.OUT)  #黄\nGPIO.setup(21,GPIO.OUT) #绿\n\n#超声波测距端口\nTrig_Pin = 5\nEcho_Pin = 6\nGPIO.setup(Trig_Pin, GPIO.OUT, initial = GPIO.LOW)\nGPIO.setup(Echo_Pin, GPIO.IN)\n\n#温湿度端口\nchannel = 4\n\n#温湿度\ndef get_temp():\n    data = []\n    j = 0\n    GPIO.setup(channel, GPIO.OUT)\n    GPIO.output(channel, GPIO.LOW)\n    time.sleep(0.02)\n    GPIO.output(channel, GPIO.HIGH)\n    GPIO.setup(channel, GPIO.IN)\n    while GPIO.input(channel) == GPIO.LOW:\n        continue\n    while GPIO.input(channel) == GPIO.HIGH:\n        continue\n    while j &lt; 40:\n        k = 0\n        while GPIO.input(channel) == GPIO.LOW:\n            continue\n        while GPIO.input(channel) == GPIO.HIGH:\n            k += 1\n            if k &gt; 100:\n                break\n        if k &lt; 8:\n            data.append(0)\n        else:\n            data.append(1)\n        j += 1\n    humidity_bit = data[0:8]\n    humidity_point_bit = data[8:16]\n    temperature_bit = data[16:24]\n    temperature_point_bit = data[24:32]\n    check_bit = data[32:40]\n    humidity = 0\n    humidity_point = 0\n    temperature = 0\n    temperature_point = 0\n    check = 0\n   \n    for i in range(8):\n        humidity += humidity_bit[i] * 2 ** (7-i)\n        humidity_point += humidity_point_bit[i] * 2 ** (7-i)\n        temperature += temperature_bit[i] * 2 ** (7-i)\n        temperature_point += temperature_point_bit[i] * 2 ** (7-i)\n        check += check_bit[i] * 2 ** (7-i)\n   \n    tmp = humidity + humidity_point + temperature + temperature_point\n   \n    if check == tmp:\n        return [temperature,humidity]\n    else:\n        return [0,0]\n    GPIO.cleanup()\n\n#超声波测距\ndef get_dis():\n    GPIO.output(Trig_Pin, GPIO.HIGH)\n    time.sleep(0.00015)\n    GPIO.output(Trig_Pin, GPIO.LOW)\n    while not GPIO.input(Echo_Pin):\n        pass\n    t1 = time.time()\n    while GPIO.input(Echo_Pin):\n        pass\n    t2 = time.time()\n    return round((t2-t1)*340*100/2,2)\n\n#qt视图模块\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        #初始化视图\n        self.initUI()\n        #线程，用于更新摄像头图像\n        self.sum = Sum()\n        self.sum.sinOut.connect(self.update_img)\n        self.sum.start()  \n\n        self.r = 0\n        self.g = 0\n        self.y = 0\n        self.show()      \n\n\n    def initUI(self):      \n        #加入按钮，复选框，lcd，并绑定事件\n        hbox = QGridLayout(self)\n        self.lbl = QLabel(self)\n\n        self.lcd1 = QLCDNumber(self)\n        self.lcd2 = QLCDNumber(self)\n\n        self.cb1 = QCheckBox('red',self)\n        self.cb2 = QCheckBox('yellow',self)\n        self.cb3 = QCheckBox('green',self)\n        self.cb1.stateChanged.connect(self.changecb1)\n        self.cb2.stateChanged.connect(self.changecb2)\n        self.cb3.stateChanged.connect(self.changecb3)\n\n        self.btn = QPushButton(self)\n        self.btn.setText(\"start\")\n        self.btn.clicked.connect(self.update_num)\n\n\n        self.lcd3 = QLCDNumber(self)\n        self.btn1 = QPushButton(self)\n        self.btn1.setText(\"dis start\")\n        self.btn1.clicked.connect(self.update_dis)\n\n        hbox.addWidget(self.lbl,0,0,1,3)\n        hbox.addWidget(self.lcd1,1,0,1,1)\n        hbox.addWidget(self.lcd2,1,1,1,1)\n        hbox.addWidget(self.cb1,3,0,1,1)\n        hbox.addWidget(self.cb2,3,1,1,1)\n        hbox.addWidget(self.cb3,3,2,1,1)\n        hbox.addWidget(self.btn,1,2,1,1)\n        hbox.addWidget(self.lcd3,2,0,1,2)\n        hbox.addWidget(self.btn1,2,2,1,1)\n\n        self.setLayout(hbox)\n\n    #更新图像\n    def update_img(self,im):\n        height, width, bytesPerComponent= im.shape\n        bytesPerLine = bytesPerComponent* width\n        cv2.cvtColor(im, cv2.COLOR_BGR2RGB,im)\n        self.image= QImage(im.data, width, height, bytesPerLine, QImage.Format_RGB888)\n        self.lbl.setPixmap(QPixmap.fromImage(self.image))\n    #更新温湿度\n    def update_num(self):\n        #res = os.popen(\"python temp.py\")\n        #li = list(map(int,res.read().strip().split(\",\")))\n        li = get_temp()\n        print(li)\n        self.lcd1.display(li[0])\n        self.lcd2.display(li[1])\n    #更新距离\n    def update_dis(self):\n        self.lcd3.display(get_dis())\n    #更新复选框\n    def changecb1(self):\n        if self.r == 0:\n            GPIO.output(16,GPIO.HIGH)\n            self.r = 1\n        else:\n            GPIO.output(16,GPIO.LOW)\n            self.r = 0\n    def changecb2(self):\n        if self.y == 0:\n            GPIO.output(20,GPIO.HIGH)\n            self.y = 1\n        else:\n            GPIO.output(20,GPIO.LOW)\n            self.y = 0\n    def changecb3(self):\n        if self.g == 0:\n            GPIO.output(21,GPIO.HIGH)\n            self.g = 1\n        else:\n            GPIO.output(21,GPIO.LOW)\n            self.g = 0\n\n#线程，用于更新图像\nclass Sum(QThread):\n    sinOut = pyqtSignal(np.ndarray)\n    def __init__(self):\n        super().__init__()\n        self.camera = PiCamera()\n        self.camera.resolution = (640, 480)\n        self.camera.framerate = 32\n        self.rawCapture = PiRGBArray(self.camera, size=(640, 480))\n\n    def run(self):   \n        for frame in self.camera.capture_continuous(self.rawCapture, format=\"bgr\", use_video_port=True):\n            image = frame.array\n            self.sinOut.emit(image)\n            self.rawCapture.truncate()\n            self.rawCapture.seek(0)\n            time.sleep(0.2)\n#主函数\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())</pre>\n作为电子专业，单片机，FPGA，树莓派都玩了，也差不多无憾了。\n\n但也说不定是最后一次接触硬件方面的东西了呢。\n","source":"_posts/2018/article_25_试试树莓派，反正也是python.md","raw":"\n---\ntitle: 试试树莓派，反正也是python\ncatalog: true\ndate: 2018-7-15 14:55:54\n---\n\n学校一个课程用到，在linux实现一个qt界面来控制几个硬件功能：摄像头，温湿度，超声波测距，红绿灯。<!--more-->\n\n安装对应库，运行代码前就是要把器件连到对应的引脚上。\n<pre>#coding:utf-8\n#author:!@#$%^&amp;*()_+ganster\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication,QLCDNumber,QVBoxLayout,QGridLayout,QCheckBox,QPushButton\nfrom PyQt5.QtGui import QPixmap,QImage\nfrom PyQt5.QtCore import QThread,Qt,pyqtSignal\nfrom picamera.array import PiRGBArray\nfrom picamera import PiCamera\nimport RPi.GPIO as GPIO\nimport numpy as np\nimport sys\nimport time\nimport cv2\nimport os\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(16, GPIO.OUT)  #红\nGPIO.setup(20,GPIO.OUT)  #黄\nGPIO.setup(21,GPIO.OUT) #绿\n\n#超声波测距端口\nTrig_Pin = 5\nEcho_Pin = 6\nGPIO.setup(Trig_Pin, GPIO.OUT, initial = GPIO.LOW)\nGPIO.setup(Echo_Pin, GPIO.IN)\n\n#温湿度端口\nchannel = 4\n\n#温湿度\ndef get_temp():\n    data = []\n    j = 0\n    GPIO.setup(channel, GPIO.OUT)\n    GPIO.output(channel, GPIO.LOW)\n    time.sleep(0.02)\n    GPIO.output(channel, GPIO.HIGH)\n    GPIO.setup(channel, GPIO.IN)\n    while GPIO.input(channel) == GPIO.LOW:\n        continue\n    while GPIO.input(channel) == GPIO.HIGH:\n        continue\n    while j &lt; 40:\n        k = 0\n        while GPIO.input(channel) == GPIO.LOW:\n            continue\n        while GPIO.input(channel) == GPIO.HIGH:\n            k += 1\n            if k &gt; 100:\n                break\n        if k &lt; 8:\n            data.append(0)\n        else:\n            data.append(1)\n        j += 1\n    humidity_bit = data[0:8]\n    humidity_point_bit = data[8:16]\n    temperature_bit = data[16:24]\n    temperature_point_bit = data[24:32]\n    check_bit = data[32:40]\n    humidity = 0\n    humidity_point = 0\n    temperature = 0\n    temperature_point = 0\n    check = 0\n   \n    for i in range(8):\n        humidity += humidity_bit[i] * 2 ** (7-i)\n        humidity_point += humidity_point_bit[i] * 2 ** (7-i)\n        temperature += temperature_bit[i] * 2 ** (7-i)\n        temperature_point += temperature_point_bit[i] * 2 ** (7-i)\n        check += check_bit[i] * 2 ** (7-i)\n   \n    tmp = humidity + humidity_point + temperature + temperature_point\n   \n    if check == tmp:\n        return [temperature,humidity]\n    else:\n        return [0,0]\n    GPIO.cleanup()\n\n#超声波测距\ndef get_dis():\n    GPIO.output(Trig_Pin, GPIO.HIGH)\n    time.sleep(0.00015)\n    GPIO.output(Trig_Pin, GPIO.LOW)\n    while not GPIO.input(Echo_Pin):\n        pass\n    t1 = time.time()\n    while GPIO.input(Echo_Pin):\n        pass\n    t2 = time.time()\n    return round((t2-t1)*340*100/2,2)\n\n#qt视图模块\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        #初始化视图\n        self.initUI()\n        #线程，用于更新摄像头图像\n        self.sum = Sum()\n        self.sum.sinOut.connect(self.update_img)\n        self.sum.start()  \n\n        self.r = 0\n        self.g = 0\n        self.y = 0\n        self.show()      \n\n\n    def initUI(self):      \n        #加入按钮，复选框，lcd，并绑定事件\n        hbox = QGridLayout(self)\n        self.lbl = QLabel(self)\n\n        self.lcd1 = QLCDNumber(self)\n        self.lcd2 = QLCDNumber(self)\n\n        self.cb1 = QCheckBox('red',self)\n        self.cb2 = QCheckBox('yellow',self)\n        self.cb3 = QCheckBox('green',self)\n        self.cb1.stateChanged.connect(self.changecb1)\n        self.cb2.stateChanged.connect(self.changecb2)\n        self.cb3.stateChanged.connect(self.changecb3)\n\n        self.btn = QPushButton(self)\n        self.btn.setText(\"start\")\n        self.btn.clicked.connect(self.update_num)\n\n\n        self.lcd3 = QLCDNumber(self)\n        self.btn1 = QPushButton(self)\n        self.btn1.setText(\"dis start\")\n        self.btn1.clicked.connect(self.update_dis)\n\n        hbox.addWidget(self.lbl,0,0,1,3)\n        hbox.addWidget(self.lcd1,1,0,1,1)\n        hbox.addWidget(self.lcd2,1,1,1,1)\n        hbox.addWidget(self.cb1,3,0,1,1)\n        hbox.addWidget(self.cb2,3,1,1,1)\n        hbox.addWidget(self.cb3,3,2,1,1)\n        hbox.addWidget(self.btn,1,2,1,1)\n        hbox.addWidget(self.lcd3,2,0,1,2)\n        hbox.addWidget(self.btn1,2,2,1,1)\n\n        self.setLayout(hbox)\n\n    #更新图像\n    def update_img(self,im):\n        height, width, bytesPerComponent= im.shape\n        bytesPerLine = bytesPerComponent* width\n        cv2.cvtColor(im, cv2.COLOR_BGR2RGB,im)\n        self.image= QImage(im.data, width, height, bytesPerLine, QImage.Format_RGB888)\n        self.lbl.setPixmap(QPixmap.fromImage(self.image))\n    #更新温湿度\n    def update_num(self):\n        #res = os.popen(\"python temp.py\")\n        #li = list(map(int,res.read().strip().split(\",\")))\n        li = get_temp()\n        print(li)\n        self.lcd1.display(li[0])\n        self.lcd2.display(li[1])\n    #更新距离\n    def update_dis(self):\n        self.lcd3.display(get_dis())\n    #更新复选框\n    def changecb1(self):\n        if self.r == 0:\n            GPIO.output(16,GPIO.HIGH)\n            self.r = 1\n        else:\n            GPIO.output(16,GPIO.LOW)\n            self.r = 0\n    def changecb2(self):\n        if self.y == 0:\n            GPIO.output(20,GPIO.HIGH)\n            self.y = 1\n        else:\n            GPIO.output(20,GPIO.LOW)\n            self.y = 0\n    def changecb3(self):\n        if self.g == 0:\n            GPIO.output(21,GPIO.HIGH)\n            self.g = 1\n        else:\n            GPIO.output(21,GPIO.LOW)\n            self.g = 0\n\n#线程，用于更新图像\nclass Sum(QThread):\n    sinOut = pyqtSignal(np.ndarray)\n    def __init__(self):\n        super().__init__()\n        self.camera = PiCamera()\n        self.camera.resolution = (640, 480)\n        self.camera.framerate = 32\n        self.rawCapture = PiRGBArray(self.camera, size=(640, 480))\n\n    def run(self):   \n        for frame in self.camera.capture_continuous(self.rawCapture, format=\"bgr\", use_video_port=True):\n            image = frame.array\n            self.sinOut.emit(image)\n            self.rawCapture.truncate()\n            self.rawCapture.seek(0)\n            time.sleep(0.2)\n#主函数\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())</pre>\n作为电子专业，单片机，FPGA，树莓派都玩了，也差不多无憾了。\n\n但也说不定是最后一次接触硬件方面的东西了呢。\n","slug":"2018/article_25_试试树莓派，反正也是python","published":1,"updated":"2021-01-27T04:46:28.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74900290770jpbitjsn","content":"<p>学校一个课程用到，在linux实现一个qt界面来控制几个硬件功能：摄像头，温湿度，超声波测距，红绿灯。<a id=\"more\"></a></p>\n<p>安装对应库，运行代码前就是要把器件连到对应的引脚上。</p>\n<pre>#coding:utf-8\n#author:!@#$%^&amp;*()_+ganster\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication,QLCDNumber,QVBoxLayout,QGridLayout,QCheckBox,QPushButton\nfrom PyQt5.QtGui import QPixmap,QImage\nfrom PyQt5.QtCore import QThread,Qt,pyqtSignal\nfrom picamera.array import PiRGBArray\nfrom picamera import PiCamera\nimport RPi.GPIO as GPIO\nimport numpy as np\nimport sys\nimport time\nimport cv2\nimport os\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(16, GPIO.OUT)  #红\nGPIO.setup(20,GPIO.OUT)  #黄\nGPIO.setup(21,GPIO.OUT) #绿\n\n#超声波测距端口\nTrig_Pin = 5\nEcho_Pin = 6\nGPIO.setup(Trig_Pin, GPIO.OUT, initial = GPIO.LOW)\nGPIO.setup(Echo_Pin, GPIO.IN)\n\n#温湿度端口\nchannel = 4\n\n#温湿度\ndef get_temp():\n    data = []\n    j = 0\n    GPIO.setup(channel, GPIO.OUT)\n    GPIO.output(channel, GPIO.LOW)\n    time.sleep(0.02)\n    GPIO.output(channel, GPIO.HIGH)\n    GPIO.setup(channel, GPIO.IN)\n    while GPIO.input(channel) == GPIO.LOW:\n        continue\n    while GPIO.input(channel) == GPIO.HIGH:\n        continue\n    while j &lt; 40:\n        k = 0\n        while GPIO.input(channel) == GPIO.LOW:\n            continue\n        while GPIO.input(channel) == GPIO.HIGH:\n            k += 1\n            if k &gt; 100:\n                break\n        if k &lt; 8:\n            data.append(0)\n        else:\n            data.append(1)\n        j += 1\n    humidity_bit = data[0:8]\n    humidity_point_bit = data[8:16]\n    temperature_bit = data[16:24]\n    temperature_point_bit = data[24:32]\n    check_bit = data[32:40]\n    humidity = 0\n    humidity_point = 0\n    temperature = 0\n    temperature_point = 0\n    check = 0\n   \n    for i in range(8):\n        humidity += humidity_bit[i] * 2 ** (7-i)\n        humidity_point += humidity_point_bit[i] * 2 ** (7-i)\n        temperature += temperature_bit[i] * 2 ** (7-i)\n        temperature_point += temperature_point_bit[i] * 2 ** (7-i)\n        check += check_bit[i] * 2 ** (7-i)\n   \n    tmp = humidity + humidity_point + temperature + temperature_point\n   \n    if check == tmp:\n        return [temperature,humidity]\n    else:\n        return [0,0]\n    GPIO.cleanup()\n\n#超声波测距\ndef get_dis():\n    GPIO.output(Trig_Pin, GPIO.HIGH)\n    time.sleep(0.00015)\n    GPIO.output(Trig_Pin, GPIO.LOW)\n    while not GPIO.input(Echo_Pin):\n        pass\n    t1 = time.time()\n    while GPIO.input(Echo_Pin):\n        pass\n    t2 = time.time()\n    return round((t2-t1)*340*100/2,2)\n\n#qt视图模块\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        #初始化视图\n        self.initUI()\n        #线程，用于更新摄像头图像\n        self.sum = Sum()\n        self.sum.sinOut.connect(self.update_img)\n        self.sum.start()  \n\n        self.r = 0\n        self.g = 0\n        self.y = 0\n        self.show()      \n\n\n    def initUI(self):      \n        #加入按钮，复选框，lcd，并绑定事件\n        hbox = QGridLayout(self)\n        self.lbl = QLabel(self)\n\n        self.lcd1 = QLCDNumber(self)\n        self.lcd2 = QLCDNumber(self)\n\n        self.cb1 = QCheckBox('red',self)\n        self.cb2 = QCheckBox('yellow',self)\n        self.cb3 = QCheckBox('green',self)\n        self.cb1.stateChanged.connect(self.changecb1)\n        self.cb2.stateChanged.connect(self.changecb2)\n        self.cb3.stateChanged.connect(self.changecb3)\n\n        self.btn = QPushButton(self)\n        self.btn.setText(\"start\")\n        self.btn.clicked.connect(self.update_num)\n\n\n        self.lcd3 = QLCDNumber(self)\n        self.btn1 = QPushButton(self)\n        self.btn1.setText(\"dis start\")\n        self.btn1.clicked.connect(self.update_dis)\n\n        hbox.addWidget(self.lbl,0,0,1,3)\n        hbox.addWidget(self.lcd1,1,0,1,1)\n        hbox.addWidget(self.lcd2,1,1,1,1)\n        hbox.addWidget(self.cb1,3,0,1,1)\n        hbox.addWidget(self.cb2,3,1,1,1)\n        hbox.addWidget(self.cb3,3,2,1,1)\n        hbox.addWidget(self.btn,1,2,1,1)\n        hbox.addWidget(self.lcd3,2,0,1,2)\n        hbox.addWidget(self.btn1,2,2,1,1)\n\n        self.setLayout(hbox)\n\n    #更新图像\n    def update_img(self,im):\n        height, width, bytesPerComponent= im.shape\n        bytesPerLine = bytesPerComponent* width\n        cv2.cvtColor(im, cv2.COLOR_BGR2RGB,im)\n        self.image= QImage(im.data, width, height, bytesPerLine, QImage.Format_RGB888)\n        self.lbl.setPixmap(QPixmap.fromImage(self.image))\n    #更新温湿度\n    def update_num(self):\n        #res = os.popen(\"python temp.py\")\n        #li = list(map(int,res.read().strip().split(\",\")))\n        li = get_temp()\n        print(li)\n        self.lcd1.display(li[0])\n        self.lcd2.display(li[1])\n    #更新距离\n    def update_dis(self):\n        self.lcd3.display(get_dis())\n    #更新复选框\n    def changecb1(self):\n        if self.r == 0:\n            GPIO.output(16,GPIO.HIGH)\n            self.r = 1\n        else:\n            GPIO.output(16,GPIO.LOW)\n            self.r = 0\n    def changecb2(self):\n        if self.y == 0:\n            GPIO.output(20,GPIO.HIGH)\n            self.y = 1\n        else:\n            GPIO.output(20,GPIO.LOW)\n            self.y = 0\n    def changecb3(self):\n        if self.g == 0:\n            GPIO.output(21,GPIO.HIGH)\n            self.g = 1\n        else:\n            GPIO.output(21,GPIO.LOW)\n            self.g = 0\n\n#线程，用于更新图像\nclass Sum(QThread):\n    sinOut = pyqtSignal(np.ndarray)\n    def __init__(self):\n        super().__init__()\n        self.camera = PiCamera()\n        self.camera.resolution = (640, 480)\n        self.camera.framerate = 32\n        self.rawCapture = PiRGBArray(self.camera, size=(640, 480))\n\n    def run(self):   \n        for frame in self.camera.capture_continuous(self.rawCapture, format=\"bgr\", use_video_port=True):\n            image = frame.array\n            self.sinOut.emit(image)\n            self.rawCapture.truncate()\n            self.rawCapture.seek(0)\n            time.sleep(0.2)\n#主函数\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())</pre>\n<p>作为电子专业，单片机，FPGA，树莓派都玩了，也差不多无憾了。</p>\n<p>但也说不定是最后一次接触硬件方面的东西了呢。</p>\n","excerpt":"<p>学校一个课程用到，在linux实现一个qt界面来控制几个硬件功能：摄像头，温湿度，超声波测距，红绿灯。","more":"</p>\n<p>安装对应库，运行代码前就是要把器件连到对应的引脚上。</p>\n<pre>#coding:utf-8\n#author:!@#$%^&amp;*()_+ganster\nfrom PyQt5.QtWidgets import QWidget, QHBoxLayout, QLabel, QApplication,QLCDNumber,QVBoxLayout,QGridLayout,QCheckBox,QPushButton\nfrom PyQt5.QtGui import QPixmap,QImage\nfrom PyQt5.QtCore import QThread,Qt,pyqtSignal\nfrom picamera.array import PiRGBArray\nfrom picamera import PiCamera\nimport RPi.GPIO as GPIO\nimport numpy as np\nimport sys\nimport time\nimport cv2\nimport os\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(16, GPIO.OUT)  #红\nGPIO.setup(20,GPIO.OUT)  #黄\nGPIO.setup(21,GPIO.OUT) #绿\n\n#超声波测距端口\nTrig_Pin = 5\nEcho_Pin = 6\nGPIO.setup(Trig_Pin, GPIO.OUT, initial = GPIO.LOW)\nGPIO.setup(Echo_Pin, GPIO.IN)\n\n#温湿度端口\nchannel = 4\n\n#温湿度\ndef get_temp():\n    data = []\n    j = 0\n    GPIO.setup(channel, GPIO.OUT)\n    GPIO.output(channel, GPIO.LOW)\n    time.sleep(0.02)\n    GPIO.output(channel, GPIO.HIGH)\n    GPIO.setup(channel, GPIO.IN)\n    while GPIO.input(channel) == GPIO.LOW:\n        continue\n    while GPIO.input(channel) == GPIO.HIGH:\n        continue\n    while j &lt; 40:\n        k = 0\n        while GPIO.input(channel) == GPIO.LOW:\n            continue\n        while GPIO.input(channel) == GPIO.HIGH:\n            k += 1\n            if k &gt; 100:\n                break\n        if k &lt; 8:\n            data.append(0)\n        else:\n            data.append(1)\n        j += 1\n    humidity_bit = data[0:8]\n    humidity_point_bit = data[8:16]\n    temperature_bit = data[16:24]\n    temperature_point_bit = data[24:32]\n    check_bit = data[32:40]\n    humidity = 0\n    humidity_point = 0\n    temperature = 0\n    temperature_point = 0\n    check = 0\n   \n    for i in range(8):\n        humidity += humidity_bit[i] * 2 ** (7-i)\n        humidity_point += humidity_point_bit[i] * 2 ** (7-i)\n        temperature += temperature_bit[i] * 2 ** (7-i)\n        temperature_point += temperature_point_bit[i] * 2 ** (7-i)\n        check += check_bit[i] * 2 ** (7-i)\n   \n    tmp = humidity + humidity_point + temperature + temperature_point\n   \n    if check == tmp:\n        return [temperature,humidity]\n    else:\n        return [0,0]\n    GPIO.cleanup()\n\n#超声波测距\ndef get_dis():\n    GPIO.output(Trig_Pin, GPIO.HIGH)\n    time.sleep(0.00015)\n    GPIO.output(Trig_Pin, GPIO.LOW)\n    while not GPIO.input(Echo_Pin):\n        pass\n    t1 = time.time()\n    while GPIO.input(Echo_Pin):\n        pass\n    t2 = time.time()\n    return round((t2-t1)*340*100/2,2)\n\n#qt视图模块\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        #初始化视图\n        self.initUI()\n        #线程，用于更新摄像头图像\n        self.sum = Sum()\n        self.sum.sinOut.connect(self.update_img)\n        self.sum.start()  \n\n        self.r = 0\n        self.g = 0\n        self.y = 0\n        self.show()      \n\n\n    def initUI(self):      \n        #加入按钮，复选框，lcd，并绑定事件\n        hbox = QGridLayout(self)\n        self.lbl = QLabel(self)\n\n        self.lcd1 = QLCDNumber(self)\n        self.lcd2 = QLCDNumber(self)\n\n        self.cb1 = QCheckBox('red',self)\n        self.cb2 = QCheckBox('yellow',self)\n        self.cb3 = QCheckBox('green',self)\n        self.cb1.stateChanged.connect(self.changecb1)\n        self.cb2.stateChanged.connect(self.changecb2)\n        self.cb3.stateChanged.connect(self.changecb3)\n\n        self.btn = QPushButton(self)\n        self.btn.setText(\"start\")\n        self.btn.clicked.connect(self.update_num)\n\n\n        self.lcd3 = QLCDNumber(self)\n        self.btn1 = QPushButton(self)\n        self.btn1.setText(\"dis start\")\n        self.btn1.clicked.connect(self.update_dis)\n\n        hbox.addWidget(self.lbl,0,0,1,3)\n        hbox.addWidget(self.lcd1,1,0,1,1)\n        hbox.addWidget(self.lcd2,1,1,1,1)\n        hbox.addWidget(self.cb1,3,0,1,1)\n        hbox.addWidget(self.cb2,3,1,1,1)\n        hbox.addWidget(self.cb3,3,2,1,1)\n        hbox.addWidget(self.btn,1,2,1,1)\n        hbox.addWidget(self.lcd3,2,0,1,2)\n        hbox.addWidget(self.btn1,2,2,1,1)\n\n        self.setLayout(hbox)\n\n    #更新图像\n    def update_img(self,im):\n        height, width, bytesPerComponent= im.shape\n        bytesPerLine = bytesPerComponent* width\n        cv2.cvtColor(im, cv2.COLOR_BGR2RGB,im)\n        self.image= QImage(im.data, width, height, bytesPerLine, QImage.Format_RGB888)\n        self.lbl.setPixmap(QPixmap.fromImage(self.image))\n    #更新温湿度\n    def update_num(self):\n        #res = os.popen(\"python temp.py\")\n        #li = list(map(int,res.read().strip().split(\",\")))\n        li = get_temp()\n        print(li)\n        self.lcd1.display(li[0])\n        self.lcd2.display(li[1])\n    #更新距离\n    def update_dis(self):\n        self.lcd3.display(get_dis())\n    #更新复选框\n    def changecb1(self):\n        if self.r == 0:\n            GPIO.output(16,GPIO.HIGH)\n            self.r = 1\n        else:\n            GPIO.output(16,GPIO.LOW)\n            self.r = 0\n    def changecb2(self):\n        if self.y == 0:\n            GPIO.output(20,GPIO.HIGH)\n            self.y = 1\n        else:\n            GPIO.output(20,GPIO.LOW)\n            self.y = 0\n    def changecb3(self):\n        if self.g == 0:\n            GPIO.output(21,GPIO.HIGH)\n            self.g = 1\n        else:\n            GPIO.output(21,GPIO.LOW)\n            self.g = 0\n\n#线程，用于更新图像\nclass Sum(QThread):\n    sinOut = pyqtSignal(np.ndarray)\n    def __init__(self):\n        super().__init__()\n        self.camera = PiCamera()\n        self.camera.resolution = (640, 480)\n        self.camera.framerate = 32\n        self.rawCapture = PiRGBArray(self.camera, size=(640, 480))\n\n    def run(self):   \n        for frame in self.camera.capture_continuous(self.rawCapture, format=\"bgr\", use_video_port=True):\n            image = frame.array\n            self.sinOut.emit(image)\n            self.rawCapture.truncate()\n            self.rawCapture.seek(0)\n            time.sleep(0.2)\n#主函数\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())</pre>\n<p>作为电子专业，单片机，FPGA，树莓派都玩了，也差不多无憾了。</p>\n<p>但也说不定是最后一次接触硬件方面的东西了呢。</p>"},{"title":"python数据分析之基础画图","catalog":true,"date":"2018-01-03T08:49:12.000Z","_content":"\n之前由于每次有数据用python画图都要找找其他资料和手册，顾这里做一些总结，用于方便查找与快捷使用！这里主要用matplotlib.pyplot。<!--more-->\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(-5,5,50)\ny=np.sin(x)\nz=2*x\n\n#设置画板大小\nplt.figure(figsize=(6,6))\n#用plot画图,前两个参数为数据的x和y值\n#第三个参数为三个属性的结合：颜色如(b，g，r)+标记如(.，o，,)+连线如(-，--，-.)\n#label为线条说明，markersize为标记大小，linewidth为连线大小\nplt.plot(x,y,\"go-\",label=\"yyy\",markersize=2,linewidth=1)\nplt.plot(x,z,\"b.-\",label=\"zzz\")\n\n#坐标轴显示范围\nplt.axis([-5,5,-5,5])\n#设置坐标轴刻度\nplt.xticks([-5,0,5])\nplt.yticks([-5,0,5],[\"bad\",\"normal\",\"good\"])\n#坐标轴说明\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\n#图标题\nplt.title(\"this is title\")\n#显示线条说明\nplt.legend()\n#显示网格\nplt.grid(True)\n#做标注\nplt.annotate(\"con\",xy=(0,0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dict(arrowstyle='-&gt;', connectionstyle=\"arc3,rad=.2\"))\n#做注释\nplt.text(x,y,\"con\",fondict={'size':16,'color':'r'})\n#画图\nplt.show()</pre>\n上面的plot可做散点也可作连线图，要做复杂的散点图也可以用plt.scatter\n\n下面再试一试常用的柱状图\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(0,5,10)\ny=np.sin(x)\nz=2*x\n#画柱状图\nplt.bar(x,z,width=0.1,bottom=None,align='center')\n#画柱状大小的描述\nfor i,j in zip(x,z):\n    plt.text(i,j,\"%.2f\"%j,ha='center',va='bottom')\nplt.show()</pre>\n再来尝试绘制一个饼图，这里引用<a href=\"https://www.jianshu.com/p/0a76c94e9db7\">https://www.jianshu.com/p/0a76c94e9db7</a>\n<pre>from matplotlib import pyplot as plt \n\n#调节图形大小，宽，高\nplt.figure(figsize=(6,9))\n#定义饼状图的标签，标签是列表\nlabels = [u'第一部分',u'第二部分',u'第三部分']\n#每个标签占多大，会自动去算百分比\nsizes = [60,30,10]\ncolors = ['red','yellowgreen','lightskyblue']\n#将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙\nexplode = (0.05,0,0)\n\npatches,l_text,p_text = plt.pie(sizes,explode=explode,labels=labels,colors=colors,\n labeldistance = 1.1,autopct = '%3.1f%%',shadow = False,\n startangle = 90,pctdistance = 0.6)\n\n#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置\n#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数\n#shadow，饼是否有阴影\n#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看\n#pctdistance，百分比的text离圆心的距离\n#patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本\n\n#改变文本的大小\n#方法是把每一个text遍历。调用set_size方法设置它的属性\nfor t in l_text:\n    t.set_size=(30)\nfor t in p_text:\n    t.set_size=(20)\n# 设置x，y轴刻度一致，这样饼图才能是圆的\nplt.axis('equal')\nplt.legend()\nplt.show()</pre>\n先用matplotlib做这些基础的图形，之后亦可用seaborn做些更好看的。\n","source":"_posts/2018/article_2_python数据分析之基础画图.md","raw":"\n---\ntitle: python数据分析之基础画图\ncatalog: true\ndate: 2018-1-3 16:49:12\n---\n\n之前由于每次有数据用python画图都要找找其他资料和手册，顾这里做一些总结，用于方便查找与快捷使用！这里主要用matplotlib.pyplot。<!--more-->\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(-5,5,50)\ny=np.sin(x)\nz=2*x\n\n#设置画板大小\nplt.figure(figsize=(6,6))\n#用plot画图,前两个参数为数据的x和y值\n#第三个参数为三个属性的结合：颜色如(b，g，r)+标记如(.，o，,)+连线如(-，--，-.)\n#label为线条说明，markersize为标记大小，linewidth为连线大小\nplt.plot(x,y,\"go-\",label=\"yyy\",markersize=2,linewidth=1)\nplt.plot(x,z,\"b.-\",label=\"zzz\")\n\n#坐标轴显示范围\nplt.axis([-5,5,-5,5])\n#设置坐标轴刻度\nplt.xticks([-5,0,5])\nplt.yticks([-5,0,5],[\"bad\",\"normal\",\"good\"])\n#坐标轴说明\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\n#图标题\nplt.title(\"this is title\")\n#显示线条说明\nplt.legend()\n#显示网格\nplt.grid(True)\n#做标注\nplt.annotate(\"con\",xy=(0,0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dict(arrowstyle='-&gt;', connectionstyle=\"arc3,rad=.2\"))\n#做注释\nplt.text(x,y,\"con\",fondict={'size':16,'color':'r'})\n#画图\nplt.show()</pre>\n上面的plot可做散点也可作连线图，要做复杂的散点图也可以用plt.scatter\n\n下面再试一试常用的柱状图\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(0,5,10)\ny=np.sin(x)\nz=2*x\n#画柱状图\nplt.bar(x,z,width=0.1,bottom=None,align='center')\n#画柱状大小的描述\nfor i,j in zip(x,z):\n    plt.text(i,j,\"%.2f\"%j,ha='center',va='bottom')\nplt.show()</pre>\n再来尝试绘制一个饼图，这里引用<a href=\"https://www.jianshu.com/p/0a76c94e9db7\">https://www.jianshu.com/p/0a76c94e9db7</a>\n<pre>from matplotlib import pyplot as plt \n\n#调节图形大小，宽，高\nplt.figure(figsize=(6,9))\n#定义饼状图的标签，标签是列表\nlabels = [u'第一部分',u'第二部分',u'第三部分']\n#每个标签占多大，会自动去算百分比\nsizes = [60,30,10]\ncolors = ['red','yellowgreen','lightskyblue']\n#将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙\nexplode = (0.05,0,0)\n\npatches,l_text,p_text = plt.pie(sizes,explode=explode,labels=labels,colors=colors,\n labeldistance = 1.1,autopct = '%3.1f%%',shadow = False,\n startangle = 90,pctdistance = 0.6)\n\n#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置\n#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数\n#shadow，饼是否有阴影\n#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看\n#pctdistance，百分比的text离圆心的距离\n#patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本\n\n#改变文本的大小\n#方法是把每一个text遍历。调用set_size方法设置它的属性\nfor t in l_text:\n    t.set_size=(30)\nfor t in p_text:\n    t.set_size=(20)\n# 设置x，y轴刻度一致，这样饼图才能是圆的\nplt.axis('equal')\nplt.legend()\nplt.show()</pre>\n先用matplotlib做这些基础的图形，之后亦可用seaborn做些更好看的。\n","slug":"2018/article_2_python数据分析之基础画图","published":1,"updated":"2021-01-27T04:46:28.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74b002a0770qvosmszq","content":"<p>之前由于每次有数据用python画图都要找找其他资料和手册，顾这里做一些总结，用于方便查找与快捷使用！这里主要用matplotlib.pyplot。<a id=\"more\"></a></p>\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(-5,5,50)\ny=np.sin(x)\nz=2*x\n\n#设置画板大小\nplt.figure(figsize=(6,6))\n#用plot画图,前两个参数为数据的x和y值\n#第三个参数为三个属性的结合：颜色如(b，g，r)+标记如(.，o，,)+连线如(-，--，-.)\n#label为线条说明，markersize为标记大小，linewidth为连线大小\nplt.plot(x,y,\"go-\",label=\"yyy\",markersize=2,linewidth=1)\nplt.plot(x,z,\"b.-\",label=\"zzz\")\n\n#坐标轴显示范围\nplt.axis([-5,5,-5,5])\n#设置坐标轴刻度\nplt.xticks([-5,0,5])\nplt.yticks([-5,0,5],[\"bad\",\"normal\",\"good\"])\n#坐标轴说明\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\n#图标题\nplt.title(\"this is title\")\n#显示线条说明\nplt.legend()\n#显示网格\nplt.grid(True)\n#做标注\nplt.annotate(\"con\",xy=(0,0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dict(arrowstyle='-&gt;', connectionstyle=\"arc3,rad=.2\"))\n#做注释\nplt.text(x,y,\"con\",fondict={'size':16,'color':'r'})\n#画图\nplt.show()</pre>\n<p>上面的plot可做散点也可作连线图，要做复杂的散点图也可以用plt.scatter</p>\n<p>下面再试一试常用的柱状图</p>\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(0,5,10)\ny=np.sin(x)\nz=2*x\n#画柱状图\nplt.bar(x,z,width=0.1,bottom=None,align='center')\n#画柱状大小的描述\nfor i,j in zip(x,z):\n    plt.text(i,j,\"%.2f\"%j,ha='center',va='bottom')\nplt.show()</pre>\n<p>再来尝试绘制一个饼图，这里引用<a href=\"https://www.jianshu.com/p/0a76c94e9db7\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/0a76c94e9db7</a></p>\n<pre>from matplotlib import pyplot as plt \n\n#调节图形大小，宽，高\nplt.figure(figsize=(6,9))\n#定义饼状图的标签，标签是列表\nlabels = [u'第一部分',u'第二部分',u'第三部分']\n#每个标签占多大，会自动去算百分比\nsizes = [60,30,10]\ncolors = ['red','yellowgreen','lightskyblue']\n#将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙\nexplode = (0.05,0,0)\n\npatches,l_text,p_text = plt.pie(sizes,explode=explode,labels=labels,colors=colors,\n labeldistance = 1.1,autopct = '%3.1f%%',shadow = False,\n startangle = 90,pctdistance = 0.6)\n\n#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置\n#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数\n#shadow，饼是否有阴影\n#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看\n#pctdistance，百分比的text离圆心的距离\n#patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本\n\n#改变文本的大小\n#方法是把每一个text遍历。调用set_size方法设置它的属性\nfor t in l_text:\n    t.set_size=(30)\nfor t in p_text:\n    t.set_size=(20)\n# 设置x，y轴刻度一致，这样饼图才能是圆的\nplt.axis('equal')\nplt.legend()\nplt.show()</pre>\n<p>先用matplotlib做这些基础的图形，之后亦可用seaborn做些更好看的。</p>\n","excerpt":"<p>之前由于每次有数据用python画图都要找找其他资料和手册，顾这里做一些总结，用于方便查找与快捷使用！这里主要用matplotlib.pyplot。","more":"</p>\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(-5,5,50)\ny=np.sin(x)\nz=2*x\n\n#设置画板大小\nplt.figure(figsize=(6,6))\n#用plot画图,前两个参数为数据的x和y值\n#第三个参数为三个属性的结合：颜色如(b，g，r)+标记如(.，o，,)+连线如(-，--，-.)\n#label为线条说明，markersize为标记大小，linewidth为连线大小\nplt.plot(x,y,\"go-\",label=\"yyy\",markersize=2,linewidth=1)\nplt.plot(x,z,\"b.-\",label=\"zzz\")\n\n#坐标轴显示范围\nplt.axis([-5,5,-5,5])\n#设置坐标轴刻度\nplt.xticks([-5,0,5])\nplt.yticks([-5,0,5],[\"bad\",\"normal\",\"good\"])\n#坐标轴说明\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\n#图标题\nplt.title(\"this is title\")\n#显示线条说明\nplt.legend()\n#显示网格\nplt.grid(True)\n#做标注\nplt.annotate(\"con\",xy=(0,0),xycoords='data',xytext=(+30,-30),textcoords='offset points',fontsize=16,arrowprops=dict(arrowstyle='-&gt;', connectionstyle=\"arc3,rad=.2\"))\n#做注释\nplt.text(x,y,\"con\",fondict={'size':16,'color':'r'})\n#画图\nplt.show()</pre>\n<p>上面的plot可做散点也可作连线图，要做复杂的散点图也可以用plt.scatter</p>\n<p>下面再试一试常用的柱状图</p>\n<pre>import numpy as np\nimport matplotlib.pyplot as plt\n#得到测试点\nx=np.linspace(0,5,10)\ny=np.sin(x)\nz=2*x\n#画柱状图\nplt.bar(x,z,width=0.1,bottom=None,align='center')\n#画柱状大小的描述\nfor i,j in zip(x,z):\n    plt.text(i,j,\"%.2f\"%j,ha='center',va='bottom')\nplt.show()</pre>\n<p>再来尝试绘制一个饼图，这里引用<a href=\"https://www.jianshu.com/p/0a76c94e9db7\">https://www.jianshu.com/p/0a76c94e9db7</a></p>\n<pre>from matplotlib import pyplot as plt \n\n#调节图形大小，宽，高\nplt.figure(figsize=(6,9))\n#定义饼状图的标签，标签是列表\nlabels = [u'第一部分',u'第二部分',u'第三部分']\n#每个标签占多大，会自动去算百分比\nsizes = [60,30,10]\ncolors = ['red','yellowgreen','lightskyblue']\n#将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙\nexplode = (0.05,0,0)\n\npatches,l_text,p_text = plt.pie(sizes,explode=explode,labels=labels,colors=colors,\n labeldistance = 1.1,autopct = '%3.1f%%',shadow = False,\n startangle = 90,pctdistance = 0.6)\n\n#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置\n#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数\n#shadow，饼是否有阴影\n#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看\n#pctdistance，百分比的text离圆心的距离\n#patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本\n\n#改变文本的大小\n#方法是把每一个text遍历。调用set_size方法设置它的属性\nfor t in l_text:\n    t.set_size=(30)\nfor t in p_text:\n    t.set_size=(20)\n# 设置x，y轴刻度一致，这样饼图才能是圆的\nplt.axis('equal')\nplt.legend()\nplt.show()</pre>\n<p>先用matplotlib做这些基础的图形，之后亦可用seaborn做些更好看的。</p>"},{"title":"回校之路","catalog":true,"date":"2018-09-07T12:46:26.000Z","_content":"\n晚六下班，走上回校之路。<!--more-->\n\n同是在杭州，工作在杭的这一端，学校在杭的另一端。\n\n公交堵在半路，饥肠辘辘之际，\n\n是不是该总结些什么。\n\n上一篇记得是是工作之初，现在已然是老司机上路。\n\n工作内容，于我来说虽然大部分是运维，小部分是自己摸索性开发，但也不至于太抗拒。也就是之前所想的广度上增加了一些，仿佛很少感受自己在纵向有多少进步，说不定还在退步。凉凉与我同在。\n\n工作还是有了解了更多的人，见识了更多的事。但工作期间真正能接触的圈子也寥寥无几，而前期默认又放弃了晚间的活动而待在公司更为加剧，或成为朋友，或成为路人，遵从内心，绝不违和。总有身不由己的事，积极追逐的事，事事交错之间，自己独立之思想或许更为宝贵。独立思考自己的身边小事，独立思考自己的人生大事......\n\n弹琴这件事情作为除了工作为数不多一直在做的事，另一件也就农药了，这里也就不述什么游戏高端操作咯。能看明白琴谱且长进了速度，慢慢弹且多练几遍，流行谱子的选段还是能弹下来的。目标便是看谱弹，看样还很遥远，这事从来不急，反正只弹给自己听。\n\n这回回学校就大四老学长了，时光如逝，我的大学生活外人看来普普通通，但我已无悔的付出过，不能兼济天下，但足以独善其身。常和同学口头拌嘴\"你怎么这么优秀\"，虽然没有奖状的耀眼，但大学从没停止对优秀的追求，希望这份自以为的优秀常伴人生。\n\n学校里还剩的也就个毕业设计了，于我应该不会太难，也是给大学个圆满的句号，下次怕不是毕业典礼咯。\n\n没有很多后面的安排，甚至连几天的都没。出去玩也走不远，都懒得动了；换工作也没这必要性，坐等底线咯；工作外的生活平平淡淡，假装平淡是真。在社会的大潮中随风飘摇，不知谁主沉浮。\n\n在这儿工作，周末回家还是比较奢侈，路上得花个678个小时，自己弄得累。也就大大小小的节日，马上是国庆，之后就要过年咯。虽然是周边城市，觉得在杭州也都是异乡人，和东北的西北的也没多大差别，一种独自在外打拼感，一种空手起家迷茫感。\n\n不再很多的思考工作价值论，发现有高学历的朋友也会有同样的困惑，怕是人生大都如此，不去想反而无忧。自己的隐形价值观可能都是可体会但不能言说的，或者说说了但别人谁又能真正理解呢。子非鱼安知鱼之乐。\n\n头发长了，也该剪了。\n","source":"_posts/2018/article_28_回校之路.md","raw":"\n---\ntitle: 回校之路\ncatalog: true\ndate: 2018-9-7 20:46:26\n---\n\n晚六下班，走上回校之路。<!--more-->\n\n同是在杭州，工作在杭的这一端，学校在杭的另一端。\n\n公交堵在半路，饥肠辘辘之际，\n\n是不是该总结些什么。\n\n上一篇记得是是工作之初，现在已然是老司机上路。\n\n工作内容，于我来说虽然大部分是运维，小部分是自己摸索性开发，但也不至于太抗拒。也就是之前所想的广度上增加了一些，仿佛很少感受自己在纵向有多少进步，说不定还在退步。凉凉与我同在。\n\n工作还是有了解了更多的人，见识了更多的事。但工作期间真正能接触的圈子也寥寥无几，而前期默认又放弃了晚间的活动而待在公司更为加剧，或成为朋友，或成为路人，遵从内心，绝不违和。总有身不由己的事，积极追逐的事，事事交错之间，自己独立之思想或许更为宝贵。独立思考自己的身边小事，独立思考自己的人生大事......\n\n弹琴这件事情作为除了工作为数不多一直在做的事，另一件也就农药了，这里也就不述什么游戏高端操作咯。能看明白琴谱且长进了速度，慢慢弹且多练几遍，流行谱子的选段还是能弹下来的。目标便是看谱弹，看样还很遥远，这事从来不急，反正只弹给自己听。\n\n这回回学校就大四老学长了，时光如逝，我的大学生活外人看来普普通通，但我已无悔的付出过，不能兼济天下，但足以独善其身。常和同学口头拌嘴\"你怎么这么优秀\"，虽然没有奖状的耀眼，但大学从没停止对优秀的追求，希望这份自以为的优秀常伴人生。\n\n学校里还剩的也就个毕业设计了，于我应该不会太难，也是给大学个圆满的句号，下次怕不是毕业典礼咯。\n\n没有很多后面的安排，甚至连几天的都没。出去玩也走不远，都懒得动了；换工作也没这必要性，坐等底线咯；工作外的生活平平淡淡，假装平淡是真。在社会的大潮中随风飘摇，不知谁主沉浮。\n\n在这儿工作，周末回家还是比较奢侈，路上得花个678个小时，自己弄得累。也就大大小小的节日，马上是国庆，之后就要过年咯。虽然是周边城市，觉得在杭州也都是异乡人，和东北的西北的也没多大差别，一种独自在外打拼感，一种空手起家迷茫感。\n\n不再很多的思考工作价值论，发现有高学历的朋友也会有同样的困惑，怕是人生大都如此，不去想反而无忧。自己的隐形价值观可能都是可体会但不能言说的，或者说说了但别人谁又能真正理解呢。子非鱼安知鱼之乐。\n\n头发长了，也该剪了。\n","slug":"2018/article_28_回校之路","published":1,"updated":"2021-01-27T04:46:28.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74d002b0770q30pjyd7","content":"<p>晚六下班，走上回校之路。<a id=\"more\"></a></p>\n<p>同是在杭州，工作在杭的这一端，学校在杭的另一端。</p>\n<p>公交堵在半路，饥肠辘辘之际，</p>\n<p>是不是该总结些什么。</p>\n<p>上一篇记得是是工作之初，现在已然是老司机上路。</p>\n<p>工作内容，于我来说虽然大部分是运维，小部分是自己摸索性开发，但也不至于太抗拒。也就是之前所想的广度上增加了一些，仿佛很少感受自己在纵向有多少进步，说不定还在退步。凉凉与我同在。</p>\n<p>工作还是有了解了更多的人，见识了更多的事。但工作期间真正能接触的圈子也寥寥无几，而前期默认又放弃了晚间的活动而待在公司更为加剧，或成为朋友，或成为路人，遵从内心，绝不违和。总有身不由己的事，积极追逐的事，事事交错之间，自己独立之思想或许更为宝贵。独立思考自己的身边小事，独立思考自己的人生大事…</p>\n<p>弹琴这件事情作为除了工作为数不多一直在做的事，另一件也就农药了，这里也就不述什么游戏高端操作咯。能看明白琴谱且长进了速度，慢慢弹且多练几遍，流行谱子的选段还是能弹下来的。目标便是看谱弹，看样还很遥远，这事从来不急，反正只弹给自己听。</p>\n<p>这回回学校就大四老学长了，时光如逝，我的大学生活外人看来普普通通，但我已无悔的付出过，不能兼济天下，但足以独善其身。常和同学口头拌嘴&quot;你怎么这么优秀&quot;，虽然没有奖状的耀眼，但大学从没停止对优秀的追求，希望这份自以为的优秀常伴人生。</p>\n<p>学校里还剩的也就个毕业设计了，于我应该不会太难，也是给大学个圆满的句号，下次怕不是毕业典礼咯。</p>\n<p>没有很多后面的安排，甚至连几天的都没。出去玩也走不远，都懒得动了；换工作也没这必要性，坐等底线咯；工作外的生活平平淡淡，假装平淡是真。在社会的大潮中随风飘摇，不知谁主沉浮。</p>\n<p>在这儿工作，周末回家还是比较奢侈，路上得花个678个小时，自己弄得累。也就大大小小的节日，马上是国庆，之后就要过年咯。虽然是周边城市，觉得在杭州也都是异乡人，和东北的西北的也没多大差别，一种独自在外打拼感，一种空手起家迷茫感。</p>\n<p>不再很多的思考工作价值论，发现有高学历的朋友也会有同样的困惑，怕是人生大都如此，不去想反而无忧。自己的隐形价值观可能都是可体会但不能言说的，或者说说了但别人谁又能真正理解呢。子非鱼安知鱼之乐。</p>\n<p>头发长了，也该剪了。</p>\n","excerpt":"<p>晚六下班，走上回校之路。","more":"</p>\n<p>同是在杭州，工作在杭的这一端，学校在杭的另一端。</p>\n<p>公交堵在半路，饥肠辘辘之际，</p>\n<p>是不是该总结些什么。</p>\n<p>上一篇记得是是工作之初，现在已然是老司机上路。</p>\n<p>工作内容，于我来说虽然大部分是运维，小部分是自己摸索性开发，但也不至于太抗拒。也就是之前所想的广度上增加了一些，仿佛很少感受自己在纵向有多少进步，说不定还在退步。凉凉与我同在。</p>\n<p>工作还是有了解了更多的人，见识了更多的事。但工作期间真正能接触的圈子也寥寥无几，而前期默认又放弃了晚间的活动而待在公司更为加剧，或成为朋友，或成为路人，遵从内心，绝不违和。总有身不由己的事，积极追逐的事，事事交错之间，自己独立之思想或许更为宝贵。独立思考自己的身边小事，独立思考自己的人生大事…</p>\n<p>弹琴这件事情作为除了工作为数不多一直在做的事，另一件也就农药了，这里也就不述什么游戏高端操作咯。能看明白琴谱且长进了速度，慢慢弹且多练几遍，流行谱子的选段还是能弹下来的。目标便是看谱弹，看样还很遥远，这事从来不急，反正只弹给自己听。</p>\n<p>这回回学校就大四老学长了，时光如逝，我的大学生活外人看来普普通通，但我已无悔的付出过，不能兼济天下，但足以独善其身。常和同学口头拌嘴&quot;你怎么这么优秀&quot;，虽然没有奖状的耀眼，但大学从没停止对优秀的追求，希望这份自以为的优秀常伴人生。</p>\n<p>学校里还剩的也就个毕业设计了，于我应该不会太难，也是给大学个圆满的句号，下次怕不是毕业典礼咯。</p>\n<p>没有很多后面的安排，甚至连几天的都没。出去玩也走不远，都懒得动了；换工作也没这必要性，坐等底线咯；工作外的生活平平淡淡，假装平淡是真。在社会的大潮中随风飘摇，不知谁主沉浮。</p>\n<p>在这儿工作，周末回家还是比较奢侈，路上得花个678个小时，自己弄得累。也就大大小小的节日，马上是国庆，之后就要过年咯。虽然是周边城市，觉得在杭州也都是异乡人，和东北的西北的也没多大差别，一种独自在外打拼感，一种空手起家迷茫感。</p>\n<p>不再很多的思考工作价值论，发现有高学历的朋友也会有同样的困惑，怕是人生大都如此，不去想反而无忧。自己的隐形价值观可能都是可体会但不能言说的，或者说说了但别人谁又能真正理解呢。子非鱼安知鱼之乐。</p>\n<p>头发长了，也该剪了。</p>"},{"title":"蒙特卡洛树搜索(mcts)实践--还是五子棋吧","catalog":true,"date":"2018-01-26T03:31:35.000Z","_content":"\n看AlphaZero的时候看到这个mcts，因为需要用他来产生棋局进行训练。比较神奇，就小小探究一下。这边做一个五子棋mcts AI。<!--more-->\n\nmcts按我目前的理解也就是在目前的情况下（根节点），随机产生下一步的节点，之后进行随机模拟至产生一个结果，把结果反馈于当前节点与之前的节点，这样模拟n次以后，得到根节点的下一步的各个节点的A/B，A为结果获胜的次数，B为访问次数。<img class=\"\" src=\"https://upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" data-original-src=\"//upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png\" data-original-width=\"200\" data-original-height=\"72\" data-original-format=\"image/png\" data-original-filesize=\"6109\" />用公式计算就可以得到各个节点的收益，得到收益最大的节点并进行选中。盗图如下，不过图中有多层节点，需计算也就更大。\n\n<img class=\"alignleft\" src=\"https://upload-images.jianshu.io/upload_images/42741-e566dddb28a8f525.png\" />\n\n&nbsp;\n\n直接上代码\n<pre>from math import *\nimport random\n#python3\n#如果要改写其他游戏，主要编写下面这个class就可以\nclass Chess:\n    #初始化游戏状态\n    def __init__(self,cl):\n        self.cl=cl\n        self.all_n=cl*cl\n        self.playerJustMoved = 2\n        self.place=[0]*self.all_n\n    #复制游戏状态作为子节点\n    def Clone(self):\n        st = Chess(self.cl)\n        st.playerJustMoved = self.playerJustMoved\n        st.place=self.place[:]\n        return st\n    #进行游戏的下一步\n    def DoMove(self,state):\n\n        self.playerJustMoved = 3 - self.playerJustMoved\n        self.place[state]=self.playerJustMoved\n    #获取游戏可移动状态\n    def GetMoves(self):\n        \"\"\" Get all possible moves from this state.\n        \"\"\"\n        return [i for i in range(self.all_n) if self.place[i] == 0]\n    #检查是否游戏结束\n    def checkout(self):\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):\n                return True\n        return False\n    #检查五子棋\n    def check(self,z):\n        y=int(z/self.cl)\n        x=z-y*self.cl\n        mid=self.place[x+y*self.cl]\n        if (x&lt;2 and y&lt;2) or (x&lt;2 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&lt;2):\n            return False\n        elif x&lt;2 or x&gt;self.cl-3:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n        elif y&lt;2 or y&gt;self.cl-3:\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n        else:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n            if mid==self.place[x-1+(y-1)*self.cl] and mid==self.place[x-2+(y-2)*self.cl] and mid==self.place[x+1+(y+1)*self.cl] and mid==self.place[x+2+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+(y+1)*self.cl] and mid==self.place[x-2+(y+2)*self.cl] and mid==self.place[x+1+(y-1)*self.cl] and mid==self.place[x+2+(y-2)*self.cl]:\n                return True\n    #得到游戏结果，这边主要得到模拟结果用作反馈\n    def GetResult(self, playerjm):\n        \"\"\" Get the game result from the viewpoint of playerjm. \n        \"\"\"\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):   \n                if self.place[i] == playerjm:\n                    return 1.0\n                else:\n                    return 0.0\n        if self.GetMoves() == []:\n            return 0.5 # draw\n        assert False\n#mcts算法节点部分\nclass Node:\n    \"\"\" A node in the game tree. Note wins is always from the viewpoint of playerJustMoved.\n        Crashes if state not specified.\n    \"\"\"\n    def __init__(self, move = None, parent = None, state = None):\n        self.move = move # the move that got us to this node - \"None\" for the root node\n        self.parentNode = parent # \"None\" for the root node\n        self.childNodes = []\n        self.wins = 0\n        self.visits = 0\n        self.untriedMoves = state.GetMoves() # future child nodes\n        self.playerJustMoved = state.playerJustMoved # the only part of the state that the Node needs later\n        \n    def UCTSelectChild(self):\n        \"\"\" Use the UCB1 formula to select a child node. Often a constant UCTK is applied so we have\n            lambda c: c.wins/c.visits + UCTK * sqrt(2*log(self.visits)/c.visits to vary the amount of\n            exploration versus exploitation.\n        \"\"\"\n        s = sorted(self.childNodes, key = lambda c: c.wins/c.visits + sqrt(2*log(self.visits)/c.visits))[-1]\n        return s\n    \n    def AddChild(self, m, s):\n        \"\"\" Remove m from untriedMoves and add a new child node for this move.\n            Return the added child node\n        \"\"\"\n        n = Node(move = m, parent = self, state = s)\n        self.untriedMoves.remove(m)\n        self.childNodes.append(n)\n        return n\n    \n    def Update(self, result):\n        \"\"\" Update this node - one additional visit and result additional wins. result must be from the viewpoint of playerJustmoved.\n        \"\"\"\n        self.visits += 1\n        self.wins += result\n\n    def __repr__(self):\n        return \"[M:\" + str(self.move) + \" W/V:\" + str(self.wins) + \"/\" + str(self.visits) + \" U:\" + str(self.untriedMoves) + \"]\"\n\n    def TreeToString(self, indent):\n        s = self.IndentString(indent) + str(self)\n        for c in self.childNodes:\n             s += c.TreeToString(indent+1)\n        return s\n\n    def IndentString(self,indent):\n        s = \"\\n\"\n        for i in range (1,indent+1):\n            s += \"| \"\n        return s\n\n    def ChildrenToString(self):\n        s = \"\"\n        for c in self.childNodes:\n             s += str(c) + \"\\n\"\n        return s\n\n#mcts算法模拟部分\ndef UCT(rootstate, itermax, verbose = False):\n    \"\"\" Conduct a UCT search for itermax iterations starting from rootstate.\n        Return the best move from the rootstate.\n        Assumes 2 alternating players (player 1 starts), with game results in the range [0.0, 1.0].\"\"\"\n\n    rootnode = Node(state = rootstate)\n\n    for i in range(itermax):\n        node = rootnode\n        state = rootstate.Clone()\n\n        # Select\n        while node.untriedMoves == [] and node.childNodes != []: # node is fully expanded and non-terminal\n            node = node.UCTSelectChild()\n            state.DoMove(node.move)\n\n        # Expand\n        if node.untriedMoves != []: # if we can expand (i.e. state/node is non-terminal)\n            m = random.choice(node.untriedMoves) \n            state.DoMove(m)\n            node = node.AddChild(m,state) # add child and descend tree\n\n        # Rollout - this can often be made orders of magnitude quicker using a state.GetRandomMove() function\n        while state.GetMoves() != []: # while state is non-terminal\n            state.DoMove(random.choice(state.GetMoves()))\n\n        # Backpropagate\n        while node != None: # backpropagate from the expanded node and work back to the root node\n            node.Update(state.GetResult(node.playerJustMoved)) # state is terminal. Update node with result from POV of node.playerJustMoved\n            node = node.parentNode\n\n    # Output some information about the tree - can be omitted\n    #if (verbose): print rootnode.TreeToString(0)\n    #else: print rootnode.ChildrenToString()\n    #print(rootnode.childNodes)\n    return sorted(rootnode.childNodes, key = lambda c: c.visits)[-1].move # return the move that was most visited\n#主函数                \ndef UCTPlayGame():\n    itermax=5000#每一步迭代的次数，越多越准确,但这边只有单分支，应该会有一个上限\n    length=8#棋盘长宽\n    res=[\"_\"]*length*length\n    state = Chess(length)\n    save_state=\"\"\n    while (not state.checkout() and state.GetMoves()!=[]):\n        if state.playerJustMoved == 1:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #2\n            print(\"电脑2下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            res[m]=\"X\"\n        else:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #1\n            print(\"电脑1下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            #如果想自己和电脑下就注释掉上面两行，再去掉下面两个注释。\n            #my=input(\"您下子(格式如:3 4)\\n\").split(\" \")\n            #m=int(my[0])+int(my[1])*length\n            res[m]=\"O\"\n        print(\"Best Move: \" + str(m) + \"\\n\")\n        for i in range(length):\n            print(\" \".join(res[length*i:length*(i+1)]))\n        state.DoMove(m)\n    if state.GetResult(state.playerJustMoved) == 1.0:\n        print(\"Player \" + str(state.playerJustMoved) + \" wins!\")\n    elif state.GetResult(state.playerJustMoved) == 0.0:\n        print(\"Player \" + str(3 - state.playerJustMoved) + \" wins!\")\n    else: print(\"Nobody wins!\")\n\nif __name__ == \"__main__\":\n    \"\"\" Play a single game to the end using UCT for both players. \n    \"\"\"\n    UCTPlayGame()</pre>\n实验结果：\n\n以8*8棋盘为例，在每步迭代几千次之后，电脑就基本可以学会档这个技能，但电脑要赢这边还是有点困难，没有多步的规划。\n\n有时候也会莫名下到棋盘边上的点，想想棋盘边上的点赢的概率应该低吧。这个可能步数不够或者模拟有问题。实验如下图：\n\n<img class=\"alignnone size-full wp-image-518\" src=\"/img/uploads/2018/01/微信图片_20180126111340.png\" alt=\"\" width=\"132\" height=\"174\" />\n\n灵感来源：<a href=\"https://zhuanlan.zhihu.com/p/32089487\">知乎某讲篇AlphaZero的文章\n</a>\n\n算法代码借鉴：<a href=\"http://mcts.ai\">mcts.ai</a>\n","source":"_posts/2018/article_3_蒙特卡洛树搜索(mcts)实践--还是五子棋吧.md","raw":"\n---\ntitle: 蒙特卡洛树搜索(mcts)实践--还是五子棋吧\ncatalog: true\ndate: 2018-1-26 11:31:35\n---\n\n看AlphaZero的时候看到这个mcts，因为需要用他来产生棋局进行训练。比较神奇，就小小探究一下。这边做一个五子棋mcts AI。<!--more-->\n\nmcts按我目前的理解也就是在目前的情况下（根节点），随机产生下一步的节点，之后进行随机模拟至产生一个结果，把结果反馈于当前节点与之前的节点，这样模拟n次以后，得到根节点的下一步的各个节点的A/B，A为结果获胜的次数，B为访问次数。<img class=\"\" src=\"https://upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" data-original-src=\"//upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png\" data-original-width=\"200\" data-original-height=\"72\" data-original-format=\"image/png\" data-original-filesize=\"6109\" />用公式计算就可以得到各个节点的收益，得到收益最大的节点并进行选中。盗图如下，不过图中有多层节点，需计算也就更大。\n\n<img class=\"alignleft\" src=\"https://upload-images.jianshu.io/upload_images/42741-e566dddb28a8f525.png\" />\n\n&nbsp;\n\n直接上代码\n<pre>from math import *\nimport random\n#python3\n#如果要改写其他游戏，主要编写下面这个class就可以\nclass Chess:\n    #初始化游戏状态\n    def __init__(self,cl):\n        self.cl=cl\n        self.all_n=cl*cl\n        self.playerJustMoved = 2\n        self.place=[0]*self.all_n\n    #复制游戏状态作为子节点\n    def Clone(self):\n        st = Chess(self.cl)\n        st.playerJustMoved = self.playerJustMoved\n        st.place=self.place[:]\n        return st\n    #进行游戏的下一步\n    def DoMove(self,state):\n\n        self.playerJustMoved = 3 - self.playerJustMoved\n        self.place[state]=self.playerJustMoved\n    #获取游戏可移动状态\n    def GetMoves(self):\n        \"\"\" Get all possible moves from this state.\n        \"\"\"\n        return [i for i in range(self.all_n) if self.place[i] == 0]\n    #检查是否游戏结束\n    def checkout(self):\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):\n                return True\n        return False\n    #检查五子棋\n    def check(self,z):\n        y=int(z/self.cl)\n        x=z-y*self.cl\n        mid=self.place[x+y*self.cl]\n        if (x&lt;2 and y&lt;2) or (x&lt;2 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&lt;2):\n            return False\n        elif x&lt;2 or x&gt;self.cl-3:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n        elif y&lt;2 or y&gt;self.cl-3:\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n        else:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n            if mid==self.place[x-1+(y-1)*self.cl] and mid==self.place[x-2+(y-2)*self.cl] and mid==self.place[x+1+(y+1)*self.cl] and mid==self.place[x+2+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+(y+1)*self.cl] and mid==self.place[x-2+(y+2)*self.cl] and mid==self.place[x+1+(y-1)*self.cl] and mid==self.place[x+2+(y-2)*self.cl]:\n                return True\n    #得到游戏结果，这边主要得到模拟结果用作反馈\n    def GetResult(self, playerjm):\n        \"\"\" Get the game result from the viewpoint of playerjm. \n        \"\"\"\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):   \n                if self.place[i] == playerjm:\n                    return 1.0\n                else:\n                    return 0.0\n        if self.GetMoves() == []:\n            return 0.5 # draw\n        assert False\n#mcts算法节点部分\nclass Node:\n    \"\"\" A node in the game tree. Note wins is always from the viewpoint of playerJustMoved.\n        Crashes if state not specified.\n    \"\"\"\n    def __init__(self, move = None, parent = None, state = None):\n        self.move = move # the move that got us to this node - \"None\" for the root node\n        self.parentNode = parent # \"None\" for the root node\n        self.childNodes = []\n        self.wins = 0\n        self.visits = 0\n        self.untriedMoves = state.GetMoves() # future child nodes\n        self.playerJustMoved = state.playerJustMoved # the only part of the state that the Node needs later\n        \n    def UCTSelectChild(self):\n        \"\"\" Use the UCB1 formula to select a child node. Often a constant UCTK is applied so we have\n            lambda c: c.wins/c.visits + UCTK * sqrt(2*log(self.visits)/c.visits to vary the amount of\n            exploration versus exploitation.\n        \"\"\"\n        s = sorted(self.childNodes, key = lambda c: c.wins/c.visits + sqrt(2*log(self.visits)/c.visits))[-1]\n        return s\n    \n    def AddChild(self, m, s):\n        \"\"\" Remove m from untriedMoves and add a new child node for this move.\n            Return the added child node\n        \"\"\"\n        n = Node(move = m, parent = self, state = s)\n        self.untriedMoves.remove(m)\n        self.childNodes.append(n)\n        return n\n    \n    def Update(self, result):\n        \"\"\" Update this node - one additional visit and result additional wins. result must be from the viewpoint of playerJustmoved.\n        \"\"\"\n        self.visits += 1\n        self.wins += result\n\n    def __repr__(self):\n        return \"[M:\" + str(self.move) + \" W/V:\" + str(self.wins) + \"/\" + str(self.visits) + \" U:\" + str(self.untriedMoves) + \"]\"\n\n    def TreeToString(self, indent):\n        s = self.IndentString(indent) + str(self)\n        for c in self.childNodes:\n             s += c.TreeToString(indent+1)\n        return s\n\n    def IndentString(self,indent):\n        s = \"\\n\"\n        for i in range (1,indent+1):\n            s += \"| \"\n        return s\n\n    def ChildrenToString(self):\n        s = \"\"\n        for c in self.childNodes:\n             s += str(c) + \"\\n\"\n        return s\n\n#mcts算法模拟部分\ndef UCT(rootstate, itermax, verbose = False):\n    \"\"\" Conduct a UCT search for itermax iterations starting from rootstate.\n        Return the best move from the rootstate.\n        Assumes 2 alternating players (player 1 starts), with game results in the range [0.0, 1.0].\"\"\"\n\n    rootnode = Node(state = rootstate)\n\n    for i in range(itermax):\n        node = rootnode\n        state = rootstate.Clone()\n\n        # Select\n        while node.untriedMoves == [] and node.childNodes != []: # node is fully expanded and non-terminal\n            node = node.UCTSelectChild()\n            state.DoMove(node.move)\n\n        # Expand\n        if node.untriedMoves != []: # if we can expand (i.e. state/node is non-terminal)\n            m = random.choice(node.untriedMoves) \n            state.DoMove(m)\n            node = node.AddChild(m,state) # add child and descend tree\n\n        # Rollout - this can often be made orders of magnitude quicker using a state.GetRandomMove() function\n        while state.GetMoves() != []: # while state is non-terminal\n            state.DoMove(random.choice(state.GetMoves()))\n\n        # Backpropagate\n        while node != None: # backpropagate from the expanded node and work back to the root node\n            node.Update(state.GetResult(node.playerJustMoved)) # state is terminal. Update node with result from POV of node.playerJustMoved\n            node = node.parentNode\n\n    # Output some information about the tree - can be omitted\n    #if (verbose): print rootnode.TreeToString(0)\n    #else: print rootnode.ChildrenToString()\n    #print(rootnode.childNodes)\n    return sorted(rootnode.childNodes, key = lambda c: c.visits)[-1].move # return the move that was most visited\n#主函数                \ndef UCTPlayGame():\n    itermax=5000#每一步迭代的次数，越多越准确,但这边只有单分支，应该会有一个上限\n    length=8#棋盘长宽\n    res=[\"_\"]*length*length\n    state = Chess(length)\n    save_state=\"\"\n    while (not state.checkout() and state.GetMoves()!=[]):\n        if state.playerJustMoved == 1:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #2\n            print(\"电脑2下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            res[m]=\"X\"\n        else:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #1\n            print(\"电脑1下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            #如果想自己和电脑下就注释掉上面两行，再去掉下面两个注释。\n            #my=input(\"您下子(格式如:3 4)\\n\").split(\" \")\n            #m=int(my[0])+int(my[1])*length\n            res[m]=\"O\"\n        print(\"Best Move: \" + str(m) + \"\\n\")\n        for i in range(length):\n            print(\" \".join(res[length*i:length*(i+1)]))\n        state.DoMove(m)\n    if state.GetResult(state.playerJustMoved) == 1.0:\n        print(\"Player \" + str(state.playerJustMoved) + \" wins!\")\n    elif state.GetResult(state.playerJustMoved) == 0.0:\n        print(\"Player \" + str(3 - state.playerJustMoved) + \" wins!\")\n    else: print(\"Nobody wins!\")\n\nif __name__ == \"__main__\":\n    \"\"\" Play a single game to the end using UCT for both players. \n    \"\"\"\n    UCTPlayGame()</pre>\n实验结果：\n\n以8*8棋盘为例，在每步迭代几千次之后，电脑就基本可以学会档这个技能，但电脑要赢这边还是有点困难，没有多步的规划。\n\n有时候也会莫名下到棋盘边上的点，想想棋盘边上的点赢的概率应该低吧。这个可能步数不够或者模拟有问题。实验如下图：\n\n<img class=\"alignnone size-full wp-image-518\" src=\"/img/uploads/2018/01/微信图片_20180126111340.png\" alt=\"\" width=\"132\" height=\"174\" />\n\n灵感来源：<a href=\"https://zhuanlan.zhihu.com/p/32089487\">知乎某讲篇AlphaZero的文章\n</a>\n\n算法代码借鉴：<a href=\"http://mcts.ai\">mcts.ai</a>\n","slug":"2018/article_3_蒙特卡洛树搜索(mcts)实践--还是五子棋吧","published":1,"updated":"2021-01-27T04:46:28.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74k002c0770gwuzdjn9","content":"<p>看AlphaZero的时候看到这个mcts，因为需要用他来产生棋局进行训练。比较神奇，就小小探究一下。这边做一个五子棋mcts AI。<a id=\"more\"></a></p>\n<p>mcts按我目前的理解也就是在目前的情况下（根节点），随机产生下一步的节点，之后进行随机模拟至产生一个结果，把结果反馈于当前节点与之前的节点，这样模拟n次以后，得到根节点的下一步的各个节点的A/B，A为结果获胜的次数，B为访问次数。<img class=\"\" src=\"https://upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" data-original-src=\"//upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png\" data-original-width=\"200\" data-original-height=\"72\" data-original-format=\"image/png\" data-original-filesize=\"6109\">用公式计算就可以得到各个节点的收益，得到收益最大的节点并进行选中。盗图如下，不过图中有多层节点，需计算也就更大。</p>\n<img class=\"alignleft\" src=\"https://upload-images.jianshu.io/upload_images/42741-e566dddb28a8f525.png\">\n<p> </p>\n<p>直接上代码</p>\n<pre>from math import *\nimport random\n#python3\n#如果要改写其他游戏，主要编写下面这个class就可以\nclass Chess:\n    #初始化游戏状态\n    def __init__(self,cl):\n        self.cl=cl\n        self.all_n=cl*cl\n        self.playerJustMoved = 2\n        self.place=[0]*self.all_n\n    #复制游戏状态作为子节点\n    def Clone(self):\n        st = Chess(self.cl)\n        st.playerJustMoved = self.playerJustMoved\n        st.place=self.place[:]\n        return st\n    #进行游戏的下一步\n    def DoMove(self,state):\n\n        self.playerJustMoved = 3 - self.playerJustMoved\n        self.place[state]=self.playerJustMoved\n    #获取游戏可移动状态\n    def GetMoves(self):\n        \"\"\" Get all possible moves from this state.\n        \"\"\"\n        return [i for i in range(self.all_n) if self.place[i] == 0]\n    #检查是否游戏结束\n    def checkout(self):\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):\n                return True\n        return False\n    #检查五子棋\n    def check(self,z):\n        y=int(z/self.cl)\n        x=z-y*self.cl\n        mid=self.place[x+y*self.cl]\n        if (x&lt;2 and y&lt;2) or (x&lt;2 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&lt;2):\n            return False\n        elif x&lt;2 or x&gt;self.cl-3:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n        elif y&lt;2 or y&gt;self.cl-3:\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n        else:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n            if mid==self.place[x-1+(y-1)*self.cl] and mid==self.place[x-2+(y-2)*self.cl] and mid==self.place[x+1+(y+1)*self.cl] and mid==self.place[x+2+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+(y+1)*self.cl] and mid==self.place[x-2+(y+2)*self.cl] and mid==self.place[x+1+(y-1)*self.cl] and mid==self.place[x+2+(y-2)*self.cl]:\n                return True\n    #得到游戏结果，这边主要得到模拟结果用作反馈\n    def GetResult(self, playerjm):\n        \"\"\" Get the game result from the viewpoint of playerjm. \n        \"\"\"\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):   \n                if self.place[i] == playerjm:\n                    return 1.0\n                else:\n                    return 0.0\n        if self.GetMoves() == []:\n            return 0.5 # draw\n        assert False\n#mcts算法节点部分\nclass Node:\n    \"\"\" A node in the game tree. Note wins is always from the viewpoint of playerJustMoved.\n        Crashes if state not specified.\n    \"\"\"\n    def __init__(self, move = None, parent = None, state = None):\n        self.move = move # the move that got us to this node - \"None\" for the root node\n        self.parentNode = parent # \"None\" for the root node\n        self.childNodes = []\n        self.wins = 0\n        self.visits = 0\n        self.untriedMoves = state.GetMoves() # future child nodes\n        self.playerJustMoved = state.playerJustMoved # the only part of the state that the Node needs later\n        \n    def UCTSelectChild(self):\n        \"\"\" Use the UCB1 formula to select a child node. Often a constant UCTK is applied so we have\n            lambda c: c.wins/c.visits + UCTK * sqrt(2*log(self.visits)/c.visits to vary the amount of\n            exploration versus exploitation.\n        \"\"\"\n        s = sorted(self.childNodes, key = lambda c: c.wins/c.visits + sqrt(2*log(self.visits)/c.visits))[-1]\n        return s\n    \n    def AddChild(self, m, s):\n        \"\"\" Remove m from untriedMoves and add a new child node for this move.\n            Return the added child node\n        \"\"\"\n        n = Node(move = m, parent = self, state = s)\n        self.untriedMoves.remove(m)\n        self.childNodes.append(n)\n        return n\n    \n    def Update(self, result):\n        \"\"\" Update this node - one additional visit and result additional wins. result must be from the viewpoint of playerJustmoved.\n        \"\"\"\n        self.visits += 1\n        self.wins += result\n\n    def __repr__(self):\n        return \"[M:\" + str(self.move) + \" W/V:\" + str(self.wins) + \"/\" + str(self.visits) + \" U:\" + str(self.untriedMoves) + \"]\"\n\n    def TreeToString(self, indent):\n        s = self.IndentString(indent) + str(self)\n        for c in self.childNodes:\n             s += c.TreeToString(indent+1)\n        return s\n\n    def IndentString(self,indent):\n        s = \"\\n\"\n        for i in range (1,indent+1):\n            s += \"| \"\n        return s\n\n    def ChildrenToString(self):\n        s = \"\"\n        for c in self.childNodes:\n             s += str(c) + \"\\n\"\n        return s\n\n#mcts算法模拟部分\ndef UCT(rootstate, itermax, verbose = False):\n    \"\"\" Conduct a UCT search for itermax iterations starting from rootstate.\n        Return the best move from the rootstate.\n        Assumes 2 alternating players (player 1 starts), with game results in the range [0.0, 1.0].\"\"\"\n\n    rootnode = Node(state = rootstate)\n\n    for i in range(itermax):\n        node = rootnode\n        state = rootstate.Clone()\n\n        # Select\n        while node.untriedMoves == [] and node.childNodes != []: # node is fully expanded and non-terminal\n            node = node.UCTSelectChild()\n            state.DoMove(node.move)\n\n        # Expand\n        if node.untriedMoves != []: # if we can expand (i.e. state/node is non-terminal)\n            m = random.choice(node.untriedMoves) \n            state.DoMove(m)\n            node = node.AddChild(m,state) # add child and descend tree\n\n        # Rollout - this can often be made orders of magnitude quicker using a state.GetRandomMove() function\n        while state.GetMoves() != []: # while state is non-terminal\n            state.DoMove(random.choice(state.GetMoves()))\n\n        # Backpropagate\n        while node != None: # backpropagate from the expanded node and work back to the root node\n            node.Update(state.GetResult(node.playerJustMoved)) # state is terminal. Update node with result from POV of node.playerJustMoved\n            node = node.parentNode\n\n    # Output some information about the tree - can be omitted\n    #if (verbose): print rootnode.TreeToString(0)\n    #else: print rootnode.ChildrenToString()\n    #print(rootnode.childNodes)\n    return sorted(rootnode.childNodes, key = lambda c: c.visits)[-1].move # return the move that was most visited\n#主函数                \ndef UCTPlayGame():\n    itermax=5000#每一步迭代的次数，越多越准确,但这边只有单分支，应该会有一个上限\n    length=8#棋盘长宽\n    res=[\"_\"]*length*length\n    state = Chess(length)\n    save_state=\"\"\n    while (not state.checkout() and state.GetMoves()!=[]):\n        if state.playerJustMoved == 1:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #2\n            print(\"电脑2下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            res[m]=\"X\"\n        else:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #1\n            print(\"电脑1下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            #如果想自己和电脑下就注释掉上面两行，再去掉下面两个注释。\n            #my=input(\"您下子(格式如:3 4)\\n\").split(\" \")\n            #m=int(my[0])+int(my[1])*length\n            res[m]=\"O\"\n        print(\"Best Move: \" + str(m) + \"\\n\")\n        for i in range(length):\n            print(\" \".join(res[length*i:length*(i+1)]))\n        state.DoMove(m)\n    if state.GetResult(state.playerJustMoved) == 1.0:\n        print(\"Player \" + str(state.playerJustMoved) + \" wins!\")\n    elif state.GetResult(state.playerJustMoved) == 0.0:\n        print(\"Player \" + str(3 - state.playerJustMoved) + \" wins!\")\n    else: print(\"Nobody wins!\")\n\nif __name__ == \"__main__\":\n    \"\"\" Play a single game to the end using UCT for both players. \n    \"\"\"\n    UCTPlayGame()</pre>\n<p>实验结果：</p>\n<p>以8*8棋盘为例，在每步迭代几千次之后，电脑就基本可以学会档这个技能，但电脑要赢这边还是有点困难，没有多步的规划。</p>\n<p>有时候也会莫名下到棋盘边上的点，想想棋盘边上的点赢的概率应该低吧。这个可能步数不够或者模拟有问题。实验如下图：</p>\n<img class=\"alignnone size-full wp-image-518\" src=\"/img/uploads/2018/01/微信图片_20180126111340.png\" alt=\"\" width=\"132\" height=\"174\">\n<p>灵感来源：<a href=\"https://zhuanlan.zhihu.com/p/32089487\" target=\"_blank\" rel=\"external\">知乎某讲篇AlphaZero的文章<br>\n</a></p>\n<p>算法代码借鉴：<a href=\"http://mcts.ai\" target=\"_blank\" rel=\"external\">mcts.ai</a></p>\n","excerpt":"<p>看AlphaZero的时候看到这个mcts，因为需要用他来产生棋局进行训练。比较神奇，就小小探究一下。这边做一个五子棋mcts AI。","more":"</p>\n<p>mcts按我目前的理解也就是在目前的情况下（根节点），随机产生下一步的节点，之后进行随机模拟至产生一个结果，把结果反馈于当前节点与之前的节点，这样模拟n次以后，得到根节点的下一步的各个节点的A/B，A为结果获胜的次数，B为访问次数。<img class=\"\" src=\"https://upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" data-original-src=\"//upload-images.jianshu.io/upload_images/42741-5399e14c51cb1521.png\" data-original-width=\"200\" data-original-height=\"72\" data-original-format=\"image/png\" data-original-filesize=\"6109\" />用公式计算就可以得到各个节点的收益，得到收益最大的节点并进行选中。盗图如下，不过图中有多层节点，需计算也就更大。</p>\n<img class=\"alignleft\" src=\"https://upload-images.jianshu.io/upload_images/42741-e566dddb28a8f525.png\" />\n<p> </p>\n<p>直接上代码</p>\n<pre>from math import *\nimport random\n#python3\n#如果要改写其他游戏，主要编写下面这个class就可以\nclass Chess:\n    #初始化游戏状态\n    def __init__(self,cl):\n        self.cl=cl\n        self.all_n=cl*cl\n        self.playerJustMoved = 2\n        self.place=[0]*self.all_n\n    #复制游戏状态作为子节点\n    def Clone(self):\n        st = Chess(self.cl)\n        st.playerJustMoved = self.playerJustMoved\n        st.place=self.place[:]\n        return st\n    #进行游戏的下一步\n    def DoMove(self,state):\n\n        self.playerJustMoved = 3 - self.playerJustMoved\n        self.place[state]=self.playerJustMoved\n    #获取游戏可移动状态\n    def GetMoves(self):\n        \"\"\" Get all possible moves from this state.\n        \"\"\"\n        return [i for i in range(self.all_n) if self.place[i] == 0]\n    #检查是否游戏结束\n    def checkout(self):\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):\n                return True\n        return False\n    #检查五子棋\n    def check(self,z):\n        y=int(z/self.cl)\n        x=z-y*self.cl\n        mid=self.place[x+y*self.cl]\n        if (x&lt;2 and y&lt;2) or (x&lt;2 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&gt;self.cl-3) or (x&gt;self.cl-3 and y&lt;2):\n            return False\n        elif x&lt;2 or x&gt;self.cl-3:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n        elif y&lt;2 or y&gt;self.cl-3:\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n        else:\n            if mid==self.place[x+(y-1)*self.cl] and mid==self.place[x+(y-2)*self.cl] and mid==self.place[x+(y+1)*self.cl] and mid==self.place[x+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+y*self.cl] and mid==self.place[x-2+y*self.cl] and mid==self.place[x+1+y*self.cl] and mid==self.place[x+2+y*self.cl]:\n                return True\n            if mid==self.place[x-1+(y-1)*self.cl] and mid==self.place[x-2+(y-2)*self.cl] and mid==self.place[x+1+(y+1)*self.cl] and mid==self.place[x+2+(y+2)*self.cl]:\n                return True\n            if mid==self.place[x-1+(y+1)*self.cl] and mid==self.place[x-2+(y+2)*self.cl] and mid==self.place[x+1+(y-1)*self.cl] and mid==self.place[x+2+(y-2)*self.cl]:\n                return True\n    #得到游戏结果，这边主要得到模拟结果用作反馈\n    def GetResult(self, playerjm):\n        \"\"\" Get the game result from the viewpoint of playerjm. \n        \"\"\"\n        for i in range(self.all_n):\n            if self.place[i]!=0 and self.check(i):   \n                if self.place[i] == playerjm:\n                    return 1.0\n                else:\n                    return 0.0\n        if self.GetMoves() == []:\n            return 0.5 # draw\n        assert False\n#mcts算法节点部分\nclass Node:\n    \"\"\" A node in the game tree. Note wins is always from the viewpoint of playerJustMoved.\n        Crashes if state not specified.\n    \"\"\"\n    def __init__(self, move = None, parent = None, state = None):\n        self.move = move # the move that got us to this node - \"None\" for the root node\n        self.parentNode = parent # \"None\" for the root node\n        self.childNodes = []\n        self.wins = 0\n        self.visits = 0\n        self.untriedMoves = state.GetMoves() # future child nodes\n        self.playerJustMoved = state.playerJustMoved # the only part of the state that the Node needs later\n        \n    def UCTSelectChild(self):\n        \"\"\" Use the UCB1 formula to select a child node. Often a constant UCTK is applied so we have\n            lambda c: c.wins/c.visits + UCTK * sqrt(2*log(self.visits)/c.visits to vary the amount of\n            exploration versus exploitation.\n        \"\"\"\n        s = sorted(self.childNodes, key = lambda c: c.wins/c.visits + sqrt(2*log(self.visits)/c.visits))[-1]\n        return s\n    \n    def AddChild(self, m, s):\n        \"\"\" Remove m from untriedMoves and add a new child node for this move.\n            Return the added child node\n        \"\"\"\n        n = Node(move = m, parent = self, state = s)\n        self.untriedMoves.remove(m)\n        self.childNodes.append(n)\n        return n\n    \n    def Update(self, result):\n        \"\"\" Update this node - one additional visit and result additional wins. result must be from the viewpoint of playerJustmoved.\n        \"\"\"\n        self.visits += 1\n        self.wins += result\n\n    def __repr__(self):\n        return \"[M:\" + str(self.move) + \" W/V:\" + str(self.wins) + \"/\" + str(self.visits) + \" U:\" + str(self.untriedMoves) + \"]\"\n\n    def TreeToString(self, indent):\n        s = self.IndentString(indent) + str(self)\n        for c in self.childNodes:\n             s += c.TreeToString(indent+1)\n        return s\n\n    def IndentString(self,indent):\n        s = \"\\n\"\n        for i in range (1,indent+1):\n            s += \"| \"\n        return s\n\n    def ChildrenToString(self):\n        s = \"\"\n        for c in self.childNodes:\n             s += str(c) + \"\\n\"\n        return s\n\n#mcts算法模拟部分\ndef UCT(rootstate, itermax, verbose = False):\n    \"\"\" Conduct a UCT search for itermax iterations starting from rootstate.\n        Return the best move from the rootstate.\n        Assumes 2 alternating players (player 1 starts), with game results in the range [0.0, 1.0].\"\"\"\n\n    rootnode = Node(state = rootstate)\n\n    for i in range(itermax):\n        node = rootnode\n        state = rootstate.Clone()\n\n        # Select\n        while node.untriedMoves == [] and node.childNodes != []: # node is fully expanded and non-terminal\n            node = node.UCTSelectChild()\n            state.DoMove(node.move)\n\n        # Expand\n        if node.untriedMoves != []: # if we can expand (i.e. state/node is non-terminal)\n            m = random.choice(node.untriedMoves) \n            state.DoMove(m)\n            node = node.AddChild(m,state) # add child and descend tree\n\n        # Rollout - this can often be made orders of magnitude quicker using a state.GetRandomMove() function\n        while state.GetMoves() != []: # while state is non-terminal\n            state.DoMove(random.choice(state.GetMoves()))\n\n        # Backpropagate\n        while node != None: # backpropagate from the expanded node and work back to the root node\n            node.Update(state.GetResult(node.playerJustMoved)) # state is terminal. Update node with result from POV of node.playerJustMoved\n            node = node.parentNode\n\n    # Output some information about the tree - can be omitted\n    #if (verbose): print rootnode.TreeToString(0)\n    #else: print rootnode.ChildrenToString()\n    #print(rootnode.childNodes)\n    return sorted(rootnode.childNodes, key = lambda c: c.visits)[-1].move # return the move that was most visited\n#主函数                \ndef UCTPlayGame():\n    itermax=5000#每一步迭代的次数，越多越准确,但这边只有单分支，应该会有一个上限\n    length=8#棋盘长宽\n    res=[\"_\"]*length*length\n    state = Chess(length)\n    save_state=\"\"\n    while (not state.checkout() and state.GetMoves()!=[]):\n        if state.playerJustMoved == 1:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #2\n            print(\"电脑2下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            res[m]=\"X\"\n        else:\n            m = UCT(rootstate = state, itermax = itermax, verbose = False) #1\n            print(\"电脑1下子(\"+str(m-int(m/length)*length)+\" \"+str(int(m/length))+\")\")\n            #如果想自己和电脑下就注释掉上面两行，再去掉下面两个注释。\n            #my=input(\"您下子(格式如:3 4)\\n\").split(\" \")\n            #m=int(my[0])+int(my[1])*length\n            res[m]=\"O\"\n        print(\"Best Move: \" + str(m) + \"\\n\")\n        for i in range(length):\n            print(\" \".join(res[length*i:length*(i+1)]))\n        state.DoMove(m)\n    if state.GetResult(state.playerJustMoved) == 1.0:\n        print(\"Player \" + str(state.playerJustMoved) + \" wins!\")\n    elif state.GetResult(state.playerJustMoved) == 0.0:\n        print(\"Player \" + str(3 - state.playerJustMoved) + \" wins!\")\n    else: print(\"Nobody wins!\")\n\nif __name__ == \"__main__\":\n    \"\"\" Play a single game to the end using UCT for both players. \n    \"\"\"\n    UCTPlayGame()</pre>\n<p>实验结果：</p>\n<p>以8*8棋盘为例，在每步迭代几千次之后，电脑就基本可以学会档这个技能，但电脑要赢这边还是有点困难，没有多步的规划。</p>\n<p>有时候也会莫名下到棋盘边上的点，想想棋盘边上的点赢的概率应该低吧。这个可能步数不够或者模拟有问题。实验如下图：</p>\n<img class=\"alignnone size-full wp-image-518\" src=\"/img/uploads/2018/01/微信图片_20180126111340.png\" alt=\"\" width=\"132\" height=\"174\" />\n<p>灵感来源：<a href=\"https://zhuanlan.zhihu.com/p/32089487\">知乎某讲篇AlphaZero的文章<br>\n</a></p>\n<p>算法代码借鉴：<a href=\"http://mcts.ai\">mcts.ai</a></p>"},{"title":"用python完成文本转音频(tts)","catalog":true,"date":"2018-02-07T11:52:28.000Z","_content":"\n用 python完成tts的话一般会用pyttsx库，但一般pip下载的话会有各种报错。所以这里找了实际试了可用的github上几个改编的库。<!--more-->\n\n对于python3.x版本，选择 <a href=\"https://github.com/jpercent/pyttsx\">https://github.com/jpercent/pyttsx</a> ，来完成tts，但python3版本的目前还没发现有保存为音频文件的，只能直接发出声音。代码如下：\n<pre>import pyttsx\nengine = pyttsx.init()\nengine.say(\"你好\")\nengine.runAndWait()</pre>\n对于python2.7版本，可以选择<a href=\"https://github.com/hick/pyttsx\">https://github.com/hick/pyttsx</a>来完成tts，他可以让文本转为声音并且可以下载保存为wav文件。\n\n完成tts还需要pywin32，可以到这里下载对应版本，<a href=\"https://github.com/mhammond/pywin32/releases\">https://github.com/mhammond/pywin32/releases</a>，试过目前没错。\n\n这里使用的环境是在windows8，python2.7版本。如果要读中文的话可以在 控制面板--轻松使用--语音识别--文本到语音转换，看看有没有中文语音库。\n\n当然还需要准备一个文本文件，在windows，首先把文本转为utf-8格式，具体做法是用记事本打开txt文件，文件--另存为--在编码里选utf-8，保存；\n\n前戏完成，然后运行下面代码：\n<pre>#coding:utf-8\nimport pyttsx\n\n#读取txt文件(txt必须为utf-8编码)\ns=open(\"filename.txt\").read()\n\n#解码为unicode\nc=s.decode(\"utf-8\")\n\n#初始化tts\nengine = pyttsx.init()\n\n#直接发出声音\n#engine.say(u\"你好\")\n\n#保存为文件\nengine.rec(c,\"filename.wav\")</pre>\n","source":"_posts/2018/article_5_用python完成文本转音频(tts).md","raw":"\n---\ntitle: 用python完成文本转音频(tts)\ncatalog: true\ndate: 2018-2-7 19:52:28\n---\n\n用 python完成tts的话一般会用pyttsx库，但一般pip下载的话会有各种报错。所以这里找了实际试了可用的github上几个改编的库。<!--more-->\n\n对于python3.x版本，选择 <a href=\"https://github.com/jpercent/pyttsx\">https://github.com/jpercent/pyttsx</a> ，来完成tts，但python3版本的目前还没发现有保存为音频文件的，只能直接发出声音。代码如下：\n<pre>import pyttsx\nengine = pyttsx.init()\nengine.say(\"你好\")\nengine.runAndWait()</pre>\n对于python2.7版本，可以选择<a href=\"https://github.com/hick/pyttsx\">https://github.com/hick/pyttsx</a>来完成tts，他可以让文本转为声音并且可以下载保存为wav文件。\n\n完成tts还需要pywin32，可以到这里下载对应版本，<a href=\"https://github.com/mhammond/pywin32/releases\">https://github.com/mhammond/pywin32/releases</a>，试过目前没错。\n\n这里使用的环境是在windows8，python2.7版本。如果要读中文的话可以在 控制面板--轻松使用--语音识别--文本到语音转换，看看有没有中文语音库。\n\n当然还需要准备一个文本文件，在windows，首先把文本转为utf-8格式，具体做法是用记事本打开txt文件，文件--另存为--在编码里选utf-8，保存；\n\n前戏完成，然后运行下面代码：\n<pre>#coding:utf-8\nimport pyttsx\n\n#读取txt文件(txt必须为utf-8编码)\ns=open(\"filename.txt\").read()\n\n#解码为unicode\nc=s.decode(\"utf-8\")\n\n#初始化tts\nengine = pyttsx.init()\n\n#直接发出声音\n#engine.say(u\"你好\")\n\n#保存为文件\nengine.rec(c,\"filename.wav\")</pre>\n","slug":"2018/article_5_用python完成文本转音频(tts)","published":1,"updated":"2021-01-27T04:46:28.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74n002d0770f7xe0s2r","content":"<p>用 python完成tts的话一般会用pyttsx库，但一般pip下载的话会有各种报错。所以这里找了实际试了可用的github上几个改编的库。<a id=\"more\"></a></p>\n<p>对于python3.x版本，选择 <a href=\"https://github.com/jpercent/pyttsx\" target=\"_blank\" rel=\"external\">https://github.com/jpercent/pyttsx</a> ，来完成tts，但python3版本的目前还没发现有保存为音频文件的，只能直接发出声音。代码如下：</p>\n<pre>import pyttsx\nengine = pyttsx.init()\nengine.say(\"你好\")\nengine.runAndWait()</pre>\n<p>对于python2.7版本，可以选择<a href=\"https://github.com/hick/pyttsx\" target=\"_blank\" rel=\"external\">https://github.com/hick/pyttsx</a>来完成tts，他可以让文本转为声音并且可以下载保存为wav文件。</p>\n<p>完成tts还需要pywin32，可以到这里下载对应版本，<a href=\"https://github.com/mhammond/pywin32/releases\" target=\"_blank\" rel=\"external\">https://github.com/mhammond/pywin32/releases</a>，试过目前没错。</p>\n<p>这里使用的环境是在windows8，python2.7版本。如果要读中文的话可以在 控制面板–轻松使用–语音识别–文本到语音转换，看看有没有中文语音库。</p>\n<p>当然还需要准备一个文本文件，在windows，首先把文本转为utf-8格式，具体做法是用记事本打开txt文件，文件–另存为–在编码里选utf-8，保存；</p>\n<p>前戏完成，然后运行下面代码：</p>\n<pre>#coding:utf-8\nimport pyttsx\n\n#读取txt文件(txt必须为utf-8编码)\ns=open(\"filename.txt\").read()\n\n#解码为unicode\nc=s.decode(\"utf-8\")\n\n#初始化tts\nengine = pyttsx.init()\n\n#直接发出声音\n#engine.say(u\"你好\")\n\n#保存为文件\nengine.rec(c,\"filename.wav\")</pre>\n","excerpt":"<p>用 python完成tts的话一般会用pyttsx库，但一般pip下载的话会有各种报错。所以这里找了实际试了可用的github上几个改编的库。","more":"</p>\n<p>对于python3.x版本，选择 <a href=\"https://github.com/jpercent/pyttsx\">https://github.com/jpercent/pyttsx</a> ，来完成tts，但python3版本的目前还没发现有保存为音频文件的，只能直接发出声音。代码如下：</p>\n<pre>import pyttsx\nengine = pyttsx.init()\nengine.say(\"你好\")\nengine.runAndWait()</pre>\n<p>对于python2.7版本，可以选择<a href=\"https://github.com/hick/pyttsx\">https://github.com/hick/pyttsx</a>来完成tts，他可以让文本转为声音并且可以下载保存为wav文件。</p>\n<p>完成tts还需要pywin32，可以到这里下载对应版本，<a href=\"https://github.com/mhammond/pywin32/releases\">https://github.com/mhammond/pywin32/releases</a>，试过目前没错。</p>\n<p>这里使用的环境是在windows8，python2.7版本。如果要读中文的话可以在 控制面板–轻松使用–语音识别–文本到语音转换，看看有没有中文语音库。</p>\n<p>当然还需要准备一个文本文件，在windows，首先把文本转为utf-8格式，具体做法是用记事本打开txt文件，文件–另存为–在编码里选utf-8，保存；</p>\n<p>前戏完成，然后运行下面代码：</p>\n<pre>#coding:utf-8\nimport pyttsx\n\n#读取txt文件(txt必须为utf-8编码)\ns=open(\"filename.txt\").read()\n\n#解码为unicode\nc=s.decode(\"utf-8\")\n\n#初始化tts\nengine = pyttsx.init()\n\n#直接发出声音\n#engine.say(u\"你好\")\n\n#保存为文件\nengine.rec(c,\"filename.wav\")</pre>"},{"title":"宽客初探---策略之旅","catalog":true,"date":"2018-01-31T10:46:21.000Z","_content":"\n既然已经接触了股票类金融，便也尝试一下宽客的滋味，至少python编程还是在的，在聚宽创了个号，了解基本的几个股票概念，便开始实践。<!--more-->\n\n看了很多知乎，雪球大v的文章，了解到<strong>量化</strong>大多也是条充满荆棘的道路，然而这种路走多了好像也习惯了，（绝望多了也享受绝望的感觉了）&lt;-这种feeling很奇妙。不试试咋么知道呢，反正还没到头脑发热的程度，大不了重头再来呗。\n\n家里人谈股色变，但好像我没咋受影响，自己的路自己走，也没有太多包袱。\n\n可能我注定不会是一个专精的程序员，从web前端到后台，再到机器学习神经网络；从js到php，再到python，然后到现在写写量化策略。是种历练吧。\n\n开始说第一个策略把，策略叫聪明钱，注解还是在代码里展示：\n<pre># 导入函数库\nimport jqdata\nimport numpy as np\nimport random\nimport datetime\n\n# 初始化函数，设定基准等等\ndef initialize(context):\n    # 设定沪深300作为基准\n    set_benchmark('000300.XSHG')\n    # 开启动态复权模式(真实价格)\n    set_option('use_real_price', True)\n    # 输出内容到日志 log.info()\n    # 过滤掉order系列API产生的比error级别低的log\n    log.set_level('order', 'error')\n    ### 股票相关设定 ###\n    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱\n    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')\n    #运行，这里按天回测\n    run_daily(trade, \"every_bar\")\n\n#下面三个是过滤器，过滤停牌，摘牌，st的股票\ndef paused_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for  stock in security_list if not current_data[stock].paused]\n    return security_list\n    \ndef delisted_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not '退' in current_data[stock].name]\n    return security_list\n\ndef st_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not current_data[stock].is_st]\n    return security_list\n\n#主要交易\ndef trade(context):\n    #选择股票，并用一些财务数据简单过滤，挑中100个\n    stock_to_choose=get_fundamentals(query(\n        valuation.code,valuation.pe_ratio,\n        valuation.pb_ratio,valuation.market_cap,\n        indicator.eps,indicator.inc_net_profit_annual\n    ).filter(\n        valuation.pe_ratio&lt;400,\n        valuation.pe_ratio&gt;0,\n        indicator.eps&gt;0.1,\n        indicator.inc_net_profit_annual&gt;0.2,\n        indicator.roe&gt;2\n    ).order_by(\n        valuation.pb_ratio.asc()\n    ).limit(\n        100\n    ), date=None)\n    #过滤股票\n    stockpool=list(stock_to_choose['code'])\n    stockpool=paused_filter(stockpool)\n    stockpool=delisted_filter(stockpool)\n    stockpool=st_filter(stockpool)\n    #选择在每周周五交易\n    if context.current_dt.weekday()==4:\n        \n        all_q={\"stock\":[],\"q\":[]}\n        #遍历股票池\n        for stock in stockpool:\n            #按分钟获取20天的历史数据---收盘价，成交量，成交额\n            df=attribute_history(stock,240*20,'1m',['close','volume','money'])\n            #计算单笔的平均价格\n            vwap_all = df['money'].sum()/df['volume'].sum()\n            #计算涨跌幅，定义聪明因子s=涨跌幅除以根号成交量\n            data_return=df['close'].pct_change()\n            df[\"smart\"]=np.abs(data_return)/np.sqrt(df['volume'])\n            #过滤\n            df = df[(df['smart']&gt;0) &amp; (df['smart']&lt;np.inf)]\n            #按聪明因子s排序\n            df=df.sort(\"smart\",ascending=False)\n            #计算成交量累积和\n            df[\"accumvol\"]=df['volume'].cumsum()\n            if len(df[\"accumvol\"].values)==0:\n                continue\n            #获取总和的前百分之20\n            high_acc=df[\"accumvol\"].values[-1]*0.2\n            tmp = df[df['accumvol'] &lt;= high_acc]\n            \n            if tmp['volume'].sum()==0:\n                continue\n            #截取的单笔的均价\n            vwap_smart = tmp['money'].sum()/tmp['volume'].sum()\n            #均价相比较\n            all_q['stock'].append(stock)\n            all_q['q'].append(vwap_smart/vwap_all)\n        #获取前百分之2\n        tmp_q=pd.DataFrame(all_q)\n        q_min=tmp_q[\"q\"].quantile(0)\n        q_max=tmp_q[\"q\"].quantile(0.02)\n        my_q=tmp_q[tmp_q[\"q\"]&gt;=q_min][tmp_q[\"q\"]&lt;q_max]\n        my_stk=my_q['stock'].values\n        #获取持仓的股票代码\n        slist=list(context.portfolio.positions.keys())\n        #不符合的卖出\n        for stk in slist:\n            if stk not in my_stk:\n                order_target_value(stk, 0)\n        #符合的买进\n        buy_list=[]\n        for stock in my_stk:\n            if stock not in slist:\n                buy_list.append(stock)\n        if len(buy_list)==0:\n            Cash=context.portfolio.available_cash\n        else:\n            Cash=context.portfolio.available_cash/len(buy_list)\n            for  stock in buy_list:\n                order_target_value(stock,Cash)</pre>\n回测结果：\n\n<a href=\"/img/uploads/2018/01/微信图片_20180131184240.png\"><img class=\"alignnone wp-image-528 size-full\" src=\"/img/uploads/2018/01/微信图片_20180131184240.png\" alt=\"\" width=\"1019\" height=\"401\" /></a>\n\n这个策略在16年的时候还是可以的，但在17年回测的时候就不太行了。也了解了策略必须要经常更替，一个策略不可能长时间保持高收益。\n\n策略来源：<a href=\"https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7\">https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7</a>\n","source":"_posts/2018/article_4_宽客初探---策略之旅.md","raw":"\n---\ntitle: 宽客初探---策略之旅\ncatalog: true\ndate: 2018-1-31 18:46:21\n---\n\n既然已经接触了股票类金融，便也尝试一下宽客的滋味，至少python编程还是在的，在聚宽创了个号，了解基本的几个股票概念，便开始实践。<!--more-->\n\n看了很多知乎，雪球大v的文章，了解到<strong>量化</strong>大多也是条充满荆棘的道路，然而这种路走多了好像也习惯了，（绝望多了也享受绝望的感觉了）&lt;-这种feeling很奇妙。不试试咋么知道呢，反正还没到头脑发热的程度，大不了重头再来呗。\n\n家里人谈股色变，但好像我没咋受影响，自己的路自己走，也没有太多包袱。\n\n可能我注定不会是一个专精的程序员，从web前端到后台，再到机器学习神经网络；从js到php，再到python，然后到现在写写量化策略。是种历练吧。\n\n开始说第一个策略把，策略叫聪明钱，注解还是在代码里展示：\n<pre># 导入函数库\nimport jqdata\nimport numpy as np\nimport random\nimport datetime\n\n# 初始化函数，设定基准等等\ndef initialize(context):\n    # 设定沪深300作为基准\n    set_benchmark('000300.XSHG')\n    # 开启动态复权模式(真实价格)\n    set_option('use_real_price', True)\n    # 输出内容到日志 log.info()\n    # 过滤掉order系列API产生的比error级别低的log\n    log.set_level('order', 'error')\n    ### 股票相关设定 ###\n    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱\n    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')\n    #运行，这里按天回测\n    run_daily(trade, \"every_bar\")\n\n#下面三个是过滤器，过滤停牌，摘牌，st的股票\ndef paused_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for  stock in security_list if not current_data[stock].paused]\n    return security_list\n    \ndef delisted_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not '退' in current_data[stock].name]\n    return security_list\n\ndef st_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not current_data[stock].is_st]\n    return security_list\n\n#主要交易\ndef trade(context):\n    #选择股票，并用一些财务数据简单过滤，挑中100个\n    stock_to_choose=get_fundamentals(query(\n        valuation.code,valuation.pe_ratio,\n        valuation.pb_ratio,valuation.market_cap,\n        indicator.eps,indicator.inc_net_profit_annual\n    ).filter(\n        valuation.pe_ratio&lt;400,\n        valuation.pe_ratio&gt;0,\n        indicator.eps&gt;0.1,\n        indicator.inc_net_profit_annual&gt;0.2,\n        indicator.roe&gt;2\n    ).order_by(\n        valuation.pb_ratio.asc()\n    ).limit(\n        100\n    ), date=None)\n    #过滤股票\n    stockpool=list(stock_to_choose['code'])\n    stockpool=paused_filter(stockpool)\n    stockpool=delisted_filter(stockpool)\n    stockpool=st_filter(stockpool)\n    #选择在每周周五交易\n    if context.current_dt.weekday()==4:\n        \n        all_q={\"stock\":[],\"q\":[]}\n        #遍历股票池\n        for stock in stockpool:\n            #按分钟获取20天的历史数据---收盘价，成交量，成交额\n            df=attribute_history(stock,240*20,'1m',['close','volume','money'])\n            #计算单笔的平均价格\n            vwap_all = df['money'].sum()/df['volume'].sum()\n            #计算涨跌幅，定义聪明因子s=涨跌幅除以根号成交量\n            data_return=df['close'].pct_change()\n            df[\"smart\"]=np.abs(data_return)/np.sqrt(df['volume'])\n            #过滤\n            df = df[(df['smart']&gt;0) &amp; (df['smart']&lt;np.inf)]\n            #按聪明因子s排序\n            df=df.sort(\"smart\",ascending=False)\n            #计算成交量累积和\n            df[\"accumvol\"]=df['volume'].cumsum()\n            if len(df[\"accumvol\"].values)==0:\n                continue\n            #获取总和的前百分之20\n            high_acc=df[\"accumvol\"].values[-1]*0.2\n            tmp = df[df['accumvol'] &lt;= high_acc]\n            \n            if tmp['volume'].sum()==0:\n                continue\n            #截取的单笔的均价\n            vwap_smart = tmp['money'].sum()/tmp['volume'].sum()\n            #均价相比较\n            all_q['stock'].append(stock)\n            all_q['q'].append(vwap_smart/vwap_all)\n        #获取前百分之2\n        tmp_q=pd.DataFrame(all_q)\n        q_min=tmp_q[\"q\"].quantile(0)\n        q_max=tmp_q[\"q\"].quantile(0.02)\n        my_q=tmp_q[tmp_q[\"q\"]&gt;=q_min][tmp_q[\"q\"]&lt;q_max]\n        my_stk=my_q['stock'].values\n        #获取持仓的股票代码\n        slist=list(context.portfolio.positions.keys())\n        #不符合的卖出\n        for stk in slist:\n            if stk not in my_stk:\n                order_target_value(stk, 0)\n        #符合的买进\n        buy_list=[]\n        for stock in my_stk:\n            if stock not in slist:\n                buy_list.append(stock)\n        if len(buy_list)==0:\n            Cash=context.portfolio.available_cash\n        else:\n            Cash=context.portfolio.available_cash/len(buy_list)\n            for  stock in buy_list:\n                order_target_value(stock,Cash)</pre>\n回测结果：\n\n<a href=\"/img/uploads/2018/01/微信图片_20180131184240.png\"><img class=\"alignnone wp-image-528 size-full\" src=\"/img/uploads/2018/01/微信图片_20180131184240.png\" alt=\"\" width=\"1019\" height=\"401\" /></a>\n\n这个策略在16年的时候还是可以的，但在17年回测的时候就不太行了。也了解了策略必须要经常更替，一个策略不可能长时间保持高收益。\n\n策略来源：<a href=\"https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7\">https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7</a>\n","slug":"2018/article_4_宽客初探---策略之旅","published":1,"updated":"2021-01-27T04:46:28.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74q002e0770z6ne2vaa","content":"<p>既然已经接触了股票类金融，便也尝试一下宽客的滋味，至少python编程还是在的，在聚宽创了个号，了解基本的几个股票概念，便开始实践。<a id=\"more\"></a></p>\n<p>看了很多知乎，雪球大v的文章，了解到<strong>量化</strong>大多也是条充满荆棘的道路，然而这种路走多了好像也习惯了，（绝望多了也享受绝望的感觉了）&lt;-这种feeling很奇妙。不试试咋么知道呢，反正还没到头脑发热的程度，大不了重头再来呗。</p>\n<p>家里人谈股色变，但好像我没咋受影响，自己的路自己走，也没有太多包袱。</p>\n<p>可能我注定不会是一个专精的程序员，从web前端到后台，再到机器学习神经网络；从js到php，再到python，然后到现在写写量化策略。是种历练吧。</p>\n<p>开始说第一个策略把，策略叫聪明钱，注解还是在代码里展示：</p>\n<pre># 导入函数库\nimport jqdata\nimport numpy as np\nimport random\nimport datetime\n\n# 初始化函数，设定基准等等\ndef initialize(context):\n    # 设定沪深300作为基准\n    set_benchmark('000300.XSHG')\n    # 开启动态复权模式(真实价格)\n    set_option('use_real_price', True)\n    # 输出内容到日志 log.info()\n    # 过滤掉order系列API产生的比error级别低的log\n    log.set_level('order', 'error')\n    ### 股票相关设定 ###\n    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱\n    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')\n    #运行，这里按天回测\n    run_daily(trade, \"every_bar\")\n\n#下面三个是过滤器，过滤停牌，摘牌，st的股票\ndef paused_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for  stock in security_list if not current_data[stock].paused]\n    return security_list\n    \ndef delisted_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not '退' in current_data[stock].name]\n    return security_list\n\ndef st_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not current_data[stock].is_st]\n    return security_list\n\n#主要交易\ndef trade(context):\n    #选择股票，并用一些财务数据简单过滤，挑中100个\n    stock_to_choose=get_fundamentals(query(\n        valuation.code,valuation.pe_ratio,\n        valuation.pb_ratio,valuation.market_cap,\n        indicator.eps,indicator.inc_net_profit_annual\n    ).filter(\n        valuation.pe_ratio&lt;400,\n        valuation.pe_ratio&gt;0,\n        indicator.eps&gt;0.1,\n        indicator.inc_net_profit_annual&gt;0.2,\n        indicator.roe&gt;2\n    ).order_by(\n        valuation.pb_ratio.asc()\n    ).limit(\n        100\n    ), date=None)\n    #过滤股票\n    stockpool=list(stock_to_choose['code'])\n    stockpool=paused_filter(stockpool)\n    stockpool=delisted_filter(stockpool)\n    stockpool=st_filter(stockpool)\n    #选择在每周周五交易\n    if context.current_dt.weekday()==4:\n        \n        all_q={\"stock\":[],\"q\":[]}\n        #遍历股票池\n        for stock in stockpool:\n            #按分钟获取20天的历史数据---收盘价，成交量，成交额\n            df=attribute_history(stock,240*20,'1m',['close','volume','money'])\n            #计算单笔的平均价格\n            vwap_all = df['money'].sum()/df['volume'].sum()\n            #计算涨跌幅，定义聪明因子s=涨跌幅除以根号成交量\n            data_return=df['close'].pct_change()\n            df[\"smart\"]=np.abs(data_return)/np.sqrt(df['volume'])\n            #过滤\n            df = df[(df['smart']&gt;0) &amp; (df['smart']&lt;np.inf)]\n            #按聪明因子s排序\n            df=df.sort(\"smart\",ascending=False)\n            #计算成交量累积和\n            df[\"accumvol\"]=df['volume'].cumsum()\n            if len(df[\"accumvol\"].values)==0:\n                continue\n            #获取总和的前百分之20\n            high_acc=df[\"accumvol\"].values[-1]*0.2\n            tmp = df[df['accumvol'] &lt;= high_acc]\n            \n            if tmp['volume'].sum()==0:\n                continue\n            #截取的单笔的均价\n            vwap_smart = tmp['money'].sum()/tmp['volume'].sum()\n            #均价相比较\n            all_q['stock'].append(stock)\n            all_q['q'].append(vwap_smart/vwap_all)\n        #获取前百分之2\n        tmp_q=pd.DataFrame(all_q)\n        q_min=tmp_q[\"q\"].quantile(0)\n        q_max=tmp_q[\"q\"].quantile(0.02)\n        my_q=tmp_q[tmp_q[\"q\"]&gt;=q_min][tmp_q[\"q\"]&lt;q_max]\n        my_stk=my_q['stock'].values\n        #获取持仓的股票代码\n        slist=list(context.portfolio.positions.keys())\n        #不符合的卖出\n        for stk in slist:\n            if stk not in my_stk:\n                order_target_value(stk, 0)\n        #符合的买进\n        buy_list=[]\n        for stock in my_stk:\n            if stock not in slist:\n                buy_list.append(stock)\n        if len(buy_list)==0:\n            Cash=context.portfolio.available_cash\n        else:\n            Cash=context.portfolio.available_cash/len(buy_list)\n            for  stock in buy_list:\n                order_target_value(stock,Cash)</pre>\n<p>回测结果：</p>\n<p><a href=\"/img/uploads/2018/01/微信图片_20180131184240.png\"><img class=\"alignnone wp-image-528 size-full\" src=\"/img/uploads/2018/01/微信图片_20180131184240.png\" alt=\"\" width=\"1019\" height=\"401\"></a></p>\n<p>这个策略在16年的时候还是可以的，但在17年回测的时候就不太行了。也了解了策略必须要经常更替，一个策略不可能长时间保持高收益。</p>\n<p>策略来源：<a href=\"https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7\" target=\"_blank\" rel=\"external\">https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7</a></p>\n","excerpt":"<p>既然已经接触了股票类金融，便也尝试一下宽客的滋味，至少python编程还是在的，在聚宽创了个号，了解基本的几个股票概念，便开始实践。","more":"</p>\n<p>看了很多知乎，雪球大v的文章，了解到<strong>量化</strong>大多也是条充满荆棘的道路，然而这种路走多了好像也习惯了，（绝望多了也享受绝望的感觉了）&lt;-这种feeling很奇妙。不试试咋么知道呢，反正还没到头脑发热的程度，大不了重头再来呗。</p>\n<p>家里人谈股色变，但好像我没咋受影响，自己的路自己走，也没有太多包袱。</p>\n<p>可能我注定不会是一个专精的程序员，从web前端到后台，再到机器学习神经网络；从js到php，再到python，然后到现在写写量化策略。是种历练吧。</p>\n<p>开始说第一个策略把，策略叫聪明钱，注解还是在代码里展示：</p>\n<pre># 导入函数库\nimport jqdata\nimport numpy as np\nimport random\nimport datetime\n\n# 初始化函数，设定基准等等\ndef initialize(context):\n    # 设定沪深300作为基准\n    set_benchmark('000300.XSHG')\n    # 开启动态复权模式(真实价格)\n    set_option('use_real_price', True)\n    # 输出内容到日志 log.info()\n    # 过滤掉order系列API产生的比error级别低的log\n    log.set_level('order', 'error')\n    ### 股票相关设定 ###\n    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱\n    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')\n    #运行，这里按天回测\n    run_daily(trade, \"every_bar\")\n\n#下面三个是过滤器，过滤停牌，摘牌，st的股票\ndef paused_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for  stock in security_list if not current_data[stock].paused]\n    return security_list\n    \ndef delisted_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not '退' in current_data[stock].name]\n    return security_list\n\ndef st_filter(security_list):\n    current_data=get_current_data()\n    security_list=[stock for stock in security_list if not current_data[stock].is_st]\n    return security_list\n\n#主要交易\ndef trade(context):\n    #选择股票，并用一些财务数据简单过滤，挑中100个\n    stock_to_choose=get_fundamentals(query(\n        valuation.code,valuation.pe_ratio,\n        valuation.pb_ratio,valuation.market_cap,\n        indicator.eps,indicator.inc_net_profit_annual\n    ).filter(\n        valuation.pe_ratio&lt;400,\n        valuation.pe_ratio&gt;0,\n        indicator.eps&gt;0.1,\n        indicator.inc_net_profit_annual&gt;0.2,\n        indicator.roe&gt;2\n    ).order_by(\n        valuation.pb_ratio.asc()\n    ).limit(\n        100\n    ), date=None)\n    #过滤股票\n    stockpool=list(stock_to_choose['code'])\n    stockpool=paused_filter(stockpool)\n    stockpool=delisted_filter(stockpool)\n    stockpool=st_filter(stockpool)\n    #选择在每周周五交易\n    if context.current_dt.weekday()==4:\n        \n        all_q={\"stock\":[],\"q\":[]}\n        #遍历股票池\n        for stock in stockpool:\n            #按分钟获取20天的历史数据---收盘价，成交量，成交额\n            df=attribute_history(stock,240*20,'1m',['close','volume','money'])\n            #计算单笔的平均价格\n            vwap_all = df['money'].sum()/df['volume'].sum()\n            #计算涨跌幅，定义聪明因子s=涨跌幅除以根号成交量\n            data_return=df['close'].pct_change()\n            df[\"smart\"]=np.abs(data_return)/np.sqrt(df['volume'])\n            #过滤\n            df = df[(df['smart']&gt;0) &amp; (df['smart']&lt;np.inf)]\n            #按聪明因子s排序\n            df=df.sort(\"smart\",ascending=False)\n            #计算成交量累积和\n            df[\"accumvol\"]=df['volume'].cumsum()\n            if len(df[\"accumvol\"].values)==0:\n                continue\n            #获取总和的前百分之20\n            high_acc=df[\"accumvol\"].values[-1]*0.2\n            tmp = df[df['accumvol'] &lt;= high_acc]\n            \n            if tmp['volume'].sum()==0:\n                continue\n            #截取的单笔的均价\n            vwap_smart = tmp['money'].sum()/tmp['volume'].sum()\n            #均价相比较\n            all_q['stock'].append(stock)\n            all_q['q'].append(vwap_smart/vwap_all)\n        #获取前百分之2\n        tmp_q=pd.DataFrame(all_q)\n        q_min=tmp_q[\"q\"].quantile(0)\n        q_max=tmp_q[\"q\"].quantile(0.02)\n        my_q=tmp_q[tmp_q[\"q\"]&gt;=q_min][tmp_q[\"q\"]&lt;q_max]\n        my_stk=my_q['stock'].values\n        #获取持仓的股票代码\n        slist=list(context.portfolio.positions.keys())\n        #不符合的卖出\n        for stk in slist:\n            if stk not in my_stk:\n                order_target_value(stk, 0)\n        #符合的买进\n        buy_list=[]\n        for stock in my_stk:\n            if stock not in slist:\n                buy_list.append(stock)\n        if len(buy_list)==0:\n            Cash=context.portfolio.available_cash\n        else:\n            Cash=context.portfolio.available_cash/len(buy_list)\n            for  stock in buy_list:\n                order_target_value(stock,Cash)</pre>\n<p>回测结果：</p>\n<p><a href=\"/img/uploads/2018/01/微信图片_20180131184240.png\"><img class=\"alignnone wp-image-528 size-full\" src=\"/img/uploads/2018/01/微信图片_20180131184240.png\" alt=\"\" width=\"1019\" height=\"401\" /></a></p>\n<p>这个策略在16年的时候还是可以的，但在17年回测的时候就不太行了。也了解了策略必须要经常更替，一个策略不可能长时间保持高收益。</p>\n<p>策略来源：<a href=\"https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7\">https://uqer.io/community/share/578f04e0228e5b3b9b5f1ab7</a></p>"},{"title":"Python一个人机聊天的应用","catalog":true,"date":"2018-02-13T13:07:02.000Z","_content":"\n在上次tts的基础上，这次来完成一个完整的聊天应用。流程为记录音频--读取音频--语音识别（使用百度api）--文本对话（使用图灵机器人api）--tts。<!--more-->\n\n其余的就直接在代码中解释：\n<pre>#python3.x\n#aip是百度语言识别AI库，可以到百度免费使用\nfrom pyaudio import PyAudio,paInt16\nimport numpy as np\nfrom datetime import datetime\nimport wave\nfrom aip import speech\nimport requests\nimport pyttsx\n\n#封装成类\nclass Chat(object):\n    \"\"\"docstring for Chat\"\"\"\n    def __init__(self):\n        pass      \n    #保存二进制数据成wav文件（这里主要是对直接使用二进制还有问题）\n    def save_wave_file(self,filename, data):\n        wf = wave.open(filename, 'wb')\n        wf.setnchannels(1)\n        wf.setsampwidth(2)\n        wf.setframerate(8000)\n        wf.writeframes(b\"\".join(data))\n        wf.close()\n    #获取用户输入并保存音频，主要借鉴下面网址\n    #<a href=\"http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5\">http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5</a>\n    def get_audio(self):\n        NUM_SAMPLES = 2000\n        SAMPLING_RATE = 8000\n        LEVEL = 1500\n        COUNT_NUM = 20\n        SAVE_LENGTH = 5\n\n        pa = PyAudio()\n        stream = pa.open(format=paInt16, channels=1, rate=SAMPLING_RATE, input=True, frames_per_buffer=NUM_SAMPLES)\n\n        save_count = 0\n        save_buffer = []\n\n        while True:\n            string_audio_data = stream.read(NUM_SAMPLES)\n\n            audio_data = np.fromstring(string_audio_data, dtype=np.short)\n\n            large_sample_count = np.sum(audio_data&gt;LEVEL)\n\n            print(np.max(audio_data))\n\n            if large_sample_count&gt;COUNT_NUM:\n                save_count = SAVE_LENGTH\n            else:\n                save_count -= 1\n\n            if save_count &lt; 0:\n                save_count = 0\n\n            if save_count &gt; 0:\n                save_buffer.append(string_audio_data)\n            else:\n                if len(save_buffer) &gt; 0:\n                    filename = \"tmp.wav\" \n                    self.save_wave_file(filename, save_buffer)\n                    return\n    #用百度api语音识别，这里需要填写的三个参数是在百度AI得到\n    def trans_audio_to_words(self):\n        s = speech.AipSpeech(\"参数1\",\"参数2\",\"参数3\")\n        f = open(\"tmp.wav\",\"rb\")\n        res = s.asr(speech=f.read(),format=\"wav\",rate=8000,options={'lan':'zh'})\n        print(res)\n        if res['err_no']==0:\n            return res['result']\n        else:\n            return \"\"\n    #获取图灵机器人的谈话交互数据，这里要写key，在图灵机器人得到\n    def connect_robot(self,info):\n        data = {\n            \"key\":\"参数key\",\n            \"info\":info,\n            \"usid\":\"123456\",\n        }\n        res = requests.post(\"http://www.tuling123.com/openapi/api\",data=data)\n        res_data = res.json()\n        print(res_data)\n        if res_data['code']==100000:\n            return res_data['text']\n        else:\n            return \"不能识别\"\n    #使用tts读返回文字\n    def tts(self,words):\n        engine = pyttsx.init()\n        engine.say(words)\n        engine.runAndWait()\n\n#类使用方法\nif __name__=='__main__':\n    chat = Chat()\n    while True:\n        chat.get_audio()\n        words = chat.trans_audio_to_words()\n        if words == \"\":\n            print(\"error\")\n        else:\n            rres = chat.connect_robot(words)\n            chat.tts(rres)</pre>\n<p style=\"text-align: left;\">虽然效果不好，反应比较慢，但做完整个流程还是比较惊喜的。</p>\n<p style=\"text-align: left;\">另一个缺点便是语音识别效果不是很好，一个可能得改进音频输入，另一个可能百度api就这点识别率或者并没写对参数。</p>\n<p style=\"text-align: left;\">但不需要触发关键词，直接便可以开始聊天。</p>\n","source":"_posts/2018/article_6_Python一个人机聊天的应用.md","raw":"\n---\ntitle: Python一个人机聊天的应用\ncatalog: true\ndate: 2018-2-13 21:07:02\n---\n\n在上次tts的基础上，这次来完成一个完整的聊天应用。流程为记录音频--读取音频--语音识别（使用百度api）--文本对话（使用图灵机器人api）--tts。<!--more-->\n\n其余的就直接在代码中解释：\n<pre>#python3.x\n#aip是百度语言识别AI库，可以到百度免费使用\nfrom pyaudio import PyAudio,paInt16\nimport numpy as np\nfrom datetime import datetime\nimport wave\nfrom aip import speech\nimport requests\nimport pyttsx\n\n#封装成类\nclass Chat(object):\n    \"\"\"docstring for Chat\"\"\"\n    def __init__(self):\n        pass      \n    #保存二进制数据成wav文件（这里主要是对直接使用二进制还有问题）\n    def save_wave_file(self,filename, data):\n        wf = wave.open(filename, 'wb')\n        wf.setnchannels(1)\n        wf.setsampwidth(2)\n        wf.setframerate(8000)\n        wf.writeframes(b\"\".join(data))\n        wf.close()\n    #获取用户输入并保存音频，主要借鉴下面网址\n    #<a href=\"http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5\">http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5</a>\n    def get_audio(self):\n        NUM_SAMPLES = 2000\n        SAMPLING_RATE = 8000\n        LEVEL = 1500\n        COUNT_NUM = 20\n        SAVE_LENGTH = 5\n\n        pa = PyAudio()\n        stream = pa.open(format=paInt16, channels=1, rate=SAMPLING_RATE, input=True, frames_per_buffer=NUM_SAMPLES)\n\n        save_count = 0\n        save_buffer = []\n\n        while True:\n            string_audio_data = stream.read(NUM_SAMPLES)\n\n            audio_data = np.fromstring(string_audio_data, dtype=np.short)\n\n            large_sample_count = np.sum(audio_data&gt;LEVEL)\n\n            print(np.max(audio_data))\n\n            if large_sample_count&gt;COUNT_NUM:\n                save_count = SAVE_LENGTH\n            else:\n                save_count -= 1\n\n            if save_count &lt; 0:\n                save_count = 0\n\n            if save_count &gt; 0:\n                save_buffer.append(string_audio_data)\n            else:\n                if len(save_buffer) &gt; 0:\n                    filename = \"tmp.wav\" \n                    self.save_wave_file(filename, save_buffer)\n                    return\n    #用百度api语音识别，这里需要填写的三个参数是在百度AI得到\n    def trans_audio_to_words(self):\n        s = speech.AipSpeech(\"参数1\",\"参数2\",\"参数3\")\n        f = open(\"tmp.wav\",\"rb\")\n        res = s.asr(speech=f.read(),format=\"wav\",rate=8000,options={'lan':'zh'})\n        print(res)\n        if res['err_no']==0:\n            return res['result']\n        else:\n            return \"\"\n    #获取图灵机器人的谈话交互数据，这里要写key，在图灵机器人得到\n    def connect_robot(self,info):\n        data = {\n            \"key\":\"参数key\",\n            \"info\":info,\n            \"usid\":\"123456\",\n        }\n        res = requests.post(\"http://www.tuling123.com/openapi/api\",data=data)\n        res_data = res.json()\n        print(res_data)\n        if res_data['code']==100000:\n            return res_data['text']\n        else:\n            return \"不能识别\"\n    #使用tts读返回文字\n    def tts(self,words):\n        engine = pyttsx.init()\n        engine.say(words)\n        engine.runAndWait()\n\n#类使用方法\nif __name__=='__main__':\n    chat = Chat()\n    while True:\n        chat.get_audio()\n        words = chat.trans_audio_to_words()\n        if words == \"\":\n            print(\"error\")\n        else:\n            rres = chat.connect_robot(words)\n            chat.tts(rres)</pre>\n<p style=\"text-align: left;\">虽然效果不好，反应比较慢，但做完整个流程还是比较惊喜的。</p>\n<p style=\"text-align: left;\">另一个缺点便是语音识别效果不是很好，一个可能得改进音频输入，另一个可能百度api就这点识别率或者并没写对参数。</p>\n<p style=\"text-align: left;\">但不需要触发关键词，直接便可以开始聊天。</p>\n","slug":"2018/article_6_Python一个人机聊天的应用","published":1,"updated":"2021-01-27T04:46:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74r002f0770qyzpjvs6","content":"<p>在上次tts的基础上，这次来完成一个完整的聊天应用。流程为记录音频–读取音频–语音识别（使用百度api）–文本对话（使用图灵机器人api）–tts。<a id=\"more\"></a></p>\n<p>其余的就直接在代码中解释：</p>\n<pre>#python3.x\n#aip是百度语言识别AI库，可以到百度免费使用\nfrom pyaudio import PyAudio,paInt16\nimport numpy as np\nfrom datetime import datetime\nimport wave\nfrom aip import speech\nimport requests\nimport pyttsx\n\n#封装成类\nclass Chat(object):\n    \"\"\"docstring for Chat\"\"\"\n    def __init__(self):\n        pass      \n    #保存二进制数据成wav文件（这里主要是对直接使用二进制还有问题）\n    def save_wave_file(self,filename, data):\n        wf = wave.open(filename, 'wb')\n        wf.setnchannels(1)\n        wf.setsampwidth(2)\n        wf.setframerate(8000)\n        wf.writeframes(b\"\".join(data))\n        wf.close()\n    #获取用户输入并保存音频，主要借鉴下面网址\n    #<a href=\"http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5\" target=\"_blank\" rel=\"external\">http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5</a>\n    def get_audio(self):\n        NUM_SAMPLES = 2000\n        SAMPLING_RATE = 8000\n        LEVEL = 1500\n        COUNT_NUM = 20\n        SAVE_LENGTH = 5\n\n        pa = PyAudio()\n        stream = pa.open(format=paInt16, channels=1, rate=SAMPLING_RATE, input=True, frames_per_buffer=NUM_SAMPLES)\n\n        save_count = 0\n        save_buffer = []\n\n        while True:\n            string_audio_data = stream.read(NUM_SAMPLES)\n\n            audio_data = np.fromstring(string_audio_data, dtype=np.short)\n\n            large_sample_count = np.sum(audio_data&gt;LEVEL)\n\n            print(np.max(audio_data))\n\n            if large_sample_count&gt;COUNT_NUM:\n                save_count = SAVE_LENGTH\n            else:\n                save_count -= 1\n\n            if save_count &lt; 0:\n                save_count = 0\n\n            if save_count &gt; 0:\n                save_buffer.append(string_audio_data)\n            else:\n                if len(save_buffer) &gt; 0:\n                    filename = \"tmp.wav\" \n                    self.save_wave_file(filename, save_buffer)\n                    return\n    #用百度api语音识别，这里需要填写的三个参数是在百度AI得到\n    def trans_audio_to_words(self):\n        s = speech.AipSpeech(\"参数1\",\"参数2\",\"参数3\")\n        f = open(\"tmp.wav\",\"rb\")\n        res = s.asr(speech=f.read(),format=\"wav\",rate=8000,options={'lan':'zh'})\n        print(res)\n        if res['err_no']==0:\n            return res['result']\n        else:\n            return \"\"\n    #获取图灵机器人的谈话交互数据，这里要写key，在图灵机器人得到\n    def connect_robot(self,info):\n        data = {\n            \"key\":\"参数key\",\n            \"info\":info,\n            \"usid\":\"123456\",\n        }\n        res = requests.post(\"http://www.tuling123.com/openapi/api\",data=data)\n        res_data = res.json()\n        print(res_data)\n        if res_data['code']==100000:\n            return res_data['text']\n        else:\n            return \"不能识别\"\n    #使用tts读返回文字\n    def tts(self,words):\n        engine = pyttsx.init()\n        engine.say(words)\n        engine.runAndWait()\n\n#类使用方法\nif __name__=='__main__':\n    chat = Chat()\n    while True:\n        chat.get_audio()\n        words = chat.trans_audio_to_words()\n        if words == \"\":\n            print(\"error\")\n        else:\n            rres = chat.connect_robot(words)\n            chat.tts(rres)</pre>\n<p style=\"text-align: left;\">虽然效果不好，反应比较慢，但做完整个流程还是比较惊喜的。</p>\n<p style=\"text-align: left;\">另一个缺点便是语音识别效果不是很好，一个可能得改进音频输入，另一个可能百度api就这点识别率或者并没写对参数。</p>\n<p style=\"text-align: left;\">但不需要触发关键词，直接便可以开始聊天。</p>\n","excerpt":"<p>在上次tts的基础上，这次来完成一个完整的聊天应用。流程为记录音频–读取音频–语音识别（使用百度api）–文本对话（使用图灵机器人api）–tts。","more":"</p>\n<p>其余的就直接在代码中解释：</p>\n<pre>#python3.x\n#aip是百度语言识别AI库，可以到百度免费使用\nfrom pyaudio import PyAudio,paInt16\nimport numpy as np\nfrom datetime import datetime\nimport wave\nfrom aip import speech\nimport requests\nimport pyttsx\n\n#封装成类\nclass Chat(object):\n    \"\"\"docstring for Chat\"\"\"\n    def __init__(self):\n        pass      \n    #保存二进制数据成wav文件（这里主要是对直接使用二进制还有问题）\n    def save_wave_file(self,filename, data):\n        wf = wave.open(filename, 'wb')\n        wf.setnchannels(1)\n        wf.setsampwidth(2)\n        wf.setframerate(8000)\n        wf.writeframes(b\"\".join(data))\n        wf.close()\n    #获取用户输入并保存音频，主要借鉴下面网址\n    #<a href=\"http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5\">http://xbd.xao.ac.cn/sites/scipydoc/wave_pyaudio.html#id5</a>\n    def get_audio(self):\n        NUM_SAMPLES = 2000\n        SAMPLING_RATE = 8000\n        LEVEL = 1500\n        COUNT_NUM = 20\n        SAVE_LENGTH = 5\n\n        pa = PyAudio()\n        stream = pa.open(format=paInt16, channels=1, rate=SAMPLING_RATE, input=True, frames_per_buffer=NUM_SAMPLES)\n\n        save_count = 0\n        save_buffer = []\n\n        while True:\n            string_audio_data = stream.read(NUM_SAMPLES)\n\n            audio_data = np.fromstring(string_audio_data, dtype=np.short)\n\n            large_sample_count = np.sum(audio_data&gt;LEVEL)\n\n            print(np.max(audio_data))\n\n            if large_sample_count&gt;COUNT_NUM:\n                save_count = SAVE_LENGTH\n            else:\n                save_count -= 1\n\n            if save_count &lt; 0:\n                save_count = 0\n\n            if save_count &gt; 0:\n                save_buffer.append(string_audio_data)\n            else:\n                if len(save_buffer) &gt; 0:\n                    filename = \"tmp.wav\" \n                    self.save_wave_file(filename, save_buffer)\n                    return\n    #用百度api语音识别，这里需要填写的三个参数是在百度AI得到\n    def trans_audio_to_words(self):\n        s = speech.AipSpeech(\"参数1\",\"参数2\",\"参数3\")\n        f = open(\"tmp.wav\",\"rb\")\n        res = s.asr(speech=f.read(),format=\"wav\",rate=8000,options={'lan':'zh'})\n        print(res)\n        if res['err_no']==0:\n            return res['result']\n        else:\n            return \"\"\n    #获取图灵机器人的谈话交互数据，这里要写key，在图灵机器人得到\n    def connect_robot(self,info):\n        data = {\n            \"key\":\"参数key\",\n            \"info\":info,\n            \"usid\":\"123456\",\n        }\n        res = requests.post(\"http://www.tuling123.com/openapi/api\",data=data)\n        res_data = res.json()\n        print(res_data)\n        if res_data['code']==100000:\n            return res_data['text']\n        else:\n            return \"不能识别\"\n    #使用tts读返回文字\n    def tts(self,words):\n        engine = pyttsx.init()\n        engine.say(words)\n        engine.runAndWait()\n\n#类使用方法\nif __name__=='__main__':\n    chat = Chat()\n    while True:\n        chat.get_audio()\n        words = chat.trans_audio_to_words()\n        if words == \"\":\n            print(\"error\")\n        else:\n            rres = chat.connect_robot(words)\n            chat.tts(rres)</pre>\n<p style=\"text-align: left;\">虽然效果不好，反应比较慢，但做完整个流程还是比较惊喜的。</p>\n<p style=\"text-align: left;\">另一个缺点便是语音识别效果不是很好，一个可能得改进音频输入，另一个可能百度api就这点识别率或者并没写对参数。</p>\n<p style=\"text-align: left;\">但不需要触发关键词，直接便可以开始聊天。</p>"},{"title":"node+express+mongodb初试","catalog":true,"date":"2018-02-26T10:44:10.000Z","_content":"\n新尝试另一个语言node.js和框架express，记录一些基本的操作与技巧。<!--more-->\n\n此次最大的不同是node.js是异步的，有些操作就不那么直观。\n\n这里在linux centos做测试。前提先安装好node.js和npm。\n\n这里也类似上次flask完成一个登陆与增删改操作的接口。\n\n先用命令行直接生成一个项目\n<pre class=\"language-sh\"><code class=\"language-sh\" translate=\"no\">npm install express-generator -g\nexpress --view=pug myapp\n</code>cd myapp &amp;&amp; npm install npm start<code class=\"language-sh\" translate=\"no\"></code></pre>\napp.js主文件\n<pre>//最后两个为session所需库，还有mongodb库，需自行下载\n//npm install --save express-session,session-file-store,mongodb\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar FileStore = require('session-file-store')(session);\n\n#引入路由文件\nvar RetInfo = require(\"./common/retinfo\");\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar manage = require('./routes/manage');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\n//解析请求body\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n//开启并设置session\napp.use(session({\n    secret: 'chyingp',\n    store: new FileStore(),\n    saveUninitialized: false,\n    resave: false,\n    cookie: {\n        maxAge: 24*60*60*1000\n    }\n}));\n//绑定路由，中间件\napp.use('/', index);\napp.use('/users', users);\n//不设置的则下面的路由都会运行这个函数\napp.use(function(req,res,next) {\n    var sess = req.session;\n    var loginUser = sess.loginUser;\n    if(loginUser===undefined) return res.json(RetInfo.error(\"login out\"));\n    next();\n});\n//绑定另一个中间件，需登录后\napp.use('/manage',manage);\n//错误处理\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;</pre>\n根目录下 新建一个文件夹common/用于存放通用函数，下面写了两种形式。\n\ncommon/retinfo.js 用于接口返回数据\n<pre>module.exports = {\n    response : function(sts,msg) {\n        return {\"sts\":sts,\"msg\":msg}\n    },\n    success : function() {\n        return this.response(1,\"success\")\n    },\n    error : function(msg) {\n        return this.response(-1,msg)\n    },\n    dberr : function(msg) {\n        return this.response(-1,\"db error\");\n    }\n}</pre>\ncommon/mongodb.js 用于数据库操作,这里使用了promise，因为mongodb操作后会有回调函数，不方便调用，写成promise就可以用then进行下去。\n<pre>//use for mongodb database \n\nvar MongoClient = require('mongodb').MongoClient;\n\nfunction Mongodb(dbName, colName){\n\n    this.dbName = dbName;\n    this.colName = colName;\n    this.url = 'mongodb://localhost:27017/';\n\n    this.fetch = function(params){\n        //回调函数里没法获取到外部的this，所以再定义一下that\n        var that = this;\n        return new Promise(function(resolve, reject, notufy) {\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).find(params).toArray(function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.save = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).insertOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.delete = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).deleteOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n\n    this.update = function(whparams,params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).updateOne(whparams, {$set:params}, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = Mongodb;</pre>\n然后编写中间件routes/users.js\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n//登录\nrouter.get('/login', function(req, res, next) {\n    username = req.query.username;\n    password = req.query.password;\n    \n    if(!username || !password) return res.json(RetInfo.error(\"lack of params\"));\n\n    if(username == \"admin\" &amp;&amp; password == \"admin\"){\n        \n        req.session.regenerate(function(err) {\n            if(err) return res.json(RetInfo.error(\"login error\"));\n            req.session.loginUser = username;\n            return res.json(RetInfo.success());\n        });\n\n    }else{\n        return res.json(RetInfo.error(\"username or password error\"));\n    }\n});\n//登出\nrouter.get(\"/loginout\", function(req, res, next) {\n    req.session.destroy(function(err) {\n        if(err) return res.json(RetInfo.error(\"login out error\"));\n        return res.json(RetInfo.success());\n    });\n})\n\nmodule.exports = router;</pre>\nroutes/manage.js  这里写了一般的增删改操作\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n\nvar Mongo = require(\"../common/mongodb\");\nDB_POSTS = new Mongo(\"test_database\",\"posts\");\n//获取数据\nrouter.get(\"/\",function(req, res, next){\n    DB_POSTS.fetch({}).then((data)=&gt;{\n        return res.send(data);\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//增加\n.post(\"/\",function(req, res, next){\n    DB_POSTS.save(req.body).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//删除\n.delete(\"/\",function(req, res, next){\n    data={\"_id\":req.query.id}\n    DB_POSTS.delete(data).then((data)=&gt;{\n        return res.send(data)\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message))\n    });\n})\n//修改\n.put(\"/\",function(req, res, next){\n    const params = req.body;\n    DB_POSTS.update({\"_id\":params.id},params).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    })\n})\n\nmodule.exports = router;</pre>\n运行的话可以有很多方法\n<pre>一般运行\nnpm start\ndebug模式\nDEBUG=myapp:* npm start\n开发修改后自动重启\nnodemon app.js\n后台一直运行\nforever start ./bin/www</pre>\n后言：对于js语法 es6等还比较生疏，并没有涉及，可能有待改进，但总怕麻烦。。。。\n","source":"_posts/2018/article_7_node+express+mongodb初试.md","raw":"\n---\ntitle: node+express+mongodb初试\ncatalog: true\ndate: 2018-2-26 18:44:10\n---\n\n新尝试另一个语言node.js和框架express，记录一些基本的操作与技巧。<!--more-->\n\n此次最大的不同是node.js是异步的，有些操作就不那么直观。\n\n这里在linux centos做测试。前提先安装好node.js和npm。\n\n这里也类似上次flask完成一个登陆与增删改操作的接口。\n\n先用命令行直接生成一个项目\n<pre class=\"language-sh\"><code class=\"language-sh\" translate=\"no\">npm install express-generator -g\nexpress --view=pug myapp\n</code>cd myapp &amp;&amp; npm install npm start<code class=\"language-sh\" translate=\"no\"></code></pre>\napp.js主文件\n<pre>//最后两个为session所需库，还有mongodb库，需自行下载\n//npm install --save express-session,session-file-store,mongodb\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar FileStore = require('session-file-store')(session);\n\n#引入路由文件\nvar RetInfo = require(\"./common/retinfo\");\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar manage = require('./routes/manage');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\n//解析请求body\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n//开启并设置session\napp.use(session({\n    secret: 'chyingp',\n    store: new FileStore(),\n    saveUninitialized: false,\n    resave: false,\n    cookie: {\n        maxAge: 24*60*60*1000\n    }\n}));\n//绑定路由，中间件\napp.use('/', index);\napp.use('/users', users);\n//不设置的则下面的路由都会运行这个函数\napp.use(function(req,res,next) {\n    var sess = req.session;\n    var loginUser = sess.loginUser;\n    if(loginUser===undefined) return res.json(RetInfo.error(\"login out\"));\n    next();\n});\n//绑定另一个中间件，需登录后\napp.use('/manage',manage);\n//错误处理\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;</pre>\n根目录下 新建一个文件夹common/用于存放通用函数，下面写了两种形式。\n\ncommon/retinfo.js 用于接口返回数据\n<pre>module.exports = {\n    response : function(sts,msg) {\n        return {\"sts\":sts,\"msg\":msg}\n    },\n    success : function() {\n        return this.response(1,\"success\")\n    },\n    error : function(msg) {\n        return this.response(-1,msg)\n    },\n    dberr : function(msg) {\n        return this.response(-1,\"db error\");\n    }\n}</pre>\ncommon/mongodb.js 用于数据库操作,这里使用了promise，因为mongodb操作后会有回调函数，不方便调用，写成promise就可以用then进行下去。\n<pre>//use for mongodb database \n\nvar MongoClient = require('mongodb').MongoClient;\n\nfunction Mongodb(dbName, colName){\n\n    this.dbName = dbName;\n    this.colName = colName;\n    this.url = 'mongodb://localhost:27017/';\n\n    this.fetch = function(params){\n        //回调函数里没法获取到外部的this，所以再定义一下that\n        var that = this;\n        return new Promise(function(resolve, reject, notufy) {\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).find(params).toArray(function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.save = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).insertOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.delete = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).deleteOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n\n    this.update = function(whparams,params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).updateOne(whparams, {$set:params}, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = Mongodb;</pre>\n然后编写中间件routes/users.js\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n//登录\nrouter.get('/login', function(req, res, next) {\n    username = req.query.username;\n    password = req.query.password;\n    \n    if(!username || !password) return res.json(RetInfo.error(\"lack of params\"));\n\n    if(username == \"admin\" &amp;&amp; password == \"admin\"){\n        \n        req.session.regenerate(function(err) {\n            if(err) return res.json(RetInfo.error(\"login error\"));\n            req.session.loginUser = username;\n            return res.json(RetInfo.success());\n        });\n\n    }else{\n        return res.json(RetInfo.error(\"username or password error\"));\n    }\n});\n//登出\nrouter.get(\"/loginout\", function(req, res, next) {\n    req.session.destroy(function(err) {\n        if(err) return res.json(RetInfo.error(\"login out error\"));\n        return res.json(RetInfo.success());\n    });\n})\n\nmodule.exports = router;</pre>\nroutes/manage.js  这里写了一般的增删改操作\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n\nvar Mongo = require(\"../common/mongodb\");\nDB_POSTS = new Mongo(\"test_database\",\"posts\");\n//获取数据\nrouter.get(\"/\",function(req, res, next){\n    DB_POSTS.fetch({}).then((data)=&gt;{\n        return res.send(data);\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//增加\n.post(\"/\",function(req, res, next){\n    DB_POSTS.save(req.body).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//删除\n.delete(\"/\",function(req, res, next){\n    data={\"_id\":req.query.id}\n    DB_POSTS.delete(data).then((data)=&gt;{\n        return res.send(data)\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message))\n    });\n})\n//修改\n.put(\"/\",function(req, res, next){\n    const params = req.body;\n    DB_POSTS.update({\"_id\":params.id},params).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    })\n})\n\nmodule.exports = router;</pre>\n运行的话可以有很多方法\n<pre>一般运行\nnpm start\ndebug模式\nDEBUG=myapp:* npm start\n开发修改后自动重启\nnodemon app.js\n后台一直运行\nforever start ./bin/www</pre>\n后言：对于js语法 es6等还比较生疏，并没有涉及，可能有待改进，但总怕麻烦。。。。\n","slug":"2018/article_7_node+express+mongodb初试","published":1,"updated":"2021-01-27T04:46:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74t002g0770bbzzy9ei","content":"<p>新尝试另一个语言node.js和框架express，记录一些基本的操作与技巧。<a id=\"more\"></a></p>\n<p>此次最大的不同是node.js是异步的，有些操作就不那么直观。</p>\n<p>这里在linux centos做测试。前提先安装好node.js和npm。</p>\n<p>这里也类似上次flask完成一个登陆与增删改操作的接口。</p>\n<p>先用命令行直接生成一个项目</p>\n<pre class=\"language-sh\"><code class=\"language-sh\" translate=\"no\">npm install express-generator -g\nexpress --view=pug myapp\n</code>cd myapp &amp;&amp; npm install npm start<code class=\"language-sh\" translate=\"no\"></code></pre>\n<p>app.js主文件</p>\n<pre>//最后两个为session所需库，还有mongodb库，需自行下载\n//npm install --save express-session,session-file-store,mongodb\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar FileStore = require('session-file-store')(session);\n\n#引入路由文件\nvar RetInfo = require(\"./common/retinfo\");\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar manage = require('./routes/manage');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\n//解析请求body\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n//开启并设置session\napp.use(session({\n    secret: 'chyingp',\n    store: new FileStore(),\n    saveUninitialized: false,\n    resave: false,\n    cookie: {\n        maxAge: 24*60*60*1000\n    }\n}));\n//绑定路由，中间件\napp.use('/', index);\napp.use('/users', users);\n//不设置的则下面的路由都会运行这个函数\napp.use(function(req,res,next) {\n    var sess = req.session;\n    var loginUser = sess.loginUser;\n    if(loginUser===undefined) return res.json(RetInfo.error(\"login out\"));\n    next();\n});\n//绑定另一个中间件，需登录后\napp.use('/manage',manage);\n//错误处理\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;</pre>\n<p>根目录下 新建一个文件夹common/用于存放通用函数，下面写了两种形式。</p>\n<p>common/retinfo.js 用于接口返回数据</p>\n<pre>module.exports = {\n    response : function(sts,msg) {\n        return {\"sts\":sts,\"msg\":msg}\n    },\n    success : function() {\n        return this.response(1,\"success\")\n    },\n    error : function(msg) {\n        return this.response(-1,msg)\n    },\n    dberr : function(msg) {\n        return this.response(-1,\"db error\");\n    }\n}</pre>\n<p>common/mongodb.js 用于数据库操作,这里使用了promise，因为mongodb操作后会有回调函数，不方便调用，写成promise就可以用then进行下去。</p>\n<pre>//use for mongodb database \n\nvar MongoClient = require('mongodb').MongoClient;\n\nfunction Mongodb(dbName, colName){\n\n    this.dbName = dbName;\n    this.colName = colName;\n    this.url = 'mongodb://localhost:27017/';\n\n    this.fetch = function(params){\n        //回调函数里没法获取到外部的this，所以再定义一下that\n        var that = this;\n        return new Promise(function(resolve, reject, notufy) {\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).find(params).toArray(function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.save = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).insertOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.delete = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).deleteOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n\n    this.update = function(whparams,params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).updateOne(whparams, {$set:params}, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = Mongodb;</pre>\n<p>然后编写中间件routes/users.js</p>\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n//登录\nrouter.get('/login', function(req, res, next) {\n    username = req.query.username;\n    password = req.query.password;\n    \n    if(!username || !password) return res.json(RetInfo.error(\"lack of params\"));\n\n    if(username == \"admin\" &amp;&amp; password == \"admin\"){\n        \n        req.session.regenerate(function(err) {\n            if(err) return res.json(RetInfo.error(\"login error\"));\n            req.session.loginUser = username;\n            return res.json(RetInfo.success());\n        });\n\n    }else{\n        return res.json(RetInfo.error(\"username or password error\"));\n    }\n});\n//登出\nrouter.get(\"/loginout\", function(req, res, next) {\n    req.session.destroy(function(err) {\n        if(err) return res.json(RetInfo.error(\"login out error\"));\n        return res.json(RetInfo.success());\n    });\n})\n\nmodule.exports = router;</pre>\n<p>routes/manage.js  这里写了一般的增删改操作</p>\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n\nvar Mongo = require(\"../common/mongodb\");\nDB_POSTS = new Mongo(\"test_database\",\"posts\");\n//获取数据\nrouter.get(\"/\",function(req, res, next){\n    DB_POSTS.fetch({}).then((data)=&gt;{\n        return res.send(data);\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//增加\n.post(\"/\",function(req, res, next){\n    DB_POSTS.save(req.body).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//删除\n.delete(\"/\",function(req, res, next){\n    data={\"_id\":req.query.id}\n    DB_POSTS.delete(data).then((data)=&gt;{\n        return res.send(data)\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message))\n    });\n})\n//修改\n.put(\"/\",function(req, res, next){\n    const params = req.body;\n    DB_POSTS.update({\"_id\":params.id},params).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    })\n})\n\nmodule.exports = router;</pre>\n<p>运行的话可以有很多方法</p>\n<pre>一般运行\nnpm start\ndebug模式\nDEBUG=myapp:* npm start\n开发修改后自动重启\nnodemon app.js\n后台一直运行\nforever start ./bin/www</pre>\n<p>后言：对于js语法 es6等还比较生疏，并没有涉及，可能有待改进，但总怕麻烦。。。。</p>\n","excerpt":"<p>新尝试另一个语言node.js和框架express，记录一些基本的操作与技巧。","more":"</p>\n<p>此次最大的不同是node.js是异步的，有些操作就不那么直观。</p>\n<p>这里在linux centos做测试。前提先安装好node.js和npm。</p>\n<p>这里也类似上次flask完成一个登陆与增删改操作的接口。</p>\n<p>先用命令行直接生成一个项目</p>\n<pre class=\"language-sh\"><code class=\"language-sh\" translate=\"no\">npm install express-generator -g\nexpress --view=pug myapp\n</code>cd myapp &amp;&amp; npm install npm start<code class=\"language-sh\" translate=\"no\"></code></pre>\n<p>app.js主文件</p>\n<pre>//最后两个为session所需库，还有mongodb库，需自行下载\n//npm install --save express-session,session-file-store,mongodb\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar FileStore = require('session-file-store')(session);\n\n#引入路由文件\nvar RetInfo = require(\"./common/retinfo\");\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar manage = require('./routes/manage');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\n//解析请求body\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n//开启并设置session\napp.use(session({\n    secret: 'chyingp',\n    store: new FileStore(),\n    saveUninitialized: false,\n    resave: false,\n    cookie: {\n        maxAge: 24*60*60*1000\n    }\n}));\n//绑定路由，中间件\napp.use('/', index);\napp.use('/users', users);\n//不设置的则下面的路由都会运行这个函数\napp.use(function(req,res,next) {\n    var sess = req.session;\n    var loginUser = sess.loginUser;\n    if(loginUser===undefined) return res.json(RetInfo.error(\"login out\"));\n    next();\n});\n//绑定另一个中间件，需登录后\napp.use('/manage',manage);\n//错误处理\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;</pre>\n<p>根目录下 新建一个文件夹common/用于存放通用函数，下面写了两种形式。</p>\n<p>common/retinfo.js 用于接口返回数据</p>\n<pre>module.exports = {\n    response : function(sts,msg) {\n        return {\"sts\":sts,\"msg\":msg}\n    },\n    success : function() {\n        return this.response(1,\"success\")\n    },\n    error : function(msg) {\n        return this.response(-1,msg)\n    },\n    dberr : function(msg) {\n        return this.response(-1,\"db error\");\n    }\n}</pre>\n<p>common/mongodb.js 用于数据库操作,这里使用了promise，因为mongodb操作后会有回调函数，不方便调用，写成promise就可以用then进行下去。</p>\n<pre>//use for mongodb database \n\nvar MongoClient = require('mongodb').MongoClient;\n\nfunction Mongodb(dbName, colName){\n\n    this.dbName = dbName;\n    this.colName = colName;\n    this.url = 'mongodb://localhost:27017/';\n\n    this.fetch = function(params){\n        //回调函数里没法获取到外部的this，所以再定义一下that\n        var that = this;\n        return new Promise(function(resolve, reject, notufy) {\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).find(params).toArray(function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.save = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).insertOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    };\n\n    this.delete = function(params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).deleteOne(params, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n\n    this.update = function(whparams,params){\n        var that = this;\n        return new Promise(function(resolve, reject, notufy){\n            MongoClient.connect(that.url, function(err, db){\n                if(err) reject(err);\n                var dbo = db.db(that.dbName);\n                dbo.collection(that.colName).updateOne(whparams, {$set:params}, function(err, res){\n                    if(err) reject(err);\n                    resolve(res);\n                    db.close();\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = Mongodb;</pre>\n<p>然后编写中间件routes/users.js</p>\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n//登录\nrouter.get('/login', function(req, res, next) {\n    username = req.query.username;\n    password = req.query.password;\n    \n    if(!username || !password) return res.json(RetInfo.error(\"lack of params\"));\n\n    if(username == \"admin\" &amp;&amp; password == \"admin\"){\n        \n        req.session.regenerate(function(err) {\n            if(err) return res.json(RetInfo.error(\"login error\"));\n            req.session.loginUser = username;\n            return res.json(RetInfo.success());\n        });\n\n    }else{\n        return res.json(RetInfo.error(\"username or password error\"));\n    }\n});\n//登出\nrouter.get(\"/loginout\", function(req, res, next) {\n    req.session.destroy(function(err) {\n        if(err) return res.json(RetInfo.error(\"login out error\"));\n        return res.json(RetInfo.success());\n    });\n})\n\nmodule.exports = router;</pre>\n<p>routes/manage.js  这里写了一般的增删改操作</p>\n<pre>var express = require('express');\nvar router = express.Router();\nvar RetInfo = require(\"../common/retinfo\");\n\nvar Mongo = require(\"../common/mongodb\");\nDB_POSTS = new Mongo(\"test_database\",\"posts\");\n//获取数据\nrouter.get(\"/\",function(req, res, next){\n    DB_POSTS.fetch({}).then((data)=&gt;{\n        return res.send(data);\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//增加\n.post(\"/\",function(req, res, next){\n    DB_POSTS.save(req.body).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    });\n})\n//删除\n.delete(\"/\",function(req, res, next){\n    data={\"_id\":req.query.id}\n    DB_POSTS.delete(data).then((data)=&gt;{\n        return res.send(data)\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message))\n    });\n})\n//修改\n.put(\"/\",function(req, res, next){\n    const params = req.body;\n    DB_POSTS.update({\"_id\":params.id},params).then((data)=&gt;{\n        return res.send(RetInfo.success());\n    },(err)=&gt;{\n        return res.send(RetInfo.error(err.message));\n    })\n})\n\nmodule.exports = router;</pre>\n<p>运行的话可以有很多方法</p>\n<pre>一般运行\nnpm start\ndebug模式\nDEBUG=myapp:* npm start\n开发修改后自动重启\nnodemon app.js\n后台一直运行\nforever start ./bin/www</pre>\n<p>后言：对于js语法 es6等还比较生疏，并没有涉及，可能有待改进，但总怕麻烦。。。。</p>"},{"title":"庆祝博客一周年！！","catalog":true,"date":"2018-03-09T05:33:12.000Z","_content":"\n博客不知不觉已经一周年咯。\n\n一年写了50+篇文章，coding也基本未间断。\n\n在去年还未知的技术走向今年也将看到沉淀。\n\n这次主要将要完成一个的一个事情便是 将博客已有的一些技术和代码较为完善的转存到github上。\n\n一方面是收集零散的片段，另一方面是整理注释代码。\n\n为以后做简单的借鉴与留念。\n\ngithub地址是<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a>\n","source":"_posts/2018/article_9_庆祝博客一周年！！.md","raw":"\n---\ntitle: 庆祝博客一周年！！\ncatalog: true\ndate: 2018-3-9 13:33:12\n---\n\n博客不知不觉已经一周年咯。\n\n一年写了50+篇文章，coding也基本未间断。\n\n在去年还未知的技术走向今年也将看到沉淀。\n\n这次主要将要完成一个的一个事情便是 将博客已有的一些技术和代码较为完善的转存到github上。\n\n一方面是收集零散的片段，另一方面是整理注释代码。\n\n为以后做简单的借鉴与留念。\n\ngithub地址是<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a>\n","slug":"2018/article_9_庆祝博客一周年！！","published":1,"updated":"2021-01-27T04:46:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74v002h0770z5rnjt6l","content":"<p>博客不知不觉已经一周年咯。</p>\n<p>一年写了50+篇文章，coding也基本未间断。</p>\n<p>在去年还未知的技术走向今年也将看到沉淀。</p>\n<p>这次主要将要完成一个的一个事情便是 将博客已有的一些技术和代码较为完善的转存到github上。</p>\n<p>一方面是收集零散的片段，另一方面是整理注释代码。</p>\n<p>为以后做简单的借鉴与留念。</p>\n<p>github地址是<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/blog</a></p>\n","excerpt":"","more":"<p>博客不知不觉已经一周年咯。</p>\n<p>一年写了50+篇文章，coding也基本未间断。</p>\n<p>在去年还未知的技术走向今年也将看到沉淀。</p>\n<p>这次主要将要完成一个的一个事情便是 将博客已有的一些技术和代码较为完善的转存到github上。</p>\n<p>一方面是收集零散的片段，另一方面是整理注释代码。</p>\n<p>为以后做简单的借鉴与留念。</p>\n<p>github地址是<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a></p>\n"},{"title":"博客新增两个功能模块","catalog":true,"date":"2020-04-29T13:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","source":"_posts/2020/article_11_新增两个功能.md","raw":"---\ntitle: 博客新增两个功能模块\ncatalog: true\ndate: 2020-04-29 21:31:43\nsubtitle: \nheader-img: \ntags:\n- OTHER\n---\n\n## 入口\n\n在主页侧边栏的FRIENDS模块中，\n\n新增了[我的钢琴屋](http://piano.ganjiacheng.cn/) 和 [我的阅读室](/book/)\n\n下面分别来阐述\n\n## 我的钢琴屋\n\n这个是挂在github上的一个静态页面，github地址为\n> [https://github.com/webgjc/tan8](https://github.com/webgjc/tan8)【如侵权可下线】\n\n主要功能为练习和收听钢琴曲\n\n### 实现\n\n其中包括一个flash播放器和一个数据列表\n\nflash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址\n\n数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，\n\n数据存储为json格式，在打开页面时直接加载\n\n表单使用的是bootstrap-table\n\n## 我的阅读室\n\n这个主要是为了能催自己多看看书，不迷茫。\n\n每次看一本书也会记录下看书的笔记和感想。\n\n### 实现\n\n这个是在原博客基础上的进行的一部分改造，\n\n在主题源文件下layout/\n新增book.ejs\n\n在source/下新增book/ book/index.md  \n在头上加上\n> layout: \"book\"\n\n这样就可以新增一个页面和路由到/book/\n\n然后在_posts中主动区分一下一般页面和书评页面，  \n我这边实现是在头部加上\n> book: true\n\n然后在book.ejs中,  \n对于每个post的处理前加上过滤,  \n然后就可以自己对书籍文章进行排版和构建，  \n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片\n```\n<% site.posts.each(function(post){ %>\n    <% if (post.book){ %>\n    <% } %>\n<% }); %>\n```\n\n同时在主题下/layout/index.ejs  \n也加上过滤\n```\n<% page.posts.each(function(post){ %>\n    <% if(!post.book) { %>\n    <% } %>\n<% }); %>\n```\n\n## 最后一席话\n\n在工作以后，忙碌奔波之间，  \n读书不易，弹琴也不易，  \n为自己的坚持加个油；","slug":"2020/article_11_新增两个功能","published":1,"updated":"2021-01-27T04:46:28.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74x002i0770zzmqtax7","content":"<h2 id=\"入口\">入口</h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\" target=\"_blank\" rel=\"external\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2 id=\"我的钢琴屋\">我的钢琴屋</h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3 id=\"实现\">实现</h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2 id=\"我的阅读室\">我的阅读室</h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3 id=\"实现\">实现</h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后一席话\">最后一席话</h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n","excerpt":"","more":"<h2>入口</h2>\n<p>在主页侧边栏的FRIENDS模块中，</p>\n<p>新增了<a href=\"http://piano.ganjiacheng.cn/\">我的钢琴屋</a> 和 <a href=\"/book/\">我的阅读室</a></p>\n<p>下面分别来阐述</p>\n<h2>我的钢琴屋</h2>\n<p>这个是挂在github上的一个静态页面，github地址为</p>\n<blockquote>\n<p><a href=\"https://github.com/webgjc/tan8\">https://github.com/webgjc/tan8</a>【如侵权可下线】</p>\n</blockquote>\n<p>主要功能为练习和收听钢琴曲</p>\n<h3>实现</h3>\n<p>其中包括一个flash播放器和一个数据列表</p>\n<p>flash播放器主要参考某琴吧的实现，并引用了他们的文件存储直接获取到源地址</p>\n<p>数据列表也主要来自某琴吧，这边用爬虫获取到了钢琴的全部列表，并做展示和过滤搜索，</p>\n<p>数据存储为json格式，在打开页面时直接加载</p>\n<p>表单使用的是bootstrap-table</p>\n<h2>我的阅读室</h2>\n<p>这个主要是为了能催自己多看看书，不迷茫。</p>\n<p>每次看一本书也会记录下看书的笔记和感想。</p>\n<h3>实现</h3>\n<p>这个是在原博客基础上的进行的一部分改造，</p>\n<p>在主题源文件下layout/<br>\n新增book.ejs</p>\n<p>在source/下新增book/ book/index.md<br>\n在头上加上</p>\n<blockquote>\n<p>layout: “book”</p>\n</blockquote>\n<p>这样就可以新增一个页面和路由到/book/</p>\n<p>然后在_posts中主动区分一下一般页面和书评页面，<br>\n我这边实现是在头部加上</p>\n<blockquote>\n<p>book: true</p>\n</blockquote>\n<p>然后在book.ejs中,<br>\n对于每个post的处理前加上过滤,<br>\n然后就可以自己对书籍文章进行排版和构建，<br>\n比如我在文章头部加上book-cover: /img/xxx.jpg表示封面图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% site.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if (post.book)&#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<p>同时在主题下/layout/index.ejs<br>\n也加上过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class=\"line\">    &lt;% if(!post.book) &#123; %&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125;); %&gt;</span><br></pre></td></tr></table></figure>\n<h2>最后一席话</h2>\n<p>在工作以后，忙碌奔波之间，<br>\n读书不易，弹琴也不易，<br>\n为自己的坚持加个油；</p>\n"},{"title":"扫雷js版","catalog":true,"date":"2018-02-27T03:05:12.000Z","_content":"\n是老早之前写的，今天整理系统文件发现了这个扫雷，也是小惊喜，小看了下还挺有趣哈！<!--more-->\n\n直接上代码，具体在代码中注释。\n\n主要看点有两块，一个是从n个整数随机产生不重复的m个随机整数,m&lt;n\n\n另一个就是自动搜寻周边不是雷的区域，也就是点了一个不是雷有时会显现一大片。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=no\" /&gt;\n    &lt;title&gt;扫雷&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            color: black;\n            margin:0px;\n            padding:0px;\n        }\n        html,body{\n            -webkit-tap-highlight-color: transparent;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            text-decoration: none;\n            height: 100%;\n        }\n        .con div{\n            height: 40px;\n            margin-left: 0.2%;\n            width: 11%;\n            display: inline-block;\n            border: solid 1px #000;\n            position: absolute;\n            line-height: 50px;\n            text-align: center;\n            color:red;\n        }\n        .ti{\n            position: absolute;\n            bottom: 12%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"contain\" class=\"con\"&gt;&lt;/div&gt;\n    &lt;div class=\"ti\"&gt;已花时间：&lt;span id=\"time\"&gt;0&lt;/span&gt;秒&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var leiRes=new Array(),nums=new Array();\n        var Lei=1,i,jk,G=81,res=1,clickNum=0,num=0;\n        //随机产生区间内的随机数\n        function setRandomNum(min,max){\n            return Math.floor(Math.random()*(max-min+1)+min);\n        }\n        //搜寻周边8个点\n        function NotLeiNum(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            if(x-1&gt;=0&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x-1);\n            }\n            if(x-1&gt;=0&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x-1);\n            }\n            if(x+1&lt;9&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x+1);\n            }\n            if(x+1&lt;9&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            return leiNum;\n        }\n        //搜寻周边四个点\n        function NotLei(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            if(leiNum&lt;1){\n                if(NotLeiNum(n)==0){\n                    document.getElementById(n).innerHTML=0;\n                    document.getElementById(n).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(n).style.color=\"#000\";\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        //递归判断周边四个点\n        function judgeLei(n,dir){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            switch(dir){\n                case 1:\n                if(z-1&gt;=0&amp;&amp;leiRes[(z-1)*9+x]==0){\n                    if(NotLei((z-1)*9+x)){\n                        judgeLei((z-1)*9+x,1);\n                    }\n                }\n                \n                case 2:\n                if(z+1&lt;9&amp;&amp;leiRes[(z+1)*9+x]==0){\n                    if(NotLei((z+1)*9+x)){\n                        judgeLei((z+1)*9+x,2);\n                    }\n                }\n                \n                case 3:\n                if(x-1&gt;=0&amp;&amp;leiRes[z*9+x-1]==0){\n                    if(NotLei(z*9+x-1)){\n                        judgeLei(z*9+x-1,3);\n                    }\n                }\n                \n                case 4:\n                if(x+1&lt;9&amp;&amp;leiRes[z*9+x+1]==0){\n                    if(NotLei(z*9+x+1)){\n                        judgeLei(z*9+x+1,4);\n                    }\n                }\n            }\n        }\n        //初始化\n        for(i=0;i&lt;G;i++){\n            nums[i]=i;\n            j=Math.floor(i/9),k=i%9;\n            leiRes[i]=0;\n            var ele=document.createElement(\"div\");\n            ele.setAttribute(\"id\",i);\n            document.getElementById(\"contain\").appendChild(ele);\n            document.getElementById(i).setAttribute(\"style\",\"top:\"+j*40+\"px;\"+\"left:\"+k*11+\"%\");\n        }\n        //n个整数获取m个不相等整数\n        //思路为例存有0-100的数组，首先随机获取一个整数，然后这个整数作为下标与数组下标0的数交换位置，进行下一步从数组下标1-100中在获取数\n        for(i=0;i&lt;Lei;i++){\n            r=setRandomNum(i,G-1);\n            var temp=nums[i];\n            nums[i]=nums[r];\n            nums[r]=temp;\n            leiRes[nums[i]]=1;\n        }\n        //主游戏环节，为所有节点绑定事件\n        var sl=document.getElementById(\"contain\").childNodes;\n        for(i=0;i&lt;sl.length;i++){\n            sl[i].onclick=function(){\n                for(j=0;j&lt;Lei;j++){\n                    if(this.id==nums[j]){\n                        res=0;\n                        document.getElementById(this.id).innerHTML=\"雷\";\n                        alert('游戏失败');\n                        if(confirm(\"确认重新开始游戏?\")){\n                            window.location.reload();\n                        }\n                    }\n                }\n                if(res==1){\n                    var n = NotLeiNum(this.id);\n                    document.getElementById(this.id).innerHTML=n;\n                    document.getElementById(this.id).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(this.id).style.color=\"#000\";\n                    if(n==0){\n                        judgeLei(this.id,1);\n                        /*judgeLei(this.id,2);\n                        judgeLei(this.id,3);\n                        judgeLei(this.id,4);*/\n                    }\n                }\n                seledNum=document.getElementById(\"contain\").childNodes;\n                for(i=0;i&lt;seledNum.length;i++){\n                    if(seledNum[i].innerHTML==\"\"){\n                        num++;\n                    }\n                }\n                if(num==Lei){\n                    alert(\"你成功啦\");\n                }else{\n                    num=0;\n                }\n            }\n        }\n        //计时器\n        var n=0;\n        function addtime(){\n            n++;\n            document.getElementById(\"time\").innerHTML=n;\n        }\n        setInterval(\"addtime()\",1000);\n        &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","source":"_posts/2018/article_8_扫雷js版.md","raw":"\n---\ntitle: 扫雷js版\ncatalog: true\ndate: 2018-2-27 11:05:12\n---\n\n是老早之前写的，今天整理系统文件发现了这个扫雷，也是小惊喜，小看了下还挺有趣哈！<!--more-->\n\n直接上代码，具体在代码中注释。\n\n主要看点有两块，一个是从n个整数随机产生不重复的m个随机整数,m&lt;n\n\n另一个就是自动搜寻周边不是雷的区域，也就是点了一个不是雷有时会显现一大片。\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=no\" /&gt;\n    &lt;title&gt;扫雷&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            color: black;\n            margin:0px;\n            padding:0px;\n        }\n        html,body{\n            -webkit-tap-highlight-color: transparent;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            text-decoration: none;\n            height: 100%;\n        }\n        .con div{\n            height: 40px;\n            margin-left: 0.2%;\n            width: 11%;\n            display: inline-block;\n            border: solid 1px #000;\n            position: absolute;\n            line-height: 50px;\n            text-align: center;\n            color:red;\n        }\n        .ti{\n            position: absolute;\n            bottom: 12%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"contain\" class=\"con\"&gt;&lt;/div&gt;\n    &lt;div class=\"ti\"&gt;已花时间：&lt;span id=\"time\"&gt;0&lt;/span&gt;秒&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var leiRes=new Array(),nums=new Array();\n        var Lei=1,i,jk,G=81,res=1,clickNum=0,num=0;\n        //随机产生区间内的随机数\n        function setRandomNum(min,max){\n            return Math.floor(Math.random()*(max-min+1)+min);\n        }\n        //搜寻周边8个点\n        function NotLeiNum(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            if(x-1&gt;=0&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x-1);\n            }\n            if(x-1&gt;=0&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x-1);\n            }\n            if(x+1&lt;9&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x+1);\n            }\n            if(x+1&lt;9&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            return leiNum;\n        }\n        //搜寻周边四个点\n        function NotLei(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            if(leiNum&lt;1){\n                if(NotLeiNum(n)==0){\n                    document.getElementById(n).innerHTML=0;\n                    document.getElementById(n).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(n).style.color=\"#000\";\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        //递归判断周边四个点\n        function judgeLei(n,dir){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            switch(dir){\n                case 1:\n                if(z-1&gt;=0&amp;&amp;leiRes[(z-1)*9+x]==0){\n                    if(NotLei((z-1)*9+x)){\n                        judgeLei((z-1)*9+x,1);\n                    }\n                }\n                \n                case 2:\n                if(z+1&lt;9&amp;&amp;leiRes[(z+1)*9+x]==0){\n                    if(NotLei((z+1)*9+x)){\n                        judgeLei((z+1)*9+x,2);\n                    }\n                }\n                \n                case 3:\n                if(x-1&gt;=0&amp;&amp;leiRes[z*9+x-1]==0){\n                    if(NotLei(z*9+x-1)){\n                        judgeLei(z*9+x-1,3);\n                    }\n                }\n                \n                case 4:\n                if(x+1&lt;9&amp;&amp;leiRes[z*9+x+1]==0){\n                    if(NotLei(z*9+x+1)){\n                        judgeLei(z*9+x+1,4);\n                    }\n                }\n            }\n        }\n        //初始化\n        for(i=0;i&lt;G;i++){\n            nums[i]=i;\n            j=Math.floor(i/9),k=i%9;\n            leiRes[i]=0;\n            var ele=document.createElement(\"div\");\n            ele.setAttribute(\"id\",i);\n            document.getElementById(\"contain\").appendChild(ele);\n            document.getElementById(i).setAttribute(\"style\",\"top:\"+j*40+\"px;\"+\"left:\"+k*11+\"%\");\n        }\n        //n个整数获取m个不相等整数\n        //思路为例存有0-100的数组，首先随机获取一个整数，然后这个整数作为下标与数组下标0的数交换位置，进行下一步从数组下标1-100中在获取数\n        for(i=0;i&lt;Lei;i++){\n            r=setRandomNum(i,G-1);\n            var temp=nums[i];\n            nums[i]=nums[r];\n            nums[r]=temp;\n            leiRes[nums[i]]=1;\n        }\n        //主游戏环节，为所有节点绑定事件\n        var sl=document.getElementById(\"contain\").childNodes;\n        for(i=0;i&lt;sl.length;i++){\n            sl[i].onclick=function(){\n                for(j=0;j&lt;Lei;j++){\n                    if(this.id==nums[j]){\n                        res=0;\n                        document.getElementById(this.id).innerHTML=\"雷\";\n                        alert('游戏失败');\n                        if(confirm(\"确认重新开始游戏?\")){\n                            window.location.reload();\n                        }\n                    }\n                }\n                if(res==1){\n                    var n = NotLeiNum(this.id);\n                    document.getElementById(this.id).innerHTML=n;\n                    document.getElementById(this.id).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(this.id).style.color=\"#000\";\n                    if(n==0){\n                        judgeLei(this.id,1);\n                        /*judgeLei(this.id,2);\n                        judgeLei(this.id,3);\n                        judgeLei(this.id,4);*/\n                    }\n                }\n                seledNum=document.getElementById(\"contain\").childNodes;\n                for(i=0;i&lt;seledNum.length;i++){\n                    if(seledNum[i].innerHTML==\"\"){\n                        num++;\n                    }\n                }\n                if(num==Lei){\n                    alert(\"你成功啦\");\n                }else{\n                    num=0;\n                }\n            }\n        }\n        //计时器\n        var n=0;\n        function addtime(){\n            n++;\n            document.getElementById(\"time\").innerHTML=n;\n        }\n        setInterval(\"addtime()\",1000);\n        &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","slug":"2018/article_8_扫雷js版","published":1,"updated":"2021-01-27T04:46:28.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh74y002j0770rq85uedc","content":"<p>是老早之前写的，今天整理系统文件发现了这个扫雷，也是小惊喜，小看了下还挺有趣哈！<a id=\"more\"></a></p>\n<p>直接上代码，具体在代码中注释。</p>\n<p>主要看点有两块，一个是从n个整数随机产生不重复的m个随机整数,m&lt;n</p>\n<p>另一个就是自动搜寻周边不是雷的区域，也就是点了一个不是雷有时会显现一大片。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=no\" /&gt;\n    &lt;title&gt;扫雷&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            color: black;\n            margin:0px;\n            padding:0px;\n        }\n        html,body{\n            -webkit-tap-highlight-color: transparent;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            text-decoration: none;\n            height: 100%;\n        }\n        .con div{\n            height: 40px;\n            margin-left: 0.2%;\n            width: 11%;\n            display: inline-block;\n            border: solid 1px #000;\n            position: absolute;\n            line-height: 50px;\n            text-align: center;\n            color:red;\n        }\n        .ti{\n            position: absolute;\n            bottom: 12%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"contain\" class=\"con\"&gt;&lt;/div&gt;\n    &lt;div class=\"ti\"&gt;已花时间：&lt;span id=\"time\"&gt;0&lt;/span&gt;秒&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var leiRes=new Array(),nums=new Array();\n        var Lei=1,i,jk,G=81,res=1,clickNum=0,num=0;\n        //随机产生区间内的随机数\n        function setRandomNum(min,max){\n            return Math.floor(Math.random()*(max-min+1)+min);\n        }\n        //搜寻周边8个点\n        function NotLeiNum(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            if(x-1&gt;=0&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x-1);\n            }\n            if(x-1&gt;=0&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x-1);\n            }\n            if(x+1&lt;9&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x+1);\n            }\n            if(x+1&lt;9&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            return leiNum;\n        }\n        //搜寻周边四个点\n        function NotLei(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            if(leiNum&lt;1){\n                if(NotLeiNum(n)==0){\n                    document.getElementById(n).innerHTML=0;\n                    document.getElementById(n).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(n).style.color=\"#000\";\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        //递归判断周边四个点\n        function judgeLei(n,dir){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            switch(dir){\n                case 1:\n                if(z-1&gt;=0&amp;&amp;leiRes[(z-1)*9+x]==0){\n                    if(NotLei((z-1)*9+x)){\n                        judgeLei((z-1)*9+x,1);\n                    }\n                }\n                \n                case 2:\n                if(z+1&lt;9&amp;&amp;leiRes[(z+1)*9+x]==0){\n                    if(NotLei((z+1)*9+x)){\n                        judgeLei((z+1)*9+x,2);\n                    }\n                }\n                \n                case 3:\n                if(x-1&gt;=0&amp;&amp;leiRes[z*9+x-1]==0){\n                    if(NotLei(z*9+x-1)){\n                        judgeLei(z*9+x-1,3);\n                    }\n                }\n                \n                case 4:\n                if(x+1&lt;9&amp;&amp;leiRes[z*9+x+1]==0){\n                    if(NotLei(z*9+x+1)){\n                        judgeLei(z*9+x+1,4);\n                    }\n                }\n            }\n        }\n        //初始化\n        for(i=0;i&lt;G;i++){\n            nums[i]=i;\n            j=Math.floor(i/9),k=i%9;\n            leiRes[i]=0;\n            var ele=document.createElement(\"div\");\n            ele.setAttribute(\"id\",i);\n            document.getElementById(\"contain\").appendChild(ele);\n            document.getElementById(i).setAttribute(\"style\",\"top:\"+j*40+\"px;\"+\"left:\"+k*11+\"%\");\n        }\n        //n个整数获取m个不相等整数\n        //思路为例存有0-100的数组，首先随机获取一个整数，然后这个整数作为下标与数组下标0的数交换位置，进行下一步从数组下标1-100中在获取数\n        for(i=0;i&lt;Lei;i++){\n            r=setRandomNum(i,G-1);\n            var temp=nums[i];\n            nums[i]=nums[r];\n            nums[r]=temp;\n            leiRes[nums[i]]=1;\n        }\n        //主游戏环节，为所有节点绑定事件\n        var sl=document.getElementById(\"contain\").childNodes;\n        for(i=0;i&lt;sl.length;i++){\n            sl[i].onclick=function(){\n                for(j=0;j&lt;Lei;j++){\n                    if(this.id==nums[j]){\n                        res=0;\n                        document.getElementById(this.id).innerHTML=\"雷\";\n                        alert('游戏失败');\n                        if(confirm(\"确认重新开始游戏?\")){\n                            window.location.reload();\n                        }\n                    }\n                }\n                if(res==1){\n                    var n = NotLeiNum(this.id);\n                    document.getElementById(this.id).innerHTML=n;\n                    document.getElementById(this.id).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(this.id).style.color=\"#000\";\n                    if(n==0){\n                        judgeLei(this.id,1);\n                        /*judgeLei(this.id,2);\n                        judgeLei(this.id,3);\n                        judgeLei(this.id,4);*/\n                    }\n                }\n                seledNum=document.getElementById(\"contain\").childNodes;\n                for(i=0;i&lt;seledNum.length;i++){\n                    if(seledNum[i].innerHTML==\"\"){\n                        num++;\n                    }\n                }\n                if(num==Lei){\n                    alert(\"你成功啦\");\n                }else{\n                    num=0;\n                }\n            }\n        }\n        //计时器\n        var n=0;\n        function addtime(){\n            n++;\n            document.getElementById(\"time\").innerHTML=n;\n        }\n        setInterval(\"addtime()\",1000);\n        &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n","excerpt":"<p>是老早之前写的，今天整理系统文件发现了这个扫雷，也是小惊喜，小看了下还挺有趣哈！","more":"</p>\n<p>直接上代码，具体在代码中注释。</p>\n<p>主要看点有两块，一个是从n个整数随机产生不重复的m个随机整数,m&lt;n</p>\n<p>另一个就是自动搜寻周边不是雷的区域，也就是点了一个不是雷有时会显现一大片。</p>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=no\" /&gt;\n    &lt;title&gt;扫雷&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n        *{\n            color: black;\n            margin:0px;\n            padding:0px;\n        }\n        html,body{\n            -webkit-tap-highlight-color: transparent;\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            text-decoration: none;\n            height: 100%;\n        }\n        .con div{\n            height: 40px;\n            margin-left: 0.2%;\n            width: 11%;\n            display: inline-block;\n            border: solid 1px #000;\n            position: absolute;\n            line-height: 50px;\n            text-align: center;\n            color:red;\n        }\n        .ti{\n            position: absolute;\n            bottom: 12%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"contain\" class=\"con\"&gt;&lt;/div&gt;\n    &lt;div class=\"ti\"&gt;已花时间：&lt;span id=\"time\"&gt;0&lt;/span&gt;秒&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var leiRes=new Array(),nums=new Array();\n        var Lei=1,i,jk,G=81,res=1,clickNum=0,num=0;\n        //随机产生区间内的随机数\n        function setRandomNum(min,max){\n            return Math.floor(Math.random()*(max-min+1)+min);\n        }\n        //搜寻周边8个点\n        function NotLeiNum(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            if(x-1&gt;=0&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x-1);\n            }\n            if(x-1&gt;=0&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x-1);\n            }\n            if(x+1&lt;9&amp;&amp;z-1&gt;=0){\n                arr.push((z-1)*9+x+1);\n            }\n            if(x+1&lt;9&amp;&amp;z+1&lt;9){\n                arr.push((z+1)*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            return leiNum;\n        }\n        //搜寻周边四个点\n        function NotLei(n){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            if(z-1&gt;=0){\n                arr.push((z-1)*9+x);\n            }\n            if(z+1&lt;9){\n                arr.push((z+1)*9+x);\n            }\n            if(x-1&gt;=0){\n                arr.push(z*9+x-1);\n            }\n            if(x+1&lt;9){\n                arr.push(z*9+x+1);\n            }\n            for(i=0;i&lt;arr.length;i++){\n                if(leiRes[arr[i]]==1){\n                    leiNum++;\n                }\n            }\n            if(leiNum&lt;1){\n                if(NotLeiNum(n)==0){\n                    document.getElementById(n).innerHTML=0;\n                    document.getElementById(n).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(n).style.color=\"#000\";\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        //递归判断周边四个点\n        function judgeLei(n,dir){\n            var z=Math.floor(n/9),x=n%9,leiNum=0;\n            var arr=new Array();\n            switch(dir){\n                case 1:\n                if(z-1&gt;=0&amp;&amp;leiRes[(z-1)*9+x]==0){\n                    if(NotLei((z-1)*9+x)){\n                        judgeLei((z-1)*9+x,1);\n                    }\n                }\n                \n                case 2:\n                if(z+1&lt;9&amp;&amp;leiRes[(z+1)*9+x]==0){\n                    if(NotLei((z+1)*9+x)){\n                        judgeLei((z+1)*9+x,2);\n                    }\n                }\n                \n                case 3:\n                if(x-1&gt;=0&amp;&amp;leiRes[z*9+x-1]==0){\n                    if(NotLei(z*9+x-1)){\n                        judgeLei(z*9+x-1,3);\n                    }\n                }\n                \n                case 4:\n                if(x+1&lt;9&amp;&amp;leiRes[z*9+x+1]==0){\n                    if(NotLei(z*9+x+1)){\n                        judgeLei(z*9+x+1,4);\n                    }\n                }\n            }\n        }\n        //初始化\n        for(i=0;i&lt;G;i++){\n            nums[i]=i;\n            j=Math.floor(i/9),k=i%9;\n            leiRes[i]=0;\n            var ele=document.createElement(\"div\");\n            ele.setAttribute(\"id\",i);\n            document.getElementById(\"contain\").appendChild(ele);\n            document.getElementById(i).setAttribute(\"style\",\"top:\"+j*40+\"px;\"+\"left:\"+k*11+\"%\");\n        }\n        //n个整数获取m个不相等整数\n        //思路为例存有0-100的数组，首先随机获取一个整数，然后这个整数作为下标与数组下标0的数交换位置，进行下一步从数组下标1-100中在获取数\n        for(i=0;i&lt;Lei;i++){\n            r=setRandomNum(i,G-1);\n            var temp=nums[i];\n            nums[i]=nums[r];\n            nums[r]=temp;\n            leiRes[nums[i]]=1;\n        }\n        //主游戏环节，为所有节点绑定事件\n        var sl=document.getElementById(\"contain\").childNodes;\n        for(i=0;i&lt;sl.length;i++){\n            sl[i].onclick=function(){\n                for(j=0;j&lt;Lei;j++){\n                    if(this.id==nums[j]){\n                        res=0;\n                        document.getElementById(this.id).innerHTML=\"雷\";\n                        alert('游戏失败');\n                        if(confirm(\"确认重新开始游戏?\")){\n                            window.location.reload();\n                        }\n                    }\n                }\n                if(res==1){\n                    var n = NotLeiNum(this.id);\n                    document.getElementById(this.id).innerHTML=n;\n                    document.getElementById(this.id).style.backgroundColor=\"#84EFFF\";\n                    document.getElementById(this.id).style.color=\"#000\";\n                    if(n==0){\n                        judgeLei(this.id,1);\n                        /*judgeLei(this.id,2);\n                        judgeLei(this.id,3);\n                        judgeLei(this.id,4);*/\n                    }\n                }\n                seledNum=document.getElementById(\"contain\").childNodes;\n                for(i=0;i&lt;seledNum.length;i++){\n                    if(seledNum[i].innerHTML==\"\"){\n                        num++;\n                    }\n                }\n                if(num==Lei){\n                    alert(\"你成功啦\");\n                }else{\n                    num=0;\n                }\n            }\n        }\n        //计时器\n        var n=0;\n        function addtime(){\n            n++;\n            document.getElementById(\"time\").innerHTML=n;\n        }\n        setInterval(\"addtime()\",1000);\n        &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>"},{"title":"HIVE源码学习-执行计划Operators和优化Optimizers","catalog":true,"date":"2020-05-02T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 逻辑执行\n\n### 首先看下之前的总体处理流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\nhive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。\n\n### 首先看一个命令explain {SQL}\n可以打印出执行sql对应的OperatorTree,  \n效果如下\n```\nhive> explain select count(1) from test_user group by `name`;\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Map Reduce\n      Map Operator Tree:\n          TableScan\n            alias: test_user\n            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n            Select Operator\n              expressions: name (type: string)\n              outputColumnNames: name\n              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n              Group By Operator\n                aggregations: count(1)\n                keys: name (type: string)\n                mode: hash\n                outputColumnNames: _col0, _col1\n                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                Reduce Output Operator\n                  key expressions: _col0 (type: string)\n                  sort order: +\n                  Map-reduce partition columns: _col0 (type: string)\n                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                  value expressions: _col1 (type: bigint)\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations: count(VALUE._col0)\n          keys: KEY._col0 (type: string)\n          mode: mergepartial\n          outputColumnNames: _col0, _col1\n          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n          Select Operator\n            expressions: _col1 (type: bigint)\n            outputColumnNames: _col0\n            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n            File Output Operator\n              compressed: false\n              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n              table:\n                  input format: org.apache.hadoop.mapred.TextInputFormat\n                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 1.999 seconds, Fetched: 52 row(s)\n```\n\n对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator\n![operator](/img/mypost/operator.png)\n\n### 继续跟踪大法，从Driver的compile开始\n定位到下面这行，进入\n>sem.analyze(tree, ctx);\n\n``` java\npublic void analyze(ASTNode ast, Context ctx) throws SemanticException {\n    ...\n    analyzeInternal(ast); //进入\n}\n```\n\n继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了\n\n``` java\nvoid analyzeInternal(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    // 1. Generate Resolved Parse tree from syntax tree\n    LOG.info(\"Starting Semantic Analysis\");\n    if (!genResolvedParseTree(ast, plannerCtx)) { // 这边将每个AST节点转换为query block，跟进去看看\n      return;\n    }\n    // 2. Gen OP Tree from resolved Parse Tree\n    Operator sinkOp = genOPTree(ast, plannerCtx); //生成OperatorTree\n    ...\n    // 7. Perform Logical optimization\n    // 进行了查询优化\n    Optimizer optm = new Optimizer();\n    optm.setPctx(pCtx);\n    optm.initialize(conf);\n    pCtx = optm.optimize();\n}\n```\n\n``` java\nboolean genResolvedParseTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    ...\n    // 4. continue analyzing from the child ASTNode.\n    Phase1Ctx ctx_1 = initPhase1Ctx();\n    preProcessForInsert(child, qb);\n    if (!doPhase1(child, qb, ctx_1, plannerCtx)) { //这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充\n      // if phase1Result false return\n      return false;\n    }\n    ...\n    getMetaData(qb); //从元数据获取上面explain中如下信息\n                  //table: input，output，serde等\n}\n```\n\n``` java\npublic boolean doPhase1(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)\n      throws SemanticException {\n    ...\n    switch (ast.getToken().getType()) { //判断AST节点类型\n        case HiveParser.TOK_SELECTDI:\n        ...\n        case HiveParser.TOK_SELECT:\n        ...\n        case HiveParser.TOK_WHERE:\n        ...\n        case HiveParser.TOK_INSERT_INTO:\n        ...\n        ...\n    }\n}\n```\n\n继续跟上面的genOPTree，跳转到genPlan\n\ngenPlan是一次如下的深度优先遍历生成树\n\n``` java\nprivate Operator genPlan(QB parent, QBExpr qbexpr) throws SemanticException {\n    if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) {\n      boolean skipAmbiguityCheck = viewSelect == null && parent.isTopLevelSelectStarQuery();\n      return genPlan(qbexpr.getQB(), skipAmbiguityCheck);\n    }\n    if (qbexpr.getOpcode() == QBExpr.Opcode.UNION) {\n      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());\n      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());\n\n      return genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),\n          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);\n    }\n}\n\npublic Operator genPlan(QB qb) throws SemanticException {\n    return genPlan(qb, false);\n}\n\npublic Operator genPlan(QB qb, boolean skipAmbiguityCheck)\n      throws SemanticException {\n    for (String alias : qb.getSubqAliases()) {\n      QBExpr qbexpr = qb.getSubqForAlias(alias);\n      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));\n    }\n    ...\n}\n```\n\n## 优化器\n\n上面也已经涉及到优化器optimizer，  \n\n### optimizer的主要功能\n>（1）将多 multiple join 合并为一个 multi-way join；  \n>（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；  \n>（3）消减不必要的列；   \n>（4）在表扫描操作中推行使用断言（predicate）；  \n>（5）对于已分区的表，消减不必要的分区；  \n>（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。\n\n\n### 追踪Optimizer.initialize\n``` java\npublic void initialize(HiveConf hiveConf) {\n    // 往这里添加优化器，默认加下面两个，其他的根据conf配置添加\n    transformations = new ArrayList<Transform>();\n\n    // Add the additional postprocessing transformations needed if\n    // we are translating Calcite operators into Hive operators.\n    transformations.add(new HiveOpConverterPostProc());\n\n    // Add the transformation that computes the lineage information.\n    transformations.add(new Generator());\n    ...\n}\n\npublic ParseContext optimize() throws SemanticException {\n    // 执行每个优化器Transform的transform信息进行\n    // ParseContext的优化\n    for (Transform t : transformations) {\n        pctx = t.transform(pctx);\n    }\n    return pctx;\n}\n```\n\n## 未完待续，join operator","source":"_posts/2020/article_15_HIVE源码学习-执行计划Operators和优化Optimizers.md","raw":"---\ntitle: HIVE源码学习-执行计划Operators和优化Optimizers\ncatalog: true\ndate: 2020-05-02 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 逻辑执行\n\n### 首先看下之前的总体处理流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\nhive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。\n\n### 首先看一个命令explain {SQL}\n可以打印出执行sql对应的OperatorTree,  \n效果如下\n```\nhive> explain select count(1) from test_user group by `name`;\nOK\nSTAGE DEPENDENCIES:\n  Stage-1 is a root stage\n  Stage-0 depends on stages: Stage-1\n\nSTAGE PLANS:\n  Stage: Stage-1\n    Map Reduce\n      Map Operator Tree:\n          TableScan\n            alias: test_user\n            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n            Select Operator\n              expressions: name (type: string)\n              outputColumnNames: name\n              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n              Group By Operator\n                aggregations: count(1)\n                keys: name (type: string)\n                mode: hash\n                outputColumnNames: _col0, _col1\n                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                Reduce Output Operator\n                  key expressions: _col0 (type: string)\n                  sort order: +\n                  Map-reduce partition columns: _col0 (type: string)\n                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE\n                  value expressions: _col1 (type: bigint)\n      Reduce Operator Tree:\n        Group By Operator\n          aggregations: count(VALUE._col0)\n          keys: KEY._col0 (type: string)\n          mode: mergepartial\n          outputColumnNames: _col0, _col1\n          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n          Select Operator\n            expressions: _col1 (type: bigint)\n            outputColumnNames: _col0\n            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n            File Output Operator\n              compressed: false\n              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n              table:\n                  input format: org.apache.hadoop.mapred.TextInputFormat\n                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n\n  Stage: Stage-0\n    Fetch Operator\n      limit: -1\n      Processor Tree:\n        ListSink\n\nTime taken: 1.999 seconds, Fetched: 52 row(s)\n```\n\n对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator\n![operator](/img/mypost/operator.png)\n\n### 继续跟踪大法，从Driver的compile开始\n定位到下面这行，进入\n>sem.analyze(tree, ctx);\n\n``` java\npublic void analyze(ASTNode ast, Context ctx) throws SemanticException {\n    ...\n    analyzeInternal(ast); //进入\n}\n```\n\n继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了\n\n``` java\nvoid analyzeInternal(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    // 1. Generate Resolved Parse tree from syntax tree\n    LOG.info(\"Starting Semantic Analysis\");\n    if (!genResolvedParseTree(ast, plannerCtx)) { // 这边将每个AST节点转换为query block，跟进去看看\n      return;\n    }\n    // 2. Gen OP Tree from resolved Parse Tree\n    Operator sinkOp = genOPTree(ast, plannerCtx); //生成OperatorTree\n    ...\n    // 7. Perform Logical optimization\n    // 进行了查询优化\n    Optimizer optm = new Optimizer();\n    optm.setPctx(pCtx);\n    optm.initialize(conf);\n    pCtx = optm.optimize();\n}\n```\n\n``` java\nboolean genResolvedParseTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException {\n    ...\n    // 4. continue analyzing from the child ASTNode.\n    Phase1Ctx ctx_1 = initPhase1Ctx();\n    preProcessForInsert(child, qb);\n    if (!doPhase1(child, qb, ctx_1, plannerCtx)) { //这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充\n      // if phase1Result false return\n      return false;\n    }\n    ...\n    getMetaData(qb); //从元数据获取上面explain中如下信息\n                  //table: input，output，serde等\n}\n```\n\n``` java\npublic boolean doPhase1(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)\n      throws SemanticException {\n    ...\n    switch (ast.getToken().getType()) { //判断AST节点类型\n        case HiveParser.TOK_SELECTDI:\n        ...\n        case HiveParser.TOK_SELECT:\n        ...\n        case HiveParser.TOK_WHERE:\n        ...\n        case HiveParser.TOK_INSERT_INTO:\n        ...\n        ...\n    }\n}\n```\n\n继续跟上面的genOPTree，跳转到genPlan\n\ngenPlan是一次如下的深度优先遍历生成树\n\n``` java\nprivate Operator genPlan(QB parent, QBExpr qbexpr) throws SemanticException {\n    if (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) {\n      boolean skipAmbiguityCheck = viewSelect == null && parent.isTopLevelSelectStarQuery();\n      return genPlan(qbexpr.getQB(), skipAmbiguityCheck);\n    }\n    if (qbexpr.getOpcode() == QBExpr.Opcode.UNION) {\n      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());\n      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());\n\n      return genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),\n          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);\n    }\n}\n\npublic Operator genPlan(QB qb) throws SemanticException {\n    return genPlan(qb, false);\n}\n\npublic Operator genPlan(QB qb, boolean skipAmbiguityCheck)\n      throws SemanticException {\n    for (String alias : qb.getSubqAliases()) {\n      QBExpr qbexpr = qb.getSubqForAlias(alias);\n      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));\n    }\n    ...\n}\n```\n\n## 优化器\n\n上面也已经涉及到优化器optimizer，  \n\n### optimizer的主要功能\n>（1）将多 multiple join 合并为一个 multi-way join；  \n>（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；  \n>（3）消减不必要的列；   \n>（4）在表扫描操作中推行使用断言（predicate）；  \n>（5）对于已分区的表，消减不必要的分区；  \n>（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。\n\n\n### 追踪Optimizer.initialize\n``` java\npublic void initialize(HiveConf hiveConf) {\n    // 往这里添加优化器，默认加下面两个，其他的根据conf配置添加\n    transformations = new ArrayList<Transform>();\n\n    // Add the additional postprocessing transformations needed if\n    // we are translating Calcite operators into Hive operators.\n    transformations.add(new HiveOpConverterPostProc());\n\n    // Add the transformation that computes the lineage information.\n    transformations.add(new Generator());\n    ...\n}\n\npublic ParseContext optimize() throws SemanticException {\n    // 执行每个优化器Transform的transform信息进行\n    // ParseContext的优化\n    for (Transform t : transformations) {\n        pctx = t.transform(pctx);\n    }\n    return pctx;\n}\n```\n\n## 未完待续，join operator","slug":"2020/article_15_HIVE源码学习-执行计划Operators和优化Optimizers","published":1,"updated":"2021-01-27T04:46:28.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh751002l0770rya2fvik","content":"<h2 id=\"逻辑执行\">逻辑执行</h2>\n<h3 id=\"首先看下之前的总体处理流程\">首先看下之前的总体处理流程</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>hive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。</p>\n<h3 id=\"首先看一个命令explain-sql\">首先看一个命令explain {SQL}</h3>\n<p>可以打印出执行sql对应的OperatorTree,<br>\n效果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; explain select count(1) from test_user group by `name`;</span><br><span class=\"line\">OK</span><br><span class=\"line\">STAGE DEPENDENCIES:</span><br><span class=\"line\">  Stage-1 is a root stage</span><br><span class=\"line\">  Stage-0 depends on stages: Stage-1</span><br><span class=\"line\"></span><br><span class=\"line\">STAGE PLANS:</span><br><span class=\"line\">  Stage: Stage-1</span><br><span class=\"line\">    Map Reduce</span><br><span class=\"line\">      Map Operator Tree:</span><br><span class=\"line\">          TableScan</span><br><span class=\"line\">            alias: test_user</span><br><span class=\"line\">            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            Select Operator</span><br><span class=\"line\">              expressions: name (type: string)</span><br><span class=\"line\">              outputColumnNames: name</span><br><span class=\"line\">              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              Group By Operator</span><br><span class=\"line\">                aggregations: count(1)</span><br><span class=\"line\">                keys: name (type: string)</span><br><span class=\"line\">                mode: hash</span><br><span class=\"line\">                outputColumnNames: _col0, _col1</span><br><span class=\"line\">                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                Reduce Output Operator</span><br><span class=\"line\">                  key expressions: _col0 (type: string)</span><br><span class=\"line\">                  sort order: +</span><br><span class=\"line\">                  Map-reduce partition columns: _col0 (type: string)</span><br><span class=\"line\">                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                  value expressions: _col1 (type: bigint)</span><br><span class=\"line\">      Reduce Operator Tree:</span><br><span class=\"line\">        Group By Operator</span><br><span class=\"line\">          aggregations: count(VALUE._col0)</span><br><span class=\"line\">          keys: KEY._col0 (type: string)</span><br><span class=\"line\">          mode: mergepartial</span><br><span class=\"line\">          outputColumnNames: _col0, _col1</span><br><span class=\"line\">          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">          Select Operator</span><br><span class=\"line\">            expressions: _col1 (type: bigint)</span><br><span class=\"line\">            outputColumnNames: _col0</span><br><span class=\"line\">            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            File Output Operator</span><br><span class=\"line\">              compressed: false</span><br><span class=\"line\">              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              table:</span><br><span class=\"line\">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class=\"line\">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class=\"line\">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class=\"line\"></span><br><span class=\"line\">  Stage: Stage-0</span><br><span class=\"line\">    Fetch Operator</span><br><span class=\"line\">      limit: -1</span><br><span class=\"line\">      Processor Tree:</span><br><span class=\"line\">        ListSink</span><br><span class=\"line\"></span><br><span class=\"line\">Time taken: 1.999 seconds, Fetched: 52 row(s)</span><br></pre></td></tr></table></figure>\n<p>对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator<br>\n<img src=\"/img/mypost/operator.png\" alt=\"operator\"></p>\n<h3 id=\"继续跟踪大法从driver的compile开始\">继续跟踪大法，从Driver的compile开始</h3>\n<p>定位到下面这行，进入</p>\n<blockquote>\n<p>sem.analyze(tree, ctx);</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">analyze</span><span class=\"params\">(ASTNode ast, Context ctx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analyzeInternal(ast); <span class=\"comment\">//进入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">analyzeInternal</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Generate Resolved Parse tree from syntax tree</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Starting Semantic Analysis\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!genResolvedParseTree(ast, plannerCtx)) &#123; <span class=\"comment\">// 这边将每个AST节点转换为query block，跟进去看看</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. Gen OP Tree from resolved Parse Tree</span></span><br><span class=\"line\">    Operator sinkOp = genOPTree(ast, plannerCtx); <span class=\"comment\">//生成OperatorTree</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 7. Perform Logical optimization</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行了查询优化</span></span><br><span class=\"line\">    Optimizer optm = <span class=\"keyword\">new</span> Optimizer();</span><br><span class=\"line\">    optm.setPctx(pCtx);</span><br><span class=\"line\">    optm.initialize(conf);</span><br><span class=\"line\">    pCtx = optm.optimize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">genResolvedParseTree</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 4. continue analyzing from the child ASTNode.</span></span><br><span class=\"line\">    Phase1Ctx ctx_1 = initPhase1Ctx();</span><br><span class=\"line\">    preProcessForInsert(child, qb);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doPhase1(child, qb, ctx_1, plannerCtx)) &#123; <span class=\"comment\">//这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充</span></span><br><span class=\"line\">      <span class=\"comment\">// if phase1Result false return</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    getMetaData(qb); <span class=\"comment\">//从元数据获取上面explain中如下信息</span></span><br><span class=\"line\">                  <span class=\"comment\">//table: input，output，serde等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doPhase1</span><span class=\"params\">(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ast.getToken().getType()) &#123; <span class=\"comment\">//判断AST节点类型</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECTDI:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECT:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_WHERE:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_INSERT_INTO:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟上面的genOPTree，跳转到genPlan</p>\n<p>genPlan是一次如下的深度优先遍历生成树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB parent, QBExpr qbexpr)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> skipAmbiguityCheck = viewSelect == <span class=\"keyword\">null</span> &amp;&amp; parent.isTopLevelSelectStarQuery();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> genPlan(qbexpr.getQB(), skipAmbiguityCheck);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.UNION) &#123;</span><br><span class=\"line\">      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());</span><br><span class=\"line\">      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),</span><br><span class=\"line\">          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> genPlan(qb, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb, <span class=\"keyword\">boolean</span> skipAmbiguityCheck)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String alias : qb.getSubqAliases()) &#123;</span><br><span class=\"line\">      QBExpr qbexpr = qb.getSubqForAlias(alias);</span><br><span class=\"line\">      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器\">优化器</h2>\n<p>上面也已经涉及到优化器optimizer，</p>\n<h3 id=\"optimizer的主要功能\">optimizer的主要功能</h3>\n<blockquote>\n<p>（1）将多 multiple join 合并为一个 multi-way join；<br>\n（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；<br>\n（3）消减不必要的列；<br>\n（4）在表扫描操作中推行使用断言（predicate）；<br>\n（5）对于已分区的表，消减不必要的分区；<br>\n（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。</p>\n</blockquote>\n<h3 id=\"追踪optimizerinitialize\">追踪Optimizer.initialize</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(HiveConf hiveConf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 往这里添加优化器，默认加下面两个，其他的根据conf配置添加</span></span><br><span class=\"line\">    transformations = <span class=\"keyword\">new</span> ArrayList&lt;Transform&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the additional postprocessing transformations needed if</span></span><br><span class=\"line\">    <span class=\"comment\">// we are translating Calcite operators into Hive operators.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> HiveOpConverterPostProc());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the transformation that computes the lineage information.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> Generator());</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ParseContext <span class=\"title\">optimize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行每个优化器Transform的transform信息进行</span></span><br><span class=\"line\">    <span class=\"comment\">// ParseContext的优化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Transform t : transformations) &#123;</span><br><span class=\"line\">        pctx = t.transform(pctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pctx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续join-operator\">未完待续，join operator</h2>\n","excerpt":"","more":"<h2>逻辑执行</h2>\n<h3>首先看下之前的总体处理流程</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>hive在sql解析后生成了AST树，然后的处理是通过SemanticAnalyzer将AST变成逻辑执行计划OperatorTree。</p>\n<h3>首先看一个命令explain {SQL}</h3>\n<p>可以打印出执行sql对应的OperatorTree,<br>\n效果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; explain select count(1) from test_user group by `name`;</span><br><span class=\"line\">OK</span><br><span class=\"line\">STAGE DEPENDENCIES:</span><br><span class=\"line\">  Stage-1 is a root stage</span><br><span class=\"line\">  Stage-0 depends on stages: Stage-1</span><br><span class=\"line\"></span><br><span class=\"line\">STAGE PLANS:</span><br><span class=\"line\">  Stage: Stage-1</span><br><span class=\"line\">    Map Reduce</span><br><span class=\"line\">      Map Operator Tree:</span><br><span class=\"line\">          TableScan</span><br><span class=\"line\">            alias: test_user</span><br><span class=\"line\">            Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            Select Operator</span><br><span class=\"line\">              expressions: name (type: string)</span><br><span class=\"line\">              outputColumnNames: name</span><br><span class=\"line\">              Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              Group By Operator</span><br><span class=\"line\">                aggregations: count(1)</span><br><span class=\"line\">                keys: name (type: string)</span><br><span class=\"line\">                mode: hash</span><br><span class=\"line\">                outputColumnNames: _col0, _col1</span><br><span class=\"line\">                Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                Reduce Output Operator</span><br><span class=\"line\">                  key expressions: _col0 (type: string)</span><br><span class=\"line\">                  sort order: +</span><br><span class=\"line\">                  Map-reduce partition columns: _col0 (type: string)</span><br><span class=\"line\">                  Statistics: Num rows: 2 Data size: 16 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">                  value expressions: _col1 (type: bigint)</span><br><span class=\"line\">      Reduce Operator Tree:</span><br><span class=\"line\">        Group By Operator</span><br><span class=\"line\">          aggregations: count(VALUE._col0)</span><br><span class=\"line\">          keys: KEY._col0 (type: string)</span><br><span class=\"line\">          mode: mergepartial</span><br><span class=\"line\">          outputColumnNames: _col0, _col1</span><br><span class=\"line\">          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">          Select Operator</span><br><span class=\"line\">            expressions: _col1 (type: bigint)</span><br><span class=\"line\">            outputColumnNames: _col0</span><br><span class=\"line\">            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">            File Output Operator</span><br><span class=\"line\">              compressed: false</span><br><span class=\"line\">              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE</span><br><span class=\"line\">              table:</span><br><span class=\"line\">                  input format: org.apache.hadoop.mapred.TextInputFormat</span><br><span class=\"line\">                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat</span><br><span class=\"line\">                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class=\"line\"></span><br><span class=\"line\">  Stage: Stage-0</span><br><span class=\"line\">    Fetch Operator</span><br><span class=\"line\">      limit: -1</span><br><span class=\"line\">      Processor Tree:</span><br><span class=\"line\">        ListSink</span><br><span class=\"line\"></span><br><span class=\"line\">Time taken: 1.999 seconds, Fetched: 52 row(s)</span><br></pre></td></tr></table></figure>\n<p>对应下下面这张Operator的列表，可以稍微了解到对SQL对应的每个operator<br>\n<img src=\"/img/mypost/operator.png\" alt=\"operator\"></p>\n<h3>继续跟踪大法，从Driver的compile开始</h3>\n<p>定位到下面这行，进入</p>\n<blockquote>\n<p>sem.analyze(tree, ctx);</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">analyze</span><span class=\"params\">(ASTNode ast, Context ctx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analyzeInternal(ast); <span class=\"comment\">//进入</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入analyzeInternal方法，这时已经定位到SemanticAnalyzer类了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">analyzeInternal</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Generate Resolved Parse tree from syntax tree</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Starting Semantic Analysis\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!genResolvedParseTree(ast, plannerCtx)) &#123; <span class=\"comment\">// 这边将每个AST节点转换为query block，跟进去看看</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. Gen OP Tree from resolved Parse Tree</span></span><br><span class=\"line\">    Operator sinkOp = genOPTree(ast, plannerCtx); <span class=\"comment\">//生成OperatorTree</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 7. Perform Logical optimization</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行了查询优化</span></span><br><span class=\"line\">    Optimizer optm = <span class=\"keyword\">new</span> Optimizer();</span><br><span class=\"line\">    optm.setPctx(pCtx);</span><br><span class=\"line\">    optm.initialize(conf);</span><br><span class=\"line\">    pCtx = optm.optimize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">genResolvedParseTree</span><span class=\"params\">(ASTNode ast, PlannerContext plannerCtx)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 4. continue analyzing from the child ASTNode.</span></span><br><span class=\"line\">    Phase1Ctx ctx_1 = initPhase1Ctx();</span><br><span class=\"line\">    preProcessForInsert(child, qb);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doPhase1(child, qb, ctx_1, plannerCtx)) &#123; <span class=\"comment\">//这里面基本就是对于每种的转换逻辑，将空的qb传进去进行填充</span></span><br><span class=\"line\">      <span class=\"comment\">// if phase1Result false return</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    getMetaData(qb); <span class=\"comment\">//从元数据获取上面explain中如下信息</span></span><br><span class=\"line\">                  <span class=\"comment\">//table: input，output，serde等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doPhase1</span><span class=\"params\">(ASTNode ast, QB qb, Phase1Ctx ctx_1, PlannerContext plannerCtx)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ast.getToken().getType()) &#123; <span class=\"comment\">//判断AST节点类型</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECTDI:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_SELECT:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_WHERE:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HiveParser.TOK_INSERT_INTO:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟上面的genOPTree，跳转到genPlan</p>\n<p>genPlan是一次如下的深度优先遍历生成树</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB parent, QBExpr qbexpr)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.NULLOP) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> skipAmbiguityCheck = viewSelect == <span class=\"keyword\">null</span> &amp;&amp; parent.isTopLevelSelectStarQuery();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> genPlan(qbexpr.getQB(), skipAmbiguityCheck);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (qbexpr.getOpcode() == QBExpr.Opcode.UNION) &#123;</span><br><span class=\"line\">      Operator qbexpr1Ops = genPlan(parent, qbexpr.getQBExpr1());</span><br><span class=\"line\">      Operator qbexpr2Ops = genPlan(parent, qbexpr.getQBExpr2());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> genUnionPlan(qbexpr.getAlias(), qbexpr.getQBExpr1().getAlias(),</span><br><span class=\"line\">          qbexpr1Ops, qbexpr.getQBExpr2().getAlias(), qbexpr2Ops);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb)</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> genPlan(qb, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Operator <span class=\"title\">genPlan</span><span class=\"params\">(QB qb, <span class=\"keyword\">boolean</span> skipAmbiguityCheck)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String alias : qb.getSubqAliases()) &#123;</span><br><span class=\"line\">      QBExpr qbexpr = qb.getSubqForAlias(alias);</span><br><span class=\"line\">      aliasToOpInfo.put(alias, genPlan(qb, qbexpr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>优化器</h2>\n<p>上面也已经涉及到优化器optimizer，</p>\n<h3>optimizer的主要功能</h3>\n<blockquote>\n<p>（1）将多 multiple join 合并为一个 multi-way join；<br>\n（2）对join、group-by 和自定义的 map-reduce 操作重新进行划分；<br>\n（3）消减不必要的列；<br>\n（4）在表扫描操作中推行使用断言（predicate）；<br>\n（5）对于已分区的表，消减不必要的分区；<br>\n（6）在抽样（sampling）查询中，消减不必要的桶。此外，优化器还能增加局部聚合操作用于处理大分组聚合（grouped aggregations）和 增加再分区操作用于处理不对称（skew）的分组聚合。</p>\n</blockquote>\n<h3>追踪Optimizer.initialize</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(HiveConf hiveConf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 往这里添加优化器，默认加下面两个，其他的根据conf配置添加</span></span><br><span class=\"line\">    transformations = <span class=\"keyword\">new</span> ArrayList&lt;Transform&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the additional postprocessing transformations needed if</span></span><br><span class=\"line\">    <span class=\"comment\">// we are translating Calcite operators into Hive operators.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> HiveOpConverterPostProc());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the transformation that computes the lineage information.</span></span><br><span class=\"line\">    transformations.add(<span class=\"keyword\">new</span> Generator());</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ParseContext <span class=\"title\">optimize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SemanticException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行每个优化器Transform的transform信息进行</span></span><br><span class=\"line\">    <span class=\"comment\">// ParseContext的优化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Transform t : transformations) &#123;</span><br><span class=\"line\">        pctx = t.transform(pctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pctx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>未完待续，join operator</h2>\n"},{"title":"HIVE源码学习--从CliDriver跟踪整个执行流程","catalog":true,"date":"2020-04-28T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","source":"_posts/2020/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程.md","raw":"---\ntitle: HIVE源码学习--从CliDriver跟踪整个执行流程\ncatalog: true\ndate: 2020-04-28 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\n对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。\n\n本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。\n\n## 准备工作\n\n在hadoop与hive的部署调试篇完成本机部署与远程debug操作。\n\n本次hive调试版本都为1.2.1。\n\n## SHOW CODE\n\n先借鉴一份整体的流程\n\n```\nHive SQL - (Parser) -> AST - (Semantic Analyze) -> QB -  \n(Logical Plan) -> Operator Tree - (Physical Plan) -> \nTask Tree - (Physical Optim) -> Task Tree\n\n主要有三大块，SQL解析，逻辑执行计划，物理执行计划\n```\n\n找到入口类org.apache.hadoop.hive.hive.cli.CliDriver\n断点打在其中的main函数的\n\n>int ret = new CliDriver().run(args);\n\n启动debug。\n\n追踪到run函数，run中上面就是一些初始化类的操作  \n追踪到最后的executeDriver。\n\nexecuteDriver 如果是初始化hive客户端时，会直接返回状态0。 \n\n如果是有命令执行的时候\nexecuteDriver中主要是读取每一行，到分号为止并执行\n>ret = cli.processLine(line, true); //line为执行sql\n\n进入processLine，上面绑定重写了退出信号interruptSignal的处理，  \n下面真正进入执行的为\n>ret = processCmd(command);\n\nprocessCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。\n>ret = processLocalCmd(cmd, proc, ss);\n\n找到processLocalCmd的\n>ret = qp.run(cmd).getResponseCode();\n\n继续进入 run 的 runInternal, 找到\n>ret = compileInternal(command);\n\n进入compileInternal 的 compile\ncompile这边比较重要，重点看一下。\n\n``` java\n...\nASTNode tree = pd.parse(command, ctx); //SQL解析出AST树，这边用的是antlr3\n...\nSessionState.get().initTxnMgr(conf); // 初始化一个事务管理，记录这次query的信息的\n...\nhook.preAnalyze(hookCtx, tree); // 然后在analyze前后有两个hive hook的执行，如果有的话\nsem.analyze(tree, ctx); //创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看\nhook.postAnalyze(hookCtx, sem.getRootTasks());\n...\n```\n\n然后继续跳回到runInternal，执行至，进入\n>ret = execute();\n\n然后执行\n``` java\nPRE_EXEC_HOOK //执行hook\nDriverContext driverCxt = new DriverContext(ctx); //初始化运行容器\ndriverCxt.prepare(plan);\n// Add root Tasks to runnable\nfor (Task<? extends Serializable> tsk : plan.getRootTasks()) {\n    driverCxt.addToRunnable(tsk); //添加running任务，任务会进入一个队列\n}\n...\nTaskRunner tskRun = driverCxt.pollFinished(); // poll已经完成了的任务, 加到hookContext\nhookContext.addCompleteTask(tskRun);\n...\n// 如果中间exit，会触发ON_FAILURE_HOOK\n... \n// 遍历子任务加到running\nif (tsk.getChildTasks() != null) {\n    for (Task<? extends Serializable> child : tsk.getChildTasks()) {\n        if (DriverContext.isLaunchable(child)) {\n            driverCxt.addToRunnable(child);\n        }\n    }\n}\n// 调用POST_EXEC_HOOK\n// 然后计算了一波cpu是使用情况\nplan.setDone(); //完成\n```\n\n## 特别感谢\n- [csdn大佬](https://blog.csdn.net/wzq6578702/article/list/3)","slug":"2020/article_10_HIVE源码学习-从CliDriver跟踪整个执行流程","published":1,"updated":"2021-01-27T04:46:28.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh753002m0770ukts7y2d","content":"<h2 id=\"前言\">前言</h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2 id=\"准备工作\">准备工作</h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2 id=\"show-code\">SHOW CODE</h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"特别感谢\">特别感谢</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\" target=\"_blank\" rel=\"external\">csdn大佬</a></li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>对接和使用hive的上层组件也很多了，hiveserver2，beeline，metastore，hivehook等，但没好好调试过hive，计划进行一次比较狠的补课，让自己对hive内部的很多实现有一个基础的认识，同时自定义实现一些模块。</p>\n<p>本次是hive源码层的调试与实验的开坑，初步想象的过程有：hive执行大致全流程调试，序列化反序列化，执行计划，metastore，hivehook，udf，hiveserver2等，会分好几篇来写，算是学习整合记录。</p>\n<h2>准备工作</h2>\n<p>在hadoop与hive的部署调试篇完成本机部署与远程debug操作。</p>\n<p>本次hive调试版本都为1.2.1。</p>\n<h2>SHOW CODE</h2>\n<p>先借鉴一份整体的流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hive SQL - (Parser) -&gt; AST - (Semantic Analyze) -&gt; QB -  </span><br><span class=\"line\">(Logical Plan) -&gt; Operator Tree - (Physical Plan) -&gt; </span><br><span class=\"line\">Task Tree - (Physical Optim) -&gt; Task Tree</span><br><span class=\"line\"></span><br><span class=\"line\">主要有三大块，SQL解析，逻辑执行计划，物理执行计划</span><br></pre></td></tr></table></figure>\n<p>找到入口类org.apache.hadoop.hive.hive.cli.CliDriver<br>\n断点打在其中的main函数的</p>\n<blockquote>\n<p>int ret = new CliDriver().run(args);</p>\n</blockquote>\n<p>启动debug。</p>\n<p>追踪到run函数，run中上面就是一些初始化类的操作<br>\n追踪到最后的executeDriver。</p>\n<p>executeDriver 如果是初始化hive客户端时，会直接返回状态0。</p>\n<p>如果是有命令执行的时候<br>\nexecuteDriver中主要是读取每一行，到分号为止并执行</p>\n<blockquote>\n<p>ret = cli.processLine(line, true); //line为执行sql</p>\n</blockquote>\n<p>进入processLine，上面绑定重写了退出信号interruptSignal的处理，<br>\n下面真正进入执行的为</p>\n<blockquote>\n<p>ret = processCmd(command);</p>\n</blockquote>\n<p>processCmd判断了一下sql是不是quit，source，!的情况，这边还是走他默认的流程。</p>\n<blockquote>\n<p>ret = processLocalCmd(cmd, proc, ss);</p>\n</blockquote>\n<p>找到processLocalCmd的</p>\n<blockquote>\n<p>ret = qp.run(cmd).getResponseCode();</p>\n</blockquote>\n<p>继续进入 run 的 runInternal, 找到</p>\n<blockquote>\n<p>ret = compileInternal(command);</p>\n</blockquote>\n<p>进入compileInternal 的 compile<br>\ncompile这边比较重要，重点看一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ASTNode tree = pd.parse(command, ctx); <span class=\"comment\">//SQL解析出AST树，这边用的是antlr3</span></span><br><span class=\"line\">...</span><br><span class=\"line\">SessionState.get().initTxnMgr(conf); <span class=\"comment\">// 初始化一个事务管理，记录这次query的信息的</span></span><br><span class=\"line\">...</span><br><span class=\"line\">hook.preAnalyze(hookCtx, tree); <span class=\"comment\">// 然后在analyze前后有两个hive hook的执行，如果有的话</span></span><br><span class=\"line\">sem.analyze(tree, ctx); <span class=\"comment\">//创建逻辑和物理执行计划，并优化，这里面的执行逻辑很多，后续再详细看</span></span><br><span class=\"line\">hook.postAnalyze(hookCtx, sem.getRootTasks());</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>然后继续跳回到runInternal，执行至，进入</p>\n<blockquote>\n<p>ret = execute();</p>\n</blockquote>\n<p>然后执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRE_EXEC_HOOK <span class=\"comment\">//执行hook</span></span><br><span class=\"line\">DriverContext driverCxt = <span class=\"keyword\">new</span> DriverContext(ctx); <span class=\"comment\">//初始化运行容器</span></span><br><span class=\"line\">driverCxt.prepare(plan);</span><br><span class=\"line\"><span class=\"comment\">// Add root Tasks to runnable</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; tsk : plan.getRootTasks()) &#123;</span><br><span class=\"line\">    driverCxt.addToRunnable(tsk); <span class=\"comment\">//添加running任务，任务会进入一个队列</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">TaskRunner tskRun = driverCxt.pollFinished(); <span class=\"comment\">// poll已经完成了的任务, 加到hookContext</span></span><br><span class=\"line\">hookContext.addCompleteTask(tskRun);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 如果中间exit，会触发ON_FAILURE_HOOK</span></span><br><span class=\"line\">... </span><br><span class=\"line\"><span class=\"comment\">// 遍历子任务加到running</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tsk.getChildTasks() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Task&lt;? extends Serializable&gt; child : tsk.getChildTasks()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (DriverContext.isLaunchable(child)) &#123;</span><br><span class=\"line\">            driverCxt.addToRunnable(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用POST_EXEC_HOOK</span></span><br><span class=\"line\"><span class=\"comment\">// 然后计算了一波cpu是使用情况</span></span><br><span class=\"line\">plan.setDone(); <span class=\"comment\">//完成</span></span><br></pre></td></tr></table></figure>\n<h2>特别感谢</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/wzq6578702/article/list/3\">csdn大佬</a></li>\n</ul>\n"},{"title":"HIVE源码学习--实现一个自定义的HIVE序列化与反序列化器","catalog":true,"date":"2020-05-01T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>1.2.1</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","source":"_posts/2020/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化.md","raw":"---\ntitle: HIVE源码学习--实现一个自定义的HIVE序列化与反序列化器\ncatalog: true\ndate: 2020-05-01 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n## 前言\n\nhive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，  \nhive有一个serde模块，其中就有很多的序列化器和反序列化器，\n- 序列化(serialize)是将导入的数据转成hadoop的Writable格式\n- 反序列化(deserialize)是select时将hadoop上的数据导入到内存object\n\n当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。\n\n## 实操\n\n### 数据准备\n\n这边序列化一个比较简单的格式,\n但对于其他的道理是一样的，一行对应于表格的一行数据。\n```\nid=1,name=\"jack\",age=20\nid=2,name=\"john\",age=30\n```\n\n### 新建项目myserde\n\n新建maven项目，引入hive-serde模块\n``` xml\n<dependency>\n      <groupId>org.apache.hive</groupId>\n      <artifactId>hive-serde</artifactId>\n      <version>1.2.1</version>\n</dependency>\n```\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hive.serde.serdeConstants;\nimport org.apache.hadoop.hive.serde2.AbstractSerDe;\nimport org.apache.hadoop.hive.serde2.SerDeException;\nimport org.apache.hadoop.hive.serde2.SerDeStats;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\nimport org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\nimport org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.Writable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.util.*;\n\n/**\n * @description: 自定义序列化\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/4/30 1:55 下午\n */\n // 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize\npublic class MySerde extends AbstractSerDe {\n\n    private static final Logger logger = LoggerFactory.getLogger(MySerde.class);\n\n    // 用于存储字段名\n    private List<String> columnNames;\n\n    // 用于存储字段类型\n    private List<TypeInfo> columnTypes;\n    private ObjectInspector objectInspector;\n\n    // 初始化，在serialize和deserialize前都会执行initialize\n    @Override\n    public void initialize(Configuration configuration, Properties tableProperties, Properties partitionProperties) throws SerDeException {\n        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);\n        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n        columnNames = Arrays.asList(columnNameString.split(\",\"));\n        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);\n\n        List<ObjectInspector> columnOIs = new ArrayList<>();\n        ObjectInspector oi;\n        for(int i = 0; i < columnNames.size(); i++) {\n            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));\n            columnOIs.add(oi);\n        }\n        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);\n    }\n\n    // 重载的方法，直接调用上面的实现\n    @Override\n    public void initialize(@Nullable Configuration configuration, Properties properties) throws SerDeException {\n        this.initialize(configuration, properties, null);\n    }\n\n    @Override\n    public Class<? extends Writable> getSerializedClass() {\n        return null;\n    }\n\n    // o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序\n    // 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。\n    @Override\n    public Writable serialize(Object o, ObjectInspector objInspector) throws SerDeException {\n        Object[] arr = (Object[]) o;\n        List<String> tt = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n            tt.add(String.format(\"%s=%s\", columnNames.get(i), arr[i].toString()));\n        }\n        return new Text(StringUtils.join(tt, \",\"));\n    }\n\n    @Override\n    public SerDeStats getSerDeStats() {\n        return null;\n    }\n\n    // writable转为字符串，其中包含了一行的信息，如key=value,key1=value1\n    // 分割后存到map中，然后按照字段的顺序，放到object中\n    // 中间还需要做类型处理，这边只简单的做了string和int\n    @Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        Text text = (Text) writable;\n        Map<String, String> map = new HashMap<>();\n        String[] cols = text.toString().split(\",\");\n        for(String col: cols) {\n            String[] item = col.split(\"=\");\n            map.put(item[0], item[1]);\n        }\n        ArrayList<Object> row = new ArrayList<>();\n        Object obj = null;\n        for(int i = 0; i < columnNames.size(); i++){\n            TypeInfo typeInfo = columnTypes.get(i);\n            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;\n            if(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) {\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING){\n                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));\n                }\n                if(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) {\n                    obj = Integer.parseInt(map.get(columnNames.get(i)));\n                }\n            }\n            row.add(obj);\n        }\n        return row;\n    }\n\n    @Override\n    public ObjectInspector getObjectInspector() throws SerDeException {\n        return objectInspector;\n    }\n\n    @Override\n    public String getConfigurationErrors() {\n        return super.getConfigurationErrors();\n    }\n\n    @Override\n    public boolean shouldStoreFieldsInMetastore(Map<String, String> tableParams) {\n        return super.shouldStoreFieldsInMetastore(tableParams);\n    }\n}\n\n```\n\n\n### 建表与调试\n\n编译完刚才的项目后\n打开本地hive\n引入刚才开发的包\n> add jar (项目路径)/target/xxx.jar\n\n建表，这里row format改为自己的序列化器\n``` sql\nCREATE EXTERNAL TABLE `test_serde`(\n    `id` int,\n    `name` string,\n    `age` int\n)\nROW FORMAT SERDE 'cn.ganjiacheng.MySerde'\nSTORED AS TEXTFILE;\n```\n\n然后导入一份数据，这边直接本地写一份上面的样例数据导入\n> load data local inpath '/本地文件地址' overwrite into table test_serde;\n\n试着查一下结果，走的为deserialize方法，显示的为正常的表格，  \n这边多了引号，到时候可以中间处理去掉即可。\n```\nhive> select * from test_serde;\nOK\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.85 seconds, Fetched: 2 row(s)\n```\n\n再尝试插入一条数据，就会走serialize方法\n```\nhive> insert into table test_serde values(3, \"qwe\", 40);\nQuery ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d\nTotal jobs = 3\nLaunching Job 1 out of 3\nNumber of reduce tasks is set to 0 since there's no reduce operator\nJob running in-process (local Hadoop)\n2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%\n2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%\nEnded Job = job_local853094563_0001\nStage-4 is selected by condition resolver.\nStage-3 is filtered out by condition resolver.\nStage-5 is filtered out by condition resolver.\nMoving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000\nLoading data to table default.test_serde\nTable default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]\nMapReduce Jobs Launched:\nStage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS\nTotal MapReduce CPU Time Spent: 0 msec\nOK\nTime taken: 13.902 seconds\n\nhive> select * from test_serde;\nOK\n3\tqwe\t40\n1\t\"jack\"\t20\n2\t\"john\"\t30\nTime taken: 0.229 seconds, Fetched: 3 row(s)\n```\n\n来到hadoop确认一下\n```\n$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0\n20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nid=3,name=qwe,age=40\n```\n\n## 关于开发时的debug\n\n和部署hive后hive的hive clidriver的debug类似\n\n首先开启\n> hive --debug\n\n会显示正监听8000端口\n\n然后在idea上打开myserde的项目，配置一个Remote，  \nhost为loclahost，port为8000  \nuse module为当前用到的module\n\n在代码中间比如deserialize方法中打上断点，开启remote\n\n然后hive命令行就会进入命令行模式\n\n> add jar (项目路径)/target/xxx.jar\n> use default;  \n> select * from test_serde;\n\n就会触发进入我们打在deserialize上的断点。\n\n## 学习借鉴\n- [Hive系列之SerDe](https://www.jianshu.com/p/9c43f03b97e7)","slug":"2020/article_13_HIVE源码学习-实现一个自定义HIVE序列化与反序列化","published":1,"updated":"2021-01-27T04:46:28.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh754002o0770qffs7run","content":"<h2 id=\"前言\">前言</h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2 id=\"实操\">实操</h2>\n<h3 id=\"数据准备\">数据准备</h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建项目myserde\">新建项目myserde</h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建表与调试\">建表与调试</h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于开发时的debug\">关于开发时的debug</h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2 id=\"学习借鉴\">学习借鉴</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\" target=\"_blank\" rel=\"external\">Hive系列之SerDe</a></li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>hive本身并不存储数据，它用的是hdfs上存储的文件，在与hdfs的文件交互读取和写入的时候需要用到序列化，<br>\nhive有一个serde模块，其中就有很多的序列化器和反序列化器，</p>\n<ul>\n<li>序列化(serialize)是将导入的数据转成hadoop的Writable格式</li>\n<li>反序列化(deserialize)是select时将hadoop上的数据导入到内存object</li>\n</ul>\n<p>当然也有一部分不放在serde模块里，但一样的是他们都继承自AbstractSerDe，<br>\nhive已实现的有LazySimpleSerde，ColumnarSerde，AvroSerde，ORC，RegexSerde，Thrift，Parquet，CSV，JSONSerde。且他支持添加自定义的实现，因此就来实现一个。</p>\n<h2>实操</h2>\n<h3>数据准备</h3>\n<p>这边序列化一个比较简单的格式,<br>\n但对于其他的道理是一样的，一行对应于表格的一行数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1,name=&quot;jack&quot;,age=20</span><br><span class=\"line\">id=2,name=&quot;john&quot;,age=30</span><br></pre></td></tr></table></figure>\n<h3>新建项目myserde</h3>\n<p>新建maven项目，引入hive-serde模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-serde<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde.serdeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.AbstractSerDe;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.SerDeStats;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Writable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 自定义序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/4/30 1:55 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">// 继承自AbstractSerDe，主要实现他下面的initialize，serialize，deserialize</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerde</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSerDe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(MySerde.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; columnNames;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储字段类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TypeInfo&gt; columnTypes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectInspector objectInspector;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化，在serialize和deserialize前都会执行initialize</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Configuration configuration, Properties tableProperties, Properties partitionProperties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        String columnNameString = tableProperties.getProperty(serdeConstants.LIST_COLUMNS);</span><br><span class=\"line\">        String columnTypeString = tableProperties.getProperty(serdeConstants.LIST_COLUMN_TYPES);</span><br><span class=\"line\">        columnNames = Arrays.asList(columnNameString.split(<span class=\"string\">\",\"</span>));</span><br><span class=\"line\">        columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeString);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;ObjectInspector&gt; columnOIs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ObjectInspector oi;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++) &#123;</span><br><span class=\"line\">            oi = TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(columnTypes.get(i));</span><br><span class=\"line\">            columnOIs.add(oi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, columnOIs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载的方法，直接调用上面的实现</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(@Nullable Configuration configuration, Properties properties)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialize(configuration, properties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// o是导入的单行数据的数组，objInspector包含了导入的字段信息，这边直接就按顺序</span></span><br><span class=\"line\">    <span class=\"comment\">// 将数据处理成key=value,key1=value1的格式的字符串，并返回Writable格式。</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Writable <span class=\"title\">serialize</span><span class=\"params\">(Object o, ObjectInspector objInspector)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Object[] arr = (Object[]) o;</span><br><span class=\"line\">        List&lt;String&gt; tt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            tt.add(String.format(<span class=\"string\">\"%s=%s\"</span>, columnNames.get(i), arr[i].toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(StringUtils.join(tt, <span class=\"string\">\",\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SerDeStats <span class=\"title\">getSerDeStats</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writable转为字符串，其中包含了一行的信息，如key=value,key1=value1</span></span><br><span class=\"line\">    <span class=\"comment\">// 分割后存到map中，然后按照字段的顺序，放到object中</span></span><br><span class=\"line\">    <span class=\"comment\">// 中间还需要做类型处理，这边只简单的做了string和int</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deserialize</span><span class=\"params\">(Writable writable)</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        Text text = (Text) writable;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        String[] cols = text.toString().split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String col: cols) &#123;</span><br><span class=\"line\">            String[] item = col.split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            map.put(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;Object&gt; row = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; columnNames.size(); i++)&#123;</span><br><span class=\"line\">            TypeInfo typeInfo = columnTypes.get(i);</span><br><span class=\"line\">            PrimitiveTypeInfo pTypeInfo = (PrimitiveTypeInfo)typeInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeInfo.getCategory() == ObjectInspector.Category.PRIMITIVE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.STRING)&#123;</span><br><span class=\"line\">                    obj = StringUtils.defaultString(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pTypeInfo.getPrimitiveCategory() == PrimitiveObjectInspector.PrimitiveCategory.INT) &#123;</span><br><span class=\"line\">                    obj = Integer.parseInt(map.get(columnNames.get(i)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            row.add(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ObjectInspector <span class=\"title\">getObjectInspector</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SerDeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectInspector;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfigurationErrors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getConfigurationErrors();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldStoreFieldsInMetastore</span><span class=\"params\">(Map&lt;String, String&gt; tableParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldStoreFieldsInMetastore(tableParams);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>建表与调试</h3>\n<p>编译完刚才的项目后<br>\n打开本地hive<br>\n引入刚才开发的包</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar</p>\n</blockquote>\n<p>建表，这里row format改为自己的序列化器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTERNAL</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`test_serde`</span>(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"string\">`name`</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    <span class=\"string\">`age`</span> <span class=\"built_in\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">'cn.ganjiacheng.MySerde'</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure>\n<p>然后导入一份数据，这边直接本地写一份上面的样例数据导入</p>\n<blockquote>\n<p>load data local inpath ‘/本地文件地址’ overwrite into table test_serde;</p>\n</blockquote>\n<p>试着查一下结果，走的为deserialize方法，显示的为正常的表格，<br>\n这边多了引号，到时候可以中间处理去掉即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.85 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>\n<p>再尝试插入一条数据，就会走serialize方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; insert into table test_serde values(3, &quot;qwe&quot;, 40);</span><br><span class=\"line\">Query ID = again_20200501164049_6aa10f95-73df-41ac-a9af-9bfdcecb2f7d</span><br><span class=\"line\">Total jobs = 3</span><br><span class=\"line\">Launching Job 1 out of 3</span><br><span class=\"line\">Number of reduce tasks is set to 0 since there&apos;s no reduce operator</span><br><span class=\"line\">Job running in-process (local Hadoop)</span><br><span class=\"line\">2020-05-01 16:41:00,802 Stage-1 map = 0%,  reduce = 0%</span><br><span class=\"line\">2020-05-01 16:41:01,851 Stage-1 map = 100%,  reduce = 0%</span><br><span class=\"line\">Ended Job = job_local853094563_0001</span><br><span class=\"line\">Stage-4 is selected by condition resolver.</span><br><span class=\"line\">Stage-3 is filtered out by condition resolver.</span><br><span class=\"line\">Stage-5 is filtered out by condition resolver.</span><br><span class=\"line\">Moving data to: hdfs://master:9000/user/hive/warehouse/test_serde/.hive-staging_hive_2020-05-01_16-40-49_469_5467796518535031523-1/-ext-10000</span><br><span class=\"line\">Loading data to table default.test_serde</span><br><span class=\"line\">Table default.test_serde stats: [numFiles=2, numRows=1, totalSize=68, rawDataSize=0]</span><br><span class=\"line\">MapReduce Jobs Launched:</span><br><span class=\"line\">Stage-Stage-1:  HDFS Read: 9 HDFS Write: 87 SUCCESS</span><br><span class=\"line\">Total MapReduce CPU Time Spent: 0 msec</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 13.902 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">hive&gt; select * from test_serde;</span><br><span class=\"line\">OK</span><br><span class=\"line\">3\tqwe\t40</span><br><span class=\"line\">1\t&quot;jack&quot;\t20</span><br><span class=\"line\">2\t&quot;john&quot;\t30</span><br><span class=\"line\">Time taken: 0.229 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure>\n<p>来到hadoop确认一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop fs -cat /user/hive/warehouse/test_serde/000000_0</span><br><span class=\"line\">20/05/01 17:06:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">id=3,name=qwe,age=40</span><br></pre></td></tr></table></figure>\n<h2>关于开发时的debug</h2>\n<p>和部署hive后hive的hive clidriver的debug类似</p>\n<p>首先开启</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>会显示正监听8000端口</p>\n<p>然后在idea上打开myserde的项目，配置一个Remote，<br>\nhost为loclahost，port为8000<br>\nuse module为当前用到的module</p>\n<p>在代码中间比如deserialize方法中打上断点，开启remote</p>\n<p>然后hive命令行就会进入命令行模式</p>\n<blockquote>\n<p>add jar (项目路径)/target/xxx.jar<br>\nuse default;<br>\nselect * from test_serde;</p>\n</blockquote>\n<p>就会触发进入我们打在deserialize上的断点。</p>\n<h2>学习借鉴</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/9c43f03b97e7\">Hive系列之SerDe</a></li>\n</ul>\n"},{"title":"HIVE源码学习--实现自定义的UDF，UDAF，UDTF","catalog":true,"date":"2000-05-07T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n# 前言\n\nhive里有三种可以自定义实现的函数，\n> 自定义函数包括三种 UDF、UDAF、UDTF\n> - UDF（User-Defined-Function） 一进一出 ，既一行进一行出  \n> - UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min \n> - UDTF（User-Defined Table-Generating Functions）一进多出，如 explore() ","source":"_posts/2020/article_17_HIVE源码学习-实现自定义的udf.md","raw":"---\ntitle: HIVE源码学习--实现自定义的UDF，UDAF，UDTF\ncatalog: true\ndate: 2000-05-07 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n# 前言\n\nhive里有三种可以自定义实现的函数，\n> 自定义函数包括三种 UDF、UDAF、UDTF\n> - UDF（User-Defined-Function） 一进一出 ，既一行进一行出  \n> - UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min \n> - UDTF（User-Defined Table-Generating Functions）一进多出，如 explore() ","slug":"2020/article_17_HIVE源码学习-实现自定义的udf","published":1,"updated":"2021-01-27T04:46:28.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh756002p07704atkccxl","content":"<h1 id=\"前言\">前言</h1>\n<p>hive里有三种可以自定义实现的函数，</p>\n<blockquote>\n<p>自定义函数包括三种 UDF、UDAF、UDTF</p>\n<ul>\n<li>UDF（User-Defined-Function） 一进一出 ，既一行进一行出</li>\n<li>UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min</li>\n<li>UDTF（User-Defined Table-Generating Functions）一进多出，如 explore()</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h1>前言</h1>\n<p>hive里有三种可以自定义实现的函数，</p>\n<blockquote>\n<p>自定义函数包括三种 UDF、UDAF、UDTF</p>\n<ul>\n<li>UDF（User-Defined-Function） 一进一出 ，既一行进一行出</li>\n<li>UDAF（User- Defined Aggregation Funcation） 聚集函数，多进一出（多行进一行出）。Count/max/min</li>\n<li>UDTF（User-Defined Table-Generating Functions）一进多出，如 explore()</li>\n</ul>\n</blockquote>\n"},{"title":"HIVE源码学习-hivehook尝试表血缘与字段血缘的解析","catalog":true,"date":"2020-05-04T06:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n\n## 前言\n\nhive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个\n\n- driver run的时候\n\n- 执行计划semanticAnalyze前后\n\n- 查询放入job之前\n\n- exec前后\n\n- 执行失败时\n\n下面引用一份完整的hive中hook的流程，包括相应的配置项。\n\n``` java\nDriver.run()\n\n=> HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)\n\n=> Driver.compile()\n\n=> HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)\n\n=> SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)\n\n=> HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)\n\n=> QueryString redactor(hive.exec.query.redactor.hooks)\n\n=> QueryPlan Generation\n\n=> Authorization\n\n=> Driver.execute()\n\n=> ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)\n\n=> TaskRunner\n\n=> if failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)\n\n=> ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)\n\n=> HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)\n```\n\n## 血缘解析\n\n这边要举的具体例子为利用hive自带的血缘解析写一个hook。\n\n首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息\n\n因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。\n\n新建一个maven项目,引用hive-exec，版本按照hive的来\n```\n<dependency>\n    <groupId>org.apache.hive</groupId>\n    <artifactId>hive-exec</artifactId>\n    <version>1.2.1</version>\n</dependency>\n```\n\n直接上代码，表和字段级直接都放里面了\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\nimport org.apache.hadoop.hive.ql.hooks.HookContext;\nimport org.apache.hadoop.hive.ql.hooks.LineageInfo;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/4 3:18 下午\n */\npublic class MyLineagehook implements ExecuteWithHookContext {\n\n    private Logger logger = LoggerFactory.getLogger(MyLineagehook.class);\n\n    // 输出表\n    private Set<String> inputTables;\n\n    // 输入表\n    private Set<String> outputTables;\n\n    // 字段血缘 Map \n    // key为输出字段，value为来源字段数组\n    private Map<String, ArrayList<String>> fieldLineage;\n\n    public MyLineagehook() {\n        inputTables = new HashSet<>();\n        outputTables = new HashSet<>();\n        fieldLineage = new HashMap<>();\n    }\n\n    // 处理表的格式为 库.表\n    private String dealOutputTable(Table table) {\n        String dbName = table.getDbName();\n        String tableName = table.getTableName();\n        return dbName != null ? String.format(\"%s.%s\", dbName, tableName) : tableName;\n    }\n\n    // 处理输出字段的格式\n    private String dealDepOutputField(LineageInfo.DependencyKey dependencyKey) {\n        try{\n            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());\n            String field = dependencyKey.getFieldSchema().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal dep output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 处理来源字段的格式\n    private String dealBaseOutputField(LineageInfo.BaseColumnInfo baseColumnInfo) {\n        try{\n            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());\n            String field = baseColumnInfo.getColumn().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal base output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 主要重写的方法，入口，\n    // 血缘的信息在hookContext.getLinfo()\n    // 结构是集合，每个是一个map，代表一个字段的血缘，\n    // 每个map的key为输出字段，value为来源字段\n    // 处理表血缘就直接忽略字段，因为存在set里就避免重复\n    // 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中\n    @Override\n    public void run(HookContext hookContext) {\n        for(Map.Entry<LineageInfo.DependencyKey, LineageInfo.Dependency> dep: hookContext.getLinfo().entrySet()){\n            // 表血缘\n            Optional.ofNullable(dep.getKey())\n                    .map(LineageInfo.DependencyKey::getDataContainer)\n                    .map(LineageInfo.DataContainer::getTable)\n                    .map(this::dealOutputTable)\n                    .ifPresent(outputTables::add);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)\n                            .map(LineageInfo.TableAliasInfo::getTable)\n                            .map(this::dealOutputTable)\n                            .forEach(inputTables::add));\n\n            // 字段血缘\n            String column = Optional.ofNullable(dep.getKey())\n                    .map(this::dealDepOutputField)\n                    .map(aimField -> {\n                        fieldLineage.put(aimField, new ArrayList<>());\n                        return aimField;\n                    }).orElse(null);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream()\n                            .map(this::dealBaseOutputField)\n                            .forEach(item -> {\n                                fieldLineage.get(column).add(item);\n                            }));\n        }\n        System.out.println(\"来源表:\");\n        System.out.println(inputTables);\n        System.out.println(\"输出表:\");\n        System.out.println(outputTables);\n        System.out.println(\"字段血缘:\");\n        System.out.println(fieldLineage.toString());\n    }\n\n}\n\n```\n\n## 使用方法\n\n编译后生成jar文件\n\n\n```\n启动hive\n>hive\n\n添加jar包\n>add jar xxx.jar;\n\n设置hook\n>set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;\n\n运行一个insert语句\n```\n\n效果展示\n\n``` sql\nINSERT OVERWRITE TABLE myuser_info\nSELECT\n    m.id AS id,\n    m.name AS name,\n    mp.phone AS phone,\n    me.email AS email\nFROM\n    myuser m\nLEFT JOIN\n(\n    SELECT\n        *\n    FROM\n        myuser_phone\n) mp\nON m.id=mp.id\nLEFT JOIN\n    myuser_email me\nON m.id=me.id\n```\n\n```\n来源表:\n[default.myuser_phone, default.myuser_email, default.myuser]\n输出表:\n[default.myuser_info]\n字段血缘:\n{default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]}\n```\n\n\n## 总结\n\n这边的实现比直接用antlr4解析方便很多，代码量也比较少。\n\n这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。\n\n还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。\n\n这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。\n\n","source":"_posts/2020/article_16_HIVE源码学习-hivehook尝试血缘解析.md","raw":"---\ntitle: HIVE源码学习-hivehook尝试表血缘与字段血缘的解析\ncatalog: true\ndate: 2020-05-04 14:31:43\nsubtitle: \nheader-img: \ntags:\n- HIVE\n---\n\n\n## 前言\n\nhive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个\n\n- driver run的时候\n\n- 执行计划semanticAnalyze前后\n\n- 查询放入job之前\n\n- exec前后\n\n- 执行失败时\n\n下面引用一份完整的hive中hook的流程，包括相应的配置项。\n\n``` java\nDriver.run()\n\n=> HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)\n\n=> Driver.compile()\n\n=> HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)\n\n=> SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)\n\n=> HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)\n\n=> QueryString redactor(hive.exec.query.redactor.hooks)\n\n=> QueryPlan Generation\n\n=> Authorization\n\n=> Driver.execute()\n\n=> ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)\n\n=> TaskRunner\n\n=> if failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)\n\n=> ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)\n\n=> HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)\n```\n\n## 血缘解析\n\n这边要举的具体例子为利用hive自带的血缘解析写一个hook。\n\n首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息\n\n因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。\n\n新建一个maven项目,引用hive-exec，版本按照hive的来\n```\n<dependency>\n    <groupId>org.apache.hive</groupId>\n    <artifactId>hive-exec</artifactId>\n    <version>1.2.1</version>\n</dependency>\n```\n\n直接上代码，表和字段级直接都放里面了\n\n``` java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;\nimport org.apache.hadoop.hive.ql.hooks.HookContext;\nimport org.apache.hadoop.hive.ql.hooks.LineageInfo;\nimport org.apache.hadoop.hive.metastore.api.Table;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/4 3:18 下午\n */\npublic class MyLineagehook implements ExecuteWithHookContext {\n\n    private Logger logger = LoggerFactory.getLogger(MyLineagehook.class);\n\n    // 输出表\n    private Set<String> inputTables;\n\n    // 输入表\n    private Set<String> outputTables;\n\n    // 字段血缘 Map \n    // key为输出字段，value为来源字段数组\n    private Map<String, ArrayList<String>> fieldLineage;\n\n    public MyLineagehook() {\n        inputTables = new HashSet<>();\n        outputTables = new HashSet<>();\n        fieldLineage = new HashMap<>();\n    }\n\n    // 处理表的格式为 库.表\n    private String dealOutputTable(Table table) {\n        String dbName = table.getDbName();\n        String tableName = table.getTableName();\n        return dbName != null ? String.format(\"%s.%s\", dbName, tableName) : tableName;\n    }\n\n    // 处理输出字段的格式\n    private String dealDepOutputField(LineageInfo.DependencyKey dependencyKey) {\n        try{\n            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());\n            String field = dependencyKey.getFieldSchema().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal dep output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 处理来源字段的格式\n    private String dealBaseOutputField(LineageInfo.BaseColumnInfo baseColumnInfo) {\n        try{\n            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());\n            String field = baseColumnInfo.getColumn().getName();\n            return String.format(\"%s.%s\", tableName, field);\n        }catch (Exception e) {\n            logger.error(\"deal base output field error\" + e.getMessage());\n            return null;\n        }\n    }\n\n    // 主要重写的方法，入口，\n    // 血缘的信息在hookContext.getLinfo()\n    // 结构是集合，每个是一个map，代表一个字段的血缘，\n    // 每个map的key为输出字段，value为来源字段\n    // 处理表血缘就直接忽略字段，因为存在set里就避免重复\n    // 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中\n    @Override\n    public void run(HookContext hookContext) {\n        for(Map.Entry<LineageInfo.DependencyKey, LineageInfo.Dependency> dep: hookContext.getLinfo().entrySet()){\n            // 表血缘\n            Optional.ofNullable(dep.getKey())\n                    .map(LineageInfo.DependencyKey::getDataContainer)\n                    .map(LineageInfo.DataContainer::getTable)\n                    .map(this::dealOutputTable)\n                    .ifPresent(outputTables::add);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)\n                            .map(LineageInfo.TableAliasInfo::getTable)\n                            .map(this::dealOutputTable)\n                            .forEach(inputTables::add));\n\n            // 字段血缘\n            String column = Optional.ofNullable(dep.getKey())\n                    .map(this::dealDepOutputField)\n                    .map(aimField -> {\n                        fieldLineage.put(aimField, new ArrayList<>());\n                        return aimField;\n                    }).orElse(null);\n            Optional.ofNullable(dep.getValue())\n                    .map(LineageInfo.Dependency::getBaseCols)\n                    .ifPresent(items -> items.stream()\n                            .map(this::dealBaseOutputField)\n                            .forEach(item -> {\n                                fieldLineage.get(column).add(item);\n                            }));\n        }\n        System.out.println(\"来源表:\");\n        System.out.println(inputTables);\n        System.out.println(\"输出表:\");\n        System.out.println(outputTables);\n        System.out.println(\"字段血缘:\");\n        System.out.println(fieldLineage.toString());\n    }\n\n}\n\n```\n\n## 使用方法\n\n编译后生成jar文件\n\n\n```\n启动hive\n>hive\n\n添加jar包\n>add jar xxx.jar;\n\n设置hook\n>set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;\n\n运行一个insert语句\n```\n\n效果展示\n\n``` sql\nINSERT OVERWRITE TABLE myuser_info\nSELECT\n    m.id AS id,\n    m.name AS name,\n    mp.phone AS phone,\n    me.email AS email\nFROM\n    myuser m\nLEFT JOIN\n(\n    SELECT\n        *\n    FROM\n        myuser_phone\n) mp\nON m.id=mp.id\nLEFT JOIN\n    myuser_email me\nON m.id=me.id\n```\n\n```\n来源表:\n[default.myuser_phone, default.myuser_email, default.myuser]\n输出表:\n[default.myuser_info]\n字段血缘:\n{default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]}\n```\n\n\n## 总结\n\n这边的实现比直接用antlr4解析方便很多，代码量也比较少。\n\n这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。\n\n还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。\n\n这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。\n\n","slug":"2020/article_16_HIVE源码学习-hivehook尝试血缘解析","published":1,"updated":"2021-01-27T04:46:28.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh757002q0770dt07nnkn","content":"<h2 id=\"前言\">前言</h2>\n<p>hive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个</p>\n<ul>\n<li>\n<p>driver run的时候</p>\n</li>\n<li>\n<p>执行计划semanticAnalyze前后</p>\n</li>\n<li>\n<p>查询放入job之前</p>\n</li>\n<li>\n<p>exec前后</p>\n</li>\n<li>\n<p>执行失败时</p>\n</li>\n</ul>\n<p>下面引用一份完整的hive中hook的流程，包括相应的配置项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver.run()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.compile()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"function\">QueryString <span class=\"title\">redactor</span><span class=\"params\">(hive.exec.query.redactor.hooks)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>=&gt; QueryPlan Generation</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Authorization</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.execute()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; TaskRunner</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"keyword\">if</span> failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)</span><br></pre></td></tr></table></figure>\n<h2 id=\"血缘解析\">血缘解析</h2>\n<p>这边要举的具体例子为利用hive自带的血缘解析写一个hook。</p>\n<p>首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息</p>\n<p>因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。</p>\n<p>新建一个maven项目,引用hive-exec，版本按照hive的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>直接上代码，表和字段级直接都放里面了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.HookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.LineageInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.metastore.api.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/4 3:18 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLineagehook</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecuteWithHookContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(MyLineagehook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; inputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输入表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; outputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段血缘 Map </span></span><br><span class=\"line\">    <span class=\"comment\">// key为输出字段，value为来源字段数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ArrayList&lt;String&gt;&gt; fieldLineage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLineagehook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        outputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        fieldLineage = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表的格式为 库.表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealOutputTable</span><span class=\"params\">(Table table)</span> </span>&#123;</span><br><span class=\"line\">        String dbName = table.getDbName();</span><br><span class=\"line\">        String tableName = table.getTableName();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbName != <span class=\"keyword\">null</span> ? String.format(<span class=\"string\">\"%s.%s\"</span>, dbName, tableName) : tableName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理输出字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealDepOutputField</span><span class=\"params\">(LineageInfo.DependencyKey dependencyKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());</span><br><span class=\"line\">            String field = dependencyKey.getFieldSchema().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal dep output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理来源字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealBaseOutputField</span><span class=\"params\">(LineageInfo.BaseColumnInfo baseColumnInfo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());</span><br><span class=\"line\">            String field = baseColumnInfo.getColumn().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal base output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主要重写的方法，入口，</span></span><br><span class=\"line\">    <span class=\"comment\">// 血缘的信息在hookContext.getLinfo()</span></span><br><span class=\"line\">    <span class=\"comment\">// 结构是集合，每个是一个map，代表一个字段的血缘，</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个map的key为输出字段，value为来源字段</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理表血缘就直接忽略字段，因为存在set里就避免重复</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(HookContext hookContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry&lt;LineageInfo.DependencyKey, LineageInfo.Dependency&gt; dep: hookContext.getLinfo().entrySet())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表血缘</span></span><br><span class=\"line\">            Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(LineageInfo.DependencyKey::getDataContainer)</span><br><span class=\"line\">                    .map(LineageInfo.DataContainer::getTable)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                    .ifPresent(outputTables::add);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)</span><br><span class=\"line\">                            .map(LineageInfo.TableAliasInfo::getTable)</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                            .forEach(inputTables::add));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 字段血缘</span></span><br><span class=\"line\">            String column = Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealDepOutputField)</span><br><span class=\"line\">                    .map(aimField -&gt; &#123;</span><br><span class=\"line\">                        fieldLineage.put(aimField, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> aimField;</span><br><span class=\"line\">                    &#125;).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream()</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealBaseOutputField)</span><br><span class=\"line\">                            .forEach(item -&gt; &#123;</span><br><span class=\"line\">                                fieldLineage.get(column).add(item);</span><br><span class=\"line\">                            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来源表:\"</span>);</span><br><span class=\"line\">        System.out.println(inputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出表:\"</span>);</span><br><span class=\"line\">        System.out.println(outputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字段血缘:\"</span>);</span><br><span class=\"line\">        System.out.println(fieldLineage.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\">使用方法</h2>\n<p>编译后生成jar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动hive</span><br><span class=\"line\">&gt;hive</span><br><span class=\"line\"></span><br><span class=\"line\">添加jar包</span><br><span class=\"line\">&gt;add jar xxx.jar;</span><br><span class=\"line\"></span><br><span class=\"line\">设置hook</span><br><span class=\"line\">&gt;set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;</span><br><span class=\"line\"></span><br><span class=\"line\">运行一个insert语句</span><br></pre></td></tr></table></figure>\n<p>效果展示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> myuser_info</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    m.id <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    m.name <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span>,</span><br><span class=\"line\">    mp.phone <span class=\"keyword\">AS</span> phone,</span><br><span class=\"line\">    me.email <span class=\"keyword\">AS</span> email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    myuser m</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        myuser_phone</span><br><span class=\"line\">) mp</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=mp.id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    myuser_email me</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=me.id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">来源表:</span><br><span class=\"line\">[default.myuser_phone, default.myuser_email, default.myuser]</span><br><span class=\"line\">输出表:</span><br><span class=\"line\">[default.myuser_info]</span><br><span class=\"line\">字段血缘:</span><br><span class=\"line\">&#123;default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结</h2>\n<p>这边的实现比直接用antlr4解析方便很多，代码量也比较少。</p>\n<p>这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。</p>\n<p>还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。</p>\n<p>这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>hive在中间执行过程中留下不少钩子可以供开发者开发拓展功能，大致有如下几个</p>\n<ul>\n<li>\n<p>driver run的时候</p>\n</li>\n<li>\n<p>执行计划semanticAnalyze前后</p>\n</li>\n<li>\n<p>查询放入job之前</p>\n</li>\n<li>\n<p>exec前后</p>\n</li>\n<li>\n<p>执行失败时</p>\n</li>\n</ul>\n<p>下面引用一份完整的hive中hook的流程，包括相应的配置项。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver.run()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.preDriverRun()(hive.exec.driver.run.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.compile()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.preAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; SemanticAnalyze(QueryBlock, LogicalPlan, PhyPlan, TaskTree)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveSemanticAnalyzerHook.postAnalyze()(hive.semantic.analyzer.hook)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"function\">QueryString <span class=\"title\">redactor</span><span class=\"params\">(hive.exec.query.redactor.hooks)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>=&gt; QueryPlan Generation</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Authorization</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Driver.execute()</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PreExecute.run() (hive.exec.pre.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; TaskRunner</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; <span class=\"keyword\">if</span> failed, ExecuteWithHookContext.run()(hive.exec.failure.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; ExecuteWithHookContext.run() || PostExecute.run() (hive.exec.post.hooks)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; HiveDriverRunHook.postDriverRun()(hive.exec.driver.run.hooks)</span><br></pre></td></tr></table></figure>\n<h2>血缘解析</h2>\n<p>这边要举的具体例子为利用hive自带的血缘解析写一个hook。</p>\n<p>首先确认hook主要要实现的是ExecuteWithHookContext的run方法，且它带一个参数HookContext，包含了几乎所有的信息</p>\n<p>因为是要取的是血缘，得拿到的是正确执行的那部分，所以hook放在执行后的hive.exec.post.hooks，可以避免执行失败等问题。</p>\n<p>新建一个maven项目,引用hive-exec，版本按照hive的来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;hive-exec&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>直接上代码，表和字段级直接都放里面了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.ExecuteWithHookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.HookContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.hooks.LineageInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.metastore.api.Table;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/4 3:18 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLineagehook</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecuteWithHookContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(MyLineagehook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; inputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输入表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; outputTables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 字段血缘 Map </span></span><br><span class=\"line\">    <span class=\"comment\">// key为输出字段，value为来源字段数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ArrayList&lt;String&gt;&gt; fieldLineage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLineagehook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        outputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        fieldLineage = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表的格式为 库.表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealOutputTable</span><span class=\"params\">(Table table)</span> </span>&#123;</span><br><span class=\"line\">        String dbName = table.getDbName();</span><br><span class=\"line\">        String tableName = table.getTableName();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dbName != <span class=\"keyword\">null</span> ? String.format(<span class=\"string\">\"%s.%s\"</span>, dbName, tableName) : tableName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理输出字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealDepOutputField</span><span class=\"params\">(LineageInfo.DependencyKey dependencyKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(dependencyKey.getDataContainer().getTable());</span><br><span class=\"line\">            String field = dependencyKey.getFieldSchema().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal dep output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理来源字段的格式</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealBaseOutputField</span><span class=\"params\">(LineageInfo.BaseColumnInfo baseColumnInfo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String tableName = dealOutputTable(baseColumnInfo.getTabAlias().getTable());</span><br><span class=\"line\">            String field = baseColumnInfo.getColumn().getName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%s.%s\"</span>, tableName, field);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"deal base output field error\"</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主要重写的方法，入口，</span></span><br><span class=\"line\">    <span class=\"comment\">// 血缘的信息在hookContext.getLinfo()</span></span><br><span class=\"line\">    <span class=\"comment\">// 结构是集合，每个是一个map，代表一个字段的血缘，</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个map的key为输出字段，value为来源字段</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理表血缘就直接忽略字段，因为存在set里就避免重复</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理字段血缘就直接分别处理key value的每个即可，最终也存储在类似的map中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(HookContext hookContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry&lt;LineageInfo.DependencyKey, LineageInfo.Dependency&gt; dep: hookContext.getLinfo().entrySet())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 表血缘</span></span><br><span class=\"line\">            Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(LineageInfo.DependencyKey::getDataContainer)</span><br><span class=\"line\">                    .map(LineageInfo.DataContainer::getTable)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                    .ifPresent(outputTables::add);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream().map(LineageInfo.BaseColumnInfo::getTabAlias)</span><br><span class=\"line\">                            .map(LineageInfo.TableAliasInfo::getTable)</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealOutputTable)</span><br><span class=\"line\">                            .forEach(inputTables::add));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 字段血缘</span></span><br><span class=\"line\">            String column = Optional.ofNullable(dep.getKey())</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealDepOutputField)</span><br><span class=\"line\">                    .map(aimField -&gt; &#123;</span><br><span class=\"line\">                        fieldLineage.put(aimField, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> aimField;</span><br><span class=\"line\">                    &#125;).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(dep.getValue())</span><br><span class=\"line\">                    .map(LineageInfo.Dependency::getBaseCols)</span><br><span class=\"line\">                    .ifPresent(items -&gt; items.stream()</span><br><span class=\"line\">                            .map(<span class=\"keyword\">this</span>::dealBaseOutputField)</span><br><span class=\"line\">                            .forEach(item -&gt; &#123;</span><br><span class=\"line\">                                fieldLineage.get(column).add(item);</span><br><span class=\"line\">                            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来源表:\"</span>);</span><br><span class=\"line\">        System.out.println(inputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出表:\"</span>);</span><br><span class=\"line\">        System.out.println(outputTables);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"字段血缘:\"</span>);</span><br><span class=\"line\">        System.out.println(fieldLineage.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>使用方法</h2>\n<p>编译后生成jar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动hive</span><br><span class=\"line\">&gt;hive</span><br><span class=\"line\"></span><br><span class=\"line\">添加jar包</span><br><span class=\"line\">&gt;add jar xxx.jar;</span><br><span class=\"line\"></span><br><span class=\"line\">设置hook</span><br><span class=\"line\">&gt;set hive.exec.post.hooks=cn.ganjiacheng.MyLineagehook;</span><br><span class=\"line\"></span><br><span class=\"line\">运行一个insert语句</span><br></pre></td></tr></table></figure>\n<p>效果展示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> myuser_info</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    m.id <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    m.name <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span>,</span><br><span class=\"line\">    mp.phone <span class=\"keyword\">AS</span> phone,</span><br><span class=\"line\">    me.email <span class=\"keyword\">AS</span> email</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    myuser m</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        *</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        myuser_phone</span><br><span class=\"line\">) mp</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=mp.id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    myuser_email me</span><br><span class=\"line\"><span class=\"keyword\">ON</span> m.id=me.id</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">来源表:</span><br><span class=\"line\">[default.myuser_phone, default.myuser_email, default.myuser]</span><br><span class=\"line\">输出表:</span><br><span class=\"line\">[default.myuser_info]</span><br><span class=\"line\">字段血缘:</span><br><span class=\"line\">&#123;default.myuser_info.phone=[default.myuser_phone.phone], default.myuser_info.email=[default.myuser_email.email], default.myuser_info.id=[default.myuser.id], default.myuser_info.name=[default.myuser.name]&#125;</span><br></pre></td></tr></table></figure>\n<h2>总结</h2>\n<p>这边的实现比直接用antlr4解析方便很多，代码量也比较少。</p>\n<p>这边比直接解析sql好的一点是之前use的库会自动帮你补全到字段血缘中，但直接解析sql就无法知道库。</p>\n<p>还有这边也是直接支持 select * 这种表达式的元数据获取，但光解析sql就无法和元数据连接。</p>\n<p>这边的hivehook解析完数据后，可以通过消息发送到MQ中，后续后端进行采集消费，这边不做拓展。</p>\n"},{"title":"基于antlr4实现hiveSQL的解析[表血缘和字段血缘]","catalog":true,"date":"2020-05-02T08:25:06.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n关于 HiveSQL 血缘，一般表示的就是 hive 数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义 SQL 任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。\n\n有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 实现思路\n\n一般来说比较直接的实现方式是 hivehook 的 LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了 hive 自带的 antlr3 的 hql 解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用 hivehook 实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。\n\n这边就考虑用 antlr4 配合 hive 内部的 Hplsql.g4 直接实现一个血缘的解析。实现方式还是 visit 模式。\n\n### 表血缘\n\n首先表血缘是比较之间简单的，比如对于一个 insert 来说，目标表永远只有一个，来源表是 select 中所有 from 的真实表。\n\n### 字段血缘\n\n对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。\n\n这边最后的考虑是将每个 select 剥离出来存成一个 object，其中包括来源表(来源子 select 则为 null)，select 字段，父 select 的 Index(第一层则为 null)。在解析完成后所有 select 的 object 存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。\n\n## SHOW CODE\n\n### 表血缘\n\n首先定义好结构\n\n```java\n// 表名的结构\npublic class TableNameModel {\n    private String dbName;\n    private String tableName;\n\n    public static String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    public static TableNameModel parseTableName(String tableName) {\n        TableNameModel tableNameModel = new TableNameModel();\n        String[] splitTable = tableName.split(\"\\\\.\");\n        if(splitTable.length == 2) {\n            tableNameModel.setDbName(splitTable[0]);\n            tableNameModel.setTableName(splitTable[1]);\n        }else if(splitTable.length == 1) {\n            tableNameModel.setTableName(splitTable[0]);\n        }\n        return tableNameModel;\n    }\n}\n\n// 表血缘结构，对单个sql\npublic class HiveTableLineageModel {\n    // 输出的表名\n    private TableNameModel outputTable;\n    // 输入的表名列表\n    private HashSet<TableNameModel> inputTables;\n}\n\n```\n\n表血缘主要过程，监听 insert 语句\n\n```java\npublic class HiveSQLTableLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n    private HashSet<TableNameModel> inputTables = new HashSet<>();\n\n    // visitInsert获取insert的table_name节点，作为目标输出表\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n         outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    // 获取from真实表，加到来源表的Set里\n    @Override\n    public Object visitFrom_table_clause(HplsqlParser.From_table_clauseContext ctx) {\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .map(inputTables::add);\n        return super.visitFrom_table_clause(ctx);\n    }\n\n    public HiveTableLineageModel getTableLineage() {\n        HiveTableLineageModel hiveTableLineageModel = new HiveTableLineageModel();\n        hiveTableLineageModel.setOutputTable(outputTable);\n        hiveTableLineageModel.setInputTables(inputTables);\n        return hiveTableLineageModel;\n    }\n\n}\n```\n\n### 字段血缘\n\n定义结构\n\n```java\n// 字段名\npublic class FieldNameModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n}\n\n// 带过程的表字段\npublic class FieldNameWithProcessModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n    private String process;\n}\n\n// 解析单个select中存储字段和别名\n// 如：select a+b as c from table;\n// 存储数据为 fieldNames:[a,b] alias:c process:a+b\npublic class HiveFieldLineageSelectItemModel {\n    private Set<String> fieldNames;\n    private String alias;\n    private String process;\n}\n\n// 解析单个select后的结果\npublic class HiveFieldLineageSelectModel {\n    Integer id; // index\n    Integer parentId; // 父id，第一层select为null\n    TableNameModel fromTable; // 来源表，来源子select则为null\n    String tableAlias; // 表别名\n    List<HiveFieldLineageSelectItemModel> selectItems; // select字段\n}\n\n// 血缘结果结构\npublic class HiveFieldLineageModel {\n    private FieldNameModel targetField; // 目标字段\n    private HashSet<FieldNameModel> sourceFields; // 来源字段列表\n}\n\n```\n\n字段血缘主要过程,主要针对的是 insert 语句，  \n但一般的 select 也是可以用的，因为是把最外层 select 的字段作为结果字段,  \n有一个限制是中间不能有 select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。  \n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。\n\n```java\npublic class HiveSQLFieldLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n\n    private HashMap<String, HiveFieldLineageSelectModel> hiveFieldSelects = new LinkedHashMap<>();\n\n    private Map<Integer, String> selectParentKeyMap = new HashMap<>();\n\n    private String thisSelectId;\n\n    private String sourceSQL;\n\n    // for select Item\n    private HiveFieldLineageSelectItemModel selectItemModel;\n    private List<HiveFieldLineageSelectItemModel> selectFields = new ArrayList<>();\n    private Boolean startSelectItem = false;\n\n    public HiveSQLFieldLineage(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    /**\n     * insert解析结果表\n     */\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n        outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    /**\n     * 解析select每个selectItem里用到字段\n     */\n    @Override\n    public Object visitExpr(HplsqlParser.ExprContext ctx) {\n        if(startSelectItem) {\n            Optional.ofNullable(ctx)\n                    .map(HplsqlParser.ExprContext::expr_atom)\n                    .map(HplsqlParser.Expr_atomContext::ident)\n                    .map(ParseTree::getText)\n                    .ifPresent(s -> {\n                        if(!StringUtils.isNumeric(s)) {\n                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));\n                        }\n                    });\n        }\n        return super.visitExpr(ctx);\n    }\n\n    /**\n     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames\n     */\n    @Override\n    public Object visitSelect_list_item(HplsqlParser.Select_list_itemContext ctx) {\n        startSelectItem = true;\n        selectItemModel = new HiveFieldLineageSelectItemModel();\n        selectItemModel.setFieldNames(new HashSet<>());\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(this::subSourceSql)\n                .ifPresent(selectItemModel::setProcess);\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                .map(HplsqlParser.Select_list_aliasContext::ident)\n                .map(RuleContext::getText)\n                .ifPresent(selectItemModel::setAlias);\n        Object visit = super.visitSelect_list_item(ctx);\n        selectFields.add(selectItemModel);\n        return visit;\n    }\n\n    /**\n     * from语句，处理于所有selectItem结束\n     * 对上面解析出的字段名中的表别名进行处理 如t0.field\n     */\n    @Override\n    public Object visitFrom_clause(HplsqlParser.From_clauseContext ctx) {\n        startSelectItem = false;\n        HashMap<String, List<HiveFieldLineageSelectItemModel>> fieldItems = new HashMap<>();\n        for(HiveFieldLineageSelectItemModel item: selectFields) {\n            HashMap<String, HashSet<String>> aliasSet = new HashMap<>();\n            for(String field: item.getFieldNames()) {\n                String[] sp = field.split(\"\\\\.\");\n                if(sp.length == 2){\n                    String key = thisSelectId + \"_\" + sp[0];\n                    aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                    aliasSet.get(key).add(sp[1]);\n                }else if(sp.length == 1){\n                    boolean flat = true;\n                    for(String k: selectParentKeyMap.values()) {\n                        if(k.startsWith(thisSelectId + \"_\")) {\n                            aliasSet.computeIfAbsent(k, t -> new HashSet<>());\n                            aliasSet.get(k).add(sp[0]);\n                            flat=false;\n                        }\n                    }\n                    if(flat) {\n                        String key = thisSelectId + \"_\";\n                        aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                        aliasSet.get(key).add(sp[0]);\n                    }\n                }\n            }\n            for(String key: aliasSet.keySet()) {\n                fieldItems.computeIfAbsent(key, k -> new ArrayList<>());\n                HiveFieldLineageSelectItemModel selectItemModel = new HiveFieldLineageSelectItemModel();\n                selectItemModel.setFieldNames(aliasSet.get(key));\n                selectItemModel.setAlias(item.getAlias());\n                selectItemModel.setProcess(item.getProcess());\n                if(selectItemModel.getFieldNames().size() == 1 && selectItemModel.getAlias() == null) {\n                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());\n                }\n                fieldItems.get(key).add(selectItemModel);\n            }\n        }\n        for(String key: fieldItems.keySet()) {\n            if(hiveFieldSelects.get(key) != null) {\n                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));\n            }\n        }\n        return super.visitFrom_clause(ctx);\n    }\n\n    /**\n     * 进入select前\n     * 解析每个select存信息并另存父子关系\n     * 父子来源于from subSelect, join subSelect\n     */\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        List<HplsqlParser.Fullselect_stmt_itemContext> selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();\n        for(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) {\n            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = new HiveFieldLineageSelectModel();\n            Integer thisId = selectItem.getStart().getStartIndex();\n            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();\n            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                    .orElse(null);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                    .map(RuleContext::getText)\n                    .map(TableNameModel::parseTableName)\n                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                    .map(HplsqlParser.From_alias_clauseContext::ident)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            String alias = hiveFieldLineageSelectModel.getTableAlias();\n            String thisKey = String.format(\"%s_%s\", thisId, alias == null ? \"\": alias);\n            hiveFieldLineageSelectModel.setId(thisKey + \"\");\n            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));\n            hiveFieldLineageSelectModel.setSelectItems(new ArrayList<>());\n            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                    .ifPresent(subSelects ->\n                            subSelects.forEach(item ->\n                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));\n\n            List<HplsqlParser.From_join_clauseContext> fromJoinClauses = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .orElse(new ArrayList<>());\n            for(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) {\n                HiveFieldLineageSelectModel joinSelect = new HiveFieldLineageSelectModel();\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                        .map(RuleContext::getText)\n                        .map(TableNameModel::parseTableName)\n                        .ifPresent(joinSelect::setFromTable);\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                        .map(HplsqlParser.From_alias_clauseContext::ident)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                String jalias = joinSelect.getTableAlias();\n                String jkey = String.format(\"%s_%s\", thisId, jalias == null ? \"\": jalias);\n                joinSelect.setId(jkey);\n                joinSelect.setParentId(selectParentKeyMap.get(thisId));\n                joinSelect.setSelectItems(new ArrayList<>());\n                hiveFieldSelects.put(jkey, joinSelect);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                        .ifPresent(subSelects ->\n                                subSelects.forEach(item ->\n                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));\n            }\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n\n    /**\n     * 处理每个子select进入前，\n     * 初始化selectItem相关的变量\n     */\n    @Override\n    public Object visitSubselect_stmt(HplsqlParser.Subselect_stmtContext ctx) {\n        thisSelectId = ctx.getStart().getStartIndex() + \"\";\n        selectFields = new ArrayList<>();\n        return super.visitSubselect_stmt(ctx);\n    }\n\n    private List<HiveFieldLineageSelectModel> hiveFieldSelectList = new ArrayList<>();\n\n    /**\n     * 转换HashMap存储为List\n     */\n    private void transSelectToList() {\n        for(String key: hiveFieldSelects.keySet()) {\n            hiveFieldSelectList.add(hiveFieldSelects.get(key));\n        }\n    }\n\n    /**\n     * 获取目标字段\n     * 也就是parentId为null的最外层select的字段别名\n     */\n    private List<FieldNameModel> getTargetFields() {\n        List<List<String>> items = hiveFieldSelectList.stream()\n                .filter(item -> item.getParentId() == null)\n                .map(HiveFieldLineageSelectModel::getSelectItems)\n                .map(fields -> fields.stream()\n                        .map(HiveFieldLineageSelectItemModel::getAlias)\n                        .collect(Collectors.toList()))\n                .collect(Collectors.toList());\n        List<String> res = new ArrayList<>();\n        for(List<String> item: items) {\n            res.addAll(item);\n        }\n        res = res.stream().distinct().collect(Collectors.toList());\n        List<FieldNameModel> fieldNameModels = new ArrayList<>();\n        for(String i: res) {\n            FieldNameModel fieldNameModel = new FieldNameModel();\n            if(outputTable != null) {\n                fieldNameModel.setDbName(outputTable.getDbName());\n                fieldNameModel.setTableName(outputTable.getTableName());\n            }\n            fieldNameModel.setFieldName(i);\n            fieldNameModels.add(fieldNameModel);\n        }\n        return fieldNameModels;\n    }\n\n    private HashSet<FieldNameWithProcessModel> sourceFields;\n    private String fieldProcess = \"\";\n\n    /**\n     * 递归按每个字段从外到内寻找每个字段的来源\n     * 逻辑为最外的字段别名，父id -> 匹配子id别名 ->\n     * -> 如果是来源是表，存储，如果来源是子select，继续递归\n     */\n    private void findFieldSource(String targetField, String parentId) {\n        hiveFieldSelectList.forEach(select -> {\n            if((parentId == null && select.getParentId() == null) ||\n                    (select.getParentId() != null && select.getParentId().equals(parentId))) {\n                if(select.getSelectItems() != null) {\n                    if(select.getFromTable() == null) {\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    findFieldSource(field, select.getId());\n                                }\n                            }\n                        });\n                    }else{\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    FieldNameWithProcessModel fieldNameWithProcessModel = new FieldNameWithProcessModel();\n                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());\n                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());\n                                    fieldNameWithProcessModel.setFieldName(field);\n                                    fieldNameWithProcessModel.setProcess(fieldProcess);\n                                    sourceFields.add(fieldNameWithProcessModel);\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取字段血缘列表\n     */\n    public List<HiveFieldLineageModel> getHiveFieldLineage() {\n        transSelectToList();\n        List<FieldNameModel> targetFields = getTargetFields();\n        List<HiveFieldLineageModel> hiveFieldLineageModelList = new ArrayList<>();\n        for(FieldNameModel targetField: targetFields) {\n            HiveFieldLineageModel hiveFieldLineageModel = new HiveFieldLineageModel();\n            hiveFieldLineageModel.setTargetField(targetField);\n            sourceFields = new HashSet<>();\n            fieldProcess = \"\";\n            findFieldSource(targetField.getFieldName(), null);\n            hiveFieldLineageModel.setSourceFields(sourceFields);\n            hiveFieldLineageModelList.add(hiveFieldLineageModel);\n        }\n        return hiveFieldLineageModelList;\n    }\n\n    /**\n     * 获取sql解析处理后的结果\n     */\n    public HashMap<String, HiveFieldLineageSelectModel> getHiveFieldSelects() {\n        return hiveFieldSelects;\n    }\n}\n```\n\n## 效果展示\n\n举一个简单的 sql\n\n```sql\nINSERT INTO TABLE db_test.table_result\nSELECT\n    t1.id,\n    t2.name\nFROM\n(\n    SELECT\n        id1 + id2 AS id\n    FROM\n        db_test.table1\n) t1\nLEFT JOIN\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            sourcename AS name\n        FROM\n            db_test.table2\n    )\n) t2\nON t1.id=t2.id\n\n```\n\n解析后的表血缘\n\n```json\n{\n    \"inputTables\": [\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table2\"\n        },\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table1\"\n        }\n    ],\n    \"outputTable\": {\n        \"dbName\": \"db_test\",\n        \"tableName\": \"table_result\"\n    }\n}\n```\n\n解析后的字段血缘\n\n```json\n[\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id1\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            },\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id2\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"id\",\n            \"tableName\": \"table_result\"\n        }\n    },\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"sourcename\",\n                \"process\": \"sourcename\",\n                \"tableName\": \"table2\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"name\",\n            \"tableName\": \"table_result\"\n        }\n    }\n]\n```\n\n## 引用说明\n\n```xml\n<java.version>1.8</java.version>\n<antlr4.version>4.7.2</antlr4.version>\n```\n\n```java\n// 通用的\nimport org.antlr.v4.runtime.ParserRuleContext;\nimport org.antlr.v4.runtime.RuleContext;\nimport org.antlr.v4.runtime.tree.ParseTree;\nimport org.apache.commons.lang3.StringUtils;\n// 基于Hplsql.g4文件生成的, 使用antlr4-maven-plugin\nimport xxx.HplsqlBaseVisitor;\nimport xxx.HplsqlParser;\n```\n","source":"_posts/2020/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘.md","raw":"---\ntitle: \"基于antlr4实现hiveSQL的解析[表血缘和字段血缘]\"\ncatalog: true\ndate: 2020-05-02 16:25:06\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n    - HQL解析\n---\n\n## 前言\n\n关于 HiveSQL 血缘，一般表示的就是 hive 数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义 SQL 任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。\n\n有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 实现思路\n\n一般来说比较直接的实现方式是 hivehook 的 LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了 hive 自带的 antlr3 的 hql 解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用 hivehook 实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。\n\n这边就考虑用 antlr4 配合 hive 内部的 Hplsql.g4 直接实现一个血缘的解析。实现方式还是 visit 模式。\n\n### 表血缘\n\n首先表血缘是比较之间简单的，比如对于一个 insert 来说，目标表永远只有一个，来源表是 select 中所有 from 的真实表。\n\n### 字段血缘\n\n对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。\n\n这边最后的考虑是将每个 select 剥离出来存成一个 object，其中包括来源表(来源子 select 则为 null)，select 字段，父 select 的 Index(第一层则为 null)。在解析完成后所有 select 的 object 存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。\n\n## SHOW CODE\n\n### 表血缘\n\n首先定义好结构\n\n```java\n// 表名的结构\npublic class TableNameModel {\n    private String dbName;\n    private String tableName;\n\n    public static String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    public static TableNameModel parseTableName(String tableName) {\n        TableNameModel tableNameModel = new TableNameModel();\n        String[] splitTable = tableName.split(\"\\\\.\");\n        if(splitTable.length == 2) {\n            tableNameModel.setDbName(splitTable[0]);\n            tableNameModel.setTableName(splitTable[1]);\n        }else if(splitTable.length == 1) {\n            tableNameModel.setTableName(splitTable[0]);\n        }\n        return tableNameModel;\n    }\n}\n\n// 表血缘结构，对单个sql\npublic class HiveTableLineageModel {\n    // 输出的表名\n    private TableNameModel outputTable;\n    // 输入的表名列表\n    private HashSet<TableNameModel> inputTables;\n}\n\n```\n\n表血缘主要过程，监听 insert 语句\n\n```java\npublic class HiveSQLTableLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n    private HashSet<TableNameModel> inputTables = new HashSet<>();\n\n    // visitInsert获取insert的table_name节点，作为目标输出表\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n         outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    // 获取from真实表，加到来源表的Set里\n    @Override\n    public Object visitFrom_table_clause(HplsqlParser.From_table_clauseContext ctx) {\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .map(inputTables::add);\n        return super.visitFrom_table_clause(ctx);\n    }\n\n    public HiveTableLineageModel getTableLineage() {\n        HiveTableLineageModel hiveTableLineageModel = new HiveTableLineageModel();\n        hiveTableLineageModel.setOutputTable(outputTable);\n        hiveTableLineageModel.setInputTables(inputTables);\n        return hiveTableLineageModel;\n    }\n\n}\n```\n\n### 字段血缘\n\n定义结构\n\n```java\n// 字段名\npublic class FieldNameModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n}\n\n// 带过程的表字段\npublic class FieldNameWithProcessModel {\n    private String dbName;\n    private String tableName;\n    private String fieldName;\n    private String process;\n}\n\n// 解析单个select中存储字段和别名\n// 如：select a+b as c from table;\n// 存储数据为 fieldNames:[a,b] alias:c process:a+b\npublic class HiveFieldLineageSelectItemModel {\n    private Set<String> fieldNames;\n    private String alias;\n    private String process;\n}\n\n// 解析单个select后的结果\npublic class HiveFieldLineageSelectModel {\n    Integer id; // index\n    Integer parentId; // 父id，第一层select为null\n    TableNameModel fromTable; // 来源表，来源子select则为null\n    String tableAlias; // 表别名\n    List<HiveFieldLineageSelectItemModel> selectItems; // select字段\n}\n\n// 血缘结果结构\npublic class HiveFieldLineageModel {\n    private FieldNameModel targetField; // 目标字段\n    private HashSet<FieldNameModel> sourceFields; // 来源字段列表\n}\n\n```\n\n字段血缘主要过程,主要针对的是 insert 语句，  \n但一般的 select 也是可以用的，因为是把最外层 select 的字段作为结果字段,  \n有一个限制是中间不能有 select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。  \n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。\n\n```java\npublic class HiveSQLFieldLineage extends HplsqlBaseVisitor {\n\n    private TableNameModel outputTable;\n\n    private HashMap<String, HiveFieldLineageSelectModel> hiveFieldSelects = new LinkedHashMap<>();\n\n    private Map<Integer, String> selectParentKeyMap = new HashMap<>();\n\n    private String thisSelectId;\n\n    private String sourceSQL;\n\n    // for select Item\n    private HiveFieldLineageSelectItemModel selectItemModel;\n    private List<HiveFieldLineageSelectItemModel> selectFields = new ArrayList<>();\n    private Boolean startSelectItem = false;\n\n    public HiveSQLFieldLineage(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    /**\n     * insert解析结果表\n     */\n    @Override\n    public Object visitInsert_stmt(HplsqlParser.Insert_stmtContext ctx) {\n        outputTable = Optional.ofNullable(ctx)\n                .map(HplsqlParser.Insert_stmtContext::table_name)\n                .map(RuleContext::getText)\n                .map(TableNameModel::parseTableName)\n                .orElse(null);\n        return super.visitInsert_stmt(ctx);\n    }\n\n    /**\n     * 解析select每个selectItem里用到字段\n     */\n    @Override\n    public Object visitExpr(HplsqlParser.ExprContext ctx) {\n        if(startSelectItem) {\n            Optional.ofNullable(ctx)\n                    .map(HplsqlParser.ExprContext::expr_atom)\n                    .map(HplsqlParser.Expr_atomContext::ident)\n                    .map(ParseTree::getText)\n                    .ifPresent(s -> {\n                        if(!StringUtils.isNumeric(s)) {\n                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));\n                        }\n                    });\n        }\n        return super.visitExpr(ctx);\n    }\n\n    /**\n     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames\n     */\n    @Override\n    public Object visitSelect_list_item(HplsqlParser.Select_list_itemContext ctx) {\n        startSelectItem = true;\n        selectItemModel = new HiveFieldLineageSelectItemModel();\n        selectItemModel.setFieldNames(new HashSet<>());\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(this::subSourceSql)\n                .ifPresent(selectItemModel::setProcess);\n        Optional.ofNullable(ctx)\n                .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                .map(HplsqlParser.Select_list_aliasContext::ident)\n                .map(RuleContext::getText)\n                .ifPresent(selectItemModel::setAlias);\n        Object visit = super.visitSelect_list_item(ctx);\n        selectFields.add(selectItemModel);\n        return visit;\n    }\n\n    /**\n     * from语句，处理于所有selectItem结束\n     * 对上面解析出的字段名中的表别名进行处理 如t0.field\n     */\n    @Override\n    public Object visitFrom_clause(HplsqlParser.From_clauseContext ctx) {\n        startSelectItem = false;\n        HashMap<String, List<HiveFieldLineageSelectItemModel>> fieldItems = new HashMap<>();\n        for(HiveFieldLineageSelectItemModel item: selectFields) {\n            HashMap<String, HashSet<String>> aliasSet = new HashMap<>();\n            for(String field: item.getFieldNames()) {\n                String[] sp = field.split(\"\\\\.\");\n                if(sp.length == 2){\n                    String key = thisSelectId + \"_\" + sp[0];\n                    aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                    aliasSet.get(key).add(sp[1]);\n                }else if(sp.length == 1){\n                    boolean flat = true;\n                    for(String k: selectParentKeyMap.values()) {\n                        if(k.startsWith(thisSelectId + \"_\")) {\n                            aliasSet.computeIfAbsent(k, t -> new HashSet<>());\n                            aliasSet.get(k).add(sp[0]);\n                            flat=false;\n                        }\n                    }\n                    if(flat) {\n                        String key = thisSelectId + \"_\";\n                        aliasSet.computeIfAbsent(key, t -> new HashSet<>());\n                        aliasSet.get(key).add(sp[0]);\n                    }\n                }\n            }\n            for(String key: aliasSet.keySet()) {\n                fieldItems.computeIfAbsent(key, k -> new ArrayList<>());\n                HiveFieldLineageSelectItemModel selectItemModel = new HiveFieldLineageSelectItemModel();\n                selectItemModel.setFieldNames(aliasSet.get(key));\n                selectItemModel.setAlias(item.getAlias());\n                selectItemModel.setProcess(item.getProcess());\n                if(selectItemModel.getFieldNames().size() == 1 && selectItemModel.getAlias() == null) {\n                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());\n                }\n                fieldItems.get(key).add(selectItemModel);\n            }\n        }\n        for(String key: fieldItems.keySet()) {\n            if(hiveFieldSelects.get(key) != null) {\n                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));\n            }\n        }\n        return super.visitFrom_clause(ctx);\n    }\n\n    /**\n     * 进入select前\n     * 解析每个select存信息并另存父子关系\n     * 父子来源于from subSelect, join subSelect\n     */\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        List<HplsqlParser.Fullselect_stmt_itemContext> selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();\n        for(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) {\n            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = new HiveFieldLineageSelectModel();\n            Integer thisId = selectItem.getStart().getStartIndex();\n            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();\n            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                    .orElse(null);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                    .map(RuleContext::getText)\n                    .map(TableNameModel::parseTableName)\n                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);\n            Optional.ofNullable(fromTableNameClause)\n                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                    .map(HplsqlParser.From_alias_clauseContext::ident)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                    .map(RuleContext::getText)\n                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);\n\n            String alias = hiveFieldLineageSelectModel.getTableAlias();\n            String thisKey = String.format(\"%s_%s\", thisId, alias == null ? \"\": alias);\n            hiveFieldLineageSelectModel.setId(thisKey + \"\");\n            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));\n            hiveFieldLineageSelectModel.setSelectItems(new ArrayList<>());\n            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);\n\n            Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                    .ifPresent(subSelects ->\n                            subSelects.forEach(item ->\n                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));\n\n            List<HplsqlParser.From_join_clauseContext> fromJoinClauses = Optional.ofNullable(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .orElse(new ArrayList<>());\n            for(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) {\n                HiveFieldLineageSelectModel joinSelect = new HiveFieldLineageSelectModel();\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::table_name)\n                        .map(RuleContext::getText)\n                        .map(TableNameModel::parseTableName)\n                        .ifPresent(joinSelect::setFromTable);\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)\n                        .map(HplsqlParser.From_alias_clauseContext::ident)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                        .map(RuleContext::getText)\n                        .ifPresent(joinSelect::setTableAlias);\n\n                String jalias = joinSelect.getTableAlias();\n                String jkey = String.format(\"%s_%s\", thisId, jalias == null ? \"\": jalias);\n                joinSelect.setId(jkey);\n                joinSelect.setParentId(selectParentKeyMap.get(thisId));\n                joinSelect.setSelectItems(new ArrayList<>());\n                hiveFieldSelects.put(jkey, joinSelect);\n\n                Optional.ofNullable(fromJoinClauseContext)\n                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)\n                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)\n                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)\n                        .ifPresent(subSelects ->\n                                subSelects.forEach(item ->\n                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));\n            }\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n\n    /**\n     * 处理每个子select进入前，\n     * 初始化selectItem相关的变量\n     */\n    @Override\n    public Object visitSubselect_stmt(HplsqlParser.Subselect_stmtContext ctx) {\n        thisSelectId = ctx.getStart().getStartIndex() + \"\";\n        selectFields = new ArrayList<>();\n        return super.visitSubselect_stmt(ctx);\n    }\n\n    private List<HiveFieldLineageSelectModel> hiveFieldSelectList = new ArrayList<>();\n\n    /**\n     * 转换HashMap存储为List\n     */\n    private void transSelectToList() {\n        for(String key: hiveFieldSelects.keySet()) {\n            hiveFieldSelectList.add(hiveFieldSelects.get(key));\n        }\n    }\n\n    /**\n     * 获取目标字段\n     * 也就是parentId为null的最外层select的字段别名\n     */\n    private List<FieldNameModel> getTargetFields() {\n        List<List<String>> items = hiveFieldSelectList.stream()\n                .filter(item -> item.getParentId() == null)\n                .map(HiveFieldLineageSelectModel::getSelectItems)\n                .map(fields -> fields.stream()\n                        .map(HiveFieldLineageSelectItemModel::getAlias)\n                        .collect(Collectors.toList()))\n                .collect(Collectors.toList());\n        List<String> res = new ArrayList<>();\n        for(List<String> item: items) {\n            res.addAll(item);\n        }\n        res = res.stream().distinct().collect(Collectors.toList());\n        List<FieldNameModel> fieldNameModels = new ArrayList<>();\n        for(String i: res) {\n            FieldNameModel fieldNameModel = new FieldNameModel();\n            if(outputTable != null) {\n                fieldNameModel.setDbName(outputTable.getDbName());\n                fieldNameModel.setTableName(outputTable.getTableName());\n            }\n            fieldNameModel.setFieldName(i);\n            fieldNameModels.add(fieldNameModel);\n        }\n        return fieldNameModels;\n    }\n\n    private HashSet<FieldNameWithProcessModel> sourceFields;\n    private String fieldProcess = \"\";\n\n    /**\n     * 递归按每个字段从外到内寻找每个字段的来源\n     * 逻辑为最外的字段别名，父id -> 匹配子id别名 ->\n     * -> 如果是来源是表，存储，如果来源是子select，继续递归\n     */\n    private void findFieldSource(String targetField, String parentId) {\n        hiveFieldSelectList.forEach(select -> {\n            if((parentId == null && select.getParentId() == null) ||\n                    (select.getParentId() != null && select.getParentId().equals(parentId))) {\n                if(select.getSelectItems() != null) {\n                    if(select.getFromTable() == null) {\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    findFieldSource(field, select.getId());\n                                }\n                            }\n                        });\n                    }else{\n                        select.getSelectItems().forEach(selectItem -> {\n                            if(selectItem.getAlias().equals(targetField)) {\n                                if(selectItem.getProcess().length() > fieldProcess.length()) {\n                                    fieldProcess = selectItem.getProcess();\n                                }\n                                for(String field: selectItem.getFieldNames()){\n                                    FieldNameWithProcessModel fieldNameWithProcessModel = new FieldNameWithProcessModel();\n                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());\n                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());\n                                    fieldNameWithProcessModel.setFieldName(field);\n                                    fieldNameWithProcessModel.setProcess(fieldProcess);\n                                    sourceFields.add(fieldNameWithProcessModel);\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * 获取字段血缘列表\n     */\n    public List<HiveFieldLineageModel> getHiveFieldLineage() {\n        transSelectToList();\n        List<FieldNameModel> targetFields = getTargetFields();\n        List<HiveFieldLineageModel> hiveFieldLineageModelList = new ArrayList<>();\n        for(FieldNameModel targetField: targetFields) {\n            HiveFieldLineageModel hiveFieldLineageModel = new HiveFieldLineageModel();\n            hiveFieldLineageModel.setTargetField(targetField);\n            sourceFields = new HashSet<>();\n            fieldProcess = \"\";\n            findFieldSource(targetField.getFieldName(), null);\n            hiveFieldLineageModel.setSourceFields(sourceFields);\n            hiveFieldLineageModelList.add(hiveFieldLineageModel);\n        }\n        return hiveFieldLineageModelList;\n    }\n\n    /**\n     * 获取sql解析处理后的结果\n     */\n    public HashMap<String, HiveFieldLineageSelectModel> getHiveFieldSelects() {\n        return hiveFieldSelects;\n    }\n}\n```\n\n## 效果展示\n\n举一个简单的 sql\n\n```sql\nINSERT INTO TABLE db_test.table_result\nSELECT\n    t1.id,\n    t2.name\nFROM\n(\n    SELECT\n        id1 + id2 AS id\n    FROM\n        db_test.table1\n) t1\nLEFT JOIN\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            sourcename AS name\n        FROM\n            db_test.table2\n    )\n) t2\nON t1.id=t2.id\n\n```\n\n解析后的表血缘\n\n```json\n{\n    \"inputTables\": [\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table2\"\n        },\n        {\n            \"dbName\": \"db_test\",\n            \"tableName\": \"table1\"\n        }\n    ],\n    \"outputTable\": {\n        \"dbName\": \"db_test\",\n        \"tableName\": \"table_result\"\n    }\n}\n```\n\n解析后的字段血缘\n\n```json\n[\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id1\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            },\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"id2\",\n                \"process\": \"id1 + id2\",\n                \"tableName\": \"table1\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"id\",\n            \"tableName\": \"table_result\"\n        }\n    },\n    {\n        \"sourceFields\": [\n            {\n                \"dbName\": \"db_test\",\n                \"fieldName\": \"sourcename\",\n                \"process\": \"sourcename\",\n                \"tableName\": \"table2\"\n            }\n        ],\n        \"targetField\": {\n            \"dbName\": \"db_test\",\n            \"fieldName\": \"name\",\n            \"tableName\": \"table_result\"\n        }\n    }\n]\n```\n\n## 引用说明\n\n```xml\n<java.version>1.8</java.version>\n<antlr4.version>4.7.2</antlr4.version>\n```\n\n```java\n// 通用的\nimport org.antlr.v4.runtime.ParserRuleContext;\nimport org.antlr.v4.runtime.RuleContext;\nimport org.antlr.v4.runtime.tree.ParseTree;\nimport org.apache.commons.lang3.StringUtils;\n// 基于Hplsql.g4文件生成的, 使用antlr4-maven-plugin\nimport xxx.HplsqlBaseVisitor;\nimport xxx.HplsqlParser;\n```\n","slug":"2020/article_14_基于antlr4实现HQL的解析-表血缘和字段血缘","published":1,"updated":"2021-03-15T12:03:29.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75c002t0770nug6rllc","content":"<h2 id=\"前言\">前言</h2>\n<p>关于 HiveSQL 血缘，一般表示的就是 hive 数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义 SQL 任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。</p>\n<p>有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/sql-parser/</a></p>\n<h2 id=\"实现思路\">实现思路</h2>\n<p>一般来说比较直接的实现方式是 hivehook 的 LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了 hive 自带的 antlr3 的 hql 解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用 hivehook 实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。</p>\n<p>这边就考虑用 antlr4 配合 hive 内部的 Hplsql.g4 直接实现一个血缘的解析。实现方式还是 visit 模式。</p>\n<h3 id=\"表血缘\">表血缘</h3>\n<p>首先表血缘是比较之间简单的，比如对于一个 insert 来说，目标表永远只有一个，来源表是 select 中所有 from 的真实表。</p>\n<h3 id=\"字段血缘\">字段血缘</h3>\n<p>对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。</p>\n<p>这边最后的考虑是将每个 select 剥离出来存成一个 object，其中包括来源表(来源子 select 则为 null)，select 字段，父 select 的 Index(第一层则为 null)。在解析完成后所有 select 的 object 存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。</p>\n<h2 id=\"show-code\">SHOW CODE</h2>\n<h3 id=\"表血缘\">表血缘</h3>\n<p>首先定义好结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表名的结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TableNameModel <span class=\"title\">parseTableName</span><span class=\"params\">(String tableName)</span> </span>&#123;</span><br><span class=\"line\">        TableNameModel tableNameModel = <span class=\"keyword\">new</span> TableNameModel();</span><br><span class=\"line\">        String[] splitTable = tableName.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setDbName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableNameModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表血缘结构，对单个sql</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的表名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"comment\">// 输入的表名列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表血缘主要过程，监听 insert 语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// visitInsert获取insert的table_name节点，作为目标输出表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">         outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取from真实表，加到来源表的Set里</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_table_clause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .map(inputTables::add);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_table_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableLineageModel <span class=\"title\">getTableLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HiveTableLineageModel hiveTableLineageModel = <span class=\"keyword\">new</span> HiveTableLineageModel();</span><br><span class=\"line\">        hiveTableLineageModel.setOutputTable(outputTable);</span><br><span class=\"line\">        hiveTableLineageModel.setInputTables(inputTables);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveTableLineageModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段血缘\">字段血缘</h3>\n<p>定义结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字段名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带过程的表字段</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameWithProcessModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select中存储字段和别名</span></span><br><span class=\"line\"><span class=\"comment\">// 如：select a+b as c from table;</span></span><br><span class=\"line\"><span class=\"comment\">// 存储数据为 fieldNames:[a,b] alias:c process:a+b</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectItemModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; fieldNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alias;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select后的结果</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectModel</span> </span>&#123;</span><br><span class=\"line\">    Integer id; <span class=\"comment\">// index</span></span><br><span class=\"line\">    Integer parentId; <span class=\"comment\">// 父id，第一层select为null</span></span><br><span class=\"line\">    TableNameModel fromTable; <span class=\"comment\">// 来源表，来源子select则为null</span></span><br><span class=\"line\">    String tableAlias; <span class=\"comment\">// 表别名</span></span><br><span class=\"line\">    List&lt;HiveFieldLineageSelectItemModel&gt; selectItems; <span class=\"comment\">// select字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 血缘结果结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FieldNameModel targetField; <span class=\"comment\">// 目标字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameModel&gt; sourceFields; <span class=\"comment\">// 来源字段列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段血缘主要过程,主要针对的是 insert 语句，<br>\n但一般的 select 也是可以用的，因为是把最外层 select 的字段作为结果字段,<br>\n有一个限制是中间不能有 select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。<br>\n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFieldLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; hiveFieldSelects = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; selectParentKeyMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String thisSelectId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for select Item</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveFieldLineageSelectItemModel selectItemModel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectItemModel&gt; selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFieldLineage</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert解析结果表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析select每个selectItem里用到字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitExpr</span><span class=\"params\">(HplsqlParser.ExprContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startSelectItem) &#123;</span><br><span class=\"line\">            Optional.ofNullable(ctx)</span><br><span class=\"line\">                    .map(HplsqlParser.ExprContext::expr_atom)</span><br><span class=\"line\">                    .map(HplsqlParser.Expr_atomContext::ident)</span><br><span class=\"line\">                    .map(ParseTree::getText)</span><br><span class=\"line\">                    .ifPresent(s -&gt; &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(s)) &#123;</span><br><span class=\"line\">                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitExpr(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_list_item</span><span class=\"params\">(HplsqlParser.Select_list_itemContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">        selectItemModel.setFieldNames(<span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setProcess);</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_aliasContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setAlias);</span><br><span class=\"line\">        Object visit = <span class=\"keyword\">super</span>.visitSelect_list_item(ctx);</span><br><span class=\"line\">        selectFields.add(selectItemModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * from语句，处理于所有selectItem结束</span></span><br><span class=\"line\"><span class=\"comment\">     * 对上面解析出的字段名中的表别名进行处理 如t0.field</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_clause</span><span class=\"params\">(HplsqlParser.From_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;HiveFieldLineageSelectItemModel&gt;&gt; fieldItems = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HiveFieldLineageSelectItemModel item: selectFields) &#123;</span><br><span class=\"line\">            HashMap&lt;String, HashSet&lt;String&gt;&gt; aliasSet = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String field: item.getFieldNames()) &#123;</span><br><span class=\"line\">                String[] sp = field.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    String key = thisSelectId + <span class=\"string\">\"_\"</span> + sp[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                    aliasSet.get(key).add(sp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> flat = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(String k: selectParentKeyMap.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(k.startsWith(thisSelectId + <span class=\"string\">\"_\"</span>)) &#123;</span><br><span class=\"line\">                            aliasSet.computeIfAbsent(k, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                            aliasSet.get(k).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            flat=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flat) &#123;</span><br><span class=\"line\">                        String key = thisSelectId + <span class=\"string\">\"_\"</span>;</span><br><span class=\"line\">                        aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                        aliasSet.get(key).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: aliasSet.keySet()) &#123;</span><br><span class=\"line\">                fieldItems.computeIfAbsent(key, k -&gt; <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                HiveFieldLineageSelectItemModel selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">                selectItemModel.setFieldNames(aliasSet.get(key));</span><br><span class=\"line\">                selectItemModel.setAlias(item.getAlias());</span><br><span class=\"line\">                selectItemModel.setProcess(item.getProcess());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(selectItemModel.getFieldNames().size() == <span class=\"number\">1</span> &amp;&amp; selectItemModel.getAlias() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fieldItems.get(key).add(selectItemModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: fieldItems.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hiveFieldSelects.get(key) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 进入select前</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析每个select存信息并另存父子关系</span></span><br><span class=\"line\"><span class=\"comment\">     * 父子来源于from subSelect, join subSelect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Fullselect_stmt_itemContext&gt; selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) &#123;</span><br><span class=\"line\">            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">            Integer thisId = selectItem.getStart().getStartIndex();</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();</span><br><span class=\"line\">            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            String alias = hiveFieldLineageSelectModel.getTableAlias();</span><br><span class=\"line\">            String thisKey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, alias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: alias);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setId(thisKey + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                    .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                            subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;HplsqlParser.From_join_clauseContext&gt; fromJoinClauses = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) &#123;</span><br><span class=\"line\">                HiveFieldLineageSelectModel joinSelect = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setFromTable);</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                String jalias = joinSelect.getTableAlias();</span><br><span class=\"line\">                String jkey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, jalias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: jalias);</span><br><span class=\"line\">                joinSelect.setId(jkey);</span><br><span class=\"line\">                joinSelect.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">                joinSelect.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                hiveFieldSelects.put(jkey, joinSelect);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                        .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                                subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理每个子select进入前，</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化selectItem相关的变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSubselect_stmt</span><span class=\"params\">(HplsqlParser.Subselect_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        thisSelectId = ctx.getStart().getStartIndex() + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSubselect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectModel&gt; hiveFieldSelectList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换HashMap存储为List</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transSelectToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: hiveFieldSelects.keySet()) &#123;</span><br><span class=\"line\">            hiveFieldSelectList.add(hiveFieldSelects.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取目标字段</span></span><br><span class=\"line\"><span class=\"comment\">     * 也就是parentId为null的最外层select的字段别名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;FieldNameModel&gt; <span class=\"title\">getTargetFields</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; items = hiveFieldSelectList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentId() == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .map(HiveFieldLineageSelectModel::getSelectItems)</span><br><span class=\"line\">                .map(fields -&gt; fields.stream()</span><br><span class=\"line\">                        .map(HiveFieldLineageSelectItemModel::getAlias)</span><br><span class=\"line\">                        .collect(Collectors.toList()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;String&gt; item: items) &#123;</span><br><span class=\"line\">            res.addAll(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; fieldNameModels = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i: res) &#123;</span><br><span class=\"line\">            FieldNameModel fieldNameModel = <span class=\"keyword\">new</span> FieldNameModel();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(outputTable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fieldNameModel.setDbName(outputTable.getDbName());</span><br><span class=\"line\">                fieldNameModel.setTableName(outputTable.getTableName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fieldNameModel.setFieldName(i);</span><br><span class=\"line\">            fieldNameModels.add(fieldNameModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNameModels;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameWithProcessModel&gt; sourceFields;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归按每个字段从外到内寻找每个字段的来源</span></span><br><span class=\"line\"><span class=\"comment\">     * 逻辑为最外的字段别名，父id -&gt; 匹配子id别名 -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * -&gt; 如果是来源是表，存储，如果来源是子select，继续递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findFieldSource</span><span class=\"params\">(String targetField, String parentId)</span> </span>&#123;</span><br><span class=\"line\">        hiveFieldSelectList.forEach(select -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((parentId == <span class=\"keyword\">null</span> &amp;&amp; select.getParentId() == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                    (select.getParentId() != <span class=\"keyword\">null</span> &amp;&amp; select.getParentId().equals(parentId))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(select.getSelectItems() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(select.getFromTable() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    findFieldSource(field, select.getId());</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    FieldNameWithProcessModel fieldNameWithProcessModel = <span class=\"keyword\">new</span> FieldNameWithProcessModel();</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setFieldName(field);</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setProcess(fieldProcess);</span><br><span class=\"line\">                                    sourceFields.add(fieldNameWithProcessModel);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字段血缘列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;HiveFieldLineageModel&gt; <span class=\"title\">getHiveFieldLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        transSelectToList();</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; targetFields = getTargetFields();</span><br><span class=\"line\">        List&lt;HiveFieldLineageModel&gt; hiveFieldLineageModelList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(FieldNameModel targetField: targetFields) &#123;</span><br><span class=\"line\">            HiveFieldLineageModel hiveFieldLineageModel = <span class=\"keyword\">new</span> HiveFieldLineageModel();</span><br><span class=\"line\">            hiveFieldLineageModel.setTargetField(targetField);</span><br><span class=\"line\">            sourceFields = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            findFieldSource(targetField.getFieldName(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            hiveFieldLineageModel.setSourceFields(sourceFields);</span><br><span class=\"line\">            hiveFieldLineageModelList.add(hiveFieldLineageModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldLineageModelList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取sql解析处理后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; <span class=\"title\">getHiveFieldSelects</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldSelects;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果展示\">效果展示</h2>\n<p>举一个简单的 sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> db_test.table_result</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    t1.id,</span><br><span class=\"line\">    t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        id1 + id2 <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        db_test.table1</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            sourcename <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            db_test.table2</span><br><span class=\"line\">    )</span><br><span class=\"line\">) t2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> t1.id=t2.id</span><br></pre></td></tr></table></figure>\n<p>解析后的表血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inputTables\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"outputTable\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析后的字段血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id1\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用说明\">引用说明</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">antlr4.version</span>&gt;</span>4.7.2<span class=\"tag\">&lt;/<span class=\"name\">antlr4.version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通用的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.RuleContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"comment\">// 基于Hplsql.g4文件生成的, 使用antlr4-maven-plugin</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xxx.HplsqlBaseVisitor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> xxx.HplsqlParser;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2>前言</h2>\n<p>关于 HiveSQL 血缘，一般表示的就是 hive 数据仓库中所有表和字段的来源流向关系。它的解析是十分必要的，一方面数仓建表的时候有时只会定义 SQL 任务不会特别关注到任务之间的关系，对于查看的数据也不容易追溯两层以上或以下的数据来源和去向。</p>\n<p>有了血缘就可以对离线任务执行的先后关系作出一定规范，可以做数据来源链路的分析，数据的上卷下钻，数仓直接的数据建模等。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\">https://github.com/webgjc/sql-parser/</a></p>\n<h2>实现思路</h2>\n<p>一般来说比较直接的实现方式是 hivehook 的 LineageLogger，但直接用也有比较明显麻烦的地方，一个是借用了 hive 自带的 antlr3 的 hql 解析，如果有部分语法不满足，去修改解析文件会造成不可控影响；另一个用 hivehook 实现后的迭代测试发布等都是一个比较麻烦的过程，出错了也很难定位问题所在。</p>\n<p>这边就考虑用 antlr4 配合 hive 内部的 Hplsql.g4 直接实现一个血缘的解析。实现方式还是 visit 模式。</p>\n<h3>表血缘</h3>\n<p>首先表血缘是比较之间简单的，比如对于一个 insert 来说，目标表永远只有一个，来源表是 select 中所有 from 的真实表。</p>\n<h3>字段血缘</h3>\n<p>对于字段血缘实现会麻烦一点，因为要将每个结果字段的层层关系找到并最后对应上真实表的字段，可能中间还会有多个字段计算为一个字段，一个字段于下层多个字段有血缘，还会有表别名，字段别名的干扰。</p>\n<p>这边最后的考虑是将每个 select 剥离出来存成一个 object，其中包括来源表(来源子 select 则为 null)，select 字段，父 select 的 Index(第一层则为 null)。在解析完成后所有 select 的 object 存为一个数组，然后逐个对最外层的字段进行溯源找到真实的来源表。</p>\n<h2>SHOW CODE</h2>\n<h3>表血缘</h3>\n<p>首先定义好结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表名的结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TableNameModel <span class=\"title\">parseTableName</span><span class=\"params\">(String tableName)</span> </span>&#123;</span><br><span class=\"line\">        TableNameModel tableNameModel = <span class=\"keyword\">new</span> TableNameModel();</span><br><span class=\"line\">        String[] splitTable = tableName.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setDbName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(splitTable.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            tableNameModel.setTableName(splitTable[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tableNameModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表血缘结构，对单个sql</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的表名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"comment\">// 输入的表名列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表血缘主要过程，监听 insert 语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;TableNameModel&gt; inputTables = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// visitInsert获取insert的table_name节点，作为目标输出表</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">         outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取from真实表，加到来源表的Set里</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_table_clause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .map(inputTables::add);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_table_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableLineageModel <span class=\"title\">getTableLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HiveTableLineageModel hiveTableLineageModel = <span class=\"keyword\">new</span> HiveTableLineageModel();</span><br><span class=\"line\">        hiveTableLineageModel.setOutputTable(outputTable);</span><br><span class=\"line\">        hiveTableLineageModel.setInputTables(inputTables);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveTableLineageModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>字段血缘</h3>\n<p>定义结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字段名</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带过程的表字段</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldNameWithProcessModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select中存储字段和别名</span></span><br><span class=\"line\"><span class=\"comment\">// 如：select a+b as c from table;</span></span><br><span class=\"line\"><span class=\"comment\">// 存储数据为 fieldNames:[a,b] alias:c process:a+b</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectItemModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; fieldNames;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String alias;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String process;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析单个select后的结果</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageSelectModel</span> </span>&#123;</span><br><span class=\"line\">    Integer id; <span class=\"comment\">// index</span></span><br><span class=\"line\">    Integer parentId; <span class=\"comment\">// 父id，第一层select为null</span></span><br><span class=\"line\">    TableNameModel fromTable; <span class=\"comment\">// 来源表，来源子select则为null</span></span><br><span class=\"line\">    String tableAlias; <span class=\"comment\">// 表别名</span></span><br><span class=\"line\">    List&lt;HiveFieldLineageSelectItemModel&gt; selectItems; <span class=\"comment\">// select字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 血缘结果结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldLineageModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FieldNameModel targetField; <span class=\"comment\">// 目标字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameModel&gt; sourceFields; <span class=\"comment\">// 来源字段列表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段血缘主要过程,主要针对的是 insert 语句，<br>\n但一般的 select 也是可以用的，因为是把最外层 select 的字段作为结果字段,<br>\n有一个限制是中间不能有 select * 这种操作，因为目前不连接元数据库，就无法获得*对应的字段。<br>\n中间也记录了字段流转的计算过程，理应是一个数组，取了最长一个，这边比较不稳定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFieldLineage</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TableNameModel outputTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; hiveFieldSelects = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, String&gt; selectParentKeyMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String thisSelectId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for select Item</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveFieldLineageSelectItemModel selectItemModel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectItemModel&gt; selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFieldLineage</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert解析结果表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitInsert_stmt</span><span class=\"params\">(HplsqlParser.Insert_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        outputTable = Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Insert_stmtContext::table_name)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitInsert_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析select每个selectItem里用到字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitExpr</span><span class=\"params\">(HplsqlParser.ExprContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startSelectItem) &#123;</span><br><span class=\"line\">            Optional.ofNullable(ctx)</span><br><span class=\"line\">                    .map(HplsqlParser.ExprContext::expr_atom)</span><br><span class=\"line\">                    .map(HplsqlParser.Expr_atomContext::ident)</span><br><span class=\"line\">                    .map(ParseTree::getText)</span><br><span class=\"line\">                    .ifPresent(s -&gt; &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(s)) &#123;</span><br><span class=\"line\">                            selectItemModel.getFieldNames().add(TableNameModel.dealNameMark(s));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitExpr(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * selectItem 获取别名名，初始化selectItem存相关字段的fieldNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_list_item</span><span class=\"params\">(HplsqlParser.Select_list_itemContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">        selectItemModel.setFieldNames(<span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setProcess);</span><br><span class=\"line\">        Optional.ofNullable(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_aliasContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .ifPresent(selectItemModel::setAlias);</span><br><span class=\"line\">        Object visit = <span class=\"keyword\">super</span>.visitSelect_list_item(ctx);</span><br><span class=\"line\">        selectFields.add(selectItemModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * from语句，处理于所有selectItem结束</span></span><br><span class=\"line\"><span class=\"comment\">     * 对上面解析出的字段名中的表别名进行处理 如t0.field</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitFrom_clause</span><span class=\"params\">(HplsqlParser.From_clauseContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        startSelectItem = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        HashMap&lt;String, List&lt;HiveFieldLineageSelectItemModel&gt;&gt; fieldItems = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HiveFieldLineageSelectItemModel item: selectFields) &#123;</span><br><span class=\"line\">            HashMap&lt;String, HashSet&lt;String&gt;&gt; aliasSet = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String field: item.getFieldNames()) &#123;</span><br><span class=\"line\">                String[] sp = field.split(<span class=\"string\">\"\\\\.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    String key = thisSelectId + <span class=\"string\">\"_\"</span> + sp[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                    aliasSet.get(key).add(sp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sp.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> flat = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(String k: selectParentKeyMap.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(k.startsWith(thisSelectId + <span class=\"string\">\"_\"</span>)) &#123;</span><br><span class=\"line\">                            aliasSet.computeIfAbsent(k, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                            aliasSet.get(k).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            flat=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(flat) &#123;</span><br><span class=\"line\">                        String key = thisSelectId + <span class=\"string\">\"_\"</span>;</span><br><span class=\"line\">                        aliasSet.computeIfAbsent(key, t -&gt; <span class=\"keyword\">new</span> HashSet&lt;&gt;());</span><br><span class=\"line\">                        aliasSet.get(key).add(sp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: aliasSet.keySet()) &#123;</span><br><span class=\"line\">                fieldItems.computeIfAbsent(key, k -&gt; <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                HiveFieldLineageSelectItemModel selectItemModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectItemModel();</span><br><span class=\"line\">                selectItemModel.setFieldNames(aliasSet.get(key));</span><br><span class=\"line\">                selectItemModel.setAlias(item.getAlias());</span><br><span class=\"line\">                selectItemModel.setProcess(item.getProcess());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(selectItemModel.getFieldNames().size() == <span class=\"number\">1</span> &amp;&amp; selectItemModel.getAlias() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    selectItemModel.setAlias(selectItemModel.getFieldNames().iterator().next());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fieldItems.get(key).add(selectItemModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: fieldItems.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hiveFieldSelects.get(key) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                hiveFieldSelects.get(key).setSelectItems(fieldItems.get(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitFrom_clause(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 进入select前</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析每个select存信息并另存父子关系</span></span><br><span class=\"line\"><span class=\"comment\">     * 父子来源于from subSelect, join subSelect</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Fullselect_stmt_itemContext&gt; selectItems  = ctx.fullselect_stmt().fullselect_stmt_item();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HplsqlParser.Fullselect_stmt_itemContext selectItem: selectItems) &#123;</span><br><span class=\"line\">            HiveFieldLineageSelectModel hiveFieldLineageSelectModel = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">            Integer thisId = selectItem.getStart().getStartIndex();</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = selectItem.subselect_stmt();</span><br><span class=\"line\">            HplsqlParser.From_table_name_clauseContext fromTableNameClause = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setFromTable);</span><br><span class=\"line\">            Optional.ofNullable(fromTableNameClause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .ifPresent(hiveFieldLineageSelectModel::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">            String alias = hiveFieldLineageSelectModel.getTableAlias();</span><br><span class=\"line\">            String thisKey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, alias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: alias);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setId(thisKey + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">            hiveFieldLineageSelectModel.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            hiveFieldSelects.put(thisKey, hiveFieldLineageSelectModel);</span><br><span class=\"line\"></span><br><span class=\"line\">            Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                    .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                    .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                            subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                    selectParentKeyMap.put(item.getStart().getStartIndex(), thisKey)));</span><br><span class=\"line\"></span><br><span class=\"line\">            List&lt;HplsqlParser.From_join_clauseContext&gt; fromJoinClauses = Optional.ofNullable(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HplsqlParser.From_join_clauseContext fromJoinClauseContext: fromJoinClauses) &#123;</span><br><span class=\"line\">                HiveFieldLineageSelectModel joinSelect = <span class=\"keyword\">new</span> HiveFieldLineageSelectModel();</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::table_name)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .map(TableNameModel::parseTableName)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setFromTable);</span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_name_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_alias_clauseContext::ident)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                        .map(RuleContext::getText)</span><br><span class=\"line\">                        .ifPresent(joinSelect::setTableAlias);</span><br><span class=\"line\"></span><br><span class=\"line\">                String jalias = joinSelect.getTableAlias();</span><br><span class=\"line\">                String jkey = String.format(<span class=\"string\">\"%s_%s\"</span>, thisId, jalias == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span>: jalias);</span><br><span class=\"line\">                joinSelect.setId(jkey);</span><br><span class=\"line\">                joinSelect.setParentId(selectParentKeyMap.get(thisId));</span><br><span class=\"line\">                joinSelect.setSelectItems(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">                hiveFieldSelects.put(jkey, joinSelect);</span><br><span class=\"line\"></span><br><span class=\"line\">                Optional.ofNullable(fromJoinClauseContext)</span><br><span class=\"line\">                        .map(HplsqlParser.From_join_clauseContext::from_table_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                        .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Select_stmtContext::fullselect_stmt)</span><br><span class=\"line\">                        .map(HplsqlParser.Fullselect_stmtContext::fullselect_stmt_item)</span><br><span class=\"line\">                        .ifPresent(subSelects -&gt;</span><br><span class=\"line\">                                subSelects.forEach(item -&gt;</span><br><span class=\"line\">                                        selectParentKeyMap.put(item.getStart().getStartIndex(), jkey)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理每个子select进入前，</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化selectItem相关的变量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSubselect_stmt</span><span class=\"params\">(HplsqlParser.Subselect_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        thisSelectId = ctx.getStart().getStartIndex() + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        selectFields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSubselect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldLineageSelectModel&gt; hiveFieldSelectList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转换HashMap存储为List</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transSelectToList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key: hiveFieldSelects.keySet()) &#123;</span><br><span class=\"line\">            hiveFieldSelectList.add(hiveFieldSelects.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取目标字段</span></span><br><span class=\"line\"><span class=\"comment\">     * 也就是parentId为null的最外层select的字段别名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;FieldNameModel&gt; <span class=\"title\">getTargetFields</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; items = hiveFieldSelectList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentId() == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                .map(HiveFieldLineageSelectModel::getSelectItems)</span><br><span class=\"line\">                .map(fields -&gt; fields.stream()</span><br><span class=\"line\">                        .map(HiveFieldLineageSelectItemModel::getAlias)</span><br><span class=\"line\">                        .collect(Collectors.toList()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(List&lt;String&gt; item: items) &#123;</span><br><span class=\"line\">            res.addAll(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = res.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; fieldNameModels = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i: res) &#123;</span><br><span class=\"line\">            FieldNameModel fieldNameModel = <span class=\"keyword\">new</span> FieldNameModel();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(outputTable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fieldNameModel.setDbName(outputTable.getDbName());</span><br><span class=\"line\">                fieldNameModel.setTableName(outputTable.getTableName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fieldNameModel.setFieldName(i);</span><br><span class=\"line\">            fieldNameModels.add(fieldNameModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fieldNameModels;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashSet&lt;FieldNameWithProcessModel&gt; sourceFields;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归按每个字段从外到内寻找每个字段的来源</span></span><br><span class=\"line\"><span class=\"comment\">     * 逻辑为最外的字段别名，父id -&gt; 匹配子id别名 -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * -&gt; 如果是来源是表，存储，如果来源是子select，继续递归</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findFieldSource</span><span class=\"params\">(String targetField, String parentId)</span> </span>&#123;</span><br><span class=\"line\">        hiveFieldSelectList.forEach(select -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((parentId == <span class=\"keyword\">null</span> &amp;&amp; select.getParentId() == <span class=\"keyword\">null</span>) ||</span><br><span class=\"line\">                    (select.getParentId() != <span class=\"keyword\">null</span> &amp;&amp; select.getParentId().equals(parentId))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(select.getSelectItems() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(select.getFromTable() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    findFieldSource(field, select.getId());</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        select.getSelectItems().forEach(selectItem -&gt; &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(selectItem.getAlias().equals(targetField)) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span>(selectItem.getProcess().length() &gt; fieldProcess.length()) &#123;</span><br><span class=\"line\">                                    fieldProcess = selectItem.getProcess();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(String field: selectItem.getFieldNames())&#123;</span><br><span class=\"line\">                                    FieldNameWithProcessModel fieldNameWithProcessModel = <span class=\"keyword\">new</span> FieldNameWithProcessModel();</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setDbName(select.getFromTable().getDbName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setTableName(select.getFromTable().getTableName());</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setFieldName(field);</span><br><span class=\"line\">                                    fieldNameWithProcessModel.setProcess(fieldProcess);</span><br><span class=\"line\">                                    sourceFields.add(fieldNameWithProcessModel);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字段血缘列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;HiveFieldLineageModel&gt; <span class=\"title\">getHiveFieldLineage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        transSelectToList();</span><br><span class=\"line\">        List&lt;FieldNameModel&gt; targetFields = getTargetFields();</span><br><span class=\"line\">        List&lt;HiveFieldLineageModel&gt; hiveFieldLineageModelList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(FieldNameModel targetField: targetFields) &#123;</span><br><span class=\"line\">            HiveFieldLineageModel hiveFieldLineageModel = <span class=\"keyword\">new</span> HiveFieldLineageModel();</span><br><span class=\"line\">            hiveFieldLineageModel.setTargetField(targetField);</span><br><span class=\"line\">            sourceFields = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            fieldProcess = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            findFieldSource(targetField.getFieldName(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            hiveFieldLineageModel.setSourceFields(sourceFields);</span><br><span class=\"line\">            hiveFieldLineageModelList.add(hiveFieldLineageModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldLineageModelList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取sql解析处理后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HashMap&lt;String, HiveFieldLineageSelectModel&gt; <span class=\"title\">getHiveFieldSelects</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveFieldSelects;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>效果展示</h2>\n<p>举一个简单的 sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> db_test.table_result</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    t1.id,</span><br><span class=\"line\">    t2.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        id1 + id2 <span class=\"keyword\">AS</span> <span class=\"keyword\">id</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        db_test.table1</span><br><span class=\"line\">) t1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            sourcename <span class=\"keyword\">AS</span> <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            db_test.table2</span><br><span class=\"line\">    )</span><br><span class=\"line\">) t2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> t1.id=t2.id</span><br></pre></td></tr></table></figure>\n<p>解析后的表血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"inputTables\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"outputTable\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析后的字段血缘</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id1\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"id1 + id2\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table1\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"sourceFields\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"process\"</span>: <span class=\"string\">\"sourcename\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"targetField\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"table_result\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2>引用说明</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">antlr4.version</span>&gt;</span>4.7.2<span class=\"tag\">&lt;/<span class=\"name\">antlr4.version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通用的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.RuleContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"comment\">// 基于Hplsql.g4文件生成的, 使用antlr4-maven-plugin</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xxx.HplsqlBaseVisitor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> xxx.HplsqlParser;</span><br></pre></td></tr></table></figure>\n"},{"title":"WEB-ROBOT","catalog":true,"date":"2020-05-11T11:31:43.000Z","subtitle":"一个管理网页自动化执行的chrome插件","header-img":null,"_content":"\n# 前言\n\n这边主要介绍一款个人自行开发的chrome插件 web-robot，  \n这边讲解的是他的V1.0版本，  \n包括它的开始设计，使用教程，实现思路和细节。  \n源码的github地址是在[https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n# 软件设计\n\n关于这个软件的初始设计定位，这边将他定位为**网页自动化链路管理执行**；  \n类似模拟自动化测试，但不会有结果校验。\n\n创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。\n\n软件主要要包括的有以下一些：\n- 网页元素的可视化筛选；\n- 筛选的元素加上动作与延时变成一个事件；\n- 多个事件形成一个事务流程；\n- 主界面可以管理多个事务，进行事务的运行、轮播、分享等；\n\n软件风格大致按使用的前端ui框架的极简风格走；\n\n# 软件使用教程\n\n## 下载与导入\n\n### 源码下载导入\n\n源码github地址：[https://github.com/webgjc/web_robot](\nhttps://github.com/webgjc/web_robot)\n\n首先到github上将源码clone到本地 / 下载解压也可以\n> git clone https://github.com/webgjc/web_robot.git\n\n然后打开chrome点开右上角三个点的地方，  \n选择更多工具 ==》扩展程序；\n\n因为是源码，开启右上角的开发者模式\n![开发者模式](/img/mypost/kaifazhemoshi.jpg)\n\n然后点击左上角的加载已解压的扩展程序，  \n选择刚刚clone下来的目录\n\n下面表示已经加载进来了\n![robot](/img/mypost/robot.jpg)\n\n且右上角出现这个小图标\n![robot](/img/mypost/robot_small.jpg)\n\n**重要：右键这个小图标，**  \n**可读取和更改的网站数据，**  \n**选择 在所有网站上；**\n\n至此已经完成下载和导入啦！😋\n\n### 从chrome商店下载导入\n\n暂时没有上线chrome应用商店\n\n### 版本更新\n\n首先更新本地代码\n> git pull\n\n**然后重复上面的 加载已解压的扩展程序 的操作**。\n\n## 软件使用\n\n### 新建事务\n\n首先新建一个事务\n![robot](/img/mypost/robot_shiwu.jpg)\n\n这边建一个test为例子\n![robot](/img/mypost/robot_main.jpg)\n\n### 筛选器\n\n点击 test 进入 过程添加页\n\n点击添加过程，进入筛选器页面\n![robot](/img/mypost/robot_shaixuanqi.jpg)\n\n这边支持按 html标签 / class / id 筛选\n\n下面都进行举例\n\n#### html标签筛选\n\n选择一个html标签，a(链接), body, div等  \n下方会展示一个列表，表示页面中该元素有几个。  \n鼠标移到列表每个上面，  \n页面对应元素将会渲染一个蒙版到以便正确定位选择。\n\n这是选择body的时候\n![robot](/img/mypost/robot_htmltag.jpg)\n\n这是选择div的时候\n![robot](/img/mypost/robot_htmltag2.jpg)\n\n\n#### class / id 筛选\n\n首先在选择标签列表的下列菜单中  \n选择 第一个 class/id选择器   \n然后会出现一个输入框输入对应的class或id  \n\nclass选择器需要以.开头，如：.xxx  \nid选择器需要以#开头，如：#xxx\n\n选好后按回车，如果有对应的选择器，将会展示一个列表, \n后续操作同html标签，鼠标移到列表上会渲染蒙版\n![robot](/img/mypost/robot_classtag.jpg)\n\n### 单个事件\n\n用筛选器选中好一个元素后  \n将会进入事件编辑页面\n![robot](/img/mypost/robot_shijian.jpg)\n\n(如想改变元素，可以按最上面的元素返回)\n\n这边的选择操作可以选的有：\n- click -- 点击\n- value -- 设值\n- refresh -- 刷新\n- pagejump -- 当页url跳转\n\n然后输入 执行前等待时间 / 和上一步执行中间间隔时间\n\n可以测试运行当前事件，也可以把事件添加到事务流程中。\n\n### 流程事件管理\n\n添加后会返回流程页，  \n如下加了一条，等待一秒后，(click)点击第一个\\<a\\>标签\n\n![robot](/img/mypost/robot_liuch.jpg)\n\n如下表示，  \n等待一秒后，(click)点击第一个\\<a\\>标签的链接，  \n再等待一秒后，往第一个input输入框里赋值 你好\n\n![robot](/img/mypost/robot_liuch2.jpg)\n\n可以选择继续添加，  \n可以选择返回主页，  \n可以测试运行单个事件，  \n可以删除单个事件；\n\n### 事务管理\n\n继续到主页\n\n事务支持新增，删除，运行，轮播，导出，导入\n\n![robot](/img/mypost/robot_main.jpg)\n\n#### 运行事务\n\n运行主要是按定好的流程运行每个事件，  \n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。\n\n#### 轮播事务\n\n轮播表示的是循环运行，运行完一次后立即进行下一次。  \n中间的间隔是第一个事件的等待时间。  \n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。\n\n#### 导入导出事务\n\n点击导出，事务的信息会自动保存到剪切板，复制给他人即可；\n\n点击导入，将他人复制的事务信息导入即可；\n\n### 常见问题说明\n\n>筛选器失效\n\n有时候页面与浏览器插件的连接会失效或过期，  \n这个时候可以刷新页面，然后重新打开这个插件页面。\n\n# 软件开发过程\n\n## 其他准备知识\n\n关于chrome插件的开发，请看[官网教程](https://developer.chrome.com/extensions)或[其他教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n\n## 软件开发设计\n\n这个浏览器插件包括以下几部分：\n```\n配置文件\nmanifest.json\n\n样式文件夹\n/css\n\nhtml文件，主要放了popup.html，也就是这个插件管理页\n/html\n\n存放图片\n/images\n\n存放js\n主要实现的包括popup.js(管理页的后端)\n和background.js(浏览器的后端)\n/js\n```\n\n## 部分代码说明\n\n``` javascript\n// 获取数据存储\nfunction get_my_robot(callback) {\n    chrome.storage.local.get([\"my_robot\"], function(res) {\n        if (callback) callback(res.my_robot)\n    })\n}\n\n// 设置数据存储\nfunction set_my_robot(new_robot, callback) {\n    chrome.storage.local.set({ \"my_robot\": new_robot }, function() {\n        if (callback) callback()\n    })\n}\n\n// 连接\nfunction connect(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        var port = chrome.tabs.connect(tabs[0].id, { name: \"robot\" });\n        callback(port)\n    })\n}\n\n// 当前tab执行\nfunction exectab(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        callback(tabs[0].id)\n    })\n}\n\n\n// 拼接要执行的js代码\nfunction jscode(process) {\n    let exec_code = \"(function(){ \\n\";\n    if(process[\"tag\"].startsWith(\".\")) {\n        exec_code += 'var robot_node = document.getElementsByClassName(\"' + process[\"tag\"].substring(1) + '\")[' + process[\"n\"] + '];'\n    }else if(process[\"tag\"].startsWith(\"#\")) {\n        exec_code += 'var robot_node = document.getElementById(\"' + process[\"tag\"].substring(1) + '\");'\n    }else{\n        exec_code += 'var robot_node = document.getElementsByTagName(\"' + process[\"tag\"] + '\")[' + process[\"n\"] + '];'\n    }\n    if (process[\"opera\"] == \"click\") {\n        exec_code += \"robot_node.click();\"\n    } else if (process[\"opera\"] == \"value\") {\n        /**\n         * 为react兼容\n         */\n        exec_code += \"let lastValue = robot_node.value;\"\n        exec_code += \"robot_node.value=\\\"\" + process[\"value\"] + \"\\\";\";\n        exec_code += \"let event = new Event('input', { bubbles: true });\";\n        exec_code += \"event.simulated = true;\";\n        exec_code += \"let tracker = robot_node._valueTracker;\";\n        exec_code += \"if (tracker) { tracker.setValue(lastValue); }\\n\";\n        exec_code += \"robot_node.dispatchEvent(event);\";\n    } else if (process[\"opera\"] == \"refresh\") {\n        exec_code += \"window.location.reload();\";\n    } else if (process[\"opera\"] == \"pagejump\") {\n        exec_code += \"window.location.href=\\\"\" + process[\"value\"] + \"\\\";\";\n    }\n    exec_code += \"\\n})();\";\n    console.log(exec_code)\n    return exec_code;\n}\n\n// 根据存储数据更新主页\nfunction refresh_cases() {\n    get_my_robot(my_robot => {\n        if (my_robot == undefined) {\n            set_my_robot({})\n        } else {\n            var cases = \"\";\n            for (let i in my_robot) {\n                let one_case = {}\n                one_case[\"case_name\"] = i;\n                one_case[\"content\"] = my_robot[i];\n                let tr = '<tr id=' + i + '> \\\n                            <td> \\\n                                <a href=\"#\" class=\"case_name\">' + i + '</a> \\\n                            </td> \\\n                            <td> \\\n                                <a href=\"#\" class=\"run_case\">运行</a> \\\n                                <a href=\"#\" class=\"del_case\">删除</a> \\\n                                <a href=\"#\" class=\"lun_case\">轮播</a> \\\n                                <a href=\"#\" class=\"export_case\" data-clipboard-text=' + JSON.stringify(one_case) + '>导出</a> \\\n                            </td> \\\n                        </tr>';\n                cases = cases + tr;\n            }\n            $(\"#cases\").html(cases);\n        }\n    })\n    new ClipboardJS('.export_case');\n}\n\n\n// 更新单个事务的流程\nfunction refresh_process(case_name) {\n    get_my_robot(my_robot => {\n        var data = my_robot[case_name];\n        var process_li = \"\";\n        for (let i = 0; i < data.length; i++) {\n            let lili = '<li class=\"collection-item\" id=\"process-' + i + '\"> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">标签：' + data[i][\"tag\"] + '</div> \\\n                                <div class=\"col s6 \">#：' + data[i][\"n\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">操作：' + data[i][\"opera\"] + '</div> \\\n                                <div class=\"col s6 \">等待：' + data[i][\"wait\"] + '秒</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s12 \">赋值：' + data[i][\"value\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6\" id=\"process_test_run\" >test</div> \\\n                                </a> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6 \" id=\"process_del\">删除</div> \\\n                                </a> \\\n                            </div> \\\n                        </li> ';\n            process_li = process_li + lili;\n        }\n        $(\"#process_list\").html(process_li);\n    })\n}\n\n// 主要\n$(document).ready(function() {\n\n    // 筛选器\n    var tag_types = [\"class/id选择器\", \"a\", \"body\", \"button\", \"div\", \"i\", \"img\", \"input\", \"li\", \"p\", \"span\", \"td\", \"textarea\", \"tr\", \"ul\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"];\n    // 操作\n    var operas = [\"click\", \"value\", \"refresh\", \"pagejump\"];\n    var case_name = \"\";\n    var init_select = 1;\n\n    refresh_cases();\n\n    $('.modal').modal();\n\n    // 连接当前页面\n    exectab(tab_id => {\n\n        // 运行事务，调用background\n        $(\"#cases\").on(\"click\", \".run_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var bg = chrome.extension.getBackgroundPage();\n                bg.execute(my_robot[case_name], tab_id);\n                var process_wait = 0;\n                for (let i = 0; i < my_robot[case_name].length; i++) {\n                    process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait)\n            })\n        })\n\n        // 轮播事务\n        $(\"#cases\").on(\"click\", \".lun_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var process_wait = 0;\n                for (let n = 0; n < 100; n++) {\n                    for (let i = 0; i < my_robot[case_name].length; i++) {\n                        process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                        setTimeout(function() {\n                            chrome.tabs.executeScript(tab_id, { code: jscode(my_robot[case_name][i]) });\n                        }, process_wait);\n                    }\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait);\n            })\n        })\n\n        // 导入事务\n        $(\"#cases\").on(\"click\", \".export_case\", function() {\n            $(this).html(\"导出成功\");\n            var that = $(this);\n            setTimeout(function() {\n                that.html(\"导出\");\n            }, 1000);\n        })\n\n    })\n})\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","source":"_posts/2020/article_18_chrome插件-网页自动化.md","raw":"---\ntitle: WEB-ROBOT\ncatalog: true\ndate: 2020-05-11 19:31:43\nsubtitle: 一个管理网页自动化执行的chrome插件\nheader-img: \ntags:\n- CHROME插件\n---\n\n# 前言\n\n这边主要介绍一款个人自行开发的chrome插件 web-robot，  \n这边讲解的是他的V1.0版本，  \n包括它的开始设计，使用教程，实现思路和细节。  \n源码的github地址是在[https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n# 软件设计\n\n关于这个软件的初始设计定位，这边将他定位为**网页自动化链路管理执行**；  \n类似模拟自动化测试，但不会有结果校验。\n\n创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。\n\n软件主要要包括的有以下一些：\n- 网页元素的可视化筛选；\n- 筛选的元素加上动作与延时变成一个事件；\n- 多个事件形成一个事务流程；\n- 主界面可以管理多个事务，进行事务的运行、轮播、分享等；\n\n软件风格大致按使用的前端ui框架的极简风格走；\n\n# 软件使用教程\n\n## 下载与导入\n\n### 源码下载导入\n\n源码github地址：[https://github.com/webgjc/web_robot](\nhttps://github.com/webgjc/web_robot)\n\n首先到github上将源码clone到本地 / 下载解压也可以\n> git clone https://github.com/webgjc/web_robot.git\n\n然后打开chrome点开右上角三个点的地方，  \n选择更多工具 ==》扩展程序；\n\n因为是源码，开启右上角的开发者模式\n![开发者模式](/img/mypost/kaifazhemoshi.jpg)\n\n然后点击左上角的加载已解压的扩展程序，  \n选择刚刚clone下来的目录\n\n下面表示已经加载进来了\n![robot](/img/mypost/robot.jpg)\n\n且右上角出现这个小图标\n![robot](/img/mypost/robot_small.jpg)\n\n**重要：右键这个小图标，**  \n**可读取和更改的网站数据，**  \n**选择 在所有网站上；**\n\n至此已经完成下载和导入啦！😋\n\n### 从chrome商店下载导入\n\n暂时没有上线chrome应用商店\n\n### 版本更新\n\n首先更新本地代码\n> git pull\n\n**然后重复上面的 加载已解压的扩展程序 的操作**。\n\n## 软件使用\n\n### 新建事务\n\n首先新建一个事务\n![robot](/img/mypost/robot_shiwu.jpg)\n\n这边建一个test为例子\n![robot](/img/mypost/robot_main.jpg)\n\n### 筛选器\n\n点击 test 进入 过程添加页\n\n点击添加过程，进入筛选器页面\n![robot](/img/mypost/robot_shaixuanqi.jpg)\n\n这边支持按 html标签 / class / id 筛选\n\n下面都进行举例\n\n#### html标签筛选\n\n选择一个html标签，a(链接), body, div等  \n下方会展示一个列表，表示页面中该元素有几个。  \n鼠标移到列表每个上面，  \n页面对应元素将会渲染一个蒙版到以便正确定位选择。\n\n这是选择body的时候\n![robot](/img/mypost/robot_htmltag.jpg)\n\n这是选择div的时候\n![robot](/img/mypost/robot_htmltag2.jpg)\n\n\n#### class / id 筛选\n\n首先在选择标签列表的下列菜单中  \n选择 第一个 class/id选择器   \n然后会出现一个输入框输入对应的class或id  \n\nclass选择器需要以.开头，如：.xxx  \nid选择器需要以#开头，如：#xxx\n\n选好后按回车，如果有对应的选择器，将会展示一个列表, \n后续操作同html标签，鼠标移到列表上会渲染蒙版\n![robot](/img/mypost/robot_classtag.jpg)\n\n### 单个事件\n\n用筛选器选中好一个元素后  \n将会进入事件编辑页面\n![robot](/img/mypost/robot_shijian.jpg)\n\n(如想改变元素，可以按最上面的元素返回)\n\n这边的选择操作可以选的有：\n- click -- 点击\n- value -- 设值\n- refresh -- 刷新\n- pagejump -- 当页url跳转\n\n然后输入 执行前等待时间 / 和上一步执行中间间隔时间\n\n可以测试运行当前事件，也可以把事件添加到事务流程中。\n\n### 流程事件管理\n\n添加后会返回流程页，  \n如下加了一条，等待一秒后，(click)点击第一个\\<a\\>标签\n\n![robot](/img/mypost/robot_liuch.jpg)\n\n如下表示，  \n等待一秒后，(click)点击第一个\\<a\\>标签的链接，  \n再等待一秒后，往第一个input输入框里赋值 你好\n\n![robot](/img/mypost/robot_liuch2.jpg)\n\n可以选择继续添加，  \n可以选择返回主页，  \n可以测试运行单个事件，  \n可以删除单个事件；\n\n### 事务管理\n\n继续到主页\n\n事务支持新增，删除，运行，轮播，导出，导入\n\n![robot](/img/mypost/robot_main.jpg)\n\n#### 运行事务\n\n运行主要是按定好的流程运行每个事件，  \n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。\n\n#### 轮播事务\n\n轮播表示的是循环运行，运行完一次后立即进行下一次。  \n中间的间隔是第一个事件的等待时间。  \n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。\n\n#### 导入导出事务\n\n点击导出，事务的信息会自动保存到剪切板，复制给他人即可；\n\n点击导入，将他人复制的事务信息导入即可；\n\n### 常见问题说明\n\n>筛选器失效\n\n有时候页面与浏览器插件的连接会失效或过期，  \n这个时候可以刷新页面，然后重新打开这个插件页面。\n\n# 软件开发过程\n\n## 其他准备知识\n\n关于chrome插件的开发，请看[官网教程](https://developer.chrome.com/extensions)或[其他教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n\n## 软件开发设计\n\n这个浏览器插件包括以下几部分：\n```\n配置文件\nmanifest.json\n\n样式文件夹\n/css\n\nhtml文件，主要放了popup.html，也就是这个插件管理页\n/html\n\n存放图片\n/images\n\n存放js\n主要实现的包括popup.js(管理页的后端)\n和background.js(浏览器的后端)\n/js\n```\n\n## 部分代码说明\n\n``` javascript\n// 获取数据存储\nfunction get_my_robot(callback) {\n    chrome.storage.local.get([\"my_robot\"], function(res) {\n        if (callback) callback(res.my_robot)\n    })\n}\n\n// 设置数据存储\nfunction set_my_robot(new_robot, callback) {\n    chrome.storage.local.set({ \"my_robot\": new_robot }, function() {\n        if (callback) callback()\n    })\n}\n\n// 连接\nfunction connect(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        var port = chrome.tabs.connect(tabs[0].id, { name: \"robot\" });\n        callback(port)\n    })\n}\n\n// 当前tab执行\nfunction exectab(callback) {\n    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n        callback(tabs[0].id)\n    })\n}\n\n\n// 拼接要执行的js代码\nfunction jscode(process) {\n    let exec_code = \"(function(){ \\n\";\n    if(process[\"tag\"].startsWith(\".\")) {\n        exec_code += 'var robot_node = document.getElementsByClassName(\"' + process[\"tag\"].substring(1) + '\")[' + process[\"n\"] + '];'\n    }else if(process[\"tag\"].startsWith(\"#\")) {\n        exec_code += 'var robot_node = document.getElementById(\"' + process[\"tag\"].substring(1) + '\");'\n    }else{\n        exec_code += 'var robot_node = document.getElementsByTagName(\"' + process[\"tag\"] + '\")[' + process[\"n\"] + '];'\n    }\n    if (process[\"opera\"] == \"click\") {\n        exec_code += \"robot_node.click();\"\n    } else if (process[\"opera\"] == \"value\") {\n        /**\n         * 为react兼容\n         */\n        exec_code += \"let lastValue = robot_node.value;\"\n        exec_code += \"robot_node.value=\\\"\" + process[\"value\"] + \"\\\";\";\n        exec_code += \"let event = new Event('input', { bubbles: true });\";\n        exec_code += \"event.simulated = true;\";\n        exec_code += \"let tracker = robot_node._valueTracker;\";\n        exec_code += \"if (tracker) { tracker.setValue(lastValue); }\\n\";\n        exec_code += \"robot_node.dispatchEvent(event);\";\n    } else if (process[\"opera\"] == \"refresh\") {\n        exec_code += \"window.location.reload();\";\n    } else if (process[\"opera\"] == \"pagejump\") {\n        exec_code += \"window.location.href=\\\"\" + process[\"value\"] + \"\\\";\";\n    }\n    exec_code += \"\\n})();\";\n    console.log(exec_code)\n    return exec_code;\n}\n\n// 根据存储数据更新主页\nfunction refresh_cases() {\n    get_my_robot(my_robot => {\n        if (my_robot == undefined) {\n            set_my_robot({})\n        } else {\n            var cases = \"\";\n            for (let i in my_robot) {\n                let one_case = {}\n                one_case[\"case_name\"] = i;\n                one_case[\"content\"] = my_robot[i];\n                let tr = '<tr id=' + i + '> \\\n                            <td> \\\n                                <a href=\"#\" class=\"case_name\">' + i + '</a> \\\n                            </td> \\\n                            <td> \\\n                                <a href=\"#\" class=\"run_case\">运行</a> \\\n                                <a href=\"#\" class=\"del_case\">删除</a> \\\n                                <a href=\"#\" class=\"lun_case\">轮播</a> \\\n                                <a href=\"#\" class=\"export_case\" data-clipboard-text=' + JSON.stringify(one_case) + '>导出</a> \\\n                            </td> \\\n                        </tr>';\n                cases = cases + tr;\n            }\n            $(\"#cases\").html(cases);\n        }\n    })\n    new ClipboardJS('.export_case');\n}\n\n\n// 更新单个事务的流程\nfunction refresh_process(case_name) {\n    get_my_robot(my_robot => {\n        var data = my_robot[case_name];\n        var process_li = \"\";\n        for (let i = 0; i < data.length; i++) {\n            let lili = '<li class=\"collection-item\" id=\"process-' + i + '\"> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">标签：' + data[i][\"tag\"] + '</div> \\\n                                <div class=\"col s6 \">#：' + data[i][\"n\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s6 \">操作：' + data[i][\"opera\"] + '</div> \\\n                                <div class=\"col s6 \">等待：' + data[i][\"wait\"] + '秒</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <div class=\"col s12 \">赋值：' + data[i][\"value\"] + '</div> \\\n                            </div> \\\n                            <div class=\"row \"> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6\" id=\"process_test_run\" >test</div> \\\n                                </a> \\\n                                <a href=\"# \"> \\\n                                    <div class=\"col s6 \" id=\"process_del\">删除</div> \\\n                                </a> \\\n                            </div> \\\n                        </li> ';\n            process_li = process_li + lili;\n        }\n        $(\"#process_list\").html(process_li);\n    })\n}\n\n// 主要\n$(document).ready(function() {\n\n    // 筛选器\n    var tag_types = [\"class/id选择器\", \"a\", \"body\", \"button\", \"div\", \"i\", \"img\", \"input\", \"li\", \"p\", \"span\", \"td\", \"textarea\", \"tr\", \"ul\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"];\n    // 操作\n    var operas = [\"click\", \"value\", \"refresh\", \"pagejump\"];\n    var case_name = \"\";\n    var init_select = 1;\n\n    refresh_cases();\n\n    $('.modal').modal();\n\n    // 连接当前页面\n    exectab(tab_id => {\n\n        // 运行事务，调用background\n        $(\"#cases\").on(\"click\", \".run_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var bg = chrome.extension.getBackgroundPage();\n                bg.execute(my_robot[case_name], tab_id);\n                var process_wait = 0;\n                for (let i = 0; i < my_robot[case_name].length; i++) {\n                    process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait)\n            })\n        })\n\n        // 轮播事务\n        $(\"#cases\").on(\"click\", \".lun_case\", function() {\n            var case_name = $(this).parent().parent().attr(\"id\");\n            var save_run = $(this).parent().html();\n            var that = $(this).parent();\n            that.html(\"运行中\");\n            get_my_robot(my_robot => {\n                var process_wait = 0;\n                for (let n = 0; n < 100; n++) {\n                    for (let i = 0; i < my_robot[case_name].length; i++) {\n                        process_wait = process_wait + my_robot[case_name][i][\"wait\"] * 1000;\n                        setTimeout(function() {\n                            chrome.tabs.executeScript(tab_id, { code: jscode(my_robot[case_name][i]) });\n                        }, process_wait);\n                    }\n                }\n                setTimeout(function() {\n                    that.html(save_run);\n                }, process_wait);\n            })\n        })\n\n        // 导入事务\n        $(\"#cases\").on(\"click\", \".export_case\", function() {\n            $(this).html(\"导出成功\");\n            var that = $(this);\n            setTimeout(function() {\n                that.html(\"导出\");\n            }, 1000);\n        })\n\n    })\n})\n```\n\n# 感谢\n\n- [materializecss](http://www.materializecss.cn/about.html)\n- [官方轮子](https://developer.chrome.com/extensions)\n- [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)","slug":"2020/article_18_chrome插件-网页自动化","published":1,"updated":"2021-01-27T04:46:28.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75d002v07708dl3itui","content":"<h1 id=\"前言\">前言</h1>\n<p>这边主要介绍一款个人自行开发的chrome插件 web-robot，<br>\n这边讲解的是他的V1.0版本，<br>\n包括它的开始设计，使用教程，实现思路和细节。<br>\n源码的github地址是在<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot</a></p>\n<h1 id=\"软件设计\">软件设计</h1>\n<p>关于这个软件的初始设计定位，这边将他定位为<strong>网页自动化链路管理执行</strong>；<br>\n类似模拟自动化测试，但不会有结果校验。</p>\n<p>创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。</p>\n<p>软件主要要包括的有以下一些：</p>\n<ul>\n<li>网页元素的可视化筛选；</li>\n<li>筛选的元素加上动作与延时变成一个事件；</li>\n<li>多个事件形成一个事务流程；</li>\n<li>主界面可以管理多个事务，进行事务的运行、轮播、分享等；</li>\n</ul>\n<p>软件风格大致按使用的前端ui框架的极简风格走；</p>\n<h1 id=\"软件使用教程\">软件使用教程</h1>\n<h2 id=\"下载与导入\">下载与导入</h2>\n<h3 id=\"源码下载导入\">源码下载导入</h3>\n<p>源码github地址：<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot</a></p>\n<p>首先到github上将源码clone到本地 / 下载解压也可以</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==》扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n<img src=\"/img/mypost/kaifazhemoshi.jpg\" alt=\"开发者模式\"></p>\n<p>然后点击左上角的加载已解压的扩展程序，<br>\n选择刚刚clone下来的目录</p>\n<p>下面表示已经加载进来了<br>\n<img src=\"/img/mypost/robot.jpg\" alt=\"robot\"></p>\n<p>且右上角出现这个小图标<br>\n<img src=\"/img/mypost/robot_small.jpg\" alt=\"robot\"></p>\n<p><strong>重要：右键这个小图标，</strong><br>\n<strong>可读取和更改的网站数据，</strong><br>\n<strong>选择 在所有网站上；</strong></p>\n<p>至此已经完成下载和导入啦！😋</p>\n<h3 id=\"从chrome商店下载导入\">从chrome商店下载导入</h3>\n<p>暂时没有上线chrome应用商店</p>\n<h3 id=\"版本更新\">版本更新</h3>\n<p>首先更新本地代码</p>\n<blockquote>\n<p>git pull</p>\n</blockquote>\n<p><strong>然后重复上面的 加载已解压的扩展程序 的操作</strong>。</p>\n<h2 id=\"软件使用\">软件使用</h2>\n<h3 id=\"新建事务\">新建事务</h3>\n<p>首先新建一个事务<br>\n<img src=\"/img/mypost/robot_shiwu.jpg\" alt=\"robot\"></p>\n<p>这边建一个test为例子<br>\n<img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h3 id=\"筛选器\">筛选器</h3>\n<p>点击 test 进入 过程添加页</p>\n<p>点击添加过程，进入筛选器页面<br>\n<img src=\"/img/mypost/robot_shaixuanqi.jpg\" alt=\"robot\"></p>\n<p>这边支持按 html标签 / class / id 筛选</p>\n<p>下面都进行举例</p>\n<h4 id=\"html标签筛选\">html标签筛选</h4>\n<p>选择一个html标签，a(链接), body, div等<br>\n下方会展示一个列表，表示页面中该元素有几个。<br>\n鼠标移到列表每个上面，<br>\n页面对应元素将会渲染一个蒙版到以便正确定位选择。</p>\n<p>这是选择body的时候<br>\n<img src=\"/img/mypost/robot_htmltag.jpg\" alt=\"robot\"></p>\n<p>这是选择div的时候<br>\n<img src=\"/img/mypost/robot_htmltag2.jpg\" alt=\"robot\"></p>\n<h4 id=\"class-id-筛选\">class / id 筛选</h4>\n<p>首先在选择标签列表的下列菜单中<br>\n选择 第一个 class/id选择器<br>\n然后会出现一个输入框输入对应的class或id</p>\n<p>class选择器需要以.开头，如：.xxx<br>\nid选择器需要以#开头，如：#xxx</p>\n<p>选好后按回车，如果有对应的选择器，将会展示一个列表,<br>\n后续操作同html标签，鼠标移到列表上会渲染蒙版<br>\n<img src=\"/img/mypost/robot_classtag.jpg\" alt=\"robot\"></p>\n<h3 id=\"单个事件\">单个事件</h3>\n<p>用筛选器选中好一个元素后<br>\n将会进入事件编辑页面<br>\n<img src=\"/img/mypost/robot_shijian.jpg\" alt=\"robot\"></p>\n<p>(如想改变元素，可以按最上面的元素返回)</p>\n<p>这边的选择操作可以选的有：</p>\n<ul>\n<li>click – 点击</li>\n<li>value – 设值</li>\n<li>refresh – 刷新</li>\n<li>pagejump – 当页url跳转</li>\n</ul>\n<p>然后输入 执行前等待时间 / 和上一步执行中间间隔时间</p>\n<p>可以测试运行当前事件，也可以把事件添加到事务流程中。</p>\n<h3 id=\"流程事件管理\">流程事件管理</h3>\n<p>添加后会返回流程页，<br>\n如下加了一条，等待一秒后，(click)点击第一个&lt;a&gt;标签</p>\n<p><img src=\"/img/mypost/robot_liuch.jpg\" alt=\"robot\"></p>\n<p>如下表示，<br>\n等待一秒后，(click)点击第一个&lt;a&gt;标签的链接，<br>\n再等待一秒后，往第一个input输入框里赋值 你好</p>\n<p><img src=\"/img/mypost/robot_liuch2.jpg\" alt=\"robot\"></p>\n<p>可以选择继续添加，<br>\n可以选择返回主页，<br>\n可以测试运行单个事件，<br>\n可以删除单个事件；</p>\n<h3 id=\"事务管理\">事务管理</h3>\n<p>继续到主页</p>\n<p>事务支持新增，删除，运行，轮播，导出，导入</p>\n<p><img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h4 id=\"运行事务\">运行事务</h4>\n<p>运行主要是按定好的流程运行每个事件，<br>\n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。</p>\n<h4 id=\"轮播事务\">轮播事务</h4>\n<p>轮播表示的是循环运行，运行完一次后立即进行下一次。<br>\n中间的间隔是第一个事件的等待时间。<br>\n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。</p>\n<h4 id=\"导入导出事务\">导入导出事务</h4>\n<p>点击导出，事务的信息会自动保存到剪切板，复制给他人即可；</p>\n<p>点击导入，将他人复制的事务信息导入即可；</p>\n<h3 id=\"常见问题说明\">常见问题说明</h3>\n<blockquote>\n<p>筛选器失效</p>\n</blockquote>\n<p>有时候页面与浏览器插件的连接会失效或过期，<br>\n这个时候可以刷新页面，然后重新打开这个插件页面。</p>\n<h1 id=\"软件开发过程\">软件开发过程</h1>\n<h2 id=\"其他准备知识\">其他准备知识</h2>\n<p>关于chrome插件的开发，请看<a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"external\">官网教程</a>或<a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"external\">其他教程</a></p>\n<h2 id=\"软件开发设计\">软件开发设计</h2>\n<p>这个浏览器插件包括以下几部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置文件</span><br><span class=\"line\">manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">样式文件夹</span><br><span class=\"line\">/css</span><br><span class=\"line\"></span><br><span class=\"line\">html文件，主要放了popup.html，也就是这个插件管理页</span><br><span class=\"line\">/html</span><br><span class=\"line\"></span><br><span class=\"line\">存放图片</span><br><span class=\"line\">/images</span><br><span class=\"line\"></span><br><span class=\"line\">存放js</span><br><span class=\"line\">主要实现的包括popup.js(管理页的后端)</span><br><span class=\"line\">和background.js(浏览器的后端)</span><br><span class=\"line\">/js</span><br></pre></td></tr></table></figure>\n<h2 id=\"部分代码说明\">部分代码说明</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_my_robot</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.get([<span class=\"string\">\"my_robot\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback(res.my_robot)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_my_robot</span>(<span class=\"params\">new_robot, callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.set(&#123; <span class=\"string\">\"my_robot\"</span>: new_robot &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> port = chrome.tabs.connect(tabs[<span class=\"number\">0</span>].id, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"robot\"</span> &#125;);</span><br><span class=\"line\">        callback(port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前tab执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exectab</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        callback(tabs[<span class=\"number\">0</span>].id)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接要执行的js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jscode</span>(<span class=\"params\">process</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> exec_code = <span class=\"string\">\"(function()&#123; \\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByClassName(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementById(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\");'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByTagName(\"'</span> + process[<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"click\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.click();\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"value\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 为react兼容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let lastValue = robot_node.value;\"</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.value=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let event = new Event('input', &#123; bubbles: true &#125;);\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"event.simulated = true;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let tracker = robot_node._valueTracker;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"if (tracker) &#123; tracker.setValue(lastValue); &#125;\\n\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.dispatchEvent(event);\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"refresh\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.reload();\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"pagejump\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.href=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exec_code += <span class=\"string\">\"\\n&#125;)();\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exec_code)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exec_code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据存储数据更新主页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_cases</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_robot == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            set_my_robot(&#123;&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cases = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> my_robot) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> one_case = &#123;&#125;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"case_name\"</span>] = i;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"content\"</span>] = my_robot[i];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> tr = <span class=\"string\">'&lt;tr id='</span> + i + <span class=\"string\">'&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"case_name\"&gt;'</span> + i + <span class=\"string\">'&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"run_case\"&gt;运行&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"del_case\"&gt;删除&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"lun_case\"&gt;轮播&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"export_case\" data-clipboard-text='</span> + <span class=\"built_in\">JSON</span>.stringify(one_case) + <span class=\"string\">'&gt;导出&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/tr&gt;'</span>;</span><br><span class=\"line\">                cases = cases + tr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"string\">\"#cases\"</span>).html(cases);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">'.export_case'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新单个事务的流程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_process</span>(<span class=\"params\">case_name</span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = my_robot[case_name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> process_li = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> lili = <span class=\"string\">'&lt;li class=\"collection-item\" id=\"process-'</span> + i + <span class=\"string\">'\"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;标签：'</span> + data[i][<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;#：'</span> + data[i][<span class=\"string\">\"n\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;操作：'</span> + data[i][<span class=\"string\">\"opera\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;等待：'</span> + data[i][<span class=\"string\">\"wait\"</span>] + <span class=\"string\">'秒&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s12 \"&gt;赋值：'</span> + data[i][<span class=\"string\">\"value\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6\" id=\"process_test_run\" &gt;test&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6 \" id=\"process_del\"&gt;删除&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/li&gt; '</span>;</span><br><span class=\"line\">            process_li = process_li + lili;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#process_list\"</span>).html(process_li);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag_types = [<span class=\"string\">\"class/id选择器\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"body\"</span>, <span class=\"string\">\"button\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"input\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"textarea\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"ul\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> operas = [<span class=\"string\">\"click\"</span>, <span class=\"string\">\"value\"</span>, <span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"pagejump\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> case_name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> init_select = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    refresh_cases();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'.modal'</span>).modal();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接当前页面</span></span><br><span class=\"line\">    exectab(<span class=\"function\"><span class=\"params\">tab_id</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行事务，调用background</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".run_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bg = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">                bg.execute(my_robot[case_name], tab_id);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                    process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 轮播事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".lun_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">100</span>; n++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                        process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            chrome.tabs.executeScript(tab_id, &#123; <span class=\"attr\">code</span>: jscode(my_robot[case_name][i]) &#125;);</span><br><span class=\"line\">                        &#125;, process_wait);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 导入事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".export_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"keyword\">this</span>).html(<span class=\"string\">\"导出成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                that.html(<span class=\"string\">\"导出\"</span>);</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"感谢\">感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"external\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"external\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"external\">插件教程</a></li>\n</ul>\n","excerpt":"","more":"<h1>前言</h1>\n<p>这边主要介绍一款个人自行开发的chrome插件 web-robot，<br>\n这边讲解的是他的V1.0版本，<br>\n包括它的开始设计，使用教程，实现思路和细节。<br>\n源码的github地址是在<a href=\"https://github.com/webgjc/web_robot\">https://github.com/webgjc/web_robot</a></p>\n<h1>软件设计</h1>\n<p>关于这个软件的初始设计定位，这边将他定位为<strong>网页自动化链路管理执行</strong>；<br>\n类似模拟自动化测试，但不会有结果校验。</p>\n<p>创建事务和流程的用户主要针对的用户是稍微了解一点点html的用户，当然小白可以用他人分享的事务流程享受自动运行的快感。</p>\n<p>软件主要要包括的有以下一些：</p>\n<ul>\n<li>网页元素的可视化筛选；</li>\n<li>筛选的元素加上动作与延时变成一个事件；</li>\n<li>多个事件形成一个事务流程；</li>\n<li>主界面可以管理多个事务，进行事务的运行、轮播、分享等；</li>\n</ul>\n<p>软件风格大致按使用的前端ui框架的极简风格走；</p>\n<h1>软件使用教程</h1>\n<h2>下载与导入</h2>\n<h3>源码下载导入</h3>\n<p>源码github地址：<a href=\"https://github.com/webgjc/web_robot\">https://github.com/webgjc/web_robot</a></p>\n<p>首先到github上将源码clone到本地 / 下载解压也可以</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>然后打开chrome点开右上角三个点的地方，<br>\n选择更多工具 ==》扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n<img src=\"/img/mypost/kaifazhemoshi.jpg\" alt=\"开发者模式\"></p>\n<p>然后点击左上角的加载已解压的扩展程序，<br>\n选择刚刚clone下来的目录</p>\n<p>下面表示已经加载进来了<br>\n<img src=\"/img/mypost/robot.jpg\" alt=\"robot\"></p>\n<p>且右上角出现这个小图标<br>\n<img src=\"/img/mypost/robot_small.jpg\" alt=\"robot\"></p>\n<p><strong>重要：右键这个小图标，</strong><br>\n<strong>可读取和更改的网站数据，</strong><br>\n<strong>选择 在所有网站上；</strong></p>\n<p>至此已经完成下载和导入啦！😋</p>\n<h3>从chrome商店下载导入</h3>\n<p>暂时没有上线chrome应用商店</p>\n<h3>版本更新</h3>\n<p>首先更新本地代码</p>\n<blockquote>\n<p>git pull</p>\n</blockquote>\n<p><strong>然后重复上面的 加载已解压的扩展程序 的操作</strong>。</p>\n<h2>软件使用</h2>\n<h3>新建事务</h3>\n<p>首先新建一个事务<br>\n<img src=\"/img/mypost/robot_shiwu.jpg\" alt=\"robot\"></p>\n<p>这边建一个test为例子<br>\n<img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h3>筛选器</h3>\n<p>点击 test 进入 过程添加页</p>\n<p>点击添加过程，进入筛选器页面<br>\n<img src=\"/img/mypost/robot_shaixuanqi.jpg\" alt=\"robot\"></p>\n<p>这边支持按 html标签 / class / id 筛选</p>\n<p>下面都进行举例</p>\n<h4>html标签筛选</h4>\n<p>选择一个html标签，a(链接), body, div等<br>\n下方会展示一个列表，表示页面中该元素有几个。<br>\n鼠标移到列表每个上面，<br>\n页面对应元素将会渲染一个蒙版到以便正确定位选择。</p>\n<p>这是选择body的时候<br>\n<img src=\"/img/mypost/robot_htmltag.jpg\" alt=\"robot\"></p>\n<p>这是选择div的时候<br>\n<img src=\"/img/mypost/robot_htmltag2.jpg\" alt=\"robot\"></p>\n<h4>class / id 筛选</h4>\n<p>首先在选择标签列表的下列菜单中<br>\n选择 第一个 class/id选择器<br>\n然后会出现一个输入框输入对应的class或id</p>\n<p>class选择器需要以.开头，如：.xxx<br>\nid选择器需要以#开头，如：#xxx</p>\n<p>选好后按回车，如果有对应的选择器，将会展示一个列表,<br>\n后续操作同html标签，鼠标移到列表上会渲染蒙版<br>\n<img src=\"/img/mypost/robot_classtag.jpg\" alt=\"robot\"></p>\n<h3>单个事件</h3>\n<p>用筛选器选中好一个元素后<br>\n将会进入事件编辑页面<br>\n<img src=\"/img/mypost/robot_shijian.jpg\" alt=\"robot\"></p>\n<p>(如想改变元素，可以按最上面的元素返回)</p>\n<p>这边的选择操作可以选的有：</p>\n<ul>\n<li>click – 点击</li>\n<li>value – 设值</li>\n<li>refresh – 刷新</li>\n<li>pagejump – 当页url跳转</li>\n</ul>\n<p>然后输入 执行前等待时间 / 和上一步执行中间间隔时间</p>\n<p>可以测试运行当前事件，也可以把事件添加到事务流程中。</p>\n<h3>流程事件管理</h3>\n<p>添加后会返回流程页，<br>\n如下加了一条，等待一秒后，(click)点击第一个&lt;a&gt;标签</p>\n<p><img src=\"/img/mypost/robot_liuch.jpg\" alt=\"robot\"></p>\n<p>如下表示，<br>\n等待一秒后，(click)点击第一个&lt;a&gt;标签的链接，<br>\n再等待一秒后，往第一个input输入框里赋值 你好</p>\n<p><img src=\"/img/mypost/robot_liuch2.jpg\" alt=\"robot\"></p>\n<p>可以选择继续添加，<br>\n可以选择返回主页，<br>\n可以测试运行单个事件，<br>\n可以删除单个事件；</p>\n<h3>事务管理</h3>\n<p>继续到主页</p>\n<p>事务支持新增，删除，运行，轮播，导出，导入</p>\n<p><img src=\"/img/mypost/robot_main.jpg\" alt=\"robot\"></p>\n<h4>运行事务</h4>\n<p>运行主要是按定好的流程运行每个事件，<br>\n运行会放在浏览器后台中，中间关闭这个页面并不会切断运行。</p>\n<h4>轮播事务</h4>\n<p>轮播表示的是循环运行，运行完一次后立即进行下一次。<br>\n中间的间隔是第一个事件的等待时间。<br>\n由于在浏览器后台轮播可能会导致大量吃资源，因此轮播限制了只能前台运行，也就是关闭了这个管理页后就会断掉轮播。</p>\n<h4>导入导出事务</h4>\n<p>点击导出，事务的信息会自动保存到剪切板，复制给他人即可；</p>\n<p>点击导入，将他人复制的事务信息导入即可；</p>\n<h3>常见问题说明</h3>\n<blockquote>\n<p>筛选器失效</p>\n</blockquote>\n<p>有时候页面与浏览器插件的连接会失效或过期，<br>\n这个时候可以刷新页面，然后重新打开这个插件页面。</p>\n<h1>软件开发过程</h1>\n<h2>其他准备知识</h2>\n<p>关于chrome插件的开发，请看<a href=\"https://developer.chrome.com/extensions\">官网教程</a>或<a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\">其他教程</a></p>\n<h2>软件开发设计</h2>\n<p>这个浏览器插件包括以下几部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置文件</span><br><span class=\"line\">manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">样式文件夹</span><br><span class=\"line\">/css</span><br><span class=\"line\"></span><br><span class=\"line\">html文件，主要放了popup.html，也就是这个插件管理页</span><br><span class=\"line\">/html</span><br><span class=\"line\"></span><br><span class=\"line\">存放图片</span><br><span class=\"line\">/images</span><br><span class=\"line\"></span><br><span class=\"line\">存放js</span><br><span class=\"line\">主要实现的包括popup.js(管理页的后端)</span><br><span class=\"line\">和background.js(浏览器的后端)</span><br><span class=\"line\">/js</span><br></pre></td></tr></table></figure>\n<h2>部分代码说明</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_my_robot</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.get([<span class=\"string\">\"my_robot\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback(res.my_robot)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置数据存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_my_robot</span>(<span class=\"params\">new_robot, callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.storage.local.set(&#123; <span class=\"string\">\"my_robot\"</span>: new_robot &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback) callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> port = chrome.tabs.connect(tabs[<span class=\"number\">0</span>].id, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"robot\"</span> &#125;);</span><br><span class=\"line\">        callback(port)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前tab执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exectab</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    chrome.tabs.query(&#123; <span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) </span>&#123;</span><br><span class=\"line\">        callback(tabs[<span class=\"number\">0</span>].id)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接要执行的js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jscode</span>(<span class=\"params\">process</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> exec_code = <span class=\"string\">\"(function()&#123; \\n\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByClassName(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process[<span class=\"string\">\"tag\"</span>].startsWith(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementById(\"'</span> + process[<span class=\"string\">\"tag\"</span>].substring(<span class=\"number\">1</span>) + <span class=\"string\">'\");'</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">'var robot_node = document.getElementsByTagName(\"'</span> + process[<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'\")['</span> + process[<span class=\"string\">\"n\"</span>] + <span class=\"string\">'];'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"click\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.click();\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"value\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 为react兼容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let lastValue = robot_node.value;\"</span></span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.value=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let event = new Event('input', &#123; bubbles: true &#125;);\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"event.simulated = true;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"let tracker = robot_node._valueTracker;\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"if (tracker) &#123; tracker.setValue(lastValue); &#125;\\n\"</span>;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"robot_node.dispatchEvent(event);\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"refresh\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.reload();\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process[<span class=\"string\">\"opera\"</span>] == <span class=\"string\">\"pagejump\"</span>) &#123;</span><br><span class=\"line\">        exec_code += <span class=\"string\">\"window.location.href=\\\"\"</span> + process[<span class=\"string\">\"value\"</span>] + <span class=\"string\">\"\\\";\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exec_code += <span class=\"string\">\"\\n&#125;)();\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(exec_code)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exec_code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据存储数据更新主页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_cases</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (my_robot == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            set_my_robot(&#123;&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> cases = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> my_robot) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> one_case = &#123;&#125;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"case_name\"</span>] = i;</span><br><span class=\"line\">                one_case[<span class=\"string\">\"content\"</span>] = my_robot[i];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> tr = <span class=\"string\">'&lt;tr id='</span> + i + <span class=\"string\">'&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"case_name\"&gt;'</span> + i + <span class=\"string\">'&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"run_case\"&gt;运行&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"del_case\"&gt;删除&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"lun_case\"&gt;轮播&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"#\" class=\"export_case\" data-clipboard-text='</span> + <span class=\"built_in\">JSON</span>.stringify(one_case) + <span class=\"string\">'&gt;导出&lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/td&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/tr&gt;'</span>;</span><br><span class=\"line\">                cases = cases + tr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $(<span class=\"string\">\"#cases\"</span>).html(cases);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">'.export_case'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新单个事务的流程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refresh_process</span>(<span class=\"params\">case_name</span>) </span>&#123;</span><br><span class=\"line\">    get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = my_robot[case_name];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> process_li = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> lili = <span class=\"string\">'&lt;li class=\"collection-item\" id=\"process-'</span> + i + <span class=\"string\">'\"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;标签：'</span> + data[i][<span class=\"string\">\"tag\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;#：'</span> + data[i][<span class=\"string\">\"n\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;操作：'</span> + data[i][<span class=\"string\">\"opera\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s6 \"&gt;等待：'</span> + data[i][<span class=\"string\">\"wait\"</span>] + <span class=\"string\">'秒&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;div class=\"col s12 \"&gt;赋值：'</span> + data[i][<span class=\"string\">\"value\"</span>] + <span class=\"string\">'&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;div class=\"row \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6\" id=\"process_test_run\" &gt;test&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;a href=\"# \"&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                    &lt;div class=\"col s6 \" id=\"process_del\"&gt;删除&lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                                &lt;/a&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                            &lt;/div&gt; \\</span></span><br><span class=\"line\"><span class=\"string\">                        &lt;/li&gt; '</span>;</span><br><span class=\"line\">            process_li = process_li + lili;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">\"#process_list\"</span>).html(process_li);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 筛选器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag_types = [<span class=\"string\">\"class/id选择器\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"body\"</span>, <span class=\"string\">\"button\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"input\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"textarea\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"ul\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> operas = [<span class=\"string\">\"click\"</span>, <span class=\"string\">\"value\"</span>, <span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"pagejump\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> case_name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> init_select = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    refresh_cases();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'.modal'</span>).modal();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接当前页面</span></span><br><span class=\"line\">    exectab(<span class=\"function\"><span class=\"params\">tab_id</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行事务，调用background</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".run_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> bg = chrome.extension.getBackgroundPage();</span><br><span class=\"line\">                bg.execute(my_robot[case_name], tab_id);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                    process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 轮播事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".lun_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> case_name = $(<span class=\"keyword\">this</span>).parent().parent().attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> save_run = $(<span class=\"keyword\">this</span>).parent().html();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>).parent();</span><br><span class=\"line\">            that.html(<span class=\"string\">\"运行中\"</span>);</span><br><span class=\"line\">            get_my_robot(<span class=\"function\"><span class=\"params\">my_robot</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> process_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">100</span>; n++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; my_robot[case_name].length; i++) &#123;</span><br><span class=\"line\">                        process_wait = process_wait + my_robot[case_name][i][<span class=\"string\">\"wait\"</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">                        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                            chrome.tabs.executeScript(tab_id, &#123; <span class=\"attr\">code</span>: jscode(my_robot[case_name][i]) &#125;);</span><br><span class=\"line\">                        &#125;, process_wait);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    that.html(save_run);</span><br><span class=\"line\">                &#125;, process_wait);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 导入事务</span></span><br><span class=\"line\">        $(<span class=\"string\">\"#cases\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".export_case\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"keyword\">this</span>).html(<span class=\"string\">\"导出成功\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> that = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                that.html(<span class=\"string\">\"导出\"</span>);</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1>感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\">插件教程</a></li>\n</ul>\n"},{"title":"TABLE-MAKER","catalog":true,"date":"2020-05-20T02:31:43.000Z","subtitle":"一个万能数据表格的浏览器插件","header-img":null,"_content":"\n# 前言\n\n本次依旧发布一款浏览器插件--万能表格。\n\n说说为什么万能，其一，因为它可以接入任意的 GET 接口数据或其他文本(html/text...)数据来源，且无跨域限制，且一些需要 cookie 的接口或网站访问数据时也会带上 cookie。  \n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json 解析用就直接用 key，文本解析就用正则表达式。  \n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到 url 地址上，再反映到数据上。\n\n## 案例展示\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n# 软件使用教程\n\n## 软件下载与导入\n\n### 源码下载导入\n\n软件源码的 github 地址为  \n[https://github.com/webgjc/table_maker](https://github.com/webgjc/table_maker)\n\n首先将代码克隆到本地\n\n> git clone https://github.com/webgjc/table_maker.git\n\n然后打开 chrome 点开右上角三个点的地方，\n选择更多工具 ==> 扩展程序；\n\n因为是源码，开启右上角的开发者模式\n开发者模式，(在完毕后可以关闭开发者模式)\n\n然后点击左上角的 **加载已解压的扩展程序**，\n选择刚刚 clone 下来的目录\n\n下图表示已经加载进来了\n\n![table_maker](/img/mypost/table_maker.jpg)\n\n然后浏览器右上角也有这个插件的小图标\n\n就表示导入完成。\n\n### 软件商店下载\n\n暂不支持\n\n## 软件使用\n\n点开浏览器右上角的 **\\$** 小图标，会见到如下主页\n\n![tablemaker_main](/img/mypost/tablemaker_main.jpg)\n\n目前该插件只支持一个表的制作与展示。\n\n### 导入数据体验\n\n数据如下\n\n```json\n{\n    \"data_type\": \"text\",\n    \"data_url\": \"http://fund.eastmoney.com/{ID}.html\",\n    \"fields\": [\n        {\n            \"data_parser\": \"funCur-FundName\\\">(.*?)</span>\",\n            \"field_name\": \"基金名称\"\n        },\n        {\n            \"data_parser\": \"gz_gszzl\\\">(.*?)</span>\",\n            \"field_name\": \"净值估算\"\n        }\n    ],\n    \"keys\": [\"110022\", \"003634\"],\n    \"table_name\": \"基金今日估值\"\n}\n```\n\n这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码  \n(这边用的天天基金网的基金详情页面，实时数据有延迟)\n\n可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。\n\n每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。\n\n### 制作自己的表格 TEXT 解析\n\n接下来就是最重要的部分 -- 制作万能表格\n\n#### 基金净值表\n\n这里以制作上面基金实时净值表为例。\n\n#### 确定表格数据源\n\n首先要确定好要制作的表格的数据来源。\n\n比如这里找到了 [天天基金网](http://fund.eastmoney.com/)，  \n它查看一个基金详情的的地址页如下：\n\n> http://fund.eastmoney.com/{ID}.html\n\n{ID}表示基金的代码，虽然是 html 格式的返回，但也可以正则来解析，正合适我们这里所需要的。\n\n点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。\n\n#### 确定需要解析的字段\n\n这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)\n\n到某个基金的详情的 html 页面，打开浏览器调试，或查看源码。\n\n找到这个数据的来源，这边看到在 html 源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据\n\n基金名称源码对应\n\n```html\n<span class=\"funCur-Tit\">基金名称：</span\n><span class=\"funCur-FundName\">易方达消费行业股票</span>\n```\n\n正则解析方式为\n\n> funCur-FundName\\\">(.\\*?)\\</span>\n\n基金实时估值部分源码\n\n```html\n<div class=\"remindicon\"><p>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。</p></div></div><div class=\"fundDetail-main\"><!-- 档案 start --><div class=\"fundInfoItem\"><!--开放式基金收益率模块--><div class=\"dataOfFund\"><dl class=\"dataItem01\"><dt><p><span><span class=\"sp01\">净值估算</span></span><span id=\"gz_gztime\">(20-05-20 10:01)</span><span class=\"infoTips\"><span class=\"tipsBubble\" style=\"display: none;\">净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。</span></span></p></dt><dd class=\"dataNums\"><dl class=\"floatleft\"><span class=\"ui-font-large ui-color-green ui-num\" id=\"gz_gsz\">3.1764</span></dl><dl id=\"gz_icon\" class=\"gzdown\"></dl><dl class=\"floatleft fundZdf\"><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszze\">0.0086</span><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszzl\">-0.27%</span>\n```\n\n正则解析方式为\n\n> gz_gszzl\\\">(.\\*?)\\</span>\n\n**插件上的操作为**\n\n主页点击修改表格，点击确定并修改列\n\n点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下\n\n![tablemaker_lie](/img/mypost/tablemaker_lie.jpg)\n\n当然这边也提供了测试解析的功能\n\n点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。\n\n点击返回返回主页，列就会渲染出来。\n\n#### 最终效果和主页操作\n\n制作完的主页如下，没有数据但加的列已经有了\n\n![tablemaker_kongzhu](/img/mypost/tablemaker_kongzhu.jpg)\n\n主页上可以增加主键，表示增加一行数据\n\n增加主键就相当于一个关注的基金。\n\n比如增加 110022, 003634 这两个基金代码作为主键，就制作成了上面的直接导入数据的表格\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。\n\n### 制作自己的表格 JSON 解析\n\n#### 城市天气表\n\n这边 JSON 解析举的例子为 城市天气列表\n\n#### 数据来源\n\n首先找到所需数据源接口\n\n这边使用国家的\n\n> http://www.weather.com.cn/data/cityinfo/{ID}.html\n\n{ID}表示城市代码，代码列表在下面有\nhttps://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\n\n天气格式如下\n\n```\n{\n    \"weatherinfo\": {\n        \"city\": \"北京\",\n        \"cityid\": \"101010100\",\n        \"temp1\": \"18℃\",\n        \"temp2\": \"31℃\",\n        \"weather\": \"多云转阴\",\n        \"img1\": \"n1.gif\",\n        \"img2\": \"d2.gif\",\n        \"ptime\": \"18:00\"\n    }\n}\n```\n\n编辑表格\n\n表名使用 城市天气表，  \n数据源填写 http://www.weather.com.cn/data/cityinfo/{ID}.html  \n数据格式 json\n\n#### 设置列解析\n\njson 解析比较简单，直接使用 key.key.key\n\n举例如下：  \n要解析城市名，则新增字段，名称填城市， 解析方式就写\n\n> weatherinfo.city\n\n要解析城市天气，则新增字段，解析方式就写\n\n> weatherinfo.weather\n\n#### 最终效果展示\n\n主页操作同上 TEXT 解析的表格\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n## 软件开发说明\n\n浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。\n\n本次插件主要利用的是 在 popup.js 或者 background.js 可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。\n\n至于为什么要用\\$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。\n\n### 重点关注部分代码\n\n主要代码在 popup.js 中，\n\n```javascript\n// json解析，解析格式为：key.key.key\n// 根据每个key去获取对应的值\nasync function deal_json_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then((response) => response.json())\n        .then((data) => {\n            rowdata = [key];\n            for (i in fields) {\n                tmpdata = data;\n                fields[i][\"data_parser\"].split(\".\").map((fieldkey) => {\n                    tmpdata = tmpdata[fieldkey];\n                });\n                if (\n                    Object.prototype.toString.call(tmpdata) ===\n                    \"[object Object]\"\n                ) {\n                    rowdata.push(JSON.stringify(tmpdata));\n                } else {\n                    rowdata.push(tmpdata || \"\");\n                }\n            }\n            return rowdata;\n        });\n}\n\n// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值\n// 也就是(.*?)的部分\nasync function deal_text_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then((res) => res.text())\n        .then((data) => {\n            rowdata = [key];\n            for (i in fields) {\n                rowdata.push(\n                    data.match(new RegExp(fields[i][\"data_parser\"]))[1]\n                );\n            }\n            return rowdata;\n        });\n}\n\n// 渲染主页的数据，使用异步\nasync function render(data) {\n    $(\".mainbody\").html(\"\");\n    $(\".table_head\").html(data[\"table_name\"]);\n    headstr = \"<tr>\";\n    headstr += \"<td>主键</td>\";\n    data[\"fields\"].map(\n        (field) => (headstr += \"<td>\" + field[\"field_name\"] + \"</td>\")\n    );\n    headstr += \"<td>操作</td></tr>\";\n    $(\".mainhead\").html(headstr);\n    for (key in data[\"keys\"]) {\n        let row;\n        try {\n            if (data[\"data_type\"] === \"json\") {\n                row = await deal_json_parser(\n                    data[\"data_url\"],\n                    data[\"keys\"][key],\n                    data[\"fields\"]\n                );\n            } else {\n                row = await deal_text_parser(\n                    data[\"data_url\"],\n                    data[\"keys\"][key],\n                    data[\"fields\"]\n                );\n            }\n        } catch (e) {\n            row = [data[\"keys\"][key]];\n            data[\"fields\"].map((field) => row.push(\"\"));\n        }\n        htmlstr = \"<tr>\";\n        row.map((value) => (htmlstr += \"<td>\" + value + \"</td>\"));\n        htmlstr +=\n            \"<td><a href='#' id='move_up' key='\" +\n            key +\n            \"'>上移</a> <a href='#' id='delete_value' key='\" +\n            key +\n            \"'>删除</a></td>\";\n        htmlstr += \"</tr>\";\n        $(\".mainbody\").append(htmlstr);\n    }\n}\n```\n\n# 感谢\n\n-   [materializecss](http://www.materializecss.cn/about.html)\n-   [官方轮子](https://developer.chrome.com/extensions)\n-   [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n","source":"_posts/2020/article_19_chrome插件-万能表格.md","raw":"---\ntitle: TABLE-MAKER\ncatalog: true\ndate: 2020-05-20 10:31:43\nsubtitle: 一个万能数据表格的浏览器插件\nheader-img:\ntags:\n    - CHROME插件\n---\n\n# 前言\n\n本次依旧发布一款浏览器插件--万能表格。\n\n说说为什么万能，其一，因为它可以接入任意的 GET 接口数据或其他文本(html/text...)数据来源，且无跨域限制，且一些需要 cookie 的接口或网站访问数据时也会带上 cookie。  \n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json 解析用就直接用 key，文本解析就用正则表达式。  \n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到 url 地址上，再反映到数据上。\n\n## 案例展示\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n# 软件使用教程\n\n## 软件下载与导入\n\n### 源码下载导入\n\n软件源码的 github 地址为  \n[https://github.com/webgjc/table_maker](https://github.com/webgjc/table_maker)\n\n首先将代码克隆到本地\n\n> git clone https://github.com/webgjc/table_maker.git\n\n然后打开 chrome 点开右上角三个点的地方，\n选择更多工具 ==> 扩展程序；\n\n因为是源码，开启右上角的开发者模式\n开发者模式，(在完毕后可以关闭开发者模式)\n\n然后点击左上角的 **加载已解压的扩展程序**，\n选择刚刚 clone 下来的目录\n\n下图表示已经加载进来了\n\n![table_maker](/img/mypost/table_maker.jpg)\n\n然后浏览器右上角也有这个插件的小图标\n\n就表示导入完成。\n\n### 软件商店下载\n\n暂不支持\n\n## 软件使用\n\n点开浏览器右上角的 **\\$** 小图标，会见到如下主页\n\n![tablemaker_main](/img/mypost/tablemaker_main.jpg)\n\n目前该插件只支持一个表的制作与展示。\n\n### 导入数据体验\n\n数据如下\n\n```json\n{\n    \"data_type\": \"text\",\n    \"data_url\": \"http://fund.eastmoney.com/{ID}.html\",\n    \"fields\": [\n        {\n            \"data_parser\": \"funCur-FundName\\\">(.*?)</span>\",\n            \"field_name\": \"基金名称\"\n        },\n        {\n            \"data_parser\": \"gz_gszzl\\\">(.*?)</span>\",\n            \"field_name\": \"净值估算\"\n        }\n    ],\n    \"keys\": [\"110022\", \"003634\"],\n    \"table_name\": \"基金今日估值\"\n}\n```\n\n这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码  \n(这边用的天天基金网的基金详情页面，实时数据有延迟)\n\n可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。\n\n每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。\n\n### 制作自己的表格 TEXT 解析\n\n接下来就是最重要的部分 -- 制作万能表格\n\n#### 基金净值表\n\n这里以制作上面基金实时净值表为例。\n\n#### 确定表格数据源\n\n首先要确定好要制作的表格的数据来源。\n\n比如这里找到了 [天天基金网](http://fund.eastmoney.com/)，  \n它查看一个基金详情的的地址页如下：\n\n> http://fund.eastmoney.com/{ID}.html\n\n{ID}表示基金的代码，虽然是 html 格式的返回，但也可以正则来解析，正合适我们这里所需要的。\n\n点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。\n\n#### 确定需要解析的字段\n\n这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)\n\n到某个基金的详情的 html 页面，打开浏览器调试，或查看源码。\n\n找到这个数据的来源，这边看到在 html 源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据\n\n基金名称源码对应\n\n```html\n<span class=\"funCur-Tit\">基金名称：</span\n><span class=\"funCur-FundName\">易方达消费行业股票</span>\n```\n\n正则解析方式为\n\n> funCur-FundName\\\">(.\\*?)\\</span>\n\n基金实时估值部分源码\n\n```html\n<div class=\"remindicon\"><p>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。</p></div></div><div class=\"fundDetail-main\"><!-- 档案 start --><div class=\"fundInfoItem\"><!--开放式基金收益率模块--><div class=\"dataOfFund\"><dl class=\"dataItem01\"><dt><p><span><span class=\"sp01\">净值估算</span></span><span id=\"gz_gztime\">(20-05-20 10:01)</span><span class=\"infoTips\"><span class=\"tipsBubble\" style=\"display: none;\">净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。</span></span></p></dt><dd class=\"dataNums\"><dl class=\"floatleft\"><span class=\"ui-font-large ui-color-green ui-num\" id=\"gz_gsz\">3.1764</span></dl><dl id=\"gz_icon\" class=\"gzdown\"></dl><dl class=\"floatleft fundZdf\"><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszze\">0.0086</span><span class=\"ui-font-middle ui-color-green ui-num\" id=\"gz_gszzl\">-0.27%</span>\n```\n\n正则解析方式为\n\n> gz_gszzl\\\">(.\\*?)\\</span>\n\n**插件上的操作为**\n\n主页点击修改表格，点击确定并修改列\n\n点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下\n\n![tablemaker_lie](/img/mypost/tablemaker_lie.jpg)\n\n当然这边也提供了测试解析的功能\n\n点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。\n\n点击返回返回主页，列就会渲染出来。\n\n#### 最终效果和主页操作\n\n制作完的主页如下，没有数据但加的列已经有了\n\n![tablemaker_kongzhu](/img/mypost/tablemaker_kongzhu.jpg)\n\n主页上可以增加主键，表示增加一行数据\n\n增加主键就相当于一个关注的基金。\n\n比如增加 110022, 003634 这两个基金代码作为主键，就制作成了上面的直接导入数据的表格\n\n![tablemaker_jjjz](/img/mypost/tablemaker_jjjz.jpg)\n\n双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。\n\n### 制作自己的表格 JSON 解析\n\n#### 城市天气表\n\n这边 JSON 解析举的例子为 城市天气列表\n\n#### 数据来源\n\n首先找到所需数据源接口\n\n这边使用国家的\n\n> http://www.weather.com.cn/data/cityinfo/{ID}.html\n\n{ID}表示城市代码，代码列表在下面有\nhttps://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\n\n天气格式如下\n\n```\n{\n    \"weatherinfo\": {\n        \"city\": \"北京\",\n        \"cityid\": \"101010100\",\n        \"temp1\": \"18℃\",\n        \"temp2\": \"31℃\",\n        \"weather\": \"多云转阴\",\n        \"img1\": \"n1.gif\",\n        \"img2\": \"d2.gif\",\n        \"ptime\": \"18:00\"\n    }\n}\n```\n\n编辑表格\n\n表名使用 城市天气表，  \n数据源填写 http://www.weather.com.cn/data/cityinfo/{ID}.html  \n数据格式 json\n\n#### 设置列解析\n\njson 解析比较简单，直接使用 key.key.key\n\n举例如下：  \n要解析城市名，则新增字段，名称填城市， 解析方式就写\n\n> weatherinfo.city\n\n要解析城市天气，则新增字段，解析方式就写\n\n> weatherinfo.weather\n\n#### 最终效果展示\n\n主页操作同上 TEXT 解析的表格\n\n![tablemaker_weather](/img/mypost/tablemaker_weather.jpg)\n\n## 软件开发说明\n\n浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。\n\n本次插件主要利用的是 在 popup.js 或者 background.js 可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。\n\n至于为什么要用\\$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。\n\n### 重点关注部分代码\n\n主要代码在 popup.js 中，\n\n```javascript\n// json解析，解析格式为：key.key.key\n// 根据每个key去获取对应的值\nasync function deal_json_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then((response) => response.json())\n        .then((data) => {\n            rowdata = [key];\n            for (i in fields) {\n                tmpdata = data;\n                fields[i][\"data_parser\"].split(\".\").map((fieldkey) => {\n                    tmpdata = tmpdata[fieldkey];\n                });\n                if (\n                    Object.prototype.toString.call(tmpdata) ===\n                    \"[object Object]\"\n                ) {\n                    rowdata.push(JSON.stringify(tmpdata));\n                } else {\n                    rowdata.push(tmpdata || \"\");\n                }\n            }\n            return rowdata;\n        });\n}\n\n// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值\n// 也就是(.*?)的部分\nasync function deal_text_parser(url, key, fields) {\n    return await fetch(key_replace(url, key))\n        .then((res) => res.text())\n        .then((data) => {\n            rowdata = [key];\n            for (i in fields) {\n                rowdata.push(\n                    data.match(new RegExp(fields[i][\"data_parser\"]))[1]\n                );\n            }\n            return rowdata;\n        });\n}\n\n// 渲染主页的数据，使用异步\nasync function render(data) {\n    $(\".mainbody\").html(\"\");\n    $(\".table_head\").html(data[\"table_name\"]);\n    headstr = \"<tr>\";\n    headstr += \"<td>主键</td>\";\n    data[\"fields\"].map(\n        (field) => (headstr += \"<td>\" + field[\"field_name\"] + \"</td>\")\n    );\n    headstr += \"<td>操作</td></tr>\";\n    $(\".mainhead\").html(headstr);\n    for (key in data[\"keys\"]) {\n        let row;\n        try {\n            if (data[\"data_type\"] === \"json\") {\n                row = await deal_json_parser(\n                    data[\"data_url\"],\n                    data[\"keys\"][key],\n                    data[\"fields\"]\n                );\n            } else {\n                row = await deal_text_parser(\n                    data[\"data_url\"],\n                    data[\"keys\"][key],\n                    data[\"fields\"]\n                );\n            }\n        } catch (e) {\n            row = [data[\"keys\"][key]];\n            data[\"fields\"].map((field) => row.push(\"\"));\n        }\n        htmlstr = \"<tr>\";\n        row.map((value) => (htmlstr += \"<td>\" + value + \"</td>\"));\n        htmlstr +=\n            \"<td><a href='#' id='move_up' key='\" +\n            key +\n            \"'>上移</a> <a href='#' id='delete_value' key='\" +\n            key +\n            \"'>删除</a></td>\";\n        htmlstr += \"</tr>\";\n        $(\".mainbody\").append(htmlstr);\n    }\n}\n```\n\n# 感谢\n\n-   [materializecss](http://www.materializecss.cn/about.html)\n-   [官方轮子](https://developer.chrome.com/extensions)\n-   [插件教程](https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html)\n","slug":"2020/article_19_chrome插件-万能表格","published":1,"updated":"2021-01-27T04:46:28.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75f002y0770osikhivo","content":"<h1 id=\"前言\">前言</h1>\n<p>本次依旧发布一款浏览器插件–万能表格。</p>\n<p>说说为什么万能，其一，因为它可以接入任意的 GET 接口数据或其他文本(html/text…)数据来源，且无跨域限制，且一些需要 cookie 的接口或网站访问数据时也会带上 cookie。<br>\n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json 解析用就直接用 key，文本解析就用正则表达式。<br>\n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到 url 地址上，再反映到数据上。</p>\n<h2 id=\"案例展示\">案例展示</h2>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h1 id=\"软件使用教程\">软件使用教程</h1>\n<h2 id=\"软件下载与导入\">软件下载与导入</h2>\n<h3 id=\"源码下载导入\">源码下载导入</h3>\n<p>软件源码的 github 地址为<br>\n<a href=\"https://github.com/webgjc/table_maker\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/table_maker</a></p>\n<p>首先将代码克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/table_maker.git\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/table_maker.git</a></p>\n</blockquote>\n<p>然后打开 chrome 点开右上角三个点的地方，<br>\n选择更多工具 ==&gt; 扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n开发者模式，(在完毕后可以关闭开发者模式)</p>\n<p>然后点击左上角的 <strong>加载已解压的扩展程序</strong>，<br>\n选择刚刚 clone 下来的目录</p>\n<p>下图表示已经加载进来了</p>\n<p><img src=\"/img/mypost/table_maker.jpg\" alt=\"table_maker\"></p>\n<p>然后浏览器右上角也有这个插件的小图标</p>\n<p>就表示导入完成。</p>\n<h3 id=\"软件商店下载\">软件商店下载</h3>\n<p>暂不支持</p>\n<h2 id=\"软件使用\">软件使用</h2>\n<p>点开浏览器右上角的 <strong>$</strong> 小图标，会见到如下主页</p>\n<p><img src=\"/img/mypost/tablemaker_main.jpg\" alt=\"tablemaker_main\"></p>\n<p>目前该插件只支持一个表的制作与展示。</p>\n<h3 id=\"导入数据体验\">导入数据体验</h3>\n<p>数据如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data_type\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data_url\"</span>: <span class=\"string\">\"http://fund.eastmoney.com/&#123;ID&#125;.html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"funCur-FundName\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"基金名称\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"gz_gszzl\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"净值估算\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"110022\"</span>, <span class=\"string\">\"003634\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"table_name\"</span>: <span class=\"string\">\"基金今日估值\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码<br>\n(这边用的天天基金网的基金详情页面，实时数据有延迟)</p>\n<p>可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。</p>\n<p>每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。</p>\n<h3 id=\"制作自己的表格-text-解析\">制作自己的表格 TEXT 解析</h3>\n<p>接下来就是最重要的部分 – 制作万能表格</p>\n<h4 id=\"基金净值表\">基金净值表</h4>\n<p>这里以制作上面基金实时净值表为例。</p>\n<h4 id=\"确定表格数据源\">确定表格数据源</h4>\n<p>首先要确定好要制作的表格的数据来源。</p>\n<p>比如这里找到了 <a href=\"http://fund.eastmoney.com/\" target=\"_blank\" rel=\"external\">天天基金网</a>，<br>\n它查看一个基金详情的的地址页如下：</p>\n<blockquote>\n<p><a href=\"http://fund.eastmoney.com/%7BID%7D.html\" target=\"_blank\" rel=\"external\">http://fund.eastmoney.com/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示基金的代码，虽然是 html 格式的返回，但也可以正则来解析，正合适我们这里所需要的。</p>\n<p>点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。</p>\n<h4 id=\"确定需要解析的字段\">确定需要解析的字段</h4>\n<p>这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)</p>\n<p>到某个基金的详情的 html 页面，打开浏览器调试，或查看源码。</p>\n<p>找到这个数据的来源，这边看到在 html 源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据</p>\n<p>基金名称源码对应</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-Tit\"</span>&gt;</span>基金名称：<span class=\"tag\">&lt;/<span class=\"name\">span</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-FundName\"</span>&gt;</span>易方达消费行业股票<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>funCur-FundName&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p>基金实时估值部分源码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"remindicon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundDetail-main\"</span>&gt;</span><span class=\"comment\">&lt;!-- 档案 start --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundInfoItem\"</span>&gt;</span><span class=\"comment\">&lt;!--开放式基金收益率模块--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataOfFund\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataItem01\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp01\"</span>&gt;</span>净值估算<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gztime\"</span>&gt;</span>(20-05-20 10:01)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"infoTips\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tipsBubble\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span>净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataNums\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-large ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gsz\"</span>&gt;</span>3.1764<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gzdown\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft fundZdf\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszze\"</span>&gt;</span>0.0086<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszzl\"</span>&gt;</span>-0.27%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>gz_gszzl&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p><strong>插件上的操作为</strong></p>\n<p>主页点击修改表格，点击确定并修改列</p>\n<p>点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下</p>\n<p><img src=\"/img/mypost/tablemaker_lie.jpg\" alt=\"tablemaker_lie\"></p>\n<p>当然这边也提供了测试解析的功能</p>\n<p>点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。</p>\n<p>点击返回返回主页，列就会渲染出来。</p>\n<h4 id=\"最终效果和主页操作\">最终效果和主页操作</h4>\n<p>制作完的主页如下，没有数据但加的列已经有了</p>\n<p><img src=\"/img/mypost/tablemaker_kongzhu.jpg\" alt=\"tablemaker_kongzhu\"></p>\n<p>主页上可以增加主键，表示增加一行数据</p>\n<p>增加主键就相当于一个关注的基金。</p>\n<p>比如增加 110022, 003634 这两个基金代码作为主键，就制作成了上面的直接导入数据的表格</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。</p>\n<h3 id=\"制作自己的表格-json-解析\">制作自己的表格 JSON 解析</h3>\n<h4 id=\"城市天气表\">城市天气表</h4>\n<p>这边 JSON 解析举的例子为 城市天气列表</p>\n<h4 id=\"数据来源\">数据来源</h4>\n<p>首先找到所需数据源接口</p>\n<p>这边使用国家的</p>\n<blockquote>\n<p><a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"external\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示城市代码，代码列表在下面有<br>\n<a href=\"https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\" target=\"_blank\" rel=\"external\">https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html</a></p>\n<p>天气格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;weatherinfo&quot;: &#123;</span><br><span class=\"line\">        &quot;city&quot;: &quot;北京&quot;,</span><br><span class=\"line\">        &quot;cityid&quot;: &quot;101010100&quot;,</span><br><span class=\"line\">        &quot;temp1&quot;: &quot;18℃&quot;,</span><br><span class=\"line\">        &quot;temp2&quot;: &quot;31℃&quot;,</span><br><span class=\"line\">        &quot;weather&quot;: &quot;多云转阴&quot;,</span><br><span class=\"line\">        &quot;img1&quot;: &quot;n1.gif&quot;,</span><br><span class=\"line\">        &quot;img2&quot;: &quot;d2.gif&quot;,</span><br><span class=\"line\">        &quot;ptime&quot;: &quot;18:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑表格</p>\n<p>表名使用 城市天气表，<br>\n数据源填写 <a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\" target=\"_blank\" rel=\"external\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a><br>\n数据格式 json</p>\n<h4 id=\"设置列解析\">设置列解析</h4>\n<p>json 解析比较简单，直接使用 key.key.key</p>\n<p>举例如下：<br>\n要解析城市名，则新增字段，名称填城市， 解析方式就写</p>\n<blockquote>\n<p>weatherinfo.city</p>\n</blockquote>\n<p>要解析城市天气，则新增字段，解析方式就写</p>\n<blockquote>\n<p>weatherinfo.weather</p>\n</blockquote>\n<h4 id=\"最终效果展示\">最终效果展示</h4>\n<p>主页操作同上 TEXT 解析的表格</p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h2 id=\"软件开发说明\">软件开发说明</h2>\n<p>浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。</p>\n<p>本次插件主要利用的是 在 popup.js 或者 background.js 可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。</p>\n<p>至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。</p>\n<h3 id=\"重点关注部分代码\">重点关注部分代码</h3>\n<p>主要代码在 popup.js 中，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json解析，解析格式为：key.key.key</span></span><br><span class=\"line\"><span class=\"comment\">// 根据每个key去获取对应的值</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_json_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> response.json())</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                tmpdata = data;</span><br><span class=\"line\">                fields[i][<span class=\"string\">\"data_parser\"</span>].split(<span class=\"string\">\".\"</span>).map(<span class=\"function\">(<span class=\"params\">fieldkey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    tmpdata = tmpdata[fieldkey];</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                    <span class=\"built_in\">Object</span>.prototype.toString.call(tmpdata) ===</span><br><span class=\"line\">                    <span class=\"string\">\"[object Object]\"</span></span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    rowdata.push(<span class=\"built_in\">JSON</span>.stringify(tmpdata));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    rowdata.push(tmpdata || <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是(.*?)的部分</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_text_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.text())</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                rowdata.push(</span><br><span class=\"line\">                    data.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(fields[i][<span class=\"string\">\"data_parser\"</span>]))[<span class=\"number\">1</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染主页的数据，使用异步</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainbody\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\".table_head\"</span>).html(data[<span class=\"string\">\"table_name\"</span>]);</span><br><span class=\"line\">    headstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;主键&lt;/td&gt;\"</span>;</span><br><span class=\"line\">    data[<span class=\"string\">\"fields\"</span>].map(</span><br><span class=\"line\">        (field) =&gt; (headstr += <span class=\"string\">\"&lt;td&gt;\"</span> + field[<span class=\"string\">\"field_name\"</span>] + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainhead\"</span>).html(headstr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data[<span class=\"string\">\"keys\"</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> row;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">\"data_type\"</span>] === <span class=\"string\">\"json\"</span>) &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_json_parser(</span><br><span class=\"line\">                    data[<span class=\"string\">\"data_url\"</span>],</span><br><span class=\"line\">                    data[<span class=\"string\">\"keys\"</span>][key],</span><br><span class=\"line\">                    data[<span class=\"string\">\"fields\"</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_text_parser(</span><br><span class=\"line\">                    data[<span class=\"string\">\"data_url\"</span>],</span><br><span class=\"line\">                    data[<span class=\"string\">\"keys\"</span>][key],</span><br><span class=\"line\">                    data[<span class=\"string\">\"fields\"</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            row = [data[<span class=\"string\">\"keys\"</span>][key]];</span><br><span class=\"line\">            data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\">(<span class=\"params\">field</span>) =&gt;</span> row.push(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        htmlstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">        row.map(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (htmlstr += <span class=\"string\">\"&lt;td&gt;\"</span> + value + <span class=\"string\">\"&lt;/td&gt;\"</span>));</span><br><span class=\"line\">        htmlstr +=</span><br><span class=\"line\">            <span class=\"string\">\"&lt;td&gt;&lt;a href='#' id='move_up' key='\"</span> +</span><br><span class=\"line\">            key +</span><br><span class=\"line\">            <span class=\"string\">\"'&gt;上移&lt;/a&gt; &lt;a href='#' id='delete_value' key='\"</span> +</span><br><span class=\"line\">            key +</span><br><span class=\"line\">            <span class=\"string\">\"'&gt;删除&lt;/a&gt;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\".mainbody\"</span>).append(htmlstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"感谢\">感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\" target=\"_blank\" rel=\"external\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\" target=\"_blank\" rel=\"external\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\" target=\"_blank\" rel=\"external\">插件教程</a></li>\n</ul>\n","excerpt":"","more":"<h1>前言</h1>\n<p>本次依旧发布一款浏览器插件–万能表格。</p>\n<p>说说为什么万能，其一，因为它可以接入任意的 GET 接口数据或其他文本(html/text…)数据来源，且无跨域限制，且一些需要 cookie 的接口或网站访问数据时也会带上 cookie。<br>\n其二，你可以自定义列的数量和名称，自定义数据的解析到对应的列，json 解析用就直接用 key，文本解析就用正则表达式。<br>\n其三，设置的数据来源一般是一个数据的详情接口或详情页，每个会对应一个主键，比如一个股票详情接口主键为股票代码，一个订单详情页的主键为唯一订单号。添加数据行的时候就使用这个主键来添加，主键会反映到 url 地址上，再反映到数据上。</p>\n<h2>案例展示</h2>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h1>软件使用教程</h1>\n<h2>软件下载与导入</h2>\n<h3>源码下载导入</h3>\n<p>软件源码的 github 地址为<br>\n<a href=\"https://github.com/webgjc/table_maker\">https://github.com/webgjc/table_maker</a></p>\n<p>首先将代码克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/table_maker.git\">https://github.com/webgjc/table_maker.git</a></p>\n</blockquote>\n<p>然后打开 chrome 点开右上角三个点的地方，<br>\n选择更多工具 ==&gt; 扩展程序；</p>\n<p>因为是源码，开启右上角的开发者模式<br>\n开发者模式，(在完毕后可以关闭开发者模式)</p>\n<p>然后点击左上角的 <strong>加载已解压的扩展程序</strong>，<br>\n选择刚刚 clone 下来的目录</p>\n<p>下图表示已经加载进来了</p>\n<p><img src=\"/img/mypost/table_maker.jpg\" alt=\"table_maker\"></p>\n<p>然后浏览器右上角也有这个插件的小图标</p>\n<p>就表示导入完成。</p>\n<h3>软件商店下载</h3>\n<p>暂不支持</p>\n<h2>软件使用</h2>\n<p>点开浏览器右上角的 <strong>$</strong> 小图标，会见到如下主页</p>\n<p><img src=\"/img/mypost/tablemaker_main.jpg\" alt=\"tablemaker_main\"></p>\n<p>目前该插件只支持一个表的制作与展示。</p>\n<h3>导入数据体验</h3>\n<p>数据如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data_type\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data_url\"</span>: <span class=\"string\">\"http://fund.eastmoney.com/&#123;ID&#125;.html\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"funCur-FundName\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"基金名称\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"data_parser\"</span>: <span class=\"string\">\"gz_gszzl\\\"&gt;(.*?)&lt;/span&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"field_name\"</span>: <span class=\"string\">\"净值估算\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"110022\"</span>, <span class=\"string\">\"003634\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"table_name\"</span>: <span class=\"string\">\"基金今日估值\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个已经做好的表格，表示的是基金实时净值的表格，主键为基金代码<br>\n(这边用的天天基金网的基金详情页面，实时数据有延迟)</p>\n<p>可以直接复制上面的数据，然后点击主页上导入新表格，粘贴回车即可，相当于已经做完了表格。如下</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>后面如果要关注其他基金，就直接点击新增主键，输入基金的代码即可。</p>\n<p>每次点开这个主页会重新获取渲染一遍(页面有缓存有时不会获取到最新数据)。</p>\n<h3>制作自己的表格 TEXT 解析</h3>\n<p>接下来就是最重要的部分 – 制作万能表格</p>\n<h4>基金净值表</h4>\n<p>这里以制作上面基金实时净值表为例。</p>\n<h4>确定表格数据源</h4>\n<p>首先要确定好要制作的表格的数据来源。</p>\n<p>比如这里找到了 <a href=\"http://fund.eastmoney.com/\">天天基金网</a>，<br>\n它查看一个基金详情的的地址页如下：</p>\n<blockquote>\n<p><a href=\"http://fund.eastmoney.com/%7BID%7D.html\">http://fund.eastmoney.com/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示基金的代码，虽然是 html 格式的返回，但也可以正则来解析，正合适我们这里所需要的。</p>\n<p>点击主页上的修改表格，修改表名，数据源地址(主键的地方就写{ID})和解析方式。</p>\n<h4>确定需要解析的字段</h4>\n<p>这边需要从基金详情页里获取的有(基金名称，基金实时的净值估值)</p>\n<p>到某个基金的详情的 html 页面，打开浏览器调试，或查看源码。</p>\n<p>找到这个数据的来源，这边看到在 html 源码里能找到数据，说明是后端渲染完了的，这边只需要在这个源码里进行正则匹配数据</p>\n<p>基金名称源码对应</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-Tit\"</span>&gt;</span>基金名称：<span class=\"tag\">&lt;/<span class=\"name\">span</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"funCur-FundName\"</span>&gt;</span>易方达消费行业股票<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>funCur-FundName&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p>基金实时估值部分源码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"remindicon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>净值估算是按照基金历史定期报告公布的持仓和指数走势预测当天净值。预估数值不代表真实净值，仅供参考，实际涨跌幅以基金净值为准。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundDetail-main\"</span>&gt;</span><span class=\"comment\">&lt;!-- 档案 start --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fundInfoItem\"</span>&gt;</span><span class=\"comment\">&lt;!--开放式基金收益率模块--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataOfFund\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataItem01\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sp01\"</span>&gt;</span>净值估算<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gztime\"</span>&gt;</span>(20-05-20 10:01)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"infoTips\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tipsBubble\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: none;\"</span>&gt;</span>净值估算每个交易日9：30-15：00盘中实时更新（QDII基金为海外交易时段）。<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataNums\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-large ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gsz\"</span>&gt;</span>3.1764<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_icon\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gzdown\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"floatleft fundZdf\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszze\"</span>&gt;</span>0.0086<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui-font-middle ui-color-green ui-num\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gz_gszzl\"</span>&gt;</span>-0.27%<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>正则解析方式为</p>\n<blockquote>\n<p>gz_gszzl&quot;&gt;(.*?)&lt;/span&gt;</p>\n</blockquote>\n<p><strong>插件上的操作为</strong></p>\n<p>主页点击修改表格，点击确定并修改列</p>\n<p>点击新增列，输入判断出来的列名和解析方式，点击确定，加完如下</p>\n<p><img src=\"/img/mypost/tablemaker_lie.jpg\" alt=\"tablemaker_lie\"></p>\n<p>当然这边也提供了测试解析的功能</p>\n<p>点击测试解析，输入一个主键，输入对应的正则，解析结果就会展示在下方。</p>\n<p>点击返回返回主页，列就会渲染出来。</p>\n<h4>最终效果和主页操作</h4>\n<p>制作完的主页如下，没有数据但加的列已经有了</p>\n<p><img src=\"/img/mypost/tablemaker_kongzhu.jpg\" alt=\"tablemaker_kongzhu\"></p>\n<p>主页上可以增加主键，表示增加一行数据</p>\n<p>增加主键就相当于一个关注的基金。</p>\n<p>比如增加 110022, 003634 这两个基金代码作为主键，就制作成了上面的直接导入数据的表格</p>\n<p><img src=\"/img/mypost/tablemaker_jjjz.jpg\" alt=\"tablemaker_jjjz\"></p>\n<p>双击导出表格 就将表格配置复制到剪切板，可以复制给他人导入。</p>\n<h3>制作自己的表格 JSON 解析</h3>\n<h4>城市天气表</h4>\n<p>这边 JSON 解析举的例子为 城市天气列表</p>\n<h4>数据来源</h4>\n<p>首先找到所需数据源接口</p>\n<p>这边使用国家的</p>\n<blockquote>\n<p><a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a></p>\n</blockquote>\n<p>{ID}表示城市代码，代码列表在下面有<br>\n<a href=\"https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html\">https://wenku.baidu.com/view/ea286102bb68a98271fefad8.html</a></p>\n<p>天气格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;weatherinfo&quot;: &#123;</span><br><span class=\"line\">        &quot;city&quot;: &quot;北京&quot;,</span><br><span class=\"line\">        &quot;cityid&quot;: &quot;101010100&quot;,</span><br><span class=\"line\">        &quot;temp1&quot;: &quot;18℃&quot;,</span><br><span class=\"line\">        &quot;temp2&quot;: &quot;31℃&quot;,</span><br><span class=\"line\">        &quot;weather&quot;: &quot;多云转阴&quot;,</span><br><span class=\"line\">        &quot;img1&quot;: &quot;n1.gif&quot;,</span><br><span class=\"line\">        &quot;img2&quot;: &quot;d2.gif&quot;,</span><br><span class=\"line\">        &quot;ptime&quot;: &quot;18:00&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑表格</p>\n<p>表名使用 城市天气表，<br>\n数据源填写 <a href=\"http://www.weather.com.cn/data/cityinfo/%7BID%7D.html\">http://www.weather.com.cn/data/cityinfo/{ID}.html</a><br>\n数据格式 json</p>\n<h4>设置列解析</h4>\n<p>json 解析比较简单，直接使用 key.key.key</p>\n<p>举例如下：<br>\n要解析城市名，则新增字段，名称填城市， 解析方式就写</p>\n<blockquote>\n<p>weatherinfo.city</p>\n</blockquote>\n<p>要解析城市天气，则新增字段，解析方式就写</p>\n<blockquote>\n<p>weatherinfo.weather</p>\n</blockquote>\n<h4>最终效果展示</h4>\n<p>主页操作同上 TEXT 解析的表格</p>\n<p><img src=\"/img/mypost/tablemaker_weather.jpg\" alt=\"tablemaker_weather\"></p>\n<h2>软件开发说明</h2>\n<p>浏览器插件的开发不在多说，可以查看下面借鉴的友联，或者对比之前发布的插件的教程。</p>\n<p>本次插件主要利用的是 在 popup.js 或者 background.js 可以无限跨域访问的特点，就获取到任意网站的数据，且进行自定义解析，然后渲染成表格。</p>\n<p>至于为什么要用$符号，一开始设计时是想弄一个实时基金数据列表，然后做着做着发觉可以做一个更加通用的数据表格，插件图标便也没有再换。</p>\n<h3>重点关注部分代码</h3>\n<p>主要代码在 popup.js 中，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// json解析，解析格式为：key.key.key</span></span><br><span class=\"line\"><span class=\"comment\">// 根据每个key去获取对应的值</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_json_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> response.json())</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                tmpdata = data;</span><br><span class=\"line\">                fields[i][<span class=\"string\">\"data_parser\"</span>].split(<span class=\"string\">\".\"</span>).map(<span class=\"function\">(<span class=\"params\">fieldkey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    tmpdata = tmpdata[fieldkey];</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                    <span class=\"built_in\">Object</span>.prototype.toString.call(tmpdata) ===</span><br><span class=\"line\">                    <span class=\"string\">\"[object Object]\"</span></span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    rowdata.push(<span class=\"built_in\">JSON</span>.stringify(tmpdata));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    rowdata.push(tmpdata || <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正则解析，将字符串正则匹配到获取到的原始数据，返回第二个值</span></span><br><span class=\"line\"><span class=\"comment\">// 也就是(.*?)的部分</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal_text_parser</span>(<span class=\"params\">url, key, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetch(key_replace(url, key))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.text())</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            rowdata = [key];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> fields) &#123;</span><br><span class=\"line\">                rowdata.push(</span><br><span class=\"line\">                    data.match(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(fields[i][<span class=\"string\">\"data_parser\"</span>]))[<span class=\"number\">1</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rowdata;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染主页的数据，使用异步</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainbody\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    $(<span class=\"string\">\".table_head\"</span>).html(data[<span class=\"string\">\"table_name\"</span>]);</span><br><span class=\"line\">    headstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;主键&lt;/td&gt;\"</span>;</span><br><span class=\"line\">    data[<span class=\"string\">\"fields\"</span>].map(</span><br><span class=\"line\">        (field) =&gt; (headstr += <span class=\"string\">\"&lt;td&gt;\"</span> + field[<span class=\"string\">\"field_name\"</span>] + <span class=\"string\">\"&lt;/td&gt;\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    headstr += <span class=\"string\">\"&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">    $(<span class=\"string\">\".mainhead\"</span>).html(headstr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> data[<span class=\"string\">\"keys\"</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> row;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">\"data_type\"</span>] === <span class=\"string\">\"json\"</span>) &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_json_parser(</span><br><span class=\"line\">                    data[<span class=\"string\">\"data_url\"</span>],</span><br><span class=\"line\">                    data[<span class=\"string\">\"keys\"</span>][key],</span><br><span class=\"line\">                    data[<span class=\"string\">\"fields\"</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                row = <span class=\"keyword\">await</span> deal_text_parser(</span><br><span class=\"line\">                    data[<span class=\"string\">\"data_url\"</span>],</span><br><span class=\"line\">                    data[<span class=\"string\">\"keys\"</span>][key],</span><br><span class=\"line\">                    data[<span class=\"string\">\"fields\"</span>]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            row = [data[<span class=\"string\">\"keys\"</span>][key]];</span><br><span class=\"line\">            data[<span class=\"string\">\"fields\"</span>].map(<span class=\"function\">(<span class=\"params\">field</span>) =&gt;</span> row.push(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        htmlstr = <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">        row.map(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (htmlstr += <span class=\"string\">\"&lt;td&gt;\"</span> + value + <span class=\"string\">\"&lt;/td&gt;\"</span>));</span><br><span class=\"line\">        htmlstr +=</span><br><span class=\"line\">            <span class=\"string\">\"&lt;td&gt;&lt;a href='#' id='move_up' key='\"</span> +</span><br><span class=\"line\">            key +</span><br><span class=\"line\">            <span class=\"string\">\"'&gt;上移&lt;/a&gt; &lt;a href='#' id='delete_value' key='\"</span> +</span><br><span class=\"line\">            key +</span><br><span class=\"line\">            <span class=\"string\">\"'&gt;删除&lt;/a&gt;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">        htmlstr += <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">        $(<span class=\"string\">\".mainbody\"</span>).append(htmlstr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>感谢</h1>\n<ul>\n<li><a href=\"http://www.materializecss.cn/about.html\">materializecss</a></li>\n<li><a href=\"https://developer.chrome.com/extensions\">官方轮子</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\">插件教程</a></li>\n</ul>\n"},{"title":"利用Hadoop-MapReduce实现稀疏矩阵乘法","catalog":true,"date":"2020-05-24T02:31:43.000Z","subtitle":null,"header-img":null,"_content":"\n# 前言\n\n之前关于 hadoop，也就试过一个 wordcount，这次来学习一下用 mapreduce 实现矩阵乘法，体会一下里面的思路过程。\n\n# 预备\n\n## 开发环境准备\n\n第一次开发 MapReduce 程序可以看下这边的环境准备\n[开发环境准备](#mapreduce开发环境)\n\n## MapReduce\n\n关于 MapReduce 这边只用到最基础的，因此了解一下[wordcount](http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html)也就能知道最基础的思想。\n\n-   Map 将每行数据转为 key,value 的格式;\n-   shuffle 会将相同 key 的 value 放到一个数组迭代器里变为 key，values[];\n-   Reduce 读取数据并做计算处理;\n\n## 数据存储\n\n因为针对的是稀疏的大矩阵，直接按矩阵格式存储会产生很多 0，  \n因此这边采用了 x, y ,v 的格式，x，y 表示坐标(从 0，0 开始)，v 表示数值\n\n## 测试数据\n\n为了方便这边就用 int 的数据来测试，且只准备了一个小矩阵，但原理一样\n\n```\n// matA 4x3\n1  2  3\n4  5  0\n7  8  9\n10 11 12\n\n// matB 3x2\n10 15\n0  2\n11 9\n```\n\n转为 x, y, v 的格式后\n\n```\n// matA\n0,0,1\n0,1,2\n0,2,3\n1,0,4\n1,1,5\n2,0,7\n2,1,8\n2,2,9\n3,0,10\n3,1,11\n3,2,12\n\n// matB\n0,0,10\n0,1,15\n1,1,2\n2,0,11\n2,1,9\n\n// 计算结果数组C\n0,0\t43\n0,1\t46\n1,0\t40\n1,1\t70\n2,0\t169\n2,1\t202\n3,0\t232\n3,1\t280\n```\n\n将两个文件存到项目根目录/input 下\n\n# 三种实现\n\n这边要讨论三种实现，思想上稍稍不同。\n\n下面矩阵名以 A，B，C 替代，表示 AxB=C。  \nA 为 mxl  \nB 为 lxn  \nC 为 mxn\n\n## 基础的矩阵相乘\n\n关于矩阵相乘，一般的就会考虑到 A 的行点乘以 B 的列为 C 的一个值，  \n所以最先考虑的是将 A 的第 i 行和 B 的第 i 列的数据放到一个 mapreduce 的 key 中，key 值为计算结果在 C 中的坐标。  \n然后考虑 A 的每行数据需要在 B 的每列用到，用到的地方都需要拷贝一份数据到对应 key 中，B 同样，就是 map 部分逻辑。  \n例如 A 的第一格数据 0,0,1，他会在与 B 的第一列，第二列点乘的时候用到成为 C 的第一行的一部分，就将它加到 key(0,0)(0,1)中。\n\n例如上面的测试数据，这么做以后得到的 key,value 为，就是 map 部分  \nvalue 的第一个区分矩阵，第二个是 A 的列\\B 的行，第三个表示值。\n\n```\n0,0\nmatB,2,11\nmatB,0,10\nmatA,0,1\nmatA,1,2\nmatA,2,3\n\n0,1\nmatA,0,1\nmatA,1,2\nmatA,2,3\nmatB,0,15\nmatB,2,9\nmatB,1,2\n...\n```\n\n在 reduce 阶段，将 A 的列与 B 的行相等的计算乘积并相加的到 C 的一格的结果。\n\n盗一张图，可以很清楚的表示这个过程，他这个的定义 1，1 为开始点\n![mapreduce_show](/img/mypost/mapreduce_show.jpg)\n\n来看具体代码\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * @description: CALC A*B\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/23 10:57 上午\n */\npublic class Matrix {\n\n    private static String MATA = \"matA\"; // 矩阵名\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n\n    // Map部分\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName(); // 矩阵分别存两个文件，获取文件名判断是哪个矩阵\n            if(MATA.equals(fileName)){\n                // A矩阵时，遍历B的列，将值放到点乘会用到的对应key中\n                for(int i = 0; i < MATRIXB_C; i++) {\n                    // 返回key value的结果\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", lineData[0], i)),\n                            new Text(String.format(\"%s,%s,%s\", MATA, lineData[1], lineData[2])));\n                }\n            }\n\n            if(MATB.equals(fileName)) {\n                // B同样\n                for(int i = 0; i < MATRIXA_R; i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", i, lineData[1])),\n                            new Text(String.format(\"%s,%s,%s\", MATB ,lineData[0], lineData[2])));\n                }\n            }\n        }\n    }\n\n    // Reduce部分\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 初始化0数组存储对应相乘的值\n            int[] valA = new int[MATRIXA_C];\n            int[] valB = new int[MATRIXA_C];\n            for(int i = 0; i < MATRIXA_C; i++) {\n                valA[i] = 0;\n                valB[i] = 0;\n            }\n            // 将value按第二个值的index存入数组\n            while(iterator.hasNext()) {\n                String item = iterator.next().toString();\n                String[] itemData = item.split(\",\");\n                if(MATA.equals(itemData[0])) {\n                    valA[Integer.parseInt(itemData[1])] = Integer.parseInt(itemData[2]);\n                }\n                if(MATB.equals(itemData[0])) {\n                    valB[Integer.parseInt(itemData[1])] = Integer.parseInt(itemData[2]);\n                }\n            }\n            // 数组乘积求求和得到C一个位置的值\n            int result = 0;\n            for(int i = 0; i < MATRIXA_C; i++) {\n                result += valA[i] * valB[i];\n            }\n            // 写入结果\n            outputCollector.collect(text, new Text(Integer.toString(result)));\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // 这个是为了重复运行自动删除输出目录\n        Configuration conf = new Configuration();\n        Path outpath = new Path(args[1]);\n        FileSystem fileSystem = outpath.getFileSystem(conf);\n        if(fileSystem.exists(outpath)){\n            fileSystem.delete(outpath, true);\n        }\n\n        // 定义任务\n        JobConf jobConf = new JobConf(Matrix.class);\n        jobConf.setJobName(\"matrix\");\n\n        // 定义输入输出类型\n        jobConf.setOutputKeyClass(Text.class);\n        jobConf.setOutputValueClass(Text.class);\n\n        // 定义mapreduce过程\n        jobConf.setMapperClass(Map.class);\n        jobConf.setReducerClass(Reduce.class);\n\n        // 定义输入输出路径\n        FileInputFormat.addInputPath(jobConf, new Path(args[0]));\n        FileOutputFormat.setOutputPath(jobConf, new Path(args[1]));\n\n        // 运行任务\n        JobClient.runJob(jobConf);\n    }\n}\n```\n\n## 分块矩阵乘法\n\n上面的方法有个问题是在 Map 过程中 A 的每个数据要扩大 B 列倍，B 的每个数据要扩大 A 行倍，数据较为冗余。\n\n一种优化方式是将矩阵分块。\n分块的计算原理如下\n![juzhengfenkuai](/img/mypost/juzhengfenkuai.jpg)\n\n分块后如果是 k 个分为一块，数据大致可以减少 k 倍，\n\nmap 的时候按 C 的结果大块进行取 key，同时将需要进行对应计算的 A 列块和 B 行块划分到一起，reduce 的时候进行对应的块的矩阵计算。\n\n这边举例以 2 个为一块，矩阵切分后如下，A 为 2x2，B 为 2x1  \nC 即为 2x1，shuffle 后的的 key 原本会有 6 个，现在只需要 4 个，且每个数量也减少了\n\n如下将 1 2 4 5 和 10 15 0 2 （DIV \\*_ 2 _ 2）的块划到一起并在第一层 reduce 做计算，返回的 key 为对应行列\n然后第二层 mapreduce 将计算结果合并累加\n\n```\n1  2  | 3\n4  5  | 0\n---------\n7  8  | 9\n10 11 | 12\n\n\n10 15\n0  2\n-----\n11 9\n\n// shuffle后的数据格式\n0,0,0\nmatB,0,0,10\nmatB,0,1,15\nmatB,1,1,2\nmatA,0,0,1\nmatA,0,1,2\nmatA,1,0,4\nmatA,1,1,5\n0,1,0\nmatA,0,2,3\nmatB,2,0,11\nmatB,2,1,9\n1,0,0\nmatB,0,0,10\nmatB,0,1,15\nmatB,1,1,2\nmatA,2,0,7\nmatA,2,1,8\nmatA,3,0,10\nmatA,3,1,11\n1,1,0\nmatA,2,2,9\nmatA,3,2,12\nmatB,2,0,11\nmatB,2,1,9\n```\n\n上代码\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/24 10:29 上午\n */\npublic class BlockMatrix {\n\n    private static String MATA = \"matA\";\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n    private static int DIV = 2; // 每多少个分块\n\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            int row = Integer.parseInt((lineData[0]));\n            int col = Integer.parseInt((lineData[1]));\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();\n            if(MATA.equals(fileName)){\n                // 分块后key只需要存分好的大块的位置和A列B行对应值，\n                // value需要全部位置和值\n                // 保证每块shuffle后数据量都只有 DIV**2 * 2\n                for(int i = 0; i < Math.ceil(1.0 * MATRIXB_C / DIV); i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s,%s\", row/DIV, col/DIV, i)),\n                            new Text(String.format(\"%s,%s,%s,%s\", MATA, row, col, lineData[2])));\n                }\n            }\n\n            if(MATB.equals(fileName)) {\n                for(int i = 0; i < Math.ceil(1.0 * MATRIXA_R / DIV); i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s,%s\", i, row/DIV, col/DIV)),\n                            new Text(String.format(\"%s,%s,%s,%s\", MATB, row, col, lineData[2])));\n                }\n            }\n        }\n    }\n\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 将A和B的x,y,v分别存储\n            List<List<Integer>> listA = new ArrayList<>();\n            List<List<Integer>> listB = new ArrayList<>();\n            while(iterator.hasNext()){\n                String value = iterator.next().toString();\n                String[] data = value.split(\",\");\n                if(MATA.equals(data[0])) {\n                    listA.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2]), Integer.parseInt(data[3])));\n                }\n                if(MATB.equals(data[0])) {\n                    listB.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2]), Integer.parseInt(data[3])));\n                }\n            }\n            // 遍历A和B A的y和B的x相等的做乘积存入map，\n            // key为A的x和B的y，value为乘积或乘积的累积\n            HashMap<String, Integer> valueMap = new HashMap<>();\n            for(List<Integer> itemA: listA) {\n                for(List<Integer> itemB: listB) {\n                    if(itemA.get(1).equals(itemB.get(0))) {\n                        String key = String.format(\"%s,%s\", itemA.get(0), itemB.get(1));\n                        if(!valueMap.containsKey(key)) {\n                            valueMap.put(key, itemA.get(2) * itemB.get(2));\n                        }else{\n                            valueMap.put(key, valueMap.get(key) + itemA.get(2) * itemB.get(2));\n                        }\n                    }\n                }\n            }\n            // 每个key都取一遍就是C\n            for(String key: valueMap.keySet()) {\n                outputCollector.collect(new Text(key), new Text(Integer.toString(valueMap.get(key))));\n            }\n        }\n    }\n    // 后续需要接一个累加的mapreduce，这个与下面的列行乘法相同，见下方。\n}\n```\n\n## 列行相乘\n\n这个的思想基本和第二种的 reduce 部分差不多，但这个不是利用 hashmap 来自己合并，而用两次 mapreduce 来实现。找到 A 的列与 B 的行值相等的两个值进行乘积作为值，取 A 的行与 B 的列作为 Key，然后将同样 key 的 value 相加就可以得到结果。\n\n这个需要分两步 MapReduce，  \n第一步 Mapreduce 是取相等的列行相乘得值，key 为对应的行列\n第二步 MapReduce 是将相等的 key 相加，得到 C 的结果。\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/24 1:46 下午\n */\npublic class LhMatrix {\n    private static String MATA = \"matA\";\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();\n            if(MATA.equals(fileName)){\n                // 将A的y作为key\n                outputCollector.collect(\n                        new Text(lineData[1]),\n                        new Text(String.format(\"%s,%s,%s\", MATA, lineData[0], lineData[2])));\n            }\n\n            if(MATB.equals(fileName)) {\n                // 将B的x作为key\n                outputCollector.collect(\n                        new Text(lineData[0]),\n                        new Text(String.format(\"%s,%s,%s\", MATB, lineData[1], lineData[2])));\n            }\n        }\n    }\n\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            List<List<Integer>> listA = new ArrayList<>();\n            List<List<Integer>> listB = new ArrayList<>();\n            while(iterator.hasNext()){\n                String value = iterator.next().toString();\n                System.out.println(value);\n                String[] data = value.split(\",\");\n                if(MATA.equals(data[0])) {\n                    listA.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2])));\n                }\n                if(MATB.equals(data[0])) {\n                    listB.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2])));\n                }\n            }\n            // shuffle同样key的AB全排列并做乘积，\n            // 返回key为C的坐标，value为一部分乘积，后续要做累加\n            for(List<Integer> itemA: listA) {\n                for(List<Integer> itemB: listB) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", itemA.get(0), itemB.get(0))),\n                            new Text(Integer.toString(itemA.get(1) * itemB.get(1))));\n                }\n            }\n        }\n    }\n\n    // 下面的mapreduce做累加\n    public static class SumMap extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 取出第一次输出的结果\n            String[] line = text.toString().split(\"\\t\");\n            outputCollector.collect(new Text(line[0]), new Text(line[1]));\n        }\n    }\n\n    public static class SumReducer extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 累加\n            int sum = 0;\n            while(iterator.hasNext()) {\n                sum += Integer.parseInt(iterator.next().toString());\n            }\n            outputCollector.collect(text, new Text(Integer.toString(sum)));\n        }\n    }\n\n    // 这边跑了两个mapreduce\n    // 需要有第三个参数 第二次输出的路径\n    public static void main(String[] args) throws Exception {\n        Configuration conf = new Configuration();\n        Path outpath = new Path(args[1]);\n        FileSystem fileSystem = outpath.getFileSystem(conf);\n        if(fileSystem.exists(outpath)){\n            fileSystem.delete(outpath, true);\n        }\n        Path outpath1 = new Path(args[2]);\n        FileSystem fileSystem1 = outpath1.getFileSystem(conf);\n        if(fileSystem1.exists(outpath1)){\n            fileSystem1.delete(outpath1, true);\n        }\n\n        JobConf jobConf = new JobConf(LhMatrix.class);\n        jobConf.setJobName(\"block matrix\");\n\n        jobConf.setOutputKeyClass(Text.class);\n        jobConf.setOutputValueClass(Text.class);\n\n        jobConf.setMapperClass(LhMatrix.Map.class);\n        jobConf.setReducerClass(LhMatrix.Reduce.class);\n\n        FileInputFormat.setInputPaths(jobConf, new Path(args[0]));\n        FileOutputFormat.setOutputPath(jobConf, new Path(args[1]));\n\n        JobClient.runJob(jobConf);\n\n\n        JobConf jobConf1 = new JobConf(LhMatrix.class);\n        jobConf1.setJobName(\"block matrix sum\");\n        jobConf1.setOutputKeyClass(Text.class);\n        jobConf1.setOutputValueClass(Text.class);\n        jobConf1.setMapperClass(LhMatrix.SumMap.class);\n        jobConf1.setReducerClass(LhMatrix.SumReducer.class);\n\n        FileInputFormat.addInputPath(jobConf1, new Path(args[1]));\n        FileOutputFormat.setOutputPath(jobConf1, new Path(args[2]));\n        JobClient.runJob(jobConf1);\n    }\n}\n\n```\n\n# 小结\n\n-   第一种基本的矩阵乘法，实现比较直接，主要问题在于 map 的时候数据复制了 n 份，导致 shuffle 的数据过大；另一个是每个 reduce 的时候获得的数据量为 m+n，且需要转存到内存中，可能会导致存储不下。\n-   第二种分块相乘，将数据复制分数减少了 DIV 倍，同时一个 reduce 的数据量在 DIV\\*_2 _ 2 的大小；麻烦的是需要控制的就是 DIV 取合适的值。\n-   第三种列行相乘，这边实现的是直接在全集上进行列行分，其实也可以在分块后进行列行，这边的每个 reduce 也是会有 m+n 的数据进来内存中，分块后再按列行划分就是步骤会多了点，也是可以的。\n\n**感觉最为关键的一步是在 map 的时候对数据进行合理的计算划分与分发，就如同这边对矩阵的分块/列行对应分发(什么作为 key)，不同的 key 划分对应的计算量和中间过程数据完全不同。划分完后的每块 reduce 的计算基本是水到渠成的事情，都是一些累加或点乘的事情。**\n\n# MapReduce 开发环境\n\n这边因为本地装的 hadoop2.7.3 版本，  \n因此新建 maven 项目，使用了 2.7.3 的依赖包，不过运行可以不依赖本地\n\n```xml\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-core</artifactId>\n    <version>1.2.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-common</artifactId>\n    <version>2.7.3</version>\n</dependency>\n```\n\n打开 idea 的运行配置，  \n新建 Application 的配置，\n\nMain class 填写如下；\narguments 参数填写如下，第一个为 mvn 打包后的 jar，  \n第二个为运行的类，  \n后面两个为类的参数，表示输入输出路径(这边相对路径是相对项目根目录)\n![mapreduce_configure](/img/mypost/mapreduce_configure.jpg)\n\n然后直接点运行即可，debug 也可以\n\n# 感谢\n\n-   [MapReduce 官方教程](http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html)\n-   [MapReduce 实现大矩阵乘法](https://blog.csdn.net/xyilu/article/details/9066973)\n-   [一些算法的 MapReduce 实现——矩阵分块乘法计算](https://blog.csdn.net/wzhg0508/article/details/17475573)\n-   [列行相乘法](https://www.cnblogs.com/Decmber/p/5491920.html)\n-   [高度可伸缩的稀疏矩阵乘法](https://wenku.baidu.com/view/bd3da325cf84b9d528ea7a96.html)\n","source":"_posts/2020/article_20_hadoop-mapreduce实现矩阵乘法.md","raw":"---\ntitle: 利用Hadoop-MapReduce实现稀疏矩阵乘法\ncatalog: true\ndate: 2020-05-24 10:31:43\nsubtitle:\nheader-img:\ntags:\n    - HADOOP\n---\n\n# 前言\n\n之前关于 hadoop，也就试过一个 wordcount，这次来学习一下用 mapreduce 实现矩阵乘法，体会一下里面的思路过程。\n\n# 预备\n\n## 开发环境准备\n\n第一次开发 MapReduce 程序可以看下这边的环境准备\n[开发环境准备](#mapreduce开发环境)\n\n## MapReduce\n\n关于 MapReduce 这边只用到最基础的，因此了解一下[wordcount](http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html)也就能知道最基础的思想。\n\n-   Map 将每行数据转为 key,value 的格式;\n-   shuffle 会将相同 key 的 value 放到一个数组迭代器里变为 key，values[];\n-   Reduce 读取数据并做计算处理;\n\n## 数据存储\n\n因为针对的是稀疏的大矩阵，直接按矩阵格式存储会产生很多 0，  \n因此这边采用了 x, y ,v 的格式，x，y 表示坐标(从 0，0 开始)，v 表示数值\n\n## 测试数据\n\n为了方便这边就用 int 的数据来测试，且只准备了一个小矩阵，但原理一样\n\n```\n// matA 4x3\n1  2  3\n4  5  0\n7  8  9\n10 11 12\n\n// matB 3x2\n10 15\n0  2\n11 9\n```\n\n转为 x, y, v 的格式后\n\n```\n// matA\n0,0,1\n0,1,2\n0,2,3\n1,0,4\n1,1,5\n2,0,7\n2,1,8\n2,2,9\n3,0,10\n3,1,11\n3,2,12\n\n// matB\n0,0,10\n0,1,15\n1,1,2\n2,0,11\n2,1,9\n\n// 计算结果数组C\n0,0\t43\n0,1\t46\n1,0\t40\n1,1\t70\n2,0\t169\n2,1\t202\n3,0\t232\n3,1\t280\n```\n\n将两个文件存到项目根目录/input 下\n\n# 三种实现\n\n这边要讨论三种实现，思想上稍稍不同。\n\n下面矩阵名以 A，B，C 替代，表示 AxB=C。  \nA 为 mxl  \nB 为 lxn  \nC 为 mxn\n\n## 基础的矩阵相乘\n\n关于矩阵相乘，一般的就会考虑到 A 的行点乘以 B 的列为 C 的一个值，  \n所以最先考虑的是将 A 的第 i 行和 B 的第 i 列的数据放到一个 mapreduce 的 key 中，key 值为计算结果在 C 中的坐标。  \n然后考虑 A 的每行数据需要在 B 的每列用到，用到的地方都需要拷贝一份数据到对应 key 中，B 同样，就是 map 部分逻辑。  \n例如 A 的第一格数据 0,0,1，他会在与 B 的第一列，第二列点乘的时候用到成为 C 的第一行的一部分，就将它加到 key(0,0)(0,1)中。\n\n例如上面的测试数据，这么做以后得到的 key,value 为，就是 map 部分  \nvalue 的第一个区分矩阵，第二个是 A 的列\\B 的行，第三个表示值。\n\n```\n0,0\nmatB,2,11\nmatB,0,10\nmatA,0,1\nmatA,1,2\nmatA,2,3\n\n0,1\nmatA,0,1\nmatA,1,2\nmatA,2,3\nmatB,0,15\nmatB,2,9\nmatB,1,2\n...\n```\n\n在 reduce 阶段，将 A 的列与 B 的行相等的计算乘积并相加的到 C 的一格的结果。\n\n盗一张图，可以很清楚的表示这个过程，他这个的定义 1，1 为开始点\n![mapreduce_show](/img/mypost/mapreduce_show.jpg)\n\n来看具体代码\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * @description: CALC A*B\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/23 10:57 上午\n */\npublic class Matrix {\n\n    private static String MATA = \"matA\"; // 矩阵名\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n\n    // Map部分\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName(); // 矩阵分别存两个文件，获取文件名判断是哪个矩阵\n            if(MATA.equals(fileName)){\n                // A矩阵时，遍历B的列，将值放到点乘会用到的对应key中\n                for(int i = 0; i < MATRIXB_C; i++) {\n                    // 返回key value的结果\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", lineData[0], i)),\n                            new Text(String.format(\"%s,%s,%s\", MATA, lineData[1], lineData[2])));\n                }\n            }\n\n            if(MATB.equals(fileName)) {\n                // B同样\n                for(int i = 0; i < MATRIXA_R; i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", i, lineData[1])),\n                            new Text(String.format(\"%s,%s,%s\", MATB ,lineData[0], lineData[2])));\n                }\n            }\n        }\n    }\n\n    // Reduce部分\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 初始化0数组存储对应相乘的值\n            int[] valA = new int[MATRIXA_C];\n            int[] valB = new int[MATRIXA_C];\n            for(int i = 0; i < MATRIXA_C; i++) {\n                valA[i] = 0;\n                valB[i] = 0;\n            }\n            // 将value按第二个值的index存入数组\n            while(iterator.hasNext()) {\n                String item = iterator.next().toString();\n                String[] itemData = item.split(\",\");\n                if(MATA.equals(itemData[0])) {\n                    valA[Integer.parseInt(itemData[1])] = Integer.parseInt(itemData[2]);\n                }\n                if(MATB.equals(itemData[0])) {\n                    valB[Integer.parseInt(itemData[1])] = Integer.parseInt(itemData[2]);\n                }\n            }\n            // 数组乘积求求和得到C一个位置的值\n            int result = 0;\n            for(int i = 0; i < MATRIXA_C; i++) {\n                result += valA[i] * valB[i];\n            }\n            // 写入结果\n            outputCollector.collect(text, new Text(Integer.toString(result)));\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // 这个是为了重复运行自动删除输出目录\n        Configuration conf = new Configuration();\n        Path outpath = new Path(args[1]);\n        FileSystem fileSystem = outpath.getFileSystem(conf);\n        if(fileSystem.exists(outpath)){\n            fileSystem.delete(outpath, true);\n        }\n\n        // 定义任务\n        JobConf jobConf = new JobConf(Matrix.class);\n        jobConf.setJobName(\"matrix\");\n\n        // 定义输入输出类型\n        jobConf.setOutputKeyClass(Text.class);\n        jobConf.setOutputValueClass(Text.class);\n\n        // 定义mapreduce过程\n        jobConf.setMapperClass(Map.class);\n        jobConf.setReducerClass(Reduce.class);\n\n        // 定义输入输出路径\n        FileInputFormat.addInputPath(jobConf, new Path(args[0]));\n        FileOutputFormat.setOutputPath(jobConf, new Path(args[1]));\n\n        // 运行任务\n        JobClient.runJob(jobConf);\n    }\n}\n```\n\n## 分块矩阵乘法\n\n上面的方法有个问题是在 Map 过程中 A 的每个数据要扩大 B 列倍，B 的每个数据要扩大 A 行倍，数据较为冗余。\n\n一种优化方式是将矩阵分块。\n分块的计算原理如下\n![juzhengfenkuai](/img/mypost/juzhengfenkuai.jpg)\n\n分块后如果是 k 个分为一块，数据大致可以减少 k 倍，\n\nmap 的时候按 C 的结果大块进行取 key，同时将需要进行对应计算的 A 列块和 B 行块划分到一起，reduce 的时候进行对应的块的矩阵计算。\n\n这边举例以 2 个为一块，矩阵切分后如下，A 为 2x2，B 为 2x1  \nC 即为 2x1，shuffle 后的的 key 原本会有 6 个，现在只需要 4 个，且每个数量也减少了\n\n如下将 1 2 4 5 和 10 15 0 2 （DIV \\*_ 2 _ 2）的块划到一起并在第一层 reduce 做计算，返回的 key 为对应行列\n然后第二层 mapreduce 将计算结果合并累加\n\n```\n1  2  | 3\n4  5  | 0\n---------\n7  8  | 9\n10 11 | 12\n\n\n10 15\n0  2\n-----\n11 9\n\n// shuffle后的数据格式\n0,0,0\nmatB,0,0,10\nmatB,0,1,15\nmatB,1,1,2\nmatA,0,0,1\nmatA,0,1,2\nmatA,1,0,4\nmatA,1,1,5\n0,1,0\nmatA,0,2,3\nmatB,2,0,11\nmatB,2,1,9\n1,0,0\nmatB,0,0,10\nmatB,0,1,15\nmatB,1,1,2\nmatA,2,0,7\nmatA,2,1,8\nmatA,3,0,10\nmatA,3,1,11\n1,1,0\nmatA,2,2,9\nmatA,3,2,12\nmatB,2,0,11\nmatB,2,1,9\n```\n\n上代码\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/24 10:29 上午\n */\npublic class BlockMatrix {\n\n    private static String MATA = \"matA\";\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n    private static int DIV = 2; // 每多少个分块\n\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            int row = Integer.parseInt((lineData[0]));\n            int col = Integer.parseInt((lineData[1]));\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();\n            if(MATA.equals(fileName)){\n                // 分块后key只需要存分好的大块的位置和A列B行对应值，\n                // value需要全部位置和值\n                // 保证每块shuffle后数据量都只有 DIV**2 * 2\n                for(int i = 0; i < Math.ceil(1.0 * MATRIXB_C / DIV); i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s,%s\", row/DIV, col/DIV, i)),\n                            new Text(String.format(\"%s,%s,%s,%s\", MATA, row, col, lineData[2])));\n                }\n            }\n\n            if(MATB.equals(fileName)) {\n                for(int i = 0; i < Math.ceil(1.0 * MATRIXA_R / DIV); i++) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s,%s\", i, row/DIV, col/DIV)),\n                            new Text(String.format(\"%s,%s,%s,%s\", MATB, row, col, lineData[2])));\n                }\n            }\n        }\n    }\n\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 将A和B的x,y,v分别存储\n            List<List<Integer>> listA = new ArrayList<>();\n            List<List<Integer>> listB = new ArrayList<>();\n            while(iterator.hasNext()){\n                String value = iterator.next().toString();\n                String[] data = value.split(\",\");\n                if(MATA.equals(data[0])) {\n                    listA.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2]), Integer.parseInt(data[3])));\n                }\n                if(MATB.equals(data[0])) {\n                    listB.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2]), Integer.parseInt(data[3])));\n                }\n            }\n            // 遍历A和B A的y和B的x相等的做乘积存入map，\n            // key为A的x和B的y，value为乘积或乘积的累积\n            HashMap<String, Integer> valueMap = new HashMap<>();\n            for(List<Integer> itemA: listA) {\n                for(List<Integer> itemB: listB) {\n                    if(itemA.get(1).equals(itemB.get(0))) {\n                        String key = String.format(\"%s,%s\", itemA.get(0), itemB.get(1));\n                        if(!valueMap.containsKey(key)) {\n                            valueMap.put(key, itemA.get(2) * itemB.get(2));\n                        }else{\n                            valueMap.put(key, valueMap.get(key) + itemA.get(2) * itemB.get(2));\n                        }\n                    }\n                }\n            }\n            // 每个key都取一遍就是C\n            for(String key: valueMap.keySet()) {\n                outputCollector.collect(new Text(key), new Text(Integer.toString(valueMap.get(key))));\n            }\n        }\n    }\n    // 后续需要接一个累加的mapreduce，这个与下面的列行乘法相同，见下方。\n}\n```\n\n## 列行相乘\n\n这个的思想基本和第二种的 reduce 部分差不多，但这个不是利用 hashmap 来自己合并，而用两次 mapreduce 来实现。找到 A 的列与 B 的行值相等的两个值进行乘积作为值，取 A 的行与 B 的列作为 Key，然后将同样 key 的 value 相加就可以得到结果。\n\n这个需要分两步 MapReduce，  \n第一步 Mapreduce 是取相等的列行相乘得值，key 为对应的行列\n第二步 MapReduce 是将相等的 key 相加，得到 C 的结果。\n\n```java\npackage cn.ganjiacheng;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapred.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * @description:\n * @author: again\n * @email: ganjiacheng@souche.com\n * @date: 2020/5/24 1:46 下午\n */\npublic class LhMatrix {\n    private static String MATA = \"matA\";\n    private static String MATB = \"matB\";\n    private static int MATRIXA_R = 4; // A矩阵行\n    private static int MATRIXA_C = 3; // A矩阵列\n    private static int MATRIXB_C = 2; // B矩阵列\n\n    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            String line = text.toString();\n            String[] lineData = line.split(\",\");\n            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();\n            if(MATA.equals(fileName)){\n                // 将A的y作为key\n                outputCollector.collect(\n                        new Text(lineData[1]),\n                        new Text(String.format(\"%s,%s,%s\", MATA, lineData[0], lineData[2])));\n            }\n\n            if(MATB.equals(fileName)) {\n                // 将B的x作为key\n                outputCollector.collect(\n                        new Text(lineData[0]),\n                        new Text(String.format(\"%s,%s,%s\", MATB, lineData[1], lineData[2])));\n            }\n        }\n    }\n\n    public static class Reduce extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            List<List<Integer>> listA = new ArrayList<>();\n            List<List<Integer>> listB = new ArrayList<>();\n            while(iterator.hasNext()){\n                String value = iterator.next().toString();\n                System.out.println(value);\n                String[] data = value.split(\",\");\n                if(MATA.equals(data[0])) {\n                    listA.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2])));\n                }\n                if(MATB.equals(data[0])) {\n                    listB.add(Arrays.asList(Integer.parseInt(data[1]), Integer.parseInt(data[2])));\n                }\n            }\n            // shuffle同样key的AB全排列并做乘积，\n            // 返回key为C的坐标，value为一部分乘积，后续要做累加\n            for(List<Integer> itemA: listA) {\n                for(List<Integer> itemB: listB) {\n                    outputCollector.collect(\n                            new Text(String.format(\"%s,%s\", itemA.get(0), itemB.get(0))),\n                            new Text(Integer.toString(itemA.get(1) * itemB.get(1))));\n                }\n            }\n        }\n    }\n\n    // 下面的mapreduce做累加\n    public static class SumMap extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {\n\n        @Override\n        public void map(LongWritable longWritable, Text text, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 取出第一次输出的结果\n            String[] line = text.toString().split(\"\\t\");\n            outputCollector.collect(new Text(line[0]), new Text(line[1]));\n        }\n    }\n\n    public static class SumReducer extends MapReduceBase implements Reducer<Text, Text, Text, Text> {\n\n        @Override\n        public void reduce(Text text, Iterator<Text> iterator, OutputCollector<Text, Text> outputCollector, Reporter reporter) throws IOException {\n            // 累加\n            int sum = 0;\n            while(iterator.hasNext()) {\n                sum += Integer.parseInt(iterator.next().toString());\n            }\n            outputCollector.collect(text, new Text(Integer.toString(sum)));\n        }\n    }\n\n    // 这边跑了两个mapreduce\n    // 需要有第三个参数 第二次输出的路径\n    public static void main(String[] args) throws Exception {\n        Configuration conf = new Configuration();\n        Path outpath = new Path(args[1]);\n        FileSystem fileSystem = outpath.getFileSystem(conf);\n        if(fileSystem.exists(outpath)){\n            fileSystem.delete(outpath, true);\n        }\n        Path outpath1 = new Path(args[2]);\n        FileSystem fileSystem1 = outpath1.getFileSystem(conf);\n        if(fileSystem1.exists(outpath1)){\n            fileSystem1.delete(outpath1, true);\n        }\n\n        JobConf jobConf = new JobConf(LhMatrix.class);\n        jobConf.setJobName(\"block matrix\");\n\n        jobConf.setOutputKeyClass(Text.class);\n        jobConf.setOutputValueClass(Text.class);\n\n        jobConf.setMapperClass(LhMatrix.Map.class);\n        jobConf.setReducerClass(LhMatrix.Reduce.class);\n\n        FileInputFormat.setInputPaths(jobConf, new Path(args[0]));\n        FileOutputFormat.setOutputPath(jobConf, new Path(args[1]));\n\n        JobClient.runJob(jobConf);\n\n\n        JobConf jobConf1 = new JobConf(LhMatrix.class);\n        jobConf1.setJobName(\"block matrix sum\");\n        jobConf1.setOutputKeyClass(Text.class);\n        jobConf1.setOutputValueClass(Text.class);\n        jobConf1.setMapperClass(LhMatrix.SumMap.class);\n        jobConf1.setReducerClass(LhMatrix.SumReducer.class);\n\n        FileInputFormat.addInputPath(jobConf1, new Path(args[1]));\n        FileOutputFormat.setOutputPath(jobConf1, new Path(args[2]));\n        JobClient.runJob(jobConf1);\n    }\n}\n\n```\n\n# 小结\n\n-   第一种基本的矩阵乘法，实现比较直接，主要问题在于 map 的时候数据复制了 n 份，导致 shuffle 的数据过大；另一个是每个 reduce 的时候获得的数据量为 m+n，且需要转存到内存中，可能会导致存储不下。\n-   第二种分块相乘，将数据复制分数减少了 DIV 倍，同时一个 reduce 的数据量在 DIV\\*_2 _ 2 的大小；麻烦的是需要控制的就是 DIV 取合适的值。\n-   第三种列行相乘，这边实现的是直接在全集上进行列行分，其实也可以在分块后进行列行，这边的每个 reduce 也是会有 m+n 的数据进来内存中，分块后再按列行划分就是步骤会多了点，也是可以的。\n\n**感觉最为关键的一步是在 map 的时候对数据进行合理的计算划分与分发，就如同这边对矩阵的分块/列行对应分发(什么作为 key)，不同的 key 划分对应的计算量和中间过程数据完全不同。划分完后的每块 reduce 的计算基本是水到渠成的事情，都是一些累加或点乘的事情。**\n\n# MapReduce 开发环境\n\n这边因为本地装的 hadoop2.7.3 版本，  \n因此新建 maven 项目，使用了 2.7.3 的依赖包，不过运行可以不依赖本地\n\n```xml\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-core</artifactId>\n    <version>1.2.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-common</artifactId>\n    <version>2.7.3</version>\n</dependency>\n```\n\n打开 idea 的运行配置，  \n新建 Application 的配置，\n\nMain class 填写如下；\narguments 参数填写如下，第一个为 mvn 打包后的 jar，  \n第二个为运行的类，  \n后面两个为类的参数，表示输入输出路径(这边相对路径是相对项目根目录)\n![mapreduce_configure](/img/mypost/mapreduce_configure.jpg)\n\n然后直接点运行即可，debug 也可以\n\n# 感谢\n\n-   [MapReduce 官方教程](http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html)\n-   [MapReduce 实现大矩阵乘法](https://blog.csdn.net/xyilu/article/details/9066973)\n-   [一些算法的 MapReduce 实现——矩阵分块乘法计算](https://blog.csdn.net/wzhg0508/article/details/17475573)\n-   [列行相乘法](https://www.cnblogs.com/Decmber/p/5491920.html)\n-   [高度可伸缩的稀疏矩阵乘法](https://wenku.baidu.com/view/bd3da325cf84b9d528ea7a96.html)\n","slug":"2020/article_20_hadoop-mapreduce实现矩阵乘法","published":1,"updated":"2021-01-27T04:46:28.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75i00300770zqvgsyba","content":"<h1 id=\"前言\">前言</h1>\n<p>之前关于 hadoop，也就试过一个 wordcount，这次来学习一下用 mapreduce 实现矩阵乘法，体会一下里面的思路过程。</p>\n<h1 id=\"预备\">预备</h1>\n<h2 id=\"开发环境准备\">开发环境准备</h2>\n<p>第一次开发 MapReduce 程序可以看下这边的环境准备<br>\n<a href=\"#mapreduce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">开发环境准备</a></p>\n<h2 id=\"mapreduce\">MapReduce</h2>\n<p>关于 MapReduce 这边只用到最基础的，因此了解一下<a href=\"http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html\" target=\"_blank\" rel=\"external\">wordcount</a>也就能知道最基础的思想。</p>\n<ul>\n<li>Map 将每行数据转为 key,value 的格式;</li>\n<li>shuffle 会将相同 key 的 value 放到一个数组迭代器里变为 key，values[];</li>\n<li>Reduce 读取数据并做计算处理;</li>\n</ul>\n<h2 id=\"数据存储\">数据存储</h2>\n<p>因为针对的是稀疏的大矩阵，直接按矩阵格式存储会产生很多 0，<br>\n因此这边采用了 x, y ,v 的格式，x，y 表示坐标(从 0，0 开始)，v 表示数值</p>\n<h2 id=\"测试数据\">测试数据</h2>\n<p>为了方便这边就用 int 的数据来测试，且只准备了一个小矩阵，但原理一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// matA 4x3</span><br><span class=\"line\">1  2  3</span><br><span class=\"line\">4  5  0</span><br><span class=\"line\">7  8  9</span><br><span class=\"line\">10 11 12</span><br><span class=\"line\"></span><br><span class=\"line\">// matB 3x2</span><br><span class=\"line\">10 15</span><br><span class=\"line\">0  2</span><br><span class=\"line\">11 9</span><br></pre></td></tr></table></figure>\n<p>转为 x, y, v 的格式后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// matA</span><br><span class=\"line\">0,0,1</span><br><span class=\"line\">0,1,2</span><br><span class=\"line\">0,2,3</span><br><span class=\"line\">1,0,4</span><br><span class=\"line\">1,1,5</span><br><span class=\"line\">2,0,7</span><br><span class=\"line\">2,1,8</span><br><span class=\"line\">2,2,9</span><br><span class=\"line\">3,0,10</span><br><span class=\"line\">3,1,11</span><br><span class=\"line\">3,2,12</span><br><span class=\"line\"></span><br><span class=\"line\">// matB</span><br><span class=\"line\">0,0,10</span><br><span class=\"line\">0,1,15</span><br><span class=\"line\">1,1,2</span><br><span class=\"line\">2,0,11</span><br><span class=\"line\">2,1,9</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算结果数组C</span><br><span class=\"line\">0,0\t43</span><br><span class=\"line\">0,1\t46</span><br><span class=\"line\">1,0\t40</span><br><span class=\"line\">1,1\t70</span><br><span class=\"line\">2,0\t169</span><br><span class=\"line\">2,1\t202</span><br><span class=\"line\">3,0\t232</span><br><span class=\"line\">3,1\t280</span><br></pre></td></tr></table></figure>\n<p>将两个文件存到项目根目录/input 下</p>\n<h1 id=\"三种实现\">三种实现</h1>\n<p>这边要讨论三种实现，思想上稍稍不同。</p>\n<p>下面矩阵名以 A，B，C 替代，表示 AxB=C。<br>\nA 为 mxl<br>\nB 为 lxn<br>\nC 为 mxn</p>\n<h2 id=\"基础的矩阵相乘\">基础的矩阵相乘</h2>\n<p>关于矩阵相乘，一般的就会考虑到 A 的行点乘以 B 的列为 C 的一个值，<br>\n所以最先考虑的是将 A 的第 i 行和 B 的第 i 列的数据放到一个 mapreduce 的 key 中，key 值为计算结果在 C 中的坐标。<br>\n然后考虑 A 的每行数据需要在 B 的每列用到，用到的地方都需要拷贝一份数据到对应 key 中，B 同样，就是 map 部分逻辑。<br>\n例如 A 的第一格数据 0,0,1，他会在与 B 的第一列，第二列点乘的时候用到成为 C 的第一行的一部分，就将它加到 key(0,0)(0,1)中。</p>\n<p>例如上面的测试数据，这么做以后得到的 key,value 为，就是 map 部分<br>\nvalue 的第一个区分矩阵，第二个是 A 的列\\B 的行，第三个表示值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0,0</span><br><span class=\"line\">matB,2,11</span><br><span class=\"line\">matB,0,10</span><br><span class=\"line\">matA,0,1</span><br><span class=\"line\">matA,1,2</span><br><span class=\"line\">matA,2,3</span><br><span class=\"line\"></span><br><span class=\"line\">0,1</span><br><span class=\"line\">matA,0,1</span><br><span class=\"line\">matA,1,2</span><br><span class=\"line\">matA,2,3</span><br><span class=\"line\">matB,0,15</span><br><span class=\"line\">matB,2,9</span><br><span class=\"line\">matB,1,2</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>在 reduce 阶段，将 A 的列与 B 的行相等的计算乘积并相加的到 C 的一格的结果。</p>\n<p>盗一张图，可以很清楚的表示这个过程，他这个的定义 1，1 为开始点<br>\n<img src=\"/img/mypost/mapreduce_show.jpg\" alt=\"mapreduce_show\"></p>\n<p>来看具体代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: CALC A*B</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/23 10:57 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>; <span class=\"comment\">// 矩阵名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Map部分</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName(); <span class=\"comment\">// 矩阵分别存两个文件，获取文件名判断是哪个矩阵</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// A矩阵时，遍历B的列，将值放到点乘会用到的对应key中</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXB_C; i++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回key value的结果</span></span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, lineData[<span class=\"number\">0</span>], i)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATA, lineData[<span class=\"number\">1</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// B同样</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_R; i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, i, lineData[<span class=\"number\">1</span>])),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATB ,lineData[<span class=\"number\">0</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reduce部分</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化0数组存储对应相乘的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] valA = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[MATRIXA_C];</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] valB = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[MATRIXA_C];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class=\"line\">                valA[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                valB[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将value按第二个值的index存入数组</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                String item = iterator.next().toString();</span><br><span class=\"line\">                String[] itemData = item.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(itemData[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    valA[Integer.parseInt(itemData[<span class=\"number\">1</span>])] = Integer.parseInt(itemData[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(itemData[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    valB[Integer.parseInt(itemData[<span class=\"number\">1</span>])] = Integer.parseInt(itemData[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 数组乘积求求和得到C一个位置的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class=\"line\">                result += valA[i] * valB[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 写入结果</span></span><br><span class=\"line\">            outputCollector.collect(text, <span class=\"keyword\">new</span> Text(Integer.toString(result)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是为了重复运行自动删除输出目录</span></span><br><span class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        Path outpath = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class=\"line\">            fileSystem.delete(outpath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义任务</span></span><br><span class=\"line\">        JobConf jobConf = <span class=\"keyword\">new</span> JobConf(Matrix.class);</span><br><span class=\"line\">        jobConf.setJobName(<span class=\"string\">\"matrix\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义输入输出类型</span></span><br><span class=\"line\">        jobConf.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf.setOutputValueClass(Text.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义mapreduce过程</span></span><br><span class=\"line\">        jobConf.setMapperClass(Map.class);</span><br><span class=\"line\">        jobConf.setReducerClass(Reduce.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义输入输出路径</span></span><br><span class=\"line\">        FileInputFormat.addInputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行任务</span></span><br><span class=\"line\">        JobClient.runJob(jobConf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分块矩阵乘法\">分块矩阵乘法</h2>\n<p>上面的方法有个问题是在 Map 过程中 A 的每个数据要扩大 B 列倍，B 的每个数据要扩大 A 行倍，数据较为冗余。</p>\n<p>一种优化方式是将矩阵分块。<br>\n分块的计算原理如下<br>\n<img src=\"/img/mypost/juzhengfenkuai.jpg\" alt=\"juzhengfenkuai\"></p>\n<p>分块后如果是 k 个分为一块，数据大致可以减少 k 倍，</p>\n<p>map 的时候按 C 的结果大块进行取 key，同时将需要进行对应计算的 A 列块和 B 行块划分到一起，reduce 的时候进行对应的块的矩阵计算。</p>\n<p>这边举例以 2 个为一块，矩阵切分后如下，A 为 2x2，B 为 2x1<br>\nC 即为 2x1，shuffle 后的的 key 原本会有 6 个，现在只需要 4 个，且每个数量也减少了</p>\n<p>如下将 1 2 4 5 和 10 15 0 2 （DIV *_ 2 _ 2）的块划到一起并在第一层 reduce 做计算，返回的 key 为对应行列<br>\n然后第二层 mapreduce 将计算结果合并累加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  2  | 3</span><br><span class=\"line\">4  5  | 0</span><br><span class=\"line\">---------</span><br><span class=\"line\">7  8  | 9</span><br><span class=\"line\">10 11 | 12</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">10 15</span><br><span class=\"line\">0  2</span><br><span class=\"line\">-----</span><br><span class=\"line\">11 9</span><br><span class=\"line\"></span><br><span class=\"line\">// shuffle后的数据格式</span><br><span class=\"line\">0,0,0</span><br><span class=\"line\">matB,0,0,10</span><br><span class=\"line\">matB,0,1,15</span><br><span class=\"line\">matB,1,1,2</span><br><span class=\"line\">matA,0,0,1</span><br><span class=\"line\">matA,0,1,2</span><br><span class=\"line\">matA,1,0,4</span><br><span class=\"line\">matA,1,1,5</span><br><span class=\"line\">0,1,0</span><br><span class=\"line\">matA,0,2,3</span><br><span class=\"line\">matB,2,0,11</span><br><span class=\"line\">matB,2,1,9</span><br><span class=\"line\">1,0,0</span><br><span class=\"line\">matB,0,0,10</span><br><span class=\"line\">matB,0,1,15</span><br><span class=\"line\">matB,1,1,2</span><br><span class=\"line\">matA,2,0,7</span><br><span class=\"line\">matA,2,1,8</span><br><span class=\"line\">matA,3,0,10</span><br><span class=\"line\">matA,3,1,11</span><br><span class=\"line\">1,1,0</span><br><span class=\"line\">matA,2,2,9</span><br><span class=\"line\">matA,3,2,12</span><br><span class=\"line\">matB,2,0,11</span><br><span class=\"line\">matB,2,1,9</span><br></pre></td></tr></table></figure>\n<p>上代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/24 10:29 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockMatrix</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>; <span class=\"comment\">// 每多少个分块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> row = Integer.parseInt((lineData[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> col = Integer.parseInt((lineData[<span class=\"number\">1</span>]));</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 分块后key只需要存分好的大块的位置和A列B行对应值，</span></span><br><span class=\"line\">                <span class=\"comment\">// value需要全部位置和值</span></span><br><span class=\"line\">                <span class=\"comment\">// 保证每块shuffle后数据量都只有 DIV**2 * 2</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Math.ceil(<span class=\"number\">1.0</span> * MATRIXB_C / DIV); i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, row/DIV, col/DIV, i)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s,%s\"</span>, MATA, row, col, lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Math.ceil(<span class=\"number\">1.0</span> * MATRIXA_R / DIV); i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, i, row/DIV, col/DIV)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s,%s\"</span>, MATB, row, col, lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将A和B的x,y,v分别存储</span></span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">                String value = iterator.next().toString();</span><br><span class=\"line\">                String[] data = value.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>]), Integer.parseInt(data[<span class=\"number\">3</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>]), Integer.parseInt(data[<span class=\"number\">3</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历A和B A的y和B的x相等的做乘积存入map，</span></span><br><span class=\"line\">            <span class=\"comment\">// key为A的x和B的y，value为乘积或乘积的累积</span></span><br><span class=\"line\">            HashMap&lt;String, Integer&gt; valueMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(itemA.get(<span class=\"number\">1</span>).equals(itemB.get(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                        String key = String.format(<span class=\"string\">\"%s,%s\"</span>, itemA.get(<span class=\"number\">0</span>), itemB.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!valueMap.containsKey(key)) &#123;</span><br><span class=\"line\">                            valueMap.put(key, itemA.get(<span class=\"number\">2</span>) * itemB.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            valueMap.put(key, valueMap.get(key) + itemA.get(<span class=\"number\">2</span>) * itemB.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 每个key都取一遍就是C</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: valueMap.keySet()) &#123;</span><br><span class=\"line\">                outputCollector.collect(<span class=\"keyword\">new</span> Text(key), <span class=\"keyword\">new</span> Text(Integer.toString(valueMap.get(key))));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后续需要接一个累加的mapreduce，这个与下面的列行乘法相同，见下方。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列行相乘\">列行相乘</h2>\n<p>这个的思想基本和第二种的 reduce 部分差不多，但这个不是利用 hashmap 来自己合并，而用两次 mapreduce 来实现。找到 A 的列与 B 的行值相等的两个值进行乘积作为值，取 A 的行与 B 的列作为 Key，然后将同样 key 的 value 相加就可以得到结果。</p>\n<p>这个需要分两步 MapReduce，<br>\n第一步 Mapreduce 是取相等的列行相乘得值，key 为对应的行列<br>\n第二步 MapReduce 是将相等的 key 相加，得到 C 的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/24 1:46 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LhMatrix</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将A的y作为key</span></span><br><span class=\"line\">                outputCollector.collect(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(lineData[<span class=\"number\">1</span>]),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATA, lineData[<span class=\"number\">0</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将B的x作为key</span></span><br><span class=\"line\">                outputCollector.collect(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(lineData[<span class=\"number\">0</span>]),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATB, lineData[<span class=\"number\">1</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">                String value = iterator.next().toString();</span><br><span class=\"line\">                System.out.println(value);</span><br><span class=\"line\">                String[] data = value.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// shuffle同样key的AB全排列并做乘积，</span></span><br><span class=\"line\">            <span class=\"comment\">// 返回key为C的坐标，value为一部分乘积，后续要做累加</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, itemA.get(<span class=\"number\">0</span>), itemB.get(<span class=\"number\">0</span>))),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(Integer.toString(itemA.get(<span class=\"number\">1</span>) * itemB.get(<span class=\"number\">1</span>))));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面的mapreduce做累加</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumMap</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出第一次输出的结果</span></span><br><span class=\"line\">            String[] line = text.toString().split(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">            outputCollector.collect(<span class=\"keyword\">new</span> Text(line[<span class=\"number\">0</span>]), <span class=\"keyword\">new</span> Text(line[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumReducer</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 累加</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                sum += Integer.parseInt(iterator.next().toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            outputCollector.collect(text, <span class=\"keyword\">new</span> Text(Integer.toString(sum)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这边跑了两个mapreduce</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要有第三个参数 第二次输出的路径</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        Path outpath = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class=\"line\">            fileSystem.delete(outpath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Path outpath1 = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        FileSystem fileSystem1 = outpath1.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem1.exists(outpath1))&#123;</span><br><span class=\"line\">            fileSystem1.delete(outpath1, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JobConf jobConf = <span class=\"keyword\">new</span> JobConf(LhMatrix.class);</span><br><span class=\"line\">        jobConf.setJobName(<span class=\"string\">\"block matrix\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        jobConf.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf.setOutputValueClass(Text.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        jobConf.setMapperClass(LhMatrix.Map.class);</span><br><span class=\"line\">        jobConf.setReducerClass(LhMatrix.Reduce.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.setInputPaths(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">        JobClient.runJob(jobConf);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        JobConf jobConf1 = <span class=\"keyword\">new</span> JobConf(LhMatrix.class);</span><br><span class=\"line\">        jobConf1.setJobName(<span class=\"string\">\"block matrix sum\"</span>);</span><br><span class=\"line\">        jobConf1.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf1.setOutputValueClass(Text.class);</span><br><span class=\"line\">        jobConf1.setMapperClass(LhMatrix.SumMap.class);</span><br><span class=\"line\">        jobConf1.setReducerClass(LhMatrix.SumReducer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.addInputPath(jobConf1, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf1, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">2</span>]));</span><br><span class=\"line\">        JobClient.runJob(jobConf1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\">小结</h1>\n<ul>\n<li>第一种基本的矩阵乘法，实现比较直接，主要问题在于 map 的时候数据复制了 n 份，导致 shuffle 的数据过大；另一个是每个 reduce 的时候获得的数据量为 m+n，且需要转存到内存中，可能会导致存储不下。</li>\n<li>第二种分块相乘，将数据复制分数减少了 DIV 倍，同时一个 reduce 的数据量在 DIV*_2 _ 2 的大小；麻烦的是需要控制的就是 DIV 取合适的值。</li>\n<li>第三种列行相乘，这边实现的是直接在全集上进行列行分，其实也可以在分块后进行列行，这边的每个 reduce 也是会有 m+n 的数据进来内存中，分块后再按列行划分就是步骤会多了点，也是可以的。</li>\n</ul>\n<p><strong>感觉最为关键的一步是在 map 的时候对数据进行合理的计算划分与分发，就如同这边对矩阵的分块/列行对应分发(什么作为 key)，不同的 key 划分对应的计算量和中间过程数据完全不同。划分完后的每块 reduce 的计算基本是水到渠成的事情，都是一些累加或点乘的事情。</strong></p>\n<h1 id=\"mapreduce-开发环境\">MapReduce 开发环境</h1>\n<p>这边因为本地装的 hadoop2.7.3 版本，<br>\n因此新建 maven 项目，使用了 2.7.3 的依赖包，不过运行可以不依赖本地</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开 idea 的运行配置，<br>\n新建 Application 的配置，</p>\n<p>Main class 填写如下；<br>\narguments 参数填写如下，第一个为 mvn 打包后的 jar，<br>\n第二个为运行的类，<br>\n后面两个为类的参数，表示输入输出路径(这边相对路径是相对项目根目录)<br>\n<img src=\"/img/mypost/mapreduce_configure.jpg\" alt=\"mapreduce_configure\"></p>\n<p>然后直接点运行即可，debug 也可以</p>\n<h1 id=\"感谢\">感谢</h1>\n<ul>\n<li><a href=\"http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html\" target=\"_blank\" rel=\"external\">MapReduce 官方教程</a></li>\n<li><a href=\"https://blog.csdn.net/xyilu/article/details/9066973\" target=\"_blank\" rel=\"external\">MapReduce 实现大矩阵乘法</a></li>\n<li><a href=\"https://blog.csdn.net/wzhg0508/article/details/17475573\" target=\"_blank\" rel=\"external\">一些算法的 MapReduce 实现——矩阵分块乘法计算</a></li>\n<li><a href=\"https://www.cnblogs.com/Decmber/p/5491920.html\" target=\"_blank\" rel=\"external\">列行相乘法</a></li>\n<li><a href=\"https://wenku.baidu.com/view/bd3da325cf84b9d528ea7a96.html\" target=\"_blank\" rel=\"external\">高度可伸缩的稀疏矩阵乘法</a></li>\n</ul>\n","excerpt":"","more":"<h1>前言</h1>\n<p>之前关于 hadoop，也就试过一个 wordcount，这次来学习一下用 mapreduce 实现矩阵乘法，体会一下里面的思路过程。</p>\n<h1>预备</h1>\n<h2>开发环境准备</h2>\n<p>第一次开发 MapReduce 程序可以看下这边的环境准备<br>\n<a href=\"#mapreduce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">开发环境准备</a></p>\n<h2>MapReduce</h2>\n<p>关于 MapReduce 这边只用到最基础的，因此了解一下<a href=\"http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html\">wordcount</a>也就能知道最基础的思想。</p>\n<ul>\n<li>Map 将每行数据转为 key,value 的格式;</li>\n<li>shuffle 会将相同 key 的 value 放到一个数组迭代器里变为 key，values[];</li>\n<li>Reduce 读取数据并做计算处理;</li>\n</ul>\n<h2>数据存储</h2>\n<p>因为针对的是稀疏的大矩阵，直接按矩阵格式存储会产生很多 0，<br>\n因此这边采用了 x, y ,v 的格式，x，y 表示坐标(从 0，0 开始)，v 表示数值</p>\n<h2>测试数据</h2>\n<p>为了方便这边就用 int 的数据来测试，且只准备了一个小矩阵，但原理一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// matA 4x3</span><br><span class=\"line\">1  2  3</span><br><span class=\"line\">4  5  0</span><br><span class=\"line\">7  8  9</span><br><span class=\"line\">10 11 12</span><br><span class=\"line\"></span><br><span class=\"line\">// matB 3x2</span><br><span class=\"line\">10 15</span><br><span class=\"line\">0  2</span><br><span class=\"line\">11 9</span><br></pre></td></tr></table></figure>\n<p>转为 x, y, v 的格式后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// matA</span><br><span class=\"line\">0,0,1</span><br><span class=\"line\">0,1,2</span><br><span class=\"line\">0,2,3</span><br><span class=\"line\">1,0,4</span><br><span class=\"line\">1,1,5</span><br><span class=\"line\">2,0,7</span><br><span class=\"line\">2,1,8</span><br><span class=\"line\">2,2,9</span><br><span class=\"line\">3,0,10</span><br><span class=\"line\">3,1,11</span><br><span class=\"line\">3,2,12</span><br><span class=\"line\"></span><br><span class=\"line\">// matB</span><br><span class=\"line\">0,0,10</span><br><span class=\"line\">0,1,15</span><br><span class=\"line\">1,1,2</span><br><span class=\"line\">2,0,11</span><br><span class=\"line\">2,1,9</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算结果数组C</span><br><span class=\"line\">0,0\t43</span><br><span class=\"line\">0,1\t46</span><br><span class=\"line\">1,0\t40</span><br><span class=\"line\">1,1\t70</span><br><span class=\"line\">2,0\t169</span><br><span class=\"line\">2,1\t202</span><br><span class=\"line\">3,0\t232</span><br><span class=\"line\">3,1\t280</span><br></pre></td></tr></table></figure>\n<p>将两个文件存到项目根目录/input 下</p>\n<h1>三种实现</h1>\n<p>这边要讨论三种实现，思想上稍稍不同。</p>\n<p>下面矩阵名以 A，B，C 替代，表示 AxB=C。<br>\nA 为 mxl<br>\nB 为 lxn<br>\nC 为 mxn</p>\n<h2>基础的矩阵相乘</h2>\n<p>关于矩阵相乘，一般的就会考虑到 A 的行点乘以 B 的列为 C 的一个值，<br>\n所以最先考虑的是将 A 的第 i 行和 B 的第 i 列的数据放到一个 mapreduce 的 key 中，key 值为计算结果在 C 中的坐标。<br>\n然后考虑 A 的每行数据需要在 B 的每列用到，用到的地方都需要拷贝一份数据到对应 key 中，B 同样，就是 map 部分逻辑。<br>\n例如 A 的第一格数据 0,0,1，他会在与 B 的第一列，第二列点乘的时候用到成为 C 的第一行的一部分，就将它加到 key(0,0)(0,1)中。</p>\n<p>例如上面的测试数据，这么做以后得到的 key,value 为，就是 map 部分<br>\nvalue 的第一个区分矩阵，第二个是 A 的列\\B 的行，第三个表示值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0,0</span><br><span class=\"line\">matB,2,11</span><br><span class=\"line\">matB,0,10</span><br><span class=\"line\">matA,0,1</span><br><span class=\"line\">matA,1,2</span><br><span class=\"line\">matA,2,3</span><br><span class=\"line\"></span><br><span class=\"line\">0,1</span><br><span class=\"line\">matA,0,1</span><br><span class=\"line\">matA,1,2</span><br><span class=\"line\">matA,2,3</span><br><span class=\"line\">matB,0,15</span><br><span class=\"line\">matB,2,9</span><br><span class=\"line\">matB,1,2</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>在 reduce 阶段，将 A 的列与 B 的行相等的计算乘积并相加的到 C 的一格的结果。</p>\n<p>盗一张图，可以很清楚的表示这个过程，他这个的定义 1，1 为开始点<br>\n<img src=\"/img/mypost/mapreduce_show.jpg\" alt=\"mapreduce_show\"></p>\n<p>来看具体代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: CALC A*B</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/23 10:57 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Matrix</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>; <span class=\"comment\">// 矩阵名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Map部分</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName(); <span class=\"comment\">// 矩阵分别存两个文件，获取文件名判断是哪个矩阵</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// A矩阵时，遍历B的列，将值放到点乘会用到的对应key中</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXB_C; i++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回key value的结果</span></span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, lineData[<span class=\"number\">0</span>], i)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATA, lineData[<span class=\"number\">1</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// B同样</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_R; i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, i, lineData[<span class=\"number\">1</span>])),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATB ,lineData[<span class=\"number\">0</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reduce部分</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化0数组存储对应相乘的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] valA = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[MATRIXA_C];</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] valB = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[MATRIXA_C];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class=\"line\">                valA[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                valB[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将value按第二个值的index存入数组</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                String item = iterator.next().toString();</span><br><span class=\"line\">                String[] itemData = item.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(itemData[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    valA[Integer.parseInt(itemData[<span class=\"number\">1</span>])] = Integer.parseInt(itemData[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(itemData[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    valB[Integer.parseInt(itemData[<span class=\"number\">1</span>])] = Integer.parseInt(itemData[<span class=\"number\">2</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 数组乘积求求和得到C一个位置的值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MATRIXA_C; i++) &#123;</span><br><span class=\"line\">                result += valA[i] * valB[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 写入结果</span></span><br><span class=\"line\">            outputCollector.collect(text, <span class=\"keyword\">new</span> Text(Integer.toString(result)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是为了重复运行自动删除输出目录</span></span><br><span class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        Path outpath = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class=\"line\">            fileSystem.delete(outpath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义任务</span></span><br><span class=\"line\">        JobConf jobConf = <span class=\"keyword\">new</span> JobConf(Matrix.class);</span><br><span class=\"line\">        jobConf.setJobName(<span class=\"string\">\"matrix\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义输入输出类型</span></span><br><span class=\"line\">        jobConf.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf.setOutputValueClass(Text.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义mapreduce过程</span></span><br><span class=\"line\">        jobConf.setMapperClass(Map.class);</span><br><span class=\"line\">        jobConf.setReducerClass(Reduce.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义输入输出路径</span></span><br><span class=\"line\">        FileInputFormat.addInputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 运行任务</span></span><br><span class=\"line\">        JobClient.runJob(jobConf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>分块矩阵乘法</h2>\n<p>上面的方法有个问题是在 Map 过程中 A 的每个数据要扩大 B 列倍，B 的每个数据要扩大 A 行倍，数据较为冗余。</p>\n<p>一种优化方式是将矩阵分块。<br>\n分块的计算原理如下<br>\n<img src=\"/img/mypost/juzhengfenkuai.jpg\" alt=\"juzhengfenkuai\"></p>\n<p>分块后如果是 k 个分为一块，数据大致可以减少 k 倍，</p>\n<p>map 的时候按 C 的结果大块进行取 key，同时将需要进行对应计算的 A 列块和 B 行块划分到一起，reduce 的时候进行对应的块的矩阵计算。</p>\n<p>这边举例以 2 个为一块，矩阵切分后如下，A 为 2x2，B 为 2x1<br>\nC 即为 2x1，shuffle 后的的 key 原本会有 6 个，现在只需要 4 个，且每个数量也减少了</p>\n<p>如下将 1 2 4 5 和 10 15 0 2 （DIV *_ 2 _ 2）的块划到一起并在第一层 reduce 做计算，返回的 key 为对应行列<br>\n然后第二层 mapreduce 将计算结果合并累加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  2  | 3</span><br><span class=\"line\">4  5  | 0</span><br><span class=\"line\">---------</span><br><span class=\"line\">7  8  | 9</span><br><span class=\"line\">10 11 | 12</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">10 15</span><br><span class=\"line\">0  2</span><br><span class=\"line\">-----</span><br><span class=\"line\">11 9</span><br><span class=\"line\"></span><br><span class=\"line\">// shuffle后的数据格式</span><br><span class=\"line\">0,0,0</span><br><span class=\"line\">matB,0,0,10</span><br><span class=\"line\">matB,0,1,15</span><br><span class=\"line\">matB,1,1,2</span><br><span class=\"line\">matA,0,0,1</span><br><span class=\"line\">matA,0,1,2</span><br><span class=\"line\">matA,1,0,4</span><br><span class=\"line\">matA,1,1,5</span><br><span class=\"line\">0,1,0</span><br><span class=\"line\">matA,0,2,3</span><br><span class=\"line\">matB,2,0,11</span><br><span class=\"line\">matB,2,1,9</span><br><span class=\"line\">1,0,0</span><br><span class=\"line\">matB,0,0,10</span><br><span class=\"line\">matB,0,1,15</span><br><span class=\"line\">matB,1,1,2</span><br><span class=\"line\">matA,2,0,7</span><br><span class=\"line\">matA,2,1,8</span><br><span class=\"line\">matA,3,0,10</span><br><span class=\"line\">matA,3,1,11</span><br><span class=\"line\">1,1,0</span><br><span class=\"line\">matA,2,2,9</span><br><span class=\"line\">matA,3,2,12</span><br><span class=\"line\">matB,2,0,11</span><br><span class=\"line\">matB,2,1,9</span><br></pre></td></tr></table></figure>\n<p>上代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/24 10:29 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockMatrix</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>; <span class=\"comment\">// 每多少个分块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> row = Integer.parseInt((lineData[<span class=\"number\">0</span>]));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> col = Integer.parseInt((lineData[<span class=\"number\">1</span>]));</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 分块后key只需要存分好的大块的位置和A列B行对应值，</span></span><br><span class=\"line\">                <span class=\"comment\">// value需要全部位置和值</span></span><br><span class=\"line\">                <span class=\"comment\">// 保证每块shuffle后数据量都只有 DIV**2 * 2</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Math.ceil(<span class=\"number\">1.0</span> * MATRIXB_C / DIV); i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, row/DIV, col/DIV, i)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s,%s\"</span>, MATA, row, col, lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Math.ceil(<span class=\"number\">1.0</span> * MATRIXA_R / DIV); i++) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, i, row/DIV, col/DIV)),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s,%s\"</span>, MATB, row, col, lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将A和B的x,y,v分别存储</span></span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">                String value = iterator.next().toString();</span><br><span class=\"line\">                String[] data = value.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>]), Integer.parseInt(data[<span class=\"number\">3</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>]), Integer.parseInt(data[<span class=\"number\">3</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历A和B A的y和B的x相等的做乘积存入map，</span></span><br><span class=\"line\">            <span class=\"comment\">// key为A的x和B的y，value为乘积或乘积的累积</span></span><br><span class=\"line\">            HashMap&lt;String, Integer&gt; valueMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(itemA.get(<span class=\"number\">1</span>).equals(itemB.get(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                        String key = String.format(<span class=\"string\">\"%s,%s\"</span>, itemA.get(<span class=\"number\">0</span>), itemB.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!valueMap.containsKey(key)) &#123;</span><br><span class=\"line\">                            valueMap.put(key, itemA.get(<span class=\"number\">2</span>) * itemB.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                            valueMap.put(key, valueMap.get(key) + itemA.get(<span class=\"number\">2</span>) * itemB.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 每个key都取一遍就是C</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String key: valueMap.keySet()) &#123;</span><br><span class=\"line\">                outputCollector.collect(<span class=\"keyword\">new</span> Text(key), <span class=\"keyword\">new</span> Text(Integer.toString(valueMap.get(key))));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后续需要接一个累加的mapreduce，这个与下面的列行乘法相同，见下方。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>列行相乘</h2>\n<p>这个的思想基本和第二种的 reduce 部分差不多，但这个不是利用 hashmap 来自己合并，而用两次 mapreduce 来实现。找到 A 的列与 B 的行值相等的两个值进行乘积作为值，取 A 的行与 B 的列作为 Key，然后将同样 key 的 value 相加就可以得到结果。</p>\n<p>这个需要分两步 MapReduce，<br>\n第一步 Mapreduce 是取相等的列行相乘得值，key 为对应的行列<br>\n第二步 MapReduce 是将相等的 key 相加，得到 C 的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.fs.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.mapred.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: ganjiacheng@souche.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/5/24 1:46 下午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LhMatrix</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATA = <span class=\"string\">\"matA\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String MATB = <span class=\"string\">\"matB\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_R = <span class=\"number\">4</span>; <span class=\"comment\">// A矩阵行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXA_C = <span class=\"number\">3</span>; <span class=\"comment\">// A矩阵列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MATRIXB_C = <span class=\"number\">2</span>; <span class=\"comment\">// B矩阵列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            String line = text.toString();</span><br><span class=\"line\">            String[] lineData = line.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            String fileName = ((FileSplit) reporter.getInputSplit()).getPath().getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATA.equals(fileName))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将A的y作为key</span></span><br><span class=\"line\">                outputCollector.collect(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(lineData[<span class=\"number\">1</span>]),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATA, lineData[<span class=\"number\">0</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(MATB.equals(fileName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将B的x作为key</span></span><br><span class=\"line\">                outputCollector.collect(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(lineData[<span class=\"number\">0</span>]),</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s,%s\"</span>, MATB, lineData[<span class=\"number\">1</span>], lineData[<span class=\"number\">2</span>])));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reduce</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listA = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            List&lt;List&lt;Integer&gt;&gt; listB = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">                String value = iterator.next().toString();</span><br><span class=\"line\">                System.out.println(value);</span><br><span class=\"line\">                String[] data = value.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATA.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listA.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(MATB.equals(data[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    listB.add(Arrays.asList(Integer.parseInt(data[<span class=\"number\">1</span>]), Integer.parseInt(data[<span class=\"number\">2</span>])));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// shuffle同样key的AB全排列并做乘积，</span></span><br><span class=\"line\">            <span class=\"comment\">// 返回key为C的坐标，value为一部分乘积，后续要做累加</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemA: listA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(List&lt;Integer&gt; itemB: listB) &#123;</span><br><span class=\"line\">                    outputCollector.collect(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(String.format(<span class=\"string\">\"%s,%s\"</span>, itemA.get(<span class=\"number\">0</span>), itemB.get(<span class=\"number\">0</span>))),</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> Text(Integer.toString(itemA.get(<span class=\"number\">1</span>) * itemB.get(<span class=\"number\">1</span>))));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面的mapreduce做累加</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumMap</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mapper</span>&lt;<span class=\"title\">LongWritable</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">map</span><span class=\"params\">(LongWritable longWritable, Text text, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取出第一次输出的结果</span></span><br><span class=\"line\">            String[] line = text.toString().split(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">            outputCollector.collect(<span class=\"keyword\">new</span> Text(line[<span class=\"number\">0</span>]), <span class=\"keyword\">new</span> Text(line[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SumReducer</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapReduceBase</span> <span class=\"keyword\">implements</span> <span class=\"title\">Reducer</span>&lt;<span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>, <span class=\"title\">Text</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reduce</span><span class=\"params\">(Text text, Iterator&lt;Text&gt; iterator, OutputCollector&lt;Text, Text&gt; outputCollector, Reporter reporter)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 累加</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">                sum += Integer.parseInt(iterator.next().toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            outputCollector.collect(text, <span class=\"keyword\">new</span> Text(Integer.toString(sum)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这边跑了两个mapreduce</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要有第三个参数 第二次输出的路径</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        Path outpath = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        FileSystem fileSystem = outpath.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class=\"line\">            fileSystem.delete(outpath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Path outpath1 = <span class=\"keyword\">new</span> Path(args[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        FileSystem fileSystem1 = outpath1.getFileSystem(conf);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fileSystem1.exists(outpath1))&#123;</span><br><span class=\"line\">            fileSystem1.delete(outpath1, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JobConf jobConf = <span class=\"keyword\">new</span> JobConf(LhMatrix.class);</span><br><span class=\"line\">        jobConf.setJobName(<span class=\"string\">\"block matrix\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        jobConf.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf.setOutputValueClass(Text.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        jobConf.setMapperClass(LhMatrix.Map.class);</span><br><span class=\"line\">        jobConf.setReducerClass(LhMatrix.Reduce.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.setInputPaths(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">        JobClient.runJob(jobConf);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        JobConf jobConf1 = <span class=\"keyword\">new</span> JobConf(LhMatrix.class);</span><br><span class=\"line\">        jobConf1.setJobName(<span class=\"string\">\"block matrix sum\"</span>);</span><br><span class=\"line\">        jobConf1.setOutputKeyClass(Text.class);</span><br><span class=\"line\">        jobConf1.setOutputValueClass(Text.class);</span><br><span class=\"line\">        jobConf1.setMapperClass(LhMatrix.SumMap.class);</span><br><span class=\"line\">        jobConf1.setReducerClass(LhMatrix.SumReducer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        FileInputFormat.addInputPath(jobConf1, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        FileOutputFormat.setOutputPath(jobConf1, <span class=\"keyword\">new</span> Path(args[<span class=\"number\">2</span>]));</span><br><span class=\"line\">        JobClient.runJob(jobConf1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>小结</h1>\n<ul>\n<li>第一种基本的矩阵乘法，实现比较直接，主要问题在于 map 的时候数据复制了 n 份，导致 shuffle 的数据过大；另一个是每个 reduce 的时候获得的数据量为 m+n，且需要转存到内存中，可能会导致存储不下。</li>\n<li>第二种分块相乘，将数据复制分数减少了 DIV 倍，同时一个 reduce 的数据量在 DIV*_2 _ 2 的大小；麻烦的是需要控制的就是 DIV 取合适的值。</li>\n<li>第三种列行相乘，这边实现的是直接在全集上进行列行分，其实也可以在分块后进行列行，这边的每个 reduce 也是会有 m+n 的数据进来内存中，分块后再按列行划分就是步骤会多了点，也是可以的。</li>\n</ul>\n<p><strong>感觉最为关键的一步是在 map 的时候对数据进行合理的计算划分与分发，就如同这边对矩阵的分块/列行对应分发(什么作为 key)，不同的 key 划分对应的计算量和中间过程数据完全不同。划分完后的每块 reduce 的计算基本是水到渠成的事情，都是一些累加或点乘的事情。</strong></p>\n<h1>MapReduce 开发环境</h1>\n<p>这边因为本地装的 hadoop2.7.3 版本，<br>\n因此新建 maven 项目，使用了 2.7.3 的依赖包，不过运行可以不依赖本地</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开 idea 的运行配置，<br>\n新建 Application 的配置，</p>\n<p>Main class 填写如下；<br>\narguments 参数填写如下，第一个为 mvn 打包后的 jar，<br>\n第二个为运行的类，<br>\n后面两个为类的参数，表示输入输出路径(这边相对路径是相对项目根目录)<br>\n<img src=\"/img/mypost/mapreduce_configure.jpg\" alt=\"mapreduce_configure\"></p>\n<p>然后直接点运行即可，debug 也可以</p>\n<h1>感谢</h1>\n<ul>\n<li><a href=\"http://hadoop.apache.org/docs/r1.0.4/cn/mapred_tutorial.html\">MapReduce 官方教程</a></li>\n<li><a href=\"https://blog.csdn.net/xyilu/article/details/9066973\">MapReduce 实现大矩阵乘法</a></li>\n<li><a href=\"https://blog.csdn.net/wzhg0508/article/details/17475573\">一些算法的 MapReduce 实现——矩阵分块乘法计算</a></li>\n<li><a href=\"https://www.cnblogs.com/Decmber/p/5491920.html\">列行相乘法</a></li>\n<li><a href=\"https://wenku.baidu.com/view/bd3da325cf84b9d528ea7a96.html\">高度可伸缩的稀疏矩阵乘法</a></li>\n</ul>\n"},{"title":"chrome插件 web_robot","catalog":true,"date":"2020-06-09T11:31:43.000Z","subtitle":"web_robot最新版教程","_content":"\n## 前言\n\n-   2020-08-23 暂停频繁的更新，等待新的 idea 出现\n\n这边是 web_robot 持续更新教程，\n\n对于基本的安装，导入，基础使用，请参照[V1.0 版本教程](/article/article_18_chrome插件-网页自动化/)\n\n对于 V1.0 版本以外的功能这边都会做提醒与说明,目前版本 1.8.2\n\n![插件图](/img/mypost/robot_pic.jpg)\n\n## 先看演示\n\n### 演示流程事务\n\n![演示1](/img/mypost/robot_demo1.gif)\n\n### 演示源码事务\n\n![演示2](/img/mypost/robot_demo2.gif)\n\n### 演示受控事务\n\n![演示3](/img/mypost/robot_demo3.gif)\n\n## 事务模式\n\n新建事务的时候可以选择三种事务\n\n-   流程事务\n-   源码事务\n-   受控事务\n\n### 流程事务\n\n之前 V1.0 做的就是流程事务，使用 dom 元素定义一个事件流程然后按流程执行。\n\n#### 定义事件\n\n一个流程事务会包含很多事件，每个事件由 dom 元素，动作，延时等组成。\n\n定义事件目前可以选择两种方式，\n\n一种是在插件中进行，\n\n这边包含两种筛选器，自由筛选器(V1.4.0)和标签筛选器\n\n筛选元素时可以自动对页面元素进行定位(V1.3.1)\n![robot](/img/mypost/robot_event.jpg)\n![robot](/img/mypost/robot2.jpg)\n\n点进一个事务里，选择页面添加  \n然后在页面里点击任意位置，就会获取到 dom 节点并在右上角产生以下配置\n(1.8.0) 支持可视化圈选定义事件\n![robot](/img/mypost/keshihuaquanxuan.gif)\n\n(1.7.1) 支持页面直接录制事件，支持点击事件和英文设值事件。\n\n动作目前可选择的有\n\n-   点击（click）\n-   设值（value）\n-   刷新（refresh）\n-   当页跳转（pagejump）\n-   取值 (getvalue) (v1.7.0)\n-   鼠标移入 (mouseover) (v1.6.3)\n\n设值支持参数配置(v1.4.0)，可以填写\\${参数}，  \n这样在运行事务的时候就会出现需要填写对应的参数\n\n#### 运行事务\n\n他包括以下四种运行模式\n\n-   运行\n-   轮播\n-   受控运行\n-   定时运行\n\n运行采用将事件发送到浏览器后台，浏览器后台与当前页面交互运行，使用浏览器事件还原配置的流程事件\n\n轮播采用在插件页面直接与当前打开的浏览器页面交互运行，运行完一次后立即进行下一次。\n\n受控运行(V1.2)运行与本地客户端中，插件将事件发送到浏览器后台，浏览器后台运行每个事件发送到本地客户端，客户端使用键盘鼠标还原事件。\n\n定时运行(V1.6.0)支持两种模式，定时运行需要浏览器在前台，且打开关注一个空白页。\n\n-   15:00 按每天的 15:00 运行\n-   10m 每 10 分钟运行一次\n\n### 源码事务\n\n源码事务是 V1.1 版本加的，功能为使用源码自行定义注入。\n\n源码只支持直接运行。由插件将代码注入到页面。\n\n![robot](/img/mypost/robot3.jpg)\n\n### 受控事务\n\n受控事务为 V1.3 版本加的，功能为使用本地客户端服务监听鼠标键盘事件，然后还原鼠标键盘事件。\n\n受控事务可以配置一个受控地址\n\n在进行录制操作的时候回新开 tab 打开受控地址，然后录制操作，按 ESC 结束录制\n\n受控运行受控事务的时候同样也会打开受控地址，然后会还原刚刚录制的操作。\n\n![robot](/img/mypost/robot4.jpg)\n\n## 本地客户端的开启\n\n**目前只在 mac 上做了配置，其他环境暂不知**\n\n首选本地需要有 python3 环境，获取虚拟环境\n\npy 文件下有需要的包文件 requirements.txt  \n下载包\n\n> pip install -r py/requirements.txt\n\n开启 pythonweb\n\n> python py/web.py\n\n看到监听 12580 端口即开启成功。\n\n所有受控运行，受控事务都需要依赖本地客户端的开启\n","source":"_posts/2020/article_21_chrome插件-WEB-ROBOT.md","raw":"---\ntitle: chrome插件 web_robot\ncatalog: true\ndate: 2020-06-09 19:31:43\nsubtitle: web_robot最新版教程\ntags:\n    - CHROME插件\n    - 自动化\n---\n\n## 前言\n\n-   2020-08-23 暂停频繁的更新，等待新的 idea 出现\n\n这边是 web_robot 持续更新教程，\n\n对于基本的安装，导入，基础使用，请参照[V1.0 版本教程](/article/article_18_chrome插件-网页自动化/)\n\n对于 V1.0 版本以外的功能这边都会做提醒与说明,目前版本 1.8.2\n\n![插件图](/img/mypost/robot_pic.jpg)\n\n## 先看演示\n\n### 演示流程事务\n\n![演示1](/img/mypost/robot_demo1.gif)\n\n### 演示源码事务\n\n![演示2](/img/mypost/robot_demo2.gif)\n\n### 演示受控事务\n\n![演示3](/img/mypost/robot_demo3.gif)\n\n## 事务模式\n\n新建事务的时候可以选择三种事务\n\n-   流程事务\n-   源码事务\n-   受控事务\n\n### 流程事务\n\n之前 V1.0 做的就是流程事务，使用 dom 元素定义一个事件流程然后按流程执行。\n\n#### 定义事件\n\n一个流程事务会包含很多事件，每个事件由 dom 元素，动作，延时等组成。\n\n定义事件目前可以选择两种方式，\n\n一种是在插件中进行，\n\n这边包含两种筛选器，自由筛选器(V1.4.0)和标签筛选器\n\n筛选元素时可以自动对页面元素进行定位(V1.3.1)\n![robot](/img/mypost/robot_event.jpg)\n![robot](/img/mypost/robot2.jpg)\n\n点进一个事务里，选择页面添加  \n然后在页面里点击任意位置，就会获取到 dom 节点并在右上角产生以下配置\n(1.8.0) 支持可视化圈选定义事件\n![robot](/img/mypost/keshihuaquanxuan.gif)\n\n(1.7.1) 支持页面直接录制事件，支持点击事件和英文设值事件。\n\n动作目前可选择的有\n\n-   点击（click）\n-   设值（value）\n-   刷新（refresh）\n-   当页跳转（pagejump）\n-   取值 (getvalue) (v1.7.0)\n-   鼠标移入 (mouseover) (v1.6.3)\n\n设值支持参数配置(v1.4.0)，可以填写\\${参数}，  \n这样在运行事务的时候就会出现需要填写对应的参数\n\n#### 运行事务\n\n他包括以下四种运行模式\n\n-   运行\n-   轮播\n-   受控运行\n-   定时运行\n\n运行采用将事件发送到浏览器后台，浏览器后台与当前页面交互运行，使用浏览器事件还原配置的流程事件\n\n轮播采用在插件页面直接与当前打开的浏览器页面交互运行，运行完一次后立即进行下一次。\n\n受控运行(V1.2)运行与本地客户端中，插件将事件发送到浏览器后台，浏览器后台运行每个事件发送到本地客户端，客户端使用键盘鼠标还原事件。\n\n定时运行(V1.6.0)支持两种模式，定时运行需要浏览器在前台，且打开关注一个空白页。\n\n-   15:00 按每天的 15:00 运行\n-   10m 每 10 分钟运行一次\n\n### 源码事务\n\n源码事务是 V1.1 版本加的，功能为使用源码自行定义注入。\n\n源码只支持直接运行。由插件将代码注入到页面。\n\n![robot](/img/mypost/robot3.jpg)\n\n### 受控事务\n\n受控事务为 V1.3 版本加的，功能为使用本地客户端服务监听鼠标键盘事件，然后还原鼠标键盘事件。\n\n受控事务可以配置一个受控地址\n\n在进行录制操作的时候回新开 tab 打开受控地址，然后录制操作，按 ESC 结束录制\n\n受控运行受控事务的时候同样也会打开受控地址，然后会还原刚刚录制的操作。\n\n![robot](/img/mypost/robot4.jpg)\n\n## 本地客户端的开启\n\n**目前只在 mac 上做了配置，其他环境暂不知**\n\n首选本地需要有 python3 环境，获取虚拟环境\n\npy 文件下有需要的包文件 requirements.txt  \n下载包\n\n> pip install -r py/requirements.txt\n\n开启 pythonweb\n\n> python py/web.py\n\n看到监听 12580 端口即开启成功。\n\n所有受控运行，受控事务都需要依赖本地客户端的开启\n","slug":"2020/article_21_chrome插件-WEB-ROBOT","published":1,"updated":"2021-01-27T04:46:28.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75k00330770mhl6go7u","content":"<h2 id=\"前言\">前言</h2>\n<ul>\n<li>2020-08-23 暂停频繁的更新，等待新的 idea 出现</li>\n</ul>\n<p>这边是 web_robot 持续更新教程，</p>\n<p>对于基本的安装，导入，基础使用，请参照<a href=\"/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/\">V1.0 版本教程</a></p>\n<p>对于 V1.0 版本以外的功能这边都会做提醒与说明,目前版本 1.8.2</p>\n<p><img src=\"/img/mypost/robot_pic.jpg\" alt=\"插件图\"></p>\n<h2 id=\"先看演示\">先看演示</h2>\n<h3 id=\"演示流程事务\">演示流程事务</h3>\n<p><img src=\"/img/mypost/robot_demo1.gif\" alt=\"演示1\"></p>\n<h3 id=\"演示源码事务\">演示源码事务</h3>\n<p><img src=\"/img/mypost/robot_demo2.gif\" alt=\"演示2\"></p>\n<h3 id=\"演示受控事务\">演示受控事务</h3>\n<p><img src=\"/img/mypost/robot_demo3.gif\" alt=\"演示3\"></p>\n<h2 id=\"事务模式\">事务模式</h2>\n<p>新建事务的时候可以选择三种事务</p>\n<ul>\n<li>流程事务</li>\n<li>源码事务</li>\n<li>受控事务</li>\n</ul>\n<h3 id=\"流程事务\">流程事务</h3>\n<p>之前 V1.0 做的就是流程事务，使用 dom 元素定义一个事件流程然后按流程执行。</p>\n<h4 id=\"定义事件\">定义事件</h4>\n<p>一个流程事务会包含很多事件，每个事件由 dom 元素，动作，延时等组成。</p>\n<p>定义事件目前可以选择两种方式，</p>\n<p>一种是在插件中进行，</p>\n<p>这边包含两种筛选器，自由筛选器(V1.4.0)和标签筛选器</p>\n<p>筛选元素时可以自动对页面元素进行定位(V1.3.1)<br>\n<img src=\"/img/mypost/robot_event.jpg\" alt=\"robot\"><br>\n<img src=\"/img/mypost/robot2.jpg\" alt=\"robot\"></p>\n<p>点进一个事务里，选择页面添加<br>\n然后在页面里点击任意位置，就会获取到 dom 节点并在右上角产生以下配置<br>\n(1.8.0) 支持可视化圈选定义事件<br>\n<img src=\"/img/mypost/keshihuaquanxuan.gif\" alt=\"robot\"></p>\n<p>(1.7.1) 支持页面直接录制事件，支持点击事件和英文设值事件。</p>\n<p>动作目前可选择的有</p>\n<ul>\n<li>点击（click）</li>\n<li>设值（value）</li>\n<li>刷新（refresh）</li>\n<li>当页跳转（pagejump）</li>\n<li>取值 (getvalue) (v1.7.0)</li>\n<li>鼠标移入 (mouseover) (v1.6.3)</li>\n</ul>\n<p>设值支持参数配置(v1.4.0)，可以填写${参数}，<br>\n这样在运行事务的时候就会出现需要填写对应的参数</p>\n<h4 id=\"运行事务\">运行事务</h4>\n<p>他包括以下四种运行模式</p>\n<ul>\n<li>运行</li>\n<li>轮播</li>\n<li>受控运行</li>\n<li>定时运行</li>\n</ul>\n<p>运行采用将事件发送到浏览器后台，浏览器后台与当前页面交互运行，使用浏览器事件还原配置的流程事件</p>\n<p>轮播采用在插件页面直接与当前打开的浏览器页面交互运行，运行完一次后立即进行下一次。</p>\n<p>受控运行(V1.2)运行与本地客户端中，插件将事件发送到浏览器后台，浏览器后台运行每个事件发送到本地客户端，客户端使用键盘鼠标还原事件。</p>\n<p>定时运行(V1.6.0)支持两种模式，定时运行需要浏览器在前台，且打开关注一个空白页。</p>\n<ul>\n<li>15:00 按每天的 15:00 运行</li>\n<li>10m 每 10 分钟运行一次</li>\n</ul>\n<h3 id=\"源码事务\">源码事务</h3>\n<p>源码事务是 V1.1 版本加的，功能为使用源码自行定义注入。</p>\n<p>源码只支持直接运行。由插件将代码注入到页面。</p>\n<p><img src=\"/img/mypost/robot3.jpg\" alt=\"robot\"></p>\n<h3 id=\"受控事务\">受控事务</h3>\n<p>受控事务为 V1.3 版本加的，功能为使用本地客户端服务监听鼠标键盘事件，然后还原鼠标键盘事件。</p>\n<p>受控事务可以配置一个受控地址</p>\n<p>在进行录制操作的时候回新开 tab 打开受控地址，然后录制操作，按 ESC 结束录制</p>\n<p>受控运行受控事务的时候同样也会打开受控地址，然后会还原刚刚录制的操作。</p>\n<p><img src=\"/img/mypost/robot4.jpg\" alt=\"robot\"></p>\n<h2 id=\"本地客户端的开启\">本地客户端的开启</h2>\n<p><strong>目前只在 mac 上做了配置，其他环境暂不知</strong></p>\n<p>首选本地需要有 python3 环境，获取虚拟环境</p>\n<p>py 文件下有需要的包文件 requirements.txt<br>\n下载包</p>\n<blockquote>\n<p>pip install -r py/requirements.txt</p>\n</blockquote>\n<p>开启 pythonweb</p>\n<blockquote>\n<p>python py/web.py</p>\n</blockquote>\n<p>看到监听 12580 端口即开启成功。</p>\n<p>所有受控运行，受控事务都需要依赖本地客户端的开启</p>\n","excerpt":"","more":"<h2>前言</h2>\n<ul>\n<li>2020-08-23 暂停频繁的更新，等待新的 idea 出现</li>\n</ul>\n<p>这边是 web_robot 持续更新教程，</p>\n<p>对于基本的安装，导入，基础使用，请参照<a href=\"/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/\">V1.0 版本教程</a></p>\n<p>对于 V1.0 版本以外的功能这边都会做提醒与说明,目前版本 1.8.2</p>\n<p><img src=\"/img/mypost/robot_pic.jpg\" alt=\"插件图\"></p>\n<h2>先看演示</h2>\n<h3>演示流程事务</h3>\n<p><img src=\"/img/mypost/robot_demo1.gif\" alt=\"演示1\"></p>\n<h3>演示源码事务</h3>\n<p><img src=\"/img/mypost/robot_demo2.gif\" alt=\"演示2\"></p>\n<h3>演示受控事务</h3>\n<p><img src=\"/img/mypost/robot_demo3.gif\" alt=\"演示3\"></p>\n<h2>事务模式</h2>\n<p>新建事务的时候可以选择三种事务</p>\n<ul>\n<li>流程事务</li>\n<li>源码事务</li>\n<li>受控事务</li>\n</ul>\n<h3>流程事务</h3>\n<p>之前 V1.0 做的就是流程事务，使用 dom 元素定义一个事件流程然后按流程执行。</p>\n<h4>定义事件</h4>\n<p>一个流程事务会包含很多事件，每个事件由 dom 元素，动作，延时等组成。</p>\n<p>定义事件目前可以选择两种方式，</p>\n<p>一种是在插件中进行，</p>\n<p>这边包含两种筛选器，自由筛选器(V1.4.0)和标签筛选器</p>\n<p>筛选元素时可以自动对页面元素进行定位(V1.3.1)<br>\n<img src=\"/img/mypost/robot_event.jpg\" alt=\"robot\"><br>\n<img src=\"/img/mypost/robot2.jpg\" alt=\"robot\"></p>\n<p>点进一个事务里，选择页面添加<br>\n然后在页面里点击任意位置，就会获取到 dom 节点并在右上角产生以下配置<br>\n(1.8.0) 支持可视化圈选定义事件<br>\n<img src=\"/img/mypost/keshihuaquanxuan.gif\" alt=\"robot\"></p>\n<p>(1.7.1) 支持页面直接录制事件，支持点击事件和英文设值事件。</p>\n<p>动作目前可选择的有</p>\n<ul>\n<li>点击（click）</li>\n<li>设值（value）</li>\n<li>刷新（refresh）</li>\n<li>当页跳转（pagejump）</li>\n<li>取值 (getvalue) (v1.7.0)</li>\n<li>鼠标移入 (mouseover) (v1.6.3)</li>\n</ul>\n<p>设值支持参数配置(v1.4.0)，可以填写${参数}，<br>\n这样在运行事务的时候就会出现需要填写对应的参数</p>\n<h4>运行事务</h4>\n<p>他包括以下四种运行模式</p>\n<ul>\n<li>运行</li>\n<li>轮播</li>\n<li>受控运行</li>\n<li>定时运行</li>\n</ul>\n<p>运行采用将事件发送到浏览器后台，浏览器后台与当前页面交互运行，使用浏览器事件还原配置的流程事件</p>\n<p>轮播采用在插件页面直接与当前打开的浏览器页面交互运行，运行完一次后立即进行下一次。</p>\n<p>受控运行(V1.2)运行与本地客户端中，插件将事件发送到浏览器后台，浏览器后台运行每个事件发送到本地客户端，客户端使用键盘鼠标还原事件。</p>\n<p>定时运行(V1.6.0)支持两种模式，定时运行需要浏览器在前台，且打开关注一个空白页。</p>\n<ul>\n<li>15:00 按每天的 15:00 运行</li>\n<li>10m 每 10 分钟运行一次</li>\n</ul>\n<h3>源码事务</h3>\n<p>源码事务是 V1.1 版本加的，功能为使用源码自行定义注入。</p>\n<p>源码只支持直接运行。由插件将代码注入到页面。</p>\n<p><img src=\"/img/mypost/robot3.jpg\" alt=\"robot\"></p>\n<h3>受控事务</h3>\n<p>受控事务为 V1.3 版本加的，功能为使用本地客户端服务监听鼠标键盘事件，然后还原鼠标键盘事件。</p>\n<p>受控事务可以配置一个受控地址</p>\n<p>在进行录制操作的时候回新开 tab 打开受控地址，然后录制操作，按 ESC 结束录制</p>\n<p>受控运行受控事务的时候同样也会打开受控地址，然后会还原刚刚录制的操作。</p>\n<p><img src=\"/img/mypost/robot4.jpg\" alt=\"robot\"></p>\n<h2>本地客户端的开启</h2>\n<p><strong>目前只在 mac 上做了配置，其他环境暂不知</strong></p>\n<p>首选本地需要有 python3 环境，获取虚拟环境</p>\n<p>py 文件下有需要的包文件 requirements.txt<br>\n下载包</p>\n<blockquote>\n<p>pip install -r py/requirements.txt</p>\n</blockquote>\n<p>开启 pythonweb</p>\n<blockquote>\n<p>python py/web.py</p>\n</blockquote>\n<p>看到监听 12580 端口即开启成功。</p>\n<p>所有受控运行，受控事务都需要依赖本地客户端的开启</p>\n"},{"title":"基于antlr4实现HQL的解析[格式化]","catalog":true,"date":"2020-04-30T10:24:56.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","source":"_posts/2020/article_12_基于antlr4实现HQL的解析-格式化.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[格式化]'\ncatalog: true\ndate: 2020-04-30 18:24:56\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- JAVA\n---\n\n## 前言\n\n对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。\n\n这边基于antlr4对hql的解析手动实现一个格式化的功能。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 设计思路\n\n对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。\n\n对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：\n\n1. 因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。  \n   比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。\n2. 采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});\n\n## 实现思路\n\n这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。\n\n### 主SELECT部分\n``` java\n@Override\npublic Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n    // 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上{SELECT%s}\n    // 处理with子句\n    // 遍历子select添加位置标记{SELECT%s},保存层级\n    // 格式化每个子select\n    // 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select\n    // 用当前格式化后的select替换掉标记\n}\n```\n\n### SELECT字段\n\n``` java\nprivate String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n    // 处理case when的情况\n    // 否则直接截取源sql中select的字段的字符串\n}\n```\n\n### FROM来源\n\n``` java\nprivate String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n    // 处理子select\n    // 处理table来源的情况\n}\nprivate String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n    // 处理from join的情况\n}\n```\n\n### WHERE条件\n\n``` java\nprivate void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n    // 处理where的条件\n    // 需要用到递归，树如下\n                     bool_expr\n                         |\n        bool_expr      operator     bool_expr\n            |                           |\nbool_expr.operator,bool_expr bool_expr,operator,bool_expr\n}\n```\n\n### 关键字大小写处理\n\n对于关键字的处理，本次不做详述，主要放在外面。\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。\n>HplsqlLexer lexer = new HplsqlLexer(input);\nlexer.getAllTokens();\n\n### sql注释\n\n对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。\n\n## 结果展示\n``` sql\nselect id, name from (select id,name from (select id, name from user_table ut left join test_table tt on ut.id = tt.id)) where id > 1 and id < 3\n```\n```sql\nSELECT\n    id,\n    name\nFROM\n(\n    SELECT\n        id,\n        name\n    FROM\n    (\n        SELECT\n            id,\n            name\n        FROM\n            user_table ut\n        LEFT JOIN\n            test_table tt\n        ON ut.id = tt.id\n    )\n)\nWHERE\n    id > 1 AND\n    id < 3\n```\n\n\n## 附录\n\n完整代码\n\n注释在代码中\n\n``` java\npublic class HiveSQLFormatter extends HplsqlBaseVisitor {\n    private String sourceSQL;\n\n    private String formattedSQL = \"\";\n\n    private boolean firstSelect = true;\n\n    public HiveSQLFormatter(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    //添加空占位，主要为了缩进\n    private String addKongFormat(String s, Integer n) {\n        return String.format(\"%\" + (s.length() + n * 4) + \"s\", s);\n    }\n\n    // 保存某个select的层级，key为startIndex\n    private Map<Integer, Integer> ceng = new HashMap<>();\n\n    private List<String> boolExpr = new ArrayList<>();\n    private List<String> boolExprOperator = new ArrayList<>();\n\n    // 由于where多重条件判断是树状 -> (前面条件) 操作 (最后一个条件)，扩展左子树\n    private void makeWhereExpr(HplsqlParser.Bool_exprContext bool_exprContext) {\n        if(bool_exprContext.children.size() == 3 && bool_exprContext.bool_expr().size() == 2) {\n            makeWhereExpr(bool_exprContext.bool_expr(0));\n            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(1).getStart().getStartIndex(),\n                    bool_exprContext.bool_expr(1).getStop().getStopIndex() + 1));\n            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());\n        }else{\n            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),\n                    bool_exprContext.getStop().getStopIndex()+1));\n        }\n    }\n    \n    // select from 相关\n    private String getFromTableClause(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong) {\n        StringBuilder tmpSelect = new StringBuilder();\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)\n                .map(RuleContext -> addKongFormat(subSourceSql(RuleContext), kong + 1))\n                .ifPresent(tmpSelect::append);\n        // from 子select(\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)\n                .map(ParseTree -> addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // 添加子select标记\n        Integer fromSubIndex = Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)\n                .map(ParserRuleContext -> ParserRuleContext.getStart().getStartIndex()).orElse(null);\n        if(fromSubIndex != null) {\n            tmpSelect.append(\"\\n{SELECT\").append(fromSubIndex).append(\"}\");\n            ceng.put(fromSubIndex, kong + 1);\n        }\n        // )\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)\n                .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong))\n                .ifPresent(tmpSelect::append);\n        // from别名\n        Optional.of(from_clauseContext)\n                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)\n                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);\n        return tmpSelect.toString();\n    }\n\n    //  select 字段相关\n    private String getSelectItem(HplsqlParser.Select_list_itemContext selectItem, Integer kong) {\n        AtomicReference<String> itemRes = new AtomicReference<>(\"\");\n        boolean isCase = Optional.of(selectItem)\n                .map(HplsqlParser.Select_list_itemContext::expr)\n                .map(HplsqlParser.ExprContext::expr_case)\n                .map(HplsqlParser.Expr_caseContext::expr_case_searched)\n                .map(expr_case_searchedContext -> {\n                    StringBuilder tmpbuilder = new StringBuilder();\n                    List<String> tmps = new ArrayList<>();\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)\n                            .map(ParseTree -> addKongFormat(ParseTree.getText() + \"\\n\", kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)\n                            .ifPresent(whenNodes -> {\n                                for(int i = 0; i < whenNodes.size(); i++){\n                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + \" \" +\n                                            expr_case_searchedContext.T_THEN(i).getText() + \" \" +\n                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + 2));\n                                }\n                                tmpbuilder.append(StringUtils.join(tmps.toArray(), \"\\n\"));\n                            });\n                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() +\n                                    \" \" + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-1).getText(), kong + 2))\n                            .map(tmpbuilder::append);\n                    Optional.of(expr_case_searchedContext)\n                            .map(HplsqlParser.Expr_case_searchedContext::T_END)\n                            .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText(), kong + 1))\n                            .map(tmpbuilder::append);\n                    Optional.of(selectItem)\n                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)\n                            .map(select_list_aliasContext -> \"\\n\" + addKongFormat(subSourceSql(select_list_aliasContext), kong + 1))\n                            .map(tmpbuilder::append);\n                    itemRes.set(tmpbuilder.toString());\n                    return true;\n                }).orElse(false);\n        if (!isCase) {\n            Optional.of(selectItem)\n                    .ifPresent(select_list_itemContext -> itemRes.set(addKongFormat(subSourceSql(selectItem), kong + 1)));\n        }\n        return itemRes.get();\n    }\n\n    private String getLateralView(HplsqlParser.Lateral_clause_itemContext ctx, int kong) {\n        StringBuilder lateralView = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)\n                .map(lateralView::append);\n        lateralView.append(\"\\n\");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::expr)\n                .map(ParserRuleContext -> addKongFormat(subSourceSql(ParserRuleContext), kong+1))\n                .map(lateralView::append);\n        lateralView.append(\" \");\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::ident)\n                .map(RuleContext::getText)\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)\n                .map(ParserRuleContext -> \"\\n\" + ParserRuleContext.getText())\n                .map(lateralView::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)\n                .map(ParserRuleContext -> \" \" + subSourceSql(ParserRuleContext))\n                .map(lateralView::append);\n        return lateralView.toString();\n    }\n\n    private String getFromJoin(HplsqlParser.From_join_clauseContext ctx, int kong) {\n        StringBuilder fromjoinSQL = new StringBuilder();\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)\n                .map(from_join_type_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong) + \"\\n\"\n                        + addKongFormat(ctx.T_ON().getText(), kong) + \" \"\n                        + subSourceSql(ctx.bool_expr()))\n                .map(fromjoinSQL::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.From_join_clauseContext::T_COMMA)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \"\\n\"\n                        + getFromTableClause(ctx.from_table_clause(), kong)\n                ).map(fromjoinSQL::append);\n        return fromjoinSQL.toString();\n    }\n    \n    // 使用替换模式替换{SELECTN}\n    @Override\n    public Object visitSelect_stmt(HplsqlParser.Select_stmtContext ctx) {\n        int selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();\n        // 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)\n        int gstartIndex = ctx.getStart().getStartIndex();\n        String thisSelect = String.format(\"{SELECT%s}\", gstartIndex);\n        if(!formattedSQL.contains(thisSelect) && firstSelect){\n            formattedSQL += thisSelect;\n            firstSelect = false;\n        }\n        StringBuilder fullSelect = new StringBuilder();\n        // with语句\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)\n                .map(ParserRuleContext -> ParserRuleContext.getText() + \" \")\n                .map(fullSelect::append);\n        Optional.of(ctx)\n                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)\n                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)\n                .map(cte_select_stmt_itemContexts -> StringUtils.join(cte_select_stmt_itemContexts.stream().map(\n                        item -> item.ident().getText() + \" \" +\n                                item.T_AS().getText() + \"\\n\" +\n                                item.T_OPEN_P().getText() + \"\" +\n                                String.format(\"\\n{SELECT%s}\", item.select_stmt().getStart().getStartIndex()) + \"\\n\" +\n                                item.T_CLOSE_P().getText()\n                ).toArray(), \",\\n\")).map(fullSelect::append);\n        // 遍历子select添加位置标记\n        Integer gkong = ceng.get(gstartIndex) == null ? 0: ceng.get(gstartIndex);\n        for(int i = 0; i < selectSize; i++) {\n            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();\n            fullSelect.append(String.format(\"{SELECT%s}\", startIndex));\n            ceng.put(startIndex, gkong);\n            if(i < selectSize - 1) {\n                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);\n                fullSelect.append(\"\\n\").append(addKongFormat(subSourceSql(clauseContext), gkong)).append(\"\\n\");\n            }\n        }\n        // 格式化每个子select并替换标记\n        formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", ctx.getStart().getStartIndex()), fullSelect.toString());\n        for(int i = 0; i < selectSize; i++) {\n            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();\n            Integer thisIndex = subSelect.getStart().getStartIndex();\n            Integer kong = ceng.get(thisIndex) == null ? 0: ceng.get(thisIndex);\n            StringBuilder tmpSelect = new StringBuilder();\n            // select\n            tmpSelect.append(addKongFormat(\n                    subSelect.T_SELECT().getText(),\n                    kong)).append(\"\\n\");\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_set)\n                    .map(select_list_setContext -> addKongFormat(subSourceSql(select_list_setContext)+\"\\n\", kong+1))\n                    .map(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)\n                    .map(HplsqlParser.Select_listContext::select_list_item)\n                    .map(select_list_itemContexts ->\n                            StringUtils.join(select_list_itemContexts.stream().map(\n                                    item -> getSelectItem(item, kong)).toArray(), \",\\n\") + \"\\n\").map(tmpSelect::append);\n            // from\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::T_FROM)\n                    .map(ParserRuleContext -> addKongFormat(ParserRuleContext.getText() + \"\\n\", kong))\n                    .map(tmpSelect::append);\n            // from 表\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_table_clause)\n                    .map(from_table_clauseContext -> getFromTableClause(from_table_clauseContext, kong))\n                    .map(tmpSelect::append);\n            // join语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::from_clause)\n                    .map(HplsqlParser.From_clauseContext::from_join_clause)\n                    .map(from_join_clauseContexts -> from_join_clauseContexts.size() > 0 ?\n                            StringUtils.join(from_join_clauseContexts.stream().map(\n                                    item -> getFromJoin(item, kong)).toArray(), \"\"): \"\")\n                    .ifPresent(tmpSelect::append);\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)\n                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)\n                    .map(lateral_clause_itemContexts -> \"\\n\" + StringUtils.join(lateral_clause_itemContexts.stream().map(\n                            item -> getLateralView(item, kong)).toArray(), \"\\n\"))\n                    .map(tmpSelect::append);\n            // where\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .map(HplsqlParser.Where_clauseContext::T_WHERE)\n                    .map(ParseTree -> \"\\n\" + addKongFormat(ParseTree.getText() + \"\\n\", kong))\n                    .ifPresent(tmpSelect::append);\n            // where条件\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::where_clause)\n                    .ifPresent(ParserRuleContext -> {\n                        makeWhereExpr(ParserRuleContext.bool_expr());\n                        List<String> result = new ArrayList<>();\n                        for(int t = 0; t < boolExpr.size(); t++) {\n                            if(t == boolExpr.size() -1){\n                                result.add(boolExpr.get(t));\n                            }else{\n                                result.add(boolExpr.get(t) + \" \" + boolExprOperator.get(t));\n                            }\n                        }\n                        boolExpr = new ArrayList<>();\n                        boolExprOperator = new ArrayList<>();\n                        tmpSelect.append(StringUtils.join(result.stream().map(item -> addKongFormat(item, kong + 1)).toArray(), \"\\n\"));\n                    });\n            // group by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_GROUP().getText() + \" \" + ParserRuleContext.T_BY().getText(), kong))\n                    .ifPresent(tmpSelect::append);\n            // group by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)\n                    .map(HplsqlParser.Group_by_clauseContext::expr)\n                    .map(exprContexts -> \"\\n\" + addKongFormat(StringUtils.join(exprContexts.stream().map(this::subSourceSql).toArray(), \", \"), kong + 1))\n                    .ifPresent(tmpSelect::append);\n            // having 语句\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::having_clause)\n                    .map(having_clauseContext -> \"\\n\" + addKongFormat(subSourceSql(having_clauseContext), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(ParserRuleContext.T_ORDER() + \" \" + ParserRuleContext.T_BY(), kong))\n                    .ifPresent(tmpSelect::append);\n            // order by 字段\n            Optional.of(subSelect)\n                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(\n                            RuleContext::getText).toArray(), \", \"), kong + 1))\n                    .ifPresent((tmpSelect::append));\n            // order by 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)\n                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)\n                    .map(ParserRuleContext -> ParserRuleContext.size() > 0 ? \"\\n\" + ParserRuleContext.get(0).getText() : \"\").ifPresent(tmpSelect::append);\n            // select 参数\n            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)\n                    .map(ParserRuleContext -> \"\\n\" + addKongFormat(subSourceSql(ParserRuleContext), kong))\n                    .ifPresent(tmpSelect::append);\n            formattedSQL = formattedSQL.replace(String.format(\"{SELECT%s}\", thisIndex), tmpSelect.toString());\n        }\n        return super.visitSelect_stmt(ctx);\n    }\n}\n```\n\n","slug":"2020/article_12_基于antlr4实现HQL的解析-格式化","published":1,"updated":"2021-03-15T12:03:36.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75l00340770csw0f96w","content":"<h2 id=\"前言\">前言</h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/sql-parser/</a></p>\n<h2 id=\"设计思路\">设计思路</h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2 id=\"实现思路\">实现思路</h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3 id=\"主select部分\">主SELECT部分</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select字段\">SELECT字段</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"from来源\">FROM来源</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"where条件\">WHERE条件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关键字大小写处理\">关键字大小写处理</h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3 id=\"sql注释\">sql注释</h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2 id=\"结果展示\">结果展示</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\">附录</h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2>前言</h2>\n<p>对于一般的网页上sql查询工具都会有一个功能【格式化】，对于hql的格式化市面上没有很好的直接使用的工具。</p>\n<p>这边基于antlr4对hql的解析手动实现一个格式化的功能。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\">https://github.com/webgjc/sql-parser/</a></p>\n<h2>设计思路</h2>\n<p>对于一般比较固定的语句如create，show，drop，alter等采用直接对拿到节点并带格式用字符串拼接。</p>\n<p>对于最复杂的select，因为其中包含很多嵌套，因此这边基本的想法有两种：</p>\n<ol>\n<li>因为visit树节点用的是深度优先，所以只要实现实现覆盖全部子节点的节点格式化字符并拼接起来，对于中间的嵌套，采用标记记录当前select的层级。<br>\n比如默认层级为0，进入深一层select层级+1，然后继续递归子节点，在退出select后层级-1。</li>\n<li>采用替换法，首先遍历第一层的select，找到其中全部的子select并用startIndex做唯一标记，存储标记和层级，然后在到子select时判断标记是否存在存在则用替换法替换掉全局select结果中的待标记的select，比如select * from ({select1});</li>\n</ol>\n<h2>实现思路</h2>\n<p>这边采用的还是antlr4的visit模式，并用第二种方法实现一遍select的主要核心部分。</p>\n<h3>主SELECT部分</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用全局标记判断是否为第一次进入，第一次进入也在结果字符串加上&#123;SELECT%s&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理with子句</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子select添加位置标记&#123;SELECT%s&#125;,保存层级</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化每个子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 格式化方式采用Optional判断是否存在该节点，然后拼接到当前select</span></span><br><span class=\"line\">    <span class=\"comment\">// 用当前格式化后的select替换掉标记</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>SELECT字段</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理case when的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接截取源sql中select的字段的字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>FROM来源</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子select</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理table来源的情况</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理from join的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>WHERE条件</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理where的条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要用到递归，树如下</span></span><br><span class=\"line\">                     bool_expr</span><br><span class=\"line\">                         |</span><br><span class=\"line\">        bool_expr      operator     bool_expr</span><br><span class=\"line\">            |                           |</span><br><span class=\"line\">bool_expr.operator,bool_expr bool_expr,operator,bool_expr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>关键字大小写处理</h3>\n<p>对于关键字的处理，本次不做详述，主要放在外面。<br>\n从lexer获取到全部定义的关键字，然后将sql切分，如果遇到关键字就替换。</p>\n<blockquote>\n<p>HplsqlLexer lexer = new HplsqlLexer(input);<br>\nlexer.getAllTokens();</p>\n</blockquote>\n<h3>sql注释</h3>\n<p>对于sql中存在注释的，默认会不解析到，因此格式化后的结果暂时无法还原注释。</p>\n<h2>结果展示</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">name</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> user_table ut <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> test_table tt <span class=\"keyword\">on</span> ut.id = tt.id)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"keyword\">id</span>,</span><br><span class=\"line\">        <span class=\"keyword\">name</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\">        <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span>,</span><br><span class=\"line\">            <span class=\"keyword\">name</span></span><br><span class=\"line\">        <span class=\"keyword\">FROM</span></span><br><span class=\"line\">            user_table ut</span><br><span class=\"line\">        <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">            test_table tt</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> ut.id = tt.id</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">AND</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span> &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h2>附录</h2>\n<p>完整代码</p>\n<p>注释在代码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLFormatter</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String formattedSQL = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstSelect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLFormatter</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于从源字符串中截取，主要为了不继续深入，比如select的每个字段，会有计算和各个函数包裹等，就采用直接截取源字符串</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加空占位，主要为了缩进</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">addKongFormat</span><span class=\"params\">(String s, Integer n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%\"</span> + (s.length() + n * <span class=\"number\">4</span>) + <span class=\"string\">\"s\"</span>, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存某个select的层级，key为startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; ceng = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 由于where多重条件判断是树状 -&gt; (前面条件) 操作 (最后一个条件)，扩展左子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeWhereExpr</span><span class=\"params\">(HplsqlParser.Bool_exprContext bool_exprContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bool_exprContext.children.size() == <span class=\"number\">3</span> &amp;&amp; bool_exprContext.bool_expr().size() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            makeWhereExpr(bool_exprContext.bool_expr(<span class=\"number\">0</span>));</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.bool_expr(<span class=\"number\">1</span>).getStop().getStopIndex() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            boolExprOperator.add(bool_exprContext.bool_expr_logical_operator().getText());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            boolExpr.add(sourceSQL.substring(bool_exprContext.getStart().getStartIndex(),</span><br><span class=\"line\">                    bool_exprContext.getStop().getStopIndex()+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// select from 相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromTableClause</span><span class=\"params\">(HplsqlParser.From_table_clauseContext from_clauseContext, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_table_name_clause)</span><br><span class=\"line\">                .map(RuleContext -&gt; addKongFormat(subSourceSql(RuleContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from 子select(</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_OPEN_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 添加子select标记</span></span><br><span class=\"line\">        Integer fromSubIndex = Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::select_stmt)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getStart().getStartIndex()).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fromSubIndex != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmpSelect.append(<span class=\"string\">\"\\n&#123;SELECT\"</span>).append(fromSubIndex).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">            ceng.put(fromSubIndex, kong + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// )</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::T_CLOSE_P)</span><br><span class=\"line\">                .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong))</span><br><span class=\"line\">                .ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// from别名</span></span><br><span class=\"line\">        Optional.of(from_clauseContext)</span><br><span class=\"line\">                .map(HplsqlParser.From_table_clauseContext::from_subselect_clause)</span><br><span class=\"line\">                .map(HplsqlParser.From_subselect_clauseContext::from_alias_clause)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext)).ifPresent(tmpSelect::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmpSelect.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  select 字段相关</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSelectItem</span><span class=\"params\">(HplsqlParser.Select_list_itemContext selectItem, Integer kong)</span> </span>&#123;</span><br><span class=\"line\">        AtomicReference&lt;String&gt; itemRes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isCase = Optional.of(selectItem)</span><br><span class=\"line\">                .map(HplsqlParser.Select_list_itemContext::expr)</span><br><span class=\"line\">                .map(HplsqlParser.ExprContext::expr_case)</span><br><span class=\"line\">                .map(HplsqlParser.Expr_caseContext::expr_case_searched)</span><br><span class=\"line\">                .map(expr_case_searchedContext -&gt; &#123;</span><br><span class=\"line\">                    StringBuilder tmpbuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    List&lt;String&gt; tmps = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_CASE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_WHEN)</span><br><span class=\"line\">                            .ifPresent(whenNodes -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; whenNodes.size(); i++)&#123;</span><br><span class=\"line\">                                    tmps.add(addKongFormat(expr_case_searchedContext.T_WHEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.bool_expr(i)) + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            expr_case_searchedContext.T_THEN(i).getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                            subSourceSql(expr_case_searchedContext.expr(i)), kong + <span class=\"number\">2</span>));</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                tmpbuilder.append(StringUtils.join(tmps.toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext).map(HplsqlParser.Expr_case_searchedContext::T_ELSE)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() +</span><br><span class=\"line\">                                    <span class=\"string\">\" \"</span> + expr_case_searchedContext.expr(expr_case_searchedContext.expr().size()-<span class=\"number\">1</span>).getText(), kong + <span class=\"number\">2</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(expr_case_searchedContext)</span><br><span class=\"line\">                            .map(HplsqlParser.Expr_case_searchedContext::T_END)</span><br><span class=\"line\">                            .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText(), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    Optional.of(selectItem)</span><br><span class=\"line\">                            .map(HplsqlParser.Select_list_itemContext::select_list_alias)</span><br><span class=\"line\">                            .map(select_list_aliasContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(select_list_aliasContext), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                            .map(tmpbuilder::append);</span><br><span class=\"line\">                    itemRes.set(tmpbuilder.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;).orElse(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isCase) &#123;</span><br><span class=\"line\">            Optional.of(selectItem)</span><br><span class=\"line\">                    .ifPresent(select_list_itemContext -&gt; itemRes.set(addKongFormat(subSourceSql(selectItem), kong + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemRes.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getLateralView</span><span class=\"params\">(HplsqlParser.Lateral_clause_itemContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder lateralView = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_LATERAL)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_VIEW)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::expr)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; addKongFormat(subSourceSql(ParserRuleContext), kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        lateralView.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::ident)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::T_AS)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + ParserRuleContext.getText())</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Lateral_clause_itemContext::lateral_clause_alias)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; <span class=\"string\">\" \"</span> + subSourceSql(ParserRuleContext))</span><br><span class=\"line\">                .map(lateralView::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lateralView.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFromJoin</span><span class=\"params\">(HplsqlParser.From_join_clauseContext ctx, <span class=\"keyword\">int</span> kong)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder fromjoinSQL = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::from_join_type_clause)</span><br><span class=\"line\">                .map(from_join_type_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ctx.from_join_type_clause()), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong) + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + addKongFormat(ctx.T_ON().getText(), kong) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                        + subSourceSql(ctx.bool_expr()))</span><br><span class=\"line\">                .map(fromjoinSQL::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.From_join_clauseContext::T_COMMA)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">                        + getFromTableClause(ctx.from_table_clause(), kong)</span><br><span class=\"line\">                ).map(fromjoinSQL::append);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromjoinSQL.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用替换模式替换&#123;SELECTN&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitSelect_stmt</span><span class=\"params\">(HplsqlParser.Select_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> selectSize = ctx.fullselect_stmt().fullselect_stmt_item().size();</span><br><span class=\"line\">        <span class=\"comment\">// 第一次进入添加位置标记(节点在原字符串startIndex作为唯一标志)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> gstartIndex = ctx.getStart().getStartIndex();</span><br><span class=\"line\">        String thisSelect = String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!formattedSQL.contains(thisSelect) &amp;&amp; firstSelect)&#123;</span><br><span class=\"line\">            formattedSQL += thisSelect;</span><br><span class=\"line\">            firstSelect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder fullSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">// with语句</span></span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::T_WITH)</span><br><span class=\"line\">                .map(ParserRuleContext -&gt; ParserRuleContext.getText() + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">                .map(fullSelect::append);</span><br><span class=\"line\">        Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Select_stmtContext::cte_select_stmt)</span><br><span class=\"line\">                .map(HplsqlParser.Cte_select_stmtContext::cte_select_stmt_item)</span><br><span class=\"line\">                .map(cte_select_stmt_itemContexts -&gt; StringUtils.join(cte_select_stmt_itemContexts.stream().map(</span><br><span class=\"line\">                        item -&gt; item.ident().getText() + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                                item.T_AS().getText() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_OPEN_P().getText() + <span class=\"string\">\"\"</span> +</span><br><span class=\"line\">                                String.format(<span class=\"string\">\"\\n&#123;SELECT%s&#125;\"</span>, item.select_stmt().getStart().getStartIndex()) + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                                item.T_CLOSE_P().getText()</span><br><span class=\"line\">                ).toArray(), <span class=\"string\">\",\\n\"</span>)).map(fullSelect::append);</span><br><span class=\"line\">        <span class=\"comment\">// 遍历子select添加位置标记</span></span><br><span class=\"line\">        Integer gkong = ceng.get(gstartIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(gstartIndex);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            Integer startIndex = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt().getStart().getStartIndex();</span><br><span class=\"line\">            fullSelect.append(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, startIndex));</span><br><span class=\"line\">            ceng.put(startIndex, gkong);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; selectSize - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                HplsqlParser.Fullselect_set_clauseContext clauseContext = ctx.fullselect_stmt().fullselect_set_clause(i);</span><br><span class=\"line\">                fullSelect.append(<span class=\"string\">\"\\n\"</span>).append(addKongFormat(subSourceSql(clauseContext), gkong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化每个子select并替换标记</span></span><br><span class=\"line\">        formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, ctx.getStart().getStartIndex()), fullSelect.toString());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; selectSize; i++) &#123;</span><br><span class=\"line\">            HplsqlParser.Subselect_stmtContext subSelect = ctx.fullselect_stmt().fullselect_stmt_item(i).subselect_stmt();</span><br><span class=\"line\">            Integer thisIndex = subSelect.getStart().getStartIndex();</span><br><span class=\"line\">            Integer kong = ceng.get(thisIndex) == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span>: ceng.get(thisIndex);</span><br><span class=\"line\">            StringBuilder tmpSelect = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">// select</span></span><br><span class=\"line\">            tmpSelect.append(addKongFormat(</span><br><span class=\"line\">                    subSelect.T_SELECT().getText(),</span><br><span class=\"line\">                    kong)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_set)</span><br><span class=\"line\">                    .map(select_list_setContext -&gt; addKongFormat(subSourceSql(select_list_setContext)+<span class=\"string\">\"\\n\"</span>, kong+<span class=\"number\">1</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_list)</span><br><span class=\"line\">                    .map(HplsqlParser.Select_listContext::select_list_item)</span><br><span class=\"line\">                    .map(select_list_itemContexts -&gt;</span><br><span class=\"line\">                            StringUtils.join(select_list_itemContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getSelectItem(item, kong)).toArray(), <span class=\"string\">\",\\n\"</span>) + <span class=\"string\">\"\\n\"</span>).map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::T_FROM)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; addKongFormat(ParserRuleContext.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// from 表</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_table_clause)</span><br><span class=\"line\">                    .map(from_table_clauseContext -&gt; getFromTableClause(from_table_clauseContext, kong))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// join语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::from_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.From_clauseContext::from_join_clause)</span><br><span class=\"line\">                    .map(from_join_clauseContexts -&gt; from_join_clauseContexts.size() &gt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">                            StringUtils.join(from_join_clauseContexts.stream().map(</span><br><span class=\"line\">                                    item -&gt; getFromJoin(item, kong)).toArray(), <span class=\"string\">\"\"</span>): <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::lateral_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Lateral_clauseContext::lateral_clause_item)</span><br><span class=\"line\">                    .map(lateral_clause_itemContexts -&gt; <span class=\"string\">\"\\n\"</span> + StringUtils.join(lateral_clause_itemContexts.stream().map(</span><br><span class=\"line\">                            item -&gt; getLateralView(item, kong)).toArray(), <span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">                    .map(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Where_clauseContext::T_WHERE)</span><br><span class=\"line\">                    .map(ParseTree -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParseTree.getText() + <span class=\"string\">\"\\n\"</span>, kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// where条件</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::where_clause)</span><br><span class=\"line\">                    .ifPresent(ParserRuleContext -&gt; &#123;</span><br><span class=\"line\">                        makeWhereExpr(ParserRuleContext.bool_expr());</span><br><span class=\"line\">                        List&lt;String&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; boolExpr.size(); t++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(t == boolExpr.size() -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t));</span><br><span class=\"line\">                            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                result.add(boolExpr.get(t) + <span class=\"string\">\" \"</span> + boolExprOperator.get(t));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        boolExpr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        boolExprOperator = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">                        tmpSelect.append(StringUtils.join(result.stream().map(item -&gt; addKongFormat(item, kong + <span class=\"number\">1</span>)).toArray(), <span class=\"string\">\"\\n\"</span>));</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// group by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_GROUP().getText() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY().getText(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// group by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::group_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Group_by_clauseContext::expr)</span><br><span class=\"line\">                    .map(exprContexts -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(exprContexts.stream().map(<span class=\"keyword\">this</span>::subSourceSql).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// having 语句</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::having_clause)</span><br><span class=\"line\">                    .map(having_clauseContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(having_clauseContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(ParserRuleContext.T_ORDER() + <span class=\"string\">\" \"</span> + ParserRuleContext.T_BY(), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// order by 字段</span></span><br><span class=\"line\">            Optional.of(subSelect)</span><br><span class=\"line\">                    .map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(StringUtils.join(ParserRuleContext.expr().stream().map(</span><br><span class=\"line\">                            RuleContext::getText).toArray(), <span class=\"string\">\", \"</span>), kong + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .ifPresent((tmpSelect::append));</span><br><span class=\"line\">            <span class=\"comment\">// order by 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_ASC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::order_by_clause)</span><br><span class=\"line\">                    .map(HplsqlParser.Order_by_clauseContext::T_DESC)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; ParserRuleContext.size() &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"\\n\"</span> + ParserRuleContext.get(<span class=\"number\">0</span>).getText() : <span class=\"string\">\"\"</span>).ifPresent(tmpSelect::append);</span><br><span class=\"line\">            <span class=\"comment\">// select 参数</span></span><br><span class=\"line\">            Optional.of(subSelect).map(HplsqlParser.Subselect_stmtContext::select_options)</span><br><span class=\"line\">                    .map(ParserRuleContext -&gt; <span class=\"string\">\"\\n\"</span> + addKongFormat(subSourceSql(ParserRuleContext), kong))</span><br><span class=\"line\">                    .ifPresent(tmpSelect::append);</span><br><span class=\"line\">            formattedSQL = formattedSQL.replace(String.format(<span class=\"string\">\"&#123;SELECT%s&#125;\"</span>, thisIndex), tmpSelect.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitSelect_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java虚拟机","catalog":true,"date":"2020-09-13T11:31:43.000Z","subtitle":"《深入理解java虚拟机》学习篇","_content":"\n## 前言\n\n记录总结一下 java 虚拟机的部分知识，知识主要来自于书籍《深入理解 java 虚拟机》。  \n组织形式会以小标题 & 内容解答组成。\n\n## 内存管理机制\n\n### 虚拟机内存如何划分\n\n主要有程序计数器，虚拟机栈，本地方法栈，Java 堆，方法区\n\n-   程序计数器：当前线程执行的字节码行号指示\n-   虚拟机栈：java 方法执行的信息（局部变量表，操作栈，动态链接，方法出口等）\n-   本地方法栈：native 方法执行的信息\n-   Java 堆：存放对象实例。垃圾收集主要区域，所有线程共享\n-   方法区：类信息，常量，静态变量，即时编译后代码等\n\n### 内存溢出的情况\n\n-   虚拟机栈，本地方法栈无法申请到更多内存。\n-   Java 堆没有内存完成实例分配或者堆无法扩展。\n-   方法区无法满足内存分配需求，运行时常量池超出内存限制。\n-   直接内存大于物理内存限制\n\n### 判断对象存活方法\n\n-   引用计数法：对象有引用到的地方就计数+1，引用失效-1。不能解决循环引用的问题\n-   根搜索算法：Gcroot 对象为起点，向下搜索，不可达的可判定为可回收  \n    引用分类：强引用，软引用，弱引用，虚引用\n\n### 垃圾回收算法\n\n-   标记清除法：标记所有要回收的对象，然后统计清除。（效率不高，会产生不连续内存碎片）\n-   复制算法：分两块内存，一块用完了将活着的对象复制到另一块，然后清除这一块\n-   标记-整理算法：标记清除后将对象都整理到一端\n-   分代收集算法：java 堆分为新生代(一个 Eden 区，2 个 Survivor 区，8：1：1)和老年代，新生代使用复制算法，老年代使用标记清除\n\n### 垃圾收集器\n\n-   Serial 收集器：单线程，client 模式新生代收集器\n-   ParNew 收集器：多线程版 Serial 收集器，server 模式下首选新生代收集器\n-   Parallel Scavenge 收集器：多线程新生代收集器，控制吞吐量\n-   CMS 收集器：以获取最短回收停顿时间为目标\n-   G1 收集器：基于标记-整理\n\n### 内存分配与回收策略\n\n-   对象优先在新生代 Eden 区中分配\n-   大于 PretunureSizeThreshold 设置的大对象直接在老年代中分配\n-   长期存活的对象将进入老年代，每次 minor gc 后年龄计数器+1，直到大于年龄阈值\n-   动态对象年龄判定，相同年龄对象大禹 survivor 空间一半，大于等于该年龄的对象进入老年代\n-   晋升到老年代的空间大于老年代剩余空间，则 full gc；小于的话如果允许担保失败，则 minor gc，否则 full gc；\n\n### jdk 命令行工具\n\n-   jps：列出正在允许的 java 虚拟机进程和主类名\n-   jstat：监控虚拟机各种允许状态（-gc,-class）\n-   jinfo：实时查看调整虚拟机参数\n-   jmap：生成堆转储快照\n-   jhat：分析 jmap 生成的快照\n-   jstack：生成虚拟机当前时刻线程快照\n\n### jdk 可视化工具\n\n-   jconsole\n-   jvisualvm\n\n## 虚拟机执行子系统\n","source":"_posts/2020/article_23_java虚拟机.md","raw":"---\ntitle: Java虚拟机\ncatalog: true\ndate: 2020-09-13 19:31:43\nsubtitle: 《深入理解java虚拟机》学习篇\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n记录总结一下 java 虚拟机的部分知识，知识主要来自于书籍《深入理解 java 虚拟机》。  \n组织形式会以小标题 & 内容解答组成。\n\n## 内存管理机制\n\n### 虚拟机内存如何划分\n\n主要有程序计数器，虚拟机栈，本地方法栈，Java 堆，方法区\n\n-   程序计数器：当前线程执行的字节码行号指示\n-   虚拟机栈：java 方法执行的信息（局部变量表，操作栈，动态链接，方法出口等）\n-   本地方法栈：native 方法执行的信息\n-   Java 堆：存放对象实例。垃圾收集主要区域，所有线程共享\n-   方法区：类信息，常量，静态变量，即时编译后代码等\n\n### 内存溢出的情况\n\n-   虚拟机栈，本地方法栈无法申请到更多内存。\n-   Java 堆没有内存完成实例分配或者堆无法扩展。\n-   方法区无法满足内存分配需求，运行时常量池超出内存限制。\n-   直接内存大于物理内存限制\n\n### 判断对象存活方法\n\n-   引用计数法：对象有引用到的地方就计数+1，引用失效-1。不能解决循环引用的问题\n-   根搜索算法：Gcroot 对象为起点，向下搜索，不可达的可判定为可回收  \n    引用分类：强引用，软引用，弱引用，虚引用\n\n### 垃圾回收算法\n\n-   标记清除法：标记所有要回收的对象，然后统计清除。（效率不高，会产生不连续内存碎片）\n-   复制算法：分两块内存，一块用完了将活着的对象复制到另一块，然后清除这一块\n-   标记-整理算法：标记清除后将对象都整理到一端\n-   分代收集算法：java 堆分为新生代(一个 Eden 区，2 个 Survivor 区，8：1：1)和老年代，新生代使用复制算法，老年代使用标记清除\n\n### 垃圾收集器\n\n-   Serial 收集器：单线程，client 模式新生代收集器\n-   ParNew 收集器：多线程版 Serial 收集器，server 模式下首选新生代收集器\n-   Parallel Scavenge 收集器：多线程新生代收集器，控制吞吐量\n-   CMS 收集器：以获取最短回收停顿时间为目标\n-   G1 收集器：基于标记-整理\n\n### 内存分配与回收策略\n\n-   对象优先在新生代 Eden 区中分配\n-   大于 PretunureSizeThreshold 设置的大对象直接在老年代中分配\n-   长期存活的对象将进入老年代，每次 minor gc 后年龄计数器+1，直到大于年龄阈值\n-   动态对象年龄判定，相同年龄对象大禹 survivor 空间一半，大于等于该年龄的对象进入老年代\n-   晋升到老年代的空间大于老年代剩余空间，则 full gc；小于的话如果允许担保失败，则 minor gc，否则 full gc；\n\n### jdk 命令行工具\n\n-   jps：列出正在允许的 java 虚拟机进程和主类名\n-   jstat：监控虚拟机各种允许状态（-gc,-class）\n-   jinfo：实时查看调整虚拟机参数\n-   jmap：生成堆转储快照\n-   jhat：分析 jmap 生成的快照\n-   jstack：生成虚拟机当前时刻线程快照\n\n### jdk 可视化工具\n\n-   jconsole\n-   jvisualvm\n\n## 虚拟机执行子系统\n","slug":"2020/article_23_java虚拟机","published":1,"updated":"2021-01-27T04:46:28.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75n003607708js3caay","content":"<h2 id=\"前言\">前言</h2>\n<p>记录总结一下 java 虚拟机的部分知识，知识主要来自于书籍《深入理解 java 虚拟机》。<br>\n组织形式会以小标题 &amp; 内容解答组成。</p>\n<h2 id=\"内存管理机制\">内存管理机制</h2>\n<h3 id=\"虚拟机内存如何划分\">虚拟机内存如何划分</h3>\n<p>主要有程序计数器，虚拟机栈，本地方法栈，Java 堆，方法区</p>\n<ul>\n<li>程序计数器：当前线程执行的字节码行号指示</li>\n<li>虚拟机栈：java 方法执行的信息（局部变量表，操作栈，动态链接，方法出口等）</li>\n<li>本地方法栈：native 方法执行的信息</li>\n<li>Java 堆：存放对象实例。垃圾收集主要区域，所有线程共享</li>\n<li>方法区：类信息，常量，静态变量，即时编译后代码等</li>\n</ul>\n<h3 id=\"内存溢出的情况\">内存溢出的情况</h3>\n<ul>\n<li>虚拟机栈，本地方法栈无法申请到更多内存。</li>\n<li>Java 堆没有内存完成实例分配或者堆无法扩展。</li>\n<li>方法区无法满足内存分配需求，运行时常量池超出内存限制。</li>\n<li>直接内存大于物理内存限制</li>\n</ul>\n<h3 id=\"判断对象存活方法\">判断对象存活方法</h3>\n<ul>\n<li>引用计数法：对象有引用到的地方就计数+1，引用失效-1。不能解决循环引用的问题</li>\n<li>根搜索算法：Gcroot 对象为起点，向下搜索，不可达的可判定为可回收<br>\n引用分类：强引用，软引用，弱引用，虚引用</li>\n</ul>\n<h3 id=\"垃圾回收算法\">垃圾回收算法</h3>\n<ul>\n<li>标记清除法：标记所有要回收的对象，然后统计清除。（效率不高，会产生不连续内存碎片）</li>\n<li>复制算法：分两块内存，一块用完了将活着的对象复制到另一块，然后清除这一块</li>\n<li>标记-整理算法：标记清除后将对象都整理到一端</li>\n<li>分代收集算法：java 堆分为新生代(一个 Eden 区，2 个 Survivor 区，8：1：1)和老年代，新生代使用复制算法，老年代使用标记清除</li>\n</ul>\n<h3 id=\"垃圾收集器\">垃圾收集器</h3>\n<ul>\n<li>Serial 收集器：单线程，client 模式新生代收集器</li>\n<li>ParNew 收集器：多线程版 Serial 收集器，server 模式下首选新生代收集器</li>\n<li>Parallel Scavenge 收集器：多线程新生代收集器，控制吞吐量</li>\n<li>CMS 收集器：以获取最短回收停顿时间为目标</li>\n<li>G1 收集器：基于标记-整理</li>\n</ul>\n<h3 id=\"内存分配与回收策略\">内存分配与回收策略</h3>\n<ul>\n<li>对象优先在新生代 Eden 区中分配</li>\n<li>大于 PretunureSizeThreshold 设置的大对象直接在老年代中分配</li>\n<li>长期存活的对象将进入老年代，每次 minor gc 后年龄计数器+1，直到大于年龄阈值</li>\n<li>动态对象年龄判定，相同年龄对象大禹 survivor 空间一半，大于等于该年龄的对象进入老年代</li>\n<li>晋升到老年代的空间大于老年代剩余空间，则 full gc；小于的话如果允许担保失败，则 minor gc，否则 full gc；</li>\n</ul>\n<h3 id=\"jdk-命令行工具\">jdk 命令行工具</h3>\n<ul>\n<li>jps：列出正在允许的 java 虚拟机进程和主类名</li>\n<li>jstat：监控虚拟机各种允许状态（-gc,-class）</li>\n<li>jinfo：实时查看调整虚拟机参数</li>\n<li>jmap：生成堆转储快照</li>\n<li>jhat：分析 jmap 生成的快照</li>\n<li>jstack：生成虚拟机当前时刻线程快照</li>\n</ul>\n<h3 id=\"jdk-可视化工具\">jdk 可视化工具</h3>\n<ul>\n<li>jconsole</li>\n<li>jvisualvm</li>\n</ul>\n<h2 id=\"虚拟机执行子系统\">虚拟机执行子系统</h2>\n","excerpt":"","more":"<h2>前言</h2>\n<p>记录总结一下 java 虚拟机的部分知识，知识主要来自于书籍《深入理解 java 虚拟机》。<br>\n组织形式会以小标题 &amp; 内容解答组成。</p>\n<h2>内存管理机制</h2>\n<h3>虚拟机内存如何划分</h3>\n<p>主要有程序计数器，虚拟机栈，本地方法栈，Java 堆，方法区</p>\n<ul>\n<li>程序计数器：当前线程执行的字节码行号指示</li>\n<li>虚拟机栈：java 方法执行的信息（局部变量表，操作栈，动态链接，方法出口等）</li>\n<li>本地方法栈：native 方法执行的信息</li>\n<li>Java 堆：存放对象实例。垃圾收集主要区域，所有线程共享</li>\n<li>方法区：类信息，常量，静态变量，即时编译后代码等</li>\n</ul>\n<h3>内存溢出的情况</h3>\n<ul>\n<li>虚拟机栈，本地方法栈无法申请到更多内存。</li>\n<li>Java 堆没有内存完成实例分配或者堆无法扩展。</li>\n<li>方法区无法满足内存分配需求，运行时常量池超出内存限制。</li>\n<li>直接内存大于物理内存限制</li>\n</ul>\n<h3>判断对象存活方法</h3>\n<ul>\n<li>引用计数法：对象有引用到的地方就计数+1，引用失效-1。不能解决循环引用的问题</li>\n<li>根搜索算法：Gcroot 对象为起点，向下搜索，不可达的可判定为可回收<br>\n引用分类：强引用，软引用，弱引用，虚引用</li>\n</ul>\n<h3>垃圾回收算法</h3>\n<ul>\n<li>标记清除法：标记所有要回收的对象，然后统计清除。（效率不高，会产生不连续内存碎片）</li>\n<li>复制算法：分两块内存，一块用完了将活着的对象复制到另一块，然后清除这一块</li>\n<li>标记-整理算法：标记清除后将对象都整理到一端</li>\n<li>分代收集算法：java 堆分为新生代(一个 Eden 区，2 个 Survivor 区，8：1：1)和老年代，新生代使用复制算法，老年代使用标记清除</li>\n</ul>\n<h3>垃圾收集器</h3>\n<ul>\n<li>Serial 收集器：单线程，client 模式新生代收集器</li>\n<li>ParNew 收集器：多线程版 Serial 收集器，server 模式下首选新生代收集器</li>\n<li>Parallel Scavenge 收集器：多线程新生代收集器，控制吞吐量</li>\n<li>CMS 收集器：以获取最短回收停顿时间为目标</li>\n<li>G1 收集器：基于标记-整理</li>\n</ul>\n<h3>内存分配与回收策略</h3>\n<ul>\n<li>对象优先在新生代 Eden 区中分配</li>\n<li>大于 PretunureSizeThreshold 设置的大对象直接在老年代中分配</li>\n<li>长期存活的对象将进入老年代，每次 minor gc 后年龄计数器+1，直到大于年龄阈值</li>\n<li>动态对象年龄判定，相同年龄对象大禹 survivor 空间一半，大于等于该年龄的对象进入老年代</li>\n<li>晋升到老年代的空间大于老年代剩余空间，则 full gc；小于的话如果允许担保失败，则 minor gc，否则 full gc；</li>\n</ul>\n<h3>jdk 命令行工具</h3>\n<ul>\n<li>jps：列出正在允许的 java 虚拟机进程和主类名</li>\n<li>jstat：监控虚拟机各种允许状态（-gc,-class）</li>\n<li>jinfo：实时查看调整虚拟机参数</li>\n<li>jmap：生成堆转储快照</li>\n<li>jhat：分析 jmap 生成的快照</li>\n<li>jstack：生成虚拟机当前时刻线程快照</li>\n</ul>\n<h3>jdk 可视化工具</h3>\n<ul>\n<li>jconsole</li>\n<li>jvisualvm</li>\n</ul>\n<h2>虚拟机执行子系统</h2>\n"},{"title":"Java常用类略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n这是一篇关于 Java 部分常用类的源码和实现方法的快速记录回忆篇\n\n### HashMap\n\n存储结构：数组 + 链表/红黑树  \nput：首先将 key 取 hashcode，移位 16 位得到 1-16 的数作为数组 index，对于不同的 key 一样的 index 存入一个单链表中，当数量比较大后存成一个红黑树，便于查找  \nget：首先将 key 进行一样的操作，得到 index，获取数组 index 的链表或者树然后进行遍历找到对应 key 的 value\n\n### ThreadLocal\n\n维护一个 ThreadLocalMap，当前线程 Thread 作为 key，value 为存储的值\n\n### HashSet\n\n维护一个 HashMap 实现\n\n### synchronized 和 volatile 区别\n\n-   volatile 是让当前变量到主存里去读取，synchronized 则是锁定当前变量；\n-   volatile 只能用在变量级别，synchronized 可以用在变量、方法和类；\n-   volatile 只能实现变量修改可见性，不能保证原子性，synchronized 可以保证可见性和原子性；\n-   volatile 会让线程自旋，不会阻塞。synchronized 可能会造成阻塞；\n-   volatile 变量不会被编译器优化，synchronized 会被优化；\n","source":"_posts/2020/article_24_java常用类略知一二.md","raw":"---\ntitle: Java常用类略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n这是一篇关于 Java 部分常用类的源码和实现方法的快速记录回忆篇\n\n### HashMap\n\n存储结构：数组 + 链表/红黑树  \nput：首先将 key 取 hashcode，移位 16 位得到 1-16 的数作为数组 index，对于不同的 key 一样的 index 存入一个单链表中，当数量比较大后存成一个红黑树，便于查找  \nget：首先将 key 进行一样的操作，得到 index，获取数组 index 的链表或者树然后进行遍历找到对应 key 的 value\n\n### ThreadLocal\n\n维护一个 ThreadLocalMap，当前线程 Thread 作为 key，value 为存储的值\n\n### HashSet\n\n维护一个 HashMap 实现\n\n### synchronized 和 volatile 区别\n\n-   volatile 是让当前变量到主存里去读取，synchronized 则是锁定当前变量；\n-   volatile 只能用在变量级别，synchronized 可以用在变量、方法和类；\n-   volatile 只能实现变量修改可见性，不能保证原子性，synchronized 可以保证可见性和原子性；\n-   volatile 会让线程自旋，不会阻塞。synchronized 可能会造成阻塞；\n-   volatile 变量不会被编译器优化，synchronized 会被优化；\n","slug":"2020/article_24_java常用类略知一二","published":1,"updated":"2021-01-27T04:46:28.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75p00380770peevgczw","content":"<h2 id=\"前言\">前言</h2>\n<p>这是一篇关于 Java 部分常用类的源码和实现方法的快速记录回忆篇</p>\n<h3 id=\"hashmap\">HashMap</h3>\n<p>存储结构：数组 + 链表/红黑树<br>\nput：首先将 key 取 hashcode，移位 16 位得到 1-16 的数作为数组 index，对于不同的 key 一样的 index 存入一个单链表中，当数量比较大后存成一个红黑树，便于查找<br>\nget：首先将 key 进行一样的操作，得到 index，获取数组 index 的链表或者树然后进行遍历找到对应 key 的 value</p>\n<h3 id=\"threadlocal\">ThreadLocal</h3>\n<p>维护一个 ThreadLocalMap，当前线程 Thread 作为 key，value 为存储的值</p>\n<h3 id=\"hashset\">HashSet</h3>\n<p>维护一个 HashMap 实现</p>\n<h3 id=\"synchronized-和-volatile-区别\">synchronized 和 volatile 区别</h3>\n<ul>\n<li>volatile 是让当前变量到主存里去读取，synchronized 则是锁定当前变量；</li>\n<li>volatile 只能用在变量级别，synchronized 可以用在变量、方法和类；</li>\n<li>volatile 只能实现变量修改可见性，不能保证原子性，synchronized 可以保证可见性和原子性；</li>\n<li>volatile 会让线程自旋，不会阻塞。synchronized 可能会造成阻塞；</li>\n<li>volatile 变量不会被编译器优化，synchronized 会被优化；</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>这是一篇关于 Java 部分常用类的源码和实现方法的快速记录回忆篇</p>\n<h3>HashMap</h3>\n<p>存储结构：数组 + 链表/红黑树<br>\nput：首先将 key 取 hashcode，移位 16 位得到 1-16 的数作为数组 index，对于不同的 key 一样的 index 存入一个单链表中，当数量比较大后存成一个红黑树，便于查找<br>\nget：首先将 key 进行一样的操作，得到 index，获取数组 index 的链表或者树然后进行遍历找到对应 key 的 value</p>\n<h3>ThreadLocal</h3>\n<p>维护一个 ThreadLocalMap，当前线程 Thread 作为 key，value 为存储的值</p>\n<h3>HashSet</h3>\n<p>维护一个 HashMap 实现</p>\n<h3>synchronized 和 volatile 区别</h3>\n<ul>\n<li>volatile 是让当前变量到主存里去读取，synchronized 则是锁定当前变量；</li>\n<li>volatile 只能用在变量级别，synchronized 可以用在变量、方法和类；</li>\n<li>volatile 只能实现变量修改可见性，不能保证原子性，synchronized 可以保证可见性和原子性；</li>\n<li>volatile 会让线程自旋，不会阻塞。synchronized 可能会造成阻塞；</li>\n<li>volatile 变量不会被编译器优化，synchronized 会被优化；</li>\n</ul>\n"},{"title":"改版博客我的部分","catalog":true,"date":"2020-08-23T11:31:43.000Z","subtitle":"这是一次不大不小的改版","_content":"\n## 前言\n\n原博客主要定位为技术博客，因此都是一些技术分享上的文章；\n\n本次将引入很多其他元素，博客不仅仅记录下技术上的改变，也能反映音乐，阅读，理财，生活等方面的变化，因此主目录部分还是原来的文章，在侧边栏将 FRIENDS 改为了 MINE，同时定向到了各个不同的版块；\n\n为了留下更多自己的足迹，为了更好的自己；\n\n## [我的音乐](/article/music_1_音乐篇/)\n\n音乐主要还是平常敲代码就喜欢听纯音乐，\n听到好听的便可以记录下来。\n\n另外也学过一点钢琴，有兴致了谈两手也可以留存下来\n\n```\n音乐自得其乐\n1. 分享音乐与感受\n2. 钢琴学习与弹奏\n```\n\n## [我的阅读](/book/)\n\n工作以后阅读确实少了不少，拿不起书或者 kindle\n\n这个版本和上次的没变，但也希望不限制阅读种类，  \n如技术类的数据也可以留下印记\n\n另外可以在部分阅读后实时记录\n\n## [我的理财](/article/money_1_理财篇/)\n\n钱还是最重要的，除了工作收入感觉也只有这些被动收入可以补贴一下了\n\n```\n我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；\n本栏是一些理财思路和方法的整合，主要包含几个方向\n1. 基金买入卖出及其来源依据或直觉依据\n2. 在一些节点回顾性总结\n3. 发现或总结一些方法论\n4. 理财工具，分析工具的创造\n5. 数据挖掘和分析\n6. 分享一些这个方向的文章\n```\n\n## [我的生活](/article/life_1_生活篇/)\n\n虽然活的不那么精彩，但也值得自己回忆与记录生活的点点滴滴\n\n```\n本栏主要用于分享人生大小事和体悟\n人生总是在不断放下，但也要好好记录\n1. 突发奇想\n2. 吃喝玩乐\n3. 生活变动\n4. 人生节点\n5. 朝花朝拾\n```\n","source":"_posts/2020/article_22_改版我的部分.md","raw":"---\ntitle: 改版博客我的部分\ncatalog: true\ndate: 2020-08-23 19:31:43\nsubtitle: 这是一次不大不小的改版\ntags:\n    - 其他\n---\n\n## 前言\n\n原博客主要定位为技术博客，因此都是一些技术分享上的文章；\n\n本次将引入很多其他元素，博客不仅仅记录下技术上的改变，也能反映音乐，阅读，理财，生活等方面的变化，因此主目录部分还是原来的文章，在侧边栏将 FRIENDS 改为了 MINE，同时定向到了各个不同的版块；\n\n为了留下更多自己的足迹，为了更好的自己；\n\n## [我的音乐](/article/music_1_音乐篇/)\n\n音乐主要还是平常敲代码就喜欢听纯音乐，\n听到好听的便可以记录下来。\n\n另外也学过一点钢琴，有兴致了谈两手也可以留存下来\n\n```\n音乐自得其乐\n1. 分享音乐与感受\n2. 钢琴学习与弹奏\n```\n\n## [我的阅读](/book/)\n\n工作以后阅读确实少了不少，拿不起书或者 kindle\n\n这个版本和上次的没变，但也希望不限制阅读种类，  \n如技术类的数据也可以留下印记\n\n另外可以在部分阅读后实时记录\n\n## [我的理财](/article/money_1_理财篇/)\n\n钱还是最重要的，除了工作收入感觉也只有这些被动收入可以补贴一下了\n\n```\n我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；\n本栏是一些理财思路和方法的整合，主要包含几个方向\n1. 基金买入卖出及其来源依据或直觉依据\n2. 在一些节点回顾性总结\n3. 发现或总结一些方法论\n4. 理财工具，分析工具的创造\n5. 数据挖掘和分析\n6. 分享一些这个方向的文章\n```\n\n## [我的生活](/article/life_1_生活篇/)\n\n虽然活的不那么精彩，但也值得自己回忆与记录生活的点点滴滴\n\n```\n本栏主要用于分享人生大小事和体悟\n人生总是在不断放下，但也要好好记录\n1. 突发奇想\n2. 吃喝玩乐\n3. 生活变动\n4. 人生节点\n5. 朝花朝拾\n```\n","slug":"2020/article_22_改版我的部分","published":1,"updated":"2021-01-27T04:46:28.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75r003a07704obnt3eh","content":"<h2 id=\"前言\">前言</h2>\n<p>原博客主要定位为技术博客，因此都是一些技术分享上的文章；</p>\n<p>本次将引入很多其他元素，博客不仅仅记录下技术上的改变，也能反映音乐，阅读，理财，生活等方面的变化，因此主目录部分还是原来的文章，在侧边栏将 FRIENDS 改为了 MINE，同时定向到了各个不同的版块；</p>\n<p>为了留下更多自己的足迹，为了更好的自己；</p>\n<h2 id=\"我的音乐\"><a href=\"/article/music_1_%E9%9F%B3%E4%B9%90%E7%AF%87/\">我的音乐</a></h2>\n<p>音乐主要还是平常敲代码就喜欢听纯音乐，<br>\n听到好听的便可以记录下来。</p>\n<p>另外也学过一点钢琴，有兴致了谈两手也可以留存下来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">音乐自得其乐</span><br><span class=\"line\">1. 分享音乐与感受</span><br><span class=\"line\">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure>\n<h2 id=\"我的阅读\"><a href=\"/book/\">我的阅读</a></h2>\n<p>工作以后阅读确实少了不少，拿不起书或者 kindle</p>\n<p>这个版本和上次的没变，但也希望不限制阅读种类，<br>\n如技术类的数据也可以留下印记</p>\n<p>另外可以在部分阅读后实时记录</p>\n<h2 id=\"我的理财\"><a href=\"/article/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/\">我的理财</a></h2>\n<p>钱还是最重要的，除了工作收入感觉也只有这些被动收入可以补贴一下了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class=\"line\">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class=\"line\">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class=\"line\">2. 在一些节点回顾性总结</span><br><span class=\"line\">3. 发现或总结一些方法论</span><br><span class=\"line\">4. 理财工具，分析工具的创造</span><br><span class=\"line\">5. 数据挖掘和分析</span><br><span class=\"line\">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure>\n<h2 id=\"我的生活\"><a href=\"/article/life_1_%E7%94%9F%E6%B4%BB%E7%AF%87/\">我的生活</a></h2>\n<p>虽然活的不那么精彩，但也值得自己回忆与记录生活的点点滴滴</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本栏主要用于分享人生大小事和体悟</span><br><span class=\"line\">人生总是在不断放下，但也要好好记录</span><br><span class=\"line\">1. 突发奇想</span><br><span class=\"line\">2. 吃喝玩乐</span><br><span class=\"line\">3. 生活变动</span><br><span class=\"line\">4. 人生节点</span><br><span class=\"line\">5. 朝花朝拾</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2>前言</h2>\n<p>原博客主要定位为技术博客，因此都是一些技术分享上的文章；</p>\n<p>本次将引入很多其他元素，博客不仅仅记录下技术上的改变，也能反映音乐，阅读，理财，生活等方面的变化，因此主目录部分还是原来的文章，在侧边栏将 FRIENDS 改为了 MINE，同时定向到了各个不同的版块；</p>\n<p>为了留下更多自己的足迹，为了更好的自己；</p>\n<h2><a href=\"/article/music_1_%E9%9F%B3%E4%B9%90%E7%AF%87/\">我的音乐</a></h2>\n<p>音乐主要还是平常敲代码就喜欢听纯音乐，<br>\n听到好听的便可以记录下来。</p>\n<p>另外也学过一点钢琴，有兴致了谈两手也可以留存下来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">音乐自得其乐</span><br><span class=\"line\">1. 分享音乐与感受</span><br><span class=\"line\">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure>\n<h2><a href=\"/book/\">我的阅读</a></h2>\n<p>工作以后阅读确实少了不少，拿不起书或者 kindle</p>\n<p>这个版本和上次的没变，但也希望不限制阅读种类，<br>\n如技术类的数据也可以留下印记</p>\n<p>另外可以在部分阅读后实时记录</p>\n<h2><a href=\"/article/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/\">我的理财</a></h2>\n<p>钱还是最重要的，除了工作收入感觉也只有这些被动收入可以补贴一下了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class=\"line\">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class=\"line\">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class=\"line\">2. 在一些节点回顾性总结</span><br><span class=\"line\">3. 发现或总结一些方法论</span><br><span class=\"line\">4. 理财工具，分析工具的创造</span><br><span class=\"line\">5. 数据挖掘和分析</span><br><span class=\"line\">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure>\n<h2><a href=\"/article/life_1_%E7%94%9F%E6%B4%BB%E7%AF%87/\">我的生活</a></h2>\n<p>虽然活的不那么精彩，但也值得自己回忆与记录生活的点点滴滴</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本栏主要用于分享人生大小事和体悟</span><br><span class=\"line\">人生总是在不断放下，但也要好好记录</span><br><span class=\"line\">1. 突发奇想</span><br><span class=\"line\">2. 吃喝玩乐</span><br><span class=\"line\">3. 生活变动</span><br><span class=\"line\">4. 人生节点</span><br><span class=\"line\">5. 朝花朝拾</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n本文涉及 spring 的相关实现和源码解读\n\n###\n","source":"_posts/2020/article_25_spring略知一二.md","raw":"---\ntitle: Spring略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n本文涉及 spring 的相关实现和源码解读\n\n###\n","slug":"2020/article_25_spring略知一二","published":1,"updated":"2021-01-27T04:46:28.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75s003c0770gtg2y3k9","content":"<h2 id=\"前言\">前言</h2>\n<p>本文涉及 spring 的相关实现和源码解读</p>\n<h3 id=\"\"></h3>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文涉及 spring 的相关实现和源码解读</p>\n<h3></h3>\n"},{"title":"Mysql略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n# 前言\n\n本文主要为 mysql 相关知识\n\n### 脏读，不可重复读，幻读\n\n-   脏读：某个事务更新数据没有提交，另一个事务已经读取了数据\n-   不可重复读：一个事务两次查询数据不一致，因为两次查询中间另一个事务更新了数据\n-   幻读：一个事务两次查询数据总量不一致，因为两次中间另一个事务插入了数据\n\n### 隔离级别\n\n| 隔离级别                   | 脏读 | 不可重复读 | 幻读 |\n| -------------------------- | :--: | :--------: | :--: |\n| 读未提交(Read Uncommitted) |  √   |     √      |  √   |\n| 读已提交(Read Committed)   |  ×   |     √      |  √   |\n| 可重复读(Repeatable Read)  |  ×   |     ×      |  √   |\n| 序列化(Serializable)       |  ×   |     ×      |  ×   |\n\n### Innodb 锁模式\n\n-   共享锁：允许一个事务去读一行，阻止其他事务获得相同数据集的写锁\n-   排他锁：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和写锁。\n\n### Innodb 加锁模式\n\n-   意向锁是 innodb 自动加的\n-   update，insert，delete，innodb 会加上排他锁\n-   普通 select 不会加锁，用到了索引的查询在索引上加行锁，否则加表锁，加锁语句如下\n    -   共享锁：LOCK IN SHARE MODE\n    -   排他锁：FOR UPDATE\n\n### 索引 B+ 树特点\n\n-   有 n 个子树的非叶子节点包括 n 个关键字，不存数据只用作索引，所有数据都存在叶子节点。\n-   所有叶子节点包含所有关键字信息，且叶子节点关键字自小而大连接。\n-   通常在 b+树上有两个头指针，一个指向根节点，一个指向关键字最小的叶子节点。\n-   同一个数据会在不同节点重复出现，根节点最大元素就是 b+树最大元素。\n\n### B+树和 B 树区别\n\n-   B 树每个节点都存储数据，B+树只有叶子节点存储数据，所有的叶子结点使用链表相连\n-   B 树具有 n 个关键字的节点包含（n+1）棵子树，B+树包含（n）棵子树。\n-   B+ 树每次查找都是从根节点到叶子节点的路径\n\n### 主键索引和一般索引的区别\n\n主键索引叶子节点存放的是整行数据，非主键索引叶子节点存放的是主键的值，  \n非主键索引需要多查询一次 ID 索引树\n","source":"_posts/2020/article_28_mysql略知一二.md","raw":"---\ntitle: Mysql略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n# 前言\n\n本文主要为 mysql 相关知识\n\n### 脏读，不可重复读，幻读\n\n-   脏读：某个事务更新数据没有提交，另一个事务已经读取了数据\n-   不可重复读：一个事务两次查询数据不一致，因为两次查询中间另一个事务更新了数据\n-   幻读：一个事务两次查询数据总量不一致，因为两次中间另一个事务插入了数据\n\n### 隔离级别\n\n| 隔离级别                   | 脏读 | 不可重复读 | 幻读 |\n| -------------------------- | :--: | :--------: | :--: |\n| 读未提交(Read Uncommitted) |  √   |     √      |  √   |\n| 读已提交(Read Committed)   |  ×   |     √      |  √   |\n| 可重复读(Repeatable Read)  |  ×   |     ×      |  √   |\n| 序列化(Serializable)       |  ×   |     ×      |  ×   |\n\n### Innodb 锁模式\n\n-   共享锁：允许一个事务去读一行，阻止其他事务获得相同数据集的写锁\n-   排他锁：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和写锁。\n\n### Innodb 加锁模式\n\n-   意向锁是 innodb 自动加的\n-   update，insert，delete，innodb 会加上排他锁\n-   普通 select 不会加锁，用到了索引的查询在索引上加行锁，否则加表锁，加锁语句如下\n    -   共享锁：LOCK IN SHARE MODE\n    -   排他锁：FOR UPDATE\n\n### 索引 B+ 树特点\n\n-   有 n 个子树的非叶子节点包括 n 个关键字，不存数据只用作索引，所有数据都存在叶子节点。\n-   所有叶子节点包含所有关键字信息，且叶子节点关键字自小而大连接。\n-   通常在 b+树上有两个头指针，一个指向根节点，一个指向关键字最小的叶子节点。\n-   同一个数据会在不同节点重复出现，根节点最大元素就是 b+树最大元素。\n\n### B+树和 B 树区别\n\n-   B 树每个节点都存储数据，B+树只有叶子节点存储数据，所有的叶子结点使用链表相连\n-   B 树具有 n 个关键字的节点包含（n+1）棵子树，B+树包含（n）棵子树。\n-   B+ 树每次查找都是从根节点到叶子节点的路径\n\n### 主键索引和一般索引的区别\n\n主键索引叶子节点存放的是整行数据，非主键索引叶子节点存放的是主键的值，  \n非主键索引需要多查询一次 ID 索引树\n","slug":"2020/article_28_mysql略知一二","published":1,"updated":"2021-01-27T04:46:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75u003e0770glpdlteq","content":"<h1 id=\"前言\">前言</h1>\n<p>本文主要为 mysql 相关知识</p>\n<h3 id=\"脏读不可重复读幻读\">脏读，不可重复读，幻读</h3>\n<ul>\n<li>脏读：某个事务更新数据没有提交，另一个事务已经读取了数据</li>\n<li>不可重复读：一个事务两次查询数据不一致，因为两次查询中间另一个事务更新了数据</li>\n<li>幻读：一个事务两次查询数据总量不一致，因为两次中间另一个事务插入了数据</li>\n</ul>\n<h3 id=\"隔离级别\">隔离级别</h3>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读未提交(Read Uncommitted)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>读已提交(Read Committed)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>可重复读(Repeatable Read)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>序列化(Serializable)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"innodb-锁模式\">Innodb 锁模式</h3>\n<ul>\n<li>共享锁：允许一个事务去读一行，阻止其他事务获得相同数据集的写锁</li>\n<li>排他锁：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和写锁。</li>\n</ul>\n<h3 id=\"innodb-加锁模式\">Innodb 加锁模式</h3>\n<ul>\n<li>意向锁是 innodb 自动加的</li>\n<li>update，insert，delete，innodb 会加上排他锁</li>\n<li>普通 select 不会加锁，用到了索引的查询在索引上加行锁，否则加表锁，加锁语句如下\n<ul>\n<li>共享锁：LOCK IN SHARE MODE</li>\n<li>排他锁：FOR UPDATE</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引-b-树特点\">索引 B+ 树特点</h3>\n<ul>\n<li>有 n 个子树的非叶子节点包括 n 个关键字，不存数据只用作索引，所有数据都存在叶子节点。</li>\n<li>所有叶子节点包含所有关键字信息，且叶子节点关键字自小而大连接。</li>\n<li>通常在 b+树上有两个头指针，一个指向根节点，一个指向关键字最小的叶子节点。</li>\n<li>同一个数据会在不同节点重复出现，根节点最大元素就是 b+树最大元素。</li>\n</ul>\n<h3 id=\"b树和-b-树区别\">B+树和 B 树区别</h3>\n<ul>\n<li>B 树每个节点都存储数据，B+树只有叶子节点存储数据，所有的叶子结点使用链表相连</li>\n<li>B 树具有 n 个关键字的节点包含（n+1）棵子树，B+树包含（n）棵子树。</li>\n<li>B+ 树每次查找都是从根节点到叶子节点的路径</li>\n</ul>\n<h3 id=\"主键索引和一般索引的区别\">主键索引和一般索引的区别</h3>\n<p>主键索引叶子节点存放的是整行数据，非主键索引叶子节点存放的是主键的值，<br>\n非主键索引需要多查询一次 ID 索引树</p>\n","excerpt":"","more":"<h1>前言</h1>\n<p>本文主要为 mysql 相关知识</p>\n<h3>脏读，不可重复读，幻读</h3>\n<ul>\n<li>脏读：某个事务更新数据没有提交，另一个事务已经读取了数据</li>\n<li>不可重复读：一个事务两次查询数据不一致，因为两次查询中间另一个事务更新了数据</li>\n<li>幻读：一个事务两次查询数据总量不一致，因为两次中间另一个事务插入了数据</li>\n</ul>\n<h3>隔离级别</h3>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读未提交(Read Uncommitted)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>读已提交(Read Committed)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>可重复读(Repeatable Read)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td>序列化(Serializable)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3>Innodb 锁模式</h3>\n<ul>\n<li>共享锁：允许一个事务去读一行，阻止其他事务获得相同数据集的写锁</li>\n<li>排他锁：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和写锁。</li>\n</ul>\n<h3>Innodb 加锁模式</h3>\n<ul>\n<li>意向锁是 innodb 自动加的</li>\n<li>update，insert，delete，innodb 会加上排他锁</li>\n<li>普通 select 不会加锁，用到了索引的查询在索引上加行锁，否则加表锁，加锁语句如下\n<ul>\n<li>共享锁：LOCK IN SHARE MODE</li>\n<li>排他锁：FOR UPDATE</li>\n</ul>\n</li>\n</ul>\n<h3>索引 B+ 树特点</h3>\n<ul>\n<li>有 n 个子树的非叶子节点包括 n 个关键字，不存数据只用作索引，所有数据都存在叶子节点。</li>\n<li>所有叶子节点包含所有关键字信息，且叶子节点关键字自小而大连接。</li>\n<li>通常在 b+树上有两个头指针，一个指向根节点，一个指向关键字最小的叶子节点。</li>\n<li>同一个数据会在不同节点重复出现，根节点最大元素就是 b+树最大元素。</li>\n</ul>\n<h3>B+树和 B 树区别</h3>\n<ul>\n<li>B 树每个节点都存储数据，B+树只有叶子节点存储数据，所有的叶子结点使用链表相连</li>\n<li>B 树具有 n 个关键字的节点包含（n+1）棵子树，B+树包含（n）棵子树。</li>\n<li>B+ 树每次查找都是从根节点到叶子节点的路径</li>\n</ul>\n<h3>主键索引和一般索引的区别</h3>\n<p>主键索引叶子节点存放的是整行数据，非主键索引叶子节点存放的是主键的值，<br>\n非主键索引需要多查询一次 ID 索引树</p>\n"},{"title":"网络略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n本文主要为网络的基础知识\n\n### tcp 三次握手建立连接\n\n-   连接端发起一个 SYN 消息，SEQ=x\n-   被连端收到后返回 SYN+ACK 消息，SEQ=y, ACK=x+1\n-   连接端收到消息返回 ACK 消息，ACK=y+1\n\n两端都进入 Established 状态\n\n### tcp 四次挥手断开连接\n\n-   发起端发起一个 FIN 的消息，SEQ=x\n-   接收端收到后返回 ACK 消息，表示准备断开连接，SEQ=y, ACK=x+1\n-   接收端准备完毕，发送 FIN 消息，SEQ=y+1, ACK=x+1\n-   发起端收到后返回 ACK 消息，SEQ=x+1, ACK=y+2\n\n### tcp 建立连接后的数据传输\n\n-   发送端发起一个数据包，SEQ=x，数据为 100B\n-   接受端收到数据消息返回 ACK = x + 100 + 1\n-   发送端收到后继续发送，SEQ=x+100+1，数据为 100B\n-   接受端收到后返回 ACK = x + 200 + 2\n\n### tcp 连接的可靠性\n\n-   tcp 会将数据截成最合适发送的数据块\n-   当发送端发出一段数据后，会启动定时器等待回应，如果没有回应，会重新发送\n-   tcp 会保持首部和数据的检验和\n-   tcp 会将乱序的数据进行重新排序，返回应用层原来顺序\n-   tcp 能控制流量，每一方都有固定大小的缓冲空间\n\n### tcp 如何进行拥塞控制\n\n在拥塞控制中，发送方维持一个叫做拥塞窗口 cwnd 的状态变量，根据拥塞程度动态变化。  \n慢启动算法：一开始不发送大量数据，先试探网络拥塞程度，由小到大增加窗口，每个传输轮次后 cwnd 加倍\n拥塞避免算法：采用线性逐渐增加拥塞窗口 cwnd\n慢启动阀门（ssthresh）：\n\n-   cwnd < ssthresh 慢启动算法\n-   cwnd > ssthresh 拥塞避免算法\n\n只要发现拥塞，将 ssthresh 设为一半，cwnd 设为 1\n\n### tcp 流量控制\n\n接收端在确认应答发送 ACK 报文的时候，将自己的即时窗口大小 rwnd 写入 TCP 头部 16 位字段的窗口大小，  \n发送端根据 ACK 报文里的窗口大小改变自己的发送速度。越大表示接收端缓冲区剩余空间越大，网络吞吐量越大。\n\n\n### 网络层级，http和https区别\n\n网络五层结构为 应用层(http) - 传输层(tcp) - 网络层(ip) - 数据链路层 - 物理层\nhttps是在应用层和传输层中间添加一个ssl层\n\n### http2.0特性\n\n- 头部压缩：使用HPACK算法进行压缩\n- 二进制格式：使用更加靠近TCP/IP的二进制格式，提升解析效率\n- 强化安全：跑在https上\n- 多路复用：一个连接有多个请求\n\n","source":"_posts/2020/article_27_网络略知一二.md","raw":"---\ntitle: 网络略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n本文主要为网络的基础知识\n\n### tcp 三次握手建立连接\n\n-   连接端发起一个 SYN 消息，SEQ=x\n-   被连端收到后返回 SYN+ACK 消息，SEQ=y, ACK=x+1\n-   连接端收到消息返回 ACK 消息，ACK=y+1\n\n两端都进入 Established 状态\n\n### tcp 四次挥手断开连接\n\n-   发起端发起一个 FIN 的消息，SEQ=x\n-   接收端收到后返回 ACK 消息，表示准备断开连接，SEQ=y, ACK=x+1\n-   接收端准备完毕，发送 FIN 消息，SEQ=y+1, ACK=x+1\n-   发起端收到后返回 ACK 消息，SEQ=x+1, ACK=y+2\n\n### tcp 建立连接后的数据传输\n\n-   发送端发起一个数据包，SEQ=x，数据为 100B\n-   接受端收到数据消息返回 ACK = x + 100 + 1\n-   发送端收到后继续发送，SEQ=x+100+1，数据为 100B\n-   接受端收到后返回 ACK = x + 200 + 2\n\n### tcp 连接的可靠性\n\n-   tcp 会将数据截成最合适发送的数据块\n-   当发送端发出一段数据后，会启动定时器等待回应，如果没有回应，会重新发送\n-   tcp 会保持首部和数据的检验和\n-   tcp 会将乱序的数据进行重新排序，返回应用层原来顺序\n-   tcp 能控制流量，每一方都有固定大小的缓冲空间\n\n### tcp 如何进行拥塞控制\n\n在拥塞控制中，发送方维持一个叫做拥塞窗口 cwnd 的状态变量，根据拥塞程度动态变化。  \n慢启动算法：一开始不发送大量数据，先试探网络拥塞程度，由小到大增加窗口，每个传输轮次后 cwnd 加倍\n拥塞避免算法：采用线性逐渐增加拥塞窗口 cwnd\n慢启动阀门（ssthresh）：\n\n-   cwnd < ssthresh 慢启动算法\n-   cwnd > ssthresh 拥塞避免算法\n\n只要发现拥塞，将 ssthresh 设为一半，cwnd 设为 1\n\n### tcp 流量控制\n\n接收端在确认应答发送 ACK 报文的时候，将自己的即时窗口大小 rwnd 写入 TCP 头部 16 位字段的窗口大小，  \n发送端根据 ACK 报文里的窗口大小改变自己的发送速度。越大表示接收端缓冲区剩余空间越大，网络吞吐量越大。\n\n\n### 网络层级，http和https区别\n\n网络五层结构为 应用层(http) - 传输层(tcp) - 网络层(ip) - 数据链路层 - 物理层\nhttps是在应用层和传输层中间添加一个ssl层\n\n### http2.0特性\n\n- 头部压缩：使用HPACK算法进行压缩\n- 二进制格式：使用更加靠近TCP/IP的二进制格式，提升解析效率\n- 强化安全：跑在https上\n- 多路复用：一个连接有多个请求\n\n","slug":"2020/article_27_网络略知一二","published":1,"updated":"2021-01-27T04:46:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75w003g07700otpgj1q","content":"<h2 id=\"前言\">前言</h2>\n<p>本文主要为网络的基础知识</p>\n<h3 id=\"tcp-三次握手建立连接\">tcp 三次握手建立连接</h3>\n<ul>\n<li>连接端发起一个 SYN 消息，SEQ=x</li>\n<li>被连端收到后返回 SYN+ACK 消息，SEQ=y, ACK=x+1</li>\n<li>连接端收到消息返回 ACK 消息，ACK=y+1</li>\n</ul>\n<p>两端都进入 Established 状态</p>\n<h3 id=\"tcp-四次挥手断开连接\">tcp 四次挥手断开连接</h3>\n<ul>\n<li>发起端发起一个 FIN 的消息，SEQ=x</li>\n<li>接收端收到后返回 ACK 消息，表示准备断开连接，SEQ=y, ACK=x+1</li>\n<li>接收端准备完毕，发送 FIN 消息，SEQ=y+1, ACK=x+1</li>\n<li>发起端收到后返回 ACK 消息，SEQ=x+1, ACK=y+2</li>\n</ul>\n<h3 id=\"tcp-建立连接后的数据传输\">tcp 建立连接后的数据传输</h3>\n<ul>\n<li>发送端发起一个数据包，SEQ=x，数据为 100B</li>\n<li>接受端收到数据消息返回 ACK = x + 100 + 1</li>\n<li>发送端收到后继续发送，SEQ=x+100+1，数据为 100B</li>\n<li>接受端收到后返回 ACK = x + 200 + 2</li>\n</ul>\n<h3 id=\"tcp-连接的可靠性\">tcp 连接的可靠性</h3>\n<ul>\n<li>tcp 会将数据截成最合适发送的数据块</li>\n<li>当发送端发出一段数据后，会启动定时器等待回应，如果没有回应，会重新发送</li>\n<li>tcp 会保持首部和数据的检验和</li>\n<li>tcp 会将乱序的数据进行重新排序，返回应用层原来顺序</li>\n<li>tcp 能控制流量，每一方都有固定大小的缓冲空间</li>\n</ul>\n<h3 id=\"tcp-如何进行拥塞控制\">tcp 如何进行拥塞控制</h3>\n<p>在拥塞控制中，发送方维持一个叫做拥塞窗口 cwnd 的状态变量，根据拥塞程度动态变化。<br>\n慢启动算法：一开始不发送大量数据，先试探网络拥塞程度，由小到大增加窗口，每个传输轮次后 cwnd 加倍<br>\n拥塞避免算法：采用线性逐渐增加拥塞窗口 cwnd<br>\n慢启动阀门（ssthresh）：</p>\n<ul>\n<li>cwnd &lt; ssthresh 慢启动算法</li>\n<li>cwnd &gt; ssthresh 拥塞避免算法</li>\n</ul>\n<p>只要发现拥塞，将 ssthresh 设为一半，cwnd 设为 1</p>\n<h3 id=\"tcp-流量控制\">tcp 流量控制</h3>\n<p>接收端在确认应答发送 ACK 报文的时候，将自己的即时窗口大小 rwnd 写入 TCP 头部 16 位字段的窗口大小，<br>\n发送端根据 ACK 报文里的窗口大小改变自己的发送速度。越大表示接收端缓冲区剩余空间越大，网络吞吐量越大。</p>\n<h3 id=\"网络层级http和https区别\">网络层级，http和https区别</h3>\n<p>网络五层结构为 应用层(http) - 传输层(tcp) - 网络层(ip) - 数据链路层 - 物理层<br>\nhttps是在应用层和传输层中间添加一个ssl层</p>\n<h3 id=\"http20特性\">http2.0特性</h3>\n<ul>\n<li>头部压缩：使用HPACK算法进行压缩</li>\n<li>二进制格式：使用更加靠近TCP/IP的二进制格式，提升解析效率</li>\n<li>强化安全：跑在https上</li>\n<li>多路复用：一个连接有多个请求</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文主要为网络的基础知识</p>\n<h3>tcp 三次握手建立连接</h3>\n<ul>\n<li>连接端发起一个 SYN 消息，SEQ=x</li>\n<li>被连端收到后返回 SYN+ACK 消息，SEQ=y, ACK=x+1</li>\n<li>连接端收到消息返回 ACK 消息，ACK=y+1</li>\n</ul>\n<p>两端都进入 Established 状态</p>\n<h3>tcp 四次挥手断开连接</h3>\n<ul>\n<li>发起端发起一个 FIN 的消息，SEQ=x</li>\n<li>接收端收到后返回 ACK 消息，表示准备断开连接，SEQ=y, ACK=x+1</li>\n<li>接收端准备完毕，发送 FIN 消息，SEQ=y+1, ACK=x+1</li>\n<li>发起端收到后返回 ACK 消息，SEQ=x+1, ACK=y+2</li>\n</ul>\n<h3>tcp 建立连接后的数据传输</h3>\n<ul>\n<li>发送端发起一个数据包，SEQ=x，数据为 100B</li>\n<li>接受端收到数据消息返回 ACK = x + 100 + 1</li>\n<li>发送端收到后继续发送，SEQ=x+100+1，数据为 100B</li>\n<li>接受端收到后返回 ACK = x + 200 + 2</li>\n</ul>\n<h3>tcp 连接的可靠性</h3>\n<ul>\n<li>tcp 会将数据截成最合适发送的数据块</li>\n<li>当发送端发出一段数据后，会启动定时器等待回应，如果没有回应，会重新发送</li>\n<li>tcp 会保持首部和数据的检验和</li>\n<li>tcp 会将乱序的数据进行重新排序，返回应用层原来顺序</li>\n<li>tcp 能控制流量，每一方都有固定大小的缓冲空间</li>\n</ul>\n<h3>tcp 如何进行拥塞控制</h3>\n<p>在拥塞控制中，发送方维持一个叫做拥塞窗口 cwnd 的状态变量，根据拥塞程度动态变化。<br>\n慢启动算法：一开始不发送大量数据，先试探网络拥塞程度，由小到大增加窗口，每个传输轮次后 cwnd 加倍<br>\n拥塞避免算法：采用线性逐渐增加拥塞窗口 cwnd<br>\n慢启动阀门（ssthresh）：</p>\n<ul>\n<li>cwnd &lt; ssthresh 慢启动算法</li>\n<li>cwnd &gt; ssthresh 拥塞避免算法</li>\n</ul>\n<p>只要发现拥塞，将 ssthresh 设为一半，cwnd 设为 1</p>\n<h3>tcp 流量控制</h3>\n<p>接收端在确认应答发送 ACK 报文的时候，将自己的即时窗口大小 rwnd 写入 TCP 头部 16 位字段的窗口大小，<br>\n发送端根据 ACK 报文里的窗口大小改变自己的发送速度。越大表示接收端缓冲区剩余空间越大，网络吞吐量越大。</p>\n<h3>网络层级，http和https区别</h3>\n<p>网络五层结构为 应用层(http) - 传输层(tcp) - 网络层(ip) - 数据链路层 - 物理层<br>\nhttps是在应用层和传输层中间添加一个ssl层</p>\n<h3>http2.0特性</h3>\n<ul>\n<li>头部压缩：使用HPACK算法进行压缩</li>\n<li>二进制格式：使用更加靠近TCP/IP的二进制格式，提升解析效率</li>\n<li>强化安全：跑在https上</li>\n<li>多路复用：一个连接有多个请求</li>\n</ul>\n"},{"title":"分布式略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n本文涉及分布式情况下会产生的各种问题；\n\n### celery 多个 comsumor 如何实现一致性\n\n当 celery 配合 redis，将 redis 作为消息队列时，redis 内部使用 list 的 lpush，brpop 来实现入队出队。  \n当多个 celery 消费进程来取任务时，由于 redis 内部是单线程的，不会导致消息的重复读，brpop 在没任务时会阻塞。\n\n### cap 理论\n\n-   一致性\n-   可用性\n-   分区容错性\n\n### zk 如何保证一致性\n\n客户端的写请求都由 Leader 接收，Leader 将请求转成事务 Proposal，并向集群所有 Follower 节点发送广播请求，  \n只要有一半以上的 Follower 进行了正确的反馈 ACK，Leader 再向所有 Follower 发送 commit 请求，将上一个事务进行提交。\n","source":"_posts/2020/article_29_分布式略知一二.md","raw":"---\ntitle: 分布式略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n本文涉及分布式情况下会产生的各种问题；\n\n### celery 多个 comsumor 如何实现一致性\n\n当 celery 配合 redis，将 redis 作为消息队列时，redis 内部使用 list 的 lpush，brpop 来实现入队出队。  \n当多个 celery 消费进程来取任务时，由于 redis 内部是单线程的，不会导致消息的重复读，brpop 在没任务时会阻塞。\n\n### cap 理论\n\n-   一致性\n-   可用性\n-   分区容错性\n\n### zk 如何保证一致性\n\n客户端的写请求都由 Leader 接收，Leader 将请求转成事务 Proposal，并向集群所有 Follower 节点发送广播请求，  \n只要有一半以上的 Follower 进行了正确的反馈 ACK，Leader 再向所有 Follower 发送 commit 请求，将上一个事务进行提交。\n","slug":"2020/article_29_分布式略知一二","published":1,"updated":"2021-01-27T04:46:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75x003i0770fsm05iln","content":"<h2 id=\"前言\">前言</h2>\n<p>本文涉及分布式情况下会产生的各种问题；</p>\n<h3 id=\"celery-多个-comsumor-如何实现一致性\">celery 多个 comsumor 如何实现一致性</h3>\n<p>当 celery 配合 redis，将 redis 作为消息队列时，redis 内部使用 list 的 lpush，brpop 来实现入队出队。<br>\n当多个 celery 消费进程来取任务时，由于 redis 内部是单线程的，不会导致消息的重复读，brpop 在没任务时会阻塞。</p>\n<h3 id=\"cap-理论\">cap 理论</h3>\n<ul>\n<li>一致性</li>\n<li>可用性</li>\n<li>分区容错性</li>\n</ul>\n<h3 id=\"zk-如何保证一致性\">zk 如何保证一致性</h3>\n<p>客户端的写请求都由 Leader 接收，Leader 将请求转成事务 Proposal，并向集群所有 Follower 节点发送广播请求，<br>\n只要有一半以上的 Follower 进行了正确的反馈 ACK，Leader 再向所有 Follower 发送 commit 请求，将上一个事务进行提交。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文涉及分布式情况下会产生的各种问题；</p>\n<h3>celery 多个 comsumor 如何实现一致性</h3>\n<p>当 celery 配合 redis，将 redis 作为消息队列时，redis 内部使用 list 的 lpush，brpop 来实现入队出队。<br>\n当多个 celery 消费进程来取任务时，由于 redis 内部是单线程的，不会导致消息的重复读，brpop 在没任务时会阻塞。</p>\n<h3>cap 理论</h3>\n<ul>\n<li>一致性</li>\n<li>可用性</li>\n<li>分区容错性</li>\n</ul>\n<h3>zk 如何保证一致性</h3>\n<p>客户端的写请求都由 Leader 接收，Leader 将请求转成事务 Proposal，并向集群所有 Follower 节点发送广播请求，<br>\n只要有一半以上的 Follower 进行了正确的反馈 ACK，Leader 再向所有 Follower 发送 commit 请求，将上一个事务进行提交。</p>\n"},{"title":"容器略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n本文产出关于一些容器的知识\n\n### tomcat 总体架构\n\n-   server:一个 tomcat 即一个 server\n-   service:包含多个 connector 和一个 container，一个 server 可以有多个 service\n-   connector:链接器，监听 socket 并交给对应 container 处理\n-   container:执行请求并返回响应的对象，包括 engine，host，context，wrapper\n-   engine:整个 servlet 引擎，最高层级容器对象，获取目标容器入口\n-   host:表示虚拟主机的概念，处理来自不同地址的请求\n-   context:表示一个独立的 web 应用\n-   wrapper:表示 servlet 定义\n-   executor:表示可以共享的线程池\n\n### tomcat 处理请求过程\n\n-   endpoint 接收请求\n-   processor 处理请求\n-   coyoteAdapter 请求路径映射\n-   mapper 获取匹配的执行\n-   engine 容器入口\n-   host 获取匹配的 host 执行\n-   context 获取匹配的 context 执行\n-   wrapper 获取匹配的 wrapper 执行\n-   filterchain 执行 filter\n-   servlet 执行 servlet\n","source":"_posts/2020/article_26_容器略知一二.md","raw":"---\ntitle: 容器略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - JAVA\n    - 知识积累\n---\n\n## 前言\n\n本文产出关于一些容器的知识\n\n### tomcat 总体架构\n\n-   server:一个 tomcat 即一个 server\n-   service:包含多个 connector 和一个 container，一个 server 可以有多个 service\n-   connector:链接器，监听 socket 并交给对应 container 处理\n-   container:执行请求并返回响应的对象，包括 engine，host，context，wrapper\n-   engine:整个 servlet 引擎，最高层级容器对象，获取目标容器入口\n-   host:表示虚拟主机的概念，处理来自不同地址的请求\n-   context:表示一个独立的 web 应用\n-   wrapper:表示 servlet 定义\n-   executor:表示可以共享的线程池\n\n### tomcat 处理请求过程\n\n-   endpoint 接收请求\n-   processor 处理请求\n-   coyoteAdapter 请求路径映射\n-   mapper 获取匹配的执行\n-   engine 容器入口\n-   host 获取匹配的 host 执行\n-   context 获取匹配的 context 执行\n-   wrapper 获取匹配的 wrapper 执行\n-   filterchain 执行 filter\n-   servlet 执行 servlet\n","slug":"2020/article_26_容器略知一二","published":1,"updated":"2021-01-27T04:46:28.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75y003k0770ygggp3z2","content":"<h2 id=\"前言\">前言</h2>\n<p>本文产出关于一些容器的知识</p>\n<h3 id=\"tomcat-总体架构\">tomcat 总体架构</h3>\n<ul>\n<li>server:一个 tomcat 即一个 server</li>\n<li>service:包含多个 connector 和一个 container，一个 server 可以有多个 service</li>\n<li>connector:链接器，监听 socket 并交给对应 container 处理</li>\n<li>container:执行请求并返回响应的对象，包括 engine，host，context，wrapper</li>\n<li>engine:整个 servlet 引擎，最高层级容器对象，获取目标容器入口</li>\n<li>host:表示虚拟主机的概念，处理来自不同地址的请求</li>\n<li>context:表示一个独立的 web 应用</li>\n<li>wrapper:表示 servlet 定义</li>\n<li>executor:表示可以共享的线程池</li>\n</ul>\n<h3 id=\"tomcat-处理请求过程\">tomcat 处理请求过程</h3>\n<ul>\n<li>endpoint 接收请求</li>\n<li>processor 处理请求</li>\n<li>coyoteAdapter 请求路径映射</li>\n<li>mapper 获取匹配的执行</li>\n<li>engine 容器入口</li>\n<li>host 获取匹配的 host 执行</li>\n<li>context 获取匹配的 context 执行</li>\n<li>wrapper 获取匹配的 wrapper 执行</li>\n<li>filterchain 执行 filter</li>\n<li>servlet 执行 servlet</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文产出关于一些容器的知识</p>\n<h3>tomcat 总体架构</h3>\n<ul>\n<li>server:一个 tomcat 即一个 server</li>\n<li>service:包含多个 connector 和一个 container，一个 server 可以有多个 service</li>\n<li>connector:链接器，监听 socket 并交给对应 container 处理</li>\n<li>container:执行请求并返回响应的对象，包括 engine，host，context，wrapper</li>\n<li>engine:整个 servlet 引擎，最高层级容器对象，获取目标容器入口</li>\n<li>host:表示虚拟主机的概念，处理来自不同地址的请求</li>\n<li>context:表示一个独立的 web 应用</li>\n<li>wrapper:表示 servlet 定义</li>\n<li>executor:表示可以共享的线程池</li>\n</ul>\n<h3>tomcat 处理请求过程</h3>\n<ul>\n<li>endpoint 接收请求</li>\n<li>processor 处理请求</li>\n<li>coyoteAdapter 请求路径映射</li>\n<li>mapper 获取匹配的执行</li>\n<li>engine 容器入口</li>\n<li>host 获取匹配的 host 执行</li>\n<li>context 获取匹配的 context 执行</li>\n<li>wrapper 获取匹配的 wrapper 执行</li>\n<li>filterchain 执行 filter</li>\n<li>servlet 执行 servlet</li>\n</ul>\n"},{"title":"操作系统略知一二","catalog":true,"date":"2000-09-27T11:31:43.000Z","_content":"\n## 前言\n\n本文涉及操作系统各种方面，包括进程，线程，协议，cpu，内存；\n\n### 进程调度算法\n\n- 先来先服务调度算法：队列\n- 最短作业优先调度算法：时间短的先运行\n- 高响应比优先调度算法：先计算响应比优先级，优先级高的先运行\n- 时间片轮转调度算法：每个进程分配一个时间片段，如果在时间片段内没有执行完成，也切换进程运行，如果时间片内执行，则立即切换。\n- 最高优先级调度算法：静态优先级 - 创建进程时确定优先级，动态优先级 - 进程优先级随时间增加而增加\n- 多级反馈队列调度算法：设置多个队列，每个队列优先级从高到低，优先级越高时间片越短\n","source":"_posts/2020/article_30_操作系统略知一二.md","raw":"---\ntitle: 操作系统略知一二\ncatalog: true\ndate: 2000-09-27 19:31:43\ntags:\n    - 操作系统\n    - 知识积累\n---\n\n## 前言\n\n本文涉及操作系统各种方面，包括进程，线程，协议，cpu，内存；\n\n### 进程调度算法\n\n- 先来先服务调度算法：队列\n- 最短作业优先调度算法：时间短的先运行\n- 高响应比优先调度算法：先计算响应比优先级，优先级高的先运行\n- 时间片轮转调度算法：每个进程分配一个时间片段，如果在时间片段内没有执行完成，也切换进程运行，如果时间片内执行，则立即切换。\n- 最高优先级调度算法：静态优先级 - 创建进程时确定优先级，动态优先级 - 进程优先级随时间增加而增加\n- 多级反馈队列调度算法：设置多个队列，每个队列优先级从高到低，优先级越高时间片越短\n","slug":"2020/article_30_操作系统略知一二","published":1,"updated":"2021-01-27T04:46:28.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh75z003m077056gzgwe5","content":"<h2 id=\"前言\">前言</h2>\n<p>本文涉及操作系统各种方面，包括进程，线程，协议，cpu，内存；</p>\n<h3 id=\"进程调度算法\">进程调度算法</h3>\n<ul>\n<li>先来先服务调度算法：队列</li>\n<li>最短作业优先调度算法：时间短的先运行</li>\n<li>高响应比优先调度算法：先计算响应比优先级，优先级高的先运行</li>\n<li>时间片轮转调度算法：每个进程分配一个时间片段，如果在时间片段内没有执行完成，也切换进程运行，如果时间片内执行，则立即切换。</li>\n<li>最高优先级调度算法：静态优先级 - 创建进程时确定优先级，动态优先级 - 进程优先级随时间增加而增加</li>\n<li>多级反馈队列调度算法：设置多个队列，每个队列优先级从高到低，优先级越高时间片越短</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文涉及操作系统各种方面，包括进程，线程，协议，cpu，内存；</p>\n<h3>进程调度算法</h3>\n<ul>\n<li>先来先服务调度算法：队列</li>\n<li>最短作业优先调度算法：时间短的先运行</li>\n<li>高响应比优先调度算法：先计算响应比优先级，优先级高的先运行</li>\n<li>时间片轮转调度算法：每个进程分配一个时间片段，如果在时间片段内没有执行完成，也切换进程运行，如果时间片内执行，则立即切换。</li>\n<li>最高优先级调度算法：静态优先级 - 创建进程时确定优先级，动态优先级 - 进程优先级随时间增加而增加</li>\n<li>多级反馈队列调度算法：设置多个队列，每个队列优先级从高到低，优先级越高时间片越短</li>\n</ul>\n"},{"title":"chrome插件 web_robot之难点探讨","catalog":true,"date":"2000-12-01T11:31:43.000Z","_content":"\n## 前言\n\n本篇主要对 WEB-ROBOT 用到的技术点和实现的探讨\n\n将会以一个一篇文章的粒度来探讨。\n\n### 可视化圈选的实现\n\n- 选中事件捕获与ui展示\n- 反向选择器解析\n\n### 从上层运行到下层事件的运行流程\n\n- 多条事务形成联动，事务上下游，事务循环，爬虫事务（未实现）\n- 一个事务的运行\n- 一个事件的运行，包括前置dom检查\n- js事件与chrome事件封装\n\n### 插件的通信\n\n- background与popup\n- popup与content_script\n- new_tab与content_script\n\n### 关于运行模式的一些思路\n\n- 一般运行\n- 受控运行\n","source":"_posts/2020/article_32_chrome插件-WEB-ROBOT实现难点.md","raw":"---\ntitle: chrome插件 web_robot之难点探讨\ncatalog: true\ndate: 2000-12-01 19:31:43\ntags:\n    - CHROME插件\n    - 自动化\n---\n\n## 前言\n\n本篇主要对 WEB-ROBOT 用到的技术点和实现的探讨\n\n将会以一个一篇文章的粒度来探讨。\n\n### 可视化圈选的实现\n\n- 选中事件捕获与ui展示\n- 反向选择器解析\n\n### 从上层运行到下层事件的运行流程\n\n- 多条事务形成联动，事务上下游，事务循环，爬虫事务（未实现）\n- 一个事务的运行\n- 一个事件的运行，包括前置dom检查\n- js事件与chrome事件封装\n\n### 插件的通信\n\n- background与popup\n- popup与content_script\n- new_tab与content_script\n\n### 关于运行模式的一些思路\n\n- 一般运行\n- 受控运行\n","slug":"2020/article_32_chrome插件-WEB-ROBOT实现难点","published":1,"updated":"2021-01-27T04:46:28.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh760003n0770lw7eix5i","content":"<h2 id=\"前言\">前言</h2>\n<p>本篇主要对 WEB-ROBOT 用到的技术点和实现的探讨</p>\n<p>将会以一个一篇文章的粒度来探讨。</p>\n<h3 id=\"可视化圈选的实现\">可视化圈选的实现</h3>\n<ul>\n<li>选中事件捕获与ui展示</li>\n<li>反向选择器解析</li>\n</ul>\n<h3 id=\"从上层运行到下层事件的运行流程\">从上层运行到下层事件的运行流程</h3>\n<ul>\n<li>多条事务形成联动，事务上下游，事务循环，爬虫事务（未实现）</li>\n<li>一个事务的运行</li>\n<li>一个事件的运行，包括前置dom检查</li>\n<li>js事件与chrome事件封装</li>\n</ul>\n<h3 id=\"插件的通信\">插件的通信</h3>\n<ul>\n<li>background与popup</li>\n<li>popup与content_script</li>\n<li>new_tab与content_script</li>\n</ul>\n<h3 id=\"关于运行模式的一些思路\">关于运行模式的一些思路</h3>\n<ul>\n<li>一般运行</li>\n<li>受控运行</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本篇主要对 WEB-ROBOT 用到的技术点和实现的探讨</p>\n<p>将会以一个一篇文章的粒度来探讨。</p>\n<h3>可视化圈选的实现</h3>\n<ul>\n<li>选中事件捕获与ui展示</li>\n<li>反向选择器解析</li>\n</ul>\n<h3>从上层运行到下层事件的运行流程</h3>\n<ul>\n<li>多条事务形成联动，事务上下游，事务循环，爬虫事务（未实现）</li>\n<li>一个事务的运行</li>\n<li>一个事件的运行，包括前置dom检查</li>\n<li>js事件与chrome事件封装</li>\n</ul>\n<h3>插件的通信</h3>\n<ul>\n<li>background与popup</li>\n<li>popup与content_script</li>\n<li>new_tab与content_script</li>\n</ul>\n<h3>关于运行模式的一些思路</h3>\n<ul>\n<li>一般运行</li>\n<li>受控运行</li>\n</ul>\n"},{"title":"整理晒晒老博客","catalog":true,"date":"2020-02-29T08:15:00.000Z","subtitle":"整理下之前记录的一些东西","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","source":"_posts/2020/article_2_整理晒晒老博客.md","raw":"---\ntitle: 整理晒晒老博客\ncatalog: true\ndate: 2020-02-29 16:15:00\nsubtitle: \"整理下之前记录的一些东西\"\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- OTHER\n---\n\n## 前言\n\n之前写过些博客，文章没直接保留，代码都还留着；  \n这边对之前的做简单论述和总结。\ngit地址：[https://github.com/webgjc/blog](https://github.com/webgjc/blog)\n\n## content\n\n### [修改桌面背景图片](https://github.com/webgjc/blog/tree/master/change_background_exe)\n- 使用python实现，从网上获取[图片](https://bing.ioliu.cn/)，修改window桌面背景图片。可以用pyinstaller打包为exe\n\n### [dfs的几个demo](https://github.com/webgjc/blog/tree/master/dfs_demo)\n- dfs.py包含了全排，八皇后问题  \nriver.py为和尚妖怪过河问题  \nshudu.py为解数独问题\n\n### [dlib人脸识别+svm分类](https://github.com/webgjc/blog/tree/master/dlib_face)\n- 使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。\n\n### [flask mongodb gunicorn demo](https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn)\n- flask mongodb尝试\n\n### [前端许愿墙效果](https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect)\n- 前端效果\n\n### [在线双人五子棋](https://github.com/webgjc/blog/tree/master/gobang_online)\n- 使用了node的socket.io的websocket实现了网页上的双人五子棋游戏\n\n### [梯度下降法](https://github.com/webgjc/blog/tree/master/gradient_descent_method)\n- 写了下梯度下降的效果demo\n\n### [手持弹幕效果](https://github.com/webgjc/blog/tree/master/handheld_barrage)\n- 前端效果\n\n### [聪明钱--股票策略](https://github.com/webgjc/blog/tree/master/joinquant_smart_money)\n- 在聚宽回测平台运行\n\n### [扫雷js版](https://github.com/webgjc/blog/tree/master/js_mine_clearance)\n- js版扫雷\n\n### [手动实现kmeans聚类算法](https://github.com/webgjc/blog/tree/master/kmeans_hand)\n- python手动实现了下kmeans\n\n### [KNN分类算法（mnist为例）](https://github.com/webgjc/blog/tree/master/knn_mnist)\n- knn demo\n\n### [loading动画](https://github.com/webgjc/blog/tree/master/loading_demo)\n- loading动画\n\n### [逻辑回归二分类](https://github.com/webgjc/blog/tree/master/logistic_classification)\n- 手动实现逻辑回归二分类\n\n### [数字杭电模拟登录（python版+PHP版）](https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university)\n- 数字杭电模拟登陆(目前不一定可靠)\n\n### [matplotlib 画图](https://github.com/webgjc/blog/tree/master/matplotlib_draw)\n- matplotlib画图demo\n\n### [mcts做五子棋ai](https://github.com/webgjc/blog/tree/master/mcts_gobang)\n- python实现了下五子棋，并用macts算法进行了ai模拟\n\n### [node express mongodb demo](https://github.com/webgjc/blog/tree/master/node_express_mongodb)\n- node express demo\n\n### [非线性拟合和非线性逻辑回归](https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic)\n- python手动实现拟合和回归\n\n### [swoole 你画我猜](https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess)\n- php的swoole的socket实现你画我猜\n\n### [唐诗词云](https://github.com/webgjc/blog/tree/master/poet_word_cloud)\n- python的wordcloud实现唐诗的词云\n\n### [ppython的使用](https://github.com/webgjc/blog/tree/master/ppython)\n- ppython主要是php调用python程序\n\n### [php rsa加密](https://github.com/webgjc/blog/tree/master/rsa_php)\n- php rsa加密\n\n### [简单线性回归](https://github.com/webgjc/blog/tree/master/simple_linear_regression)\n- 线性回归demo\n\n### [PHP实现SOAP调用](https://github.com/webgjc/blog/tree/master/soap_php)\n- php soap\n\n### [svm分类](https://github.com/webgjc/blog/tree/master/svm_classification)\n- svm分类\n\n### [tensorflow写mnist分类](https://github.com/webgjc/blog/tree/master/tensorflow_mnist)\n- tensorflow写mnist分类\n\n### [threejs demo](https://github.com/webgjc/blog/tree/master/three_js_demo)\n- three js demo\n\n### [tts人机聊天应用](https://github.com/webgjc/blog/tree/master/tts_chat_demo)\n- tts人机聊天应用\n\n### [简单验证码的识别](https://github.com/webgjc/blog/tree/master/verification_code_recognition)\n- 简单验证码的识别\n\n### [web worker demo](https://github.com/webgjc/blog/tree/master/web_worker)\n- web worker demo\n\n### [微信小程序购物功能示例](https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo)\n- 微信小程序购物功能示例\n\n### [微信小程序--文字/联系方式二维码](https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code)\n- 微信小程序--文字/联系方式二维码","slug":"2020/article_2_整理晒晒老博客","published":1,"updated":"2021-01-27T04:46:28.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh760003o0770o910j23y","content":"<h2 id=\"前言\">前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/blog</a></p>\n<h2 id=\"content\">content</h2>\n<h3 id=\"修改桌面背景图片\"><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\" target=\"_blank\" rel=\"external\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\" target=\"_blank\" rel=\"external\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3 id=\"dfs的几个demo\"><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\" target=\"_blank\" rel=\"external\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3 id=\"dlib人脸识别svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\" target=\"_blank\" rel=\"external\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3 id=\"flask-mongodb-gunicorn-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\" target=\"_blank\" rel=\"external\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3 id=\"前端许愿墙效果\"><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\" target=\"_blank\" rel=\"external\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"在线双人五子棋\"><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\" target=\"_blank\" rel=\"external\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3 id=\"梯度下降法\"><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\" target=\"_blank\" rel=\"external\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3 id=\"手持弹幕效果\"><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\" target=\"_blank\" rel=\"external\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3 id=\"聪明钱股票策略\"><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\" target=\"_blank\" rel=\"external\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3 id=\"扫雷js版\"><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\" target=\"_blank\" rel=\"external\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3 id=\"手动实现kmeans聚类算法\"><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\" target=\"_blank\" rel=\"external\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3 id=\"knn分类算法mnist为例\"><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\" target=\"_blank\" rel=\"external\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3 id=\"loading动画\"><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\" target=\"_blank\" rel=\"external\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3 id=\"逻辑回归二分类\"><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\" target=\"_blank\" rel=\"external\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3 id=\"数字杭电模拟登录python版php版\"><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\" target=\"_blank\" rel=\"external\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3 id=\"matplotlib-画图\"><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\" target=\"_blank\" rel=\"external\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3 id=\"mcts做五子棋ai\"><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\" target=\"_blank\" rel=\"external\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3 id=\"node-express-mongodb-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\" target=\"_blank\" rel=\"external\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3 id=\"非线性拟合和非线性逻辑回归\"><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\" target=\"_blank\" rel=\"external\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3 id=\"swoole-你画我猜\"><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\" target=\"_blank\" rel=\"external\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3 id=\"唐诗词云\"><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\" target=\"_blank\" rel=\"external\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3 id=\"ppython的使用\"><a href=\"https://github.com/webgjc/blog/tree/master/ppython\" target=\"_blank\" rel=\"external\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3 id=\"php-rsa加密\"><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\" target=\"_blank\" rel=\"external\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3 id=\"简单线性回归\"><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\" target=\"_blank\" rel=\"external\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3 id=\"php实现soap调用\"><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\" target=\"_blank\" rel=\"external\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3 id=\"svm分类\"><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\" target=\"_blank\" rel=\"external\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3 id=\"tensorflow写mnist分类\"><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\" target=\"_blank\" rel=\"external\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3 id=\"threejs-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\" target=\"_blank\" rel=\"external\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3 id=\"tts人机聊天应用\"><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\" target=\"_blank\" rel=\"external\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3 id=\"简单验证码的识别\"><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\" target=\"_blank\" rel=\"external\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3 id=\"web-worker-demo\"><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\" target=\"_blank\" rel=\"external\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3 id=\"微信小程序购物功能示例\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\" target=\"_blank\" rel=\"external\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3 id=\"微信小程序文字联系方式二维码\"><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\" target=\"_blank\" rel=\"external\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>之前写过些博客，文章没直接保留，代码都还留着；<br>\n这边对之前的做简单论述和总结。<br>\ngit地址：<a href=\"https://github.com/webgjc/blog\">https://github.com/webgjc/blog</a></p>\n<h2>content</h2>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/change_background_exe\">修改桌面背景图片</a></h3>\n<ul>\n<li>使用python实现，从网上获取<a href=\"https://bing.ioliu.cn/\">图片</a>，修改window桌面背景图片。可以用pyinstaller打包为exe</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dfs_demo\">dfs的几个demo</a></h3>\n<ul>\n<li>dfs.py包含了全排，八皇后问题<br>\nriver.py为和尚妖怪过河问题<br>\nshudu.py为解数独问题</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/dlib_face\">dlib人脸识别+svm分类</a></h3>\n<ul>\n<li>使用python的dlib包进行人脸68个关键点识别，并使用svm进行了二分类。</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/flask_mongodb_gunicorn\">flask mongodb gunicorn demo</a></h3>\n<ul>\n<li>flask mongodb尝试</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/front_end_vow_wall_effect\">前端许愿墙效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gobang_online\">在线双人五子棋</a></h3>\n<ul>\n<li>使用了node的socket.io的websocket实现了网页上的双人五子棋游戏</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/gradient_descent_method\">梯度下降法</a></h3>\n<ul>\n<li>写了下梯度下降的效果demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/handheld_barrage\">手持弹幕效果</a></h3>\n<ul>\n<li>前端效果</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/joinquant_smart_money\">聪明钱–股票策略</a></h3>\n<ul>\n<li>在聚宽回测平台运行</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/js_mine_clearance\">扫雷js版</a></h3>\n<ul>\n<li>js版扫雷</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/kmeans_hand\">手动实现kmeans聚类算法</a></h3>\n<ul>\n<li>python手动实现了下kmeans</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/knn_mnist\">KNN分类算法（mnist为例）</a></h3>\n<ul>\n<li>knn demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/loading_demo\">loading动画</a></h3>\n<ul>\n<li>loading动画</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logistic_classification\">逻辑回归二分类</a></h3>\n<ul>\n<li>手动实现逻辑回归二分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/logon_digital_hangzhou_dianzi_university\">数字杭电模拟登录（python版+PHP版）</a></h3>\n<ul>\n<li>数字杭电模拟登陆(目前不一定可靠)</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/matplotlib_draw\">matplotlib 画图</a></h3>\n<ul>\n<li>matplotlib画图demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/mcts_gobang\">mcts做五子棋ai</a></h3>\n<ul>\n<li>python实现了下五子棋，并用macts算法进行了ai模拟</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/node_express_mongodb\">node express mongodb demo</a></h3>\n<ul>\n<li>node express demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/nonlinear_fitting_logistic\">非线性拟合和非线性逻辑回归</a></h3>\n<ul>\n<li>python手动实现拟合和回归</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/php_swoole_draw_and_guess\">swoole 你画我猜</a></h3>\n<ul>\n<li>php的swoole的socket实现你画我猜</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/poet_word_cloud\">唐诗词云</a></h3>\n<ul>\n<li>python的wordcloud实现唐诗的词云</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/ppython\">ppython的使用</a></h3>\n<ul>\n<li>ppython主要是php调用python程序</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/rsa_php\">php rsa加密</a></h3>\n<ul>\n<li>php rsa加密</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/simple_linear_regression\">简单线性回归</a></h3>\n<ul>\n<li>线性回归demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/soap_php\">PHP实现SOAP调用</a></h3>\n<ul>\n<li>php soap</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/svm_classification\">svm分类</a></h3>\n<ul>\n<li>svm分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tensorflow_mnist\">tensorflow写mnist分类</a></h3>\n<ul>\n<li>tensorflow写mnist分类</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/three_js_demo\">threejs demo</a></h3>\n<ul>\n<li>three js demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/tts_chat_demo\">tts人机聊天应用</a></h3>\n<ul>\n<li>tts人机聊天应用</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/verification_code_recognition\">简单验证码的识别</a></h3>\n<ul>\n<li>简单验证码的识别</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/web_worker\">web worker demo</a></h3>\n<ul>\n<li>web worker demo</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_sale_demo\">微信小程序购物功能示例</a></h3>\n<ul>\n<li>微信小程序购物功能示例</li>\n</ul>\n<h3><a href=\"https://github.com/webgjc/blog/tree/master/wechat_small_program_text_verification_code\">微信小程序–文字/联系方式二维码</a></h3>\n<ul>\n<li>微信小程序–文字/联系方式二维码</li>\n</ul>\n"},{"title":"chrome插件 web_robot之我的看板","catalog":true,"date":"2020-12-01T11:31:43.000Z","_content":"\n## 前言\n\n这次是web-robot这个插件的2.0的迭代。\n主要实现了基于事务的看板。也实现了简易看板模式。\n（看板为浏览器新标签页）\n\n看板截图\n![dashboard](/img/mypost/web_robot_dashboard.jpg)\n\n这几个元素分别来自于\n- 百度天气：https://www.baidu.com/s?ie=UTF-8&wd=%E5%A4%A9%E6%B0%94\n- 天天基金：https://fund.eastmoney.com/\n- 微博热搜：https://s.weibo.com/top/summary?cate=realtimehot\n- 知乎热门：https://www.zhihu.com/hot\n- web_robot：https://github.com/webgjc/web_robot\n\n\n## 插件的一些定义\n\n粒度从细到广\n\n- 事件：一个浏览器**动作**，比如点击，设值，开关页面等。\n- 事务：多个**事件**的合集，可以整体运行一套流程。如打开页面，设值xx，点击xx，关闭页面/展示到看板。\n- 看板：多个**事务**的合集。每个事务表示看板上一个元素。\n\n\n## 看板使用\n\n首先github上下载源码\n\n> git clone https://github.com/webgjc/web_robot.git\n\nchrome浏览器点击右边更多，更多工具，扩展程序  \n或访问\n> chrome://extensions/\n\n开启开发者模式，点击加载已解压的扩展程序  \n选择刚刚克隆下来的文件夹，确认即可\n\n点开插件如下：\n\n![web_robot](/img/mypost/web_robot_1201.jpg)\n\n### 关闭看板\n\n看板默认为开启状态，如果想要关闭\n\n将插件源码中跟目录下的 **manifest.json** 中最下方的这块删掉，  \n重新加载一下插件\n```\n\"chrome_url_overrides\": {\n    \"newtab\": \"html/newtab.html\"\n}\n```\n\n### 简易模式\n\n点击 开启简单看板模式\n\n这边以百度天气为例：\n\n打开：https://www.baidu.com/s?ie=UTF-8&wd=%E5%A4%A9%E6%B0%94\n\n如下：\n![baidutianqi](/img/mypost/web_robot_baidutianqi.jpg)\n\n点开插件\n![jiandankanban](/img/mypost/web_robot_jiandankanban.jpg)\n\n点击页面添加看板，鼠标在页面移动可以看到粉色边框\n\n![web_robot_xuanze](/img/mypost/web_robot_xuanze.jpg)\n\n点击后可以看到选择器列表，从上往下分别是子元素到父元素的选择器\n\n![web_robot_xuanzeqi](/img/mypost/web_robot_xuanzeqi.jpg)\n\n移动选择器可以在页面看到对应的粉色蒙版\n\n点击后，点击确认添加到看板，则可以将对应选择的元素加到看板中  \n打开新页，就可以看到刚刚加的元素。\n\n将鼠标移到页面上面中间，则会出现排版和重置。\n\n![web_robot_new_tab](/img/mypost/web_robot_new_tab.jpg)\n\n点击排版可以配置一个元素框的大小。  \n(不会改变内部元素的大小，只改变看的框)\n\n可以调整位置和大小，或者删除元素。\n\n![web_robot_paiban.jpg](/img/mypost/web_robot_paiban.jpg)\n\n多加几个即可达到页面初的效果。\n\n### 复杂模式\n\n参考\n[教程1，最初教程](/article/article_18_chrome插件-网页自动化/)\n[教程2，进阶教程](/article/article_21_chrome插件-WEB-ROBOT/)\n\n\n添加到看板对事务的要求为\n- 流程事务\n- 第一个事件为当页跳转 pagejump\n- 最后一个事件为唯一展示 onlyshow\n\n中间可以添加各种点击设值事件。\n\n定义完后，重新打开插件，可看到定义的事务有一个选项叫  \n添加看板，点击后则可以将对应元素加到看板中。\n\n![web_robot_add_dshb](/img/mypost/web_robot_add_dshb.jpg)\n\n这边以加一个live2d为例，效果如下\n\n![web_robot_live2d1](/img/mypost/web_robot_live2d1.jpg)\n\n可以直接复制导入这个配置食用\n\n``` json\n{\"add_dashboard\":true,\"case_name\":\"live2d\",\"case_process\":[{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"pagejump\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"onlyshow\",\"tag\":\"#live2d-widget\",\"value\":\"\",\"wait\":\"0.5\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n自行定义的话首先在插件主页中 新增一个流程事务。\n\n然后点进去详情，新增一个当页跳转事件，跳转 http://blog.ganjiacheng.cn/ 这个地址\n\n然后新增一个唯一展示事件，找到live2d的标签，这里是 #live2d-widget，定义为唯一展示onlyshow\n\n定义完如下\n\n![web_robot_live2d](/img/mypost/web_robot_live2d.jpg)\n\n保存后在主页中点击添加到看板\n\n后续看板中的管理和上面简易模式一致。\n\n","source":"_posts/2020/article_31_chrome插件-WEB-ROBOT之我的看板.md","raw":"---\ntitle: chrome插件 web_robot之我的看板\ncatalog: true\ndate: 2020-12-01 19:31:43\ntags:\n    - CHROME插件\n    - 自动化\n---\n\n## 前言\n\n这次是web-robot这个插件的2.0的迭代。\n主要实现了基于事务的看板。也实现了简易看板模式。\n（看板为浏览器新标签页）\n\n看板截图\n![dashboard](/img/mypost/web_robot_dashboard.jpg)\n\n这几个元素分别来自于\n- 百度天气：https://www.baidu.com/s?ie=UTF-8&wd=%E5%A4%A9%E6%B0%94\n- 天天基金：https://fund.eastmoney.com/\n- 微博热搜：https://s.weibo.com/top/summary?cate=realtimehot\n- 知乎热门：https://www.zhihu.com/hot\n- web_robot：https://github.com/webgjc/web_robot\n\n\n## 插件的一些定义\n\n粒度从细到广\n\n- 事件：一个浏览器**动作**，比如点击，设值，开关页面等。\n- 事务：多个**事件**的合集，可以整体运行一套流程。如打开页面，设值xx，点击xx，关闭页面/展示到看板。\n- 看板：多个**事务**的合集。每个事务表示看板上一个元素。\n\n\n## 看板使用\n\n首先github上下载源码\n\n> git clone https://github.com/webgjc/web_robot.git\n\nchrome浏览器点击右边更多，更多工具，扩展程序  \n或访问\n> chrome://extensions/\n\n开启开发者模式，点击加载已解压的扩展程序  \n选择刚刚克隆下来的文件夹，确认即可\n\n点开插件如下：\n\n![web_robot](/img/mypost/web_robot_1201.jpg)\n\n### 关闭看板\n\n看板默认为开启状态，如果想要关闭\n\n将插件源码中跟目录下的 **manifest.json** 中最下方的这块删掉，  \n重新加载一下插件\n```\n\"chrome_url_overrides\": {\n    \"newtab\": \"html/newtab.html\"\n}\n```\n\n### 简易模式\n\n点击 开启简单看板模式\n\n这边以百度天气为例：\n\n打开：https://www.baidu.com/s?ie=UTF-8&wd=%E5%A4%A9%E6%B0%94\n\n如下：\n![baidutianqi](/img/mypost/web_robot_baidutianqi.jpg)\n\n点开插件\n![jiandankanban](/img/mypost/web_robot_jiandankanban.jpg)\n\n点击页面添加看板，鼠标在页面移动可以看到粉色边框\n\n![web_robot_xuanze](/img/mypost/web_robot_xuanze.jpg)\n\n点击后可以看到选择器列表，从上往下分别是子元素到父元素的选择器\n\n![web_robot_xuanzeqi](/img/mypost/web_robot_xuanzeqi.jpg)\n\n移动选择器可以在页面看到对应的粉色蒙版\n\n点击后，点击确认添加到看板，则可以将对应选择的元素加到看板中  \n打开新页，就可以看到刚刚加的元素。\n\n将鼠标移到页面上面中间，则会出现排版和重置。\n\n![web_robot_new_tab](/img/mypost/web_robot_new_tab.jpg)\n\n点击排版可以配置一个元素框的大小。  \n(不会改变内部元素的大小，只改变看的框)\n\n可以调整位置和大小，或者删除元素。\n\n![web_robot_paiban.jpg](/img/mypost/web_robot_paiban.jpg)\n\n多加几个即可达到页面初的效果。\n\n### 复杂模式\n\n参考\n[教程1，最初教程](/article/article_18_chrome插件-网页自动化/)\n[教程2，进阶教程](/article/article_21_chrome插件-WEB-ROBOT/)\n\n\n添加到看板对事务的要求为\n- 流程事务\n- 第一个事件为当页跳转 pagejump\n- 最后一个事件为唯一展示 onlyshow\n\n中间可以添加各种点击设值事件。\n\n定义完后，重新打开插件，可看到定义的事务有一个选项叫  \n添加看板，点击后则可以将对应元素加到看板中。\n\n![web_robot_add_dshb](/img/mypost/web_robot_add_dshb.jpg)\n\n这边以加一个live2d为例，效果如下\n\n![web_robot_live2d1](/img/mypost/web_robot_live2d1.jpg)\n\n可以直接复制导入这个配置食用\n\n``` json\n{\"add_dashboard\":true,\"case_name\":\"live2d\",\"case_process\":[{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"pagejump\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"onlyshow\",\"tag\":\"#live2d-widget\",\"value\":\"\",\"wait\":\"0.5\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n自行定义的话首先在插件主页中 新增一个流程事务。\n\n然后点进去详情，新增一个当页跳转事件，跳转 http://blog.ganjiacheng.cn/ 这个地址\n\n然后新增一个唯一展示事件，找到live2d的标签，这里是 #live2d-widget，定义为唯一展示onlyshow\n\n定义完如下\n\n![web_robot_live2d](/img/mypost/web_robot_live2d.jpg)\n\n保存后在主页中点击添加到看板\n\n后续看板中的管理和上面简易模式一致。\n\n","slug":"2020/article_31_chrome插件-WEB-ROBOT之我的看板","published":1,"updated":"2021-01-27T04:46:28.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh762003r0770cz93un2w","content":"<h2 id=\"前言\">前言</h2>\n<p>这次是web-robot这个插件的2.0的迭代。<br>\n主要实现了基于事务的看板。也实现了简易看板模式。<br>\n（看板为浏览器新标签页）</p>\n<p>看板截图<br>\n<img src=\"/img/mypost/web_robot_dashboard.jpg\" alt=\"dashboard\"></p>\n<p>这几个元素分别来自于</p>\n<ul>\n<li>百度天气：<a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94\" target=\"_blank\" rel=\"external\">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></li>\n<li>天天基金：<a href=\"https://fund.eastmoney.com/\" target=\"_blank\" rel=\"external\">https://fund.eastmoney.com/</a></li>\n<li>微博热搜：<a href=\"https://s.weibo.com/top/summary?cate=realtimehot\" target=\"_blank\" rel=\"external\">https://s.weibo.com/top/summary?cate=realtimehot</a></li>\n<li>知乎热门：<a href=\"https://www.zhihu.com/hot\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/hot</a></li>\n<li>web_robot：<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot</a></li>\n</ul>\n<h2 id=\"插件的一些定义\">插件的一些定义</h2>\n<p>粒度从细到广</p>\n<ul>\n<li>事件：一个浏览器<strong>动作</strong>，比如点击，设值，开关页面等。</li>\n<li>事务：多个<strong>事件</strong>的合集，可以整体运行一套流程。如打开页面，设值xx，点击xx，关闭页面/展示到看板。</li>\n<li>看板：多个<strong>事务</strong>的合集。每个事务表示看板上一个元素。</li>\n</ul>\n<h2 id=\"看板使用\">看板使用</h2>\n<p>首先github上下载源码</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>chrome浏览器点击右边更多，更多工具，扩展程序<br>\n或访问</p>\n<blockquote>\n<p>chrome://extensions/</p>\n</blockquote>\n<p>开启开发者模式，点击加载已解压的扩展程序<br>\n选择刚刚克隆下来的文件夹，确认即可</p>\n<p>点开插件如下：</p>\n<p><img src=\"/img/mypost/web_robot_1201.jpg\" alt=\"web_robot\"></p>\n<h3 id=\"关闭看板\">关闭看板</h3>\n<p>看板默认为开启状态，如果想要关闭</p>\n<p>将插件源码中跟目录下的 <strong>manifest.json</strong> 中最下方的这块删掉，<br>\n重新加载一下插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;chrome_url_overrides&quot;: &#123;</span><br><span class=\"line\">    &quot;newtab&quot;: &quot;html/newtab.html&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简易模式\">简易模式</h3>\n<p>点击 开启简单看板模式</p>\n<p>这边以百度天气为例：</p>\n<p>打开：<a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94\" target=\"_blank\" rel=\"external\">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></p>\n<p>如下：<br>\n<img src=\"/img/mypost/web_robot_baidutianqi.jpg\" alt=\"baidutianqi\"></p>\n<p>点开插件<br>\n<img src=\"/img/mypost/web_robot_jiandankanban.jpg\" alt=\"jiandankanban\"></p>\n<p>点击页面添加看板，鼠标在页面移动可以看到粉色边框</p>\n<p><img src=\"/img/mypost/web_robot_xuanze.jpg\" alt=\"web_robot_xuanze\"></p>\n<p>点击后可以看到选择器列表，从上往下分别是子元素到父元素的选择器</p>\n<p><img src=\"/img/mypost/web_robot_xuanzeqi.jpg\" alt=\"web_robot_xuanzeqi\"></p>\n<p>移动选择器可以在页面看到对应的粉色蒙版</p>\n<p>点击后，点击确认添加到看板，则可以将对应选择的元素加到看板中<br>\n打开新页，就可以看到刚刚加的元素。</p>\n<p>将鼠标移到页面上面中间，则会出现排版和重置。</p>\n<p><img src=\"/img/mypost/web_robot_new_tab.jpg\" alt=\"web_robot_new_tab\"></p>\n<p>点击排版可以配置一个元素框的大小。<br>\n(不会改变内部元素的大小，只改变看的框)</p>\n<p>可以调整位置和大小，或者删除元素。</p>\n<p><img src=\"/img/mypost/web_robot_paiban.jpg\" alt=\"web_robot_paiban.jpg\"></p>\n<p>多加几个即可达到页面初的效果。</p>\n<h3 id=\"复杂模式\">复杂模式</h3>\n<p>参考<br>\n<a href=\"/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/\">教程1，最初教程</a><br>\n<a href=\"/article/article_21_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT/\">教程2，进阶教程</a></p>\n<p>添加到看板对事务的要求为</p>\n<ul>\n<li>流程事务</li>\n<li>第一个事件为当页跳转 pagejump</li>\n<li>最后一个事件为唯一展示 onlyshow</li>\n</ul>\n<p>中间可以添加各种点击设值事件。</p>\n<p>定义完后，重新打开插件，可看到定义的事务有一个选项叫<br>\n添加看板，点击后则可以将对应元素加到看板中。</p>\n<p><img src=\"/img/mypost/web_robot_add_dshb.jpg\" alt=\"web_robot_add_dshb\"></p>\n<p>这边以加一个live2d为例，效果如下</p>\n<p><img src=\"/img/mypost/web_robot_live2d1.jpg\" alt=\"web_robot_live2d1\"></p>\n<p>可以直接复制导入这个配置食用</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"add_dashboard\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"live2d\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"pagejump\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"onlyshow\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"#live2d-widget\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0.5\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>自行定义的话首先在插件主页中 新增一个流程事务。</p>\n<p>然后点进去详情，新增一个当页跳转事件，跳转 <a href=\"http://blog.ganjiacheng.cn/\" target=\"_blank\" rel=\"external\">http://blog.ganjiacheng.cn/</a> 这个地址</p>\n<p>然后新增一个唯一展示事件，找到live2d的标签，这里是 #live2d-widget，定义为唯一展示onlyshow</p>\n<p>定义完如下</p>\n<p><img src=\"/img/mypost/web_robot_live2d.jpg\" alt=\"web_robot_live2d\"></p>\n<p>保存后在主页中点击添加到看板</p>\n<p>后续看板中的管理和上面简易模式一致。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>这次是web-robot这个插件的2.0的迭代。<br>\n主要实现了基于事务的看板。也实现了简易看板模式。<br>\n（看板为浏览器新标签页）</p>\n<p>看板截图<br>\n<img src=\"/img/mypost/web_robot_dashboard.jpg\" alt=\"dashboard\"></p>\n<p>这几个元素分别来自于</p>\n<ul>\n<li>百度天气：<a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94\">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></li>\n<li>天天基金：<a href=\"https://fund.eastmoney.com/\">https://fund.eastmoney.com/</a></li>\n<li>微博热搜：<a href=\"https://s.weibo.com/top/summary?cate=realtimehot\">https://s.weibo.com/top/summary?cate=realtimehot</a></li>\n<li>知乎热门：<a href=\"https://www.zhihu.com/hot\">https://www.zhihu.com/hot</a></li>\n<li>web_robot：<a href=\"https://github.com/webgjc/web_robot\">https://github.com/webgjc/web_robot</a></li>\n</ul>\n<h2>插件的一些定义</h2>\n<p>粒度从细到广</p>\n<ul>\n<li>事件：一个浏览器<strong>动作</strong>，比如点击，设值，开关页面等。</li>\n<li>事务：多个<strong>事件</strong>的合集，可以整体运行一套流程。如打开页面，设值xx，点击xx，关闭页面/展示到看板。</li>\n<li>看板：多个<strong>事务</strong>的合集。每个事务表示看板上一个元素。</li>\n</ul>\n<h2>看板使用</h2>\n<p>首先github上下载源码</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<p>chrome浏览器点击右边更多，更多工具，扩展程序<br>\n或访问</p>\n<blockquote>\n<p>chrome://extensions/</p>\n</blockquote>\n<p>开启开发者模式，点击加载已解压的扩展程序<br>\n选择刚刚克隆下来的文件夹，确认即可</p>\n<p>点开插件如下：</p>\n<p><img src=\"/img/mypost/web_robot_1201.jpg\" alt=\"web_robot\"></p>\n<h3>关闭看板</h3>\n<p>看板默认为开启状态，如果想要关闭</p>\n<p>将插件源码中跟目录下的 <strong>manifest.json</strong> 中最下方的这块删掉，<br>\n重新加载一下插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;chrome_url_overrides&quot;: &#123;</span><br><span class=\"line\">    &quot;newtab&quot;: &quot;html/newtab.html&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>简易模式</h3>\n<p>点击 开启简单看板模式</p>\n<p>这边以百度天气为例：</p>\n<p>打开：<a href=\"https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%A9%E6%B0%94\">https://www.baidu.com/s?ie=UTF-8&amp;wd=天气</a></p>\n<p>如下：<br>\n<img src=\"/img/mypost/web_robot_baidutianqi.jpg\" alt=\"baidutianqi\"></p>\n<p>点开插件<br>\n<img src=\"/img/mypost/web_robot_jiandankanban.jpg\" alt=\"jiandankanban\"></p>\n<p>点击页面添加看板，鼠标在页面移动可以看到粉色边框</p>\n<p><img src=\"/img/mypost/web_robot_xuanze.jpg\" alt=\"web_robot_xuanze\"></p>\n<p>点击后可以看到选择器列表，从上往下分别是子元素到父元素的选择器</p>\n<p><img src=\"/img/mypost/web_robot_xuanzeqi.jpg\" alt=\"web_robot_xuanzeqi\"></p>\n<p>移动选择器可以在页面看到对应的粉色蒙版</p>\n<p>点击后，点击确认添加到看板，则可以将对应选择的元素加到看板中<br>\n打开新页，就可以看到刚刚加的元素。</p>\n<p>将鼠标移到页面上面中间，则会出现排版和重置。</p>\n<p><img src=\"/img/mypost/web_robot_new_tab.jpg\" alt=\"web_robot_new_tab\"></p>\n<p>点击排版可以配置一个元素框的大小。<br>\n(不会改变内部元素的大小，只改变看的框)</p>\n<p>可以调整位置和大小，或者删除元素。</p>\n<p><img src=\"/img/mypost/web_robot_paiban.jpg\" alt=\"web_robot_paiban.jpg\"></p>\n<p>多加几个即可达到页面初的效果。</p>\n<h3>复杂模式</h3>\n<p>参考<br>\n<a href=\"/article/article_18_chrome%E6%8F%92%E4%BB%B6-%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E5%8C%96/\">教程1，最初教程</a><br>\n<a href=\"/article/article_21_chrome%E6%8F%92%E4%BB%B6-WEB-ROBOT/\">教程2，进阶教程</a></p>\n<p>添加到看板对事务的要求为</p>\n<ul>\n<li>流程事务</li>\n<li>第一个事件为当页跳转 pagejump</li>\n<li>最后一个事件为唯一展示 onlyshow</li>\n</ul>\n<p>中间可以添加各种点击设值事件。</p>\n<p>定义完后，重新打开插件，可看到定义的事务有一个选项叫<br>\n添加看板，点击后则可以将对应元素加到看板中。</p>\n<p><img src=\"/img/mypost/web_robot_add_dshb.jpg\" alt=\"web_robot_add_dshb\"></p>\n<p>这边以加一个live2d为例，效果如下</p>\n<p><img src=\"/img/mypost/web_robot_live2d1.jpg\" alt=\"web_robot_live2d1\"></p>\n<p>可以直接复制导入这个配置食用</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"add_dashboard\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"live2d\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"pagejump\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"onlyshow\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"#live2d-widget\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0.5\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>自行定义的话首先在插件主页中 新增一个流程事务。</p>\n<p>然后点进去详情，新增一个当页跳转事件，跳转 <a href=\"http://blog.ganjiacheng.cn/\">http://blog.ganjiacheng.cn/</a> 这个地址</p>\n<p>然后新增一个唯一展示事件，找到live2d的标签，这里是 #live2d-widget，定义为唯一展示onlyshow</p>\n<p>定义完如下</p>\n<p><img src=\"/img/mypost/web_robot_live2d.jpg\" alt=\"web_robot_live2d\"></p>\n<p>保存后在主页中点击添加到看板</p>\n<p>后续看板中的管理和上面简易模式一致。</p>\n"},{"title":"关于网页可视化圈选的一些实现思路","catalog":true,"date":"2020-12-26T11:31:43.000Z","_content":"\n## 前言\n\n可视化圈选是一个较为特别的场景，一般在定义页面事件与埋点的时候用的比较多，  \n这边来讨论下网页中可视化圈选的实现思路。  \n体验的话可以到插件[WEB-ROBOT](https://github.com/webgjc/web_robot)\n\n效果：\n![demo](/img/mypost/robot_demo1.gif)\n\n## 概览\n\n完成可视化圈选大致分为以下几个步骤\n- 捕获鼠标移动事件\n- 给出当前元素的可视化反馈\n- 点击选中元素\n- 转换当前元素的唯一选择器\n\n这边实现大致不同点为，选择器是当前元素和所有父节点元素。  \n最后还需另外选择一下想要的元素。  \n好处是多了一些会漏掉节点，上面的只能是默认最子节点。\n\n## 实现\n\n### 事件捕获\n\n首先确定要重写的监听事件为 mouseover(鼠标移到元素上)，click(点击元素);\n\n在移动的时候，target为当前元素，需要有一个样式变化。  \n同时需要之前的元素样式给去掉。  \n\n然后在点击的时候则需要获取到当前元素和他所有父元素的筛选器。   \n表示已经选中了该字段\n\n下面通过代码来解释  \n也可以直接将这部分代码跑在浏览器console中\n\n```javascript\n// 直接选择dom，圈选\nfunction direct_select_dom(cb) {\n    let last_dom; // 上个元素 \n    let last_dom_border;  // 记录之前的一些css样式\n    let last_dom_boxshadow;\n    let last_dom_zindex;\n    // 监听鼠标移入\n    document.onmouseover = (e) => {\n        // 阻止事件冒泡和阻止默认事件\n        e.stopPropagation();\n        e.preventDefault();\n        if (e.target.id === \"robot_frame\" || e.target.id === \"robot_select\") return;\n        // 存一下样式\n        let tmp = e.target.style.border;\n        let tmp1 = e.target.style.boxShadow;\n        let tmp2 = e.target.style.zIndex;\n        // 当前选中的元素设置为选中样式\n        e.target.style.border = \"solid 2px #ffa3a3\";\n        e.target.style.boxShadow = \"0px 0px 8px 8px #ffa3a3\";\n        e.target.style.zIndex = 999;\n        // 将老元素样式还原\n        if (last_dom !== undefined) {\n            last_dom.style.border = last_dom_border;\n            last_dom.style.boxShadow = last_dom_boxshadow;\n            last_dom.style.zIndex = last_dom_zindex;\n        }\n        // 当前元素设为老元素\n        last_dom = e.target;\n        last_dom_border = tmp;\n        last_dom_boxshadow = tmp1;\n        last_dom_zindex = tmp2;\n    };\n    // 重写点击事件\n    document.addEventListener(\n        \"click\",\n        function (e) {\n            // 阻止原事件和事件冒泡\n            e.stopPropagation();\n            e.preventDefault();\n            // 这边为获取这个元素和他父元素的所有的选择器\n            let dom = e.target;\n            let selectors = [];\n            while (dom.parentElement.parentElement) {\n                if (dom.clientWidth > 0 && dom.clientHeight > 0) {\n                    // 通过dom转选择器的转换函数\n                    let selector = dom_to_selector(document, dom)\n                    selectors.push(`${selector[0]}&${selector[1]}`);\n                }\n                // 遍历所有父节点\n                dom = dom.parentElement;\n            }\n            // 回调\n            cb && cb(selectors, e);\n        },\n        // 关键，在事件捕获阶段就执行，而不是冒泡阶段\n        true\n    );\n}\n```\n\n### dom转selector\n\n这个在baidu基本搜不到这个话题，在google有一些。  \n这边大致说几个实现\n\n#### 当前节点遍历\n\n这个是最初的思路为，  \n\n对一个dom的选择器来说，id优先，class次之，最后是tag  \n\n首先以这些为选择器进行querySelectorAll操作，得到一批符合的节点，然后在遍历选择得到当前相等的节点。\n\n结构模式为\n> #id / .class / tag  \n\n> document.querySelectorAll(selector)[n]\n\n优点是获取方便，  \n但特别依赖dom有唯一id或者class，  \n在tag的时候选择器很容易变。\n\n```js\nfunction get_selector(dom) {\n    let selector;\n    if (dom.id) {\n        selector = `${dom.nodeName}[id=\"${dom.id}\"]`;\n    } else if (dom.class) {\n        selector = `${dom.nodeName}[class=\"${dom.className}\"]`;\n    } else {\n        selector = `${dom.nodeName}`;\n    }\n    let nodelist = document.querySelectorAll(selector);\n    for (i in nodelist) {\n        if (nodelist[i] === dom) {\n            return [selector, i];\n        }\n    }\n    return null;\n}\n```\n\n#### 遍历父节点使用nth-child\n\n这个的思路为先得到这个节点在他父节点的第几个节点，  \n然后父节点继续向上递归，直到body或html节点。\n\n```js\nfunction get_selector(el) {\n    names = [];\n    do {\n        index = 0;\n        var cursorElement = el;\n        while (cursorElement !== null) {\n            ++index;\n            cursorElement = cursorElement.previousElementSibling;\n        }\n        names.unshift(el.tagName + \":nth-child(\" + index + \")\");\n        el = el.parentElement;\n    } while (el !== null);\n\n    return names.join(\" > \");\n}\n```\n\n结构模式为\n> HTML:nth-child(1) > BODY:nth-child(2) > DIV:nth-child(1)\n\n> document.querySelectorAll(selector)\n\n#### 结合优化版\n\n首先还是确定当前节点的选择定位，    \n\n如果是id，则可以确定他是全局唯一的，直接使用，    \n\n如果是class或者tag，则将这个作为他在父节点中的选择器，（替换上面的nth-child）\n\n递归他的父节点，直到body\n\n最后再在全局使用上面的选择器确定他是第几个\n\n这样做优化点与第一个比走了递归父节点的模式，可以在tag和class时更加精确。  \n与第二个比加入了id直接确定的模式，也改进了使用nth-child在动态数据节点不精确\n\n```js\nfunction dom_to_selector(dom) {\n    let names = [];\n    let dombak = dom;\n    do {\n        if (!dom || !dom.parentElement) break;\n        // 有id就直接用id\n        if (dom.id && isNaN(Number(dom.id[0]))) {\n            names.unshift(`${dom.tagName}#${dom.id}`);\n            break;\n        } else {\n            let tmp;\n            let classNames = [];\n            for (let i = 0; i < dom.classList.length; i++) {\n                classNames.push(dom.classList[i]);\n            }\n            // 有class用class，否则tag\n            if (classNames.length > 0) {\n                tmp = `${dom.tagName}.${classNames.join(\".\")}`;\n            } else {\n                tmp = `${dom.tagName}`;\n            }\n            names.unshift(tmp);\n        }\n        // 递归父节点\n        dom = dom.parentElement;\n    } while (dom !== null);\n    let selector = names.join(\" > \");\n    let nodes = document.querySelectorAll(selector);\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i] === dombak) {\n            return [selector, i];\n        }\n    }\n}\n```\n\n结构模式为\n\n> \"BODY > ARTICLE > DIV.container > DIV.row > DIV.col…iner > FIGURE.highlight.js > DIV.table-responsive\", 0\n\n或者如\n\n> \"H2#id\", 0\n\n使用\n> document.querySelectorAll(selector)[n]","source":"_posts/2020/article_33_可视化圈选一些实现思路.md","raw":"---\ntitle: 关于网页可视化圈选的一些实现思路\ncatalog: true\ndate: 2020-12-26 19:31:43\ntags:\n    - CHROME插件\n    - 自动化\n---\n\n## 前言\n\n可视化圈选是一个较为特别的场景，一般在定义页面事件与埋点的时候用的比较多，  \n这边来讨论下网页中可视化圈选的实现思路。  \n体验的话可以到插件[WEB-ROBOT](https://github.com/webgjc/web_robot)\n\n效果：\n![demo](/img/mypost/robot_demo1.gif)\n\n## 概览\n\n完成可视化圈选大致分为以下几个步骤\n- 捕获鼠标移动事件\n- 给出当前元素的可视化反馈\n- 点击选中元素\n- 转换当前元素的唯一选择器\n\n这边实现大致不同点为，选择器是当前元素和所有父节点元素。  \n最后还需另外选择一下想要的元素。  \n好处是多了一些会漏掉节点，上面的只能是默认最子节点。\n\n## 实现\n\n### 事件捕获\n\n首先确定要重写的监听事件为 mouseover(鼠标移到元素上)，click(点击元素);\n\n在移动的时候，target为当前元素，需要有一个样式变化。  \n同时需要之前的元素样式给去掉。  \n\n然后在点击的时候则需要获取到当前元素和他所有父元素的筛选器。   \n表示已经选中了该字段\n\n下面通过代码来解释  \n也可以直接将这部分代码跑在浏览器console中\n\n```javascript\n// 直接选择dom，圈选\nfunction direct_select_dom(cb) {\n    let last_dom; // 上个元素 \n    let last_dom_border;  // 记录之前的一些css样式\n    let last_dom_boxshadow;\n    let last_dom_zindex;\n    // 监听鼠标移入\n    document.onmouseover = (e) => {\n        // 阻止事件冒泡和阻止默认事件\n        e.stopPropagation();\n        e.preventDefault();\n        if (e.target.id === \"robot_frame\" || e.target.id === \"robot_select\") return;\n        // 存一下样式\n        let tmp = e.target.style.border;\n        let tmp1 = e.target.style.boxShadow;\n        let tmp2 = e.target.style.zIndex;\n        // 当前选中的元素设置为选中样式\n        e.target.style.border = \"solid 2px #ffa3a3\";\n        e.target.style.boxShadow = \"0px 0px 8px 8px #ffa3a3\";\n        e.target.style.zIndex = 999;\n        // 将老元素样式还原\n        if (last_dom !== undefined) {\n            last_dom.style.border = last_dom_border;\n            last_dom.style.boxShadow = last_dom_boxshadow;\n            last_dom.style.zIndex = last_dom_zindex;\n        }\n        // 当前元素设为老元素\n        last_dom = e.target;\n        last_dom_border = tmp;\n        last_dom_boxshadow = tmp1;\n        last_dom_zindex = tmp2;\n    };\n    // 重写点击事件\n    document.addEventListener(\n        \"click\",\n        function (e) {\n            // 阻止原事件和事件冒泡\n            e.stopPropagation();\n            e.preventDefault();\n            // 这边为获取这个元素和他父元素的所有的选择器\n            let dom = e.target;\n            let selectors = [];\n            while (dom.parentElement.parentElement) {\n                if (dom.clientWidth > 0 && dom.clientHeight > 0) {\n                    // 通过dom转选择器的转换函数\n                    let selector = dom_to_selector(document, dom)\n                    selectors.push(`${selector[0]}&${selector[1]}`);\n                }\n                // 遍历所有父节点\n                dom = dom.parentElement;\n            }\n            // 回调\n            cb && cb(selectors, e);\n        },\n        // 关键，在事件捕获阶段就执行，而不是冒泡阶段\n        true\n    );\n}\n```\n\n### dom转selector\n\n这个在baidu基本搜不到这个话题，在google有一些。  \n这边大致说几个实现\n\n#### 当前节点遍历\n\n这个是最初的思路为，  \n\n对一个dom的选择器来说，id优先，class次之，最后是tag  \n\n首先以这些为选择器进行querySelectorAll操作，得到一批符合的节点，然后在遍历选择得到当前相等的节点。\n\n结构模式为\n> #id / .class / tag  \n\n> document.querySelectorAll(selector)[n]\n\n优点是获取方便，  \n但特别依赖dom有唯一id或者class，  \n在tag的时候选择器很容易变。\n\n```js\nfunction get_selector(dom) {\n    let selector;\n    if (dom.id) {\n        selector = `${dom.nodeName}[id=\"${dom.id}\"]`;\n    } else if (dom.class) {\n        selector = `${dom.nodeName}[class=\"${dom.className}\"]`;\n    } else {\n        selector = `${dom.nodeName}`;\n    }\n    let nodelist = document.querySelectorAll(selector);\n    for (i in nodelist) {\n        if (nodelist[i] === dom) {\n            return [selector, i];\n        }\n    }\n    return null;\n}\n```\n\n#### 遍历父节点使用nth-child\n\n这个的思路为先得到这个节点在他父节点的第几个节点，  \n然后父节点继续向上递归，直到body或html节点。\n\n```js\nfunction get_selector(el) {\n    names = [];\n    do {\n        index = 0;\n        var cursorElement = el;\n        while (cursorElement !== null) {\n            ++index;\n            cursorElement = cursorElement.previousElementSibling;\n        }\n        names.unshift(el.tagName + \":nth-child(\" + index + \")\");\n        el = el.parentElement;\n    } while (el !== null);\n\n    return names.join(\" > \");\n}\n```\n\n结构模式为\n> HTML:nth-child(1) > BODY:nth-child(2) > DIV:nth-child(1)\n\n> document.querySelectorAll(selector)\n\n#### 结合优化版\n\n首先还是确定当前节点的选择定位，    \n\n如果是id，则可以确定他是全局唯一的，直接使用，    \n\n如果是class或者tag，则将这个作为他在父节点中的选择器，（替换上面的nth-child）\n\n递归他的父节点，直到body\n\n最后再在全局使用上面的选择器确定他是第几个\n\n这样做优化点与第一个比走了递归父节点的模式，可以在tag和class时更加精确。  \n与第二个比加入了id直接确定的模式，也改进了使用nth-child在动态数据节点不精确\n\n```js\nfunction dom_to_selector(dom) {\n    let names = [];\n    let dombak = dom;\n    do {\n        if (!dom || !dom.parentElement) break;\n        // 有id就直接用id\n        if (dom.id && isNaN(Number(dom.id[0]))) {\n            names.unshift(`${dom.tagName}#${dom.id}`);\n            break;\n        } else {\n            let tmp;\n            let classNames = [];\n            for (let i = 0; i < dom.classList.length; i++) {\n                classNames.push(dom.classList[i]);\n            }\n            // 有class用class，否则tag\n            if (classNames.length > 0) {\n                tmp = `${dom.tagName}.${classNames.join(\".\")}`;\n            } else {\n                tmp = `${dom.tagName}`;\n            }\n            names.unshift(tmp);\n        }\n        // 递归父节点\n        dom = dom.parentElement;\n    } while (dom !== null);\n    let selector = names.join(\" > \");\n    let nodes = document.querySelectorAll(selector);\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i] === dombak) {\n            return [selector, i];\n        }\n    }\n}\n```\n\n结构模式为\n\n> \"BODY > ARTICLE > DIV.container > DIV.row > DIV.col…iner > FIGURE.highlight.js > DIV.table-responsive\", 0\n\n或者如\n\n> \"H2#id\", 0\n\n使用\n> document.querySelectorAll(selector)[n]","slug":"2020/article_33_可视化圈选一些实现思路","published":1,"updated":"2021-01-27T04:46:28.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh762003t0770t92m3gfr","content":"<h2 id=\"前言\">前言</h2>\n<p>可视化圈选是一个较为特别的场景，一般在定义页面事件与埋点的时候用的比较多，<br>\n这边来讨论下网页中可视化圈选的实现思路。<br>\n体验的话可以到插件<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">WEB-ROBOT</a></p>\n<p>效果：<br>\n<img src=\"/img/mypost/robot_demo1.gif\" alt=\"demo\"></p>\n<h2 id=\"概览\">概览</h2>\n<p>完成可视化圈选大致分为以下几个步骤</p>\n<ul>\n<li>捕获鼠标移动事件</li>\n<li>给出当前元素的可视化反馈</li>\n<li>点击选中元素</li>\n<li>转换当前元素的唯一选择器</li>\n</ul>\n<p>这边实现大致不同点为，选择器是当前元素和所有父节点元素。<br>\n最后还需另外选择一下想要的元素。<br>\n好处是多了一些会漏掉节点，上面的只能是默认最子节点。</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"事件捕获\">事件捕获</h3>\n<p>首先确定要重写的监听事件为 mouseover(鼠标移到元素上)，click(点击元素);</p>\n<p>在移动的时候，target为当前元素，需要有一个样式变化。<br>\n同时需要之前的元素样式给去掉。</p>\n<p>然后在点击的时候则需要获取到当前元素和他所有父元素的筛选器。<br>\n表示已经选中了该字段</p>\n<p>下面通过代码来解释<br>\n也可以直接将这部分代码跑在浏览器console中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接选择dom，圈选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">direct_select_dom</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom; <span class=\"comment\">// 上个元素 </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_border;  <span class=\"comment\">// 记录之前的一些css样式</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_boxshadow;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_zindex;</span><br><span class=\"line\">    <span class=\"comment\">// 监听鼠标移入</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.onmouseover = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 阻止事件冒泡和阻止默认事件</span></span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.target.id === <span class=\"string\">\"robot_frame\"</span> || e.target.id === <span class=\"string\">\"robot_select\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 存一下样式</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = e.target.style.border;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp1 = e.target.style.boxShadow;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp2 = e.target.style.zIndex;</span><br><span class=\"line\">        <span class=\"comment\">// 当前选中的元素设置为选中样式</span></span><br><span class=\"line\">        e.target.style.border = <span class=\"string\">\"solid 2px #ffa3a3\"</span>;</span><br><span class=\"line\">        e.target.style.boxShadow = <span class=\"string\">\"0px 0px 8px 8px #ffa3a3\"</span>;</span><br><span class=\"line\">        e.target.style.zIndex = <span class=\"number\">999</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将老元素样式还原</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last_dom !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            last_dom.style.border = last_dom_border;</span><br><span class=\"line\">            last_dom.style.boxShadow = last_dom_boxshadow;</span><br><span class=\"line\">            last_dom.style.zIndex = last_dom_zindex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前元素设为老元素</span></span><br><span class=\"line\">        last_dom = e.target;</span><br><span class=\"line\">        last_dom_border = tmp;</span><br><span class=\"line\">        last_dom_boxshadow = tmp1;</span><br><span class=\"line\">        last_dom_zindex = tmp2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 重写点击事件</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">        <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 阻止原事件和事件冒泡</span></span><br><span class=\"line\">            e.stopPropagation();</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            <span class=\"comment\">// 这边为获取这个元素和他父元素的所有的选择器</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> dom = e.target;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> selectors = [];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (dom.parentElement.parentElement) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dom.clientWidth &gt; <span class=\"number\">0</span> &amp;&amp; dom.clientHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 通过dom转选择器的转换函数</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> selector = dom_to_selector(<span class=\"built_in\">document</span>, dom)</span><br><span class=\"line\">                    selectors.push(<span class=\"string\">`<span class=\"subst\">$&#123;selector[<span class=\"number\">0</span>]&#125;</span>&amp;<span class=\"subst\">$&#123;selector[<span class=\"number\">1</span>]&#125;</span>`</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历所有父节点</span></span><br><span class=\"line\">                dom = dom.parentElement;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 回调</span></span><br><span class=\"line\">            cb &amp;&amp; cb(selectors, e);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 关键，在事件捕获阶段就执行，而不是冒泡阶段</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dom转selector\">dom转selector</h3>\n<p>这个在baidu基本搜不到这个话题，在google有一些。<br>\n这边大致说几个实现</p>\n<h4 id=\"当前节点遍历\">当前节点遍历</h4>\n<p>这个是最初的思路为，</p>\n<p>对一个dom的选择器来说，id优先，class次之，最后是tag</p>\n<p>首先以这些为选择器进行querySelectorAll操作，得到一批符合的节点，然后在遍历选择得到当前相等的节点。</p>\n<p>结构模式为</p>\n<blockquote>\n<p>#id / .class / tag</p>\n</blockquote>\n<blockquote>\n<p>document.querySelectorAll(selector)[n]</p>\n</blockquote>\n<p>优点是获取方便，<br>\n但特别依赖dom有唯一id或者class，<br>\n在tag的时候选择器很容易变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_selector</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selector;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dom.id) &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>[id=\"<span class=\"subst\">$&#123;dom.id&#125;</span>\"]`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dom.class) &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>[class=\"<span class=\"subst\">$&#123;dom.className&#125;</span>\"]`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> nodelist) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodelist[i] === dom) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [selector, i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历父节点使用nth-child\">遍历父节点使用nth-child</h4>\n<p>这个的思路为先得到这个节点在他父节点的第几个节点，<br>\n然后父节点继续向上递归，直到body或html节点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_selector</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    names = [];</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorElement = el;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cursorElement !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">            cursorElement = cursorElement.previousElementSibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        names.unshift(el.tagName + <span class=\"string\">\":nth-child(\"</span> + index + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">        el = el.parentElement;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (el !== <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.join(<span class=\"string\">\" &gt; \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构模式为</p>\n<blockquote>\n<p>HTML:nth-child(1) &gt; BODY:nth-child(2) &gt; DIV:nth-child(1)</p>\n</blockquote>\n<blockquote>\n<p>document.querySelectorAll(selector)</p>\n</blockquote>\n<h4 id=\"结合优化版\">结合优化版</h4>\n<p>首先还是确定当前节点的选择定位，</p>\n<p>如果是id，则可以确定他是全局唯一的，直接使用，</p>\n<p>如果是class或者tag，则将这个作为他在父节点中的选择器，（替换上面的nth-child）</p>\n<p>递归他的父节点，直到body</p>\n<p>最后再在全局使用上面的选择器确定他是第几个</p>\n<p>这样做优化点与第一个比走了递归父节点的模式，可以在tag和class时更加精确。<br>\n与第二个比加入了id直接确定的模式，也改进了使用nth-child在动态数据节点不精确</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dom_to_selector</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dombak = dom;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dom || !dom.parentElement) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 有id就直接用id</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dom.id &amp;&amp; <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(dom.id[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">            names.unshift(<span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>#<span class=\"subst\">$&#123;dom.id&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> classNames = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dom.classList.length; i++) &#123;</span><br><span class=\"line\">                classNames.push(dom.classList[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 有class用class，否则tag</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classNames.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>.<span class=\"subst\">$&#123;classNames.join(<span class=\"string\">\".\"</span>)&#125;</span>`</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            names.unshift(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归父节点</span></span><br><span class=\"line\">        dom = dom.parentElement;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (dom !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selector = names.join(<span class=\"string\">\" &gt; \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes[i] === dombak) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [selector, i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构模式为</p>\n<blockquote>\n<p>“BODY &gt; ARTICLE &gt; DIV.container &gt; DIV.row &gt; DIV.col…iner &gt; FIGURE.highlight.js &gt; DIV.table-responsive”, 0</p>\n</blockquote>\n<p>或者如</p>\n<blockquote>\n<p>“H2#id”, 0</p>\n</blockquote>\n<p>使用</p>\n<blockquote>\n<p>document.querySelectorAll(selector)[n]</p>\n</blockquote>\n","excerpt":"","more":"<h2>前言</h2>\n<p>可视化圈选是一个较为特别的场景，一般在定义页面事件与埋点的时候用的比较多，<br>\n这边来讨论下网页中可视化圈选的实现思路。<br>\n体验的话可以到插件<a href=\"https://github.com/webgjc/web_robot\">WEB-ROBOT</a></p>\n<p>效果：<br>\n<img src=\"/img/mypost/robot_demo1.gif\" alt=\"demo\"></p>\n<h2>概览</h2>\n<p>完成可视化圈选大致分为以下几个步骤</p>\n<ul>\n<li>捕获鼠标移动事件</li>\n<li>给出当前元素的可视化反馈</li>\n<li>点击选中元素</li>\n<li>转换当前元素的唯一选择器</li>\n</ul>\n<p>这边实现大致不同点为，选择器是当前元素和所有父节点元素。<br>\n最后还需另外选择一下想要的元素。<br>\n好处是多了一些会漏掉节点，上面的只能是默认最子节点。</p>\n<h2>实现</h2>\n<h3>事件捕获</h3>\n<p>首先确定要重写的监听事件为 mouseover(鼠标移到元素上)，click(点击元素);</p>\n<p>在移动的时候，target为当前元素，需要有一个样式变化。<br>\n同时需要之前的元素样式给去掉。</p>\n<p>然后在点击的时候则需要获取到当前元素和他所有父元素的筛选器。<br>\n表示已经选中了该字段</p>\n<p>下面通过代码来解释<br>\n也可以直接将这部分代码跑在浏览器console中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接选择dom，圈选</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">direct_select_dom</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom; <span class=\"comment\">// 上个元素 </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_border;  <span class=\"comment\">// 记录之前的一些css样式</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_boxshadow;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last_dom_zindex;</span><br><span class=\"line\">    <span class=\"comment\">// 监听鼠标移入</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.onmouseover = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 阻止事件冒泡和阻止默认事件</span></span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.target.id === <span class=\"string\">\"robot_frame\"</span> || e.target.id === <span class=\"string\">\"robot_select\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 存一下样式</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = e.target.style.border;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp1 = e.target.style.boxShadow;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp2 = e.target.style.zIndex;</span><br><span class=\"line\">        <span class=\"comment\">// 当前选中的元素设置为选中样式</span></span><br><span class=\"line\">        e.target.style.border = <span class=\"string\">\"solid 2px #ffa3a3\"</span>;</span><br><span class=\"line\">        e.target.style.boxShadow = <span class=\"string\">\"0px 0px 8px 8px #ffa3a3\"</span>;</span><br><span class=\"line\">        e.target.style.zIndex = <span class=\"number\">999</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将老元素样式还原</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last_dom !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            last_dom.style.border = last_dom_border;</span><br><span class=\"line\">            last_dom.style.boxShadow = last_dom_boxshadow;</span><br><span class=\"line\">            last_dom.style.zIndex = last_dom_zindex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前元素设为老元素</span></span><br><span class=\"line\">        last_dom = e.target;</span><br><span class=\"line\">        last_dom_border = tmp;</span><br><span class=\"line\">        last_dom_boxshadow = tmp1;</span><br><span class=\"line\">        last_dom_zindex = tmp2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 重写点击事件</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">        <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 阻止原事件和事件冒泡</span></span><br><span class=\"line\">            e.stopPropagation();</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            <span class=\"comment\">// 这边为获取这个元素和他父元素的所有的选择器</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> dom = e.target;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> selectors = [];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (dom.parentElement.parentElement) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dom.clientWidth &gt; <span class=\"number\">0</span> &amp;&amp; dom.clientHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 通过dom转选择器的转换函数</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> selector = dom_to_selector(<span class=\"built_in\">document</span>, dom)</span><br><span class=\"line\">                    selectors.push(<span class=\"string\">`<span class=\"subst\">$&#123;selector[<span class=\"number\">0</span>]&#125;</span>&amp;<span class=\"subst\">$&#123;selector[<span class=\"number\">1</span>]&#125;</span>`</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 遍历所有父节点</span></span><br><span class=\"line\">                dom = dom.parentElement;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 回调</span></span><br><span class=\"line\">            cb &amp;&amp; cb(selectors, e);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 关键，在事件捕获阶段就执行，而不是冒泡阶段</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>dom转selector</h3>\n<p>这个在baidu基本搜不到这个话题，在google有一些。<br>\n这边大致说几个实现</p>\n<h4>当前节点遍历</h4>\n<p>这个是最初的思路为，</p>\n<p>对一个dom的选择器来说，id优先，class次之，最后是tag</p>\n<p>首先以这些为选择器进行querySelectorAll操作，得到一批符合的节点，然后在遍历选择得到当前相等的节点。</p>\n<p>结构模式为</p>\n<blockquote>\n<p>#id / .class / tag</p>\n</blockquote>\n<blockquote>\n<p>document.querySelectorAll(selector)[n]</p>\n</blockquote>\n<p>优点是获取方便，<br>\n但特别依赖dom有唯一id或者class，<br>\n在tag的时候选择器很容易变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_selector</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selector;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dom.id) &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>[id=\"<span class=\"subst\">$&#123;dom.id&#125;</span>\"]`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dom.class) &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>[class=\"<span class=\"subst\">$&#123;dom.className&#125;</span>\"]`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        selector = <span class=\"string\">`<span class=\"subst\">$&#123;dom.nodeName&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> nodelist) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodelist[i] === dom) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [selector, i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>遍历父节点使用nth-child</h4>\n<p>这个的思路为先得到这个节点在他父节点的第几个节点，<br>\n然后父节点继续向上递归，直到body或html节点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_selector</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    names = [];</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cursorElement = el;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cursorElement !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">            cursorElement = cursorElement.previousElementSibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        names.unshift(el.tagName + <span class=\"string\">\":nth-child(\"</span> + index + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">        el = el.parentElement;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (el !== <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.join(<span class=\"string\">\" &gt; \"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构模式为</p>\n<blockquote>\n<p>HTML:nth-child(1) &gt; BODY:nth-child(2) &gt; DIV:nth-child(1)</p>\n</blockquote>\n<blockquote>\n<p>document.querySelectorAll(selector)</p>\n</blockquote>\n<h4>结合优化版</h4>\n<p>首先还是确定当前节点的选择定位，</p>\n<p>如果是id，则可以确定他是全局唯一的，直接使用，</p>\n<p>如果是class或者tag，则将这个作为他在父节点中的选择器，（替换上面的nth-child）</p>\n<p>递归他的父节点，直到body</p>\n<p>最后再在全局使用上面的选择器确定他是第几个</p>\n<p>这样做优化点与第一个比走了递归父节点的模式，可以在tag和class时更加精确。<br>\n与第二个比加入了id直接确定的模式，也改进了使用nth-child在动态数据节点不精确</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dom_to_selector</span>(<span class=\"params\">dom</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dombak = dom;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dom || !dom.parentElement) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 有id就直接用id</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dom.id &amp;&amp; <span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(dom.id[<span class=\"number\">0</span>]))) &#123;</span><br><span class=\"line\">            names.unshift(<span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>#<span class=\"subst\">$&#123;dom.id&#125;</span>`</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> classNames = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dom.classList.length; i++) &#123;</span><br><span class=\"line\">                classNames.push(dom.classList[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 有class用class，否则tag</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classNames.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>.<span class=\"subst\">$&#123;classNames.join(<span class=\"string\">\".\"</span>)&#125;</span>`</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">`<span class=\"subst\">$&#123;dom.tagName&#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            names.unshift(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 递归父节点</span></span><br><span class=\"line\">        dom = dom.parentElement;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (dom !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selector = names.join(<span class=\"string\">\" &gt; \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(selector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nodes[i] === dombak) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [selector, i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构模式为</p>\n<blockquote>\n<p>“BODY &gt; ARTICLE &gt; DIV.container &gt; DIV.row &gt; DIV.col…iner &gt; FIGURE.highlight.js &gt; DIV.table-responsive”, 0</p>\n</blockquote>\n<p>或者如</p>\n<blockquote>\n<p>“H2#id”, 0</p>\n</blockquote>\n<p>使用</p>\n<blockquote>\n<p>document.querySelectorAll(selector)[n]</p>\n</blockquote>\n"},{"title":"HttpClient的Cookie策略引发的隐藏bug定位与修复","catalog":true,"date":"2020-12-27T11:31:43.000Z","_content":"\n## 概述\n\n本文记录一次大概历时半年也没排查出来，时有时无的隐藏bug。  \n大致现象是：**一个用户能访问到别人权限的资源(用户串/权限串)**。\n中间考虑过线程不安全，包的问题，Threadlocal没清除并线程复用导致等，   \n最终还是排查到是Httpclient的连接池的Cookie策略。  \n这个点在开发时特别容易被人忽略。\n\n## 场景还原\n\n### 背景说明\n\n首先大致说下这问题和中间涉及的系统\n\n如下有一个业务系统，  \n他依赖用户系统提供用户信息，权限系统提供权限信息\n![jpg](/img/mypost/article34_1.jpg)\n\n如下是主要流程，当访问接口时，业务系统的拦截器会去用户系统校验登录，   \n将用户信息和cookie保存到threadlocal中，  \n当也需要权限信息时，则将保存的cookie取出来去调用权限系统，获取这个用户的权限信息。\n\n![jpg](/img/mypost/article34_2.jpg)\n\n### 主要问题\n \n问题就出现在这中间 ：  \n**进入用户系统的是用户A，但当他访问权限系统返回的权限却是用户B的**  \n**且此问题不可稳定复现，出现概率不高**\n\n## 排查过程\n\n### 线程不安全问题\n\n由于这边Springboot的Bean用的是单例模式，  \n所以如果一个类定义了一个Hashmap的属性，多个线程之间存取就会出现串的问题\n\n考虑如有部分权限信息存在Hashmap，导致多线程之间取到了他人的。\n\n这个在 review了代码 和 打印了日志 后基本可以排除掉。\n\n### Threadlocal没清除\n\n由于Tomcat管理线程池会复用线程，也就是你的线程在这次请求用了以后，下次还会被别的请求用到，\n\n如果没有清除Threadlocal的话，下次请求中还会保留着你的信息。\n\n这个在经过业务排查之后，  \n\n可以确定在出错的场景下的请求也都会走用户校验将Threadlocal的value重新set一遍，  \n\n因为被覆盖了，就不会存在用了上一个未清除的线程的信息。\n（虽然remove确实是该加的，但并不是导致这个问题真正原因）\n\n### 问题收紧\n\n通过加日志看输入输出，最后将问题收缩到一个函数里，  \n\n如下代码，在打印请求头的时候还可以看到是用户A的cookie，但打印返回却是用户B的权限信息。\n\n```java\n// 获取请求头\nList<Header> headers = getHeaders();\n// 打印头\nlogger.info(JSONObject.toJSONString(headers));\n// 调用权限系统\nString resp = HttpUtils.sendPostRequest(\"权限系统接口\", headers);\n// 打印返回\nlogger.info(resp);\n```\n\n所以最后是考虑原本最不会出问题的发送请求的util出了问题。  \n（原本想一个util总不会保留啥东西吧，不就是每次封装新的header请求嘛）\n\n不看不知道，一看还挺有东西。\n\n### 最终定位\n\n看下边的代码，则是HttpUtil的一部分，定义了一个多线程的http连接管理器。  \n\n```java\nprivate static class HttpClientHolder {\n    // httpclient定义 用的是org.apache.commons.httpclient\n    public static HttpClient httpClient = null;\n\n    // 初始化一个多线程的管理器，\n    // 可以设置最大连接，超时等\n    static {\n        MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n        httpClient = new HttpClient(connectionManager);\n        httpClient.getHttpConnectionManager().getParams().setMaxTotalConnections(MAX_CONN);\n        httpClient.getHttpConnectionManager().getParams().setSoTimeout(MAX_TIME_OUT);\n    }\n\n}\n```\n\n看到这个想必基本就会想到这个错误大概是怎么发生的了。\n\n如下图，httpclient中有两个线程C和D，  \nC处理了用户A的登录，确处理了用户B的权限  \nD处理了用户B的登录，确处理用户A的权限  \n由此导致了开头的问题。\n\n![jpg](/img/mypost/article34_3.jpg)\n\n## 真正原因与解决\n\n经过一定上面的排查已经确定了问题出现的地方为  \n**httpclient的多线程管理中保留了上次请求留下的cookie，并在下次请求时默认带上了。  \n由于这个多线程并与tomcat管理的处理http请求的多线程独立管理，所以存在交叉的情况。**\n\n这边要解决他则需要httpclient不保留cookie即可，每次使用外部带进去的cookie\n\n看了下httpclient可配置的参数，在\n\n> org.apache.commons.httpclient.params.HttpMethodParams\n\n有一个CookiePolicy\n\n> org.apache.commons.httpclient.cookie.CookiePolicy\n\n稍微看下可以发现他可配的一些cookie策略。  \n这边default是RFC2109\n\n\n````java\nstatic {\n    CookiePolicy.registerCookieSpec(DEFAULT, RFC2109Spec.class);\n    CookiePolicy.registerCookieSpec(RFC_2109, RFC2109Spec.class);\n    CookiePolicy.registerCookieSpec(RFC_2965, RFC2965Spec.class);\n    CookiePolicy.registerCookieSpec(BROWSER_COMPATIBILITY, CookieSpecBase.class);\n    CookiePolicy.registerCookieSpec(NETSCAPE, NetscapeDraftSpec.class);\n    CookiePolicy.registerCookieSpec(IGNORE_COOKIES, IgnoreCookiesSpec.class);\n}\n```\n\n搜了下RFC2109这个是个什么鬼\n\n它是个http状态管理协议，具体可以到这看[https://datatracker.ietf.org/doc/rfc2109/](https://datatracker.ietf.org/doc/rfc2109/)\n\n这边引用他摘要的一段话\n\n>This document specifies a way to create a stateful session with HTTP\n   requests and responses.  It describes two new headers, Cookie and\n   Set-Cookie, which carry state information between participating\n   origin servers and user agents.\n\n就是它用cookie来管理一个有状态的会话。\n\n**所以在一个httpclient线程访问登录接口，因为在response header中有set-cookie，它将这个cookie当做一个会话保留了下来。  \n然后线程并没有销毁被其他请求复用，被理解为还是同一个会话，则外部传入的header并没有被应用上。**\n\n### 修复\n\n修复十分方便，只要将这个cookie策略改为IGNORE_COOKIES即可\n```java\nhttpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);\n```\n\n## 一句话\n\n最致命的问题总在就在你觉得不可能有问题的地方。","source":"_posts/2020/article_34_httpClient的cookie策略引发的隐藏bug定位.md","raw":"---\ntitle: HttpClient的Cookie策略引发的隐藏bug定位与修复\ncatalog: true\ndate: 2020-12-27 19:31:43\ntags:\n    - HTTP\n    - 后端\n---\n\n## 概述\n\n本文记录一次大概历时半年也没排查出来，时有时无的隐藏bug。  \n大致现象是：**一个用户能访问到别人权限的资源(用户串/权限串)**。\n中间考虑过线程不安全，包的问题，Threadlocal没清除并线程复用导致等，   \n最终还是排查到是Httpclient的连接池的Cookie策略。  \n这个点在开发时特别容易被人忽略。\n\n## 场景还原\n\n### 背景说明\n\n首先大致说下这问题和中间涉及的系统\n\n如下有一个业务系统，  \n他依赖用户系统提供用户信息，权限系统提供权限信息\n![jpg](/img/mypost/article34_1.jpg)\n\n如下是主要流程，当访问接口时，业务系统的拦截器会去用户系统校验登录，   \n将用户信息和cookie保存到threadlocal中，  \n当也需要权限信息时，则将保存的cookie取出来去调用权限系统，获取这个用户的权限信息。\n\n![jpg](/img/mypost/article34_2.jpg)\n\n### 主要问题\n \n问题就出现在这中间 ：  \n**进入用户系统的是用户A，但当他访问权限系统返回的权限却是用户B的**  \n**且此问题不可稳定复现，出现概率不高**\n\n## 排查过程\n\n### 线程不安全问题\n\n由于这边Springboot的Bean用的是单例模式，  \n所以如果一个类定义了一个Hashmap的属性，多个线程之间存取就会出现串的问题\n\n考虑如有部分权限信息存在Hashmap，导致多线程之间取到了他人的。\n\n这个在 review了代码 和 打印了日志 后基本可以排除掉。\n\n### Threadlocal没清除\n\n由于Tomcat管理线程池会复用线程，也就是你的线程在这次请求用了以后，下次还会被别的请求用到，\n\n如果没有清除Threadlocal的话，下次请求中还会保留着你的信息。\n\n这个在经过业务排查之后，  \n\n可以确定在出错的场景下的请求也都会走用户校验将Threadlocal的value重新set一遍，  \n\n因为被覆盖了，就不会存在用了上一个未清除的线程的信息。\n（虽然remove确实是该加的，但并不是导致这个问题真正原因）\n\n### 问题收紧\n\n通过加日志看输入输出，最后将问题收缩到一个函数里，  \n\n如下代码，在打印请求头的时候还可以看到是用户A的cookie，但打印返回却是用户B的权限信息。\n\n```java\n// 获取请求头\nList<Header> headers = getHeaders();\n// 打印头\nlogger.info(JSONObject.toJSONString(headers));\n// 调用权限系统\nString resp = HttpUtils.sendPostRequest(\"权限系统接口\", headers);\n// 打印返回\nlogger.info(resp);\n```\n\n所以最后是考虑原本最不会出问题的发送请求的util出了问题。  \n（原本想一个util总不会保留啥东西吧，不就是每次封装新的header请求嘛）\n\n不看不知道，一看还挺有东西。\n\n### 最终定位\n\n看下边的代码，则是HttpUtil的一部分，定义了一个多线程的http连接管理器。  \n\n```java\nprivate static class HttpClientHolder {\n    // httpclient定义 用的是org.apache.commons.httpclient\n    public static HttpClient httpClient = null;\n\n    // 初始化一个多线程的管理器，\n    // 可以设置最大连接，超时等\n    static {\n        MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n        httpClient = new HttpClient(connectionManager);\n        httpClient.getHttpConnectionManager().getParams().setMaxTotalConnections(MAX_CONN);\n        httpClient.getHttpConnectionManager().getParams().setSoTimeout(MAX_TIME_OUT);\n    }\n\n}\n```\n\n看到这个想必基本就会想到这个错误大概是怎么发生的了。\n\n如下图，httpclient中有两个线程C和D，  \nC处理了用户A的登录，确处理了用户B的权限  \nD处理了用户B的登录，确处理用户A的权限  \n由此导致了开头的问题。\n\n![jpg](/img/mypost/article34_3.jpg)\n\n## 真正原因与解决\n\n经过一定上面的排查已经确定了问题出现的地方为  \n**httpclient的多线程管理中保留了上次请求留下的cookie，并在下次请求时默认带上了。  \n由于这个多线程并与tomcat管理的处理http请求的多线程独立管理，所以存在交叉的情况。**\n\n这边要解决他则需要httpclient不保留cookie即可，每次使用外部带进去的cookie\n\n看了下httpclient可配置的参数，在\n\n> org.apache.commons.httpclient.params.HttpMethodParams\n\n有一个CookiePolicy\n\n> org.apache.commons.httpclient.cookie.CookiePolicy\n\n稍微看下可以发现他可配的一些cookie策略。  \n这边default是RFC2109\n\n\n````java\nstatic {\n    CookiePolicy.registerCookieSpec(DEFAULT, RFC2109Spec.class);\n    CookiePolicy.registerCookieSpec(RFC_2109, RFC2109Spec.class);\n    CookiePolicy.registerCookieSpec(RFC_2965, RFC2965Spec.class);\n    CookiePolicy.registerCookieSpec(BROWSER_COMPATIBILITY, CookieSpecBase.class);\n    CookiePolicy.registerCookieSpec(NETSCAPE, NetscapeDraftSpec.class);\n    CookiePolicy.registerCookieSpec(IGNORE_COOKIES, IgnoreCookiesSpec.class);\n}\n```\n\n搜了下RFC2109这个是个什么鬼\n\n它是个http状态管理协议，具体可以到这看[https://datatracker.ietf.org/doc/rfc2109/](https://datatracker.ietf.org/doc/rfc2109/)\n\n这边引用他摘要的一段话\n\n>This document specifies a way to create a stateful session with HTTP\n   requests and responses.  It describes two new headers, Cookie and\n   Set-Cookie, which carry state information between participating\n   origin servers and user agents.\n\n就是它用cookie来管理一个有状态的会话。\n\n**所以在一个httpclient线程访问登录接口，因为在response header中有set-cookie，它将这个cookie当做一个会话保留了下来。  \n然后线程并没有销毁被其他请求复用，被理解为还是同一个会话，则外部传入的header并没有被应用上。**\n\n### 修复\n\n修复十分方便，只要将这个cookie策略改为IGNORE_COOKIES即可\n```java\nhttpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);\n```\n\n## 一句话\n\n最致命的问题总在就在你觉得不可能有问题的地方。","slug":"2020/article_34_httpClient的cookie策略引发的隐藏bug定位","published":1,"updated":"2021-01-27T04:46:28.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh764003w0770bymn59mw","content":"<h2 id=\"概述\">概述</h2>\n<p>本文记录一次大概历时半年也没排查出来，时有时无的隐藏bug。<br>\n大致现象是：<strong>一个用户能访问到别人权限的资源(用户串/权限串)</strong>。<br>\n中间考虑过线程不安全，包的问题，Threadlocal没清除并线程复用导致等，<br>\n最终还是排查到是Httpclient的连接池的Cookie策略。<br>\n这个点在开发时特别容易被人忽略。</p>\n<h2 id=\"场景还原\">场景还原</h2>\n<h3 id=\"背景说明\">背景说明</h3>\n<p>首先大致说下这问题和中间涉及的系统</p>\n<p>如下有一个业务系统，<br>\n他依赖用户系统提供用户信息，权限系统提供权限信息<br>\n<img src=\"/img/mypost/article34_1.jpg\" alt=\"jpg\"></p>\n<p>如下是主要流程，当访问接口时，业务系统的拦截器会去用户系统校验登录，<br>\n将用户信息和cookie保存到threadlocal中，<br>\n当也需要权限信息时，则将保存的cookie取出来去调用权限系统，获取这个用户的权限信息。</p>\n<p><img src=\"/img/mypost/article34_2.jpg\" alt=\"jpg\"></p>\n<h3 id=\"主要问题\">主要问题</h3>\n<p>问题就出现在这中间 ：<br>\n<strong>进入用户系统的是用户A，但当他访问权限系统返回的权限却是用户B的</strong><br>\n<strong>且此问题不可稳定复现，出现概率不高</strong></p>\n<h2 id=\"排查过程\">排查过程</h2>\n<h3 id=\"线程不安全问题\">线程不安全问题</h3>\n<p>由于这边Springboot的Bean用的是单例模式，<br>\n所以如果一个类定义了一个Hashmap的属性，多个线程之间存取就会出现串的问题</p>\n<p>考虑如有部分权限信息存在Hashmap，导致多线程之间取到了他人的。</p>\n<p>这个在 review了代码 和 打印了日志 后基本可以排除掉。</p>\n<h3 id=\"threadlocal没清除\">Threadlocal没清除</h3>\n<p>由于Tomcat管理线程池会复用线程，也就是你的线程在这次请求用了以后，下次还会被别的请求用到，</p>\n<p>如果没有清除Threadlocal的话，下次请求中还会保留着你的信息。</p>\n<p>这个在经过业务排查之后，</p>\n<p>可以确定在出错的场景下的请求也都会走用户校验将Threadlocal的value重新set一遍，</p>\n<p>因为被覆盖了，就不会存在用了上一个未清除的线程的信息。<br>\n（虽然remove确实是该加的，但并不是导致这个问题真正原因）</p>\n<h3 id=\"问题收紧\">问题收紧</h3>\n<p>通过加日志看输入输出，最后将问题收缩到一个函数里，</p>\n<p>如下代码，在打印请求头的时候还可以看到是用户A的cookie，但打印返回却是用户B的权限信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取请求头</span></span><br><span class=\"line\">List&lt;Header&gt; headers = getHeaders();</span><br><span class=\"line\"><span class=\"comment\">// 打印头</span></span><br><span class=\"line\">logger.info(JSONObject.toJSONString(headers));</span><br><span class=\"line\"><span class=\"comment\">// 调用权限系统</span></span><br><span class=\"line\">String resp = HttpUtils.sendPostRequest(<span class=\"string\">\"权限系统接口\"</span>, headers);</span><br><span class=\"line\"><span class=\"comment\">// 打印返回</span></span><br><span class=\"line\">logger.info(resp);</span><br></pre></td></tr></table></figure>\n<p>所以最后是考虑原本最不会出问题的发送请求的util出了问题。<br>\n（原本想一个util总不会保留啥东西吧，不就是每次封装新的header请求嘛）</p>\n<p>不看不知道，一看还挺有东西。</p>\n<h3 id=\"最终定位\">最终定位</h3>\n<p>看下边的代码，则是HttpUtil的一部分，定义了一个多线程的http连接管理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// httpclient定义 用的是org.apache.commons.httpclient</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化一个多线程的管理器，</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以设置最大连接，超时等</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        MultiThreadedHttpConnectionManager connectionManager = <span class=\"keyword\">new</span> MultiThreadedHttpConnectionManager();</span><br><span class=\"line\">        httpClient = <span class=\"keyword\">new</span> HttpClient(connectionManager);</span><br><span class=\"line\">        httpClient.getHttpConnectionManager().getParams().setMaxTotalConnections(MAX_CONN);</span><br><span class=\"line\">        httpClient.getHttpConnectionManager().getParams().setSoTimeout(MAX_TIME_OUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这个想必基本就会想到这个错误大概是怎么发生的了。</p>\n<p>如下图，httpclient中有两个线程C和D，<br>\nC处理了用户A的登录，确处理了用户B的权限<br>\nD处理了用户B的登录，确处理用户A的权限<br>\n由此导致了开头的问题。</p>\n<p><img src=\"/img/mypost/article34_3.jpg\" alt=\"jpg\"></p>\n<h2 id=\"真正原因与解决\">真正原因与解决</h2>\n<p>经过一定上面的排查已经确定了问题出现的地方为<br>\n<strong>httpclient的多线程管理中保留了上次请求留下的cookie，并在下次请求时默认带上了。<br>\n由于这个多线程并与tomcat管理的处理http请求的多线程独立管理，所以存在交叉的情况。</strong></p>\n<p>这边要解决他则需要httpclient不保留cookie即可，每次使用外部带进去的cookie</p>\n<p>看了下httpclient可配置的参数，在</p>\n<blockquote>\n<p>org.apache.commons.httpclient.params.HttpMethodParams</p>\n</blockquote>\n<p>有一个CookiePolicy</p>\n<blockquote>\n<p>org.apache.commons.httpclient.cookie.CookiePolicy</p>\n</blockquote>\n<p>稍微看下可以发现他可配的一些cookie策略。<br>\n这边default是RFC2109</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123;</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(DEFAULT, RFC2109Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(RFC_2109, RFC2109Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(RFC_2965, RFC2965Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(BROWSER_COMPATIBILITY, CookieSpecBase.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(NETSCAPE, NetscapeDraftSpec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(IGNORE_COOKIES, IgnoreCookiesSpec.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>搜了下RFC2109这个是个什么鬼</p>\n<p>它是个http状态管理协议，具体可以到这看<a href=\"https://datatracker.ietf.org/doc/rfc2109/\" target=\"_blank\" rel=\"external\">https://datatracker.ietf.org/doc/rfc2109/</a></p>\n<p>这边引用他摘要的一段话</p>\n<blockquote>\n<p>This document specifies a way to create a stateful session with HTTP<br>\nrequests and responses.  It describes two new headers, Cookie and<br>\nSet-Cookie, which carry state information between participating<br>\norigin servers and user agents.</p>\n</blockquote>\n<p>就是它用cookie来管理一个有状态的会话。</p>\n<p><strong>所以在一个httpclient线程访问登录接口，因为在response header中有set-cookie，它将这个cookie当做一个会话保留了下来。<br>\n然后线程并没有销毁被其他请求复用，被理解为还是同一个会话，则外部传入的header并没有被应用上。</strong></p>\n<h3 id=\"修复\">修复</h3>\n<p>修复十分方便，只要将这个cookie策略改为IGNORE_COOKIES即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);</span><br></pre></td></tr></table></figure>\n<h2 id=\"一句话\">一句话</h2>\n<p>最致命的问题总在就在你觉得不可能有问题的地方。</p>\n","excerpt":"","more":"<h2>概述</h2>\n<p>本文记录一次大概历时半年也没排查出来，时有时无的隐藏bug。<br>\n大致现象是：<strong>一个用户能访问到别人权限的资源(用户串/权限串)</strong>。<br>\n中间考虑过线程不安全，包的问题，Threadlocal没清除并线程复用导致等，<br>\n最终还是排查到是Httpclient的连接池的Cookie策略。<br>\n这个点在开发时特别容易被人忽略。</p>\n<h2>场景还原</h2>\n<h3>背景说明</h3>\n<p>首先大致说下这问题和中间涉及的系统</p>\n<p>如下有一个业务系统，<br>\n他依赖用户系统提供用户信息，权限系统提供权限信息<br>\n<img src=\"/img/mypost/article34_1.jpg\" alt=\"jpg\"></p>\n<p>如下是主要流程，当访问接口时，业务系统的拦截器会去用户系统校验登录，<br>\n将用户信息和cookie保存到threadlocal中，<br>\n当也需要权限信息时，则将保存的cookie取出来去调用权限系统，获取这个用户的权限信息。</p>\n<p><img src=\"/img/mypost/article34_2.jpg\" alt=\"jpg\"></p>\n<h3>主要问题</h3>\n<p>问题就出现在这中间 ：<br>\n<strong>进入用户系统的是用户A，但当他访问权限系统返回的权限却是用户B的</strong><br>\n<strong>且此问题不可稳定复现，出现概率不高</strong></p>\n<h2>排查过程</h2>\n<h3>线程不安全问题</h3>\n<p>由于这边Springboot的Bean用的是单例模式，<br>\n所以如果一个类定义了一个Hashmap的属性，多个线程之间存取就会出现串的问题</p>\n<p>考虑如有部分权限信息存在Hashmap，导致多线程之间取到了他人的。</p>\n<p>这个在 review了代码 和 打印了日志 后基本可以排除掉。</p>\n<h3>Threadlocal没清除</h3>\n<p>由于Tomcat管理线程池会复用线程，也就是你的线程在这次请求用了以后，下次还会被别的请求用到，</p>\n<p>如果没有清除Threadlocal的话，下次请求中还会保留着你的信息。</p>\n<p>这个在经过业务排查之后，</p>\n<p>可以确定在出错的场景下的请求也都会走用户校验将Threadlocal的value重新set一遍，</p>\n<p>因为被覆盖了，就不会存在用了上一个未清除的线程的信息。<br>\n（虽然remove确实是该加的，但并不是导致这个问题真正原因）</p>\n<h3>问题收紧</h3>\n<p>通过加日志看输入输出，最后将问题收缩到一个函数里，</p>\n<p>如下代码，在打印请求头的时候还可以看到是用户A的cookie，但打印返回却是用户B的权限信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取请求头</span></span><br><span class=\"line\">List&lt;Header&gt; headers = getHeaders();</span><br><span class=\"line\"><span class=\"comment\">// 打印头</span></span><br><span class=\"line\">logger.info(JSONObject.toJSONString(headers));</span><br><span class=\"line\"><span class=\"comment\">// 调用权限系统</span></span><br><span class=\"line\">String resp = HttpUtils.sendPostRequest(<span class=\"string\">\"权限系统接口\"</span>, headers);</span><br><span class=\"line\"><span class=\"comment\">// 打印返回</span></span><br><span class=\"line\">logger.info(resp);</span><br></pre></td></tr></table></figure>\n<p>所以最后是考虑原本最不会出问题的发送请求的util出了问题。<br>\n（原本想一个util总不会保留啥东西吧，不就是每次封装新的header请求嘛）</p>\n<p>不看不知道，一看还挺有东西。</p>\n<h3>最终定位</h3>\n<p>看下边的代码，则是HttpUtil的一部分，定义了一个多线程的http连接管理器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// httpclient定义 用的是org.apache.commons.httpclient</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化一个多线程的管理器，</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以设置最大连接，超时等</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        MultiThreadedHttpConnectionManager connectionManager = <span class=\"keyword\">new</span> MultiThreadedHttpConnectionManager();</span><br><span class=\"line\">        httpClient = <span class=\"keyword\">new</span> HttpClient(connectionManager);</span><br><span class=\"line\">        httpClient.getHttpConnectionManager().getParams().setMaxTotalConnections(MAX_CONN);</span><br><span class=\"line\">        httpClient.getHttpConnectionManager().getParams().setSoTimeout(MAX_TIME_OUT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到这个想必基本就会想到这个错误大概是怎么发生的了。</p>\n<p>如下图，httpclient中有两个线程C和D，<br>\nC处理了用户A的登录，确处理了用户B的权限<br>\nD处理了用户B的登录，确处理用户A的权限<br>\n由此导致了开头的问题。</p>\n<p><img src=\"/img/mypost/article34_3.jpg\" alt=\"jpg\"></p>\n<h2>真正原因与解决</h2>\n<p>经过一定上面的排查已经确定了问题出现的地方为<br>\n<strong>httpclient的多线程管理中保留了上次请求留下的cookie，并在下次请求时默认带上了。<br>\n由于这个多线程并与tomcat管理的处理http请求的多线程独立管理，所以存在交叉的情况。</strong></p>\n<p>这边要解决他则需要httpclient不保留cookie即可，每次使用外部带进去的cookie</p>\n<p>看了下httpclient可配置的参数，在</p>\n<blockquote>\n<p>org.apache.commons.httpclient.params.HttpMethodParams</p>\n</blockquote>\n<p>有一个CookiePolicy</p>\n<blockquote>\n<p>org.apache.commons.httpclient.cookie.CookiePolicy</p>\n</blockquote>\n<p>稍微看下可以发现他可配的一些cookie策略。<br>\n这边default是RFC2109</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123;</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(DEFAULT, RFC2109Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(RFC_2109, RFC2109Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(RFC_2965, RFC2965Spec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(BROWSER_COMPATIBILITY, CookieSpecBase.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(NETSCAPE, NetscapeDraftSpec.class);</span><br><span class=\"line\">    CookiePolicy.registerCookieSpec(IGNORE_COOKIES, IgnoreCookiesSpec.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>搜了下RFC2109这个是个什么鬼</p>\n<p>它是个http状态管理协议，具体可以到这看<a href=\"https://datatracker.ietf.org/doc/rfc2109/\">https://datatracker.ietf.org/doc/rfc2109/</a></p>\n<p>这边引用他摘要的一段话</p>\n<blockquote>\n<p>This document specifies a way to create a stateful session with HTTP<br>\nrequests and responses.  It describes two new headers, Cookie and<br>\nSet-Cookie, which carry state information between participating<br>\norigin servers and user agents.</p>\n</blockquote>\n<p>就是它用cookie来管理一个有状态的会话。</p>\n<p><strong>所以在一个httpclient线程访问登录接口，因为在response header中有set-cookie，它将这个cookie当做一个会话保留了下来。<br>\n然后线程并没有销毁被其他请求复用，被理解为还是同一个会话，则外部传入的header并没有被应用上。</strong></p>\n<h3>修复</h3>\n<p>修复十分方便，只要将这个cookie策略改为IGNORE_COOKIES即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);</span><br></pre></td></tr></table></figure>\n<h2>一句话</h2>\n<p>最致命的问题总在就在你觉得不可能有问题的地方。</p>\n"},{"title":"MYSQL中关于统计某列最新不同值的方法","catalog":true,"date":"2020-12-30T11:31:43.000Z","_content":"\n## 前言\n这边来看一个sql中统计某列最新不同值的方法。    \n直接说上面这个比较难以理解，具体场景举例如：  \n\n- 用户访问记录表，统计最近访问的不同的n个用户\n- 操作记录表，统计最近不同的n个操作\n\n看似简单实际上只通过简单的一层sql无法实现。\n\n这边用实操演示，三种可用的实现方式。\n\n## 实操\n\n这边来实际操作下，为了方便这边用MYSQL为例\n\n### 准备数据\n\n这个表表示用户资源访问记录表，其中有主键id，用户id，资源id，访问时间。  \n用户每访问一次资源则记录加一条。\n```sql\nCREATE TABLE IF NOT EXISTS `user_resource_history` (\n    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',\n    `user_id` int(11) NOT NULL COMMENT '用户id',\n    `resource_id` int(11) NOT NULL COMMENT '资源id',\n    `date_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户资源访问记录表';\n```\n\n导入一些数据，\n```sql\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (1, 1, 1, '2020-12-24 02:03:17');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (2, 1, 1, '2020-12-25 02:03:41');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (3, 1, 2, '2020-12-26 02:04:30');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (4, 1, 3, '2020-12-27 02:04:35');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (5, 1, 1, '2020-12-29 02:04:41');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (6, 2, 1, '2020-12-30 02:05:39');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (7, 3, 1, '2020-12-30 02:05:47');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (8, 2, 2, '2020-12-30 02:07:53');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (9, 1, 3, '2020-12-30 02:12:58');\n```\n大致数据为\n![jpg](/img/mypost/article35_1.jpg)\n\n### 目标\n\n**统计用户1的最近访问的3个不同资源和访问时间**\n\n### 分析思路\n\n首先考虑select的where过滤user_id=1，  \n\n然后因为是3个不同资源，得按资源分组，得到类似于下面的kv结构\n```\n{\n    资源id: [这个资源的所有访问时间]\n}\n```\n\n然后从时间数组中挑选出最近的时间。就得到如下表：\n\n| 资源id |    最近访问时间     |\n| ------ | :-----------------: |\n| 1      | 2020-12-31 02:12:58 |\n\n最后再按最近访问时间倒排序即可得到 ：用户1的最近访问的3个不同资源和访问时间\n\n### MYSQL实现\n\n再具体实现过程中，因为不存在数组这个，所以略有不同。\n\n#### 第一种实现\n第一种通过rank()函数实现，这个得在Mysql8.0才有这个函数  \n它的语法是如下，这个意思就是按这个分区字段分类，按排序字段排序，产生一个排名字段rk\n```sql\nrank() over (\n    partition by 分区字段\n    order by 排序字段 desc\n) as rk \n```\n\n整体实现如下\n```sql\n-- 外层筛选排名为第一名的数据，表示不同资源最近一条\nselect resource_id, date_created from (\n    -- 筛选用户，根据时间倒排序，\n    -- 然后加一列排名\n    -- 根据资源id分区（每个资源都有自己的排名，1-n），\n    -- 时间倒排排名（最近时间排名为1，后面往上加））\n    select resource_id,\n            date_created,\n            rank() over (\n                partition by resource_id\n                order by date_created desc\n                ) as rk\n    from user_resource_history\n    where user_id = 1\n    order by date_created desc\n) t1 where t1.rk = 1\nlimit 3;\n```\n\n#### 第二种实现\n\n因为在mysql5.x中都不能用rank函数，所有这边有另一种奇妙的实现，  \n\n整体还是实现上面的排名，通过case when的方式。\n\nsql如下：\n\n首先将原表按照resource_id，date_created排序，这样就可以将同样的resource_id归到一起，且按照时间倒序。\n\n然后增加一列排名，排名的实现：\n\n先定义两个变量，这边是curRank，preRank  \ncurRank这边表示的是上一个资源id，  \npreRank表示的是排名\n\n当从上往下遍历时，当preBank = resource_id时，curRank赋值为1，（表示每个新资源排名从1开始）  \n当preRank != resource_id时，curRank += 1，  （同一个资源内，每次排名自增）\n\n产生排名后外层筛选排名为1的，再重新按时间进行倒排序。\n\n```sql\nselect resource_id, date_created from (\n   select resource_id,\n          date_created,\n          case\n              when @preRank = resource_id then @curRank := @curRank + 1\n              when @preRank := resource_id then @curRank := 1\n              end as rk\n   from (\n            select id, resource_id, date_created from user_resource_history\n            where user_id = 1\n            order by resource_id, date_created desc\n        ) t1,\n        (select @curRank := 0, @preRank := null) t2\n) t3 where rk=1\norder by date_created desc\nlimit 3;\n```\n\n\n#### 第三种实现\n\n这个实现需要建的时候按有自增id主键的建表，  \n且时间是按数据库自增的，这样id的最大值表示的就是最新时间。\n\n首先按照资源id聚合，查看的是max(id)，因为最大id行就表示该资源最近时间行。得到一批id\n\n然后在用in这批id则可以得到每个资源最近时间的表，在按时间倒排序一下，\n\n就可以得到结果\n\n```sql\nselect resource_id, date_created\nfrom user_resource_history\nwhere id in (\n    select max(id)\n    from user_resource_history\n    where user_id = 1\n    group by resource_id\n) order by date_created desc\nlimit 3;\n```\n\n### 时间测试估计\n\n由于这边测试数据比较少，  \n大致结果为第一种40ms，第二种70ms，第三种40ms  \n\n三种中，第二种总体比较慢，因为多层一次子查询。\n\n### 其他想法\n\n当然在真实前提场景可变的情况下，可以直接另建一张表，表示用户最近访问不同资源表。  \n\n每次访问资源时，除了更新记录表，也可以更新用户最近访问资源表。  \n\n或者定时将记录表更新至最近访问资源表。  \n\n## 最后\n\nsql还是有学习空间。","source":"_posts/2020/article_35_sql中关于统计某列最新不同值的方法.md","raw":"---\ntitle: MYSQL中关于统计某列最新不同值的方法\ncatalog: true\ndate: 2020-12-30 19:31:43\ntags:\n    - SQL\n    - MYSQL\n---\n\n## 前言\n这边来看一个sql中统计某列最新不同值的方法。    \n直接说上面这个比较难以理解，具体场景举例如：  \n\n- 用户访问记录表，统计最近访问的不同的n个用户\n- 操作记录表，统计最近不同的n个操作\n\n看似简单实际上只通过简单的一层sql无法实现。\n\n这边用实操演示，三种可用的实现方式。\n\n## 实操\n\n这边来实际操作下，为了方便这边用MYSQL为例\n\n### 准备数据\n\n这个表表示用户资源访问记录表，其中有主键id，用户id，资源id，访问时间。  \n用户每访问一次资源则记录加一条。\n```sql\nCREATE TABLE IF NOT EXISTS `user_resource_history` (\n    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',\n    `user_id` int(11) NOT NULL COMMENT '用户id',\n    `resource_id` int(11) NOT NULL COMMENT '资源id',\n    `date_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户资源访问记录表';\n```\n\n导入一些数据，\n```sql\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (1, 1, 1, '2020-12-24 02:03:17');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (2, 1, 1, '2020-12-25 02:03:41');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (3, 1, 2, '2020-12-26 02:04:30');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (4, 1, 3, '2020-12-27 02:04:35');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (5, 1, 1, '2020-12-29 02:04:41');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (6, 2, 1, '2020-12-30 02:05:39');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (7, 3, 1, '2020-12-30 02:05:47');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (8, 2, 2, '2020-12-30 02:07:53');\nINSERT INTO user_resource_history (id, user_id, resource_id, date_created) VALUES (9, 1, 3, '2020-12-30 02:12:58');\n```\n大致数据为\n![jpg](/img/mypost/article35_1.jpg)\n\n### 目标\n\n**统计用户1的最近访问的3个不同资源和访问时间**\n\n### 分析思路\n\n首先考虑select的where过滤user_id=1，  \n\n然后因为是3个不同资源，得按资源分组，得到类似于下面的kv结构\n```\n{\n    资源id: [这个资源的所有访问时间]\n}\n```\n\n然后从时间数组中挑选出最近的时间。就得到如下表：\n\n| 资源id |    最近访问时间     |\n| ------ | :-----------------: |\n| 1      | 2020-12-31 02:12:58 |\n\n最后再按最近访问时间倒排序即可得到 ：用户1的最近访问的3个不同资源和访问时间\n\n### MYSQL实现\n\n再具体实现过程中，因为不存在数组这个，所以略有不同。\n\n#### 第一种实现\n第一种通过rank()函数实现，这个得在Mysql8.0才有这个函数  \n它的语法是如下，这个意思就是按这个分区字段分类，按排序字段排序，产生一个排名字段rk\n```sql\nrank() over (\n    partition by 分区字段\n    order by 排序字段 desc\n) as rk \n```\n\n整体实现如下\n```sql\n-- 外层筛选排名为第一名的数据，表示不同资源最近一条\nselect resource_id, date_created from (\n    -- 筛选用户，根据时间倒排序，\n    -- 然后加一列排名\n    -- 根据资源id分区（每个资源都有自己的排名，1-n），\n    -- 时间倒排排名（最近时间排名为1，后面往上加））\n    select resource_id,\n            date_created,\n            rank() over (\n                partition by resource_id\n                order by date_created desc\n                ) as rk\n    from user_resource_history\n    where user_id = 1\n    order by date_created desc\n) t1 where t1.rk = 1\nlimit 3;\n```\n\n#### 第二种实现\n\n因为在mysql5.x中都不能用rank函数，所有这边有另一种奇妙的实现，  \n\n整体还是实现上面的排名，通过case when的方式。\n\nsql如下：\n\n首先将原表按照resource_id，date_created排序，这样就可以将同样的resource_id归到一起，且按照时间倒序。\n\n然后增加一列排名，排名的实现：\n\n先定义两个变量，这边是curRank，preRank  \ncurRank这边表示的是上一个资源id，  \npreRank表示的是排名\n\n当从上往下遍历时，当preBank = resource_id时，curRank赋值为1，（表示每个新资源排名从1开始）  \n当preRank != resource_id时，curRank += 1，  （同一个资源内，每次排名自增）\n\n产生排名后外层筛选排名为1的，再重新按时间进行倒排序。\n\n```sql\nselect resource_id, date_created from (\n   select resource_id,\n          date_created,\n          case\n              when @preRank = resource_id then @curRank := @curRank + 1\n              when @preRank := resource_id then @curRank := 1\n              end as rk\n   from (\n            select id, resource_id, date_created from user_resource_history\n            where user_id = 1\n            order by resource_id, date_created desc\n        ) t1,\n        (select @curRank := 0, @preRank := null) t2\n) t3 where rk=1\norder by date_created desc\nlimit 3;\n```\n\n\n#### 第三种实现\n\n这个实现需要建的时候按有自增id主键的建表，  \n且时间是按数据库自增的，这样id的最大值表示的就是最新时间。\n\n首先按照资源id聚合，查看的是max(id)，因为最大id行就表示该资源最近时间行。得到一批id\n\n然后在用in这批id则可以得到每个资源最近时间的表，在按时间倒排序一下，\n\n就可以得到结果\n\n```sql\nselect resource_id, date_created\nfrom user_resource_history\nwhere id in (\n    select max(id)\n    from user_resource_history\n    where user_id = 1\n    group by resource_id\n) order by date_created desc\nlimit 3;\n```\n\n### 时间测试估计\n\n由于这边测试数据比较少，  \n大致结果为第一种40ms，第二种70ms，第三种40ms  \n\n三种中，第二种总体比较慢，因为多层一次子查询。\n\n### 其他想法\n\n当然在真实前提场景可变的情况下，可以直接另建一张表，表示用户最近访问不同资源表。  \n\n每次访问资源时，除了更新记录表，也可以更新用户最近访问资源表。  \n\n或者定时将记录表更新至最近访问资源表。  \n\n## 最后\n\nsql还是有学习空间。","slug":"2020/article_35_sql中关于统计某列最新不同值的方法","published":1,"updated":"2021-01-27T04:46:28.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh765003y0770c267ncqm","content":"<h2 id=\"前言\">前言</h2>\n<p>这边来看一个sql中统计某列最新不同值的方法。<br>\n直接说上面这个比较难以理解，具体场景举例如：</p>\n<ul>\n<li>用户访问记录表，统计最近访问的不同的n个用户</li>\n<li>操作记录表，统计最近不同的n个操作</li>\n</ul>\n<p>看似简单实际上只通过简单的一层sql无法实现。</p>\n<p>这边用实操演示，三种可用的实现方式。</p>\n<h2 id=\"实操\">实操</h2>\n<p>这边来实际操作下，为了方便这边用MYSQL为例</p>\n<h3 id=\"准备数据\">准备数据</h3>\n<p>这个表表示用户资源访问记录表，其中有主键id，用户id，资源id，访问时间。<br>\n用户每访问一次资源则记录加一条。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`user_resource_history`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`user_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`resource_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'资源id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`date_created`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4 <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户资源访问记录表'</span>;</span><br></pre></td></tr></table></figure>\n<p>导入一些数据，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-24 02:03:17'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-25 02:03:41'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'2020-12-26 02:04:30'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">'2020-12-27 02:04:35'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-29 02:04:41'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-30 02:05:39'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-30 02:05:47'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">'2020-12-30 02:07:53'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">'2020-12-30 02:12:58'</span>);</span><br></pre></td></tr></table></figure>\n<p>大致数据为<br>\n<img src=\"/img/mypost/article35_1.jpg\" alt=\"jpg\"></p>\n<h3 id=\"目标\">目标</h3>\n<p><strong>统计用户1的最近访问的3个不同资源和访问时间</strong></p>\n<h3 id=\"分析思路\">分析思路</h3>\n<p>首先考虑select的where过滤user_id=1，</p>\n<p>然后因为是3个不同资源，得按资源分组，得到类似于下面的kv结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    资源id: [这个资源的所有访问时间]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后从时间数组中挑选出最近的时间。就得到如下表：</p>\n<table>\n<thead>\n<tr>\n<th>资源id</th>\n<th style=\"text-align:center\">最近访问时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">2020-12-31 02:12:58</td>\n</tr>\n</tbody>\n</table>\n<p>最后再按最近访问时间倒排序即可得到 ：用户1的最近访问的3个不同资源和访问时间</p>\n<h3 id=\"mysql实现\">MYSQL实现</h3>\n<p>再具体实现过程中，因为不存在数组这个，所以略有不同。</p>\n<h4 id=\"第一种实现\">第一种实现</h4>\n<p>第一种通过rank()函数实现，这个得在Mysql8.0才有这个函数<br>\n它的语法是如下，这个意思就是按这个分区字段分类，按排序字段排序，产生一个排名字段rk</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rank() over (</span><br><span class=\"line\">    partition by 分区字段</span><br><span class=\"line\">    order by 排序字段 desc</span><br><span class=\"line\">) as rk</span><br></pre></td></tr></table></figure>\n<p>整体实现如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外层筛选排名为第一名的数据，表示不同资源最近一条</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created <span class=\"keyword\">from</span> (</span><br><span class=\"line\">    <span class=\"comment\">-- 筛选用户，根据时间倒排序，</span></span><br><span class=\"line\">    <span class=\"comment\">-- 然后加一列排名</span></span><br><span class=\"line\">    <span class=\"comment\">-- 根据资源id分区（每个资源都有自己的排名，1-n），</span></span><br><span class=\"line\">    <span class=\"comment\">-- 时间倒排排名（最近时间排名为1，后面往上加））</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> resource_id,</span><br><span class=\"line\">            date_created,</span><br><span class=\"line\">            <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (</span><br><span class=\"line\">                <span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> resource_id</span><br><span class=\"line\">                <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">                ) <span class=\"keyword\">as</span> rk</span><br><span class=\"line\">    <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">    <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">) t1 <span class=\"keyword\">where</span> t1.rk = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二种实现\">第二种实现</h4>\n<p>因为在mysql5.x中都不能用rank函数，所有这边有另一种奇妙的实现，</p>\n<p>整体还是实现上面的排名，通过case when的方式。</p>\n<p>sql如下：</p>\n<p>首先将原表按照resource_id，date_created排序，这样就可以将同样的resource_id归到一起，且按照时间倒序。</p>\n<p>然后增加一列排名，排名的实现：</p>\n<p>先定义两个变量，这边是curRank，preRank<br>\ncurRank这边表示的是上一个资源id，<br>\npreRank表示的是排名</p>\n<p>当从上往下遍历时，当preBank = resource_id时，curRank赋值为1，（表示每个新资源排名从1开始）<br>\n当preRank != resource_id时，curRank += 1，  （同一个资源内，每次排名自增）</p>\n<p>产生排名后外层筛选排名为1的，再重新按时间进行倒排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created <span class=\"keyword\">from</span> (</span><br><span class=\"line\">   <span class=\"keyword\">select</span> resource_id,</span><br><span class=\"line\">          date_created,</span><br><span class=\"line\">          <span class=\"keyword\">case</span></span><br><span class=\"line\">              <span class=\"keyword\">when</span> @preRank = resource_id <span class=\"keyword\">then</span> @curRank := @curRank + <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"keyword\">when</span> @preRank := resource_id <span class=\"keyword\">then</span> @curRank := <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> rk</span><br><span class=\"line\">   <span class=\"keyword\">from</span> (</span><br><span class=\"line\">            <span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, resource_id, date_created <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">            <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> resource_id, date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">        ) t1,</span><br><span class=\"line\">        (<span class=\"keyword\">select</span> @curRank := <span class=\"number\">0</span>, @preRank := <span class=\"literal\">null</span>) t2</span><br><span class=\"line\">) t3 <span class=\"keyword\">where</span> rk=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三种实现\">第三种实现</h4>\n<p>这个实现需要建的时候按有自增id主键的建表，<br>\n且时间是按数据库自增的，这样id的最大值表示的就是最新时间。</p>\n<p>首先按照资源id聚合，查看的是max(id)，因为最大id行就表示该资源最近时间行。得到一批id</p>\n<p>然后在用in这批id则可以得到每个资源最近时间的表，在按时间倒排序一下，</p>\n<p>就可以得到结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created</span><br><span class=\"line\"><span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">    <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> resource_id</span><br><span class=\"line\">) <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"时间测试估计\">时间测试估计</h3>\n<p>由于这边测试数据比较少，<br>\n大致结果为第一种40ms，第二种70ms，第三种40ms</p>\n<p>三种中，第二种总体比较慢，因为多层一次子查询。</p>\n<h3 id=\"其他想法\">其他想法</h3>\n<p>当然在真实前提场景可变的情况下，可以直接另建一张表，表示用户最近访问不同资源表。</p>\n<p>每次访问资源时，除了更新记录表，也可以更新用户最近访问资源表。</p>\n<p>或者定时将记录表更新至最近访问资源表。</p>\n<h2 id=\"最后\">最后</h2>\n<p>sql还是有学习空间。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>这边来看一个sql中统计某列最新不同值的方法。<br>\n直接说上面这个比较难以理解，具体场景举例如：</p>\n<ul>\n<li>用户访问记录表，统计最近访问的不同的n个用户</li>\n<li>操作记录表，统计最近不同的n个操作</li>\n</ul>\n<p>看似简单实际上只通过简单的一层sql无法实现。</p>\n<p>这边用实操演示，三种可用的实现方式。</p>\n<h2>实操</h2>\n<p>这边来实际操作下，为了方便这边用MYSQL为例</p>\n<h3>准备数据</h3>\n<p>这个表表示用户资源访问记录表，其中有主键id，用户id，资源id，访问时间。<br>\n用户每访问一次资源则记录加一条。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`user_resource_history`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`user_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`resource_id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'资源id'</span>,</span><br><span class=\"line\">    <span class=\"string\">`date_created`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8mb4 <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户资源访问记录表'</span>;</span><br></pre></td></tr></table></figure>\n<p>导入一些数据，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-24 02:03:17'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-25 02:03:41'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'2020-12-26 02:04:30'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">'2020-12-27 02:04:35'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-29 02:04:41'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-30 02:05:39'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'2020-12-30 02:05:47'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">'2020-12-30 02:07:53'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_resource_history (<span class=\"keyword\">id</span>, user_id, resource_id, date_created) <span class=\"keyword\">VALUES</span> (<span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">'2020-12-30 02:12:58'</span>);</span><br></pre></td></tr></table></figure>\n<p>大致数据为<br>\n<img src=\"/img/mypost/article35_1.jpg\" alt=\"jpg\"></p>\n<h3>目标</h3>\n<p><strong>统计用户1的最近访问的3个不同资源和访问时间</strong></p>\n<h3>分析思路</h3>\n<p>首先考虑select的where过滤user_id=1，</p>\n<p>然后因为是3个不同资源，得按资源分组，得到类似于下面的kv结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    资源id: [这个资源的所有访问时间]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后从时间数组中挑选出最近的时间。就得到如下表：</p>\n<table>\n<thead>\n<tr>\n<th>资源id</th>\n<th style=\"text-align:center\">最近访问时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">2020-12-31 02:12:58</td>\n</tr>\n</tbody>\n</table>\n<p>最后再按最近访问时间倒排序即可得到 ：用户1的最近访问的3个不同资源和访问时间</p>\n<h3>MYSQL实现</h3>\n<p>再具体实现过程中，因为不存在数组这个，所以略有不同。</p>\n<h4>第一种实现</h4>\n<p>第一种通过rank()函数实现，这个得在Mysql8.0才有这个函数<br>\n它的语法是如下，这个意思就是按这个分区字段分类，按排序字段排序，产生一个排名字段rk</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rank() over (</span><br><span class=\"line\">    partition by 分区字段</span><br><span class=\"line\">    order by 排序字段 desc</span><br><span class=\"line\">) as rk</span><br></pre></td></tr></table></figure>\n<p>整体实现如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 外层筛选排名为第一名的数据，表示不同资源最近一条</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created <span class=\"keyword\">from</span> (</span><br><span class=\"line\">    <span class=\"comment\">-- 筛选用户，根据时间倒排序，</span></span><br><span class=\"line\">    <span class=\"comment\">-- 然后加一列排名</span></span><br><span class=\"line\">    <span class=\"comment\">-- 根据资源id分区（每个资源都有自己的排名，1-n），</span></span><br><span class=\"line\">    <span class=\"comment\">-- 时间倒排排名（最近时间排名为1，后面往上加））</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> resource_id,</span><br><span class=\"line\">            date_created,</span><br><span class=\"line\">            <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (</span><br><span class=\"line\">                <span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> resource_id</span><br><span class=\"line\">                <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">                ) <span class=\"keyword\">as</span> rk</span><br><span class=\"line\">    <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">    <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">) t1 <span class=\"keyword\">where</span> t1.rk = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4>第二种实现</h4>\n<p>因为在mysql5.x中都不能用rank函数，所有这边有另一种奇妙的实现，</p>\n<p>整体还是实现上面的排名，通过case when的方式。</p>\n<p>sql如下：</p>\n<p>首先将原表按照resource_id，date_created排序，这样就可以将同样的resource_id归到一起，且按照时间倒序。</p>\n<p>然后增加一列排名，排名的实现：</p>\n<p>先定义两个变量，这边是curRank，preRank<br>\ncurRank这边表示的是上一个资源id，<br>\npreRank表示的是排名</p>\n<p>当从上往下遍历时，当preBank = resource_id时，curRank赋值为1，（表示每个新资源排名从1开始）<br>\n当preRank != resource_id时，curRank += 1，  （同一个资源内，每次排名自增）</p>\n<p>产生排名后外层筛选排名为1的，再重新按时间进行倒排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created <span class=\"keyword\">from</span> (</span><br><span class=\"line\">   <span class=\"keyword\">select</span> resource_id,</span><br><span class=\"line\">          date_created,</span><br><span class=\"line\">          <span class=\"keyword\">case</span></span><br><span class=\"line\">              <span class=\"keyword\">when</span> @preRank = resource_id <span class=\"keyword\">then</span> @curRank := @curRank + <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"keyword\">when</span> @preRank := resource_id <span class=\"keyword\">then</span> @curRank := <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> rk</span><br><span class=\"line\">   <span class=\"keyword\">from</span> (</span><br><span class=\"line\">            <span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, resource_id, date_created <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">            <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> resource_id, date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\">        ) t1,</span><br><span class=\"line\">        (<span class=\"keyword\">select</span> @curRank := <span class=\"number\">0</span>, @preRank := <span class=\"literal\">null</span>) t2</span><br><span class=\"line\">) t3 <span class=\"keyword\">where</span> rk=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4>第三种实现</h4>\n<p>这个实现需要建的时候按有自增id主键的建表，<br>\n且时间是按数据库自增的，这样id的最大值表示的就是最新时间。</p>\n<p>首先按照资源id聚合，查看的是max(id)，因为最大id行就表示该资源最近时间行。得到一批id</p>\n<p>然后在用in这批id则可以得到每个资源最近时间的表，在按时间倒排序一下，</p>\n<p>就可以得到结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> resource_id, date_created</span><br><span class=\"line\"><span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">in</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> user_resource_history</span><br><span class=\"line\">    <span class=\"keyword\">where</span> user_id = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> resource_id</span><br><span class=\"line\">) <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> date_created <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3>时间测试估计</h3>\n<p>由于这边测试数据比较少，<br>\n大致结果为第一种40ms，第二种70ms，第三种40ms</p>\n<p>三种中，第二种总体比较慢，因为多层一次子查询。</p>\n<h3>其他想法</h3>\n<p>当然在真实前提场景可变的情况下，可以直接另建一张表，表示用户最近访问不同资源表。</p>\n<p>每次访问资源时，除了更新记录表，也可以更新用户最近访问资源表。</p>\n<p>或者定时将记录表更新至最近访问资源表。</p>\n<h2>最后</h2>\n<p>sql还是有学习空间。</p>\n"},{"title":"hiveserver2与hiveSQL的执行","catalog":true,"date":"2020-04-09T08:28:17.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","source":"_posts/2020/article_7_hiveserver2与HQL的执行.md","raw":"---\ntitle: hiveserver2与hiveSQL的执行\ncatalog: true\ndate: 2020-04-09 16:28:17\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HIVE\n- PYTHON\n- JAVA\n---\n\n## 前言\n\n对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。\n\n这边演示python的实现和java的实现\n\n## 实现\n\n### python\npython使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。\n\n``` python\nfrom pyhive import hive\n\n// 连接\nconn = hive.connect(host=host, port=port, username=user, password=password, database='default')\n\n// 获取游标和执行sql\ncursor = conn.cursor()\nsql = \"show tables\"\ncursor.execute(sql)\n\n// 数据和表头\ndata = cursor.fetchall()\ncolumns = cursor.description\n```\n\n### java\n\njava的jdbc连接使用的是java.sql.*，  \n还需要加上外部依赖hive-jdbc和hadoop-commmon，\n这边先定义结果数据结构\n``` java\n// 数据\npublic class HiveSqlResultModel {\n    // 表头\n    List<JSONArray> meta;\n\n    // 数据\n    List<JSONArray> data;\n\n    //长度\n    Integer count;\n}\n\n// 表头\npublic class HiveSqlResultColumnModel {\n    // 字段名\n    String name;\n\n    // 类型\n    String type;\n\n    // 精度\n    Integer precision;\n\n    // 小数位数\n    Integer scale;\n}\n```\n\n``` java\npublic class HiveClientUtil {\n\n    private final Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);\n\n    /**\n    * 驱动\n    * 默认队列\n    * jdbc地址\n    * 用户名\n    * 密码\n    * 前置sql\n    */\n    private String DRIVERNAME = \"org.apache.hive.jdbc.HiveDriver\";\n    private String QUEUE = \"default\";\n    private String hiveurl;\n    private String username;\n    private String password;\n    private List<String> defaultPreSql;\n\n    /**\n    * 构造的时候初始化上面的配置\n    */\n    public HiveClientUtil(String host, String port, String username, String password, String database) {\n        this.hiveurl = String.format(\"jdbc:hive2://%s:%s/%s\", host, port, database);\n        this.username = username;\n        this.password = password;\n        this.defaultPreSql = new ArrayList<>();\n        this.defaultPreSql.add(String.format(\"SET tez.queue.name=%s\", QUEUE));\n    }\n\n    /**\n    * 执行前置sql\n    */\n    private void execPreSql(PreparedStatement preparedStatement, List<String> presqls) {\n        presqls.forEach(presql -> {\n            try {\n                preparedStatement.execute(presql);\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(\"前置SQL执行失败\");\n            }\n        });\n    }\n\n    /**\n    * 运行sql\n    */\n    public HiveSqlResultModel execute(String sql) throws SQLException {\n        return this.execute(sql, null);\n    }\n\n    /**\n    * 运行前置sql和主sql\n    */\n    public HiveSqlResultModel execute(String sql, List<String> presqls) throws SQLException {\n        try {\n            Class.forName(DRIVERNAME);\n        }catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"sql执行初始化失败\");\n        }\n        // 连接\n        Connection conn = DriverManager.getConnection(hiveurl, username, password);\n\n        // 主sql加载\n        PreparedStatement preparedStatement = conn.prepareStatement(sql);\n\n        // 执行前置配置sql\n        execPreSql(preparedStatement, defaultPreSql);\n        if(presqls != null) {\n            execPreSql(preparedStatement, presqls);\n        }\n\n        // 获取执行结果，表头，列数量\n        ResultSet result = preparedStatement.executeQuery();\n        ResultSetMetaData metaData = result.getMetaData();\n        int columnCount = metaData.getColumnCount();\n\n        // 获取表头数据并转换\n        HiveSqlResultModel hiveSqlResultModel = new HiveSqlResultModel();\n        List<JSONArray> metas = new ArrayList<>();\n        for(int i = 1; i <= columnCount; i++) {\n            HiveSqlResultColumnModel columnModel = new HiveSqlResultColumnModel();\n            columnModel.setName(metaData.getColumnName(i));\n            columnModel.setType(metaData.getColumnTypeName(i));\n            if(\"DECIMAL\".equals(metaData.getColumnTypeName(i))){\n                columnModel.setPrecision(metaData.getPrecision(i));\n                columnModel.setScale(metaData.getScale(i));\n            }\n            metas.add(columnModel.toJsonArray());\n        }\n        hiveSqlResultModel.setMeta(metas);\n\n        // 处理每行数据，并计数\n        List<JSONArray> data = new ArrayList<>();\n        int count = 0;\n        while(result.next()) {\n            JSONArray rowData = new JSONArray();\n            for(int i = 1; i <= columnCount; i++) {\n                rowData.add(result.getString(i));\n            }\n            data.add(rowData);\n            count++;\n        }\n        hiveSqlResultModel.setCount(count);\n        hiveSqlResultModel.setData(data);\n        return hiveSqlResultModel;\n    }\n}\n```","slug":"2020/article_7_hiveserver2与HQL的执行","published":1,"updated":"2021-01-27T04:46:28.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh767004107702yd59k9g","content":"<h2 id=\"前言\">前言</h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"python\">python</h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3 id=\"java\">java</h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2>前言</h2>\n<p>对于hql的执行，可以在集群中启动hive的命令行，也可以使用beeline或其他客户端用jdbc连接Hiveserver2发送sql，中间传输用的是thrift协议。</p>\n<p>这边演示python的实现和java的实现</p>\n<h2>实现</h2>\n<h3>python</h3>\n<p>python使用pyhive或者impyla库都可以。使用方式也都类似，这边以pyhive举例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接</span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user, password=password, database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取游标和执行sql</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"show tables\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据和表头</span><br><span class=\"line\">data = cursor.fetchall()</span><br><span class=\"line\">columns = cursor.description</span><br></pre></td></tr></table></figure>\n<h3>java</h3>\n<p>java的jdbc连接使用的是java.sql.*，<br>\n还需要加上外部依赖hive-jdbc和hadoop-commmon，<br>\n这边先定义结果数据结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表头</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; meta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据</span></span><br><span class=\"line\">    List&lt;JSONArray&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//长度</span></span><br><span class=\"line\">    Integer count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表头</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSqlResultColumnModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 字段名</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 类型</span></span><br><span class=\"line\">    String type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 精度</span></span><br><span class=\"line\">    Integer precision;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 小数位数</span></span><br><span class=\"line\">    Integer scale;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveClientUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(HiveClientUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 驱动</span></span><br><span class=\"line\"><span class=\"comment\">    * 默认队列</span></span><br><span class=\"line\"><span class=\"comment\">    * jdbc地址</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String DRIVERNAME = <span class=\"string\">\"org.apache.hive.jdbc.HiveDriver\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String QUEUE = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hiveurl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; defaultPreSql;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 构造的时候初始化上面的配置</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveClientUtil</span><span class=\"params\">(String host, String port, String username, String password, String database)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hiveurl = String.format(<span class=\"string\">\"jdbc:hive2://%s:%s/%s\"</span>, host, port, database);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defaultPreSql.add(String.format(<span class=\"string\">\"SET tez.queue.name=%s\"</span>, QUEUE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 执行前置sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">execPreSql</span><span class=\"params\">(PreparedStatement preparedStatement, List&lt;String&gt; presqls)</span> </span>&#123;</span><br><span class=\"line\">        presqls.forEach(presql -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                preparedStatement.execute(presql);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"前置SQL执行失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.execute(sql, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 运行前置sql和主sql</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveSqlResultModel <span class=\"title\">execute</span><span class=\"params\">(String sql, List&lt;String&gt; presqls)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(DRIVERNAME);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"sql执行初始化失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(hiveurl, username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 主sql加载</span></span><br><span class=\"line\">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行前置配置sql</span></span><br><span class=\"line\">        execPreSql(preparedStatement, defaultPreSql);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(presqls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            execPreSql(preparedStatement, presqls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取执行结果，表头，列数量</span></span><br><span class=\"line\">        ResultSet result = preparedStatement.executeQuery();</span><br><span class=\"line\">        ResultSetMetaData metaData = result.getMetaData();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnCount = metaData.getColumnCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取表头数据并转换</span></span><br><span class=\"line\">        HiveSqlResultModel hiveSqlResultModel = <span class=\"keyword\">new</span> HiveSqlResultModel();</span><br><span class=\"line\">        List&lt;JSONArray&gt; metas = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">            HiveSqlResultColumnModel columnModel = <span class=\"keyword\">new</span> HiveSqlResultColumnModel();</span><br><span class=\"line\">            columnModel.setName(metaData.getColumnName(i));</span><br><span class=\"line\">            columnModel.setType(metaData.getColumnTypeName(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">\"DECIMAL\"</span>.equals(metaData.getColumnTypeName(i)))&#123;</span><br><span class=\"line\">                columnModel.setPrecision(metaData.getPrecision(i));</span><br><span class=\"line\">                columnModel.setScale(metaData.getScale(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            metas.add(columnModel.toJsonArray());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setMeta(metas);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理每行数据，并计数</span></span><br><span class=\"line\">        List&lt;JSONArray&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(result.next()) &#123;</span><br><span class=\"line\">            JSONArray rowData = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                rowData.add(result.getString(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data.add(rowData);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hiveSqlResultModel.setCount(count);</span><br><span class=\"line\">        hiveSqlResultModel.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hiveSqlResultModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"讲讲元数据","catalog":true,"date":"2020-03-31T10:47:13.000Z","subtitle":"大数据平台中元数据系统的一些见解","header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","source":"_posts/2020/article_3_讲讲元数据.md","raw":"---\ntitle: 讲讲元数据\ncatalog: true\ndate: 2020-03-31 18:47:13\nsubtitle: 大数据平台中元数据系统的一些见解\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n---\n\n## 前言\n\n做了一些元数据的系统，分享一些相关的理解与体会。  \n掺杂个人理解与实操历史，不一定是最佳实践。\n\n## 元数据定义\n\n元数据一般指的是 **定义数据的数据**。\n\n对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。 \n\n- 比如mysql的每个实例会默认有一个叫information_schema的库；  \n- 比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；  \n\n这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。  \n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。\n\n## 元数据采集\n\n首先进行元数据的采集和整合。这边都以hive举例。  \n\n可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。\n\n- 对于库，表，字段，分区等信息，直接使用metastore库获取。  \n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：  \n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；  \n同时也保留一种手动触发方式，可以让用户手动同步库或表。\n\n\n- 对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。  \n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。  \n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和[hive自带的Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。\n\n\n- 对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。  \n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。  \n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。  \n其他一些业务元数据采取批量导出导入和页面上维护。\n\n## 元数据平台\n\n元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。  \n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。  \n在接口上实现对一些业务元数据的校正和使用说明。  \n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。\n\n平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。\n\n## 元数据应用\n\n除了元数据平台上的功能外，元数据也可以有其他很多的应用。\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；\n比如在控制数据权限时，需要用到表字段的策略；  \n比如在即时查询时用户需要查看库表字段信息来完成sql；  \n比如在数据监控与数据质量中，也需要用到元数据；\n\n## 参考友军\n- [有赞元数据](https://tech.youzan.com/youzan-metadata/)\n- [饿了么元数据](https://dbaplus.cn/news-73-2143-1.html)\n- [知乎一个关于元数据的回答](https://www.zhihu.com/question/20679872/answer/54883263)","slug":"2020/article_3_讲讲元数据","published":1,"updated":"2021-01-27T04:46:28.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76700430770xwhtf99i","content":"<h2 id=\"前言\">前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2 id=\"元数据定义\">元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2 id=\"元数据采集\">元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"external\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2 id=\"元数据平台\">元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2 id=\"元数据应用\">元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\" target=\"_blank\" rel=\"external\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\" target=\"_blank\" rel=\"external\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\" target=\"_blank\" rel=\"external\">知乎一个关于元数据的回答</a></li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>做了一些元数据的系统，分享一些相关的理解与体会。<br>\n掺杂个人理解与实操历史，不一定是最佳实践。</p>\n<h2>元数据定义</h2>\n<p>元数据一般指的是 <strong>定义数据的数据</strong>。</p>\n<p>对于一个后端系统或者大数据集群来说，基本的元数据就是在执行ddl时产生的各种库表字段等信息。</p>\n<ul>\n<li>比如mysql的每个实例会默认有一个叫information_schema的库；</li>\n<li>比如hive在运行前都需要配置一个metastore库，一般为mysql库且在执行前初始化；</li>\n</ul>\n<p>这里面都记录了当前实例或集群的大部分基础元数据，且在元数据更新时实时更新这个库。<br>\n当然还有一些元数据比如数据血缘，关联关系，热度信息，业务元数据等需要一些其他手段获得。</p>\n<h2>元数据采集</h2>\n<p>首先进行元数据的采集和整合。这边都以hive举例。</p>\n<p>可能会有想法如果只是展示的话可以直接连metastore库，没必要再采集到后端，这样也不会有延时。但后期不一定会在一个集群，而且库表字段等还要有其他的各种关联数据，统计数据，因此采集到后端是比较稳妥的做法。</p>\n<ul>\n<li>对于库，表，字段，分区等信息，直接使用metastore库获取。<br>\n采取定时同步的策略，按库来同步。因为同步全量时间会比较长，可以分两种定时同步：<br>\n第一种为获取表名列表对比已同步的老表，只采集新表，这样会比较快；<br>\n第二种为获取全量的表和字段结构对比，新增的做insert，修改的做update；<br>\n同时也保留一种手动触发方式，可以让用户手动同步库或表。</li>\n</ul>\n<ul>\n<li>对于血缘，热度，关联关系等信息，目前比较直接的是使用hiveHook。<br>\n血缘hiveHook直接有LineageLogger类可以使用获取到表血缘和字段血缘。(不过这个有时候会有问题，就会比较难于排查)；热度需要sql解析出表名和字段名，对用到的都进行统计；关联关系是在查询的时候用户对表或字段进行了关联;拿到这些数据后可以直接放到一个消息队列里，然后起一个服务用来存数据和提供接口。<br>\n另一种方式：通过yarn，hook，离线任务，即时查询等的来源采集到每天运行sql，使用sql解析比如antlr4和<a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\">hive自带的Hplsql.g4</a>解析出上面这些信息，直接存储至后端，解析文件可以自行做优化。</li>\n</ul>\n<ul>\n<li>对于业务元数据，比如表负责人，层级划分，业务划分，打标签等。<br>\n因为表字段等信息是从hive同步来的，且创表人一般都为系统账号，因此表负责人来源一个为从离线任务同步而来，另一个为从建模工具同步而来。<br>\n层级划分业务划分一般是按库名或表名的规则就可以区分开，在采集的时候就加上，后期有误的话需要人工维护。<br>\n其他一些业务元数据采取批量导出导入和页面上维护。</li>\n</ul>\n<h2>元数据平台</h2>\n<p>元数据平台一般作为数据地图，除了采集到元数据以外，还要对元数据进行校正，变更记录，使用说明，统计等。<br>\n在采集表字段等元数据时，对元数据的保留一份历史版本，可以做变更查询与报警。<br>\n在接口上实现对一些业务元数据的校正和使用说明。<br>\n定时统计元数据，展示一些元数据的全局数据，总计，top榜等。</p>\n<p>平台界面上，除了对上述所有元数据的展示，同时也有各类元数据的统计和图表展示，还有各类的操作可以操作一些业务元数据。</p>\n<h2>元数据应用</h2>\n<p>除了元数据平台上的功能外，元数据也可以有其他很多的应用。<br>\n比如元数据的指标建设，将字段元数据与指标进行绑定，从而让元数据更贴近业务；<br>\n比如在控制数据权限时，需要用到表字段的策略；<br>\n比如在即时查询时用户需要查看库表字段信息来完成sql；<br>\n比如在数据监控与数据质量中，也需要用到元数据；</p>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://tech.youzan.com/youzan-metadata/\">有赞元数据</a></li>\n<li><a href=\"https://dbaplus.cn/news-73-2143-1.html\">饿了么元数据</a></li>\n<li><a href=\"https://www.zhihu.com/question/20679872/answer/54883263\">知乎一个关于元数据的回答</a></li>\n</ul>\n"},{"title":"pynput实现鼠标键盘操作的记录与还原","catalog":true,"date":"2020-04-01T08:19:52.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","source":"_posts/2020/article_4_pynput实现鼠标键盘操作的监控与还原.md","raw":"---\ntitle: pynput实现鼠标键盘操作的记录与还原\ncatalog: true\ndate: 2020-04-01 16:19:52\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- PYTHON\n- 脚本\n---\n\n## 前言\n\n心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。  \n这次实现的记录和还原的操作包括  \n- 鼠标移动，滚动，左右键\n- 键盘的按下，松开\n \n## 前期准备\n\n使用pynput就可以完美的实现上面需求，而且用着还挺简单；\n具体包详细接口与使用说明看如下图：  \n![图](/img/mypost/pynput.png)\n\n## 具体实现\n使用python3编写，在mac环境下运行良好。\n\n``` python\nimport time\nimport json\nimport random\nimport threading\nimport pynput\n\n\nclass MouseRecord(object):\n    \"\"\"\n    记录键盘鼠标事件值json文件，\n    包括鼠标移动，滚动，左右键\n    键盘按下，放开\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse_list = []\n        self.running = True\n        self.save_file = \"mouselist.json\"\n\n    def get_time(self):\n        return time.time() - self.start_time\n\n    def on_click(self, x, y, button, pressed):\n        \"\"\"\n        click事件\n        \"\"\"\n        if not self.running:\n            return False\n        if not pressed:\n            return True\n        self.mouse_list.append({\n            \"opera\": \"click\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"button\": str(button),\n            \"stime\": self.get_time()\n        })\n        print(x, y, button, pressed)\n\n    def on_move(self, x, y):\n        \"\"\"\n        鼠标移动事件，加个随机减少存储\n        \"\"\"\n        if random.randint(0, 2) == 1:\n            self.mouse_list.append({\n                \"opera\": \"move\",\n                \"posix\": x,\n                \"posiy\": y,\n                \"stime\": self.get_time()\n            })\n\n    def on_scroll(self, x, y, dx, dy):\n        \"\"\"\n        鼠标滚动事件\n        \"\"\"\n        self.mouse_list.append({\n            \"opera\": \"scroll\",\n            \"posix\": x,\n            \"posiy\": y,\n            \"scrollx\": dx,\n            \"scrolly\": dy,\n            \"stime\": self.get_time()\n        })\n\n    def on_key_press(self, key):\n        \"\"\"\n        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx\n        按下esc的时候退出监听\n        \"\"\"\n        if key == pynput.keyboard.Key.esc:\n            self.running = False\n            mouse = pynput.mouse.Controller()\n            mouse.click(pynput.mouse.Button.left)\n            return self.running\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"press\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def on_key_release(self, key):\n        \"\"\"\n        键盘释放事件\n        \"\"\"\n        if str(key) != \"<0>\":\n            self.mouse_list.append({\n                \"opera\": \"release\",\n                \"key\": str(key).strip(\"'\"),\n                \"stime\": self.get_time()\n            })\n\n    def mouse_listen(self):\n        \"\"\"\n        开启鼠标监听\n        \"\"\"\n        with pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) as listener:\n            listener.join()\n\n    def key_listen(self):\n        \"\"\"\n        开启键盘监听\n        \"\"\"\n        with pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) as listener:\n            listener.join()\n\n    def run(self):\n        \"\"\"\n        运行监听，结束后保存为json文件\n        \"\"\"\n        self.start_time = time.time()\n        t1 = threading.Thread(target=self.mouse_listen)\n        t2 = threading.Thread(target=self.key_listen)\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()\n        print(json.dumps(self.mouse_list), file=open(self.save_file, \"w\"))\n\n\nclass MouseRecover(object):\n    \"\"\"\n    还原键盘鼠标事件\n    \"\"\"\n    def __init__(self):\n        self.start_time = 0\n        self.mouse = pynput.mouse.Controller()\n        self.keyboard = pynput.keyboard.Controller()\n        self.buttons = {\n            \"Button.left\": pynput.mouse.Button.left,\n            \"Button.right\": pynput.mouse.Button.right\n        }\n        self.read_file = \"mouselist.json\"\n\n    def deal_click(self, record):\n        \"\"\"\n        处理鼠标点击事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        time.sleep(0.1)\n        self.mouse.click(self.buttons.get(record.get(\"button\")))\n\n    def deal_move(self, record):\n        \"\"\"\n        处理鼠标移动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n\n    def deal_scroll(self, record):\n        \"\"\"\n        处理鼠标滚动事件\n        \"\"\"\n        self.mouse.position = (record.get(\"posix\"), record.get(\"posiy\"))\n        self.mouse.scroll(record.get(\"scrollx\"), record.get(\"scrolly\"))\n\n    def deal_key_press(self, record):\n        \"\"\"\n        处理键盘按下事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.press(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.press(record.get(\"key\"))\n\n    def deal_key_release(self, record):\n        \"\"\"\n        处理键盘释放事件\n        \"\"\"\n        if record.get(\"key\").startswith(\"Key\"):\n            self.keyboard.release(eval(record.get(\"key\"), {}, {\n                \"Key\": pynput.keyboard.Key\n            }))\n        else:\n            self.keyboard.release(record.get(\"key\"))\n\n    def run(self):\n        \"\"\"\n        读取json文件，执行事件\n        \"\"\"\n        data = json.load(open(self.read_file, \"r\"))\n        for item in data:\n            if item.get(\"opera\") == \"click\":\n                self.deal_click(item)\n            if item.get(\"opera\") == \"move\":\n                self.deal_move(item)\n            if item.get(\"opera\") == \"scroll\":\n                self.deal_scroll(item)\n            if item.get(\"opera\") == \"press\":\n                self.deal_key_press(item)\n            if item.get(\"opera\") == \"release\":\n                self.deal_key_release(item)\n            time.sleep(item.get(\"stime\") - self.start_time)\n            self.start_time = item.get(\"stime\")\n\n\nif __name__ == \"__main__\":\n    #记录事件\n    t = MouseRecord()\n    t.run()\n\n    # 运行事件\n    # tt = MouseRecover()\n    # tt.run()\n```\n\n## 使用\n\n- 先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；\n- 在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）\n\n## 后期遐想\n\n- 可以对保存的操作链路进行编辑，在执行时插入一些变量；\n\n## 参考友军\n- [记录你的操作——pynput模拟和监听键盘鼠标操作](https://www.jianshu.com/p/11a8e75f5170)","slug":"2020/article_4_pynput实现鼠标键盘操作的监控与还原","published":1,"updated":"2021-01-27T04:46:28.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76800460770nl48uszk","content":"<h2 id=\"前言\">前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2 id=\"前期准备\">前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2 id=\"后期遐想\">后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2 id=\"参考友军\">参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\" target=\"_blank\" rel=\"external\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n","excerpt":"","more":"<h2>前言</h2>\n<p>心血来潮，实现一波记录操作并还原操作，可用的场景说不定还挺多。<br>\n这次实现的记录和还原的操作包括</p>\n<ul>\n<li>鼠标移动，滚动，左右键</li>\n<li>键盘的按下，松开</li>\n</ul>\n<h2>前期准备</h2>\n<p>使用pynput就可以完美的实现上面需求，而且用着还挺简单；<br>\n具体包详细接口与使用说明看如下图：<br>\n<img src=\"/img/mypost/pynput.png\" alt=\"图\"></p>\n<h2>具体实现</h2>\n<p>使用python3编写，在mac环境下运行良好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> pynput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecord</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    记录键盘鼠标事件值json文件，</span></span><br><span class=\"line\"><span class=\"string\">    包括鼠标移动，滚动，左右键</span></span><br><span class=\"line\"><span class=\"string\">    键盘按下，放开</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse_list = []</span><br><span class=\"line\">        self.running = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.save_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> time.time() - self.start_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_click</span><span class=\"params\">(self, x, y, button, pressed)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        click事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.running:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> pressed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"button\"</span>: str(button),</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        print(x, y, button, pressed)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_move</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标移动事件，加个随机减少存储</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"move\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">                <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_scroll</span><span class=\"params\">(self, x, y, dx, dy)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse_list.append(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"scroll\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"posix\"</span>: x,</span><br><span class=\"line\">            <span class=\"string\">\"posiy\"</span>: y,</span><br><span class=\"line\">            <span class=\"string\">\"scrollx\"</span>: dx,</span><br><span class=\"line\">            <span class=\"string\">\"scrolly\"</span>: dy,</span><br><span class=\"line\">            <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_press</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘按下事件，正常建是直接展示字符，特殊键会返回Key.xxx</span></span><br><span class=\"line\"><span class=\"string\">        按下esc的时候退出监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key == pynput.keyboard.Key.esc:</span><br><span class=\"line\">            self.running = <span class=\"keyword\">False</span></span><br><span class=\"line\">            mouse = pynput.mouse.Controller()</span><br><span class=\"line\">            mouse.click(pynput.mouse.Button.left)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.running</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"press\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_key_release</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> str(key) != <span class=\"string\">\"&lt;0&gt;\"</span>:</span><br><span class=\"line\">            self.mouse_list.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">\"opera\"</span>: <span class=\"string\">\"release\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"key\"</span>: str(key).strip(<span class=\"string\">\"'\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"stime\"</span>: self.get_time()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouse_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启鼠标监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.mouse.Listener(on_move=self.on_move, on_click=self.on_click, on_scroll=self.on_scroll) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">key_listen</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        开启键盘监听</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pynput.keyboard.Listener(on_press=self.on_key_press, on_release=self.on_key_release) <span class=\"keyword\">as</span> listener:</span><br><span class=\"line\">            listener.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        运行监听，结束后保存为json文件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.start_time = time.time()</span><br><span class=\"line\">        t1 = threading.Thread(target=self.mouse_listen)</span><br><span class=\"line\">        t2 = threading.Thread(target=self.key_listen)</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\">        t2.start()</span><br><span class=\"line\">        t1.join()</span><br><span class=\"line\">        t2.join()</span><br><span class=\"line\">        print(json.dumps(self.mouse_list), file=open(self.save_file, <span class=\"string\">\"w\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MouseRecover</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    还原键盘鼠标事件</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.start_time = <span class=\"number\">0</span></span><br><span class=\"line\">        self.mouse = pynput.mouse.Controller()</span><br><span class=\"line\">        self.keyboard = pynput.keyboard.Controller()</span><br><span class=\"line\">        self.buttons = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Button.left\"</span>: pynput.mouse.Button.left,</span><br><span class=\"line\">            <span class=\"string\">\"Button.right\"</span>: pynput.mouse.Button.right</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.read_file = <span class=\"string\">\"mouselist.json\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_click</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标点击事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.mouse.click(self.buttons.get(record.get(<span class=\"string\">\"button\"</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_move</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标移动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_scroll</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理鼠标滚动事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.mouse.position = (record.get(<span class=\"string\">\"posix\"</span>), record.get(<span class=\"string\">\"posiy\"</span>))</span><br><span class=\"line\">        self.mouse.scroll(record.get(<span class=\"string\">\"scrollx\"</span>), record.get(<span class=\"string\">\"scrolly\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_press</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘按下事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.press(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.press(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_key_release</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        处理键盘释放事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> record.get(<span class=\"string\">\"key\"</span>).startswith(<span class=\"string\">\"Key\"</span>):</span><br><span class=\"line\">            self.keyboard.release(eval(record.get(<span class=\"string\">\"key\"</span>), &#123;&#125;, &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Key\"</span>: pynput.keyboard.Key</span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.keyboard.release(record.get(<span class=\"string\">\"key\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        读取json文件，执行事件</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        data = json.load(open(self.read_file, <span class=\"string\">\"r\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"click\"</span>:</span><br><span class=\"line\">                self.deal_click(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"move\"</span>:</span><br><span class=\"line\">                self.deal_move(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"scroll\"</span>:</span><br><span class=\"line\">                self.deal_scroll(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"press\"</span>:</span><br><span class=\"line\">                self.deal_key_press(item)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.get(<span class=\"string\">\"opera\"</span>) == <span class=\"string\">\"release\"</span>:</span><br><span class=\"line\">                self.deal_key_release(item)</span><br><span class=\"line\">            time.sleep(item.get(<span class=\"string\">\"stime\"</span>) - self.start_time)</span><br><span class=\"line\">            self.start_time = item.get(<span class=\"string\">\"stime\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"comment\">#记录事件</span></span><br><span class=\"line\">    t = MouseRecord()</span><br><span class=\"line\">    t.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 运行事件</span></span><br><span class=\"line\">    <span class=\"comment\"># tt = MouseRecover()</span></span><br><span class=\"line\">    <span class=\"comment\"># tt.run()</span></span><br></pre></td></tr></table></figure>\n<h2>使用</h2>\n<ul>\n<li>先运行MouseRecord的run，然后就已经开启记录，操作一遍后按esc退出记录；</li>\n<li>在运行MouseRecover的run，然后就会把刚刚中间记录的操作执行一遍；（操作最好可重复还原的）</li>\n</ul>\n<h2>后期遐想</h2>\n<ul>\n<li>可以对保存的操作链路进行编辑，在执行时插入一些变量；</li>\n</ul>\n<h2>参考友军</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/11a8e75f5170\">记录你的操作——pynput模拟和监听键盘鼠标操作</a></li>\n</ul>\n"},{"title":"hive与mysql元数据的快速采集","catalog":true,"date":"2020-04-05T08:35:20.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","source":"_posts/2020/article_5_hive与mysql元数据的快速采集.md","raw":"---\ntitle: hive与mysql元数据的快速采集\ncatalog: true\ndate: 2020-04-05 16:35:20\nsubtitle:\nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- 元数据\n- 大数据\n- MYSQL\n---\n\n## Hive元数据采集\n\n首先以hive举例，\n\nhive可以在命令行执行下面命令得到大部分表和字段的元数据，  \n但因为这样每个都要执行就很慢。\n> DESCRIBE FORMATTED {tablename}\n\n然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，  \n想了解详细结构可以移步[Hive MetaStore的结构](https://www.jianshu.com/p/420ddb3bde7f)。\n\n因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，  \n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，  \n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。  \n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。\n\n下面是Metastore获取库，表，字段的具体操作：\n- 先有要采集的库名，到**dbs**表根据name查询到对应的一条数据，得到库的一些信息，记录下**db_id**;\n- 根据得到的**db_id**在tbls表找到对应**db_id**的表列表，每条数据包含了表名，类型，创建时间等信息；\n- 表的元数据还不够，有一部分在**table_params**表中，他的存储方式是**tbl_id, key，value，key**包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)\n- 通过**tbl_id**到**partition**，**partition_params**，**partition_keys**可以拿到分区表的分区信息和全部分区的大小\n  \n\n- 然后是取一个库的全部字段，当然字段都是要带有**tbl_id**的，这样才能与上面表列表对应。\n- 通过**db_id**从**tbls**获取到对应的表列表，通过列表中的**sd_id**到表sds得到对应的**cd_id**列表\n- 通过**cd_id**列表到表**columns_v2**获取到对应的字段信息\n- 另外分区字段需要额外从**partition_keys**通过**tbl_id**获取\n\n使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；\n\n## Mysql元数据采集\n\nMysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；\n\ninformation_schema的结构大致见[这里](https://www.jianshu.com/p/c08fe8e01c0a)\n\n这里以tables表为例，存了大部分表元数据，取数据比如库记录id \n> database_id = 2   \n> database_name = db_test\n\n取表数据数据\n\n> select `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`  \n> form `TABLES` where `TABLE_SCHEMA` = 'db_test'\n\n在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下\n\n> insert into back_table  \n> (db_id, table_name, table_type)  \n> values  \n> ('test', 'db_test', 'test', 'test')  \n> on duplicate key update  \n> table_name=values(table_name),  \n> table_type=values(table_type);\n\n然后直接完成对后端元数据的同步。字段同理。\n\n这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。\n\n## 关于实时采集\n\n上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。\n\n一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。\n\n然后这里再来考虑一下实时采集的方案。\n\n主要利用的是mysql的binlog，先开启MySQL的binlog；\n\n然后使用MySQL binlog的增量订阅&消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；\n\n然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。\n\nmysql开启binlog见[这里](https://www.jianshu.com/p/5870cf1affb6)\n\ncanal连接mysql接受binlog并把数据投递到kafka见[这里官方教程](https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart)(安装教程也在这里)\n\n之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，  \n这里用java实现实现了一个消费kafka的demo。\n``` Java\npackage cn.ganjiacheng;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\n/**\n * @description:\n * @author: again\n * @email: 935669873@qq.com\n * @date: 2020/3/9 11:46 上午\n */\npublic class KafkaConsumerTest {\n\n    public static void main(String[] args) {\n        String topic = \"mysqldata\";\n        String groupID = \"lalal\";\n\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", groupID);\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"auto.offset.reset\", \"earliest\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);\n\n        consumer.subscribe(Collections.singletonList(topic));\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(1000);\n                for(ConsumerRecord<String, String> record: records) {\n                    System.out.println(String.format(\"offset = %s, key = %s, value = %s\", record.offset(), record.key(), record.value()));\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n开启canal的flatMessage为true，拿到的数据为json格式，  \n从value里解析json数据如下，能拿到database和table。\n之后就可以进行元数据采集。\n``` json\n{\n    \"data\": null,\n    \"database\": \"canal\",\n    \"es\": 1586092113000,\n    \"id\": 1,\n    \"isDdl\": true,\n    \"mysqlType\": null,\n    \"old\": null,\n    \"pkNames\": null,\n    \"sql\": \"sql sql sql\",\n    \"sqlType\": null,\n    \"table\": \"table_name\",\n    \"ts\": 1586092904217,\n    \"type\": \"CREATE\"\n}\n```","slug":"2020/article_5_hive与mysql元数据的快速采集","published":1,"updated":"2021-01-27T04:46:28.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76a00480770ie2b5ryp","content":"<h2 id=\"hive元数据采集\">Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\" target=\"_blank\" rel=\"external\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2 id=\"mysql元数据采集\">Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2 id=\"关于实时采集\">关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\" target=\"_blank\" rel=\"external\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2>Hive元数据采集</h2>\n<p>首先以hive举例，</p>\n<p>hive可以在命令行执行下面命令得到大部分表和字段的元数据，<br>\n但因为这样每个都要执行就很慢。</p>\n<blockquote>\n<p>DESCRIBE FORMATTED {tablename}</p>\n</blockquote>\n<p>然后直接尝试从metastore库采集，这里不做metastore具体结构的论述，<br>\n想了解详细结构可以移步<a href=\"https://www.jianshu.com/p/420ddb3bde7f\">Hive MetaStore的结构</a>。</p>\n<p>因为是按库采集，首先想到的方法是先到通过库获取库下的全部表列表，<br>\n再通过库获取全部表的字段，然后在代码里进行对应表字段的整合，<br>\n因为要对每个表都进行比对修改和版本记录等，因此就一个个表进行处理入库。<br>\n这样取数的过程因为就两个mysql事务的步骤，实际就很快，但入库时的效率就会偏低。</p>\n<p>下面是Metastore获取库，表，字段的具体操作：</p>\n<ul>\n<li>先有要采集的库名，到<strong>dbs</strong>表根据name查询到对应的一条数据，得到库的一些信息，记录下<strong>db_id</strong>;</li>\n<li>根据得到的<strong>db_id</strong>在tbls表找到对应<strong>db_id</strong>的表列表，每条数据包含了表名，类型，创建时间等信息；</li>\n<li>表的元数据还不够，有一部分在<strong>table_params</strong>表中，他的存储方式是<strong>tbl_id, key，value，key</strong>包含了文件数，行数，大小，备注，更新时间等(有些不一定靠谱)</li>\n<li>通过<strong>tbl_id</strong>到<strong>partition</strong>，<strong>partition_params</strong>，<strong>partition_keys</strong>可以拿到分区表的分区信息和全部分区的大小</li>\n</ul>\n<ul>\n<li>然后是取一个库的全部字段，当然字段都是要带有<strong>tbl_id</strong>的，这样才能与上面表列表对应。</li>\n<li>通过<strong>db_id</strong>从<strong>tbls</strong>获取到对应的表列表，通过列表中的<strong>sd_id</strong>到表sds得到对应的<strong>cd_id</strong>列表</li>\n<li>通过<strong>cd_id</strong>列表到表<strong>columns_v2</strong>获取到对应的字段信息</li>\n<li>另外分区字段需要额外从<strong>partition_keys</strong>通过<strong>tbl_id</strong>获取</li>\n</ul>\n<p>使用上述操作，将表信息和字段信息分别使用join拼接为一张大表（这里可能会产生一些慢查询，可以把这个同步放到从库里），这样就已经拿到了基本想要的信息，然后通过tbl_id对表和字段数据进行整合，在把表一张张进行处理更新或新建，同时更新相关联的项；</p>\n<h2>Mysql元数据采集</h2>\n<p>Mysql按理来说是和上面metastore基本一样的，但这边想更快一点，且可以忽略调表、字段和其他有外键关联的项；</p>\n<p>information_schema的结构大致见<a href=\"https://www.jianshu.com/p/c08fe8e01c0a\">这里</a></p>\n<p>这里以tables表为例，存了大部分表元数据，取数据比如库记录id</p>\n<blockquote>\n<p>database_id = 2<br>\ndatabase_name = db_test</p>\n</blockquote>\n<p>取表数据数据</p>\n<blockquote>\n<p>select <code>TABLE_SCHEMA</code>, <code>TABLE_NAME</code>, <code>TABLE_TYPE</code><br>\nform <code>TABLES</code> where <code>TABLE_SCHEMA</code> = ‘db_test’</p>\n</blockquote>\n<p>在往后端同步数据时，先建一个db_id 与 table_name 的唯一索引，然后使用on duplicate key update实现对插入数据还是更新数据的检查。例如下</p>\n<blockquote>\n<p>insert into back_table<br>\n(db_id, table_name, table_type)<br>\nvalues<br>\n(‘test’, ‘db_test’, ‘test’, ‘test’)<br>\non duplicate key update<br>\ntable_name=values(table_name),<br>\ntable_type=values(table_type);</p>\n</blockquote>\n<p>然后直接完成对后端元数据的同步。字段同理。</p>\n<p>这种方式采集一般的库几百张表和字段的就非常快了，基本都3秒以内。但也要考虑在表和字段比较多的时候要进行分批处理，否则可能一个sql过大或插入过慢。</p>\n<h2>关于实时采集</h2>\n<p>上面讲到的方式基本都是对全部元数据进行定时采集，定时的全量采集有个缺点就很慢，建了表好久才能同步到。</p>\n<p>一般优化的方式是定时采集也可以分为新表采集与全量采集，这样把新表采集的频率变高，全量采集不变，可以稍微优化下体验。</p>\n<p>然后这里再来考虑一下实时采集的方案。</p>\n<p>主要利用的是mysql的binlog，先开启MySQL的binlog；</p>\n<p>然后使用MySQL binlog的增量订阅&amp;消费组件，如ali的canal，将binlog的json消息发送到消息队列，如kafka；</p>\n<p>然后写一个消费端去消费，如果消费到create语句，就根据库名，表名到源数据库进行一次单表的采集。这样就可以实现建表即实时采集到元数据系统中。</p>\n<p>mysql开启binlog见<a href=\"https://www.jianshu.com/p/5870cf1affb6\">这里</a></p>\n<p>canal连接mysql接受binlog并把数据投递到kafka见<a href=\"https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart\">这里官方教程</a>(安装教程也在这里)</p>\n<p>之后写个kafka消费端来接受json的binlog数据，并得到库表去进行采集同步，<br>\n这里用java实现实现了一个消费kafka的demo。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.ganjiacheng;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: again</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: 935669873@qq.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2020/3/9 11:46 上午</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KafkaConsumerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String topic = <span class=\"string\">\"mysqldata\"</span>;</span><br><span class=\"line\">        String groupID = <span class=\"string\">\"lalal\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        props.put(<span class=\"string\">\"bootstrap.servers\"</span>, <span class=\"string\">\"localhost:9092\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"group.id\"</span>, groupID);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"enable.auto.commit\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.commit.interval.ms\"</span>, <span class=\"string\">\"1000\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"auto.offset.reset\"</span>, <span class=\"string\">\"earliest\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"key.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        props.put(<span class=\"string\">\"value.deserializer\"</span>, <span class=\"string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span>);</span><br><span class=\"line\">        KafkaConsumer&lt;String, String&gt; consumer = <span class=\"keyword\">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(ConsumerRecord&lt;String, String&gt; record: records) &#123;</span><br><span class=\"line\">                    System.out.println(String.format(<span class=\"string\">\"offset = %s, key = %s, value = %s\"</span>, record.offset(), record.key(), record.value()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            consumer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开启canal的flatMessage为true，拿到的数据为json格式，<br>\n从value里解析json数据如下，能拿到database和table。<br>\n之后就可以进行元数据采集。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"database\"</span>: <span class=\"string\">\"canal\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"es\"</span>: <span class=\"number\">1586092113000</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"isDdl\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mysqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"old\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkNames\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sql\"</span>: <span class=\"string\">\"sql sql sql\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sqlType\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"table\"</span>: <span class=\"string\">\"table_name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ts\"</span>: <span class=\"number\">1586092904217</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CREATE\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hiveSQL执行日志的收集","catalog":true,"date":"2020-04-09T08:30:21.000Z","subtitle":null,"header-img":null,"_content":"\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","source":"_posts/2020/article_8_hiveSQL执行日志的收集.md","raw":"---\ntitle: hiveSQL执行日志的收集\ncatalog: true\ndate: 2020-04-09 16:30:21\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- YARN\n---\n\n## 前言\n\n一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。\n\n使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。\n\n## 实现\n\n### jdbc部分日志\n\n获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）\n\n以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式\n``` python\nfrom pyhive import hive\nfrom TCLIService.ttypes import TOperationState\n\n# 连接\nconn = hive.connect(host=host, port=port, username=user,  database='default')\ncursor = conn.cursor()\n\n# 异步执行hql\ncursor.execute('''select count(1) from table''', async_=True)\n\n# 获取执行日志\n# 每次poll拿到状态，如果还在执行中就fetch_logs并打印\n# poll比较慢，建议测试时可以选择多join几张表\nstatus = cursor.poll().operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    logs = cursor.fetch_logs()\n    for message in logs:\n        print(message)\n        match_res = re.findall(r'App id (.*?)\\)', message)\n        if len(match_res) > 0:\n            application_id = match_res[0]\n            break\n    status = cursor.poll().operationState\n\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\n\n打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。\n```\nINFO  : Tez session hasn't been created yet. Opening session\nDEBUG : Adding local resource: scheme: \"hdfs\" host: \"NameNodeHACluster\" port: -1 file: \"/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar\"\nDEBUG : DagInfo: {\"context\":\"Hive\",\"description\":\"select count(1) from table\"}\nDEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive\nINFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896\nINFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)\n```\n\n### 进度和mapreduce信息\n\n之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。\n\n先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。\n```\ndef poll(self, get_progress_update=True):\n    \"\"\"Poll for and return the raw status data provided by the Hive Thrift REST API.\n    :returns: ``ttypes.TGetOperationStatusResp``\n    :raises: ``ProgrammingError`` when no query has been started\n    .. note::\n        This is not a part of DB-API.\n    \"\"\"\n```\n\n```\nclass TGetOperationStatusResp(object):\n    \"\"\"\n    Attributes:\n     - status\n     - operationState\n     - sqlState\n     - errorCode\n     - errorMessage\n     - taskStatus\n     - operationStarted\n     - operationCompleted\n     - hasResultSet\n     - progressUpdateResponse\n    \"\"\"\n```\n\n然后修改上面poll部分的代码，得到进度和mapreduce信息，  \ntabulate为画表格库\n\n``` python\npoll = cursor.poll()\nstatus = poll.operationState\napplication_id = None\nwhile status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n    arr = []\n    # 获取poll中的progressUpdateResponse\n    # headerNames里为头信息，rows里为每行的数据\n    arr.append(poll.progressUpdateResponse.headerNames)\n    arr.extend(poll.progressUpdateResponse.rows)\n    print(tabulate(arr, tablefmt='grid'))\n    print(\"progress: {}%\".format(round(poll.progressUpdateResponse.progressedPercentage * 100, 2)))\n    poll = cursor.poll()\n    status = poll.operationState\n```\n\n效果如下\n![pyhiveprogress](/img/mypost/pyhiveprogress.png)\n\n### 全部conrainer日志\n\n继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。\n> yarn logs -applicationId {applicationId}\n\n> yarn logs -containerId {containerId}\n\n然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为\n\n> org.apache.hadoop.yarn.client.cli.LogsCLI\n\n函数追踪的路径如下  \n\n> runCommand -> fetchAMContainerLogs -> printAMContainerLogs -> getAMContainerInfoForRMWebService -> getAMContainerInfoFromRM\n\n然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下\n> http://host:port/ws/v1/cluster/apps/{applicationId}/appattempts\n``` java\nBuilder builder = webServiceClient.resource(webAppAddress)\n          .path(\"ws\").path(\"v1\").path(\"cluster\")\n          .path(\"apps\").path(appId).path(\"appattempts\")\n          .accept(MediaType.APPLICATION_JSON);\nresponse = builder.get(ClientResponse.class);\nJSONObject json = response.getEntity(JSONObject.class)\n    .getJSONObject(\"appAttempts\");\nJSONArray requests = json.getJSONArray(\"appAttempt\");\n```\n\n得到数据结构大致如下，logsLink直接访问就是log的html的地址\n这边记录下containerId和nodeHttpAddress\n\n``` json\n{\n    \"appAttempts\": {\n        \"appAttempt\": [\n            {\n                \"id\": 1,\n                \"startTime\": 1585100799481,\n                \"finishedTime\": 1585100821657,\n                \"containerId\": \"container_e45_000001\",\n                \"nodeHttpAddress\": \"host:port\",\n                \"nodeId\": \"host:port\",\n                \"logsLink\": \"http://host:port/node/containerlogs/conta801/hive\",\n                \"blacklistedNodes\": \"\",\n                \"appAttemptId\": \"appattempt_15840200001\"\n            }\n        ]\n    }\n}\n```\n\n然后追踪另一条路，又可以发现它获取日志的地方  \n> runCommand -> fetchContainerLogs -> getMatchedOptionForRunningApp -> getMatchedContainerLogFiles -> getContainerLogFiles\n\n``` java\nWebResource webResource = webServiceClient\n          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\nClientResponse response =\n    webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\")\n        .path(containerIdStr).path(\"logs\")\n        .accept(MediaType.APPLICATION_JSON)\n        .get(ClientResponse.class);\n```\n\n这边的地址拼接如下\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs\n\n访问后可以获取到如下信息\ncontainerLogInfo里面每个都是日志文件。\n\n``` json\n[\n    {\n        \"containerId\": \"container_e455_01\",\n        \"nodeId\": \"hadoop-4355\",\n        \"containerLogInfo\": [\n            {\n                \"fileName\": \"dag_1584028893195_0587_1.dot\",\n                \"fileSize\": \"1631\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            {\n                \"fileName\": \"directory.info\",\n                \"fileSize\": \"18349\",\n                \"lastModifiedTime\": \"Wed Mar 25 09:47:03 +0800 2020\"\n            },\n            ......\n        ],\n        \"logAggregationType\": \"AGGREGATED\"\n    }\n]\n```\n\n可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可\n> http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}\n\n至此已获取到全部日志。","slug":"2020/article_8_hiveSQL执行日志的收集","published":1,"updated":"2021-01-27T04:46:28.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76c004b0770ue9c069a","content":"<h2 id=\"前言\">前言</h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2 id=\"实现\">实现</h2>\n<h3 id=\"jdbc部分日志\">jdbc部分日志</h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3 id=\"进度和mapreduce信息\">进度和mapreduce信息</h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3 id=\"全部conrainer日志\">全部conrainer日志</h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\" target=\"_blank\" rel=\"external\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>一般的hive客户端都没有详细的执行日志，要了解执行情况得去yarn看，就比较麻烦，本次考虑的是在hive客户端获取到全部的执行日志，来源主要参考hadoop-yarn-client的内部实现。</p>\n<p>使用引擎为tez，在异步执行hql时，获取到的日志中包括applicationId，考虑通过这个去获取到全部的执行日志，包括进度和map/reduce信息。</p>\n<h2>实现</h2>\n<h3>jdbc部分日志</h3>\n<p>获取jdbc的执行日志调研过程中主要使用的是pyhive，（impyla在get_log的时候好像会出点问题）</p>\n<p>以下为获取hive在客户端执行日志的部分代码，执行使用了异步的方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyhive <span class=\"keyword\">import</span> hive</span><br><span class=\"line\"><span class=\"keyword\">from</span> TCLIService.ttypes <span class=\"keyword\">import</span> TOperationState</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = hive.connect(host=host, port=port, username=user,  database=<span class=\"string\">'default'</span>)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 异步执行hql</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">'''select count(1) from table'''</span>, async_=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取执行日志</span></span><br><span class=\"line\"><span class=\"comment\"># 每次poll拿到状态，如果还在执行中就fetch_logs并打印</span></span><br><span class=\"line\"><span class=\"comment\"># poll比较慢，建议测试时可以选择多join几张表</span></span><br><span class=\"line\">status = cursor.poll().operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    logs = cursor.fetch_logs()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> logs:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\">        match_res = re.findall(<span class=\"string\">r'App id (.*?)\\)'</span>, message)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(match_res) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            application_id = match_res[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    status = cursor.poll().operationState</span><br><span class=\"line\"></span><br><span class=\"line\">cursor.fetchall()</span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<p>打印的日志大致如下，最后一行有applicationId，可以通过对每行进行正则匹配获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  : Tez session hasn&apos;t been created yet. Opening session</span><br><span class=\"line\">DEBUG : Adding local resource: scheme: &quot;hdfs&quot; host: &quot;NameNodeHACluster&quot; port: -1 file: &quot;/tmp/hive/hive/_tez_session_dir/a3b39087-cf39-4850-a8a0-2e31857a9a64/hive-contrib.jar&quot;</span><br><span class=\"line\">DEBUG : DagInfo: &#123;&quot;context&quot;:&quot;Hive&quot;,&quot;description&quot;:&quot;select count(1) from table&quot;&#125;</span><br><span class=\"line\">DEBUG : Setting Tez DAG access for queryId=hive_20200409162528_98663859-dda3-4f6f-a56b-618dc92b5a0c with viewAclString=*, modifyStr=souche,hive</span><br><span class=\"line\">INFO  : Setting tez.task.scale.memory.reserve-fraction to 0.30000001192092896</span><br><span class=\"line\">INFO  : Status: Running (Executing on YARN cluster with App id application_1584028893195_1234)</span><br></pre></td></tr></table></figure>\n<h3>进度和mapreduce信息</h3>\n<p>之后考虑进度和mapreduce信息日志，这个在hive客户端执行的时候是有一张表格展示的。</p>\n<p>先看下面poll的源码解释，返回的是TGetOperationStatusResp，在追踪到这个,除了上面用到的拿到目前的执行状态operationState以外，还有一个叫progressUpdateResponse的，目测是想要的进度信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def poll(self, get_progress_update=True):</span><br><span class=\"line\">    &quot;&quot;&quot;Poll for and return the raw status data provided by the Hive Thrift REST API.</span><br><span class=\"line\">    :returns: ``ttypes.TGetOperationStatusResp``</span><br><span class=\"line\">    :raises: ``ProgrammingError`` when no query has been started</span><br><span class=\"line\">    .. note::</span><br><span class=\"line\">        This is not a part of DB-API.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TGetOperationStatusResp(object):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">     - status</span><br><span class=\"line\">     - operationState</span><br><span class=\"line\">     - sqlState</span><br><span class=\"line\">     - errorCode</span><br><span class=\"line\">     - errorMessage</span><br><span class=\"line\">     - taskStatus</span><br><span class=\"line\">     - operationStarted</span><br><span class=\"line\">     - operationCompleted</span><br><span class=\"line\">     - hasResultSet</span><br><span class=\"line\">     - progressUpdateResponse</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>然后修改上面poll部分的代码，得到进度和mapreduce信息，<br>\ntabulate为画表格库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poll = cursor.poll()</span><br><span class=\"line\">status = poll.operationState</span><br><span class=\"line\">application_id = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> status <span class=\"keyword\">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</span><br><span class=\"line\">    arr = []</span><br><span class=\"line\">    <span class=\"comment\"># 获取poll中的progressUpdateResponse</span></span><br><span class=\"line\">    <span class=\"comment\"># headerNames里为头信息，rows里为每行的数据</span></span><br><span class=\"line\">    arr.append(poll.progressUpdateResponse.headerNames)</span><br><span class=\"line\">    arr.extend(poll.progressUpdateResponse.rows)</span><br><span class=\"line\">    print(tabulate(arr, tablefmt=<span class=\"string\">'grid'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"progress: &#123;&#125;%\"</span>.format(round(poll.progressUpdateResponse.progressedPercentage * <span class=\"number\">100</span>, <span class=\"number\">2</span>)))</span><br><span class=\"line\">    poll = cursor.poll()</span><br><span class=\"line\">    status = poll.operationState</span><br></pre></td></tr></table></figure>\n<p>效果如下<br>\n<img src=\"/img/mypost/pyhiveprogress.png\" alt=\"pyhiveprogress\"></p>\n<h3>全部conrainer日志</h3>\n<p>继续考虑获取从yarn获取全部日志，一般的可以在集群中用以下命令获取全部日志,containerId可以从yarn管理页面获取到。</p>\n<blockquote>\n<p>yarn logs -applicationId {applicationId}</p>\n</blockquote>\n<blockquote>\n<p>yarn logs -containerId {containerId}</p>\n</blockquote>\n<p>然后查看hadoop-yarn-client中对上面命令实现的部分，从中找出具体的日志接口。包和文件路径为</p>\n<blockquote>\n<p>org.apache.hadoop.yarn.client.cli.LogsCLI</p>\n</blockquote>\n<p>函数追踪的路径如下</p>\n<blockquote>\n<p>runCommand -&gt; fetchAMContainerLogs -&gt; printAMContainerLogs -&gt; getAMContainerInfoForRMWebService -&gt; getAMContainerInfoFromRM</p>\n</blockquote>\n<p>然后可以看到如下部分代码，这边包装了一个get请求，因此也按它的地址调用一下</p>\n<blockquote>\n<p><a href=\"http://host\">http://host</a>:port/ws/v1/cluster/apps/{applicationId}/appattempts</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Builder builder = webServiceClient.resource(webAppAddress)</span><br><span class=\"line\">          .path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"cluster\"</span>)</span><br><span class=\"line\">          .path(<span class=\"string\">\"apps\"</span>).path(appId).path(<span class=\"string\">\"appattempts\"</span>)</span><br><span class=\"line\">          .accept(MediaType.APPLICATION_JSON);</span><br><span class=\"line\">response = builder.get(ClientResponse.class);</span><br><span class=\"line\">JSONObject json = response.getEntity(JSONObject.class)</span><br><span class=\"line\">    .getJSONObject(<span class=\"string\">\"appAttempts\"</span>);</span><br><span class=\"line\">JSONArray requests = json.getJSONArray(<span class=\"string\">\"appAttempt\"</span>);</span><br></pre></td></tr></table></figure>\n<p>得到数据结构大致如下，logsLink直接访问就是log的html的地址<br>\n这边记录下containerId和nodeHttpAddress</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appAttempts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"appAttempt\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"startTime\"</span>: <span class=\"number\">1585100799481</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"finishedTime\"</span>: <span class=\"number\">1585100821657</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e45_000001\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeHttpAddress\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"host:port\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"logsLink\"</span>: <span class=\"string\">\"http://host:port/node/containerlogs/conta801/hive\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"blacklistedNodes\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"appAttemptId\"</span>: <span class=\"string\">\"appattempt_15840200001\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后追踪另一条路，又可以发现它获取日志的地方</p>\n<blockquote>\n<p>runCommand -&gt; fetchContainerLogs -&gt; getMatchedOptionForRunningApp -&gt; getMatchedContainerLogFiles -&gt; getContainerLogFiles</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebResource webResource = webServiceClient</span><br><span class=\"line\">          .resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);</span><br><span class=\"line\">ClientResponse response =</span><br><span class=\"line\">    webResource.path(<span class=\"string\">\"ws\"</span>).path(<span class=\"string\">\"v1\"</span>).path(<span class=\"string\">\"node\"</span>).path(<span class=\"string\">\"containers\"</span>)</span><br><span class=\"line\">        .path(containerIdStr).path(<span class=\"string\">\"logs\"</span>)</span><br><span class=\"line\">        .accept(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">        .get(ClientResponse.class);</span><br></pre></td></tr></table></figure>\n<p>这边的地址拼接如下</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs</p>\n</blockquote>\n<p>访问后可以获取到如下信息<br>\ncontainerLogInfo里面每个都是日志文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"containerId\"</span>: <span class=\"string\">\"container_e455_01\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nodeId\"</span>: <span class=\"string\">\"hadoop-4355\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"containerLogInfo\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"dag_1584028893195_0587_1.dot\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"1631\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"fileName\"</span>: <span class=\"string\">\"directory.info\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"fileSize\"</span>: <span class=\"string\">\"18349\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"lastModifiedTime\"</span>: <span class=\"string\">\"Wed Mar 25 09:47:03 +0800 2020\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"logAggregationType\"</span>: <span class=\"string\">\"AGGREGATED\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以在前面的地址后加上其中的文件名获取到具体每个log文件的内容，地址如下，get调用即可</p>\n<blockquote>\n<p>http://{nodeHttpAddress}/ws/v1/node/containers/{containerId}/logs/{fileName}</p>\n</blockquote>\n<p>至此已获取到全部日志。</p>\n"},{"title":"本地hadoop与hive的单节点部署和开发调试[mac]","catalog":true,"date":"2020-04-27T08:27:54.000Z","subtitle":null,"header-img":null,"_content":"\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://localhost:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>localhost:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n\n先format namenode\n>hadoop namenode -format\n\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\njps查看namenode 和 datanode等正常启动\n\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  \nhadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","source":"_posts/2020/article_9_本地hadoop与hive的部署-mac.md","raw":"---\ntitle: '本地hadoop与hive的单节点部署和开发调试[mac]'\ncatalog: true\ndate: 2020-04-27 16:27:54\nsubtitle:\nheader-img:\ntags:\n- HIVE\n- HADOOP\n---\n\n# 预备\n\n这边部署的\nhadoop版本为 [2.7.3](http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/)  \nhive版本为 [1.2.1](http://archive.apache.org/dist/hive/hive-1.2.1/)  \n注:src为源码包\n\n# Hadoop搭建\n\n## 解压，进入配置目录\n> tar zxvf hadoop-2.7.3.tar.gz  \ncd hadoop-2.7.3/etc/hadoop\n\n## 修改配置 \ncore-site.xml，hdfs-site.xml， mapred-site.xml\n``` xml\n# core-site.xml\n<configuration>\n     <property>\n        <name>hadoop.tmp.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop</value>\n     </property>\n     <property>\n        <name>dfs.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/hadoop/name</value>\n     </property>\n     <property>\n        <name>fs.default.name</name>\n        <value>hdfs://localhost:9000</value>\n     </property>\n</configuration>\n\n# hdfs-site.xml\n<configuration>\n    <property>\n        <name>dfs.namenode.name.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/namenode</value>\n    </property>\n    <property>\n        <name>dfs.data.dir</name>\n        <value>(补上绝对路径)/hadoop-2.7.3/data</value>\n    </property>\n    <property>\n        <name>dfs.http.address</name>\n        <value>0.0.0.0:50070</value>\n    </property>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n\n# mapred-site.xml\n<configuration>\n    <property>\n        <name>mapred.job.tracker</name>\n        <value>localhost:9001</value>\n     </property>\n</configuration>\n```\n\n\n## 配置免密登录\n```\n1。 设置自己的mac允许远程登录：\n  首先我们打开系统偏好设置–>共享\n  我们将远程登录、所有用户勾选\n\n2. 设置免密码\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod og-wx ~/.ssh/authorized_keys\nchmod 750 $HOME\n\n执行 ssh localhost 测试\n```\n\n## 启动hadoop\n\n先format namenode\n>hadoop namenode -format\n\n>./hadoop-2.7.3/sbin/start-all.sh\n\n\n## 验证安装成功\njps查看namenode 和 datanode等正常启动\n\n执行 WordCount  \n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input  \nhadoop fs -mkdir -p /data/out  \n上传文本文件  \nhadoop fs -put a.txt /data/input  \n执行 wordcount  \nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont  \n\n## 访问界面\nResourcemanager 界面 http://127.0.0.1:8088\nhadoop提供的web页面 http://127.0.0.1:50070\n查看 hdfs 界面 http://127.0.0.1:50070/explorer.html#/\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。\n\n\n# Hive搭建\n\n## 解压文件\n> tar -zxvf apache-hive-1.2.1-bin.tar.gz\n\n## 修改配置\n\n先复制一份默认的配置文件\n``` shell\ncd apache-hive-1.2.1-bin\ncp conf/hive-env.sh.template conf/hive-env.sh\ncp conf/hive-default.xml.template conf/hive-site.xml\n```\n修改hive-site.xml中的部分peoperty\n``` xml\n<property>\n    <name>system:java.io.tmpdir</name>\n    <value>/Users/root/hadoop/tmp</value>\n</property>\n<property>\n    <name>system:user.name</name>\n    <value>hive</value>\n</property>\n\n# mysql地址localhost\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n</property>\n# mysql的驱动\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n# 用户名\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n# 密码\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n</property>\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n```\n\n## 装好Mysql  \n放一个mysql jdbc连接的jar包到 hive的lib下  \n\n创建一个库用作metastore存储\n\n## 初始化Metastore\n>./bin/schematool -dbType mysql -initSchema\n\n## 启动hive\n./bin/hive\n\n# Hive源码调试\n\n下载hive中的src包\n```\ntar xvf apache-hive-1.2.1-src.tar.gz\ncd apache-hive-1.2.1-src\nmvn clean package -Phadoop-2 -DskipTests -Pdist\n```\n\n在刚刚装好的开启远程调试模式\n\n>hive --debug\n\n他会显示\nListening for transport dt_socket at address: 8000\n\n然后在idea 打开hive源码项目，注意要把编译环境改成java1.8\n\n添加一个Configuraiton Remote\nhost写127.0.0.1\nport写刚刚的8000\n包选择hive-cli\n\n在org/apache/hadoop/hive/cli/CliDriver.java\n中找main函数，并在run()行加上断点\n\n点击debug就可以看到运行到断点处\n\n## 特别感谢\n\n- 本次文章来源特别感谢mayanbo同学。","slug":"2020/article_9_本地hadoop与hive的部署-mac","published":1,"updated":"2021-03-05T06:31:59.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76d004d0770focdw6uk","content":"<h1 id=\"预备\">预备</h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\" target=\"_blank\" rel=\"external\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\" target=\"_blank\" rel=\"external\">1.2.1</a><br>\n注:src为源码包</p>\n<h1 id=\"hadoop搭建\">Hadoop搭建</h1>\n<h2 id=\"解压进入配置目录\">解压，进入配置目录</h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2 id=\"修改配置\">修改配置</h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>localhost:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置免密登录\">配置免密登录</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动hadoop\">启动hadoop</h2>\n<p>先format namenode</p>\n<blockquote>\n<p>hadoop namenode -format</p>\n</blockquote>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2 id=\"验证安装成功\">验证安装成功</h2>\n<p>jps查看namenode 和 datanode等正常启动</p>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input<br>\nhadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2 id=\"访问界面\">访问界面</h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\" target=\"_blank\" rel=\"external\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1 id=\"hive搭建\">Hive搭建</h1>\n<h2 id=\"解压文件\">解压文件</h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2 id=\"修改配置\">修改配置</h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"装好mysql\">装好Mysql</h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2 id=\"初始化metastore\">初始化Metastore</h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2 id=\"启动hive\">启动hive</h2>\n<p>./bin/hive</p>\n<h1 id=\"hive源码调试\">Hive源码调试</h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2 id=\"特别感谢\">特别感谢</h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n","excerpt":"","more":"<h1>预备</h1>\n<p>这边部署的<br>\nhadoop版本为 <a href=\"http://archive.apache.org/dist/hadoop/common/hadoop-2.7.3/\">2.7.3</a><br>\nhive版本为 <a href=\"http://archive.apache.org/dist/hive/hive-1.2.1/\">1.2.1</a><br>\n注:src为源码包</p>\n<h1>Hadoop搭建</h1>\n<h2>解压，进入配置目录</h2>\n<blockquote>\n<p>tar zxvf hadoop-2.7.3.tar.gz<br>\ncd hadoop-2.7.3/etc/hadoop</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>core-site.xml，hdfs-site.xml， mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># core-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/hadoop/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># hdfs-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>(补上绝对路径)/hadoop-2.7.3/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mapred-site.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>localhost:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>配置免密登录</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1。 设置自己的mac允许远程登录：</span><br><span class=\"line\">  首先我们打开系统偏好设置–&gt;共享</span><br><span class=\"line\">  我们将远程登录、所有用户勾选</span><br><span class=\"line\"></span><br><span class=\"line\">2. 设置免密码</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod og-wx ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 750 $HOME</span><br><span class=\"line\"></span><br><span class=\"line\">执行 ssh localhost 测试</span><br></pre></td></tr></table></figure>\n<h2>启动hadoop</h2>\n<p>先format namenode</p>\n<blockquote>\n<p>hadoop namenode -format</p>\n</blockquote>\n<blockquote>\n<p>./hadoop-2.7.3/sbin/start-all.sh</p>\n</blockquote>\n<h2>验证安装成功</h2>\n<p>jps查看namenode 和 datanode等正常启动</p>\n<p>执行 WordCount<br>\n在 hdfs 创建文件夹 hadoop fs -mkdir -p /data/input<br>\nhadoop fs -mkdir -p /data/out<br>\n上传文本文件<br>\nhadoop fs -put a.txt /data/input<br>\n执行 wordcount<br>\nhadoop jar ~/hadoop/hadoop-2.7.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar wordcount /data/input/a.txt /data/out/my_wordcont</p>\n<h2>访问界面</h2>\n<p>Resourcemanager 界面 <a href=\"http://127.0.0.1:8088\">http://127.0.0.1:8088</a><br>\nhadoop提供的web页面 <a href=\"http://127.0.0.1:50070\">http://127.0.0.1:50070</a><br>\n查看 hdfs 界面 <a href=\"http://127.0.0.1:50070/explorer.html#/\">http://127.0.0.1:50070/explorer.html#/</a><br>\n访问 mapreduce 提供的任务查看页面  访问hadoop提供的web页面，通过Browse the system，可以查看hdfs中的文件。</p>\n<h1>Hive搭建</h1>\n<h2>解压文件</h2>\n<blockquote>\n<p>tar -zxvf apache-hive-1.2.1-bin.tar.gz</p>\n</blockquote>\n<h2>修改配置</h2>\n<p>先复制一份默认的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-hive-1.2.1-bin</span><br><span class=\"line\">cp conf/hive-env.sh.template conf/hive-env.sh</span><br><span class=\"line\">cp conf/hive-default.xml.template conf/hive-site.xml</span><br></pre></td></tr></table></figure>\n<p>修改hive-site.xml中的部分peoperty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:java.io.tmpdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/Users/root/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system:user.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># mysql地址localhost</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># mysql的驱动</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 用户名</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"># 密码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>装好Mysql</h2>\n<p>放一个mysql jdbc连接的jar包到 hive的lib下</p>\n<p>创建一个库用作metastore存储</p>\n<h2>初始化Metastore</h2>\n<blockquote>\n<p>./bin/schematool -dbType mysql -initSchema</p>\n</blockquote>\n<h2>启动hive</h2>\n<p>./bin/hive</p>\n<h1>Hive源码调试</h1>\n<p>下载hive中的src包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf apache-hive-1.2.1-src.tar.gz</span><br><span class=\"line\">cd apache-hive-1.2.1-src</span><br><span class=\"line\">mvn clean package -Phadoop-2 -DskipTests -Pdist</span><br></pre></td></tr></table></figure>\n<p>在刚刚装好的开启远程调试模式</p>\n<blockquote>\n<p>hive --debug</p>\n</blockquote>\n<p>他会显示<br>\nListening for transport dt_socket at address: 8000</p>\n<p>然后在idea 打开hive源码项目，注意要把编译环境改成java1.8</p>\n<p>添加一个Configuraiton Remote<br>\nhost写127.0.0.1<br>\nport写刚刚的8000<br>\n包选择hive-cli</p>\n<p>在org/apache/hadoop/hive/cli/CliDriver.java<br>\n中找main函数，并在run()行加上断点</p>\n<p>点击debug就可以看到运行到断点处</p>\n<h2>特别感谢</h2>\n<ul>\n<li>本次文章来源特别感谢mayanbo同学。</li>\n</ul>\n"},{"title":"2020总结 -- 稳中求进","catalog":true,"music":"红豆","lock":true,"date":"2021-02-26T11:31:43.000Z","_content":"\n## 前言\n\n这个总结会迟到但不会缺席。放个音乐会更配哦~\n\n2020年已很快过去，今年过的格外稳  \n外部环境有一部分原因，疫情/公司/生活让我感受到一丝压抑；  \n内部因素也导致有些懒懒的，内心毫无波澜、保持最低期望。  \n但稳也能学到很多，积累很多，等待质变。\n\n以下主题不分先后轻重。\n\n## 工作\n\n今年还是在大搜车的一年，年初在家工作了一个月才来到公司，\n\n当时还信心满满，虽然一些团队的资深大佬都纷纷跳槽。\n\n然后就经历了三次团队和领导的更换，感觉好起来了就换一拨，可能没碰上好运气，  \n个人认为这个也是一直很难有职场稳步提升的一个致命点。\n\n今年以来一直先是做了一段时间数据平台项目，后面又转到做数据BI项目，从零开始的BI项目足够做很长时间。\n\n由于在数据中心呆了一段时间，各个项目都有交互。  \n对新项目，对整体数据流程等都比较清楚，所以干起来也不是特别费脑力。\n\n新项目或者新版本基本可以独立hold住，包括后续还可以探讨一些技术上的方案和给一些建议。\n\n但环境使然，技术这边比较难以做出成绩。\n\n上半年心内还挺急的，希望能做出些成绩蹭上一波薪资和等级的上升，但年中并没有想象中的回报，  \n所以有了一波打击，回想当时的内心还是挺不甘心的，也是有了换工作的想法。\n\n年中那会儿算起来也才正式工作一年，项目接触还不够多，java也就学了半年，所以碰了几次壁，印象中找到了上海的一家和杭州的几家小公司。  \n\n又是一些打击让我放弃，这次是跳槽工资都达不到我内心的希望，感觉是30%以内就别跳槽了，还不如在继续干一段时间。\n\n后面在九十月份也陆续找了一些小公司，当时的想法是碰上好的就去了，碰不上也继续在这儿做下去。  \n保持一种面试的压迫感，随时准备一些面试基础知识与问题。\n\n年底了当时也是在稍微投一些简历，之前有一个同事去了阿里生态，所以也是留了点印象。  \n后面收到了那家公司的电话面试，就让自己在挑战一把，在杭州去阿里也是一个不错的选择。\n\n## 生活\n\n今年由于疫情，没有远行。  \n租房一直挺合适的，也没有更换这个翡翠城小房间。\n\n只在杭州内和朋友稍微走了走。\n\n卖葡萄也是生活一部分了，今年公司人流动大，生意就不行了，只卖了两拨，百多箱的样子。\n\n这个事情一般自己尽力就好，做生意的脑袋并不特别发达。\n\n平淡的生活也需要挑战，今年日常增加羽毛球的运动，进行了虐人的徒步挑战，  \n第一次参加了半程马拉松，第一次进行了滑雪。\n\n羽毛球主要是公司组织的，也是一星期一次基本不落下，同时也认识一些朋友   \n虽然球技基本也稳定在一般水平\n\n徒步则比较偶然，碰上了喜欢徒步的朋友，就约着一起去，穿越了七尖，   \n准备好了装备，走了两天，翻山越岭也是比较艰险的一次体验。\n\n马拉松是我酝酿了很久的，老早以前也想去参加下。  \n杭马报名但没抽签上，就参加了梦想小镇的马拉松，也是比较近。  \n今年一直以来都有在小区跑步的习惯，一般跑个几公里锻炼。  \n参加过程比较顺利，单人跑完了全程20多公里。\n\n滑雪是也是一些朋友拉着一起去了，想想好像都是有朋友组织，交一群朋友还是挺重要的。  \n滑的是双板，摔了几跤也是会滑小的直道下坡了。\n\n最好的生活是平平淡淡。\n\n## 技术\n\n今年总体还是在Java和后端上做耕耘，副业是写chrome插件，改进博客。\n\n19年转Java的选择在现在看来也是没有错的，确实多了更多机会，（其实也没什么选择余地，都是一步步走过来）  \n环境使然与人的主观能动性共同作用😆\n\n年初还希望在大数据上有所建树，但可能环境因素吧，并不都往想的方向发展，还没开始就结束了的那种。\n\n再后来调整了思路，也默默把自己简历写成了Java开发。\n\n在这个行业这个职位，总是得逼着自己学习，不然也跟不上脚步。  \n只要工作中使了劲，基本在工作项目中学到的也足够自己喝一壶\n\n另外在业余时间或项目间隙也总得弄点东西写，规划自己的产品。\n\n我选择的是chrome插件，这个在前几年也尝试过，但也只是简单的demo。\n\n然后也是一些突发奇想，把老的demo拿出来好好的改造了一下，成为了现在的[web robot](https://github.com/webgjc/web_robot)\n\n断断续续写了大半年，也算是一个不少功能的插件，在一定场景下可以发挥特别的作用，已有**51**个star。\n\n后续想要的话还可以继续改进这个插件\n\n另外有兴趣会开辟小程序、小游戏等的轻量开发。\n\n博客也是一直在维护，一方面是写文章记录，另一方面是优化展示，  \n发觉更多元素，改进原有博客主题，引入新的技术实现等。\n\n今年博客完成了**26**篇，大致有**3.5**万字。前面hive/hadoop多些，后面插件的多些。  \n截至2021.02已有**9476**访问量，**5318**访问人次\n\ngithub也有**128** contributions in 2020，同时多个50多个star，主要为插件的。\n\n## 情感\n\n这个主题比较悲伤🙄。\n\n希望是美好的，现实是残酷的。\n\n今年来说，重点心思没有放在找女朋友这件事上，\n\n个人还是比较在意一段感情的，所以不会轻易开始，更不希望轻易结束。（内心也是有点害怕和抗拒的）\n\n可能我希望这是一个水到渠成的事情，但这个目前来说有点无法做到这样。\n\n认识的人也不是特别的多，说得上话的也没几个。\n\n还有目前也不算在杭州扎稳脚跟，还是一个漂流瓶。\n\n## 家\n\n家庭伴随着亲情，我个人看来也是需要好好打理的。\n\n自己这个年纪了，也是有下一辈的人了，奶奶辈、父母辈也都老了，处于四世同堂的第二级。\n\n也不想他们老来担负特别大的压力，独立自主这个想法到是一直伴随着我，\n由此而在大城市打拼。   \n\n辛苦了半辈子，家里人的身体也不是特别好，去年、今年以来也特别突出。\n\n貌似也没有特别好的办法，只能多检查检查，或者考虑保险这种。\n\n家在余姚比较近，不过现在也大概节日回去下或者周末空了回去下。\n\n频率不高但也常常能见，也是挺舒服的一个状态。\n\n家的一些原因还促使我早点买车，家里也在农村交通不好，买车可以回家方便，先看着，可能是一个下面的规划。\n\n## 理财\n\n理财是一个长久在干的事情，都快算是第二收入了，当然正负不一定。\n\n今年算是行情不错的一年，大家都有得赚，我也是赶上了几波，投的钱来说赚的也是20多个点\n\n年初还是空仓，赶上了节后的大跌买入，后来就一直赚的不错。\n\n在年中已经投入比较多了，也赶上了一波6-7月的行情，当时天天大涨也是没见过这阵仗，逐步卖一点，留下了收益。\n\n后面下半年就是起起伏伏，没什么盈亏。\n\n更新了[我的理财篇](/article/money/money_1_理财篇/)也是记录了今年以来的买卖交易。\n\n原先主要是大盘，一些白酒类，电子类。但都没拿住，早早地抛了。\n\n后来逐步买入了那个半导体类，现在也是半导体大户。\n\n但半导体短期来说还是很难干出成绩的一件事情，虽然国家一直会支持这个产业。\n\n个人的投资目前总结的方法论还不是特别多，很多凭感觉，\n\n但感觉也是基于看了很多文章，新闻，大V等渠道影响下得出的。\n\n后面最好还是有一套实体方法，且不断改进那种，相信慢慢也会有思路。\n\n## 精神食粮\n\n主要讲讲日常闲时的消磨方式。\n\n手游王者荣耀还是一个在玩的主要游戏，并不特别看重等级，玩起来比较随性。  \n\n平常会有一些同事一起开黑玩，也是有输有赢的娱乐局。\n\n电脑端由于是mac电脑近来也都玩的少了，回忆玩过一段时间饥荒，也是比较喜欢生存这类型。\n\n弹钢琴还是一个比较重要的自娱自乐项目，虽然弹得并不多也不好，  \n但偶尔找到自己喜欢的旋律和谱子还是可以一试。\n\n另外B站的视频，一些短的电视剧，动漫(只剩秦时明月了)也在追进，   \n电影到是不怎么热衷了，保留一份期待吧。  \n直播到是还每天看一点，主要是游戏直播，当做看以前电视那样看，形看神不看。\n\n书籍实体书今年到是都没怎么看，网文小说、有声小说到是看了一些，  \n另外就是一些技术书籍了，也是啃了一部分。\n\n## 规划\n\n有个潜移默化中变化的思想就是准备好好留在杭州打拼了。\n\n刚毕业后的我可能还是一个选择阶段，那时的选择很多，或杭州或宁波甚至上海。  \n在杭州待了一年，慢慢的转变为了杭州可以的话就在杭州先待几年，别的地有好的也可以考虑。  \n再然后转变为有长久在杭州的打算。\n\n一个是思想的转变是 也不把搬到其他城市作为一种背井离乡，这也可以是家族的发展，或者你自己成为了根。\n\n另外也是杭州这边也可以有让我留下来的资本和勇气。（有说房价高，但你亦可以有不买房留下来的勇气）\n\n希望能有一次旅游，国内就行，有伴最好，或者和家里人一起。  \n顺便做回飞机，20多年还没坐过那。  \n（看上去简单，还得提前个几个月规划好时间地点人物，也不是说走就走的人）  \n\n希望能保持一个锻炼，还是以慢跑为主。\n\n下半年在可以摇到号的情况下可以考虑买个车，没有的话也可以适当考虑电动车或二手车，  \n虽然目前还是可以但没必要的状态，养车也得一定的费用，但也有时是很有用，顺便当做练练手。\n\n新的一年已经在阿里乌鸫工作，伴随而来的是新的机遇和挑战。  \n而这次我很稳，相信自己能适应职场的节奏，能顶住技术的更迭，能开拓更广的视野。\n\n## 最后\n\n2020是我第二个本命年，随着年龄的增长，有些东西和思想还是在悄然发生变化。\n继续好好的拥抱自己，拥抱人生。","source":"_posts/2021/article_1_2020总结-稳中求进.md","raw":"---\ntitle: 2020总结 -- 稳中求进\ncatalog: true\nmusic: 红豆\nlock: true\ndate: 2021-02-26 19:31:43\ntags:\n    - 总结\n---\n\n## 前言\n\n这个总结会迟到但不会缺席。放个音乐会更配哦~\n\n2020年已很快过去，今年过的格外稳  \n外部环境有一部分原因，疫情/公司/生活让我感受到一丝压抑；  \n内部因素也导致有些懒懒的，内心毫无波澜、保持最低期望。  \n但稳也能学到很多，积累很多，等待质变。\n\n以下主题不分先后轻重。\n\n## 工作\n\n今年还是在大搜车的一年，年初在家工作了一个月才来到公司，\n\n当时还信心满满，虽然一些团队的资深大佬都纷纷跳槽。\n\n然后就经历了三次团队和领导的更换，感觉好起来了就换一拨，可能没碰上好运气，  \n个人认为这个也是一直很难有职场稳步提升的一个致命点。\n\n今年以来一直先是做了一段时间数据平台项目，后面又转到做数据BI项目，从零开始的BI项目足够做很长时间。\n\n由于在数据中心呆了一段时间，各个项目都有交互。  \n对新项目，对整体数据流程等都比较清楚，所以干起来也不是特别费脑力。\n\n新项目或者新版本基本可以独立hold住，包括后续还可以探讨一些技术上的方案和给一些建议。\n\n但环境使然，技术这边比较难以做出成绩。\n\n上半年心内还挺急的，希望能做出些成绩蹭上一波薪资和等级的上升，但年中并没有想象中的回报，  \n所以有了一波打击，回想当时的内心还是挺不甘心的，也是有了换工作的想法。\n\n年中那会儿算起来也才正式工作一年，项目接触还不够多，java也就学了半年，所以碰了几次壁，印象中找到了上海的一家和杭州的几家小公司。  \n\n又是一些打击让我放弃，这次是跳槽工资都达不到我内心的希望，感觉是30%以内就别跳槽了，还不如在继续干一段时间。\n\n后面在九十月份也陆续找了一些小公司，当时的想法是碰上好的就去了，碰不上也继续在这儿做下去。  \n保持一种面试的压迫感，随时准备一些面试基础知识与问题。\n\n年底了当时也是在稍微投一些简历，之前有一个同事去了阿里生态，所以也是留了点印象。  \n后面收到了那家公司的电话面试，就让自己在挑战一把，在杭州去阿里也是一个不错的选择。\n\n## 生活\n\n今年由于疫情，没有远行。  \n租房一直挺合适的，也没有更换这个翡翠城小房间。\n\n只在杭州内和朋友稍微走了走。\n\n卖葡萄也是生活一部分了，今年公司人流动大，生意就不行了，只卖了两拨，百多箱的样子。\n\n这个事情一般自己尽力就好，做生意的脑袋并不特别发达。\n\n平淡的生活也需要挑战，今年日常增加羽毛球的运动，进行了虐人的徒步挑战，  \n第一次参加了半程马拉松，第一次进行了滑雪。\n\n羽毛球主要是公司组织的，也是一星期一次基本不落下，同时也认识一些朋友   \n虽然球技基本也稳定在一般水平\n\n徒步则比较偶然，碰上了喜欢徒步的朋友，就约着一起去，穿越了七尖，   \n准备好了装备，走了两天，翻山越岭也是比较艰险的一次体验。\n\n马拉松是我酝酿了很久的，老早以前也想去参加下。  \n杭马报名但没抽签上，就参加了梦想小镇的马拉松，也是比较近。  \n今年一直以来都有在小区跑步的习惯，一般跑个几公里锻炼。  \n参加过程比较顺利，单人跑完了全程20多公里。\n\n滑雪是也是一些朋友拉着一起去了，想想好像都是有朋友组织，交一群朋友还是挺重要的。  \n滑的是双板，摔了几跤也是会滑小的直道下坡了。\n\n最好的生活是平平淡淡。\n\n## 技术\n\n今年总体还是在Java和后端上做耕耘，副业是写chrome插件，改进博客。\n\n19年转Java的选择在现在看来也是没有错的，确实多了更多机会，（其实也没什么选择余地，都是一步步走过来）  \n环境使然与人的主观能动性共同作用😆\n\n年初还希望在大数据上有所建树，但可能环境因素吧，并不都往想的方向发展，还没开始就结束了的那种。\n\n再后来调整了思路，也默默把自己简历写成了Java开发。\n\n在这个行业这个职位，总是得逼着自己学习，不然也跟不上脚步。  \n只要工作中使了劲，基本在工作项目中学到的也足够自己喝一壶\n\n另外在业余时间或项目间隙也总得弄点东西写，规划自己的产品。\n\n我选择的是chrome插件，这个在前几年也尝试过，但也只是简单的demo。\n\n然后也是一些突发奇想，把老的demo拿出来好好的改造了一下，成为了现在的[web robot](https://github.com/webgjc/web_robot)\n\n断断续续写了大半年，也算是一个不少功能的插件，在一定场景下可以发挥特别的作用，已有**51**个star。\n\n后续想要的话还可以继续改进这个插件\n\n另外有兴趣会开辟小程序、小游戏等的轻量开发。\n\n博客也是一直在维护，一方面是写文章记录，另一方面是优化展示，  \n发觉更多元素，改进原有博客主题，引入新的技术实现等。\n\n今年博客完成了**26**篇，大致有**3.5**万字。前面hive/hadoop多些，后面插件的多些。  \n截至2021.02已有**9476**访问量，**5318**访问人次\n\ngithub也有**128** contributions in 2020，同时多个50多个star，主要为插件的。\n\n## 情感\n\n这个主题比较悲伤🙄。\n\n希望是美好的，现实是残酷的。\n\n今年来说，重点心思没有放在找女朋友这件事上，\n\n个人还是比较在意一段感情的，所以不会轻易开始，更不希望轻易结束。（内心也是有点害怕和抗拒的）\n\n可能我希望这是一个水到渠成的事情，但这个目前来说有点无法做到这样。\n\n认识的人也不是特别的多，说得上话的也没几个。\n\n还有目前也不算在杭州扎稳脚跟，还是一个漂流瓶。\n\n## 家\n\n家庭伴随着亲情，我个人看来也是需要好好打理的。\n\n自己这个年纪了，也是有下一辈的人了，奶奶辈、父母辈也都老了，处于四世同堂的第二级。\n\n也不想他们老来担负特别大的压力，独立自主这个想法到是一直伴随着我，\n由此而在大城市打拼。   \n\n辛苦了半辈子，家里人的身体也不是特别好，去年、今年以来也特别突出。\n\n貌似也没有特别好的办法，只能多检查检查，或者考虑保险这种。\n\n家在余姚比较近，不过现在也大概节日回去下或者周末空了回去下。\n\n频率不高但也常常能见，也是挺舒服的一个状态。\n\n家的一些原因还促使我早点买车，家里也在农村交通不好，买车可以回家方便，先看着，可能是一个下面的规划。\n\n## 理财\n\n理财是一个长久在干的事情，都快算是第二收入了，当然正负不一定。\n\n今年算是行情不错的一年，大家都有得赚，我也是赶上了几波，投的钱来说赚的也是20多个点\n\n年初还是空仓，赶上了节后的大跌买入，后来就一直赚的不错。\n\n在年中已经投入比较多了，也赶上了一波6-7月的行情，当时天天大涨也是没见过这阵仗，逐步卖一点，留下了收益。\n\n后面下半年就是起起伏伏，没什么盈亏。\n\n更新了[我的理财篇](/article/money/money_1_理财篇/)也是记录了今年以来的买卖交易。\n\n原先主要是大盘，一些白酒类，电子类。但都没拿住，早早地抛了。\n\n后来逐步买入了那个半导体类，现在也是半导体大户。\n\n但半导体短期来说还是很难干出成绩的一件事情，虽然国家一直会支持这个产业。\n\n个人的投资目前总结的方法论还不是特别多，很多凭感觉，\n\n但感觉也是基于看了很多文章，新闻，大V等渠道影响下得出的。\n\n后面最好还是有一套实体方法，且不断改进那种，相信慢慢也会有思路。\n\n## 精神食粮\n\n主要讲讲日常闲时的消磨方式。\n\n手游王者荣耀还是一个在玩的主要游戏，并不特别看重等级，玩起来比较随性。  \n\n平常会有一些同事一起开黑玩，也是有输有赢的娱乐局。\n\n电脑端由于是mac电脑近来也都玩的少了，回忆玩过一段时间饥荒，也是比较喜欢生存这类型。\n\n弹钢琴还是一个比较重要的自娱自乐项目，虽然弹得并不多也不好，  \n但偶尔找到自己喜欢的旋律和谱子还是可以一试。\n\n另外B站的视频，一些短的电视剧，动漫(只剩秦时明月了)也在追进，   \n电影到是不怎么热衷了，保留一份期待吧。  \n直播到是还每天看一点，主要是游戏直播，当做看以前电视那样看，形看神不看。\n\n书籍实体书今年到是都没怎么看，网文小说、有声小说到是看了一些，  \n另外就是一些技术书籍了，也是啃了一部分。\n\n## 规划\n\n有个潜移默化中变化的思想就是准备好好留在杭州打拼了。\n\n刚毕业后的我可能还是一个选择阶段，那时的选择很多，或杭州或宁波甚至上海。  \n在杭州待了一年，慢慢的转变为了杭州可以的话就在杭州先待几年，别的地有好的也可以考虑。  \n再然后转变为有长久在杭州的打算。\n\n一个是思想的转变是 也不把搬到其他城市作为一种背井离乡，这也可以是家族的发展，或者你自己成为了根。\n\n另外也是杭州这边也可以有让我留下来的资本和勇气。（有说房价高，但你亦可以有不买房留下来的勇气）\n\n希望能有一次旅游，国内就行，有伴最好，或者和家里人一起。  \n顺便做回飞机，20多年还没坐过那。  \n（看上去简单，还得提前个几个月规划好时间地点人物，也不是说走就走的人）  \n\n希望能保持一个锻炼，还是以慢跑为主。\n\n下半年在可以摇到号的情况下可以考虑买个车，没有的话也可以适当考虑电动车或二手车，  \n虽然目前还是可以但没必要的状态，养车也得一定的费用，但也有时是很有用，顺便当做练练手。\n\n新的一年已经在阿里乌鸫工作，伴随而来的是新的机遇和挑战。  \n而这次我很稳，相信自己能适应职场的节奏，能顶住技术的更迭，能开拓更广的视野。\n\n## 最后\n\n2020是我第二个本命年，随着年龄的增长，有些东西和思想还是在悄然发生变化。\n继续好好的拥抱自己，拥抱人生。","slug":"2021/article_1_2020总结-稳中求进","published":1,"updated":"2021-02-26T08:15:36.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76e004g0770g16ub4kk","content":"<h2 id=\"前言\">前言</h2>\n<p>这个总结会迟到但不会缺席。放个音乐会更配哦~</p>\n<p>2020年已很快过去，今年过的格外稳<br>\n外部环境有一部分原因，疫情/公司/生活让我感受到一丝压抑；<br>\n内部因素也导致有些懒懒的，内心毫无波澜、保持最低期望。<br>\n但稳也能学到很多，积累很多，等待质变。</p>\n<p>以下主题不分先后轻重。</p>\n<h2 id=\"工作\">工作</h2>\n<p>今年还是在大搜车的一年，年初在家工作了一个月才来到公司，</p>\n<p>当时还信心满满，虽然一些团队的资深大佬都纷纷跳槽。</p>\n<p>然后就经历了三次团队和领导的更换，感觉好起来了就换一拨，可能没碰上好运气，<br>\n个人认为这个也是一直很难有职场稳步提升的一个致命点。</p>\n<p>今年以来一直先是做了一段时间数据平台项目，后面又转到做数据BI项目，从零开始的BI项目足够做很长时间。</p>\n<p>由于在数据中心呆了一段时间，各个项目都有交互。<br>\n对新项目，对整体数据流程等都比较清楚，所以干起来也不是特别费脑力。</p>\n<p>新项目或者新版本基本可以独立hold住，包括后续还可以探讨一些技术上的方案和给一些建议。</p>\n<p>但环境使然，技术这边比较难以做出成绩。</p>\n<p>上半年心内还挺急的，希望能做出些成绩蹭上一波薪资和等级的上升，但年中并没有想象中的回报，<br>\n所以有了一波打击，回想当时的内心还是挺不甘心的，也是有了换工作的想法。</p>\n<p>年中那会儿算起来也才正式工作一年，项目接触还不够多，java也就学了半年，所以碰了几次壁，印象中找到了上海的一家和杭州的几家小公司。</p>\n<p>又是一些打击让我放弃，这次是跳槽工资都达不到我内心的希望，感觉是30%以内就别跳槽了，还不如在继续干一段时间。</p>\n<p>后面在九十月份也陆续找了一些小公司，当时的想法是碰上好的就去了，碰不上也继续在这儿做下去。<br>\n保持一种面试的压迫感，随时准备一些面试基础知识与问题。</p>\n<p>年底了当时也是在稍微投一些简历，之前有一个同事去了阿里生态，所以也是留了点印象。<br>\n后面收到了那家公司的电话面试，就让自己在挑战一把，在杭州去阿里也是一个不错的选择。</p>\n<h2 id=\"生活\">生活</h2>\n<p>今年由于疫情，没有远行。<br>\n租房一直挺合适的，也没有更换这个翡翠城小房间。</p>\n<p>只在杭州内和朋友稍微走了走。</p>\n<p>卖葡萄也是生活一部分了，今年公司人流动大，生意就不行了，只卖了两拨，百多箱的样子。</p>\n<p>这个事情一般自己尽力就好，做生意的脑袋并不特别发达。</p>\n<p>平淡的生活也需要挑战，今年日常增加羽毛球的运动，进行了虐人的徒步挑战，<br>\n第一次参加了半程马拉松，第一次进行了滑雪。</p>\n<p>羽毛球主要是公司组织的，也是一星期一次基本不落下，同时也认识一些朋友<br>\n虽然球技基本也稳定在一般水平</p>\n<p>徒步则比较偶然，碰上了喜欢徒步的朋友，就约着一起去，穿越了七尖，<br>\n准备好了装备，走了两天，翻山越岭也是比较艰险的一次体验。</p>\n<p>马拉松是我酝酿了很久的，老早以前也想去参加下。<br>\n杭马报名但没抽签上，就参加了梦想小镇的马拉松，也是比较近。<br>\n今年一直以来都有在小区跑步的习惯，一般跑个几公里锻炼。<br>\n参加过程比较顺利，单人跑完了全程20多公里。</p>\n<p>滑雪是也是一些朋友拉着一起去了，想想好像都是有朋友组织，交一群朋友还是挺重要的。<br>\n滑的是双板，摔了几跤也是会滑小的直道下坡了。</p>\n<p>最好的生活是平平淡淡。</p>\n<h2 id=\"技术\">技术</h2>\n<p>今年总体还是在Java和后端上做耕耘，副业是写chrome插件，改进博客。</p>\n<p>19年转Java的选择在现在看来也是没有错的，确实多了更多机会，（其实也没什么选择余地，都是一步步走过来）<br>\n环境使然与人的主观能动性共同作用😆</p>\n<p>年初还希望在大数据上有所建树，但可能环境因素吧，并不都往想的方向发展，还没开始就结束了的那种。</p>\n<p>再后来调整了思路，也默默把自己简历写成了Java开发。</p>\n<p>在这个行业这个职位，总是得逼着自己学习，不然也跟不上脚步。<br>\n只要工作中使了劲，基本在工作项目中学到的也足够自己喝一壶</p>\n<p>另外在业余时间或项目间隙也总得弄点东西写，规划自己的产品。</p>\n<p>我选择的是chrome插件，这个在前几年也尝试过，但也只是简单的demo。</p>\n<p>然后也是一些突发奇想，把老的demo拿出来好好的改造了一下，成为了现在的<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">web robot</a></p>\n<p>断断续续写了大半年，也算是一个不少功能的插件，在一定场景下可以发挥特别的作用，已有<strong>51</strong>个star。</p>\n<p>后续想要的话还可以继续改进这个插件</p>\n<p>另外有兴趣会开辟小程序、小游戏等的轻量开发。</p>\n<p>博客也是一直在维护，一方面是写文章记录，另一方面是优化展示，<br>\n发觉更多元素，改进原有博客主题，引入新的技术实现等。</p>\n<p>今年博客完成了<strong>26</strong>篇，大致有<strong>3.5</strong>万字。前面hive/hadoop多些，后面插件的多些。<br>\n截至2021.02已有<strong>9476</strong>访问量，<strong>5318</strong>访问人次</p>\n<p>github也有<strong>128</strong> contributions in 2020，同时多个50多个star，主要为插件的。</p>\n<h2 id=\"情感\">情感</h2>\n<p>这个主题比较悲伤🙄。</p>\n<p>希望是美好的，现实是残酷的。</p>\n<p>今年来说，重点心思没有放在找女朋友这件事上，</p>\n<p>个人还是比较在意一段感情的，所以不会轻易开始，更不希望轻易结束。（内心也是有点害怕和抗拒的）</p>\n<p>可能我希望这是一个水到渠成的事情，但这个目前来说有点无法做到这样。</p>\n<p>认识的人也不是特别的多，说得上话的也没几个。</p>\n<p>还有目前也不算在杭州扎稳脚跟，还是一个漂流瓶。</p>\n<h2 id=\"家\">家</h2>\n<p>家庭伴随着亲情，我个人看来也是需要好好打理的。</p>\n<p>自己这个年纪了，也是有下一辈的人了，奶奶辈、父母辈也都老了，处于四世同堂的第二级。</p>\n<p>也不想他们老来担负特别大的压力，独立自主这个想法到是一直伴随着我，<br>\n由此而在大城市打拼。</p>\n<p>辛苦了半辈子，家里人的身体也不是特别好，去年、今年以来也特别突出。</p>\n<p>貌似也没有特别好的办法，只能多检查检查，或者考虑保险这种。</p>\n<p>家在余姚比较近，不过现在也大概节日回去下或者周末空了回去下。</p>\n<p>频率不高但也常常能见，也是挺舒服的一个状态。</p>\n<p>家的一些原因还促使我早点买车，家里也在农村交通不好，买车可以回家方便，先看着，可能是一个下面的规划。</p>\n<h2 id=\"理财\">理财</h2>\n<p>理财是一个长久在干的事情，都快算是第二收入了，当然正负不一定。</p>\n<p>今年算是行情不错的一年，大家都有得赚，我也是赶上了几波，投的钱来说赚的也是20多个点</p>\n<p>年初还是空仓，赶上了节后的大跌买入，后来就一直赚的不错。</p>\n<p>在年中已经投入比较多了，也赶上了一波6-7月的行情，当时天天大涨也是没见过这阵仗，逐步卖一点，留下了收益。</p>\n<p>后面下半年就是起起伏伏，没什么盈亏。</p>\n<p>更新了<a href=\"/article/money/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/\">我的理财篇</a>也是记录了今年以来的买卖交易。</p>\n<p>原先主要是大盘，一些白酒类，电子类。但都没拿住，早早地抛了。</p>\n<p>后来逐步买入了那个半导体类，现在也是半导体大户。</p>\n<p>但半导体短期来说还是很难干出成绩的一件事情，虽然国家一直会支持这个产业。</p>\n<p>个人的投资目前总结的方法论还不是特别多，很多凭感觉，</p>\n<p>但感觉也是基于看了很多文章，新闻，大V等渠道影响下得出的。</p>\n<p>后面最好还是有一套实体方法，且不断改进那种，相信慢慢也会有思路。</p>\n<h2 id=\"精神食粮\">精神食粮</h2>\n<p>主要讲讲日常闲时的消磨方式。</p>\n<p>手游王者荣耀还是一个在玩的主要游戏，并不特别看重等级，玩起来比较随性。</p>\n<p>平常会有一些同事一起开黑玩，也是有输有赢的娱乐局。</p>\n<p>电脑端由于是mac电脑近来也都玩的少了，回忆玩过一段时间饥荒，也是比较喜欢生存这类型。</p>\n<p>弹钢琴还是一个比较重要的自娱自乐项目，虽然弹得并不多也不好，<br>\n但偶尔找到自己喜欢的旋律和谱子还是可以一试。</p>\n<p>另外B站的视频，一些短的电视剧，动漫(只剩秦时明月了)也在追进，<br>\n电影到是不怎么热衷了，保留一份期待吧。<br>\n直播到是还每天看一点，主要是游戏直播，当做看以前电视那样看，形看神不看。</p>\n<p>书籍实体书今年到是都没怎么看，网文小说、有声小说到是看了一些，<br>\n另外就是一些技术书籍了，也是啃了一部分。</p>\n<h2 id=\"规划\">规划</h2>\n<p>有个潜移默化中变化的思想就是准备好好留在杭州打拼了。</p>\n<p>刚毕业后的我可能还是一个选择阶段，那时的选择很多，或杭州或宁波甚至上海。<br>\n在杭州待了一年，慢慢的转变为了杭州可以的话就在杭州先待几年，别的地有好的也可以考虑。<br>\n再然后转变为有长久在杭州的打算。</p>\n<p>一个是思想的转变是 也不把搬到其他城市作为一种背井离乡，这也可以是家族的发展，或者你自己成为了根。</p>\n<p>另外也是杭州这边也可以有让我留下来的资本和勇气。（有说房价高，但你亦可以有不买房留下来的勇气）</p>\n<p>希望能有一次旅游，国内就行，有伴最好，或者和家里人一起。<br>\n顺便做回飞机，20多年还没坐过那。<br>\n（看上去简单，还得提前个几个月规划好时间地点人物，也不是说走就走的人）</p>\n<p>希望能保持一个锻炼，还是以慢跑为主。</p>\n<p>下半年在可以摇到号的情况下可以考虑买个车，没有的话也可以适当考虑电动车或二手车，<br>\n虽然目前还是可以但没必要的状态，养车也得一定的费用，但也有时是很有用，顺便当做练练手。</p>\n<p>新的一年已经在阿里乌鸫工作，伴随而来的是新的机遇和挑战。<br>\n而这次我很稳，相信自己能适应职场的节奏，能顶住技术的更迭，能开拓更广的视野。</p>\n<h2 id=\"最后\">最后</h2>\n<p>2020是我第二个本命年，随着年龄的增长，有些东西和思想还是在悄然发生变化。<br>\n继续好好的拥抱自己，拥抱人生。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>这个总结会迟到但不会缺席。放个音乐会更配哦~</p>\n<p>2020年已很快过去，今年过的格外稳<br>\n外部环境有一部分原因，疫情/公司/生活让我感受到一丝压抑；<br>\n内部因素也导致有些懒懒的，内心毫无波澜、保持最低期望。<br>\n但稳也能学到很多，积累很多，等待质变。</p>\n<p>以下主题不分先后轻重。</p>\n<h2>工作</h2>\n<p>今年还是在大搜车的一年，年初在家工作了一个月才来到公司，</p>\n<p>当时还信心满满，虽然一些团队的资深大佬都纷纷跳槽。</p>\n<p>然后就经历了三次团队和领导的更换，感觉好起来了就换一拨，可能没碰上好运气，<br>\n个人认为这个也是一直很难有职场稳步提升的一个致命点。</p>\n<p>今年以来一直先是做了一段时间数据平台项目，后面又转到做数据BI项目，从零开始的BI项目足够做很长时间。</p>\n<p>由于在数据中心呆了一段时间，各个项目都有交互。<br>\n对新项目，对整体数据流程等都比较清楚，所以干起来也不是特别费脑力。</p>\n<p>新项目或者新版本基本可以独立hold住，包括后续还可以探讨一些技术上的方案和给一些建议。</p>\n<p>但环境使然，技术这边比较难以做出成绩。</p>\n<p>上半年心内还挺急的，希望能做出些成绩蹭上一波薪资和等级的上升，但年中并没有想象中的回报，<br>\n所以有了一波打击，回想当时的内心还是挺不甘心的，也是有了换工作的想法。</p>\n<p>年中那会儿算起来也才正式工作一年，项目接触还不够多，java也就学了半年，所以碰了几次壁，印象中找到了上海的一家和杭州的几家小公司。</p>\n<p>又是一些打击让我放弃，这次是跳槽工资都达不到我内心的希望，感觉是30%以内就别跳槽了，还不如在继续干一段时间。</p>\n<p>后面在九十月份也陆续找了一些小公司，当时的想法是碰上好的就去了，碰不上也继续在这儿做下去。<br>\n保持一种面试的压迫感，随时准备一些面试基础知识与问题。</p>\n<p>年底了当时也是在稍微投一些简历，之前有一个同事去了阿里生态，所以也是留了点印象。<br>\n后面收到了那家公司的电话面试，就让自己在挑战一把，在杭州去阿里也是一个不错的选择。</p>\n<h2>生活</h2>\n<p>今年由于疫情，没有远行。<br>\n租房一直挺合适的，也没有更换这个翡翠城小房间。</p>\n<p>只在杭州内和朋友稍微走了走。</p>\n<p>卖葡萄也是生活一部分了，今年公司人流动大，生意就不行了，只卖了两拨，百多箱的样子。</p>\n<p>这个事情一般自己尽力就好，做生意的脑袋并不特别发达。</p>\n<p>平淡的生活也需要挑战，今年日常增加羽毛球的运动，进行了虐人的徒步挑战，<br>\n第一次参加了半程马拉松，第一次进行了滑雪。</p>\n<p>羽毛球主要是公司组织的，也是一星期一次基本不落下，同时也认识一些朋友<br>\n虽然球技基本也稳定在一般水平</p>\n<p>徒步则比较偶然，碰上了喜欢徒步的朋友，就约着一起去，穿越了七尖，<br>\n准备好了装备，走了两天，翻山越岭也是比较艰险的一次体验。</p>\n<p>马拉松是我酝酿了很久的，老早以前也想去参加下。<br>\n杭马报名但没抽签上，就参加了梦想小镇的马拉松，也是比较近。<br>\n今年一直以来都有在小区跑步的习惯，一般跑个几公里锻炼。<br>\n参加过程比较顺利，单人跑完了全程20多公里。</p>\n<p>滑雪是也是一些朋友拉着一起去了，想想好像都是有朋友组织，交一群朋友还是挺重要的。<br>\n滑的是双板，摔了几跤也是会滑小的直道下坡了。</p>\n<p>最好的生活是平平淡淡。</p>\n<h2>技术</h2>\n<p>今年总体还是在Java和后端上做耕耘，副业是写chrome插件，改进博客。</p>\n<p>19年转Java的选择在现在看来也是没有错的，确实多了更多机会，（其实也没什么选择余地，都是一步步走过来）<br>\n环境使然与人的主观能动性共同作用😆</p>\n<p>年初还希望在大数据上有所建树，但可能环境因素吧，并不都往想的方向发展，还没开始就结束了的那种。</p>\n<p>再后来调整了思路，也默默把自己简历写成了Java开发。</p>\n<p>在这个行业这个职位，总是得逼着自己学习，不然也跟不上脚步。<br>\n只要工作中使了劲，基本在工作项目中学到的也足够自己喝一壶</p>\n<p>另外在业余时间或项目间隙也总得弄点东西写，规划自己的产品。</p>\n<p>我选择的是chrome插件，这个在前几年也尝试过，但也只是简单的demo。</p>\n<p>然后也是一些突发奇想，把老的demo拿出来好好的改造了一下，成为了现在的<a href=\"https://github.com/webgjc/web_robot\">web robot</a></p>\n<p>断断续续写了大半年，也算是一个不少功能的插件，在一定场景下可以发挥特别的作用，已有<strong>51</strong>个star。</p>\n<p>后续想要的话还可以继续改进这个插件</p>\n<p>另外有兴趣会开辟小程序、小游戏等的轻量开发。</p>\n<p>博客也是一直在维护，一方面是写文章记录，另一方面是优化展示，<br>\n发觉更多元素，改进原有博客主题，引入新的技术实现等。</p>\n<p>今年博客完成了<strong>26</strong>篇，大致有<strong>3.5</strong>万字。前面hive/hadoop多些，后面插件的多些。<br>\n截至2021.02已有<strong>9476</strong>访问量，<strong>5318</strong>访问人次</p>\n<p>github也有<strong>128</strong> contributions in 2020，同时多个50多个star，主要为插件的。</p>\n<h2>情感</h2>\n<p>这个主题比较悲伤🙄。</p>\n<p>希望是美好的，现实是残酷的。</p>\n<p>今年来说，重点心思没有放在找女朋友这件事上，</p>\n<p>个人还是比较在意一段感情的，所以不会轻易开始，更不希望轻易结束。（内心也是有点害怕和抗拒的）</p>\n<p>可能我希望这是一个水到渠成的事情，但这个目前来说有点无法做到这样。</p>\n<p>认识的人也不是特别的多，说得上话的也没几个。</p>\n<p>还有目前也不算在杭州扎稳脚跟，还是一个漂流瓶。</p>\n<h2>家</h2>\n<p>家庭伴随着亲情，我个人看来也是需要好好打理的。</p>\n<p>自己这个年纪了，也是有下一辈的人了，奶奶辈、父母辈也都老了，处于四世同堂的第二级。</p>\n<p>也不想他们老来担负特别大的压力，独立自主这个想法到是一直伴随着我，<br>\n由此而在大城市打拼。</p>\n<p>辛苦了半辈子，家里人的身体也不是特别好，去年、今年以来也特别突出。</p>\n<p>貌似也没有特别好的办法，只能多检查检查，或者考虑保险这种。</p>\n<p>家在余姚比较近，不过现在也大概节日回去下或者周末空了回去下。</p>\n<p>频率不高但也常常能见，也是挺舒服的一个状态。</p>\n<p>家的一些原因还促使我早点买车，家里也在农村交通不好，买车可以回家方便，先看着，可能是一个下面的规划。</p>\n<h2>理财</h2>\n<p>理财是一个长久在干的事情，都快算是第二收入了，当然正负不一定。</p>\n<p>今年算是行情不错的一年，大家都有得赚，我也是赶上了几波，投的钱来说赚的也是20多个点</p>\n<p>年初还是空仓，赶上了节后的大跌买入，后来就一直赚的不错。</p>\n<p>在年中已经投入比较多了，也赶上了一波6-7月的行情，当时天天大涨也是没见过这阵仗，逐步卖一点，留下了收益。</p>\n<p>后面下半年就是起起伏伏，没什么盈亏。</p>\n<p>更新了<a href=\"/article/money/money_1_%E7%90%86%E8%B4%A2%E7%AF%87/\">我的理财篇</a>也是记录了今年以来的买卖交易。</p>\n<p>原先主要是大盘，一些白酒类，电子类。但都没拿住，早早地抛了。</p>\n<p>后来逐步买入了那个半导体类，现在也是半导体大户。</p>\n<p>但半导体短期来说还是很难干出成绩的一件事情，虽然国家一直会支持这个产业。</p>\n<p>个人的投资目前总结的方法论还不是特别多，很多凭感觉，</p>\n<p>但感觉也是基于看了很多文章，新闻，大V等渠道影响下得出的。</p>\n<p>后面最好还是有一套实体方法，且不断改进那种，相信慢慢也会有思路。</p>\n<h2>精神食粮</h2>\n<p>主要讲讲日常闲时的消磨方式。</p>\n<p>手游王者荣耀还是一个在玩的主要游戏，并不特别看重等级，玩起来比较随性。</p>\n<p>平常会有一些同事一起开黑玩，也是有输有赢的娱乐局。</p>\n<p>电脑端由于是mac电脑近来也都玩的少了，回忆玩过一段时间饥荒，也是比较喜欢生存这类型。</p>\n<p>弹钢琴还是一个比较重要的自娱自乐项目，虽然弹得并不多也不好，<br>\n但偶尔找到自己喜欢的旋律和谱子还是可以一试。</p>\n<p>另外B站的视频，一些短的电视剧，动漫(只剩秦时明月了)也在追进，<br>\n电影到是不怎么热衷了，保留一份期待吧。<br>\n直播到是还每天看一点，主要是游戏直播，当做看以前电视那样看，形看神不看。</p>\n<p>书籍实体书今年到是都没怎么看，网文小说、有声小说到是看了一些，<br>\n另外就是一些技术书籍了，也是啃了一部分。</p>\n<h2>规划</h2>\n<p>有个潜移默化中变化的思想就是准备好好留在杭州打拼了。</p>\n<p>刚毕业后的我可能还是一个选择阶段，那时的选择很多，或杭州或宁波甚至上海。<br>\n在杭州待了一年，慢慢的转变为了杭州可以的话就在杭州先待几年，别的地有好的也可以考虑。<br>\n再然后转变为有长久在杭州的打算。</p>\n<p>一个是思想的转变是 也不把搬到其他城市作为一种背井离乡，这也可以是家族的发展，或者你自己成为了根。</p>\n<p>另外也是杭州这边也可以有让我留下来的资本和勇气。（有说房价高，但你亦可以有不买房留下来的勇气）</p>\n<p>希望能有一次旅游，国内就行，有伴最好，或者和家里人一起。<br>\n顺便做回飞机，20多年还没坐过那。<br>\n（看上去简单，还得提前个几个月规划好时间地点人物，也不是说走就走的人）</p>\n<p>希望能保持一个锻炼，还是以慢跑为主。</p>\n<p>下半年在可以摇到号的情况下可以考虑买个车，没有的话也可以适当考虑电动车或二手车，<br>\n虽然目前还是可以但没必要的状态，养车也得一定的费用，但也有时是很有用，顺便当做练练手。</p>\n<p>新的一年已经在阿里乌鸫工作，伴随而来的是新的机遇和挑战。<br>\n而这次我很稳，相信自己能适应职场的节奏，能顶住技术的更迭，能开拓更广的视野。</p>\n<h2>最后</h2>\n<p>2020是我第二个本命年，随着年龄的增长，有些东西和思想还是在悄然发生变化。<br>\n继续好好的拥抱自己，拥抱人生。</p>\n"},{"title":"基于antlr4实现HQL的解析[元数据]","catalog":true,"date":"2020-04-07T07:24:40.000Z","subtitle":null,"header-img":"/img/article_header/header.jpg","_content":"\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n\n## 效果展示\n\n原始sql\n\n``` sql\ncreate external table if not exists db_test.test_user (\n    id int comment 'id',\n    name string comment '姓名',\n    age int comment '年龄'\n)\ncomment '测试用户表'\npartitioned by (ds string comment '分区')\nROW FORMAT DELIMITED\nNULL DEFINED AS \"\"\nSTORED AS TEXTFILE\nLOCATION '/user/hive/warehouse/db_test.db/test_user';\n```\n\n解析后的结果\n``` json\n{\n    \"dbName\": \"db_test\",\n    \"fields\": [\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"id\",\n            \"fieldName\": \"id\"\n        },\n        {\n            \"dataType\": \"string\",\n            \"fieldComment\": \"姓名\",\n            \"fieldName\": \"name\"\n        },\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"年龄\",\n            \"fieldName\": \"age\"\n        }\n    ],\n    \"location\": \"LOCATION '/user/hive/warehouse/db_test.db/test_user'\",\n    \"partition\": \"partitioned by (ds string comment '分区')\",\n    \"properties\": null,\n    \"rowFormat\": \"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\",\n    \"store\": \"STORED AS TEXTFILE\",\n    \"tableComment\": \"测试用户表\",\n    \"tableName\": \"test_user\",\n    \"tableType\": \"external\"\n}\n```","source":"_posts/2020/article_6_基于antlr4实现HQL的解析-元数据.md","raw":"---\ntitle: '基于antlr4实现HQL的解析[元数据]'\ncatalog: true\ndate: 2020-04-07 15:24:40\nsubtitle: \nheader-img: \"/img/article_header/header.jpg\"\ntags:\n- HQL解析\n- 元数据\n- JAVA\n---\n\n## 前言\n\n在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。 \n\n关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。\n\nHQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。  \n\n本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。\n\n代码实现参考：https://github.com/webgjc/sql-parser/\n\n## 前期准备\n\n- antlr4安装看[这里官方教程](https://www.antlr.org/) \n- idea的插件 ANTLR v4 grammar plugin\n- sql的解析文件 [Hplsql.g4](https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4)(这个文件大部分解析都有了，不过还有很多可以改进的)\n\n起个java项目，加上dependency antlr4-runtime 和    \nplugin antlr4-maven-plugin(可以在编译的时候将g4\n文件生成lexer和parser等文件)\n\n## 具体实现\n\nantlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看[这里](https://abcdabcd987.com/notes-on-antlr4/)。  \n这边以visitor模式实现。\n\n### g4分析\n\nhplsql.g4文件中创表语句相关的主要为下面一些\n```\n// 创表语句入口 (create ... 表名 表来源)\ncreate_table_stmt :\n       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition\n     ;\n\n// 创表来源，这边用的是是字段和表其他配置 \n// (... 字段 ... 表配置)\ncreate_table_definition :\n      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?\n     ;\n\n// 每个字段 (字段名 类型 长度 ... 备注)\ncreate_table_columns_item :\n       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?\n     | (T_CONSTRAINT ident)? create_table_column_cons\n     ;\n\n// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)\ncreate_table_options_hive_item :\n    (T_COMMENT string)?\n    create_table_hive_partitioned_by_clause?\n    create_table_hive_row_format?\n    create_table_hive_stored?\n    create_table_hive_location?\n    create_table_hive_tblproperties?\n     ;\n```\n\n### 实现思路\n\n首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。\n``` xml\n<plugin>\n    <groupId>org.antlr</groupId>\n    <artifactId>antlr4-maven-plugin</artifactId>\n    <version>${antlr4.version}</version>\n    <configuration>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <arguments>\n            <argument>-visitor</argument>\n            <argument>-listener</argument>\n        </arguments>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>antlr4</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。\n\n### 表字段相关定义\n\n``` java\npublic class HiveFieldMetadata {\n    /**\n     * 字段名\n     */\n    private String fieldName;\n\n    /**\n     * 数据类型\n     */\n    private String dataType;\n\n    /**\n     * 字段备注\n     */\n    private String fieldComment;\n}\n```\n\n表相关定义\n\n``` java\npublic class HiveTableMetadata {\n    /**\n     * 库名\n     */\n    private String dbName;\n\n    /**\n     * 表名\n     */\n    private String tableName;\n\n    /**\n     * 表类型\n     */\n    private String tableType;\n\n    /**\n     * 备注\n     */\n    private String tableComment;\n\n    /**\n     * 分区\n     */\n    private String partition;\n\n    /**\n     * 行格式\n     */\n    private String rowFormat;\n\n    /**\n     * 存储格式\n     */\n    private String store;\n\n    /**\n     * 存储位置\n     */\n    private String location;\n\n    /**\n     * 属性(压缩格式)\n     */\n    private String properties;\n\n    /**\n     * 字段\n     */\n    private List<HiveFieldMetadata> fields;\n}\n```\n\n### 源码实现说明\n\n``` java\npublic class HiveSQLTableMetadata extends HplsqlBaseVisitor {\n\n    private HiveTableMetadata tableMetadata = new HiveTableMetadata();\n\n    private String sourceSQL;\n\n    // 保存原始sql\n    public HiveSQLTableMetadata(String sql) {\n        this.sourceSQL = sql;\n    }\n\n    // 截取原始sql\n    private String subSourceSql(ParserRuleContext parserRuleContext) {\n        return sourceSQL.substring(\n                parserRuleContext.getStart().getStartIndex(),\n                parserRuleContext.getStop().getStopIndex() + 1);\n    }\n\n    // 处理备注中的引号\n    private String dealComment(String comment) {\n        if(comment != null && comment.length() >= 2\n                && comment.startsWith(\"\\'\") && comment.endsWith(\"\\'\")){\n            comment = comment.substring(1, comment.length()-1);\n        }\n        return comment;\n    }\n\n    // 处理表名字段名中的``\n    private String dealNameMark(String name) {\n        if(name.startsWith(\"`\") && name.endsWith(\"`\")) {\n            return name.substring(1, name.length()-1);\n        }else{\n            return name;\n        }\n    }\n\n    // 获取到字段信息\n    private void setTableField(HplsqlParser.Create_table_stmtContext ctx) {\n        List<HplsqlParser.Create_table_columns_itemContext> itemContexts =\n                ctx.create_table_definition().create_table_columns().create_table_columns_item();\n        List<HiveFieldMetadata> fields = new ArrayList<>();\n        itemContexts.forEach(item -> {\n            HiveFieldMetadata field = new HiveFieldMetadata();\n            field.setFieldName(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)\n                    .map(RuleContext::getText)\n                    .map(this::dealNameMark)\n                    .orElse(null));\n            String type = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)\n                    .map(RuleContext::getText)\n                    .orElse(null);\n            String typeLen = Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)\n                    .map(RuleContext::getText)\n                    .orElse(\"\");\n            field.setDataType(type != null ? type + typeLen : null);\n            field.setFieldComment(Optional.of(item)\n                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)\n                    .map(RuleContext::getText)\n                    .map(this::dealComment)\n                    .orElse(null));\n            fields.add(field);\n        });\n        tableMetadata.setFields(fields);\n    }\n\n    // 获取表其他属性信息\n    private void setTableOption(HplsqlParser.Create_table_stmtContext ctx) {\n        HplsqlParser.Create_table_options_hive_itemContext tableOption =\n                ctx.create_table_definition().create_table_options().create_table_options_hive_item();\n        tableMetadata.setTableComment(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::string)\n                .map(RuleContext::getText)\n                .map(this::dealComment)\n                .orElse(null));\n        tableMetadata.setPartition(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setStore(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setLocation(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)\n                .map(this::subSourceSql)\n                .orElse(null));\n        tableMetadata.setProperties(Optional.ofNullable(tableOption)\n                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)\n                .map(this::subSourceSql)\n                .orElse(null));\n    }\n\n    // 执行入口，重写visit create表\n    // 获取到表相关信息\n    @Override\n    public Object visitCreate_table_stmt(HplsqlParser.Create_table_stmtContext ctx) {\n        List<ParseTree> tbNameTree = ctx.table_name().ident().children;\n        if(tbNameTree.size() == 3 && tbNameTree.get(1).getText().equals(\".\")) {\n            tableMetadata.setDbName(tbNameTree.get(0).getText());\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(2).getText()));\n        }else{\n            tableMetadata.setTableName(dealNameMark(tbNameTree.get(0).getText()));\n        }\n        tableMetadata.setTableType(Optional.of(ctx)\n                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)\n                .map(ParseTree::getText)\n                .orElse(null));\n        setTableField(ctx);\n        setTableOption(ctx);\n        return super.visitCreate_table_stmt(ctx);\n    }\n\n    // 获取全部创表信息\n    public HiveTableMetadata getTableMetadata() {\n        return this.tableMetadata;\n    }\n\n}\n```\n\n### 调用实现\n\n``` java\n// 获取解析树\nprivate ParseTree getParseTree(String sourceSQL) {\n    CharStream input = CharStreams.fromString(sourceSQL);\n    HplsqlLexer lexer = new HplsqlLexer(input);\n    CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n    HplsqlParser parser = new HplsqlParser(tokenStream);\n    return parser.program();\n}\n\n// 解析\npublic HiveTableMetadata getHiveTableMetadata() {\n    HiveSQLTableMetadata visitor = new HiveSQLTableMetadata(sourceSQL);\n    visitor.visit(getParseTree(sourceSQL));\n    return visitor.getTableMetadata();\n}\n```\n\n## 效果展示\n\n原始sql\n\n``` sql\ncreate external table if not exists db_test.test_user (\n    id int comment 'id',\n    name string comment '姓名',\n    age int comment '年龄'\n)\ncomment '测试用户表'\npartitioned by (ds string comment '分区')\nROW FORMAT DELIMITED\nNULL DEFINED AS \"\"\nSTORED AS TEXTFILE\nLOCATION '/user/hive/warehouse/db_test.db/test_user';\n```\n\n解析后的结果\n``` json\n{\n    \"dbName\": \"db_test\",\n    \"fields\": [\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"id\",\n            \"fieldName\": \"id\"\n        },\n        {\n            \"dataType\": \"string\",\n            \"fieldComment\": \"姓名\",\n            \"fieldName\": \"name\"\n        },\n        {\n            \"dataType\": \"int\",\n            \"fieldComment\": \"年龄\",\n            \"fieldName\": \"age\"\n        }\n    ],\n    \"location\": \"LOCATION '/user/hive/warehouse/db_test.db/test_user'\",\n    \"partition\": \"partitioned by (ds string comment '分区')\",\n    \"properties\": null,\n    \"rowFormat\": \"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\",\n    \"store\": \"STORED AS TEXTFILE\",\n    \"tableComment\": \"测试用户表\",\n    \"tableName\": \"test_user\",\n    \"tableType\": \"external\"\n}\n```","slug":"2020/article_6_基于antlr4实现HQL的解析-元数据","published":1,"updated":"2021-03-15T12:03:58.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76f004i0770jh7ckv9j","content":"<h2 id=\"前言\">前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/sql-parser/</a></p>\n<h2 id=\"前期准备\">前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"external\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\" target=\"_blank\" rel=\"external\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2 id=\"具体实现\">具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\" target=\"_blank\" rel=\"external\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3 id=\"g4分析\">g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现思路\">实现思路</h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3 id=\"表字段相关定义\">表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码实现说明\">源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用实现\">调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果展示\">效果展示</h2>\n<p>原始sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> db_test.test_user (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'年龄'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">comment</span> <span class=\"string\">'测试用户表'</span></span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (ds <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'分区'</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> <span class=\"keyword\">DELIMITED</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span> DEFINED <span class=\"keyword\">AS</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE</span><br><span class=\"line\">LOCATION <span class=\"string\">'/user/hive/warehouse/db_test.db/test_user'</span>;</span><br></pre></td></tr></table></figure>\n<p>解析后的结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"姓名\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"年龄\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"age\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"LOCATION '/user/hive/warehouse/db_test.db/test_user'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"partition\"</span>: <span class=\"string\">\"partitioned by (ds string comment '分区')\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"properties\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rowFormat\"</span>: <span class=\"string\">\"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"store\"</span>: <span class=\"string\">\"STORED AS TEXTFILE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableComment\"</span>: <span class=\"string\">\"测试用户表\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"test_user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableType\"</span>: <span class=\"string\">\"external\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2>前言</h2>\n<p>在大数据场景中，HQL的使用次数很多：离线任务，及时查询，数仓建模等。</p>\n<p>关于HQL解析在hive底层也有他自己的HQL解析实现。不过底层的实现直接用不起来，这边使用antlr4直接来实现HQL的解析。</p>\n<p>HQL解析在很多场景能用到并发挥如虎添翼的作用，这边开个新坑，会分好几个文章来讲主要用到的一些场景和实现。</p>\n<p>本文主要讲CREATE语句解析出元数据。会用到的场景也很多，比如建模的时候，离线任务中的创表和其他有用到类似建表的地方都可以转换为HQL的交互方式拿到数据，而不是传统的填写表单。</p>\n<p>代码实现参考：<a href=\"https://github.com/webgjc/sql-parser/\">https://github.com/webgjc/sql-parser/</a></p>\n<h2>前期准备</h2>\n<ul>\n<li>antlr4安装看<a href=\"https://www.antlr.org/\">这里官方教程</a></li>\n<li>idea的插件 ANTLR v4 grammar plugin</li>\n<li>sql的解析文件 <a href=\"https://github.com/apache/hive/blob/master/hplsql/src/main/antlr4/org/apache/hive/hplsql/Hplsql.g4\">Hplsql.g4</a>(这个文件大部分解析都有了，不过还有很多可以改进的)</li>\n</ul>\n<p>起个java项目，加上dependency antlr4-runtime 和<br>\nplugin antlr4-maven-plugin(可以在编译的时候将g4<br>\n文件生成lexer和parser等文件)</p>\n<h2>具体实现</h2>\n<p>antlr4支持两种格式listener和visitor遍历模式。两种模式的具体用法和区别看<a href=\"https://abcdabcd987.com/notes-on-antlr4/\">这里</a>。<br>\n这边以visitor模式实现。</p>\n<h3>g4分析</h3>\n<p>hplsql.g4文件中创表语句相关的主要为下面一些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创表语句入口 (create ... 表名 表来源)</span><br><span class=\"line\">create_table_stmt :</span><br><span class=\"line\">       T_CREATE (T_EXTERNAL)? T_TABLE (T_IF T_NOT T_EXISTS)? table_name create_table_definition</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创表来源，这边用的是是字段和表其他配置 </span><br><span class=\"line\">// (... 字段 ... 表配置)</span><br><span class=\"line\">create_table_definition :</span><br><span class=\"line\">      (T_AS? T_OPEN_P select_stmt T_CLOSE_P | T_AS? select_stmt | T_OPEN_P create_table_columns T_CLOSE_P | T_LIKE table_name) create_table_options?</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 每个字段 (字段名 类型 长度 ... 备注)</span><br><span class=\"line\">create_table_columns_item :</span><br><span class=\"line\">       column_name dtype dtype_len? dtype_attr* create_table_column_inline_cons* (T_COMMENT column_comment)?</span><br><span class=\"line\">     | (T_CONSTRAINT ident)? create_table_column_cons</span><br><span class=\"line\">     ;</span><br><span class=\"line\"></span><br><span class=\"line\">// 表其他相关配置 (备注 分区 行格式 存储类型 存储\b\b位置 表属性)</span><br><span class=\"line\">create_table_options_hive_item :</span><br><span class=\"line\">    (T_COMMENT string)?</span><br><span class=\"line\">    create_table_hive_partitioned_by_clause?</span><br><span class=\"line\">    create_table_hive_row_format?</span><br><span class=\"line\">    create_table_hive_stored?</span><br><span class=\"line\">    create_table_hive_location?</span><br><span class=\"line\">    create_table_hive_tblproperties?</span><br><span class=\"line\">     ;</span><br></pre></td></tr></table></figure>\n<h3>实现思路</h3>\n<p>首先需要根据g4文件，使用antlr4-maven-plugin生成对应的java文件，要在pom文件配置对应如下的插件信息，sourcedirectory这样配可以让生成的java文件直接在target里的可用包里。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr4-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;antlr4.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-visitor<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">argument</span>&gt;</span>-listener<span class=\"tag\">&lt;/<span class=\"name\">argument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>antlr4<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后写一个实体类继承HplsqlBaseVisitor，确认要重写的目标函数为创表语句的visitCreate_table_stmt，根据antlr4的插件查看到具体的子结构，然后可以根据Optional和map判断下层节点函数是否存在，存在就保存解析出的数据。</p>\n<h3>表字段相关定义</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveFieldMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fieldComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表相关定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveTableMetadata</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 库名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dbName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tableComment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String partition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 行格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rowFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String store;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储位置</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String location;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 属性(压缩格式)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HiveFieldMetadata&gt; fields;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>源码实现说明</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HiveSQLTableMetadata</span> <span class=\"keyword\">extends</span> <span class=\"title\">HplsqlBaseVisitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HiveTableMetadata tableMetadata = <span class=\"keyword\">new</span> HiveTableMetadata();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceSQL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HiveSQLTableMetadata</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sourceSQL = sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截取原始sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">subSourceSql</span><span class=\"params\">(ParserRuleContext parserRuleContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sourceSQL.substring(</span><br><span class=\"line\">                parserRuleContext.getStart().getStartIndex(),</span><br><span class=\"line\">                parserRuleContext.getStop().getStopIndex() + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理备注中的引号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealComment</span><span class=\"params\">(String comment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comment != <span class=\"keyword\">null</span> &amp;&amp; comment.length() &gt;= <span class=\"number\">2</span></span><br><span class=\"line\">                &amp;&amp; comment.startsWith(<span class=\"string\">\"\\'\"</span>) &amp;&amp; comment.endsWith(<span class=\"string\">\"\\'\"</span>))&#123;</span><br><span class=\"line\">            comment = comment.substring(<span class=\"number\">1</span>, comment.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理表名字段名中的``</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">dealNameMark</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name.startsWith(<span class=\"string\">\"`\"</span>) &amp;&amp; name.endsWith(<span class=\"string\">\"`\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.substring(<span class=\"number\">1</span>, name.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取到字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableField</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HplsqlParser.Create_table_columns_itemContext&gt; itemContexts =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_columns().create_table_columns_item();</span><br><span class=\"line\">        List&lt;HiveFieldMetadata&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        itemContexts.forEach(item -&gt; &#123;</span><br><span class=\"line\">            HiveFieldMetadata field = <span class=\"keyword\">new</span> HiveFieldMetadata();</span><br><span class=\"line\">            field.setFieldName(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_name)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealNameMark)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            String type = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            String typeLen = Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::dtype_len)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .orElse(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            field.setDataType(type != <span class=\"keyword\">null</span> ? type + typeLen : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            field.setFieldComment(Optional.of(item)</span><br><span class=\"line\">                    .map(HplsqlParser.Create_table_columns_itemContext::column_comment)</span><br><span class=\"line\">                    .map(RuleContext::getText)</span><br><span class=\"line\">                    .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                    .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">            fields.add(field);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        tableMetadata.setFields(fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取表其他属性信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTableOption</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        HplsqlParser.Create_table_options_hive_itemContext tableOption =</span><br><span class=\"line\">                ctx.create_table_definition().create_table_options().create_table_options_hive_item();</span><br><span class=\"line\">        tableMetadata.setTableComment(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::string)</span><br><span class=\"line\">                .map(RuleContext::getText)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::dealComment)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setPartition(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_partitioned_by_clause)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setRowFormat(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_row_format)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setStore(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_stored)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setLocation(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_location)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        tableMetadata.setProperties(Optional.ofNullable(tableOption)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_options_hive_itemContext::create_table_hive_tblproperties)</span><br><span class=\"line\">                .map(<span class=\"keyword\">this</span>::subSourceSql)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行入口，重写visit create表</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到表相关信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">visitCreate_table_stmt</span><span class=\"params\">(HplsqlParser.Create_table_stmtContext ctx)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;ParseTree&gt; tbNameTree = ctx.table_name().ident().children;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tbNameTree.size() == <span class=\"number\">3</span> &amp;&amp; tbNameTree.get(<span class=\"number\">1</span>).getText().equals(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">            tableMetadata.setDbName(tbNameTree.get(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">2</span>).getText()));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tableMetadata.setTableName(dealNameMark(tbNameTree.get(<span class=\"number\">0</span>).getText()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tableMetadata.setTableType(Optional.of(ctx)</span><br><span class=\"line\">                .map(HplsqlParser.Create_table_stmtContext::T_EXTERNAL)</span><br><span class=\"line\">                .map(ParseTree::getText)</span><br><span class=\"line\">                .orElse(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">        setTableField(ctx);</span><br><span class=\"line\">        setTableOption(ctx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.visitCreate_table_stmt(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取全部创表信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tableMetadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>调用实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取解析树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ParseTree <span class=\"title\">getParseTree</span><span class=\"params\">(String sourceSQL)</span> </span>&#123;</span><br><span class=\"line\">    CharStream input = CharStreams.fromString(sourceSQL);</span><br><span class=\"line\">    HplsqlLexer lexer = <span class=\"keyword\">new</span> HplsqlLexer(input);</span><br><span class=\"line\">    CommonTokenStream tokenStream = <span class=\"keyword\">new</span> CommonTokenStream(lexer);</span><br><span class=\"line\">    HplsqlParser parser = <span class=\"keyword\">new</span> HplsqlParser(tokenStream);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parser.program();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HiveTableMetadata <span class=\"title\">getHiveTableMetadata</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    HiveSQLTableMetadata visitor = <span class=\"keyword\">new</span> HiveSQLTableMetadata(sourceSQL);</span><br><span class=\"line\">    visitor.visit(getParseTree(sourceSQL));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visitor.getTableMetadata();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>效果展示</h2>\n<p>原始sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span> db_test.test_user (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'id'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">    age <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'年龄'</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">comment</span> <span class=\"string\">'测试用户表'</span></span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (ds <span class=\"keyword\">string</span> <span class=\"keyword\">comment</span> <span class=\"string\">'分区'</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> <span class=\"keyword\">DELIMITED</span></span><br><span class=\"line\"><span class=\"literal\">NULL</span> DEFINED <span class=\"keyword\">AS</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE</span><br><span class=\"line\">LOCATION <span class=\"string\">'/user/hive/warehouse/db_test.db/test_user'</span>;</span><br></pre></td></tr></table></figure>\n<p>解析后的结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dbName\"</span>: <span class=\"string\">\"db_test\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"id\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"id\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"姓名\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"dataType\"</span>: <span class=\"string\">\"int\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldComment\"</span>: <span class=\"string\">\"年龄\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"age\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"LOCATION '/user/hive/warehouse/db_test.db/test_user'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"partition\"</span>: <span class=\"string\">\"partitioned by (ds string comment '分区')\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"properties\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"rowFormat\"</span>: <span class=\"string\">\"ROW FORMAT DELIMITED\\nNULL DEFINED AS \\\"\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"store\"</span>: <span class=\"string\">\"STORED AS TEXTFILE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableComment\"</span>: <span class=\"string\">\"测试用户表\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableName\"</span>: <span class=\"string\">\"test_user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"tableType\"</span>: <span class=\"string\">\"external\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"刷一下剑指offer题","catalog":true,"date":"2020-09-13T11:31:43.000Z","_content":"\n题库地址：https://leetcode-cn.com/problemset/lcof/\n\n### 数组中重复的数字\n放到set判断\n\n### 二维数组中的查找\n二位数组左下角作为开始点，target比当前大的话往有移动，target比当前小的话往上移动，只到不能移动或者找到target\n\n### 替换空格\n字符串遍历替换空格并拼接\n\n### 从尾到头打印链表\n链表从头到尾取出，放到栈中，再从栈中取出打印\n\n### 重建二叉树\n前序遍历节点为根节点，将中序遍历分为左子树和右子树，由此递归\n\n### 用两个栈实现队列 \n先往栈1加元素，当遇到删除的时候，判断栈2存不存在元素，不存在则将栈1弹入到栈2，存在则删除栈2最上面元素。\n\n### 斐波那契数列\na, b = b, a+b\n\n### 青蛙跳台阶问题\n一阶或两阶表示f(n) = f(n-1) + f(n-2)  \n同斐波那契\n\n### 旋转数组的最小数字\n二分查找，中间值比右边大则在右边，比右边小则在左边，相等则右边向左位移\n\n### 矩阵中的路径\ndfs \n\n### 机器人的运动范围\nbfs \n\n### 剪绳子\n剪长度为3最优先，将绳子变成3a+b，b分情况讨论\n\n### 剪绳子 II\n同上+取余\n\n### 二进制中1的个数\n数与1进行&操作，使用移位操作>>\n\n### 数值的整数次方\n将n转为2进制 x^9 转为 x^(1*1)*x^(2*0)*x^(4*0)*x^(8*0)\n二进制从尾向头遍历，遍历中x*=x，为1增乘到结果中\n\n### 打印从1到最大的n位数\n直接打印1 - 10^n-1\n\n### 删除链表的节点  \n遍历链表节点，相等的话node.next=node.next.next\n\n### 正则表达式匹配  \n\n### 表示数值的字符串\n有限状态自动机\n\n### 调整数组顺序使奇数位于偶数前面\n左右指针，左边遇到偶数和右边遇到奇数进行交换\n\n### 链表中倒数第k个节点  \n左右指针\n\n### 反转链表\nnext = cur.next  \ncur.next = prev     \nprev = cur  \ncur = next\n\n### 合并两个排序的链表\n新链表，迭代两个链表往里加\n\n### 树的子结构\n先序遍历a，判断两个树是否全等\n\n### 二叉树的镜像\nleft,right = func(right), func(left)\n\n### 对称的二叉树  \nfunc(l.left, r.right) and func(l.right, r.left)\n\n### 顺时针打印矩阵\n一次遍历一圈\n\n### 包含min函数的栈\n用另一个栈，栈顶存储最小值\n\n### 栈的压入、弹出序列\n每压入一个数，都进行循环判断出栈\n\n### 从上到下打印二叉树\nbfs\n\n### 从上到下打印二叉树 II\nbfs\n\n### 从上到下打印二叉树 III\nbfs\n\n### 二叉搜索树的后序遍历序列\n最后一个为根节点，小的在左侧，大的在右侧，由此递归\n\n### 二叉树中和为某一值的路径\n先序遍历，记下路径和总和\n\n### 复杂链表的复制\n深拷贝\n\n### 二叉搜索树与双向链表\n\n### 序列化二叉树  \n\n### 字符串的排列\ndfs, 交换字符位置，剪枝\n\n### 数组中出现次数超过一半的数字\n相同数+1，不相同数-1，最后留下的数\n\n### 最小的k个数\n快排，左侧如果数量为k则返回，如果大于k则继续快排 // 小顶堆\n\n### 数据流中的中位数\n\n### 连续子数组的最大和\n局部和，全局和\n\n### 1～n整数中1出现的次数\n0-h*d 1-h*d+l+1 2-h*d+d\n\n### 数字序列中某一位的数字\n位数d*9，找到数字在的位的第n个，找到在哪个数10**(d-1)+(n-1)//d，找到在这个数的第几个(n-1)%d\n\n### 把数组排成最小的数\n基于xy > yx 则 x>y进行排序，连接\n\n### 把数字翻译成字符串\ndfs\n\n### 礼物的最大价值\n动态规划，左上开始，每格+=max(左，上)\n\n### 最长不含重复字符的子字符串\n双指针+hash表，i=max(dic[s[j]], i) j=max(res, j-i)\n\n### 丑数\n三个指针a,b,c指向0位1，分别乘2,3,5取min，与min相等的往后+1位\n\n### 第一个只出现一次的字符\n哈希表，遍历两次字符\n\n### 数组中的逆序对\n\n### 两个链表的第一个公共节点\n双指针，一个链表到结尾了返回头，直到相交或一起为null\n\n### 在排序数组中查找数字 I\n二分找到数字，然后向左向右找\n\n### 0～n-1中缺失的数字  \n二分看数字和index对不对应\n\n### 二叉搜索树的第k大节点  \n反向中序遍历，到底k个\n\n### 二叉树的深度\n后序遍历，层序遍历\n\n### 平衡二叉树\n先序遍历，根据深度判断\n\n### \n\n","source":"_posts/2020/offer_1_剑指offer思路.md","raw":"---\ntitle: 刷一下剑指offer题\ncatalog: true\ndate: 2020-09-13 19:31:43\n---\n\n题库地址：https://leetcode-cn.com/problemset/lcof/\n\n### 数组中重复的数字\n放到set判断\n\n### 二维数组中的查找\n二位数组左下角作为开始点，target比当前大的话往有移动，target比当前小的话往上移动，只到不能移动或者找到target\n\n### 替换空格\n字符串遍历替换空格并拼接\n\n### 从尾到头打印链表\n链表从头到尾取出，放到栈中，再从栈中取出打印\n\n### 重建二叉树\n前序遍历节点为根节点，将中序遍历分为左子树和右子树，由此递归\n\n### 用两个栈实现队列 \n先往栈1加元素，当遇到删除的时候，判断栈2存不存在元素，不存在则将栈1弹入到栈2，存在则删除栈2最上面元素。\n\n### 斐波那契数列\na, b = b, a+b\n\n### 青蛙跳台阶问题\n一阶或两阶表示f(n) = f(n-1) + f(n-2)  \n同斐波那契\n\n### 旋转数组的最小数字\n二分查找，中间值比右边大则在右边，比右边小则在左边，相等则右边向左位移\n\n### 矩阵中的路径\ndfs \n\n### 机器人的运动范围\nbfs \n\n### 剪绳子\n剪长度为3最优先，将绳子变成3a+b，b分情况讨论\n\n### 剪绳子 II\n同上+取余\n\n### 二进制中1的个数\n数与1进行&操作，使用移位操作>>\n\n### 数值的整数次方\n将n转为2进制 x^9 转为 x^(1*1)*x^(2*0)*x^(4*0)*x^(8*0)\n二进制从尾向头遍历，遍历中x*=x，为1增乘到结果中\n\n### 打印从1到最大的n位数\n直接打印1 - 10^n-1\n\n### 删除链表的节点  \n遍历链表节点，相等的话node.next=node.next.next\n\n### 正则表达式匹配  \n\n### 表示数值的字符串\n有限状态自动机\n\n### 调整数组顺序使奇数位于偶数前面\n左右指针，左边遇到偶数和右边遇到奇数进行交换\n\n### 链表中倒数第k个节点  \n左右指针\n\n### 反转链表\nnext = cur.next  \ncur.next = prev     \nprev = cur  \ncur = next\n\n### 合并两个排序的链表\n新链表，迭代两个链表往里加\n\n### 树的子结构\n先序遍历a，判断两个树是否全等\n\n### 二叉树的镜像\nleft,right = func(right), func(left)\n\n### 对称的二叉树  \nfunc(l.left, r.right) and func(l.right, r.left)\n\n### 顺时针打印矩阵\n一次遍历一圈\n\n### 包含min函数的栈\n用另一个栈，栈顶存储最小值\n\n### 栈的压入、弹出序列\n每压入一个数，都进行循环判断出栈\n\n### 从上到下打印二叉树\nbfs\n\n### 从上到下打印二叉树 II\nbfs\n\n### 从上到下打印二叉树 III\nbfs\n\n### 二叉搜索树的后序遍历序列\n最后一个为根节点，小的在左侧，大的在右侧，由此递归\n\n### 二叉树中和为某一值的路径\n先序遍历，记下路径和总和\n\n### 复杂链表的复制\n深拷贝\n\n### 二叉搜索树与双向链表\n\n### 序列化二叉树  \n\n### 字符串的排列\ndfs, 交换字符位置，剪枝\n\n### 数组中出现次数超过一半的数字\n相同数+1，不相同数-1，最后留下的数\n\n### 最小的k个数\n快排，左侧如果数量为k则返回，如果大于k则继续快排 // 小顶堆\n\n### 数据流中的中位数\n\n### 连续子数组的最大和\n局部和，全局和\n\n### 1～n整数中1出现的次数\n0-h*d 1-h*d+l+1 2-h*d+d\n\n### 数字序列中某一位的数字\n位数d*9，找到数字在的位的第n个，找到在哪个数10**(d-1)+(n-1)//d，找到在这个数的第几个(n-1)%d\n\n### 把数组排成最小的数\n基于xy > yx 则 x>y进行排序，连接\n\n### 把数字翻译成字符串\ndfs\n\n### 礼物的最大价值\n动态规划，左上开始，每格+=max(左，上)\n\n### 最长不含重复字符的子字符串\n双指针+hash表，i=max(dic[s[j]], i) j=max(res, j-i)\n\n### 丑数\n三个指针a,b,c指向0位1，分别乘2,3,5取min，与min相等的往后+1位\n\n### 第一个只出现一次的字符\n哈希表，遍历两次字符\n\n### 数组中的逆序对\n\n### 两个链表的第一个公共节点\n双指针，一个链表到结尾了返回头，直到相交或一起为null\n\n### 在排序数组中查找数字 I\n二分找到数字，然后向左向右找\n\n### 0～n-1中缺失的数字  \n二分看数字和index对不对应\n\n### 二叉搜索树的第k大节点  \n反向中序遍历，到底k个\n\n### 二叉树的深度\n后序遍历，层序遍历\n\n### 平衡二叉树\n先序遍历，根据深度判断\n\n### \n\n","slug":"2020/offer_1_剑指offer思路","published":1,"updated":"2021-01-27T04:46:28.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76g004l0770ycv68ym2","content":"<p>题库地址：<a href=\"https://leetcode-cn.com/problemset/lcof/\" target=\"_blank\" rel=\"external\">https://leetcode-cn.com/problemset/lcof/</a></p>\n<h3 id=\"数组中重复的数字\">数组中重复的数字</h3>\n<p>放到set判断</p>\n<h3 id=\"二维数组中的查找\">二维数组中的查找</h3>\n<p>二位数组左下角作为开始点，target比当前大的话往有移动，target比当前小的话往上移动，只到不能移动或者找到target</p>\n<h3 id=\"替换空格\">替换空格</h3>\n<p>字符串遍历替换空格并拼接</p>\n<h3 id=\"从尾到头打印链表\">从尾到头打印链表</h3>\n<p>链表从头到尾取出，放到栈中，再从栈中取出打印</p>\n<h3 id=\"重建二叉树\">重建二叉树</h3>\n<p>前序遍历节点为根节点，将中序遍历分为左子树和右子树，由此递归</p>\n<h3 id=\"用两个栈实现队列\">用两个栈实现队列</h3>\n<p>先往栈1加元素，当遇到删除的时候，判断栈2存不存在元素，不存在则将栈1弹入到栈2，存在则删除栈2最上面元素。</p>\n<h3 id=\"斐波那契数列\">斐波那契数列</h3>\n<p>a, b = b, a+b</p>\n<h3 id=\"青蛙跳台阶问题\">青蛙跳台阶问题</h3>\n<p>一阶或两阶表示f(n) = f(n-1) + f(n-2)<br>\n同斐波那契</p>\n<h3 id=\"旋转数组的最小数字\">旋转数组的最小数字</h3>\n<p>二分查找，中间值比右边大则在右边，比右边小则在左边，相等则右边向左位移</p>\n<h3 id=\"矩阵中的路径\">矩阵中的路径</h3>\n<p>dfs</p>\n<h3 id=\"机器人的运动范围\">机器人的运动范围</h3>\n<p>bfs</p>\n<h3 id=\"剪绳子\">剪绳子</h3>\n<p>剪长度为3最优先，将绳子变成3a+b，b分情况讨论</p>\n<h3 id=\"剪绳子-ii\">剪绳子 II</h3>\n<p>同上+取余</p>\n<h3 id=\"二进制中1的个数\">二进制中1的个数</h3>\n<p>数与1进行&amp;操作，使用移位操作&gt;&gt;</p>\n<h3 id=\"数值的整数次方\">数值的整数次方</h3>\n<p>将n转为2进制 x^9 转为 x^(1<em>1)<em>x^(2</em>0)<em>x^(4</em>0)<em>x^(8</em>0)<br>\n二进制从尾向头遍历，遍历中x</em>=x，为1增乘到结果中</p>\n<h3 id=\"打印从1到最大的n位数\">打印从1到最大的n位数</h3>\n<p>直接打印1 - 10^n-1</p>\n<h3 id=\"删除链表的节点\">删除链表的节点</h3>\n<p>遍历链表节点，相等的话node.next=node.next.next</p>\n<h3 id=\"正则表达式匹配\">正则表达式匹配</h3>\n<h3 id=\"表示数值的字符串\">表示数值的字符串</h3>\n<p>有限状态自动机</p>\n<h3 id=\"调整数组顺序使奇数位于偶数前面\">调整数组顺序使奇数位于偶数前面</h3>\n<p>左右指针，左边遇到偶数和右边遇到奇数进行交换</p>\n<h3 id=\"链表中倒数第k个节点\">链表中倒数第k个节点</h3>\n<p>左右指针</p>\n<h3 id=\"反转链表\">反转链表</h3>\n<p>next = cur.next<br>\ncur.next = prev<br>\nprev = cur<br>\ncur = next</p>\n<h3 id=\"合并两个排序的链表\">合并两个排序的链表</h3>\n<p>新链表，迭代两个链表往里加</p>\n<h3 id=\"树的子结构\">树的子结构</h3>\n<p>先序遍历a，判断两个树是否全等</p>\n<h3 id=\"二叉树的镜像\">二叉树的镜像</h3>\n<p>left,right = func(right), func(left)</p>\n<h3 id=\"对称的二叉树\">对称的二叉树</h3>\n<p>func(l.left, r.right) and func(l.right, r.left)</p>\n<h3 id=\"顺时针打印矩阵\">顺时针打印矩阵</h3>\n<p>一次遍历一圈</p>\n<h3 id=\"包含min函数的栈\">包含min函数的栈</h3>\n<p>用另一个栈，栈顶存储最小值</p>\n<h3 id=\"栈的压入-弹出序列\">栈的压入、弹出序列</h3>\n<p>每压入一个数，都进行循环判断出栈</p>\n<h3 id=\"从上到下打印二叉树\">从上到下打印二叉树</h3>\n<p>bfs</p>\n<h3 id=\"从上到下打印二叉树-ii\">从上到下打印二叉树 II</h3>\n<p>bfs</p>\n<h3 id=\"从上到下打印二叉树-iii\">从上到下打印二叉树 III</h3>\n<p>bfs</p>\n<h3 id=\"二叉搜索树的后序遍历序列\">二叉搜索树的后序遍历序列</h3>\n<p>最后一个为根节点，小的在左侧，大的在右侧，由此递归</p>\n<h3 id=\"二叉树中和为某一值的路径\">二叉树中和为某一值的路径</h3>\n<p>先序遍历，记下路径和总和</p>\n<h3 id=\"复杂链表的复制\">复杂链表的复制</h3>\n<p>深拷贝</p>\n<h3 id=\"二叉搜索树与双向链表\">二叉搜索树与双向链表</h3>\n<h3 id=\"序列化二叉树\">序列化二叉树</h3>\n<h3 id=\"字符串的排列\">字符串的排列</h3>\n<p>dfs, 交换字符位置，剪枝</p>\n<h3 id=\"数组中出现次数超过一半的数字\">数组中出现次数超过一半的数字</h3>\n<p>相同数+1，不相同数-1，最后留下的数</p>\n<h3 id=\"最小的k个数\">最小的k个数</h3>\n<p>快排，左侧如果数量为k则返回，如果大于k则继续快排 // 小顶堆</p>\n<h3 id=\"数据流中的中位数\">数据流中的中位数</h3>\n<h3 id=\"连续子数组的最大和\">连续子数组的最大和</h3>\n<p>局部和，全局和</p>\n<h3 id=\"1~n整数中1出现的次数\">1～n整数中1出现的次数</h3>\n<p>0-h<em>d 1-h</em>d+l+1 2-h*d+d</p>\n<h3 id=\"数字序列中某一位的数字\">数字序列中某一位的数字</h3>\n<p>位数d<em>9，找到数字在的位的第n个，找到在哪个数10</em>*(d-1)+(n-1)//d，找到在这个数的第几个(n-1)%d</p>\n<h3 id=\"把数组排成最小的数\">把数组排成最小的数</h3>\n<p>基于xy &gt; yx 则 x&gt;y进行排序，连接</p>\n<h3 id=\"把数字翻译成字符串\">把数字翻译成字符串</h3>\n<p>dfs</p>\n<h3 id=\"礼物的最大价值\">礼物的最大价值</h3>\n<p>动态规划，左上开始，每格+=max(左，上)</p>\n<h3 id=\"最长不含重复字符的子字符串\">最长不含重复字符的子字符串</h3>\n<p>双指针+hash表，i=max(dic[s[j]], i) j=max(res, j-i)</p>\n<h3 id=\"丑数\">丑数</h3>\n<p>三个指针a,b,c指向0位1，分别乘2,3,5取min，与min相等的往后+1位</p>\n<h3 id=\"第一个只出现一次的字符\">第一个只出现一次的字符</h3>\n<p>哈希表，遍历两次字符</p>\n<h3 id=\"数组中的逆序对\">数组中的逆序对</h3>\n<h3 id=\"两个链表的第一个公共节点\">两个链表的第一个公共节点</h3>\n<p>双指针，一个链表到结尾了返回头，直到相交或一起为null</p>\n<h3 id=\"在排序数组中查找数字-i\">在排序数组中查找数字 I</h3>\n<p>二分找到数字，然后向左向右找</p>\n<h3 id=\"0~n-1中缺失的数字\">0～n-1中缺失的数字</h3>\n<p>二分看数字和index对不对应</p>\n<h3 id=\"二叉搜索树的第k大节点\">二叉搜索树的第k大节点</h3>\n<p>反向中序遍历，到底k个</p>\n<h3 id=\"二叉树的深度\">二叉树的深度</h3>\n<p>后序遍历，层序遍历</p>\n<h3 id=\"平衡二叉树\">平衡二叉树</h3>\n<p>先序遍历，根据深度判断</p>\n<h3 id=\"\"></h3>\n","excerpt":"","more":"<p>题库地址：<a href=\"https://leetcode-cn.com/problemset/lcof/\">https://leetcode-cn.com/problemset/lcof/</a></p>\n<h3>数组中重复的数字</h3>\n<p>放到set判断</p>\n<h3>二维数组中的查找</h3>\n<p>二位数组左下角作为开始点，target比当前大的话往有移动，target比当前小的话往上移动，只到不能移动或者找到target</p>\n<h3>替换空格</h3>\n<p>字符串遍历替换空格并拼接</p>\n<h3>从尾到头打印链表</h3>\n<p>链表从头到尾取出，放到栈中，再从栈中取出打印</p>\n<h3>重建二叉树</h3>\n<p>前序遍历节点为根节点，将中序遍历分为左子树和右子树，由此递归</p>\n<h3>用两个栈实现队列</h3>\n<p>先往栈1加元素，当遇到删除的时候，判断栈2存不存在元素，不存在则将栈1弹入到栈2，存在则删除栈2最上面元素。</p>\n<h3>斐波那契数列</h3>\n<p>a, b = b, a+b</p>\n<h3>青蛙跳台阶问题</h3>\n<p>一阶或两阶表示f(n) = f(n-1) + f(n-2)<br>\n同斐波那契</p>\n<h3>旋转数组的最小数字</h3>\n<p>二分查找，中间值比右边大则在右边，比右边小则在左边，相等则右边向左位移</p>\n<h3>矩阵中的路径</h3>\n<p>dfs</p>\n<h3>机器人的运动范围</h3>\n<p>bfs</p>\n<h3>剪绳子</h3>\n<p>剪长度为3最优先，将绳子变成3a+b，b分情况讨论</p>\n<h3>剪绳子 II</h3>\n<p>同上+取余</p>\n<h3>二进制中1的个数</h3>\n<p>数与1进行&amp;操作，使用移位操作&gt;&gt;</p>\n<h3>数值的整数次方</h3>\n<p>将n转为2进制 x^9 转为 x^(1<em>1)<em>x^(2</em>0)<em>x^(4</em>0)<em>x^(8</em>0)<br>\n二进制从尾向头遍历，遍历中x</em>=x，为1增乘到结果中</p>\n<h3>打印从1到最大的n位数</h3>\n<p>直接打印1 - 10^n-1</p>\n<h3>删除链表的节点</h3>\n<p>遍历链表节点，相等的话node.next=node.next.next</p>\n<h3>正则表达式匹配</h3>\n<h3>表示数值的字符串</h3>\n<p>有限状态自动机</p>\n<h3>调整数组顺序使奇数位于偶数前面</h3>\n<p>左右指针，左边遇到偶数和右边遇到奇数进行交换</p>\n<h3>链表中倒数第k个节点</h3>\n<p>左右指针</p>\n<h3>反转链表</h3>\n<p>next = cur.next<br>\ncur.next = prev<br>\nprev = cur<br>\ncur = next</p>\n<h3>合并两个排序的链表</h3>\n<p>新链表，迭代两个链表往里加</p>\n<h3>树的子结构</h3>\n<p>先序遍历a，判断两个树是否全等</p>\n<h3>二叉树的镜像</h3>\n<p>left,right = func(right), func(left)</p>\n<h3>对称的二叉树</h3>\n<p>func(l.left, r.right) and func(l.right, r.left)</p>\n<h3>顺时针打印矩阵</h3>\n<p>一次遍历一圈</p>\n<h3>包含min函数的栈</h3>\n<p>用另一个栈，栈顶存储最小值</p>\n<h3>栈的压入、弹出序列</h3>\n<p>每压入一个数，都进行循环判断出栈</p>\n<h3>从上到下打印二叉树</h3>\n<p>bfs</p>\n<h3>从上到下打印二叉树 II</h3>\n<p>bfs</p>\n<h3>从上到下打印二叉树 III</h3>\n<p>bfs</p>\n<h3>二叉搜索树的后序遍历序列</h3>\n<p>最后一个为根节点，小的在左侧，大的在右侧，由此递归</p>\n<h3>二叉树中和为某一值的路径</h3>\n<p>先序遍历，记下路径和总和</p>\n<h3>复杂链表的复制</h3>\n<p>深拷贝</p>\n<h3>二叉搜索树与双向链表</h3>\n<h3>序列化二叉树</h3>\n<h3>字符串的排列</h3>\n<p>dfs, 交换字符位置，剪枝</p>\n<h3>数组中出现次数超过一半的数字</h3>\n<p>相同数+1，不相同数-1，最后留下的数</p>\n<h3>最小的k个数</h3>\n<p>快排，左侧如果数量为k则返回，如果大于k则继续快排 // 小顶堆</p>\n<h3>数据流中的中位数</h3>\n<h3>连续子数组的最大和</h3>\n<p>局部和，全局和</p>\n<h3>1～n整数中1出现的次数</h3>\n<p>0-h<em>d 1-h</em>d+l+1 2-h*d+d</p>\n<h3>数字序列中某一位的数字</h3>\n<p>位数d<em>9，找到数字在的位的第n个，找到在哪个数10</em>*(d-1)+(n-1)//d，找到在这个数的第几个(n-1)%d</p>\n<h3>把数组排成最小的数</h3>\n<p>基于xy &gt; yx 则 x&gt;y进行排序，连接</p>\n<h3>把数字翻译成字符串</h3>\n<p>dfs</p>\n<h3>礼物的最大价值</h3>\n<p>动态规划，左上开始，每格+=max(左，上)</p>\n<h3>最长不含重复字符的子字符串</h3>\n<p>双指针+hash表，i=max(dic[s[j]], i) j=max(res, j-i)</p>\n<h3>丑数</h3>\n<p>三个指针a,b,c指向0位1，分别乘2,3,5取min，与min相等的往后+1位</p>\n<h3>第一个只出现一次的字符</h3>\n<p>哈希表，遍历两次字符</p>\n<h3>数组中的逆序对</h3>\n<h3>两个链表的第一个公共节点</h3>\n<p>双指针，一个链表到结尾了返回头，直到相交或一起为null</p>\n<h3>在排序数组中查找数字 I</h3>\n<p>二分找到数字，然后向左向右找</p>\n<h3>0～n-1中缺失的数字</h3>\n<p>二分看数字和index对不对应</p>\n<h3>二叉搜索树的第k大节点</h3>\n<p>反向中序遍历，到底k个</p>\n<h3>二叉树的深度</h3>\n<p>后序遍历，层序遍历</p>\n<h3>平衡二叉树</h3>\n<p>先序遍历，根据深度判断</p>\n<h3></h3>\n"},{"title":"原博客迁移与复原（2017-2018）","catalog":true,"date":"2021-01-21T02:31:43.000Z","_content":"\n## 前言\n\n找回了2017-2018年写的所有东西。[快速跳转](/archive/)\n\n是之前学生时代写的项目与代码，回想很多经历，也感慨万千。\n\n## SQL源文件 到 JSON\n\n最近在离职阶段，在整理文件时突然发现了原来博客的源文件（一直以为找不到了）\n\n之前博客是使用的wordpress，使用了一个服务器，搭了php环境，数据则存储在mysql。\n\n这次找回的是sql导出文件。\n\n然后本地起了一个docker的mysql服务，\n\n分析了下其中的sql，找到了wordpress文章对应的表xxx_posts\n\n然后使用navicat导出这个表成json的kv格式，便于后续处理。\n\n## 从 wordpress 到 hexo\n\n因为原来的wordpress使用的html来存储文章。\n\nhexo这边支持markdown格式，但同时对html标签也能兼容\n\n先写一个python脚本，读取一下上面的json文件，过滤非publish的文章。\n\n然后取出 post_date , post_title , post_content 信息。\n\n转为下面这样的markdown文件到 source/_posts 下\n```\n---\ntitle: 标题\ncatalog: true\ndate: 日期\ntags:\n---\n内容\n```\n\n## 处理hexo格式错误\n\n由于hexo将 { { ， } } ， { #作为关键字\n\n会导致hexo s启动时候报错\n\n因此在这两个关键字中间加个空格，就可以临时处理掉这个问题。\n\n","source":"_posts/2021/article_2_原博客大迁移2017-2018.md","raw":"---\ntitle: 原博客迁移与复原（2017-2018）\ncatalog: true\ndate: 2021-01-21 10:31:43\ntags:\n---\n\n## 前言\n\n找回了2017-2018年写的所有东西。[快速跳转](/archive/)\n\n是之前学生时代写的项目与代码，回想很多经历，也感慨万千。\n\n## SQL源文件 到 JSON\n\n最近在离职阶段，在整理文件时突然发现了原来博客的源文件（一直以为找不到了）\n\n之前博客是使用的wordpress，使用了一个服务器，搭了php环境，数据则存储在mysql。\n\n这次找回的是sql导出文件。\n\n然后本地起了一个docker的mysql服务，\n\n分析了下其中的sql，找到了wordpress文章对应的表xxx_posts\n\n然后使用navicat导出这个表成json的kv格式，便于后续处理。\n\n## 从 wordpress 到 hexo\n\n因为原来的wordpress使用的html来存储文章。\n\nhexo这边支持markdown格式，但同时对html标签也能兼容\n\n先写一个python脚本，读取一下上面的json文件，过滤非publish的文章。\n\n然后取出 post_date , post_title , post_content 信息。\n\n转为下面这样的markdown文件到 source/_posts 下\n```\n---\ntitle: 标题\ncatalog: true\ndate: 日期\ntags:\n---\n内容\n```\n\n## 处理hexo格式错误\n\n由于hexo将 { { ， } } ， { #作为关键字\n\n会导致hexo s启动时候报错\n\n因此在这两个关键字中间加个空格，就可以临时处理掉这个问题。\n\n","slug":"2021/article_2_原博客大迁移2017-2018","published":1,"updated":"2021-02-26T07:51:38.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76i004n0770rotkqewp","content":"<h2 id=\"前言\">前言</h2>\n<p>找回了2017-2018年写的所有东西。<a href=\"/archive/\">快速跳转</a></p>\n<p>是之前学生时代写的项目与代码，回想很多经历，也感慨万千。</p>\n<h2 id=\"sql源文件-到-json\">SQL源文件 到 JSON</h2>\n<p>最近在离职阶段，在整理文件时突然发现了原来博客的源文件（一直以为找不到了）</p>\n<p>之前博客是使用的wordpress，使用了一个服务器，搭了php环境，数据则存储在mysql。</p>\n<p>这次找回的是sql导出文件。</p>\n<p>然后本地起了一个docker的mysql服务，</p>\n<p>分析了下其中的sql，找到了wordpress文章对应的表xxx_posts</p>\n<p>然后使用navicat导出这个表成json的kv格式，便于后续处理。</p>\n<h2 id=\"从-wordpress-到-hexo\">从 wordpress 到 hexo</h2>\n<p>因为原来的wordpress使用的html来存储文章。</p>\n<p>hexo这边支持markdown格式，但同时对html标签也能兼容</p>\n<p>先写一个python脚本，读取一下上面的json文件，过滤非publish的文章。</p>\n<p>然后取出 post_date , post_title , post_content 信息。</p>\n<p>转为下面这样的markdown文件到 source/_posts 下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">catalog: true</span><br><span class=\"line\">date: 日期</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br><span class=\"line\">内容</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理hexo格式错误\">处理hexo格式错误</h2>\n<p>由于hexo将 { { ， } } ， { #作为关键字</p>\n<p>会导致hexo s启动时候报错</p>\n<p>因此在这两个关键字中间加个空格，就可以临时处理掉这个问题。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>找回了2017-2018年写的所有东西。<a href=\"/archive/\">快速跳转</a></p>\n<p>是之前学生时代写的项目与代码，回想很多经历，也感慨万千。</p>\n<h2>SQL源文件 到 JSON</h2>\n<p>最近在离职阶段，在整理文件时突然发现了原来博客的源文件（一直以为找不到了）</p>\n<p>之前博客是使用的wordpress，使用了一个服务器，搭了php环境，数据则存储在mysql。</p>\n<p>这次找回的是sql导出文件。</p>\n<p>然后本地起了一个docker的mysql服务，</p>\n<p>分析了下其中的sql，找到了wordpress文章对应的表xxx_posts</p>\n<p>然后使用navicat导出这个表成json的kv格式，便于后续处理。</p>\n<h2>从 wordpress 到 hexo</h2>\n<p>因为原来的wordpress使用的html来存储文章。</p>\n<p>hexo这边支持markdown格式，但同时对html标签也能兼容</p>\n<p>先写一个python脚本，读取一下上面的json文件，过滤非publish的文章。</p>\n<p>然后取出 post_date , post_title , post_content 信息。</p>\n<p>转为下面这样的markdown文件到 source/_posts 下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">catalog: true</span><br><span class=\"line\">date: 日期</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br><span class=\"line\">内容</span><br></pre></td></tr></table></figure>\n<h2>处理hexo格式错误</h2>\n<p>由于hexo将 { { ， } } ， { #作为关键字</p>\n<p>会导致hexo s启动时候报错</p>\n<p>因此在这两个关键字中间加个空格，就可以临时处理掉这个问题。</p>\n"},{"title":"2021总结","catalog":true,"music":"红豆","lock":true,"date":"2022-07-19T11:31:43.000Z","_content":"\n## 前言\n\n总结总会有的，不然不是白活了。\n\n21年我25周岁了，   \n初出茅庐的精神小伙也经历了一段时间社会的毒打，   \n已经逐渐变得圆润了，  \n有时候不知道这是好事还是坏事，  \n总觉得少了点意气风发，   \n少做了点什么该做的事。  \n\n## 年度大事件回顾\n\n- 【一月】拍了全家福，换了工作，从大搜车换到了乌鸫科技\n- 【三月】搬家，从翡翠城搬到了福鼎家园\n- 【四月】参加环西湖跑的活动\n- 【五月】出差福州，工作组织变动\n- 【六月】买了烤箱学习了下烘焙（已吃灰）\n- 【七月】学习游泳，已学会蛙泳\n- 【八月】订了比亚迪秦，最终22年一月全款到手\n- 【九月】看了八月十九的潮水\n- 【十月】爬五潮山，报了半马但取消了，衢山岛旅游\n\n## 碎碎说\n\n### 工作\n\n换工作是开年的事情，但其实这个时候也是已经船到桥头，前前后后也是准备了有小半年要换工作，一方面是薪资因素，另一方面是团队因素。\n\n跑路跑的很顺当，前公司没有卡我，下个公司也完美衔接，基本就是周五跑路，周一入职，也算是前公司最后的体面。\n\n在阿里乌鸫这边一年下来有好有坏吧。接触了很多业务，但都是边缘业务 ；认识了一拨人，但这波人又都走了；以平均3个月换一次业务线的频率进行着'跳槽'，到最后也就习惯了。\n\n工作有时就是做着做着容易上头，忘记了工作也只是生活的一部分，但现在看来占着很大一部分，甚至开始影响生活，影响思考。   \n\n影响生活的是工作的节奏，中间有段时间很奋进，像发动了的拖拉机突突的往前冲，也就是刚来那会儿的样子，后面就变成了间歇性努力，再后面就行尸走肉。\n\n影响思考的是工作带来的惰性，有时费了很大的脑力，有时费了很大的心力，但总能把自己掏空。\n\n我想一份工资高的工作确实会有他工资高的道理，不管是你做的项目的影响面还是复杂度，或是中间非常高的沟通成本，都会映射在你的压力上，最终得到或是脑力或是心力付出的本钱。\n\n\n### 生活\n\n租房的时候每年必会搬家，这点已经在我身上验证了，一方面是租约一般就一年，另一方面一个地方住久了也就会发现房子的坏处，而租房没必要将就。\n\n买了个烤箱，因为租房的地方原来也没有可放厨房的，原本是想做做蛋糕、烤个红薯啥的，但蛋糕没这么好做，做了也没这么好吃，在没有其它坚持动力的情况下妥妥的吃灰了。\n\n买了个投影，为了不踩坑就忍忍牙买了个贵的极米h3s，倒也是没辜负期待，很大程度改变了原来的蜗居生活的娱乐方式，到家开个投影打开直播，即便自己没有看这也得听听人说话，显得亮堂与热闹。现在能刷的电视剧、电影、综艺都用投影来看，尽早值回本钱。\n\n### 情感\n\n今年的情感还算丰富，期望还是很大的。\n\n有亲友介绍相亲的，有周边比较中意的，但都比较有缘无分，在想是自己的什么问题。\n\n一部分归结为自己找对象的标准指定不怎么明确，相亲的时候还是少点犹豫，毕竟犹豫就会败北。\n\n另外也要接受并不十全十美，或如外貌，学历，家乡，性格，距离等等。\n\n自己在杭州这边并不算优越，毕业从零开始打拼，到现在也还没房没车，没达到世俗眼中合格的标准。\n\n个人也是个人前看眼缘，背后看家世的世俗之人；看的好就觉配不上，看不好也觉吃亏了；\n\n想的太多，做得太少。\n\n还是希望多多走出去找找，想找回恋爱的感觉，而不是相亲的感觉。\n\n### 规划\n\n","source":"_posts/2022/article_1_2021总结.md","raw":"---\ntitle: 2021总结\ncatalog: true\nmusic: 红豆\nlock: true\ndate: 2022-07-19 19:31:43\ntags:\n    - 总结\n---\n\n## 前言\n\n总结总会有的，不然不是白活了。\n\n21年我25周岁了，   \n初出茅庐的精神小伙也经历了一段时间社会的毒打，   \n已经逐渐变得圆润了，  \n有时候不知道这是好事还是坏事，  \n总觉得少了点意气风发，   \n少做了点什么该做的事。  \n\n## 年度大事件回顾\n\n- 【一月】拍了全家福，换了工作，从大搜车换到了乌鸫科技\n- 【三月】搬家，从翡翠城搬到了福鼎家园\n- 【四月】参加环西湖跑的活动\n- 【五月】出差福州，工作组织变动\n- 【六月】买了烤箱学习了下烘焙（已吃灰）\n- 【七月】学习游泳，已学会蛙泳\n- 【八月】订了比亚迪秦，最终22年一月全款到手\n- 【九月】看了八月十九的潮水\n- 【十月】爬五潮山，报了半马但取消了，衢山岛旅游\n\n## 碎碎说\n\n### 工作\n\n换工作是开年的事情，但其实这个时候也是已经船到桥头，前前后后也是准备了有小半年要换工作，一方面是薪资因素，另一方面是团队因素。\n\n跑路跑的很顺当，前公司没有卡我，下个公司也完美衔接，基本就是周五跑路，周一入职，也算是前公司最后的体面。\n\n在阿里乌鸫这边一年下来有好有坏吧。接触了很多业务，但都是边缘业务 ；认识了一拨人，但这波人又都走了；以平均3个月换一次业务线的频率进行着'跳槽'，到最后也就习惯了。\n\n工作有时就是做着做着容易上头，忘记了工作也只是生活的一部分，但现在看来占着很大一部分，甚至开始影响生活，影响思考。   \n\n影响生活的是工作的节奏，中间有段时间很奋进，像发动了的拖拉机突突的往前冲，也就是刚来那会儿的样子，后面就变成了间歇性努力，再后面就行尸走肉。\n\n影响思考的是工作带来的惰性，有时费了很大的脑力，有时费了很大的心力，但总能把自己掏空。\n\n我想一份工资高的工作确实会有他工资高的道理，不管是你做的项目的影响面还是复杂度，或是中间非常高的沟通成本，都会映射在你的压力上，最终得到或是脑力或是心力付出的本钱。\n\n\n### 生活\n\n租房的时候每年必会搬家，这点已经在我身上验证了，一方面是租约一般就一年，另一方面一个地方住久了也就会发现房子的坏处，而租房没必要将就。\n\n买了个烤箱，因为租房的地方原来也没有可放厨房的，原本是想做做蛋糕、烤个红薯啥的，但蛋糕没这么好做，做了也没这么好吃，在没有其它坚持动力的情况下妥妥的吃灰了。\n\n买了个投影，为了不踩坑就忍忍牙买了个贵的极米h3s，倒也是没辜负期待，很大程度改变了原来的蜗居生活的娱乐方式，到家开个投影打开直播，即便自己没有看这也得听听人说话，显得亮堂与热闹。现在能刷的电视剧、电影、综艺都用投影来看，尽早值回本钱。\n\n### 情感\n\n今年的情感还算丰富，期望还是很大的。\n\n有亲友介绍相亲的，有周边比较中意的，但都比较有缘无分，在想是自己的什么问题。\n\n一部分归结为自己找对象的标准指定不怎么明确，相亲的时候还是少点犹豫，毕竟犹豫就会败北。\n\n另外也要接受并不十全十美，或如外貌，学历，家乡，性格，距离等等。\n\n自己在杭州这边并不算优越，毕业从零开始打拼，到现在也还没房没车，没达到世俗眼中合格的标准。\n\n个人也是个人前看眼缘，背后看家世的世俗之人；看的好就觉配不上，看不好也觉吃亏了；\n\n想的太多，做得太少。\n\n还是希望多多走出去找找，想找回恋爱的感觉，而不是相亲的感觉。\n\n### 规划\n\n","slug":"2022/article_1_2021总结","published":1,"updated":"2022-08-17T02:10:04.270Z","_id":"cl2fsh76j004q0770kygxxo6x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\">前言</h2>\n<p>总结总会有的，不然不是白活了。</p>\n<p>21年我25周岁了，<br>\n初出茅庐的精神小伙也经历了一段时间社会的毒打，<br>\n已经逐渐变得圆润了，<br>\n有时候不知道这是好事还是坏事，<br>\n总觉得少了点意气风发，<br>\n少做了点什么该做的事。</p>\n<h2 id=\"年度大事件回顾\">年度大事件回顾</h2>\n<ul>\n<li>【一月】拍了全家福，换了工作，从大搜车换到了乌鸫科技</li>\n<li>【三月】搬家，从翡翠城搬到了福鼎家园</li>\n<li>【四月】参加环西湖跑的活动</li>\n<li>【五月】出差福州，工作组织变动</li>\n<li>【六月】买了烤箱学习了下烘焙（已吃灰）</li>\n<li>【七月】学习游泳，已学会蛙泳</li>\n<li>【八月】订了比亚迪秦，最终22年一月全款到手</li>\n<li>【九月】看了八月十九的潮水</li>\n<li>【十月】爬五潮山，报了半马但取消了，衢山岛旅游</li>\n</ul>\n<h2 id=\"碎碎说\">碎碎说</h2>\n<h3 id=\"工作\">工作</h3>\n<p>换工作是开年的事情，但其实这个时候也是已经船到桥头，前前后后也是准备了有小半年要换工作，一方面是薪资因素，另一方面是团队因素。</p>\n<p>跑路跑的很顺当，前公司没有卡我，下个公司也完美衔接，基本就是周五跑路，周一入职，也算是前公司最后的体面。</p>\n<p>在阿里乌鸫这边一年下来有好有坏吧。接触了很多业务，但都是边缘业务 ；认识了一拨人，但这波人又都走了；以平均3个月换一次业务线的频率进行着’跳槽’，到最后也就习惯了。</p>\n<p>工作有时就是做着做着容易上头，忘记了工作也只是生活的一部分，但现在看来占着很大一部分，甚至开始影响生活，影响思考。</p>\n<p>影响生活的是工作的节奏，中间有段时间很奋进，像发动了的拖拉机突突的往前冲，也就是刚来那会儿的样子，后面就变成了间歇性努力，再后面就行尸走肉。</p>\n<p>影响思考的是工作带来的惰性，有时费了很大的脑力，有时费了很大的心力，但总能把自己掏空。</p>\n<p>我想一份工资高的工作确实会有他工资高的道理，不管是你做的项目的影响面还是复杂度，或是中间非常高的沟通成本，都会映射在你的压力上，最终得到或是脑力或是心力付出的本钱。</p>\n<h3 id=\"生活\">生活</h3>\n<p>租房的时候每年必会搬家，这点已经在我身上验证了，一方面是租约一般就一年，另一方面一个地方住久了也就会发现房子的坏处，而租房没必要将就。</p>\n<p>买了个烤箱，因为租房的地方原来也没有可放厨房的，原本是想做做蛋糕、烤个红薯啥的，但蛋糕没这么好做，做了也没这么好吃，在没有其它坚持动力的情况下妥妥的吃灰了。</p>\n<p>买了个投影，为了不踩坑就忍忍牙买了个贵的极米h3s，倒也是没辜负期待，很大程度改变了原来的蜗居生活的娱乐方式，到家开个投影打开直播，即便自己没有看这也得听听人说话，显得亮堂与热闹。现在能刷的电视剧、电影、综艺都用投影来看，尽早值回本钱。</p>\n<h3 id=\"情感\">情感</h3>\n<p>今年的情感还算丰富，期望还是很大的。</p>\n<p>有亲友介绍相亲的，有周边比较中意的，但都比较有缘无分，在想是自己的什么问题。</p>\n<p>一部分归结为自己找对象的标准指定不怎么明确，相亲的时候还是少点犹豫，毕竟犹豫就会败北。</p>\n<p>另外也要接受并不十全十美，或如外貌，学历，家乡，性格，距离等等。</p>\n<p>自己在杭州这边并不算优越，毕业从零开始打拼，到现在也还没房没车，没达到世俗眼中合格的标准。</p>\n<p>个人也是个人前看眼缘，背后看家世的世俗之人；看的好就觉配不上，看不好也觉吃亏了；</p>\n<p>想的太多，做得太少。</p>\n<p>还是希望多多走出去找找，想找回恋爱的感觉，而不是相亲的感觉。</p>\n<h3 id=\"规划\">规划</h3>\n","excerpt":"","more":"<h2>前言</h2>\n<p>总结总会有的，不然不是白活了。</p>\n<p>21年我25周岁了，<br>\n初出茅庐的精神小伙也经历了一段时间社会的毒打，<br>\n已经逐渐变得圆润了，<br>\n有时候不知道这是好事还是坏事，<br>\n总觉得少了点意气风发，<br>\n少做了点什么该做的事。</p>\n<h2>年度大事件回顾</h2>\n<ul>\n<li>【一月】拍了全家福，换了工作，从大搜车换到了乌鸫科技</li>\n<li>【三月】搬家，从翡翠城搬到了福鼎家园</li>\n<li>【四月】参加环西湖跑的活动</li>\n<li>【五月】出差福州，工作组织变动</li>\n<li>【六月】买了烤箱学习了下烘焙（已吃灰）</li>\n<li>【七月】学习游泳，已学会蛙泳</li>\n<li>【八月】订了比亚迪秦，最终22年一月全款到手</li>\n<li>【九月】看了八月十九的潮水</li>\n<li>【十月】爬五潮山，报了半马但取消了，衢山岛旅游</li>\n</ul>\n<h2>碎碎说</h2>\n<h3>工作</h3>\n<p>换工作是开年的事情，但其实这个时候也是已经船到桥头，前前后后也是准备了有小半年要换工作，一方面是薪资因素，另一方面是团队因素。</p>\n<p>跑路跑的很顺当，前公司没有卡我，下个公司也完美衔接，基本就是周五跑路，周一入职，也算是前公司最后的体面。</p>\n<p>在阿里乌鸫这边一年下来有好有坏吧。接触了很多业务，但都是边缘业务 ；认识了一拨人，但这波人又都走了；以平均3个月换一次业务线的频率进行着’跳槽’，到最后也就习惯了。</p>\n<p>工作有时就是做着做着容易上头，忘记了工作也只是生活的一部分，但现在看来占着很大一部分，甚至开始影响生活，影响思考。</p>\n<p>影响生活的是工作的节奏，中间有段时间很奋进，像发动了的拖拉机突突的往前冲，也就是刚来那会儿的样子，后面就变成了间歇性努力，再后面就行尸走肉。</p>\n<p>影响思考的是工作带来的惰性，有时费了很大的脑力，有时费了很大的心力，但总能把自己掏空。</p>\n<p>我想一份工资高的工作确实会有他工资高的道理，不管是你做的项目的影响面还是复杂度，或是中间非常高的沟通成本，都会映射在你的压力上，最终得到或是脑力或是心力付出的本钱。</p>\n<h3>生活</h3>\n<p>租房的时候每年必会搬家，这点已经在我身上验证了，一方面是租约一般就一年，另一方面一个地方住久了也就会发现房子的坏处，而租房没必要将就。</p>\n<p>买了个烤箱，因为租房的地方原来也没有可放厨房的，原本是想做做蛋糕、烤个红薯啥的，但蛋糕没这么好做，做了也没这么好吃，在没有其它坚持动力的情况下妥妥的吃灰了。</p>\n<p>买了个投影，为了不踩坑就忍忍牙买了个贵的极米h3s，倒也是没辜负期待，很大程度改变了原来的蜗居生活的娱乐方式，到家开个投影打开直播，即便自己没有看这也得听听人说话，显得亮堂与热闹。现在能刷的电视剧、电影、综艺都用投影来看，尽早值回本钱。</p>\n<h3>情感</h3>\n<p>今年的情感还算丰富，期望还是很大的。</p>\n<p>有亲友介绍相亲的，有周边比较中意的，但都比较有缘无分，在想是自己的什么问题。</p>\n<p>一部分归结为自己找对象的标准指定不怎么明确，相亲的时候还是少点犹豫，毕竟犹豫就会败北。</p>\n<p>另外也要接受并不十全十美，或如外貌，学历，家乡，性格，距离等等。</p>\n<p>自己在杭州这边并不算优越，毕业从零开始打拼，到现在也还没房没车，没达到世俗眼中合格的标准。</p>\n<p>个人也是个人前看眼缘，背后看家世的世俗之人；看的好就觉配不上，看不好也觉吃亏了；</p>\n<p>想的太多，做得太少。</p>\n<p>还是希望多多走出去找找，想找回恋爱的感觉，而不是相亲的感觉。</p>\n<h3>规划</h3>\n"},{"article":false,"book":true,"bookcover":"/img/book/whahshr.jpg","title":"《为何爱会伤人》 -- 武志红","date":"2021-06-07T03:09:25.000Z","header-img":"/img/article_header/header.jpg","_content":"\n这只是测试一下功能\n","source":"_posts/book/book_1_《为何爱会伤人》.md","raw":"---\narticle: false\nbook: true\nbookcover: /img/book/whahshr.jpg\ntitle: \"《为何爱会伤人》 -- 武志红\"\ndate: 2021-06-07 11:09:25\nheader-img: \"/img/article_header/header.jpg\"\n---\n\n这只是测试一下功能\n","slug":"book/book_1_《为何爱会伤人》","published":1,"updated":"2021-06-07T12:35:24.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76k004s0770db2wvgoe","content":"<p>这只是测试一下功能</p>\n","excerpt":"","more":"<p>这只是测试一下功能</p>\n"},{"article":false,"title":"生活篇","catalog":true,"date":"1020-08-23T11:26:43.000Z","subtitle":"生活总是很精彩","header-img":null,"_content":"\n## 换房子\n- 2021-03-13\n\n搬家找了两个大学室友一起，叫了辆货拉拉，中间出了点岔子是搬家还得物业开出门单，特地有跑了一趟还好马上解决了。  \n从翡翠城绿萝苑换到了福鼎家园，虽然也才五公里，上班却也方便了许多，走走路10分钟就可以到达，也不用挤公交。  \n现在的单间比之前的大点，也带独卫，虽然贵了三百，也算是换工作后自己的一个福利。  \n这边离地铁会近点，最近的出门和回家也会方便许多，之前一直得坐公交。\n在杭州也是各地住过：江干区下沙，滨江浦沿，余杭仓前，余杭闲林，余杭五常。  \n每个都是一段回忆~\n\n\n## 换工作\n- 2021-01-25\n\n这次进的是阿里的子公司-乌鸫科技，做的事业务开发供应链方向，办公也在阿里巴巴西溪园区。面试大概经历了近一个月，从20年12月到1月，也是比较艰难还好是骑驴找马，不然容易心态不行。搜车这边挽留基本也没啥用，我这人还是认定了事情不太容易改变，特别是这种影响人生的大事，肯定经过一段时间的思想挣扎和艰难决定。原来那边主要还是薪资待遇不太行，个人也没啥发展空间。换了至少目前薪资是我认可的，发展的话不能说一定能达到预期，有两个顾虑，一个是从大数据平台开发转到了业务开发，另一个是这边并不是阿里集团，可能受限于子公司的发展，所以还是看着办，还是有一定试错成本在的。\n\n\n## 找工作123\n- 2020-09-20\n\n最近来说也面试了好几家，稍微一些感悟，两家一面挂的，感受到比较薄弱的环节是（网络，算法，分布式，并发，容器，框架），还有一家小公司直接去公司面了就给过的，这边其实还是问到工作中用到的一些浅显实用的部分，最后因为薪资问题被我给拒绝了，也是早有心理的预期，到不了也没什么谈的。总的来说感觉也是需要定位好自己，在转java后经过快一年的时间，目前来说这些或基础或深入的知识在实际开发中难接触到，要学习也就只能看书看资料。对充实自己来说是好的，但也得经历一定的时间。就目前的自己来说要找到一个提高自己收入的工作来说可能需要再去小一点的公司碰碰运气，可能目前的我就是适合一个灵活变动语言框架，前后端切换的团队。手头工作这边调薪的话也得是年末，现在的九到十月可以还是继续投入一些经历在面试中，继续加深自己的认知和水准吧。\n\n\n## 生活篇必读镇楼 \n- 2020-08-23\n```\n本栏主要用于分享人生大小事和体悟\n人生总是在不断放下，但也要好好记录\n1. 突发奇想\n2. 吃喝玩乐\n3. 生活变动\n4. 人生节点\n5. 朝花朝拾\n```","source":"_posts/life/life_1_生活篇.md","raw":"---\narticle: false\ntitle: 生活篇\ncatalog: true\ndate: 1020-08-23 19:31:43\nsubtitle: 生活总是很精彩\nheader-img:\n---\n\n## 换房子\n- 2021-03-13\n\n搬家找了两个大学室友一起，叫了辆货拉拉，中间出了点岔子是搬家还得物业开出门单，特地有跑了一趟还好马上解决了。  \n从翡翠城绿萝苑换到了福鼎家园，虽然也才五公里，上班却也方便了许多，走走路10分钟就可以到达，也不用挤公交。  \n现在的单间比之前的大点，也带独卫，虽然贵了三百，也算是换工作后自己的一个福利。  \n这边离地铁会近点，最近的出门和回家也会方便许多，之前一直得坐公交。\n在杭州也是各地住过：江干区下沙，滨江浦沿，余杭仓前，余杭闲林，余杭五常。  \n每个都是一段回忆~\n\n\n## 换工作\n- 2021-01-25\n\n这次进的是阿里的子公司-乌鸫科技，做的事业务开发供应链方向，办公也在阿里巴巴西溪园区。面试大概经历了近一个月，从20年12月到1月，也是比较艰难还好是骑驴找马，不然容易心态不行。搜车这边挽留基本也没啥用，我这人还是认定了事情不太容易改变，特别是这种影响人生的大事，肯定经过一段时间的思想挣扎和艰难决定。原来那边主要还是薪资待遇不太行，个人也没啥发展空间。换了至少目前薪资是我认可的，发展的话不能说一定能达到预期，有两个顾虑，一个是从大数据平台开发转到了业务开发，另一个是这边并不是阿里集团，可能受限于子公司的发展，所以还是看着办，还是有一定试错成本在的。\n\n\n## 找工作123\n- 2020-09-20\n\n最近来说也面试了好几家，稍微一些感悟，两家一面挂的，感受到比较薄弱的环节是（网络，算法，分布式，并发，容器，框架），还有一家小公司直接去公司面了就给过的，这边其实还是问到工作中用到的一些浅显实用的部分，最后因为薪资问题被我给拒绝了，也是早有心理的预期，到不了也没什么谈的。总的来说感觉也是需要定位好自己，在转java后经过快一年的时间，目前来说这些或基础或深入的知识在实际开发中难接触到，要学习也就只能看书看资料。对充实自己来说是好的，但也得经历一定的时间。就目前的自己来说要找到一个提高自己收入的工作来说可能需要再去小一点的公司碰碰运气，可能目前的我就是适合一个灵活变动语言框架，前后端切换的团队。手头工作这边调薪的话也得是年末，现在的九到十月可以还是继续投入一些经历在面试中，继续加深自己的认知和水准吧。\n\n\n## 生活篇必读镇楼 \n- 2020-08-23\n```\n本栏主要用于分享人生大小事和体悟\n人生总是在不断放下，但也要好好记录\n1. 突发奇想\n2. 吃喝玩乐\n3. 生活变动\n4. 人生节点\n5. 朝花朝拾\n```","slug":"life/life_1_生活篇","published":1,"updated":"2021-03-15T12:54:12.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76l004v07709b49cyeu","content":"<h2 id=\"换房子\">换房子</h2>\n<ul>\n<li>2021-03-13</li>\n</ul>\n<p>搬家找了两个大学室友一起，叫了辆货拉拉，中间出了点岔子是搬家还得物业开出门单，特地有跑了一趟还好马上解决了。<br>\n从翡翠城绿萝苑换到了福鼎家园，虽然也才五公里，上班却也方便了许多，走走路10分钟就可以到达，也不用挤公交。<br>\n现在的单间比之前的大点，也带独卫，虽然贵了三百，也算是换工作后自己的一个福利。<br>\n这边离地铁会近点，最近的出门和回家也会方便许多，之前一直得坐公交。<br>\n在杭州也是各地住过：江干区下沙，滨江浦沿，余杭仓前，余杭闲林，余杭五常。<br>\n每个都是一段回忆~</p>\n<h2 id=\"换工作\">换工作</h2>\n<ul>\n<li>2021-01-25</li>\n</ul>\n<p>这次进的是阿里的子公司-乌鸫科技，做的事业务开发供应链方向，办公也在阿里巴巴西溪园区。面试大概经历了近一个月，从20年12月到1月，也是比较艰难还好是骑驴找马，不然容易心态不行。搜车这边挽留基本也没啥用，我这人还是认定了事情不太容易改变，特别是这种影响人生的大事，肯定经过一段时间的思想挣扎和艰难决定。原来那边主要还是薪资待遇不太行，个人也没啥发展空间。换了至少目前薪资是我认可的，发展的话不能说一定能达到预期，有两个顾虑，一个是从大数据平台开发转到了业务开发，另一个是这边并不是阿里集团，可能受限于子公司的发展，所以还是看着办，还是有一定试错成本在的。</p>\n<h2 id=\"找工作123\">找工作123</h2>\n<ul>\n<li>2020-09-20</li>\n</ul>\n<p>最近来说也面试了好几家，稍微一些感悟，两家一面挂的，感受到比较薄弱的环节是（网络，算法，分布式，并发，容器，框架），还有一家小公司直接去公司面了就给过的，这边其实还是问到工作中用到的一些浅显实用的部分，最后因为薪资问题被我给拒绝了，也是早有心理的预期，到不了也没什么谈的。总的来说感觉也是需要定位好自己，在转java后经过快一年的时间，目前来说这些或基础或深入的知识在实际开发中难接触到，要学习也就只能看书看资料。对充实自己来说是好的，但也得经历一定的时间。就目前的自己来说要找到一个提高自己收入的工作来说可能需要再去小一点的公司碰碰运气，可能目前的我就是适合一个灵活变动语言框架，前后端切换的团队。手头工作这边调薪的话也得是年末，现在的九到十月可以还是继续投入一些经历在面试中，继续加深自己的认知和水准吧。</p>\n<h2 id=\"生活篇必读镇楼\">生活篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本栏主要用于分享人生大小事和体悟</span><br><span class=\"line\">人生总是在不断放下，但也要好好记录</span><br><span class=\"line\">1. 突发奇想</span><br><span class=\"line\">2. 吃喝玩乐</span><br><span class=\"line\">3. 生活变动</span><br><span class=\"line\">4. 人生节点</span><br><span class=\"line\">5. 朝花朝拾</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2>换房子</h2>\n<ul>\n<li>2021-03-13</li>\n</ul>\n<p>搬家找了两个大学室友一起，叫了辆货拉拉，中间出了点岔子是搬家还得物业开出门单，特地有跑了一趟还好马上解决了。<br>\n从翡翠城绿萝苑换到了福鼎家园，虽然也才五公里，上班却也方便了许多，走走路10分钟就可以到达，也不用挤公交。<br>\n现在的单间比之前的大点，也带独卫，虽然贵了三百，也算是换工作后自己的一个福利。<br>\n这边离地铁会近点，最近的出门和回家也会方便许多，之前一直得坐公交。<br>\n在杭州也是各地住过：江干区下沙，滨江浦沿，余杭仓前，余杭闲林，余杭五常。<br>\n每个都是一段回忆~</p>\n<h2>换工作</h2>\n<ul>\n<li>2021-01-25</li>\n</ul>\n<p>这次进的是阿里的子公司-乌鸫科技，做的事业务开发供应链方向，办公也在阿里巴巴西溪园区。面试大概经历了近一个月，从20年12月到1月，也是比较艰难还好是骑驴找马，不然容易心态不行。搜车这边挽留基本也没啥用，我这人还是认定了事情不太容易改变，特别是这种影响人生的大事，肯定经过一段时间的思想挣扎和艰难决定。原来那边主要还是薪资待遇不太行，个人也没啥发展空间。换了至少目前薪资是我认可的，发展的话不能说一定能达到预期，有两个顾虑，一个是从大数据平台开发转到了业务开发，另一个是这边并不是阿里集团，可能受限于子公司的发展，所以还是看着办，还是有一定试错成本在的。</p>\n<h2>找工作123</h2>\n<ul>\n<li>2020-09-20</li>\n</ul>\n<p>最近来说也面试了好几家，稍微一些感悟，两家一面挂的，感受到比较薄弱的环节是（网络，算法，分布式，并发，容器，框架），还有一家小公司直接去公司面了就给过的，这边其实还是问到工作中用到的一些浅显实用的部分，最后因为薪资问题被我给拒绝了，也是早有心理的预期，到不了也没什么谈的。总的来说感觉也是需要定位好自己，在转java后经过快一年的时间，目前来说这些或基础或深入的知识在实际开发中难接触到，要学习也就只能看书看资料。对充实自己来说是好的，但也得经历一定的时间。就目前的自己来说要找到一个提高自己收入的工作来说可能需要再去小一点的公司碰碰运气，可能目前的我就是适合一个灵活变动语言框架，前后端切换的团队。手头工作这边调薪的话也得是年末，现在的九到十月可以还是继续投入一些经历在面试中，继续加深自己的认知和水准吧。</p>\n<h2>生活篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本栏主要用于分享人生大小事和体悟</span><br><span class=\"line\">人生总是在不断放下，但也要好好记录</span><br><span class=\"line\">1. 突发奇想</span><br><span class=\"line\">2. 吃喝玩乐</span><br><span class=\"line\">3. 生活变动</span><br><span class=\"line\">4. 人生节点</span><br><span class=\"line\">5. 朝花朝拾</span><br></pre></td></tr></table></figure>"},{"title":"Web Robot使用教程(终极版)","catalog":true,"date":"2021-01-22T02:31:43.000Z","_content":"\n# 前言\n\n本文为[Web Robot](https://github.com/webgjc/web_robot)插件使用教程终极版\n\n融合所有前面版本迭代的功能，包括有用的没用的\n\n当前文档教程的Web Robot版本 V2.2.0\n\n![image](/img/mypost/2021/1-1.jpg)\n\n# 教程\n\n## 下载与安装\n\n因为一些权限因素，本插件目前没有上到chrome商店，需通过源码安装\n\n### 下载\n\n首先到github的仓库 [https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n将仓库克隆到本地\n\n> git clone https://github.com/webgjc/web_robot.git\n\n### 安装\n\n打开chrome浏览器，访问 [chrome://extensions/](chrome://extensions/)\n\n点击开启开发者模式（右上角）\n\n加载已解压的扩展程序，选择本地的仓库代码，即可完成。\n\n完成后可关闭开发者模式。\n\n## 事务相关操作\n\n事务在Web Robot中表示一系列浏览器操作的集合。\n\n如自动化表单填写，自动化签到，自动化去广告。\n\n配置事务/导入事务是使用插件的第一步。\n\n### 导入事务\n\n![image](/img/mypost/2021/1-2.jpg)\n\n如果有别人已经配置好的并导出的成熟事务，  \n或者想直接体验一下github上的演示用例[Web Robot演示用例](https://github.com/webgjc/web_robot#%E6%BC%94%E7%A4%BA%E7%94%A8%E4%BE%8B)\n\n可以直接导入即可体验浏览器自动化的乐趣。\n\n点开插件面板，点击 导入事务 \n\n复制如上面演示用例中的一长json字符串。点击确认即可。\n\n### 新增事务\n\n![image](/img/mypost/2021/1-3.jpg)\n\n如果要自己进行自定义的配置，首先第一步是新增事务。\n\n点击 新增事务，填写事务的名称（不能有重复）\n\n选择事务的类型\n\n- 流程事务：通过页面元素定义事件，支持运行，受控运行，添加看板等；\n- 并发爬虫事务：页面级的爬虫，支持并发，定时运行，数据添加看板等；\n- 源码事务：源码注入，支持自定义代码，自定义注入地址；\n- 受控事务：键盘鼠标的录制，支持录制，回放；\n\n选择好后 点击确认 即创建了一个空的事务。\n\n### 重命名/上移/删除\n\n![image](/img/mypost/2021/1-4.jpg)\n\n一些一般性的操作\n\n- 重命名已创建的事务\n\n点击事务右边操作列表中的 重命名\n\n输入新的名字 确认即可。\n\n- 移动事务在列表中的上下位置\n\n点击上移，即可与上面一个事务交换位置\n\n- 删除事务\n\n点击删除，二次确认后即可删除。(删除不可复原)\n\n### 导出事务\n\n如果想要讲一个已经制作完成的事务分享给别人\n\n点击导出，出现导出成功。\n\n表示已经复制到 **剪切板**，再其他地方直接粘贴即可。\n\n## 本地客户端相关，启动与使用\n\n**重点：本地客户端只影响部分插件功能的使用。**  \n**大部分情况下不需要用到！详情看[受控概念](#受控概念)，[爬虫本地相关](#爬虫本地相关)**\n\n为了实现浏览器插件能与本地进行**数据交互**，  \n同时在一些插件无法实现的功能（如控制键盘鼠标）上通过本地python来实现。\n\n这边写了一个简单的**python web**服务，插件通过 **HTTP** 访问接口来交互。\n\n### 启动与使用\n\n![image](/img/mypost/2021/1-5.jpg)\n\n首先机器上需要有python3的环境，或者创建一个python3的虚拟环境。\n\n到插件仓库的跟目录\n\n有一个依赖库的文件在 **py/requirements.txt**\n\n下载依赖\n> pip install -r py/requirements.txt\n\n启动web服务\n> bash main.sh start\n\n或\n> python py/web.py\n\n**注**：main.sh中还有一些可配置操作，可用下面命令查看\n> bash main.sh\n\n### 受控概念\n\n插件中一直穿插一个名词受控，包括受控事务，流程事务的受控运行。\n\n这边受控表示对鼠标键盘进行控制。\n\n- 受控事务：录制鼠标键盘操作，控制鼠标键盘还原操作\n- 流程事务受控运行：流程事务是由浏览器元素定义的事件，通过控制鼠标键盘来还原事件（一般运行是通过js还原事件）\n\n由于Chrome插件本身不能实现这个操作，\n\n因此这边都由本地python来实现控制鼠标键盘。\n\n由此受控相关的都会用到与本地进行数据交互。\n\n**注**：Mac中控制键鼠需要进行 **安全与隐私** 的配置  \n如用iTerm开的web服务，则需要配置 **隐私 - 辅助功能 - 支持iTerm控制您的电脑**\n\n### 爬虫本地相关\n\n具体爬虫信息可到 [并发爬虫事务](#并发爬虫事务) 查看\n\n这边由于页面爬虫在完成数据获取之后需要将数据发出去。\n\n这边是在web服务中开了一个数据接收的接口，\n\n插件爬到的数据按一定的切割数量分批次进行接口发送。\n\nweb服务受到数据后，存储到本地文件，并进行整合。\n\n**数据存储于 /py/crawler/**\n\n## 流程事务\n\n![image](/img/mypost/2021/1-6.jpg)\n\n创建一个流程事务后，点击事务的名称即进入事务的详情配置页\n\n流程事务由 **多个浏览器事件** 组成。\n\n每个事件可以是如开关某页面，点击某元素，输入某值。\n\n### 事件详情\n\n![image](/img/mypost/2021/1-7.jpg)\n\n一个事件包含 \n- 元素：唯一选择器；\n- 操作：点击，设值，开关页面；\n- 等待时间：与前一个事件中间间隔的时间；\n- dom检查：由于一些元素是异步/延时创建的，开启dom检查则在运行前可以保证这个元素一定存在，否则自旋。\n- 其他一些不固定选项(一些特殊事件有)\n\n#### 事件操作说明\nclick：点击某个元素\n\nvalue：可以在一般浏览器输入框中设值（输入需要设值的值）  \n如果你需要在运行前才设值这边的输入值，可以将这边设值为${value}，则在点击运行会弹出让你输入value的值\n\nmouseover：鼠标移动到上面事件\n\nrefresh：刷新当前页面\n\npagejump：当前页面跳转，需要设值页面url\n\nnewpage：打开一个新页面，需要设值页面url  \n**注**：第一个事件如果是新开页面且选择在后台打开，这样整个事务都会在后台运行\n\ngetvalue：取页面元素的文本，取到后保留在运行参数中，可用来后续设值，也可作为爬虫的数据。（需要设值一个取到后保存的key）\n（如取到第一个页面的元素设为 title(key)，然后打卡第二个页面，设值输入框为title值，则会用刚才设值的title）\n\ngetcustomvalue：取document结果，或js函数结果，用处同上。（需要设值两个，一个作为取值key，一个为表达式）  \n如取document.title可以取到页面的标题。\n\nclosepage：关闭当前页面\n\nonlyshow：看板特殊事件操作，将当前页面只保留选择的元素，其他所有都隐藏。\n\nsendmessgae: 发送消息，默认为发送系统消息，也可以走浏览器alert消息。\n\n### 确定唯一元素\n\n定义页面事件的第一步都是确定一个页面元素。\n\n这边有多种方法，通用的为 **一般选择器 + 第n个** 来表述唯一元素(如 body&0)\n\n#### 添加事件\n\n![image](/img/mypost/2021/1-8.jpg)\n\n点击添加事件，进入一般选择器配置页，可配置 **标签选择器** 或 **自由选择器**\n\n- 标签选择器 \n选择一个标签：如body，div\n\n然后会出现一个列表，表示页面中有多少个这样的标签。（div&0，div&1）\n\n鼠标移动上去后，页面会相应定位到这个元素上，并出现红色蒙版。\n\n点击确认一个想要的元素。\n\n![image](/img/mypost/2021/1-10.jpg)\n\n- 自由选择器\n选择了自由选择器，会出现一个输入框，可以自己输入想要的选择器，\n\n回车之后也会出现一个相同的列表，(选择器&0，选择器&1)\n\n鼠标移动和点击确认同上。\n\n#### 页面录制（不推荐）\n\n点击页面录制，这边暂时只支持单页面中的 **英文设值** 和 **点击事件**的录制。\n\n录制完成后，可以点击完成录制\n\n事件列表页会出现已经录制的所有事件。\n\n#### 页面添加事件（推荐使用）\n\n![image](/img/mypost/2021/1-9.jpg)\n\n打开一个页面，点击页面添加事件。\n\n然后在鼠标移回页面可以看到在移动到每个元素上时，都会出现一个粉色边框。\n\n单机之后，会出现一个列表，表示当前最子元素，和其父元素，一直到跟元素。\n\n点击选择一个想要的元素选择器\n\n进入事件配置页，进行事件的配置。\n\n### 运行说明\n\n![image](/img/mypost/2021/1-11.jpg)\n\n流程事务包含：运行，定时运行，受控运行，轮播 四种模式\n\n#### 运行\n\n采用后台运行模式，使用js和chrome接口还原事件。\n\n可直接点击运行，无其他依赖。\n\n#### 定时运行\n\n![image](/img/mypost/2021/1-12.jpg)\n\n配置模式分两种：每日hh:mm，每隔n分钟\n\n如写 15:00 表示每日15点运行一次。\n\n写 5m 则表示每5分钟运行一次。\n\n运行按当天开始算。\n\n运行具体会有一些时间上的出入。\n\n运行可以配置失败重试。（失败重试有多次运行的风险）\n\n#### 受控运行\n\n采用控制本地鼠标键盘还原事件。（事件操作为 点击，设值）\n\n需依赖本地web服务开启。\n\n#### 轮播\n\n运行完一次后直接进行下一次运行。\n\n## 并发爬虫事务\n\n![image](/img/mypost/2021/1-13.jpg)\n\n顾名思义这个事务要做的事情就是页面级的爬虫，适合爬一些小批量数据，同时可以突破一些反扒限制(因为就和人打开没啥区别)\n\n这边对于爬虫配置的抽象为：\n\n- 一批需要爬的地址：可以自己填，批量填，或接口获取；\n- 每个页面中需要爬的信息配置：配置一个流程事务，getvalue等的作为爬取数据事件；\n- 并发量配置：这边使用iframe实现；\n- 是否后台运行配置：后台运行则是新开chrome，并最小化的运行；\n- 发送数据/保存数据：可发送到本地接收，或就存在插件信息存储中；\n\n### 配置爬虫\n\n点击爬虫事务的名称，进入爬虫配置页\n\n#### url配置\n\n两种配置方式\n\n可自行配置地址，一行一个，  \n也可直接配置成批量模式，如下的地址，则表示pn=0 到 pn=10的是个页面  \nhttps://www.baidu.com/s?wd=test&pn={0-10}\n\n可从接口获取\n在本地web服务这边写了一个demo。具体外部接口获取地址需要自行实现一个接口。\n\n接口调用时返回地址，如果没有了则返回空即可。\n\n兼容场景如地址上带有一些时间戳，加密字符等特殊符号\n\n#### 爬取数据配置\n\n类似于配置流程事务，先通过一个方式选择一个唯一元素选择器。\n\n然后配置事件操作，延时，dom检查等。\n\n这边一般用getvalue，getcustomvalue事件操作。\n\n（一般可以设置延时为0，开启dom检查）\n\n#### 其他\n\n后台运行：不开启使用当前浏览器开一个新tab来爬取数据，\n开启后使用新开一个chrome，并最小化来运行，并在结束后关闭。\n\n定时运行：同上流程事务定时运行\n\n## \b源码事务\n\n![image](/img/mypost/2021/1-14.jpg)\n\n提供源码注入的基本实现。\n\n注：代码中可以获取document，但不能获取原页面中的js变量。\n\n另附可以自定义在哪些页面注入。\n\n同时也支持运行，定时运行，开启注入。\n\n### 配置事务\n\n点击事务名称进入配置页，\n\n首先选择注入的 **匹配地址**，默认为全地址。\n\n然后**写要注入的代码**，可以使用jquery。\n\n保存后，**开启注入**则是生效。\n\n## 受控事务\n\n![image](/img/mypost/2021/1-15.jpg)\n\n实现了鼠标键盘的录制和还原。\n\n由本地python实现，插件提供数据交互。\n\n### 配置事务\n\n点击事务名称，进入配置页\n\n首先配置要打开的网页。\n\n点击 **录制操作**，进入录制\n\n录制完，键盘按esc结束录制\n\n点击 **受控运行** 则是回放刚刚的录制\n\n## 我的看板\n\n![image](/img/mypost/2021/1-16.jpg)\n\n我的看板这边默认覆盖使用的是浏览器的新tab页。  \n\n当然也可以主动关闭，使用命令\n> bash main.sh close_dashboard\n\n要在开启的话\n> bash main.sh close_dashboard\n\n目前看板包含两种内容：\n- 单独一个页面元素的展示；\n- 爬虫数据表格的展示；\n\n添加页面元素到看板，实际使用的是流程事务，  \n条件则为 事务的第一个事件为 **当前页跳转**， 最后一个事件为 **元素唯一展示**\n\n符合条件的在主页会出现添加到看板选项。\n\n并发爬虫事务也有一个操作是添加看板，点击则可以将爬到的数据到看板以表格展示。\n\n### 看板操作与排版\n\n![image](/img/mypost/2021/1-18.jpg)\n\n将鼠标移动到看板中间的最上面，会出现排版，重置操作\n\n点击排版，每块元素都会变成绿色，可以调整大小与位置，或者点击删除\n\n调整完后点击保存按钮可以保存。\n\n点击重置则会还原到最初的位置与大小。\n\n### 简单看板模式\n\n![image](/img/mypost/2021/1-17.jpg)\n\n在主页点击开关开启，开启简单看板模式后，就不可以自己配置事务。\n\n点击页面添加看板，就可以到页面中选择元素。\n\n同上粉色边框展示选中元素。\n\n点击确认后，选择一个选择器。\n\n选择器列表还是从 最子元素，往上的所有父元素。\n\n已到选择器上会出现红色蒙版。\n\n在点击后，则会出现确认添加到看板，\n\n确认则可以直接将这个元素添加到看板。\n\n同时也会生成一个流程事务（只是看不到）\n\n\n# 演示用例\n\n复制下面的json字符串，走导入事务的流程即可\n\n### 基本操作\n实现效果：打开百度，设置搜索为天气，点击搜索\n```json\n{\"case_name\":\"基本操作\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"天气\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"1\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 取值事件\n实现效果：打开我的博客主页，获取标题，打开百度，搜索获取到的标题\n```json\n{\"case_name\":\"取值事件用例\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"HTML.macos.desktop.landscape > BODY > NAV.navbar.navbar-default.navbar-custom.navbar-fixed-top > DIV.container-fluid > DIV.navbar-header.page-scroll > A.navbar-brand\",\"value\":\"title\",\"wait\":\"3\"},{\"n\":\"0\",\"opera\":\"pagejump\",\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"title\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"1\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 百度去广告(源码事务)\n实现效果：百度去广告\n```json\n{\"case_name\":\"百度去广告\",\"case_process\":[],\"case_sourcecode\":\"Array.from(\\n            document.querySelectorAll('#content_left>div'))\\n            .forEach(el => \\n                />广告</.test(el.innerHTML) && el.parentNode.removeChild(el)\\n        );\\nsetInterval(() => {\\n    try{\\n        Array.from(\\n            document.querySelectorAll('#content_left>div'))\\n            .forEach(el => \\n                />广告</.test(el.innerHTML) && el.parentNode.removeChild(el)\\n        )\\n    } catch(e){}\\n}, 1000)\\n\",\"case_type\":\"sourcecode\",\"control_url\":\"\",\"sourcecode_url\":\"baidu.com.*\",\"start_inject\":true}\n```\n\n### 定时喝水(源码事务)\n实现效果：每60分钟发出alert提醒喝水\n```json\n{\"case_name\":\"定时喝水\",\"case_process\":[],\"case_sourcecode\":\"alert(\\\"你该喝水咯\\\")\",\"case_type\":\"sourcecode\",\"control_url\":\"\",\"last_runtime\":1599706892179,\"runtime\":\"60m\",\"sourcecode_url\":\".*\"}\n```\n\n### 值选择器用例\n实现效果：div{xx}可以选择值为xx的div标签，适用于页面元素匹配的补充\n```json\n{\"case_name\":\"值选择器用例\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{About}\",\"value\":\"\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{Archives}\",\"value\":\"\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{Home}\",\"value\":\"\",\"wait\":\"2\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 并发爬虫事务用例(爬取百度搜索前10页的每页前三条结果)\n实现效果：爬取百度搜索test前10页的前三条标题\n```json\n{\"case_name\":\"爬虫用例\",\"case_process\":[],\"case_sourcecode\":\"\",\"case_type\":\"paral_crawler\",\"control_url\":\"\",\"paral_crawler\":{\"api\":\"http://127.0.0.1:12580/crawler/\",\"apicb\":false,\"cc\":5,\"data\":[],\"fetch\":[{\"check\":true,\"expr\":\"new Date()\",\"n\":\"0\",\"opera\":\"getcustomvalue\",\"tag\":\"body\",\"value\":\"时间\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题1\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"1\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题2\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"2\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题3\",\"wait\":\"0\"}],\"freq\":1,\"send\":false,\"urlapi\":\"http://127.0.0.1:12580/crawler/url/\",\"urls\":[\"https://www.baidu.com/s?wd=test&pn={0-10}0\"]},\"sourcecode_url\":\".*\"}\n```\n\n### 后台运行流程事务 + 消息通知用例\n实现效果：流程事务在后台运行，打开百度，搜索天气，点击搜搜，获取到天气的框中的值，发送系统消息\n```json\n{\"case_name\":\"后台运行+消息发送\",\"case_process\":[{\"bgopen\":true,\"check\":false,\"expr\":\"\",\"n\":\"0\",\"opera\":\"newpage\",\"sysmsg\":false,\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"天气\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"0\"},{\"bgopen\":false,\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"DIV#content_left > DIV.result-op.c-container.xpath-log > DIV.op_weather4_twoicon_container_div > DIV.op_weather4_twoicon > A.op_weather4_twoicon_today.OP_LOG_LINK\",\"value\":\"key\",\"wait\":\"1\"},{\"bgopen\":false,\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"sendmessage\",\"sysmsg\":true,\"tag\":\"DIV#wrapper_wrapper\",\"value\":\"天气：${key}\",\"wait\":\"0\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"fail_rerun\":false,\"last_runtime\":1611820796375,\"runtime\":\"\",\"sourcecode_url\":\".*\"}\n```\n","source":"_posts/2021/article_3_WEB_ROBOT使用文档(终极版).md","raw":"---\ntitle: Web Robot使用教程(终极版)\ncatalog: true\ndate: 2021-01-22 10:31:43\ntags:\n    - CHROME插件\n    - 自动化\n---\n\n# 前言\n\n本文为[Web Robot](https://github.com/webgjc/web_robot)插件使用教程终极版\n\n融合所有前面版本迭代的功能，包括有用的没用的\n\n当前文档教程的Web Robot版本 V2.2.0\n\n![image](/img/mypost/2021/1-1.jpg)\n\n# 教程\n\n## 下载与安装\n\n因为一些权限因素，本插件目前没有上到chrome商店，需通过源码安装\n\n### 下载\n\n首先到github的仓库 [https://github.com/webgjc/web_robot](https://github.com/webgjc/web_robot)\n\n将仓库克隆到本地\n\n> git clone https://github.com/webgjc/web_robot.git\n\n### 安装\n\n打开chrome浏览器，访问 [chrome://extensions/](chrome://extensions/)\n\n点击开启开发者模式（右上角）\n\n加载已解压的扩展程序，选择本地的仓库代码，即可完成。\n\n完成后可关闭开发者模式。\n\n## 事务相关操作\n\n事务在Web Robot中表示一系列浏览器操作的集合。\n\n如自动化表单填写，自动化签到，自动化去广告。\n\n配置事务/导入事务是使用插件的第一步。\n\n### 导入事务\n\n![image](/img/mypost/2021/1-2.jpg)\n\n如果有别人已经配置好的并导出的成熟事务，  \n或者想直接体验一下github上的演示用例[Web Robot演示用例](https://github.com/webgjc/web_robot#%E6%BC%94%E7%A4%BA%E7%94%A8%E4%BE%8B)\n\n可以直接导入即可体验浏览器自动化的乐趣。\n\n点开插件面板，点击 导入事务 \n\n复制如上面演示用例中的一长json字符串。点击确认即可。\n\n### 新增事务\n\n![image](/img/mypost/2021/1-3.jpg)\n\n如果要自己进行自定义的配置，首先第一步是新增事务。\n\n点击 新增事务，填写事务的名称（不能有重复）\n\n选择事务的类型\n\n- 流程事务：通过页面元素定义事件，支持运行，受控运行，添加看板等；\n- 并发爬虫事务：页面级的爬虫，支持并发，定时运行，数据添加看板等；\n- 源码事务：源码注入，支持自定义代码，自定义注入地址；\n- 受控事务：键盘鼠标的录制，支持录制，回放；\n\n选择好后 点击确认 即创建了一个空的事务。\n\n### 重命名/上移/删除\n\n![image](/img/mypost/2021/1-4.jpg)\n\n一些一般性的操作\n\n- 重命名已创建的事务\n\n点击事务右边操作列表中的 重命名\n\n输入新的名字 确认即可。\n\n- 移动事务在列表中的上下位置\n\n点击上移，即可与上面一个事务交换位置\n\n- 删除事务\n\n点击删除，二次确认后即可删除。(删除不可复原)\n\n### 导出事务\n\n如果想要讲一个已经制作完成的事务分享给别人\n\n点击导出，出现导出成功。\n\n表示已经复制到 **剪切板**，再其他地方直接粘贴即可。\n\n## 本地客户端相关，启动与使用\n\n**重点：本地客户端只影响部分插件功能的使用。**  \n**大部分情况下不需要用到！详情看[受控概念](#受控概念)，[爬虫本地相关](#爬虫本地相关)**\n\n为了实现浏览器插件能与本地进行**数据交互**，  \n同时在一些插件无法实现的功能（如控制键盘鼠标）上通过本地python来实现。\n\n这边写了一个简单的**python web**服务，插件通过 **HTTP** 访问接口来交互。\n\n### 启动与使用\n\n![image](/img/mypost/2021/1-5.jpg)\n\n首先机器上需要有python3的环境，或者创建一个python3的虚拟环境。\n\n到插件仓库的跟目录\n\n有一个依赖库的文件在 **py/requirements.txt**\n\n下载依赖\n> pip install -r py/requirements.txt\n\n启动web服务\n> bash main.sh start\n\n或\n> python py/web.py\n\n**注**：main.sh中还有一些可配置操作，可用下面命令查看\n> bash main.sh\n\n### 受控概念\n\n插件中一直穿插一个名词受控，包括受控事务，流程事务的受控运行。\n\n这边受控表示对鼠标键盘进行控制。\n\n- 受控事务：录制鼠标键盘操作，控制鼠标键盘还原操作\n- 流程事务受控运行：流程事务是由浏览器元素定义的事件，通过控制鼠标键盘来还原事件（一般运行是通过js还原事件）\n\n由于Chrome插件本身不能实现这个操作，\n\n因此这边都由本地python来实现控制鼠标键盘。\n\n由此受控相关的都会用到与本地进行数据交互。\n\n**注**：Mac中控制键鼠需要进行 **安全与隐私** 的配置  \n如用iTerm开的web服务，则需要配置 **隐私 - 辅助功能 - 支持iTerm控制您的电脑**\n\n### 爬虫本地相关\n\n具体爬虫信息可到 [并发爬虫事务](#并发爬虫事务) 查看\n\n这边由于页面爬虫在完成数据获取之后需要将数据发出去。\n\n这边是在web服务中开了一个数据接收的接口，\n\n插件爬到的数据按一定的切割数量分批次进行接口发送。\n\nweb服务受到数据后，存储到本地文件，并进行整合。\n\n**数据存储于 /py/crawler/**\n\n## 流程事务\n\n![image](/img/mypost/2021/1-6.jpg)\n\n创建一个流程事务后，点击事务的名称即进入事务的详情配置页\n\n流程事务由 **多个浏览器事件** 组成。\n\n每个事件可以是如开关某页面，点击某元素，输入某值。\n\n### 事件详情\n\n![image](/img/mypost/2021/1-7.jpg)\n\n一个事件包含 \n- 元素：唯一选择器；\n- 操作：点击，设值，开关页面；\n- 等待时间：与前一个事件中间间隔的时间；\n- dom检查：由于一些元素是异步/延时创建的，开启dom检查则在运行前可以保证这个元素一定存在，否则自旋。\n- 其他一些不固定选项(一些特殊事件有)\n\n#### 事件操作说明\nclick：点击某个元素\n\nvalue：可以在一般浏览器输入框中设值（输入需要设值的值）  \n如果你需要在运行前才设值这边的输入值，可以将这边设值为${value}，则在点击运行会弹出让你输入value的值\n\nmouseover：鼠标移动到上面事件\n\nrefresh：刷新当前页面\n\npagejump：当前页面跳转，需要设值页面url\n\nnewpage：打开一个新页面，需要设值页面url  \n**注**：第一个事件如果是新开页面且选择在后台打开，这样整个事务都会在后台运行\n\ngetvalue：取页面元素的文本，取到后保留在运行参数中，可用来后续设值，也可作为爬虫的数据。（需要设值一个取到后保存的key）\n（如取到第一个页面的元素设为 title(key)，然后打卡第二个页面，设值输入框为title值，则会用刚才设值的title）\n\ngetcustomvalue：取document结果，或js函数结果，用处同上。（需要设值两个，一个作为取值key，一个为表达式）  \n如取document.title可以取到页面的标题。\n\nclosepage：关闭当前页面\n\nonlyshow：看板特殊事件操作，将当前页面只保留选择的元素，其他所有都隐藏。\n\nsendmessgae: 发送消息，默认为发送系统消息，也可以走浏览器alert消息。\n\n### 确定唯一元素\n\n定义页面事件的第一步都是确定一个页面元素。\n\n这边有多种方法，通用的为 **一般选择器 + 第n个** 来表述唯一元素(如 body&0)\n\n#### 添加事件\n\n![image](/img/mypost/2021/1-8.jpg)\n\n点击添加事件，进入一般选择器配置页，可配置 **标签选择器** 或 **自由选择器**\n\n- 标签选择器 \n选择一个标签：如body，div\n\n然后会出现一个列表，表示页面中有多少个这样的标签。（div&0，div&1）\n\n鼠标移动上去后，页面会相应定位到这个元素上，并出现红色蒙版。\n\n点击确认一个想要的元素。\n\n![image](/img/mypost/2021/1-10.jpg)\n\n- 自由选择器\n选择了自由选择器，会出现一个输入框，可以自己输入想要的选择器，\n\n回车之后也会出现一个相同的列表，(选择器&0，选择器&1)\n\n鼠标移动和点击确认同上。\n\n#### 页面录制（不推荐）\n\n点击页面录制，这边暂时只支持单页面中的 **英文设值** 和 **点击事件**的录制。\n\n录制完成后，可以点击完成录制\n\n事件列表页会出现已经录制的所有事件。\n\n#### 页面添加事件（推荐使用）\n\n![image](/img/mypost/2021/1-9.jpg)\n\n打开一个页面，点击页面添加事件。\n\n然后在鼠标移回页面可以看到在移动到每个元素上时，都会出现一个粉色边框。\n\n单机之后，会出现一个列表，表示当前最子元素，和其父元素，一直到跟元素。\n\n点击选择一个想要的元素选择器\n\n进入事件配置页，进行事件的配置。\n\n### 运行说明\n\n![image](/img/mypost/2021/1-11.jpg)\n\n流程事务包含：运行，定时运行，受控运行，轮播 四种模式\n\n#### 运行\n\n采用后台运行模式，使用js和chrome接口还原事件。\n\n可直接点击运行，无其他依赖。\n\n#### 定时运行\n\n![image](/img/mypost/2021/1-12.jpg)\n\n配置模式分两种：每日hh:mm，每隔n分钟\n\n如写 15:00 表示每日15点运行一次。\n\n写 5m 则表示每5分钟运行一次。\n\n运行按当天开始算。\n\n运行具体会有一些时间上的出入。\n\n运行可以配置失败重试。（失败重试有多次运行的风险）\n\n#### 受控运行\n\n采用控制本地鼠标键盘还原事件。（事件操作为 点击，设值）\n\n需依赖本地web服务开启。\n\n#### 轮播\n\n运行完一次后直接进行下一次运行。\n\n## 并发爬虫事务\n\n![image](/img/mypost/2021/1-13.jpg)\n\n顾名思义这个事务要做的事情就是页面级的爬虫，适合爬一些小批量数据，同时可以突破一些反扒限制(因为就和人打开没啥区别)\n\n这边对于爬虫配置的抽象为：\n\n- 一批需要爬的地址：可以自己填，批量填，或接口获取；\n- 每个页面中需要爬的信息配置：配置一个流程事务，getvalue等的作为爬取数据事件；\n- 并发量配置：这边使用iframe实现；\n- 是否后台运行配置：后台运行则是新开chrome，并最小化的运行；\n- 发送数据/保存数据：可发送到本地接收，或就存在插件信息存储中；\n\n### 配置爬虫\n\n点击爬虫事务的名称，进入爬虫配置页\n\n#### url配置\n\n两种配置方式\n\n可自行配置地址，一行一个，  \n也可直接配置成批量模式，如下的地址，则表示pn=0 到 pn=10的是个页面  \nhttps://www.baidu.com/s?wd=test&pn={0-10}\n\n可从接口获取\n在本地web服务这边写了一个demo。具体外部接口获取地址需要自行实现一个接口。\n\n接口调用时返回地址，如果没有了则返回空即可。\n\n兼容场景如地址上带有一些时间戳，加密字符等特殊符号\n\n#### 爬取数据配置\n\n类似于配置流程事务，先通过一个方式选择一个唯一元素选择器。\n\n然后配置事件操作，延时，dom检查等。\n\n这边一般用getvalue，getcustomvalue事件操作。\n\n（一般可以设置延时为0，开启dom检查）\n\n#### 其他\n\n后台运行：不开启使用当前浏览器开一个新tab来爬取数据，\n开启后使用新开一个chrome，并最小化来运行，并在结束后关闭。\n\n定时运行：同上流程事务定时运行\n\n## \b源码事务\n\n![image](/img/mypost/2021/1-14.jpg)\n\n提供源码注入的基本实现。\n\n注：代码中可以获取document，但不能获取原页面中的js变量。\n\n另附可以自定义在哪些页面注入。\n\n同时也支持运行，定时运行，开启注入。\n\n### 配置事务\n\n点击事务名称进入配置页，\n\n首先选择注入的 **匹配地址**，默认为全地址。\n\n然后**写要注入的代码**，可以使用jquery。\n\n保存后，**开启注入**则是生效。\n\n## 受控事务\n\n![image](/img/mypost/2021/1-15.jpg)\n\n实现了鼠标键盘的录制和还原。\n\n由本地python实现，插件提供数据交互。\n\n### 配置事务\n\n点击事务名称，进入配置页\n\n首先配置要打开的网页。\n\n点击 **录制操作**，进入录制\n\n录制完，键盘按esc结束录制\n\n点击 **受控运行** 则是回放刚刚的录制\n\n## 我的看板\n\n![image](/img/mypost/2021/1-16.jpg)\n\n我的看板这边默认覆盖使用的是浏览器的新tab页。  \n\n当然也可以主动关闭，使用命令\n> bash main.sh close_dashboard\n\n要在开启的话\n> bash main.sh close_dashboard\n\n目前看板包含两种内容：\n- 单独一个页面元素的展示；\n- 爬虫数据表格的展示；\n\n添加页面元素到看板，实际使用的是流程事务，  \n条件则为 事务的第一个事件为 **当前页跳转**， 最后一个事件为 **元素唯一展示**\n\n符合条件的在主页会出现添加到看板选项。\n\n并发爬虫事务也有一个操作是添加看板，点击则可以将爬到的数据到看板以表格展示。\n\n### 看板操作与排版\n\n![image](/img/mypost/2021/1-18.jpg)\n\n将鼠标移动到看板中间的最上面，会出现排版，重置操作\n\n点击排版，每块元素都会变成绿色，可以调整大小与位置，或者点击删除\n\n调整完后点击保存按钮可以保存。\n\n点击重置则会还原到最初的位置与大小。\n\n### 简单看板模式\n\n![image](/img/mypost/2021/1-17.jpg)\n\n在主页点击开关开启，开启简单看板模式后，就不可以自己配置事务。\n\n点击页面添加看板，就可以到页面中选择元素。\n\n同上粉色边框展示选中元素。\n\n点击确认后，选择一个选择器。\n\n选择器列表还是从 最子元素，往上的所有父元素。\n\n已到选择器上会出现红色蒙版。\n\n在点击后，则会出现确认添加到看板，\n\n确认则可以直接将这个元素添加到看板。\n\n同时也会生成一个流程事务（只是看不到）\n\n\n# 演示用例\n\n复制下面的json字符串，走导入事务的流程即可\n\n### 基本操作\n实现效果：打开百度，设置搜索为天气，点击搜索\n```json\n{\"case_name\":\"基本操作\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"天气\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"1\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 取值事件\n实现效果：打开我的博客主页，获取标题，打开百度，搜索获取到的标题\n```json\n{\"case_name\":\"取值事件用例\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"HTML.macos.desktop.landscape > BODY > NAV.navbar.navbar-default.navbar-custom.navbar-fixed-top > DIV.container-fluid > DIV.navbar-header.page-scroll > A.navbar-brand\",\"value\":\"title\",\"wait\":\"3\"},{\"n\":\"0\",\"opera\":\"pagejump\",\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"title\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"1\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 百度去广告(源码事务)\n实现效果：百度去广告\n```json\n{\"case_name\":\"百度去广告\",\"case_process\":[],\"case_sourcecode\":\"Array.from(\\n            document.querySelectorAll('#content_left>div'))\\n            .forEach(el => \\n                />广告</.test(el.innerHTML) && el.parentNode.removeChild(el)\\n        );\\nsetInterval(() => {\\n    try{\\n        Array.from(\\n            document.querySelectorAll('#content_left>div'))\\n            .forEach(el => \\n                />广告</.test(el.innerHTML) && el.parentNode.removeChild(el)\\n        )\\n    } catch(e){}\\n}, 1000)\\n\",\"case_type\":\"sourcecode\",\"control_url\":\"\",\"sourcecode_url\":\"baidu.com.*\",\"start_inject\":true}\n```\n\n### 定时喝水(源码事务)\n实现效果：每60分钟发出alert提醒喝水\n```json\n{\"case_name\":\"定时喝水\",\"case_process\":[],\"case_sourcecode\":\"alert(\\\"你该喝水咯\\\")\",\"case_type\":\"sourcecode\",\"control_url\":\"\",\"last_runtime\":1599706892179,\"runtime\":\"60m\",\"sourcecode_url\":\".*\"}\n```\n\n### 值选择器用例\n实现效果：div{xx}可以选择值为xx的div标签，适用于页面元素匹配的补充\n```json\n{\"case_name\":\"值选择器用例\",\"case_process\":[{\"n\":\"0\",\"opera\":\"newpage\",\"tag\":\"body\",\"value\":\"http://blog.ganjiacheng.cn/\",\"wait\":\"1\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{About}\",\"value\":\"\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{Archives}\",\"value\":\"\",\"wait\":\"2\"},{\"n\":\"0\",\"opera\":\"click\",\"tag\":\"a{Home}\",\"value\":\"\",\"wait\":\"2\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"sourcecode_url\":\".*\"}\n```\n\n### 并发爬虫事务用例(爬取百度搜索前10页的每页前三条结果)\n实现效果：爬取百度搜索test前10页的前三条标题\n```json\n{\"case_name\":\"爬虫用例\",\"case_process\":[],\"case_sourcecode\":\"\",\"case_type\":\"paral_crawler\",\"control_url\":\"\",\"paral_crawler\":{\"api\":\"http://127.0.0.1:12580/crawler/\",\"apicb\":false,\"cc\":5,\"data\":[],\"fetch\":[{\"check\":true,\"expr\":\"new Date()\",\"n\":\"0\",\"opera\":\"getcustomvalue\",\"tag\":\"body\",\"value\":\"时间\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题1\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"1\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题2\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"2\",\"opera\":\"getvalue\",\"tag\":\"h3\",\"value\":\"标题3\",\"wait\":\"0\"}],\"freq\":1,\"send\":false,\"urlapi\":\"http://127.0.0.1:12580/crawler/url/\",\"urls\":[\"https://www.baidu.com/s?wd=test&pn={0-10}0\"]},\"sourcecode_url\":\".*\"}\n```\n\n### 后台运行流程事务 + 消息通知用例\n实现效果：流程事务在后台运行，打开百度，搜索天气，点击搜搜，获取到天气的框中的值，发送系统消息\n```json\n{\"case_name\":\"后台运行+消息发送\",\"case_process\":[{\"bgopen\":true,\"check\":false,\"expr\":\"\",\"n\":\"0\",\"opera\":\"newpage\",\"sysmsg\":false,\"tag\":\"body\",\"value\":\"https://www.baidu.com/s?ie=UTF-8&wd=test\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"value\",\"tag\":\"INPUT#kw\",\"value\":\"天气\",\"wait\":\"0\"},{\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"click\",\"tag\":\"INPUT#su\",\"value\":\"\",\"wait\":\"0\"},{\"bgopen\":false,\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"getvalue\",\"tag\":\"DIV#content_left > DIV.result-op.c-container.xpath-log > DIV.op_weather4_twoicon_container_div > DIV.op_weather4_twoicon > A.op_weather4_twoicon_today.OP_LOG_LINK\",\"value\":\"key\",\"wait\":\"1\"},{\"bgopen\":false,\"check\":true,\"expr\":\"\",\"n\":\"0\",\"opera\":\"sendmessage\",\"sysmsg\":true,\"tag\":\"DIV#wrapper_wrapper\",\"value\":\"天气：${key}\",\"wait\":\"0\"}],\"case_sourcecode\":\"\",\"case_type\":\"process\",\"control_url\":\"\",\"fail_rerun\":false,\"last_runtime\":1611820796375,\"runtime\":\"\",\"sourcecode_url\":\".*\"}\n```\n","slug":"2021/article_3_WEB_ROBOT使用文档(终极版)","published":1,"updated":"2021-02-22T13:21:24.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76m004x0770jhbajkp1","content":"<h1 id=\"前言\">前言</h1>\n<p>本文为<a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">Web Robot</a>插件使用教程终极版</p>\n<p>融合所有前面版本迭代的功能，包括有用的没用的</p>\n<p>当前文档教程的Web Robot版本 V2.2.0</p>\n<p><img src=\"/img/mypost/2021/1-1.jpg\" alt=\"image\"></p>\n<h1 id=\"教程\">教程</h1>\n<h2 id=\"下载与安装\">下载与安装</h2>\n<p>因为一些权限因素，本插件目前没有上到chrome商店，需通过源码安装</p>\n<h3 id=\"下载\">下载</h3>\n<p>首先到github的仓库 <a href=\"https://github.com/webgjc/web_robot\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot</a></p>\n<p>将仓库克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\" target=\"_blank\" rel=\"external\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<h3 id=\"安装\">安装</h3>\n<p>打开chrome浏览器，访问 <a href=\"chrome://extensions/\" target=\"_blank\" rel=\"external\">chrome://extensions/</a></p>\n<p>点击开启开发者模式（右上角）</p>\n<p>加载已解压的扩展程序，选择本地的仓库代码，即可完成。</p>\n<p>完成后可关闭开发者模式。</p>\n<h2 id=\"事务相关操作\">事务相关操作</h2>\n<p>事务在Web Robot中表示一系列浏览器操作的集合。</p>\n<p>如自动化表单填写，自动化签到，自动化去广告。</p>\n<p>配置事务/导入事务是使用插件的第一步。</p>\n<h3 id=\"导入事务\">导入事务</h3>\n<p><img src=\"/img/mypost/2021/1-2.jpg\" alt=\"image\"></p>\n<p>如果有别人已经配置好的并导出的成熟事务，<br>\n或者想直接体验一下github上的演示用例<a href=\"https://github.com/webgjc/web_robot#%E6%BC%94%E7%A4%BA%E7%94%A8%E4%BE%8B\" target=\"_blank\" rel=\"external\">Web Robot演示用例</a></p>\n<p>可以直接导入即可体验浏览器自动化的乐趣。</p>\n<p>点开插件面板，点击 导入事务</p>\n<p>复制如上面演示用例中的一长json字符串。点击确认即可。</p>\n<h3 id=\"新增事务\">新增事务</h3>\n<p><img src=\"/img/mypost/2021/1-3.jpg\" alt=\"image\"></p>\n<p>如果要自己进行自定义的配置，首先第一步是新增事务。</p>\n<p>点击 新增事务，填写事务的名称（不能有重复）</p>\n<p>选择事务的类型</p>\n<ul>\n<li>流程事务：通过页面元素定义事件，支持运行，受控运行，添加看板等；</li>\n<li>并发爬虫事务：页面级的爬虫，支持并发，定时运行，数据添加看板等；</li>\n<li>源码事务：源码注入，支持自定义代码，自定义注入地址；</li>\n<li>受控事务：键盘鼠标的录制，支持录制，回放；</li>\n</ul>\n<p>选择好后 点击确认 即创建了一个空的事务。</p>\n<h3 id=\"重命名上移删除\">重命名/上移/删除</h3>\n<p><img src=\"/img/mypost/2021/1-4.jpg\" alt=\"image\"></p>\n<p>一些一般性的操作</p>\n<ul>\n<li>重命名已创建的事务</li>\n</ul>\n<p>点击事务右边操作列表中的 重命名</p>\n<p>输入新的名字 确认即可。</p>\n<ul>\n<li>移动事务在列表中的上下位置</li>\n</ul>\n<p>点击上移，即可与上面一个事务交换位置</p>\n<ul>\n<li>删除事务</li>\n</ul>\n<p>点击删除，二次确认后即可删除。(删除不可复原)</p>\n<h3 id=\"导出事务\">导出事务</h3>\n<p>如果想要讲一个已经制作完成的事务分享给别人</p>\n<p>点击导出，出现导出成功。</p>\n<p>表示已经复制到 <strong>剪切板</strong>，再其他地方直接粘贴即可。</p>\n<h2 id=\"本地客户端相关启动与使用\">本地客户端相关，启动与使用</h2>\n<p><strong>重点：本地客户端只影响部分插件功能的使用。</strong><br>\n<strong>大部分情况下不需要用到！详情看<a href=\"#%E5%8F%97%E6%8E%A7%E6%A6%82%E5%BF%B5\">受控概念</a>，<a href=\"#%E7%88%AC%E8%99%AB%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%85%B3\">爬虫本地相关</a></strong></p>\n<p>为了实现浏览器插件能与本地进行<strong>数据交互</strong>，<br>\n同时在一些插件无法实现的功能（如控制键盘鼠标）上通过本地python来实现。</p>\n<p>这边写了一个简单的<strong>python web</strong>服务，插件通过 <strong>HTTP</strong> 访问接口来交互。</p>\n<h3 id=\"启动与使用\">启动与使用</h3>\n<p><img src=\"/img/mypost/2021/1-5.jpg\" alt=\"image\"></p>\n<p>首先机器上需要有python3的环境，或者创建一个python3的虚拟环境。</p>\n<p>到插件仓库的跟目录</p>\n<p>有一个依赖库的文件在 <strong>py/requirements.txt</strong></p>\n<p>下载依赖</p>\n<blockquote>\n<p>pip install -r py/requirements.txt</p>\n</blockquote>\n<p>启动web服务</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\" target=\"_blank\" rel=\"external\">main.sh</a> start</p>\n</blockquote>\n<p>或</p>\n<blockquote>\n<p>python py/web.py</p>\n</blockquote>\n<p><strong>注</strong>：main.sh中还有一些可配置操作，可用下面命令查看</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\" target=\"_blank\" rel=\"external\">main.sh</a></p>\n</blockquote>\n<h3 id=\"受控概念\">受控概念</h3>\n<p>插件中一直穿插一个名词受控，包括受控事务，流程事务的受控运行。</p>\n<p>这边受控表示对鼠标键盘进行控制。</p>\n<ul>\n<li>受控事务：录制鼠标键盘操作，控制鼠标键盘还原操作</li>\n<li>流程事务受控运行：流程事务是由浏览器元素定义的事件，通过控制鼠标键盘来还原事件（一般运行是通过js还原事件）</li>\n</ul>\n<p>由于Chrome插件本身不能实现这个操作，</p>\n<p>因此这边都由本地python来实现控制鼠标键盘。</p>\n<p>由此受控相关的都会用到与本地进行数据交互。</p>\n<p><strong>注</strong>：Mac中控制键鼠需要进行 <strong>安全与隐私</strong> 的配置<br>\n如用iTerm开的web服务，则需要配置 <strong>隐私 - 辅助功能 - 支持iTerm控制您的电脑</strong></p>\n<h3 id=\"爬虫本地相关\">爬虫本地相关</h3>\n<p>具体爬虫信息可到 <a href=\"#%E5%B9%B6%E5%8F%91%E7%88%AC%E8%99%AB%E4%BA%8B%E5%8A%A1\">并发爬虫事务</a> 查看</p>\n<p>这边由于页面爬虫在完成数据获取之后需要将数据发出去。</p>\n<p>这边是在web服务中开了一个数据接收的接口，</p>\n<p>插件爬到的数据按一定的切割数量分批次进行接口发送。</p>\n<p>web服务受到数据后，存储到本地文件，并进行整合。</p>\n<p><strong>数据存储于 /py/crawler/</strong></p>\n<h2 id=\"流程事务\">流程事务</h2>\n<p><img src=\"/img/mypost/2021/1-6.jpg\" alt=\"image\"></p>\n<p>创建一个流程事务后，点击事务的名称即进入事务的详情配置页</p>\n<p>流程事务由 <strong>多个浏览器事件</strong> 组成。</p>\n<p>每个事件可以是如开关某页面，点击某元素，输入某值。</p>\n<h3 id=\"事件详情\">事件详情</h3>\n<p><img src=\"/img/mypost/2021/1-7.jpg\" alt=\"image\"></p>\n<p>一个事件包含</p>\n<ul>\n<li>元素：唯一选择器；</li>\n<li>操作：点击，设值，开关页面；</li>\n<li>等待时间：与前一个事件中间间隔的时间；</li>\n<li>dom检查：由于一些元素是异步/延时创建的，开启dom检查则在运行前可以保证这个元素一定存在，否则自旋。</li>\n<li>其他一些不固定选项(一些特殊事件有)</li>\n</ul>\n<h4 id=\"事件操作说明\">事件操作说明</h4>\n<p>click：点击某个元素</p>\n<p>value：可以在一般浏览器输入框中设值（输入需要设值的值）<br>\n如果你需要在运行前才设值这边的输入值，可以将这边设值为${value}，则在点击运行会弹出让你输入value的值</p>\n<p>mouseover：鼠标移动到上面事件</p>\n<p>refresh：刷新当前页面</p>\n<p>pagejump：当前页面跳转，需要设值页面url</p>\n<p>newpage：打开一个新页面，需要设值页面url<br>\n<strong>注</strong>：第一个事件如果是新开页面且选择在后台打开，这样整个事务都会在后台运行</p>\n<p>getvalue：取页面元素的文本，取到后保留在运行参数中，可用来后续设值，也可作为爬虫的数据。（需要设值一个取到后保存的key）<br>\n（如取到第一个页面的元素设为 title(key)，然后打卡第二个页面，设值输入框为title值，则会用刚才设值的title）</p>\n<p>getcustomvalue：取document结果，或js函数结果，用处同上。（需要设值两个，一个作为取值key，一个为表达式）<br>\n如取document.title可以取到页面的标题。</p>\n<p>closepage：关闭当前页面</p>\n<p>onlyshow：看板特殊事件操作，将当前页面只保留选择的元素，其他所有都隐藏。</p>\n<p>sendmessgae: 发送消息，默认为发送系统消息，也可以走浏览器alert消息。</p>\n<h3 id=\"确定唯一元素\">确定唯一元素</h3>\n<p>定义页面事件的第一步都是确定一个页面元素。</p>\n<p>这边有多种方法，通用的为 <strong>一般选择器 + 第n个</strong> 来表述唯一元素(如 body&amp;0)</p>\n<h4 id=\"添加事件\">添加事件</h4>\n<p><img src=\"/img/mypost/2021/1-8.jpg\" alt=\"image\"></p>\n<p>点击添加事件，进入一般选择器配置页，可配置 <strong>标签选择器</strong> 或 <strong>自由选择器</strong></p>\n<ul>\n<li>标签选择器<br>\n选择一个标签：如body，div</li>\n</ul>\n<p>然后会出现一个列表，表示页面中有多少个这样的标签。（div&amp;0，div&amp;1）</p>\n<p>鼠标移动上去后，页面会相应定位到这个元素上，并出现红色蒙版。</p>\n<p>点击确认一个想要的元素。</p>\n<p><img src=\"/img/mypost/2021/1-10.jpg\" alt=\"image\"></p>\n<ul>\n<li>自由选择器<br>\n选择了自由选择器，会出现一个输入框，可以自己输入想要的选择器，</li>\n</ul>\n<p>回车之后也会出现一个相同的列表，(选择器&amp;0，选择器&amp;1)</p>\n<p>鼠标移动和点击确认同上。</p>\n<h4 id=\"页面录制不推荐\">页面录制（不推荐）</h4>\n<p>点击页面录制，这边暂时只支持单页面中的 <strong>英文设值</strong> 和 <strong>点击事件</strong>的录制。</p>\n<p>录制完成后，可以点击完成录制</p>\n<p>事件列表页会出现已经录制的所有事件。</p>\n<h4 id=\"页面添加事件推荐使用\">页面添加事件（推荐使用）</h4>\n<p><img src=\"/img/mypost/2021/1-9.jpg\" alt=\"image\"></p>\n<p>打开一个页面，点击页面添加事件。</p>\n<p>然后在鼠标移回页面可以看到在移动到每个元素上时，都会出现一个粉色边框。</p>\n<p>单机之后，会出现一个列表，表示当前最子元素，和其父元素，一直到跟元素。</p>\n<p>点击选择一个想要的元素选择器</p>\n<p>进入事件配置页，进行事件的配置。</p>\n<h3 id=\"运行说明\">运行说明</h3>\n<p><img src=\"/img/mypost/2021/1-11.jpg\" alt=\"image\"></p>\n<p>流程事务包含：运行，定时运行，受控运行，轮播 四种模式</p>\n<h4 id=\"运行\">运行</h4>\n<p>采用后台运行模式，使用js和chrome接口还原事件。</p>\n<p>可直接点击运行，无其他依赖。</p>\n<h4 id=\"定时运行\">定时运行</h4>\n<p><img src=\"/img/mypost/2021/1-12.jpg\" alt=\"image\"></p>\n<p>配置模式分两种：每日hh:mm，每隔n分钟</p>\n<p>如写 15:00 表示每日15点运行一次。</p>\n<p>写 5m 则表示每5分钟运行一次。</p>\n<p>运行按当天开始算。</p>\n<p>运行具体会有一些时间上的出入。</p>\n<p>运行可以配置失败重试。（失败重试有多次运行的风险）</p>\n<h4 id=\"受控运行\">受控运行</h4>\n<p>采用控制本地鼠标键盘还原事件。（事件操作为 点击，设值）</p>\n<p>需依赖本地web服务开启。</p>\n<h4 id=\"轮播\">轮播</h4>\n<p>运行完一次后直接进行下一次运行。</p>\n<h2 id=\"并发爬虫事务\">并发爬虫事务</h2>\n<p><img src=\"/img/mypost/2021/1-13.jpg\" alt=\"image\"></p>\n<p>顾名思义这个事务要做的事情就是页面级的爬虫，适合爬一些小批量数据，同时可以突破一些反扒限制(因为就和人打开没啥区别)</p>\n<p>这边对于爬虫配置的抽象为：</p>\n<ul>\n<li>一批需要爬的地址：可以自己填，批量填，或接口获取；</li>\n<li>每个页面中需要爬的信息配置：配置一个流程事务，getvalue等的作为爬取数据事件；</li>\n<li>并发量配置：这边使用iframe实现；</li>\n<li>是否后台运行配置：后台运行则是新开chrome，并最小化的运行；</li>\n<li>发送数据/保存数据：可发送到本地接收，或就存在插件信息存储中；</li>\n</ul>\n<h3 id=\"配置爬虫\">配置爬虫</h3>\n<p>点击爬虫事务的名称，进入爬虫配置页</p>\n<h4 id=\"url配置\">url配置</h4>\n<p>两种配置方式</p>\n<p>可自行配置地址，一行一个，<br>\n也可直接配置成批量模式，如下的地址，则表示pn=0 到 pn=10的是个页面<br>\n<a href=\"https://www.baidu.com/s?wd=test&amp;pn=%7B0-10%7D\" target=\"_blank\" rel=\"external\">https://www.baidu.com/s?wd=test&amp;pn={0-10}</a></p>\n<p>可从接口获取<br>\n在本地web服务这边写了一个demo。具体外部接口获取地址需要自行实现一个接口。</p>\n<p>接口调用时返回地址，如果没有了则返回空即可。</p>\n<p>兼容场景如地址上带有一些时间戳，加密字符等特殊符号</p>\n<h4 id=\"爬取数据配置\">爬取数据配置</h4>\n<p>类似于配置流程事务，先通过一个方式选择一个唯一元素选择器。</p>\n<p>然后配置事件操作，延时，dom检查等。</p>\n<p>这边一般用getvalue，getcustomvalue事件操作。</p>\n<p>（一般可以设置延时为0，开启dom检查）</p>\n<h4 id=\"其他\">其他</h4>\n<p>后台运行：不开启使用当前浏览器开一个新tab来爬取数据，<br>\n开启后使用新开一个chrome，并最小化来运行，并在结束后关闭。</p>\n<p>定时运行：同上流程事务定时运行</p>\n<h2 id=\"源码事务\">\b源码事务</h2>\n<p><img src=\"/img/mypost/2021/1-14.jpg\" alt=\"image\"></p>\n<p>提供源码注入的基本实现。</p>\n<p>注：代码中可以获取document，但不能获取原页面中的js变量。</p>\n<p>另附可以自定义在哪些页面注入。</p>\n<p>同时也支持运行，定时运行，开启注入。</p>\n<h3 id=\"配置事务\">配置事务</h3>\n<p>点击事务名称进入配置页，</p>\n<p>首先选择注入的 <strong>匹配地址</strong>，默认为全地址。</p>\n<p>然后<strong>写要注入的代码</strong>，可以使用jquery。</p>\n<p>保存后，<strong>开启注入</strong>则是生效。</p>\n<h2 id=\"受控事务\">受控事务</h2>\n<p><img src=\"/img/mypost/2021/1-15.jpg\" alt=\"image\"></p>\n<p>实现了鼠标键盘的录制和还原。</p>\n<p>由本地python实现，插件提供数据交互。</p>\n<h3 id=\"配置事务\">配置事务</h3>\n<p>点击事务名称，进入配置页</p>\n<p>首先配置要打开的网页。</p>\n<p>点击 <strong>录制操作</strong>，进入录制</p>\n<p>录制完，键盘按esc结束录制</p>\n<p>点击 <strong>受控运行</strong> 则是回放刚刚的录制</p>\n<h2 id=\"我的看板\">我的看板</h2>\n<p><img src=\"/img/mypost/2021/1-16.jpg\" alt=\"image\"></p>\n<p>我的看板这边默认覆盖使用的是浏览器的新tab页。</p>\n<p>当然也可以主动关闭，使用命令</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\" target=\"_blank\" rel=\"external\">main.sh</a> close_dashboard</p>\n</blockquote>\n<p>要在开启的话</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\" target=\"_blank\" rel=\"external\">main.sh</a> close_dashboard</p>\n</blockquote>\n<p>目前看板包含两种内容：</p>\n<ul>\n<li>单独一个页面元素的展示；</li>\n<li>爬虫数据表格的展示；</li>\n</ul>\n<p>添加页面元素到看板，实际使用的是流程事务，<br>\n条件则为 事务的第一个事件为 <strong>当前页跳转</strong>， 最后一个事件为 <strong>元素唯一展示</strong></p>\n<p>符合条件的在主页会出现添加到看板选项。</p>\n<p>并发爬虫事务也有一个操作是添加看板，点击则可以将爬到的数据到看板以表格展示。</p>\n<h3 id=\"看板操作与排版\">看板操作与排版</h3>\n<p><img src=\"/img/mypost/2021/1-18.jpg\" alt=\"image\"></p>\n<p>将鼠标移动到看板中间的最上面，会出现排版，重置操作</p>\n<p>点击排版，每块元素都会变成绿色，可以调整大小与位置，或者点击删除</p>\n<p>调整完后点击保存按钮可以保存。</p>\n<p>点击重置则会还原到最初的位置与大小。</p>\n<h3 id=\"简单看板模式\">简单看板模式</h3>\n<p><img src=\"/img/mypost/2021/1-17.jpg\" alt=\"image\"></p>\n<p>在主页点击开关开启，开启简单看板模式后，就不可以自己配置事务。</p>\n<p>点击页面添加看板，就可以到页面中选择元素。</p>\n<p>同上粉色边框展示选中元素。</p>\n<p>点击确认后，选择一个选择器。</p>\n<p>选择器列表还是从 最子元素，往上的所有父元素。</p>\n<p>已到选择器上会出现红色蒙版。</p>\n<p>在点击后，则会出现确认添加到看板，</p>\n<p>确认则可以直接将这个元素添加到看板。</p>\n<p>同时也会生成一个流程事务（只是看不到）</p>\n<h1 id=\"演示用例\">演示用例</h1>\n<p>复制下面的json字符串，走导入事务的流程即可</p>\n<h3 id=\"基本操作\">基本操作</h3>\n<p>实现效果：打开百度，设置搜索为天气，点击搜索</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"基本操作\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"取值事件\">取值事件</h3>\n<p>实现效果：打开我的博客主页，获取标题，打开百度，搜索获取到的标题</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"取值事件用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"HTML.macos.desktop.landscape &gt; BODY &gt; NAV.navbar.navbar-default.navbar-custom.navbar-fixed-top &gt; DIV.container-fluid &gt; DIV.navbar-header.page-scroll &gt; A.navbar-brand\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"title\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"3\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"pagejump\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"title\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"百度去广告源码事务\">百度去广告(源码事务)</h3>\n<p>实现效果：百度去广告</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"百度去广告\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"Array.from(\\n            document.querySelectorAll('#content_left&gt;div'))\\n            .forEach(el =&gt; \\n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\\n        );\\nsetInterval(() =&gt; &#123;\\n    try&#123;\\n        Array.from(\\n            document.querySelectorAll('#content_left&gt;div'))\\n            .forEach(el =&gt; \\n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\\n        )\\n    &#125; catch(e)&#123;&#125;\\n&#125;, 1000)\\n\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"sourcecode\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\"baidu.com.*\"</span>,<span class=\"attr\">\"start_inject\"</span>:<span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时喝水源码事务\">定时喝水(源码事务)</h3>\n<p>实现效果：每60分钟发出alert提醒喝水</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"定时喝水\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"alert(\\\"你该喝水咯\\\")\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"sourcecode\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"last_runtime\"</span>:<span class=\"number\">1599706892179</span>,<span class=\"attr\">\"runtime\"</span>:<span class=\"string\">\"60m\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"值选择器用例\">值选择器用例</h3>\n<p>实现效果：div{xx}可以选择值为xx的div标签，适用于页面元素匹配的补充</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"值选择器用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;About&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;Archives&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;Home&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发爬虫事务用例爬取百度搜索前10页的每页前三条结果\">并发爬虫事务用例(爬取百度搜索前10页的每页前三条结果)</h3>\n<p>实现效果：爬取百度搜索test前10页的前三条标题</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"爬虫用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"paral_crawler\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"paral_crawler\"</span>:&#123;<span class=\"attr\">\"api\"</span>:<span class=\"string\">\"http://127.0.0.1:12580/crawler/\"</span>,<span class=\"attr\">\"apicb\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"cc\"</span>:<span class=\"number\">5</span>,<span class=\"attr\">\"data\"</span>:[],<span class=\"attr\">\"fetch\"</span>:[&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"new Date()\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getcustomvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"时间\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题1\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题2\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题3\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;],<span class=\"attr\">\"freq\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"send\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"urlapi\"</span>:<span class=\"string\">\"http://127.0.0.1:12580/crawler/url/\"</span>,<span class=\"attr\">\"urls\"</span>:[<span class=\"string\">\"https://www.baidu.com/s?wd=test&amp;pn=&#123;0-10&#125;0\"</span>]&#125;,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"后台运行流程事务-消息通知用例\">后台运行流程事务 + 消息通知用例</h3>\n<p>实现效果：流程事务在后台运行，打开百度，搜索天气，点击搜搜，获取到天气的框中的值，发送系统消息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"后台运行+消息发送\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"sysmsg\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"DIV#content_left &gt; DIV.result-op.c-container.xpath-log &gt; DIV.op_weather4_twoicon_container_div &gt; DIV.op_weather4_twoicon &gt; A.op_weather4_twoicon_today.OP_LOG_LINK\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"key\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"sendmessage\"</span>,<span class=\"attr\">\"sysmsg\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"DIV#wrapper_wrapper\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气：$&#123;key&#125;\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"fail_rerun\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"last_runtime\"</span>:<span class=\"number\">1611820796375</span>,<span class=\"attr\">\"runtime\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1>前言</h1>\n<p>本文为<a href=\"https://github.com/webgjc/web_robot\">Web Robot</a>插件使用教程终极版</p>\n<p>融合所有前面版本迭代的功能，包括有用的没用的</p>\n<p>当前文档教程的Web Robot版本 V2.2.0</p>\n<p><img src=\"/img/mypost/2021/1-1.jpg\" alt=\"image\"></p>\n<h1>教程</h1>\n<h2>下载与安装</h2>\n<p>因为一些权限因素，本插件目前没有上到chrome商店，需通过源码安装</p>\n<h3>下载</h3>\n<p>首先到github的仓库 <a href=\"https://github.com/webgjc/web_robot\">https://github.com/webgjc/web_robot</a></p>\n<p>将仓库克隆到本地</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/webgjc/web_robot.git\">https://github.com/webgjc/web_robot.git</a></p>\n</blockquote>\n<h3>安装</h3>\n<p>打开chrome浏览器，访问 <a href=\"chrome://extensions/\">chrome://extensions/</a></p>\n<p>点击开启开发者模式（右上角）</p>\n<p>加载已解压的扩展程序，选择本地的仓库代码，即可完成。</p>\n<p>完成后可关闭开发者模式。</p>\n<h2>事务相关操作</h2>\n<p>事务在Web Robot中表示一系列浏览器操作的集合。</p>\n<p>如自动化表单填写，自动化签到，自动化去广告。</p>\n<p>配置事务/导入事务是使用插件的第一步。</p>\n<h3>导入事务</h3>\n<p><img src=\"/img/mypost/2021/1-2.jpg\" alt=\"image\"></p>\n<p>如果有别人已经配置好的并导出的成熟事务，<br>\n或者想直接体验一下github上的演示用例<a href=\"https://github.com/webgjc/web_robot#%E6%BC%94%E7%A4%BA%E7%94%A8%E4%BE%8B\">Web Robot演示用例</a></p>\n<p>可以直接导入即可体验浏览器自动化的乐趣。</p>\n<p>点开插件面板，点击 导入事务</p>\n<p>复制如上面演示用例中的一长json字符串。点击确认即可。</p>\n<h3>新增事务</h3>\n<p><img src=\"/img/mypost/2021/1-3.jpg\" alt=\"image\"></p>\n<p>如果要自己进行自定义的配置，首先第一步是新增事务。</p>\n<p>点击 新增事务，填写事务的名称（不能有重复）</p>\n<p>选择事务的类型</p>\n<ul>\n<li>流程事务：通过页面元素定义事件，支持运行，受控运行，添加看板等；</li>\n<li>并发爬虫事务：页面级的爬虫，支持并发，定时运行，数据添加看板等；</li>\n<li>源码事务：源码注入，支持自定义代码，自定义注入地址；</li>\n<li>受控事务：键盘鼠标的录制，支持录制，回放；</li>\n</ul>\n<p>选择好后 点击确认 即创建了一个空的事务。</p>\n<h3>重命名/上移/删除</h3>\n<p><img src=\"/img/mypost/2021/1-4.jpg\" alt=\"image\"></p>\n<p>一些一般性的操作</p>\n<ul>\n<li>重命名已创建的事务</li>\n</ul>\n<p>点击事务右边操作列表中的 重命名</p>\n<p>输入新的名字 确认即可。</p>\n<ul>\n<li>移动事务在列表中的上下位置</li>\n</ul>\n<p>点击上移，即可与上面一个事务交换位置</p>\n<ul>\n<li>删除事务</li>\n</ul>\n<p>点击删除，二次确认后即可删除。(删除不可复原)</p>\n<h3>导出事务</h3>\n<p>如果想要讲一个已经制作完成的事务分享给别人</p>\n<p>点击导出，出现导出成功。</p>\n<p>表示已经复制到 <strong>剪切板</strong>，再其他地方直接粘贴即可。</p>\n<h2>本地客户端相关，启动与使用</h2>\n<p><strong>重点：本地客户端只影响部分插件功能的使用。</strong><br>\n<strong>大部分情况下不需要用到！详情看<a href=\"#%E5%8F%97%E6%8E%A7%E6%A6%82%E5%BF%B5\">受控概念</a>，<a href=\"#%E7%88%AC%E8%99%AB%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%85%B3\">爬虫本地相关</a></strong></p>\n<p>为了实现浏览器插件能与本地进行<strong>数据交互</strong>，<br>\n同时在一些插件无法实现的功能（如控制键盘鼠标）上通过本地python来实现。</p>\n<p>这边写了一个简单的<strong>python web</strong>服务，插件通过 <strong>HTTP</strong> 访问接口来交互。</p>\n<h3>启动与使用</h3>\n<p><img src=\"/img/mypost/2021/1-5.jpg\" alt=\"image\"></p>\n<p>首先机器上需要有python3的环境，或者创建一个python3的虚拟环境。</p>\n<p>到插件仓库的跟目录</p>\n<p>有一个依赖库的文件在 <strong>py/requirements.txt</strong></p>\n<p>下载依赖</p>\n<blockquote>\n<p>pip install -r py/requirements.txt</p>\n</blockquote>\n<p>启动web服务</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\">main.sh</a> start</p>\n</blockquote>\n<p>或</p>\n<blockquote>\n<p>python py/web.py</p>\n</blockquote>\n<p><strong>注</strong>：main.sh中还有一些可配置操作，可用下面命令查看</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\">main.sh</a></p>\n</blockquote>\n<h3>受控概念</h3>\n<p>插件中一直穿插一个名词受控，包括受控事务，流程事务的受控运行。</p>\n<p>这边受控表示对鼠标键盘进行控制。</p>\n<ul>\n<li>受控事务：录制鼠标键盘操作，控制鼠标键盘还原操作</li>\n<li>流程事务受控运行：流程事务是由浏览器元素定义的事件，通过控制鼠标键盘来还原事件（一般运行是通过js还原事件）</li>\n</ul>\n<p>由于Chrome插件本身不能实现这个操作，</p>\n<p>因此这边都由本地python来实现控制鼠标键盘。</p>\n<p>由此受控相关的都会用到与本地进行数据交互。</p>\n<p><strong>注</strong>：Mac中控制键鼠需要进行 <strong>安全与隐私</strong> 的配置<br>\n如用iTerm开的web服务，则需要配置 <strong>隐私 - 辅助功能 - 支持iTerm控制您的电脑</strong></p>\n<h3>爬虫本地相关</h3>\n<p>具体爬虫信息可到 <a href=\"#%E5%B9%B6%E5%8F%91%E7%88%AC%E8%99%AB%E4%BA%8B%E5%8A%A1\">并发爬虫事务</a> 查看</p>\n<p>这边由于页面爬虫在完成数据获取之后需要将数据发出去。</p>\n<p>这边是在web服务中开了一个数据接收的接口，</p>\n<p>插件爬到的数据按一定的切割数量分批次进行接口发送。</p>\n<p>web服务受到数据后，存储到本地文件，并进行整合。</p>\n<p><strong>数据存储于 /py/crawler/</strong></p>\n<h2>流程事务</h2>\n<p><img src=\"/img/mypost/2021/1-6.jpg\" alt=\"image\"></p>\n<p>创建一个流程事务后，点击事务的名称即进入事务的详情配置页</p>\n<p>流程事务由 <strong>多个浏览器事件</strong> 组成。</p>\n<p>每个事件可以是如开关某页面，点击某元素，输入某值。</p>\n<h3>事件详情</h3>\n<p><img src=\"/img/mypost/2021/1-7.jpg\" alt=\"image\"></p>\n<p>一个事件包含</p>\n<ul>\n<li>元素：唯一选择器；</li>\n<li>操作：点击，设值，开关页面；</li>\n<li>等待时间：与前一个事件中间间隔的时间；</li>\n<li>dom检查：由于一些元素是异步/延时创建的，开启dom检查则在运行前可以保证这个元素一定存在，否则自旋。</li>\n<li>其他一些不固定选项(一些特殊事件有)</li>\n</ul>\n<h4>事件操作说明</h4>\n<p>click：点击某个元素</p>\n<p>value：可以在一般浏览器输入框中设值（输入需要设值的值）<br>\n如果你需要在运行前才设值这边的输入值，可以将这边设值为${value}，则在点击运行会弹出让你输入value的值</p>\n<p>mouseover：鼠标移动到上面事件</p>\n<p>refresh：刷新当前页面</p>\n<p>pagejump：当前页面跳转，需要设值页面url</p>\n<p>newpage：打开一个新页面，需要设值页面url<br>\n<strong>注</strong>：第一个事件如果是新开页面且选择在后台打开，这样整个事务都会在后台运行</p>\n<p>getvalue：取页面元素的文本，取到后保留在运行参数中，可用来后续设值，也可作为爬虫的数据。（需要设值一个取到后保存的key）<br>\n（如取到第一个页面的元素设为 title(key)，然后打卡第二个页面，设值输入框为title值，则会用刚才设值的title）</p>\n<p>getcustomvalue：取document结果，或js函数结果，用处同上。（需要设值两个，一个作为取值key，一个为表达式）<br>\n如取document.title可以取到页面的标题。</p>\n<p>closepage：关闭当前页面</p>\n<p>onlyshow：看板特殊事件操作，将当前页面只保留选择的元素，其他所有都隐藏。</p>\n<p>sendmessgae: 发送消息，默认为发送系统消息，也可以走浏览器alert消息。</p>\n<h3>确定唯一元素</h3>\n<p>定义页面事件的第一步都是确定一个页面元素。</p>\n<p>这边有多种方法，通用的为 <strong>一般选择器 + 第n个</strong> 来表述唯一元素(如 body&amp;0)</p>\n<h4>添加事件</h4>\n<p><img src=\"/img/mypost/2021/1-8.jpg\" alt=\"image\"></p>\n<p>点击添加事件，进入一般选择器配置页，可配置 <strong>标签选择器</strong> 或 <strong>自由选择器</strong></p>\n<ul>\n<li>标签选择器<br>\n选择一个标签：如body，div</li>\n</ul>\n<p>然后会出现一个列表，表示页面中有多少个这样的标签。（div&amp;0，div&amp;1）</p>\n<p>鼠标移动上去后，页面会相应定位到这个元素上，并出现红色蒙版。</p>\n<p>点击确认一个想要的元素。</p>\n<p><img src=\"/img/mypost/2021/1-10.jpg\" alt=\"image\"></p>\n<ul>\n<li>自由选择器<br>\n选择了自由选择器，会出现一个输入框，可以自己输入想要的选择器，</li>\n</ul>\n<p>回车之后也会出现一个相同的列表，(选择器&amp;0，选择器&amp;1)</p>\n<p>鼠标移动和点击确认同上。</p>\n<h4>页面录制（不推荐）</h4>\n<p>点击页面录制，这边暂时只支持单页面中的 <strong>英文设值</strong> 和 <strong>点击事件</strong>的录制。</p>\n<p>录制完成后，可以点击完成录制</p>\n<p>事件列表页会出现已经录制的所有事件。</p>\n<h4>页面添加事件（推荐使用）</h4>\n<p><img src=\"/img/mypost/2021/1-9.jpg\" alt=\"image\"></p>\n<p>打开一个页面，点击页面添加事件。</p>\n<p>然后在鼠标移回页面可以看到在移动到每个元素上时，都会出现一个粉色边框。</p>\n<p>单机之后，会出现一个列表，表示当前最子元素，和其父元素，一直到跟元素。</p>\n<p>点击选择一个想要的元素选择器</p>\n<p>进入事件配置页，进行事件的配置。</p>\n<h3>运行说明</h3>\n<p><img src=\"/img/mypost/2021/1-11.jpg\" alt=\"image\"></p>\n<p>流程事务包含：运行，定时运行，受控运行，轮播 四种模式</p>\n<h4>运行</h4>\n<p>采用后台运行模式，使用js和chrome接口还原事件。</p>\n<p>可直接点击运行，无其他依赖。</p>\n<h4>定时运行</h4>\n<p><img src=\"/img/mypost/2021/1-12.jpg\" alt=\"image\"></p>\n<p>配置模式分两种：每日hh:mm，每隔n分钟</p>\n<p>如写 15:00 表示每日15点运行一次。</p>\n<p>写 5m 则表示每5分钟运行一次。</p>\n<p>运行按当天开始算。</p>\n<p>运行具体会有一些时间上的出入。</p>\n<p>运行可以配置失败重试。（失败重试有多次运行的风险）</p>\n<h4>受控运行</h4>\n<p>采用控制本地鼠标键盘还原事件。（事件操作为 点击，设值）</p>\n<p>需依赖本地web服务开启。</p>\n<h4>轮播</h4>\n<p>运行完一次后直接进行下一次运行。</p>\n<h2>并发爬虫事务</h2>\n<p><img src=\"/img/mypost/2021/1-13.jpg\" alt=\"image\"></p>\n<p>顾名思义这个事务要做的事情就是页面级的爬虫，适合爬一些小批量数据，同时可以突破一些反扒限制(因为就和人打开没啥区别)</p>\n<p>这边对于爬虫配置的抽象为：</p>\n<ul>\n<li>一批需要爬的地址：可以自己填，批量填，或接口获取；</li>\n<li>每个页面中需要爬的信息配置：配置一个流程事务，getvalue等的作为爬取数据事件；</li>\n<li>并发量配置：这边使用iframe实现；</li>\n<li>是否后台运行配置：后台运行则是新开chrome，并最小化的运行；</li>\n<li>发送数据/保存数据：可发送到本地接收，或就存在插件信息存储中；</li>\n</ul>\n<h3>配置爬虫</h3>\n<p>点击爬虫事务的名称，进入爬虫配置页</p>\n<h4>url配置</h4>\n<p>两种配置方式</p>\n<p>可自行配置地址，一行一个，<br>\n也可直接配置成批量模式，如下的地址，则表示pn=0 到 pn=10的是个页面<br>\n<a href=\"https://www.baidu.com/s?wd=test&amp;pn=%7B0-10%7D\">https://www.baidu.com/s?wd=test&amp;pn={0-10}</a></p>\n<p>可从接口获取<br>\n在本地web服务这边写了一个demo。具体外部接口获取地址需要自行实现一个接口。</p>\n<p>接口调用时返回地址，如果没有了则返回空即可。</p>\n<p>兼容场景如地址上带有一些时间戳，加密字符等特殊符号</p>\n<h4>爬取数据配置</h4>\n<p>类似于配置流程事务，先通过一个方式选择一个唯一元素选择器。</p>\n<p>然后配置事件操作，延时，dom检查等。</p>\n<p>这边一般用getvalue，getcustomvalue事件操作。</p>\n<p>（一般可以设置延时为0，开启dom检查）</p>\n<h4>其他</h4>\n<p>后台运行：不开启使用当前浏览器开一个新tab来爬取数据，<br>\n开启后使用新开一个chrome，并最小化来运行，并在结束后关闭。</p>\n<p>定时运行：同上流程事务定时运行</p>\n<h2>\b源码事务</h2>\n<p><img src=\"/img/mypost/2021/1-14.jpg\" alt=\"image\"></p>\n<p>提供源码注入的基本实现。</p>\n<p>注：代码中可以获取document，但不能获取原页面中的js变量。</p>\n<p>另附可以自定义在哪些页面注入。</p>\n<p>同时也支持运行，定时运行，开启注入。</p>\n<h3>配置事务</h3>\n<p>点击事务名称进入配置页，</p>\n<p>首先选择注入的 <strong>匹配地址</strong>，默认为全地址。</p>\n<p>然后<strong>写要注入的代码</strong>，可以使用jquery。</p>\n<p>保存后，<strong>开启注入</strong>则是生效。</p>\n<h2>受控事务</h2>\n<p><img src=\"/img/mypost/2021/1-15.jpg\" alt=\"image\"></p>\n<p>实现了鼠标键盘的录制和还原。</p>\n<p>由本地python实现，插件提供数据交互。</p>\n<h3>配置事务</h3>\n<p>点击事务名称，进入配置页</p>\n<p>首先配置要打开的网页。</p>\n<p>点击 <strong>录制操作</strong>，进入录制</p>\n<p>录制完，键盘按esc结束录制</p>\n<p>点击 <strong>受控运行</strong> 则是回放刚刚的录制</p>\n<h2>我的看板</h2>\n<p><img src=\"/img/mypost/2021/1-16.jpg\" alt=\"image\"></p>\n<p>我的看板这边默认覆盖使用的是浏览器的新tab页。</p>\n<p>当然也可以主动关闭，使用命令</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\">main.sh</a> close_dashboard</p>\n</blockquote>\n<p>要在开启的话</p>\n<blockquote>\n<p>bash <a href=\"http://main.sh\">main.sh</a> close_dashboard</p>\n</blockquote>\n<p>目前看板包含两种内容：</p>\n<ul>\n<li>单独一个页面元素的展示；</li>\n<li>爬虫数据表格的展示；</li>\n</ul>\n<p>添加页面元素到看板，实际使用的是流程事务，<br>\n条件则为 事务的第一个事件为 <strong>当前页跳转</strong>， 最后一个事件为 <strong>元素唯一展示</strong></p>\n<p>符合条件的在主页会出现添加到看板选项。</p>\n<p>并发爬虫事务也有一个操作是添加看板，点击则可以将爬到的数据到看板以表格展示。</p>\n<h3>看板操作与排版</h3>\n<p><img src=\"/img/mypost/2021/1-18.jpg\" alt=\"image\"></p>\n<p>将鼠标移动到看板中间的最上面，会出现排版，重置操作</p>\n<p>点击排版，每块元素都会变成绿色，可以调整大小与位置，或者点击删除</p>\n<p>调整完后点击保存按钮可以保存。</p>\n<p>点击重置则会还原到最初的位置与大小。</p>\n<h3>简单看板模式</h3>\n<p><img src=\"/img/mypost/2021/1-17.jpg\" alt=\"image\"></p>\n<p>在主页点击开关开启，开启简单看板模式后，就不可以自己配置事务。</p>\n<p>点击页面添加看板，就可以到页面中选择元素。</p>\n<p>同上粉色边框展示选中元素。</p>\n<p>点击确认后，选择一个选择器。</p>\n<p>选择器列表还是从 最子元素，往上的所有父元素。</p>\n<p>已到选择器上会出现红色蒙版。</p>\n<p>在点击后，则会出现确认添加到看板，</p>\n<p>确认则可以直接将这个元素添加到看板。</p>\n<p>同时也会生成一个流程事务（只是看不到）</p>\n<h1>演示用例</h1>\n<p>复制下面的json字符串，走导入事务的流程即可</p>\n<h3>基本操作</h3>\n<p>实现效果：打开百度，设置搜索为天气，点击搜索</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"基本操作\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>取值事件</h3>\n<p>实现效果：打开我的博客主页，获取标题，打开百度，搜索获取到的标题</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"取值事件用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"HTML.macos.desktop.landscape &gt; BODY &gt; NAV.navbar.navbar-default.navbar-custom.navbar-fixed-top &gt; DIV.container-fluid &gt; DIV.navbar-header.page-scroll &gt; A.navbar-brand\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"title\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"3\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"pagejump\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"title\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>百度去广告(源码事务)</h3>\n<p>实现效果：百度去广告</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"百度去广告\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"Array.from(\\n            document.querySelectorAll('#content_left&gt;div'))\\n            .forEach(el =&gt; \\n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\\n        );\\nsetInterval(() =&gt; &#123;\\n    try&#123;\\n        Array.from(\\n            document.querySelectorAll('#content_left&gt;div'))\\n            .forEach(el =&gt; \\n                /&gt;广告&lt;/.test(el.innerHTML) &amp;&amp; el.parentNode.removeChild(el)\\n        )\\n    &#125; catch(e)&#123;&#125;\\n&#125;, 1000)\\n\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"sourcecode\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\"baidu.com.*\"</span>,<span class=\"attr\">\"start_inject\"</span>:<span class=\"literal\">true</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>定时喝水(源码事务)</h3>\n<p>实现效果：每60分钟发出alert提醒喝水</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"定时喝水\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"alert(\\\"你该喝水咯\\\")\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"sourcecode\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"last_runtime\"</span>:<span class=\"number\">1599706892179</span>,<span class=\"attr\">\"runtime\"</span>:<span class=\"string\">\"60m\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>值选择器用例</h3>\n<p>实现效果：div{xx}可以选择值为xx的div标签，适用于页面元素匹配的补充</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"值选择器用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"http://blog.ganjiacheng.cn/\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;About&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;Archives&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;,&#123;<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"a&#123;Home&#125;\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"2\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>并发爬虫事务用例(爬取百度搜索前10页的每页前三条结果)</h3>\n<p>实现效果：爬取百度搜索test前10页的前三条标题</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"爬虫用例\"</span>,<span class=\"attr\">\"case_process\"</span>:[],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"paral_crawler\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"paral_crawler\"</span>:&#123;<span class=\"attr\">\"api\"</span>:<span class=\"string\">\"http://127.0.0.1:12580/crawler/\"</span>,<span class=\"attr\">\"apicb\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"cc\"</span>:<span class=\"number\">5</span>,<span class=\"attr\">\"data\"</span>:[],<span class=\"attr\">\"fetch\"</span>:[&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"new Date()\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getcustomvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"时间\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题1\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题2\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"h3\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"标题3\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;],<span class=\"attr\">\"freq\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"send\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"urlapi\"</span>:<span class=\"string\">\"http://127.0.0.1:12580/crawler/url/\"</span>,<span class=\"attr\">\"urls\"</span>:[<span class=\"string\">\"https://www.baidu.com/s?wd=test&amp;pn=&#123;0-10&#125;0\"</span>]&#125;,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3>后台运行流程事务 + 消息通知用例</h3>\n<p>实现效果：流程事务在后台运行，打开百度，搜索天气，点击搜搜，获取到天气的框中的值，发送系统消息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"case_name\"</span>:<span class=\"string\">\"后台运行+消息发送\"</span>,<span class=\"attr\">\"case_process\"</span>:[&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"newpage\"</span>,<span class=\"attr\">\"sysmsg\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"body\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"https://www.baidu.com/s?ie=UTF-8&amp;wd=test\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#kw\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"click\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"INPUT#su\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;,&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"getvalue\"</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"DIV#content_left &gt; DIV.result-op.c-container.xpath-log &gt; DIV.op_weather4_twoicon_container_div &gt; DIV.op_weather4_twoicon &gt; A.op_weather4_twoicon_today.OP_LOG_LINK\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"key\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"1\"</span>&#125;,&#123;<span class=\"attr\">\"bgopen\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"check\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"expr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"n\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"opera\"</span>:<span class=\"string\">\"sendmessage\"</span>,<span class=\"attr\">\"sysmsg\"</span>:<span class=\"literal\">true</span>,<span class=\"attr\">\"tag\"</span>:<span class=\"string\">\"DIV#wrapper_wrapper\"</span>,<span class=\"attr\">\"value\"</span>:<span class=\"string\">\"天气：$&#123;key&#125;\"</span>,<span class=\"attr\">\"wait\"</span>:<span class=\"string\">\"0\"</span>&#125;],<span class=\"attr\">\"case_sourcecode\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"case_type\"</span>:<span class=\"string\">\"process\"</span>,<span class=\"attr\">\"control_url\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"fail_rerun\"</span>:<span class=\"literal\">false</span>,<span class=\"attr\">\"last_runtime\"</span>:<span class=\"number\">1611820796375</span>,<span class=\"attr\">\"runtime\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"sourcecode_url\"</span>:<span class=\"string\">\".*\"</span>&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"极米H3S投影仪入手体验","catalog":true,"date":"2001-03-23T09:31:43.000Z","_content":"\n## 前言\n\n本文是极米的H3S的上手体验与评测，也是新手入手第一个投影仪的探索与发现。\n\n评测全凭个人主观意见，如有雷同纯属雷同。\n\n## 主要功能\n\n### 投影\n\n投影仪的投影功能当然是最基本的功能，2200ANSI明流的亮度，这边主要还是看在明亮条件下和黑暗条件下的效果。\n\n### 梯形矫正\n\n梯形矫正是投影仪必不可少的功能，它可以在斜着投影时自动调整回矩形，\n\n否则就得手动调整投影仪摆放的位置和角度，很是麻烦。\n\n### 蓝牙\n\n投影仪的蓝牙可以连接耳机，或者连接其他蓝牙设备，如游戏手柄。\n\n耳机总的来说连接效果还不错，\n\n### 音响\n\n投影仪的音响还是挺不错的，相比于三四百的AI音箱，音质还是明显好一点的。\n\n\n\n### 局域网互传\n\n投影仪有文件管理系统，其中也可以连接局域网内的共享文件夹，\n\n这就使得电脑连接投影仪特别方便\n\n只需要将投影仪和电脑连上同一个局域网，在电脑上开启共享文件夹\n\n并把需要的文件放到共享文件夹里，在投影仪里就可以直接打开\n\n就比如可以看电脑里的视频，或者直接打开电脑上下载的APP\n\n本人一开始的当贝市场APP就是这个方法下载的\n\n## 应用\n\n投影仪使用的是安卓系统，所以可以装各类兼容电视版App，可以先装个当贝市场，然后通过当贝市场装别的应用。\n\n### 电视\n\n电视类应用挺多的，我这边选择了 电视家APP\n\n如果没有开VIP的话（一般不是强太多也不会去开这个），列表中的广告电视台还是比较多的\n\n个人来说也就看下中央电视台的几个\n\n### 视频\n\n默认是有一个极米的影视类应用存在，它是一个影视资源类的合集（腾讯视频，芒果TV，优酷视频），可以绑定多个VIP账号。\n\n这边主要还是单独装了腾讯视频，现在主要还是它的资源最多\n\n芒果TV，这个是买的时候有送一年VIP，所以装一下，其实资源不多，不过有一些刚下映的电影还是可以看下的。\n\n优酷视频，它和手机优酷App不是一个账号体系（所以并不能通用）\n\n### 直播\n\n平时没事主要还是喜欢看看直播，\n\n### 游戏\n\n投影仪自身也没说能支持游戏，但蓝牙能连接手柄，当贝市场中也有手柄游戏的版块。\n\n这边就可以来一次尝试。。。","source":"_posts/2021/article_5_H3S投影仪入手体验.md","raw":"---\ntitle: 极米H3S投影仪入手体验\ncatalog: true\ndate: 2001-03-23 17:31:43\ntags:\n    - H3S\n    - 评测\n    - 生活\n---\n\n## 前言\n\n本文是极米的H3S的上手体验与评测，也是新手入手第一个投影仪的探索与发现。\n\n评测全凭个人主观意见，如有雷同纯属雷同。\n\n## 主要功能\n\n### 投影\n\n投影仪的投影功能当然是最基本的功能，2200ANSI明流的亮度，这边主要还是看在明亮条件下和黑暗条件下的效果。\n\n### 梯形矫正\n\n梯形矫正是投影仪必不可少的功能，它可以在斜着投影时自动调整回矩形，\n\n否则就得手动调整投影仪摆放的位置和角度，很是麻烦。\n\n### 蓝牙\n\n投影仪的蓝牙可以连接耳机，或者连接其他蓝牙设备，如游戏手柄。\n\n耳机总的来说连接效果还不错，\n\n### 音响\n\n投影仪的音响还是挺不错的，相比于三四百的AI音箱，音质还是明显好一点的。\n\n\n\n### 局域网互传\n\n投影仪有文件管理系统，其中也可以连接局域网内的共享文件夹，\n\n这就使得电脑连接投影仪特别方便\n\n只需要将投影仪和电脑连上同一个局域网，在电脑上开启共享文件夹\n\n并把需要的文件放到共享文件夹里，在投影仪里就可以直接打开\n\n就比如可以看电脑里的视频，或者直接打开电脑上下载的APP\n\n本人一开始的当贝市场APP就是这个方法下载的\n\n## 应用\n\n投影仪使用的是安卓系统，所以可以装各类兼容电视版App，可以先装个当贝市场，然后通过当贝市场装别的应用。\n\n### 电视\n\n电视类应用挺多的，我这边选择了 电视家APP\n\n如果没有开VIP的话（一般不是强太多也不会去开这个），列表中的广告电视台还是比较多的\n\n个人来说也就看下中央电视台的几个\n\n### 视频\n\n默认是有一个极米的影视类应用存在，它是一个影视资源类的合集（腾讯视频，芒果TV，优酷视频），可以绑定多个VIP账号。\n\n这边主要还是单独装了腾讯视频，现在主要还是它的资源最多\n\n芒果TV，这个是买的时候有送一年VIP，所以装一下，其实资源不多，不过有一些刚下映的电影还是可以看下的。\n\n优酷视频，它和手机优酷App不是一个账号体系（所以并不能通用）\n\n### 直播\n\n平时没事主要还是喜欢看看直播，\n\n### 游戏\n\n投影仪自身也没说能支持游戏，但蓝牙能连接手柄，当贝市场中也有手柄游戏的版块。\n\n这边就可以来一次尝试。。。","slug":"2021/article_5_H3S投影仪入手体验","published":1,"updated":"2021-04-15T03:11:03.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76n00500770315cya73","content":"<h2 id=\"前言\">前言</h2>\n<p>本文是极米的H3S的上手体验与评测，也是新手入手第一个投影仪的探索与发现。</p>\n<p>评测全凭个人主观意见，如有雷同纯属雷同。</p>\n<h2 id=\"主要功能\">主要功能</h2>\n<h3 id=\"投影\">投影</h3>\n<p>投影仪的投影功能当然是最基本的功能，2200ANSI明流的亮度，这边主要还是看在明亮条件下和黑暗条件下的效果。</p>\n<h3 id=\"梯形矫正\">梯形矫正</h3>\n<p>梯形矫正是投影仪必不可少的功能，它可以在斜着投影时自动调整回矩形，</p>\n<p>否则就得手动调整投影仪摆放的位置和角度，很是麻烦。</p>\n<h3 id=\"蓝牙\">蓝牙</h3>\n<p>投影仪的蓝牙可以连接耳机，或者连接其他蓝牙设备，如游戏手柄。</p>\n<p>耳机总的来说连接效果还不错，</p>\n<h3 id=\"音响\">音响</h3>\n<p>投影仪的音响还是挺不错的，相比于三四百的AI音箱，音质还是明显好一点的。</p>\n<h3 id=\"局域网互传\">局域网互传</h3>\n<p>投影仪有文件管理系统，其中也可以连接局域网内的共享文件夹，</p>\n<p>这就使得电脑连接投影仪特别方便</p>\n<p>只需要将投影仪和电脑连上同一个局域网，在电脑上开启共享文件夹</p>\n<p>并把需要的文件放到共享文件夹里，在投影仪里就可以直接打开</p>\n<p>就比如可以看电脑里的视频，或者直接打开电脑上下载的APP</p>\n<p>本人一开始的当贝市场APP就是这个方法下载的</p>\n<h2 id=\"应用\">应用</h2>\n<p>投影仪使用的是安卓系统，所以可以装各类兼容电视版App，可以先装个当贝市场，然后通过当贝市场装别的应用。</p>\n<h3 id=\"电视\">电视</h3>\n<p>电视类应用挺多的，我这边选择了 电视家APP</p>\n<p>如果没有开VIP的话（一般不是强太多也不会去开这个），列表中的广告电视台还是比较多的</p>\n<p>个人来说也就看下中央电视台的几个</p>\n<h3 id=\"视频\">视频</h3>\n<p>默认是有一个极米的影视类应用存在，它是一个影视资源类的合集（腾讯视频，芒果TV，优酷视频），可以绑定多个VIP账号。</p>\n<p>这边主要还是单独装了腾讯视频，现在主要还是它的资源最多</p>\n<p>芒果TV，这个是买的时候有送一年VIP，所以装一下，其实资源不多，不过有一些刚下映的电影还是可以看下的。</p>\n<p>优酷视频，它和手机优酷App不是一个账号体系（所以并不能通用）</p>\n<h3 id=\"直播\">直播</h3>\n<p>平时没事主要还是喜欢看看直播，</p>\n<h3 id=\"游戏\">游戏</h3>\n<p>投影仪自身也没说能支持游戏，但蓝牙能连接手柄，当贝市场中也有手柄游戏的版块。</p>\n<p>这边就可以来一次尝试。。。</p>\n","excerpt":"","more":"<h2>前言</h2>\n<p>本文是极米的H3S的上手体验与评测，也是新手入手第一个投影仪的探索与发现。</p>\n<p>评测全凭个人主观意见，如有雷同纯属雷同。</p>\n<h2>主要功能</h2>\n<h3>投影</h3>\n<p>投影仪的投影功能当然是最基本的功能，2200ANSI明流的亮度，这边主要还是看在明亮条件下和黑暗条件下的效果。</p>\n<h3>梯形矫正</h3>\n<p>梯形矫正是投影仪必不可少的功能，它可以在斜着投影时自动调整回矩形，</p>\n<p>否则就得手动调整投影仪摆放的位置和角度，很是麻烦。</p>\n<h3>蓝牙</h3>\n<p>投影仪的蓝牙可以连接耳机，或者连接其他蓝牙设备，如游戏手柄。</p>\n<p>耳机总的来说连接效果还不错，</p>\n<h3>音响</h3>\n<p>投影仪的音响还是挺不错的，相比于三四百的AI音箱，音质还是明显好一点的。</p>\n<h3>局域网互传</h3>\n<p>投影仪有文件管理系统，其中也可以连接局域网内的共享文件夹，</p>\n<p>这就使得电脑连接投影仪特别方便</p>\n<p>只需要将投影仪和电脑连上同一个局域网，在电脑上开启共享文件夹</p>\n<p>并把需要的文件放到共享文件夹里，在投影仪里就可以直接打开</p>\n<p>就比如可以看电脑里的视频，或者直接打开电脑上下载的APP</p>\n<p>本人一开始的当贝市场APP就是这个方法下载的</p>\n<h2>应用</h2>\n<p>投影仪使用的是安卓系统，所以可以装各类兼容电视版App，可以先装个当贝市场，然后通过当贝市场装别的应用。</p>\n<h3>电视</h3>\n<p>电视类应用挺多的，我这边选择了 电视家APP</p>\n<p>如果没有开VIP的话（一般不是强太多也不会去开这个），列表中的广告电视台还是比较多的</p>\n<p>个人来说也就看下中央电视台的几个</p>\n<h3>视频</h3>\n<p>默认是有一个极米的影视类应用存在，它是一个影视资源类的合集（腾讯视频，芒果TV，优酷视频），可以绑定多个VIP账号。</p>\n<p>这边主要还是单独装了腾讯视频，现在主要还是它的资源最多</p>\n<p>芒果TV，这个是买的时候有送一年VIP，所以装一下，其实资源不多，不过有一些刚下映的电影还是可以看下的。</p>\n<p>优酷视频，它和手机优酷App不是一个账号体系（所以并不能通用）</p>\n<h3>直播</h3>\n<p>平时没事主要还是喜欢看看直播，</p>\n<h3>游戏</h3>\n<p>投影仪自身也没说能支持游戏，但蓝牙能连接手柄，当贝市场中也有手柄游戏的版块。</p>\n<p>这边就可以来一次尝试。。。</p>\n"},{"title":"HDFS分布式文件系统小结","catalog":true,"date":"2021-03-11T02:31:43.000Z","_content":"\n\n## HDFS概念\n\n### HDFS定义\nHDFS是Hadoop的一个分布式文件系统，全称叫Hadoop Distributed File System。\n\n\n### HDFS特点\n\n#### 高容错性\nHDFS 可以稳定运行在商用硬件集群上，有冗余副本，心跳机制，安全模式等功能<br />支持元数据快照，将失效的集群回滚到之前一个正常的时间点上。<br />\n\n\n#### 大数据集存储\n一个磁盘无法放下的 GB 或 TB 的文件，HDFS将它分成小块（block）存储。<br />\n\n\n#### 一致性模型（**write-once-read-many**）\nHDFS 通常是一次写入，多次读取，不支持随机写操作，可以在文件末尾追加。<br />\n\n\n#### 适合于分布式计算\n一般的计算需要将数据输入到程序中，网络传输大文件比较慢。<br />HDFS则是提供接口将计算先放到每块数据中执行，最后再将结果合并。\n\n\n### 与Hadoop关系\n[Hadoop是一个分布式系统基础架构](#lXVXT)，其中核心组件有HDFS，MapReduce，YARN。<br />\n\n\n## HDFS架构\n\n### 架构图\n![image.png](/img/mypost/2021/4-1.png)\n\n### 主从结构\n由一个Namenode和一定数目的Datanodes组成。<br />\n<br />Namenode是一个中心服务，\n\n- 负责管理文件系统的Namespace；\n- 数据块到具体Datanode节点的映射和数据块到文件的映射；\n- 负责执行文件系统的Namespace操作，比如打开、关闭、重命名文件或目录；\n\n\n<br />集群中的Datanode一般是一个节点一个\n\n- 负责管理它所在节点上数据的存储；\n- 负责处理文件系统客户端的读写请求；\n- 在Namenode调度下进行数据块的创建、删除和复制；\n- 周期性的上报心跳信号和块状态报告到Namenode；\n\n<br />\n\n## HDFS数据存储  \n\n![image.png](/img/mypost/2021/4-2.png)\n\n### 分块存储\n\n一个大文件存储到HDFS上，会被分成多个Block。目前HDFS分块默认为128M，支持修改。<br />如果文件大小没有到达块的最小空间，该文件只会占据自己本身空间大小。\n\n### 备份机制\n\nHDFS默认备份3份，存储在不同的Datanode节点中。<br />每个文件的数据块大小和副本系数都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。\n\n### 机架感知\n\n![image.png](/img/mypost/2021/4-3.png)<br />为了防止当整个机架失效时数据的丢失，Datanode一般会分布在不同的机架上。<br />另外可以在读取数据的时候计算最近的副本的距离，尽量使用同一个机架上的Block。<br />\n\n<br />首先通过管理员手动配置机器与机架的关系，一般是维护一个map，将脚本文件配置在配置文件中。<br />\n\n\n### FsImage 和 EditLog\n\n- **EditLog**：保存元数据更改记录，一个文件只记录一段时间的信息。\n- **FsImage**：保存文件系统目录树以及文件和 block 的对应关系，理解为元数据镜像文件，某个时刻整个 HDFS 系统文件信息的快照；\n\n只有在NameNode重启时，edit logs才会合并到fsimage文件中，从而得到一个文件系统的最新快照。但是在产品集群中NameNode是很少重启的，这也意味着当NameNode运行了很长时间后，edit logs文件会变得很大<br />\n\n- **SecondaryNameNode**：定期合并NameNode的edit logs到fsimage文件中\n\n![image.png](/img/mypost/2021/4-4.png)\n\n> 1. 触发检查点（定期/定多少事务记录）\n> 1. 触发 checkpoint，NameNode 停止向 edits 中写新的记录，另外生成一个 edits.new 文件，将新的事务记录在此文件中\n> 1. SecondaryNameNode 通过 HTTP 请求，从 NameNode 下载 fsimage 和 edits 文件，合并生成 fsimage.chkpoint 文件；\n> 1. SecondaryNameNode 再将新生成的 fsimage.chkpoint 上传到 NameNode 并重命名为 fsimage，直接覆盖旧的 fsimage，实际上中间的过程还有一些 MD5 完整性校验，检查文件上传下载后是否完整；\n> 1. 将 edits.new 文件重命名为 edits 文件，旧的 edits 文件已经合并到 fsimage；\n\n\n## HDFS文件读写\n\n<br />运行在HDFS上的应用和普通的应用不同，需要流式访问它们的数据集。HDFS的设计中更多的考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。POSIX标准设置的很多硬性约束对HDFS应用系统不是必需的。为了提高数据的吞吐量，在一些关键方面对POSIX的语义做了一些修改。<br />\n\n\n### HDFS中的block、packet、chunk\n\n#### block\n\n文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。<br />\n\n\n#### packet\n\npacket是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。<br />\n\n\n#### chunk\n\nchunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br />\n\n### 读数据过程\n\n![image](/img/mypost/2021/4-7.jpg)\n\n\n### 写数据过程\n\n![image](/img/mypost/2021/4-8.jpg)\n\n\n\n## 参考资料\n\n### [Hadoop官方文档V3.3版本 ](https://hadoop.apache.org/docs/r3.3.0/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Simple_Coherency_Model)\n\n### [大数据之 HDFS 图文详解](https://www.sysapi.com/article/485784.html)\n\n### [分布式文件系统架构对比](https://juejin.cn/post/6844903630991032327)\n\n### [分布式存储glusterfs](https://www.jianshu.com/p/2098d0617939)\n\n### [机架感知概念及配置实现](https://blog.csdn.net/wypersist/article/details/79797559)\n\n### [TFS的原理与使用](https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fa4HlcuA)\n\n### [Hadoop数据完整性与CheckSum校验原理](https://blog.csdn.net/lb812913059/article/details/79718303)\n\n### [HDFS读写流程](https://blog.csdn.net/whdxjbw/article/details/81072207)\n\n### [CRUSH算法的原理与实现](https://zhuanlan.zhihu.com/p/58888246)\n\n### [Hadoop个人分享](https://coding-pages-bucket-3440936-7810273-13586-512516-1300444322.cos-website.ap-shanghai.myqcloud.com/tags/#HADOOP)\n\n\n\n## 附件\n\n\n\n### 文件系统简介\n文件系统是计算机中一个非常重要的组件，为存储设备提供一致的访问和管理方式。<br />**可移植操作系统接口**（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。<br />\n\n\n#### 通用属性\n数据是以文件的形式存在，提供 Open、Read、Write、Seek、Close 等API 进行访问；<br />文件以树形目录进行组织，提供原子的重命名（Rename）操作改变文件或者目录的位置<br />\n\n\n#### 单机文件系统\nwindows：FAT/FAT32/NTFS，linux：EXT2/EXT3/EXT4/XFS/BtrFS，mac：[APFS ](https://developer.apple.com/support/downloads/Apple-File-System-Reference.pdf)<br />\n\n\n#### 单机文件系统挑战\n\n- 共享：无法同时为分布在多个机器中的应用提供访问，于是有了 NFS 协议，可以将单机文件系统通过网络的方式同时提供给多个机器访问。\n- 容量：无法提供足够空间来存储数据，数据只好分散在多个隔离的单机文件系统里。\n- 性能：无法满足某些应用需要非常高的读写性能要求，应用只好做逻辑拆分同时读写多个文件系统。\n- 可靠性：受限于单个机器的可靠性，机器故障可能导致数据丢失。\n- 可用性：受限于单个操作系统的可用性，故障或者重启等运维操作会导致不可用。\n\n\n\n\n### 开源分布式架构对比\n| 分布式文件系统 | 开发语言 | 使用场景 | 优点 | 缺点 |\n| --- | --- | --- | --- | --- |\n| [HDFS](https://hadoop.apache.org/docs/r3.3.0/) | JAVA | 大文件存储，大数据分析 | <br />1. 经典<br />1. 大数据场景有优势<br />1. 用户数量大<br />1. 资料丰富<br />1. 高吞吐<br /> | <br />1. 不通用，并不提供完整的POSIX语义<br />1. 小文件性能较差<br />1. 只支持追加写<br />1. 不能低延迟<br /> |\n| [GlusterFS](https://docs.gluster.org/en/latest/) | C | 大文件存储场景 | <br />1. 老牌分布式文件系统<br />1. 应用众多<br />1. 云存储和流媒体<br />1. 没有元数据服务器的设计，无单点故障<br /> | <br />1. 扩容、缩容时影响的服务器较多<br />1. 小文件性能较差<br /> |\n| [CephFS](https://docs.ceph.com/en/latest/cephfs/) | C++ | 单机群大中小文件 | <br />1. crush算法比较有特点<br />1. ceph架构支持块存储，对象存储，文件存储<br /> | <br />1. 不够成熟稳定，问题较多<br />1. 读写效率不高<br /> |\n| [MooseFS](https://moosefs.com/products/#moosefs) | C | 单机群大中小文件 | <br />1. 通过fuse支持了标准的posix，实现通用的文件系统<br /> | <br />1. 社区不活跃<br />1. Master Server本身的性能瓶颈<br /> |\n| [TFS](https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fatYIIqc) | C++ | 主要设计用于小于1MB的小文件 | <br />1. 解决分布式文件系统小文件的问题<br /> | <br />1. 文档不全<br />1. 使用较为困难<br /> |\n\n\n### \n\n### 为什么要设置Block为128M\n\n1. 如果块设置过大\n   - 从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；\n   - mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。\n2. 如果块设置过小\n   - 存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；\n   - 文件块过小，寻址时间增大，导致程序一直在找block的开始位置。\n> 1. HDFS中平均寻址时间大概为10ms；\n> 2. 经过前人的大量测试发现，寻址时间为传输时间的1%时，为最佳状态；\n>     所以最佳传输时间为10ms/0.01=1000ms=1s\n> 3. 目前磁盘的传输速率普遍为100MB/s；\n\n\n\n\n### 网络拓扑机器之间的距离\n\n![image.png](/img/mypost/2021/4-5.png)<br />D1,R1 都是交换机，最底层是 datanode。则 H1 的<br />rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid<br />信息可以通过 topology.script.file.name 配置。有了这些 rackid 信息<br />就可以计算出任意两台 datanode 之间的距离。<br />\n<br />1.distance(/D1/R1/H1,/D1/R1/H1)=0  相同的 datanode<br />2.distance(/D1/R1/H1,/D1/R1/H2)=2  同一 rack 下的不同 datanode<br />3.distance(/D1/R1/H1,/D1/R1/H4)=4  同一 IDC(互联网数据中心<br />\n\n\n### hadoop2.x架构图\n\n![image.png](/img/mypost/2021/4-6.png)\n","source":"_posts/2021/article_4_HDFS分布式文件系统小结.md","raw":"---\ntitle: HDFS分布式文件系统小结\ncatalog: true\ndate: 2021-03-11 10:31:43\ntags:\n    - HDFS\n    - HADOOP\n---\n\n\n## HDFS概念\n\n### HDFS定义\nHDFS是Hadoop的一个分布式文件系统，全称叫Hadoop Distributed File System。\n\n\n### HDFS特点\n\n#### 高容错性\nHDFS 可以稳定运行在商用硬件集群上，有冗余副本，心跳机制，安全模式等功能<br />支持元数据快照，将失效的集群回滚到之前一个正常的时间点上。<br />\n\n\n#### 大数据集存储\n一个磁盘无法放下的 GB 或 TB 的文件，HDFS将它分成小块（block）存储。<br />\n\n\n#### 一致性模型（**write-once-read-many**）\nHDFS 通常是一次写入，多次读取，不支持随机写操作，可以在文件末尾追加。<br />\n\n\n#### 适合于分布式计算\n一般的计算需要将数据输入到程序中，网络传输大文件比较慢。<br />HDFS则是提供接口将计算先放到每块数据中执行，最后再将结果合并。\n\n\n### 与Hadoop关系\n[Hadoop是一个分布式系统基础架构](#lXVXT)，其中核心组件有HDFS，MapReduce，YARN。<br />\n\n\n## HDFS架构\n\n### 架构图\n![image.png](/img/mypost/2021/4-1.png)\n\n### 主从结构\n由一个Namenode和一定数目的Datanodes组成。<br />\n<br />Namenode是一个中心服务，\n\n- 负责管理文件系统的Namespace；\n- 数据块到具体Datanode节点的映射和数据块到文件的映射；\n- 负责执行文件系统的Namespace操作，比如打开、关闭、重命名文件或目录；\n\n\n<br />集群中的Datanode一般是一个节点一个\n\n- 负责管理它所在节点上数据的存储；\n- 负责处理文件系统客户端的读写请求；\n- 在Namenode调度下进行数据块的创建、删除和复制；\n- 周期性的上报心跳信号和块状态报告到Namenode；\n\n<br />\n\n## HDFS数据存储  \n\n![image.png](/img/mypost/2021/4-2.png)\n\n### 分块存储\n\n一个大文件存储到HDFS上，会被分成多个Block。目前HDFS分块默认为128M，支持修改。<br />如果文件大小没有到达块的最小空间，该文件只会占据自己本身空间大小。\n\n### 备份机制\n\nHDFS默认备份3份，存储在不同的Datanode节点中。<br />每个文件的数据块大小和副本系数都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。\n\n### 机架感知\n\n![image.png](/img/mypost/2021/4-3.png)<br />为了防止当整个机架失效时数据的丢失，Datanode一般会分布在不同的机架上。<br />另外可以在读取数据的时候计算最近的副本的距离，尽量使用同一个机架上的Block。<br />\n\n<br />首先通过管理员手动配置机器与机架的关系，一般是维护一个map，将脚本文件配置在配置文件中。<br />\n\n\n### FsImage 和 EditLog\n\n- **EditLog**：保存元数据更改记录，一个文件只记录一段时间的信息。\n- **FsImage**：保存文件系统目录树以及文件和 block 的对应关系，理解为元数据镜像文件，某个时刻整个 HDFS 系统文件信息的快照；\n\n只有在NameNode重启时，edit logs才会合并到fsimage文件中，从而得到一个文件系统的最新快照。但是在产品集群中NameNode是很少重启的，这也意味着当NameNode运行了很长时间后，edit logs文件会变得很大<br />\n\n- **SecondaryNameNode**：定期合并NameNode的edit logs到fsimage文件中\n\n![image.png](/img/mypost/2021/4-4.png)\n\n> 1. 触发检查点（定期/定多少事务记录）\n> 1. 触发 checkpoint，NameNode 停止向 edits 中写新的记录，另外生成一个 edits.new 文件，将新的事务记录在此文件中\n> 1. SecondaryNameNode 通过 HTTP 请求，从 NameNode 下载 fsimage 和 edits 文件，合并生成 fsimage.chkpoint 文件；\n> 1. SecondaryNameNode 再将新生成的 fsimage.chkpoint 上传到 NameNode 并重命名为 fsimage，直接覆盖旧的 fsimage，实际上中间的过程还有一些 MD5 完整性校验，检查文件上传下载后是否完整；\n> 1. 将 edits.new 文件重命名为 edits 文件，旧的 edits 文件已经合并到 fsimage；\n\n\n## HDFS文件读写\n\n<br />运行在HDFS上的应用和普通的应用不同，需要流式访问它们的数据集。HDFS的设计中更多的考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。POSIX标准设置的很多硬性约束对HDFS应用系统不是必需的。为了提高数据的吞吐量，在一些关键方面对POSIX的语义做了一些修改。<br />\n\n\n### HDFS中的block、packet、chunk\n\n#### block\n\n文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。<br />\n\n\n#### packet\n\npacket是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。<br />\n\n\n#### chunk\n\nchunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br />\n\n### 读数据过程\n\n![image](/img/mypost/2021/4-7.jpg)\n\n\n### 写数据过程\n\n![image](/img/mypost/2021/4-8.jpg)\n\n\n\n## 参考资料\n\n### [Hadoop官方文档V3.3版本 ](https://hadoop.apache.org/docs/r3.3.0/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Simple_Coherency_Model)\n\n### [大数据之 HDFS 图文详解](https://www.sysapi.com/article/485784.html)\n\n### [分布式文件系统架构对比](https://juejin.cn/post/6844903630991032327)\n\n### [分布式存储glusterfs](https://www.jianshu.com/p/2098d0617939)\n\n### [机架感知概念及配置实现](https://blog.csdn.net/wypersist/article/details/79797559)\n\n### [TFS的原理与使用](https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fa4HlcuA)\n\n### [Hadoop数据完整性与CheckSum校验原理](https://blog.csdn.net/lb812913059/article/details/79718303)\n\n### [HDFS读写流程](https://blog.csdn.net/whdxjbw/article/details/81072207)\n\n### [CRUSH算法的原理与实现](https://zhuanlan.zhihu.com/p/58888246)\n\n### [Hadoop个人分享](https://coding-pages-bucket-3440936-7810273-13586-512516-1300444322.cos-website.ap-shanghai.myqcloud.com/tags/#HADOOP)\n\n\n\n## 附件\n\n\n\n### 文件系统简介\n文件系统是计算机中一个非常重要的组件，为存储设备提供一致的访问和管理方式。<br />**可移植操作系统接口**（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。<br />\n\n\n#### 通用属性\n数据是以文件的形式存在，提供 Open、Read、Write、Seek、Close 等API 进行访问；<br />文件以树形目录进行组织，提供原子的重命名（Rename）操作改变文件或者目录的位置<br />\n\n\n#### 单机文件系统\nwindows：FAT/FAT32/NTFS，linux：EXT2/EXT3/EXT4/XFS/BtrFS，mac：[APFS ](https://developer.apple.com/support/downloads/Apple-File-System-Reference.pdf)<br />\n\n\n#### 单机文件系统挑战\n\n- 共享：无法同时为分布在多个机器中的应用提供访问，于是有了 NFS 协议，可以将单机文件系统通过网络的方式同时提供给多个机器访问。\n- 容量：无法提供足够空间来存储数据，数据只好分散在多个隔离的单机文件系统里。\n- 性能：无法满足某些应用需要非常高的读写性能要求，应用只好做逻辑拆分同时读写多个文件系统。\n- 可靠性：受限于单个机器的可靠性，机器故障可能导致数据丢失。\n- 可用性：受限于单个操作系统的可用性，故障或者重启等运维操作会导致不可用。\n\n\n\n\n### 开源分布式架构对比\n| 分布式文件系统 | 开发语言 | 使用场景 | 优点 | 缺点 |\n| --- | --- | --- | --- | --- |\n| [HDFS](https://hadoop.apache.org/docs/r3.3.0/) | JAVA | 大文件存储，大数据分析 | <br />1. 经典<br />1. 大数据场景有优势<br />1. 用户数量大<br />1. 资料丰富<br />1. 高吞吐<br /> | <br />1. 不通用，并不提供完整的POSIX语义<br />1. 小文件性能较差<br />1. 只支持追加写<br />1. 不能低延迟<br /> |\n| [GlusterFS](https://docs.gluster.org/en/latest/) | C | 大文件存储场景 | <br />1. 老牌分布式文件系统<br />1. 应用众多<br />1. 云存储和流媒体<br />1. 没有元数据服务器的设计，无单点故障<br /> | <br />1. 扩容、缩容时影响的服务器较多<br />1. 小文件性能较差<br /> |\n| [CephFS](https://docs.ceph.com/en/latest/cephfs/) | C++ | 单机群大中小文件 | <br />1. crush算法比较有特点<br />1. ceph架构支持块存储，对象存储，文件存储<br /> | <br />1. 不够成熟稳定，问题较多<br />1. 读写效率不高<br /> |\n| [MooseFS](https://moosefs.com/products/#moosefs) | C | 单机群大中小文件 | <br />1. 通过fuse支持了标准的posix，实现通用的文件系统<br /> | <br />1. 社区不活跃<br />1. Master Server本身的性能瓶颈<br /> |\n| [TFS](https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fatYIIqc) | C++ | 主要设计用于小于1MB的小文件 | <br />1. 解决分布式文件系统小文件的问题<br /> | <br />1. 文档不全<br />1. 使用较为困难<br /> |\n\n\n### \n\n### 为什么要设置Block为128M\n\n1. 如果块设置过大\n   - 从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；\n   - mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。\n2. 如果块设置过小\n   - 存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；\n   - 文件块过小，寻址时间增大，导致程序一直在找block的开始位置。\n> 1. HDFS中平均寻址时间大概为10ms；\n> 2. 经过前人的大量测试发现，寻址时间为传输时间的1%时，为最佳状态；\n>     所以最佳传输时间为10ms/0.01=1000ms=1s\n> 3. 目前磁盘的传输速率普遍为100MB/s；\n\n\n\n\n### 网络拓扑机器之间的距离\n\n![image.png](/img/mypost/2021/4-5.png)<br />D1,R1 都是交换机，最底层是 datanode。则 H1 的<br />rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid<br />信息可以通过 topology.script.file.name 配置。有了这些 rackid 信息<br />就可以计算出任意两台 datanode 之间的距离。<br />\n<br />1.distance(/D1/R1/H1,/D1/R1/H1)=0  相同的 datanode<br />2.distance(/D1/R1/H1,/D1/R1/H2)=2  同一 rack 下的不同 datanode<br />3.distance(/D1/R1/H1,/D1/R1/H4)=4  同一 IDC(互联网数据中心<br />\n\n\n### hadoop2.x架构图\n\n![image.png](/img/mypost/2021/4-6.png)\n","slug":"2021/article_4_HDFS分布式文件系统小结","published":1,"updated":"2021-03-11T08:54:10.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76o00520770tlq55zet","content":"<h2 id=\"hdfs概念\">HDFS概念</h2>\n<h3 id=\"hdfs定义\">HDFS定义</h3>\n<p>HDFS是Hadoop的一个分布式文件系统，全称叫Hadoop Distributed File System。</p>\n<h3 id=\"hdfs特点\">HDFS特点</h3>\n<h4 id=\"高容错性\">高容错性</h4>\n<p>HDFS 可以稳定运行在商用硬件集群上，有冗余副本，心跳机制，安全模式等功能<br>支持元数据快照，将失效的集群回滚到之前一个正常的时间点上。<br></p>\n<h4 id=\"大数据集存储\">大数据集存储</h4>\n<p>一个磁盘无法放下的 GB 或 TB 的文件，HDFS将它分成小块（block）存储。<br></p>\n<h4 id=\"一致性模型write-once-read-many\">一致性模型（<strong>write-once-read-many</strong>）</h4>\n<p>HDFS 通常是一次写入，多次读取，不支持随机写操作，可以在文件末尾追加。<br></p>\n<h4 id=\"适合于分布式计算\">适合于分布式计算</h4>\n<p>一般的计算需要将数据输入到程序中，网络传输大文件比较慢。<br>HDFS则是提供接口将计算先放到每块数据中执行，最后再将结果合并。</p>\n<h3 id=\"与hadoop关系\">与Hadoop关系</h3>\n<p><a href=\"#lXVXT\">Hadoop是一个分布式系统基础架构</a>，其中核心组件有HDFS，MapReduce，YARN。<br></p>\n<h2 id=\"hdfs架构\">HDFS架构</h2>\n<h3 id=\"架构图\">架构图</h3>\n<p><img src=\"/img/mypost/2021/4-1.png\" alt=\"image.png\"></p>\n<h3 id=\"主从结构\">主从结构</h3>\n<p>由一个Namenode和一定数目的Datanodes组成。<br><br>\n<br>Namenode是一个中心服务，</p>\n<ul>\n<li>负责管理文件系统的Namespace；</li>\n<li>数据块到具体Datanode节点的映射和数据块到文件的映射；</li>\n<li>负责执行文件系统的Namespace操作，比如打开、关闭、重命名文件或目录；</li>\n</ul>\n<p><br>集群中的Datanode一般是一个节点一个</p>\n<ul>\n<li>负责管理它所在节点上数据的存储；</li>\n<li>负责处理文件系统客户端的读写请求；</li>\n<li>在Namenode调度下进行数据块的创建、删除和复制；</li>\n<li>周期性的上报心跳信号和块状态报告到Namenode；</li>\n</ul>\n<br>\n<h2 id=\"hdfs数据存储\">HDFS数据存储</h2>\n<p><img src=\"/img/mypost/2021/4-2.png\" alt=\"image.png\"></p>\n<h3 id=\"分块存储\">分块存储</h3>\n<p>一个大文件存储到HDFS上，会被分成多个Block。目前HDFS分块默认为128M，支持修改。<br>如果文件大小没有到达块的最小空间，该文件只会占据自己本身空间大小。</p>\n<h3 id=\"备份机制\">备份机制</h3>\n<p>HDFS默认备份3份，存储在不同的Datanode节点中。<br>每个文件的数据块大小和副本系数都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。</p>\n<h3 id=\"机架感知\">机架感知</h3>\n<p><img src=\"/img/mypost/2021/4-3.png\" alt=\"image.png\"><br>为了防止当整个机架失效时数据的丢失，Datanode一般会分布在不同的机架上。<br>另外可以在读取数据的时候计算最近的副本的距离，尽量使用同一个机架上的Block。<br></p>\n<p><br>首先通过管理员手动配置机器与机架的关系，一般是维护一个map，将脚本文件配置在配置文件中。<br></p>\n<h3 id=\"fsimage-和-editlog\">FsImage 和 EditLog</h3>\n<ul>\n<li><strong>EditLog</strong>：保存元数据更改记录，一个文件只记录一段时间的信息。</li>\n<li><strong>FsImage</strong>：保存文件系统目录树以及文件和 block 的对应关系，理解为元数据镜像文件，某个时刻整个 HDFS 系统文件信息的快照；</li>\n</ul>\n<p>只有在NameNode重启时，edit logs才会合并到fsimage文件中，从而得到一个文件系统的最新快照。但是在产品集群中NameNode是很少重启的，这也意味着当NameNode运行了很长时间后，edit logs文件会变得很大<br></p>\n<ul>\n<li><strong>SecondaryNameNode</strong>：定期合并NameNode的edit logs到fsimage文件中</li>\n</ul>\n<p><img src=\"/img/mypost/2021/4-4.png\" alt=\"image.png\"></p>\n<blockquote>\n<ol>\n<li>触发检查点（定期/定多少事务记录）</li>\n<li>触发 checkpoint，NameNode 停止向 edits 中写新的记录，另外生成一个 edits.new 文件，将新的事务记录在此文件中</li>\n<li>SecondaryNameNode 通过 HTTP 请求，从 NameNode 下载 fsimage 和 edits 文件，合并生成 fsimage.chkpoint 文件；</li>\n<li>SecondaryNameNode 再将新生成的 fsimage.chkpoint 上传到 NameNode 并重命名为 fsimage，直接覆盖旧的 fsimage，实际上中间的过程还有一些 MD5 完整性校验，检查文件上传下载后是否完整；</li>\n<li>将 edits.new 文件重命名为 edits 文件，旧的 edits 文件已经合并到 fsimage；</li>\n</ol>\n</blockquote>\n<h2 id=\"hdfs文件读写\">HDFS文件读写</h2>\n<p><br>运行在HDFS上的应用和普通的应用不同，需要流式访问它们的数据集。HDFS的设计中更多的考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。POSIX标准设置的很多硬性约束对HDFS应用系统不是必需的。为了提高数据的吞吐量，在一些关键方面对POSIX的语义做了一些修改。<br></p>\n<h3 id=\"hdfs中的block-packet-chunk\">HDFS中的block、packet、chunk</h3>\n<h4 id=\"block\">block</h4>\n<p>文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。<br></p>\n<h4 id=\"packet\">packet</h4>\n<p>packet是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。<br></p>\n<h4 id=\"chunk\">chunk</h4>\n<p>chunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br></p>\n<h3 id=\"读数据过程\">读数据过程</h3>\n<p><img src=\"/img/mypost/2021/4-7.jpg\" alt=\"image\"></p>\n<h3 id=\"写数据过程\">写数据过程</h3>\n<p><img src=\"/img/mypost/2021/4-8.jpg\" alt=\"image\"></p>\n<h2 id=\"参考资料\">参考资料</h2>\n<h3 id=\"hadoop官方文档v33版本\"><a href=\"https://hadoop.apache.org/docs/r3.3.0/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Simple_Coherency_Model\" target=\"_blank\" rel=\"external\">Hadoop官方文档V3.3版本 </a></h3>\n<h3 id=\"大数据之-hdfs-图文详解\"><a href=\"https://www.sysapi.com/article/485784.html\" target=\"_blank\" rel=\"external\">大数据之 HDFS 图文详解</a></h3>\n<h3 id=\"分布式文件系统架构对比\"><a href=\"https://juejin.cn/post/6844903630991032327\" target=\"_blank\" rel=\"external\">分布式文件系统架构对比</a></h3>\n<h3 id=\"分布式存储glusterfs\"><a href=\"https://www.jianshu.com/p/2098d0617939\" target=\"_blank\" rel=\"external\">分布式存储glusterfs</a></h3>\n<h3 id=\"机架感知概念及配置实现\"><a href=\"https://blog.csdn.net/wypersist/article/details/79797559\" target=\"_blank\" rel=\"external\">机架感知概念及配置实现</a></h3>\n<h3 id=\"tfs的原理与使用\"><a href=\"https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fa4HlcuA\" target=\"_blank\" rel=\"external\">TFS的原理与使用</a></h3>\n<h3 id=\"hadoop数据完整性与checksum校验原理\"><a href=\"https://blog.csdn.net/lb812913059/article/details/79718303\" target=\"_blank\" rel=\"external\">Hadoop数据完整性与CheckSum校验原理</a></h3>\n<h3 id=\"hdfs读写流程\"><a href=\"https://blog.csdn.net/whdxjbw/article/details/81072207\" target=\"_blank\" rel=\"external\">HDFS读写流程</a></h3>\n<h3 id=\"crush算法的原理与实现\"><a href=\"https://zhuanlan.zhihu.com/p/58888246\" target=\"_blank\" rel=\"external\">CRUSH算法的原理与实现</a></h3>\n<h3 id=\"hadoop个人分享\"><a href=\"https://coding-pages-bucket-3440936-7810273-13586-512516-1300444322.cos-website.ap-shanghai.myqcloud.com/tags/#HADOOP\" target=\"_blank\" rel=\"external\">Hadoop个人分享</a></h3>\n<h2 id=\"附件\">附件</h2>\n<h3 id=\"文件系统简介\">文件系统简介</h3>\n<p>文件系统是计算机中一个非常重要的组件，为存储设备提供一致的访问和管理方式。<br><strong>可移植操作系统接口</strong>（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。<br></p>\n<h4 id=\"通用属性\">通用属性</h4>\n<p>数据是以文件的形式存在，提供 Open、Read、Write、Seek、Close 等API 进行访问；<br>文件以树形目录进行组织，提供原子的重命名（Rename）操作改变文件或者目录的位置<br></p>\n<h4 id=\"单机文件系统\">单机文件系统</h4>\n<p>windows：FAT/FAT32/NTFS，linux：EXT2/EXT3/EXT4/XFS/BtrFS，mac：<a href=\"https://developer.apple.com/support/downloads/Apple-File-System-Reference.pdf\" target=\"_blank\" rel=\"external\">APFS </a><br></p>\n<h4 id=\"单机文件系统挑战\">单机文件系统挑战</h4>\n<ul>\n<li>共享：无法同时为分布在多个机器中的应用提供访问，于是有了 NFS 协议，可以将单机文件系统通过网络的方式同时提供给多个机器访问。</li>\n<li>容量：无法提供足够空间来存储数据，数据只好分散在多个隔离的单机文件系统里。</li>\n<li>性能：无法满足某些应用需要非常高的读写性能要求，应用只好做逻辑拆分同时读写多个文件系统。</li>\n<li>可靠性：受限于单个机器的可靠性，机器故障可能导致数据丢失。</li>\n<li>可用性：受限于单个操作系统的可用性，故障或者重启等运维操作会导致不可用。</li>\n</ul>\n<h3 id=\"开源分布式架构对比\">开源分布式架构对比</h3>\n<table>\n<thead>\n<tr>\n<th>分布式文件系统</th>\n<th>开发语言</th>\n<th>使用场景</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://hadoop.apache.org/docs/r3.3.0/\" target=\"_blank\" rel=\"external\">HDFS</a></td>\n<td>JAVA</td>\n<td>大文件存储，大数据分析</td>\n<td><br>1. 经典<br>1. 大数据场景有优势<br>1. 用户数量大<br>1. 资料丰富<br>1. 高吞吐<br></td>\n<td><br>1. 不通用，并不提供完整的POSIX语义<br>1. 小文件性能较差<br>1. 只支持追加写<br>1. 不能低延迟<br></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.gluster.org/en/latest/\" target=\"_blank\" rel=\"external\">GlusterFS</a></td>\n<td>C</td>\n<td>大文件存储场景</td>\n<td><br>1. 老牌分布式文件系统<br>1. 应用众多<br>1. 云存储和流媒体<br>1. 没有元数据服务器的设计，无单点故障<br></td>\n<td><br>1. 扩容、缩容时影响的服务器较多<br>1. 小文件性能较差<br></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.ceph.com/en/latest/cephfs/\" target=\"_blank\" rel=\"external\">CephFS</a></td>\n<td>C++</td>\n<td>单机群大中小文件</td>\n<td><br>1. crush算法比较有特点<br>1. ceph架构支持块存储，对象存储，文件存储<br></td>\n<td><br>1. 不够成熟稳定，问题较多<br>1. 读写效率不高<br></td>\n</tr>\n<tr>\n<td><a href=\"https://moosefs.com/products/#moosefs\" target=\"_blank\" rel=\"external\">MooseFS</a></td>\n<td>C</td>\n<td>单机群大中小文件</td>\n<td><br>1. 通过fuse支持了标准的posix，实现通用的文件系统<br></td>\n<td><br>1. 社区不活跃<br>1. Master Server本身的性能瓶颈<br></td>\n</tr>\n<tr>\n<td><a href=\"https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fatYIIqc\" target=\"_blank\" rel=\"external\">TFS</a></td>\n<td>C++</td>\n<td>主要设计用于小于1MB的小文件</td>\n<td><br>1. 解决分布式文件系统小文件的问题<br></td>\n<td><br>1. 文档不全<br>1. 使用较为困难<br></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"\"></h3>\n<h3 id=\"为什么要设置block为128m\">为什么要设置Block为128M</h3>\n<ol>\n<li>如果块设置过大\n<ul>\n<li>从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；</li>\n<li>mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。</li>\n</ul>\n</li>\n<li>如果块设置过小\n<ul>\n<li>存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；</li>\n<li>文件块过小，寻址时间增大，导致程序一直在找block的开始位置。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>HDFS中平均寻址时间大概为10ms；</li>\n<li>经过前人的大量测试发现，寻址时间为传输时间的1%时，为最佳状态；<br>\n    所以最佳传输时间为10ms/0.01=1000ms=1s</li>\n<li>目前磁盘的传输速率普遍为100MB/s；</li>\n</ol>\n</blockquote>\n<h3 id=\"网络拓扑机器之间的距离\">网络拓扑机器之间的距离</h3>\n<p><img src=\"/img/mypost/2021/4-5.png\" alt=\"image.png\"><br>D1,R1 都是交换机，最底层是 datanode。则 H1 的<br>rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid<br>信息可以通过 <a href=\"http://topology.script.file.name\" target=\"_blank\" rel=\"external\">topology.script.file.name</a> 配置。有了这些 rackid 信息<br>就可以计算出任意两台 datanode 之间的距离。<br><br>\n<br>1.distance(/D1/R1/H1,/D1/R1/H1)=0  相同的 datanode<br>2.distance(/D1/R1/H1,/D1/R1/H2)=2  同一 rack 下的不同 datanode<br>3.distance(/D1/R1/H1,/D1/R1/H4)=4  同一 IDC(互联网数据中心<br></p>\n<h3 id=\"hadoop2x架构图\">hadoop2.x架构图</h3>\n<p><img src=\"/img/mypost/2021/4-6.png\" alt=\"image.png\"></p>\n","excerpt":"","more":"<h2>HDFS概念</h2>\n<h3>HDFS定义</h3>\n<p>HDFS是Hadoop的一个分布式文件系统，全称叫Hadoop Distributed File System。</p>\n<h3>HDFS特点</h3>\n<h4>高容错性</h4>\n<p>HDFS 可以稳定运行在商用硬件集群上，有冗余副本，心跳机制，安全模式等功能<br />支持元数据快照，将失效的集群回滚到之前一个正常的时间点上。<br /></p>\n<h4>大数据集存储</h4>\n<p>一个磁盘无法放下的 GB 或 TB 的文件，HDFS将它分成小块（block）存储。<br /></p>\n<h4>一致性模型（<strong>write-once-read-many</strong>）</h4>\n<p>HDFS 通常是一次写入，多次读取，不支持随机写操作，可以在文件末尾追加。<br /></p>\n<h4>适合于分布式计算</h4>\n<p>一般的计算需要将数据输入到程序中，网络传输大文件比较慢。<br />HDFS则是提供接口将计算先放到每块数据中执行，最后再将结果合并。</p>\n<h3>与Hadoop关系</h3>\n<p><a href=\"#lXVXT\">Hadoop是一个分布式系统基础架构</a>，其中核心组件有HDFS，MapReduce，YARN。<br /></p>\n<h2>HDFS架构</h2>\n<h3>架构图</h3>\n<p><img src=\"/img/mypost/2021/4-1.png\" alt=\"image.png\"></p>\n<h3>主从结构</h3>\n<p>由一个Namenode和一定数目的Datanodes组成。<br /><br>\n<br />Namenode是一个中心服务，</p>\n<ul>\n<li>负责管理文件系统的Namespace；</li>\n<li>数据块到具体Datanode节点的映射和数据块到文件的映射；</li>\n<li>负责执行文件系统的Namespace操作，比如打开、关闭、重命名文件或目录；</li>\n</ul>\n<p><br />集群中的Datanode一般是一个节点一个</p>\n<ul>\n<li>负责管理它所在节点上数据的存储；</li>\n<li>负责处理文件系统客户端的读写请求；</li>\n<li>在Namenode调度下进行数据块的创建、删除和复制；</li>\n<li>周期性的上报心跳信号和块状态报告到Namenode；</li>\n</ul>\n<br />\n<h2>HDFS数据存储</h2>\n<p><img src=\"/img/mypost/2021/4-2.png\" alt=\"image.png\"></p>\n<h3>分块存储</h3>\n<p>一个大文件存储到HDFS上，会被分成多个Block。目前HDFS分块默认为128M，支持修改。<br />如果文件大小没有到达块的最小空间，该文件只会占据自己本身空间大小。</p>\n<h3>备份机制</h3>\n<p>HDFS默认备份3份，存储在不同的Datanode节点中。<br />每个文件的数据块大小和副本系数都是可配置的。应用程序可以指定某个文件的副本数目。副本系数可以在文件创建的时候指定，也可以在之后改变。</p>\n<h3>机架感知</h3>\n<p><img src=\"/img/mypost/2021/4-3.png\" alt=\"image.png\"><br />为了防止当整个机架失效时数据的丢失，Datanode一般会分布在不同的机架上。<br />另外可以在读取数据的时候计算最近的副本的距离，尽量使用同一个机架上的Block。<br /></p>\n<p><br />首先通过管理员手动配置机器与机架的关系，一般是维护一个map，将脚本文件配置在配置文件中。<br /></p>\n<h3>FsImage 和 EditLog</h3>\n<ul>\n<li><strong>EditLog</strong>：保存元数据更改记录，一个文件只记录一段时间的信息。</li>\n<li><strong>FsImage</strong>：保存文件系统目录树以及文件和 block 的对应关系，理解为元数据镜像文件，某个时刻整个 HDFS 系统文件信息的快照；</li>\n</ul>\n<p>只有在NameNode重启时，edit logs才会合并到fsimage文件中，从而得到一个文件系统的最新快照。但是在产品集群中NameNode是很少重启的，这也意味着当NameNode运行了很长时间后，edit logs文件会变得很大<br /></p>\n<ul>\n<li><strong>SecondaryNameNode</strong>：定期合并NameNode的edit logs到fsimage文件中</li>\n</ul>\n<p><img src=\"/img/mypost/2021/4-4.png\" alt=\"image.png\"></p>\n<blockquote>\n<ol>\n<li>触发检查点（定期/定多少事务记录）</li>\n<li>触发 checkpoint，NameNode 停止向 edits 中写新的记录，另外生成一个 edits.new 文件，将新的事务记录在此文件中</li>\n<li>SecondaryNameNode 通过 HTTP 请求，从 NameNode 下载 fsimage 和 edits 文件，合并生成 fsimage.chkpoint 文件；</li>\n<li>SecondaryNameNode 再将新生成的 fsimage.chkpoint 上传到 NameNode 并重命名为 fsimage，直接覆盖旧的 fsimage，实际上中间的过程还有一些 MD5 完整性校验，检查文件上传下载后是否完整；</li>\n<li>将 edits.new 文件重命名为 edits 文件，旧的 edits 文件已经合并到 fsimage；</li>\n</ol>\n</blockquote>\n<h2>HDFS文件读写</h2>\n<p><br />运行在HDFS上的应用和普通的应用不同，需要流式访问它们的数据集。HDFS的设计中更多的考虑到了数据批处理，而不是用户交互处理。比之数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。POSIX标准设置的很多硬性约束对HDFS应用系统不是必需的。为了提高数据的吞吐量，在一些关键方面对POSIX的语义做了一些修改。<br /></p>\n<h3>HDFS中的block、packet、chunk</h3>\n<h4>block</h4>\n<p>文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。<br /></p>\n<h4>packet</h4>\n<p>packet是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。<br /></p>\n<h4>chunk</h4>\n<p>chunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br /></p>\n<h3>读数据过程</h3>\n<p><img src=\"/img/mypost/2021/4-7.jpg\" alt=\"image\"></p>\n<h3>写数据过程</h3>\n<p><img src=\"/img/mypost/2021/4-8.jpg\" alt=\"image\"></p>\n<h2>参考资料</h2>\n<h3><a href=\"https://hadoop.apache.org/docs/r3.3.0/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Simple_Coherency_Model\">Hadoop官方文档V3.3版本 </a></h3>\n<h3><a href=\"https://www.sysapi.com/article/485784.html\">大数据之 HDFS 图文详解</a></h3>\n<h3><a href=\"https://juejin.cn/post/6844903630991032327\">分布式文件系统架构对比</a></h3>\n<h3><a href=\"https://www.jianshu.com/p/2098d0617939\">分布式存储glusterfs</a></h3>\n<h3><a href=\"https://blog.csdn.net/wypersist/article/details/79797559\">机架感知概念及配置实现</a></h3>\n<h3><a href=\"https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fa4HlcuA\">TFS的原理与使用</a></h3>\n<h3><a href=\"https://blog.csdn.net/lb812913059/article/details/79718303\">Hadoop数据完整性与CheckSum校验原理</a></h3>\n<h3><a href=\"https://blog.csdn.net/whdxjbw/article/details/81072207\">HDFS读写流程</a></h3>\n<h3><a href=\"https://zhuanlan.zhihu.com/p/58888246\">CRUSH算法的原理与实现</a></h3>\n<h3><a href=\"https://coding-pages-bucket-3440936-7810273-13586-512516-1300444322.cos-website.ap-shanghai.myqcloud.com/tags/#HADOOP\">Hadoop个人分享</a></h3>\n<h2>附件</h2>\n<h3>文件系统简介</h3>\n<p>文件系统是计算机中一个非常重要的组件，为存储设备提供一致的访问和管理方式。<br /><strong>可移植操作系统接口</strong>（英语：Portable Operating System Interface，缩写为POSIX）是IEEE为要在各种UNIX操作系统上运行软件，而定义API的一系列互相关联的标准的总称。<br /></p>\n<h4>通用属性</h4>\n<p>数据是以文件的形式存在，提供 Open、Read、Write、Seek、Close 等API 进行访问；<br />文件以树形目录进行组织，提供原子的重命名（Rename）操作改变文件或者目录的位置<br /></p>\n<h4>单机文件系统</h4>\n<p>windows：FAT/FAT32/NTFS，linux：EXT2/EXT3/EXT4/XFS/BtrFS，mac：<a href=\"https://developer.apple.com/support/downloads/Apple-File-System-Reference.pdf\">APFS </a><br /></p>\n<h4>单机文件系统挑战</h4>\n<ul>\n<li>共享：无法同时为分布在多个机器中的应用提供访问，于是有了 NFS 协议，可以将单机文件系统通过网络的方式同时提供给多个机器访问。</li>\n<li>容量：无法提供足够空间来存储数据，数据只好分散在多个隔离的单机文件系统里。</li>\n<li>性能：无法满足某些应用需要非常高的读写性能要求，应用只好做逻辑拆分同时读写多个文件系统。</li>\n<li>可靠性：受限于单个机器的可靠性，机器故障可能导致数据丢失。</li>\n<li>可用性：受限于单个操作系统的可用性，故障或者重启等运维操作会导致不可用。</li>\n</ul>\n<h3>开源分布式架构对比</h3>\n<table>\n<thead>\n<tr>\n<th>分布式文件系统</th>\n<th>开发语言</th>\n<th>使用场景</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://hadoop.apache.org/docs/r3.3.0/\">HDFS</a></td>\n<td>JAVA</td>\n<td>大文件存储，大数据分析</td>\n<td><br />1. 经典<br />1. 大数据场景有优势<br />1. 用户数量大<br />1. 资料丰富<br />1. 高吞吐<br /></td>\n<td><br />1. 不通用，并不提供完整的POSIX语义<br />1. 小文件性能较差<br />1. 只支持追加写<br />1. 不能低延迟<br /></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.gluster.org/en/latest/\">GlusterFS</a></td>\n<td>C</td>\n<td>大文件存储场景</td>\n<td><br />1. 老牌分布式文件系统<br />1. 应用众多<br />1. 云存储和流媒体<br />1. 没有元数据服务器的设计，无单点故障<br /></td>\n<td><br />1. 扩容、缩容时影响的服务器较多<br />1. 小文件性能较差<br /></td>\n</tr>\n<tr>\n<td><a href=\"https://docs.ceph.com/en/latest/cephfs/\">CephFS</a></td>\n<td>C++</td>\n<td>单机群大中小文件</td>\n<td><br />1. crush算法比较有特点<br />1. ceph架构支持块存储，对象存储，文件存储<br /></td>\n<td><br />1. 不够成熟稳定，问题较多<br />1. 读写效率不高<br /></td>\n</tr>\n<tr>\n<td><a href=\"https://moosefs.com/products/#moosefs\">MooseFS</a></td>\n<td>C</td>\n<td>单机群大中小文件</td>\n<td><br />1. 通过fuse支持了标准的posix，实现通用的文件系统<br /></td>\n<td><br />1. 社区不活跃<br />1. Master Server本身的性能瓶颈<br /></td>\n</tr>\n<tr>\n<td><a href=\"https://www.atatech.org/articles/14282?spm=ata.13269325.0.0.723b49fatYIIqc\">TFS</a></td>\n<td>C++</td>\n<td>主要设计用于小于1MB的小文件</td>\n<td><br />1. 解决分布式文件系统小文件的问题<br /></td>\n<td><br />1. 文档不全<br />1. 使用较为困难<br /></td>\n</tr>\n</tbody>\n</table>\n<h3></h3>\n<h3>为什么要设置Block为128M</h3>\n<ol>\n<li>如果块设置过大\n<ul>\n<li>从磁盘传输数据的时间会明显大于寻址时间，导致程序在处理这块数据时，变得非常慢；</li>\n<li>mapreduce中的map任务通常一次只处理一个块中的数据，如果块过大运行速度也会很慢。</li>\n</ul>\n</li>\n<li>如果块设置过小\n<ul>\n<li>存放大量小文件会占用NameNode中大量内存来存储元数据，而NameNode的内存是有限的，不可取；</li>\n<li>文件块过小，寻址时间增大，导致程序一直在找block的开始位置。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>HDFS中平均寻址时间大概为10ms；</li>\n<li>经过前人的大量测试发现，寻址时间为传输时间的1%时，为最佳状态；<br>\n    所以最佳传输时间为10ms/0.01=1000ms=1s</li>\n<li>目前磁盘的传输速率普遍为100MB/s；</li>\n</ol>\n</blockquote>\n<h3>网络拓扑机器之间的距离</h3>\n<p><img src=\"/img/mypost/2021/4-5.png\" alt=\"image.png\"><br />D1,R1 都是交换机，最底层是 datanode。则 H1 的<br />rackid=/D1/R1/H1，H1 的 parent 是 R1，R1 的是 D1。这些 rackid<br />信息可以通过 <a href=\"http://topology.script.file.name\">topology.script.file.name</a> 配置。有了这些 rackid 信息<br />就可以计算出任意两台 datanode 之间的距离。<br /><br>\n<br />1.distance(/D1/R1/H1,/D1/R1/H1)=0  相同的 datanode<br />2.distance(/D1/R1/H1,/D1/R1/H2)=2  同一 rack 下的不同 datanode<br />3.distance(/D1/R1/H1,/D1/R1/H4)=4  同一 IDC(互联网数据中心<br /></p>\n<h3>hadoop2.x架构图</h3>\n<p><img src=\"/img/mypost/2021/4-6.png\" alt=\"image.png\"></p>\n"},{"article":false,"title":"理财篇","catalog":true,"date":"1020-08-23T11:26:43.000Z","subtitle":"论如何更有钱","header-img":null,"_content":"\n# 数据策略\n\n[基于估值和持仓曲线的交易策略](/money/strategy/)\n\n# 数据分析\n\n## 切换基金\n\n<div>\n    <select id=\"select_code\"></select>\n</div>\n\n### 查看基金数据与交易\n<div>\n    <iframe id=\"ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n\n### 点位分布数量\n<div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">步长</div>\n        <input type=\"number\" id=\"step\" value=10 />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">开始时间</div>\n        <input type=\"date\" id=\"start\" value=\"2020-01-01\" />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">结束时间</div>\n        <input type=\"date\" id=\"end\" value=\"2021-05-01\" />\n    </div>\n    <div style=\"color: red\">注：除指数外，其他净值均放大了1000倍，当前位置显示为紫色</div>\n    <iframe id=\"analyse_ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n\n# 个人记录\n\n## 下跌在稳住\n- 2021-03-15\n\n年初挣的钱在年后都还回去了，现在还亏了不少，仓位也比较高  \n\n主要还是集中在半导体，还有不多的一些其他行业的，传媒/证券  \n\n但也想逐步转换到沪深300，做做指数比较香\n\n黄金最近也入手了一些，主要从之前的400跌倒了350，买时成本价在365左右，  \n现在价格差不多基本持平，个人觉得跌的差不多了，也可能最低在320。\n\n## 整理基金实际操作记录\n- 2020-08-29\n```\n本次的数据来源主要是支付宝查账，\n地址为 https://consumeprod.alipay.com/record/standard.htm\n通过搜索筛选带蚂蚁财富的近三年账单，筛选出基金的买入卖出操作，\n下载为csv文件\n\n然后通过天天基金接口，获取到基金名称与代码的对应关系(有些关系还得手动补充维护)\n通过脚本转换csv到json格式，同时筛选所需的信息(基金，操作，日期)\n\n最后通过脚本将json生成markdown文本用于hexo渲染成页面\n```\n\n# 其他\n### [这是一个彩票生成器](/article/money/lottery/)\n\n\n# 底部\n\n## 理财篇必读镇楼 \n- 2020-08-23\n\n```\n我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；\n本栏是一些理财思路和方法的整合，主要包含几个方向\n1. 基金买入卖出及其来源依据或直觉依据\n2. 在一些节点回顾性总结\n3. 发现或总结一些方法论\n4. 理财工具，分析工具的创造\n5. 数据挖掘和分析\n6. 分享一些这个方向的文章\n```\n\n\n<script type=\"text/javascript\">\n    Date.prototype.format = function(fmt) { \n        var o = { \n            \"M+\" : this.getMonth()+1,                 //月份 \n            \"d+\" : this.getDate(),                    //日 \n            \"h+\" : this.getHours(),                   //小时 \n            \"m+\" : this.getMinutes(),                 //分 \n            \"s+\" : this.getSeconds(),                 //秒 \n            \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n            \"S\"  : this.getMilliseconds()             //毫秒 \n        }; \n        if(/(y+)/.test(fmt)) {\n                fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n        }\n        for(var k in o) {\n            if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n            }\n        }\n        return fmt; \n    }\n\n    let zhishu_data = [\n        {\n            code: \"000001\",\n            name: \"上证指数\"\n        }\n    ]\n\n    let ifr = document.getElementById(\"ifr_data\");\n    let analyse_ifr = document.getElementById(\"analyse_ifr_data\");\n\n    let scode = document.getElementById(\"select_code\");\n    let analyse_step = document.getElementById(\"step\");\n    let analyse_start = document.getElementById(\"start\");\n    let analyse_end = document.getElementById(\"end\");\n\n    let urlroot = \"/money/fund_trace_data.html?code=\";\n    let analyes_url = \"/money/fund_analyse_distribution.html?\";\n\n    let analyse_data = {\n        code: \"000001\",\n        step: 100,\n        start: `${new Date().getFullYear()-1}-${new Date().format(\"MM-dd\")}`,\n        end: new Date().format(\"yyyy-MM-dd\")\n    }\n\n    function init() {\n        ifr.src = urlroot + analyse_data.code;\n        analyse_step.value = analyse_data.step;\n        analyse_start.value = analyse_data.start;\n        analyse_end.value = analyse_data.end;\n    }\n\n    init()\n\n    // let dates = [\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\", \"2020-06-01\", \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"]\n    // let date_index = 0\n\n    // setInterval(() => {\n    //     if(date_index < dates.length) {\n    //         analyse_data.start = dates[date_index]\n    //         render_analyse()\n    //         date_index++\n    //     }\n    // }, 1000)\n\n    function render_analyse() {\n        analyse_ifr.src = analyes_url + `code=${analyse_data.code}&step=${analyse_data.step}&start=${analyse_data.start}&end=${analyse_data.end}`\n    }\n\n    fetch(\"/money/fund.json\")\n    .then(res => res.json())\n    .then(data => {\n        let codemap = {};\n        zhishu_data.forEach(item => {\n            codemap[item[\"name\"]] = item[\"code\"]\n        })\n        let now = new Date();\n        now.setFullYear(new Date().getFullYear()-1);\n        data.forEach(d => {\n            if(new Date(d[\"datetime\"]) > now) {\n                codemap[d[\"fund_name\"]] = d[\"fund_code\"];\n            }\n        });\n        let codes = Object.keys(codemap);\n        scode.innerHTML = codes\n        .map(name => `<option value=${codemap[name]}>${name}</option>`)\n        .join(\" \");\n        ifr.src = urlroot + codemap[codes[0]];\n        analyse_data.code = codemap[codes[0]];\n        render_analyse();\n    });\n\n    analyse_step.onchange = function(e){\n        analyse_data.step = e.target.value\n        render_analyse();\n    }\n\n    analyse_start.onchange = function(e){\n        analyse_data.start = e.target.value\n        render_analyse();\n    }\n\n    analyse_end.onchange = function(e){\n        analyse_data.end = e.target.value\n        render_analyse();\n    }\n    \n    scode.onchange = (e) => {\n        analyse_data.code = scode.value;\n        render_analyse();\n        ifr.src = urlroot + scode.value;\n    }\n</script>","source":"_posts/money/money_1_理财篇.md","raw":"---\narticle: false\ntitle: 理财篇\ncatalog: true\ndate: 1020-08-23 19:31:43\nsubtitle: 论如何更有钱\nheader-img:\n---\n\n# 数据策略\n\n[基于估值和持仓曲线的交易策略](/money/strategy/)\n\n# 数据分析\n\n## 切换基金\n\n<div>\n    <select id=\"select_code\"></select>\n</div>\n\n### 查看基金数据与交易\n<div>\n    <iframe id=\"ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n\n### 点位分布数量\n<div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">步长</div>\n        <input type=\"number\" id=\"step\" value=10 />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">开始时间</div>\n        <input type=\"date\" id=\"start\" value=\"2020-01-01\" />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">结束时间</div>\n        <input type=\"date\" id=\"end\" value=\"2021-05-01\" />\n    </div>\n    <div style=\"color: red\">注：除指数外，其他净值均放大了1000倍，当前位置显示为紫色</div>\n    <iframe id=\"analyse_ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n\n# 个人记录\n\n## 下跌在稳住\n- 2021-03-15\n\n年初挣的钱在年后都还回去了，现在还亏了不少，仓位也比较高  \n\n主要还是集中在半导体，还有不多的一些其他行业的，传媒/证券  \n\n但也想逐步转换到沪深300，做做指数比较香\n\n黄金最近也入手了一些，主要从之前的400跌倒了350，买时成本价在365左右，  \n现在价格差不多基本持平，个人觉得跌的差不多了，也可能最低在320。\n\n## 整理基金实际操作记录\n- 2020-08-29\n```\n本次的数据来源主要是支付宝查账，\n地址为 https://consumeprod.alipay.com/record/standard.htm\n通过搜索筛选带蚂蚁财富的近三年账单，筛选出基金的买入卖出操作，\n下载为csv文件\n\n然后通过天天基金接口，获取到基金名称与代码的对应关系(有些关系还得手动补充维护)\n通过脚本转换csv到json格式，同时筛选所需的信息(基金，操作，日期)\n\n最后通过脚本将json生成markdown文本用于hexo渲染成页面\n```\n\n# 其他\n### [这是一个彩票生成器](/article/money/lottery/)\n\n\n# 底部\n\n## 理财篇必读镇楼 \n- 2020-08-23\n\n```\n我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；\n本栏是一些理财思路和方法的整合，主要包含几个方向\n1. 基金买入卖出及其来源依据或直觉依据\n2. 在一些节点回顾性总结\n3. 发现或总结一些方法论\n4. 理财工具，分析工具的创造\n5. 数据挖掘和分析\n6. 分享一些这个方向的文章\n```\n\n\n<script type=\"text/javascript\">\n    Date.prototype.format = function(fmt) { \n        var o = { \n            \"M+\" : this.getMonth()+1,                 //月份 \n            \"d+\" : this.getDate(),                    //日 \n            \"h+\" : this.getHours(),                   //小时 \n            \"m+\" : this.getMinutes(),                 //分 \n            \"s+\" : this.getSeconds(),                 //秒 \n            \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n            \"S\"  : this.getMilliseconds()             //毫秒 \n        }; \n        if(/(y+)/.test(fmt)) {\n                fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n        }\n        for(var k in o) {\n            if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n            }\n        }\n        return fmt; \n    }\n\n    let zhishu_data = [\n        {\n            code: \"000001\",\n            name: \"上证指数\"\n        }\n    ]\n\n    let ifr = document.getElementById(\"ifr_data\");\n    let analyse_ifr = document.getElementById(\"analyse_ifr_data\");\n\n    let scode = document.getElementById(\"select_code\");\n    let analyse_step = document.getElementById(\"step\");\n    let analyse_start = document.getElementById(\"start\");\n    let analyse_end = document.getElementById(\"end\");\n\n    let urlroot = \"/money/fund_trace_data.html?code=\";\n    let analyes_url = \"/money/fund_analyse_distribution.html?\";\n\n    let analyse_data = {\n        code: \"000001\",\n        step: 100,\n        start: `${new Date().getFullYear()-1}-${new Date().format(\"MM-dd\")}`,\n        end: new Date().format(\"yyyy-MM-dd\")\n    }\n\n    function init() {\n        ifr.src = urlroot + analyse_data.code;\n        analyse_step.value = analyse_data.step;\n        analyse_start.value = analyse_data.start;\n        analyse_end.value = analyse_data.end;\n    }\n\n    init()\n\n    // let dates = [\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\", \"2020-06-01\", \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"]\n    // let date_index = 0\n\n    // setInterval(() => {\n    //     if(date_index < dates.length) {\n    //         analyse_data.start = dates[date_index]\n    //         render_analyse()\n    //         date_index++\n    //     }\n    // }, 1000)\n\n    function render_analyse() {\n        analyse_ifr.src = analyes_url + `code=${analyse_data.code}&step=${analyse_data.step}&start=${analyse_data.start}&end=${analyse_data.end}`\n    }\n\n    fetch(\"/money/fund.json\")\n    .then(res => res.json())\n    .then(data => {\n        let codemap = {};\n        zhishu_data.forEach(item => {\n            codemap[item[\"name\"]] = item[\"code\"]\n        })\n        let now = new Date();\n        now.setFullYear(new Date().getFullYear()-1);\n        data.forEach(d => {\n            if(new Date(d[\"datetime\"]) > now) {\n                codemap[d[\"fund_name\"]] = d[\"fund_code\"];\n            }\n        });\n        let codes = Object.keys(codemap);\n        scode.innerHTML = codes\n        .map(name => `<option value=${codemap[name]}>${name}</option>`)\n        .join(\" \");\n        ifr.src = urlroot + codemap[codes[0]];\n        analyse_data.code = codemap[codes[0]];\n        render_analyse();\n    });\n\n    analyse_step.onchange = function(e){\n        analyse_data.step = e.target.value\n        render_analyse();\n    }\n\n    analyse_start.onchange = function(e){\n        analyse_data.start = e.target.value\n        render_analyse();\n    }\n\n    analyse_end.onchange = function(e){\n        analyse_data.end = e.target.value\n        render_analyse();\n    }\n    \n    scode.onchange = (e) => {\n        analyse_data.code = scode.value;\n        render_analyse();\n        ifr.src = urlroot + scode.value;\n    }\n</script>","slug":"money/money_1_理财篇","published":1,"updated":"2021-12-06T11:29:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76p00550770ep6omjvq","content":"<h1 id=\"数据策略\">数据策略</h1>\n<p><a href=\"/money/strategy/\">基于估值和持仓曲线的交易策略</a></p>\n<h1 id=\"数据分析\">数据分析</h1>\n<h2 id=\"切换基金\">切换基金</h2>\n<div>\n    <select id=\"select_code\"></select>\n</div>\n<h3 id=\"查看基金数据与交易\">查看基金数据与交易</h3>\n<div>\n    <iframe id=\"ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n<h3 id=\"点位分布数量\">点位分布数量</h3>\n<div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">步长</div>\n        <input type=\"number\" id=\"step\" value=\"10\">\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">开始时间</div>\n        <input type=\"date\" id=\"start\" value=\"2020-01-01\">\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">结束时间</div>\n        <input type=\"date\" id=\"end\" value=\"2021-05-01\">\n    </div>\n    <div style=\"color: red\">注：除指数外，其他净值均放大了1000倍，当前位置显示为紫色</div>\n    <iframe id=\"analyse_ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n<h1 id=\"个人记录\">个人记录</h1>\n<h2 id=\"下跌在稳住\">下跌在稳住</h2>\n<ul>\n<li>2021-03-15</li>\n</ul>\n<p>年初挣的钱在年后都还回去了，现在还亏了不少，仓位也比较高</p>\n<p>主要还是集中在半导体，还有不多的一些其他行业的，传媒/证券</p>\n<p>但也想逐步转换到沪深300，做做指数比较香</p>\n<p>黄金最近也入手了一些，主要从之前的400跌倒了350，买时成本价在365左右，<br>\n现在价格差不多基本持平，个人觉得跌的差不多了，也可能最低在320。</p>\n<h2 id=\"整理基金实际操作记录\">整理基金实际操作记录</h2>\n<ul>\n<li>2020-08-29</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本次的数据来源主要是支付宝查账，</span><br><span class=\"line\">地址为 https://consumeprod.alipay.com/record/standard.htm</span><br><span class=\"line\">通过搜索筛选带蚂蚁财富的近三年账单，筛选出基金的买入卖出操作，</span><br><span class=\"line\">下载为csv文件</span><br><span class=\"line\"></span><br><span class=\"line\">然后通过天天基金接口，获取到基金名称与代码的对应关系(有些关系还得手动补充维护)</span><br><span class=\"line\">通过脚本转换csv到json格式，同时筛选所需的信息(基金，操作，日期)</span><br><span class=\"line\"></span><br><span class=\"line\">最后通过脚本将json生成markdown文本用于hexo渲染成页面</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\">其他</h1>\n<h3 id=\"这是一个彩票生成器\"><a href=\"/article/money/lottery/\">这是一个彩票生成器</a></h3>\n<h1 id=\"底部\">底部</h1>\n<h2 id=\"理财篇必读镇楼\">理财篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class=\"line\">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class=\"line\">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class=\"line\">2. 在一些节点回顾性总结</span><br><span class=\"line\">3. 发现或总结一些方法论</span><br><span class=\"line\">4. 理财工具，分析工具的创造</span><br><span class=\"line\">5. 数据挖掘和分析</span><br><span class=\"line\">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\">\n    Date.prototype.format = function(fmt) { \n        var o = { \n            \"M+\" : this.getMonth()+1,                 //月份 \n            \"d+\" : this.getDate(),                    //日 \n            \"h+\" : this.getHours(),                   //小时 \n            \"m+\" : this.getMinutes(),                 //分 \n            \"s+\" : this.getSeconds(),                 //秒 \n            \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n            \"S\"  : this.getMilliseconds()             //毫秒 \n        }; \n        if(/(y+)/.test(fmt)) {\n                fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n        }\n        for(var k in o) {\n            if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n            }\n        }\n        return fmt; \n    }\n\n    let zhishu_data = [\n        {\n            code: \"000001\",\n            name: \"上证指数\"\n        }\n    ]\n\n    let ifr = document.getElementById(\"ifr_data\");\n    let analyse_ifr = document.getElementById(\"analyse_ifr_data\");\n\n    let scode = document.getElementById(\"select_code\");\n    let analyse_step = document.getElementById(\"step\");\n    let analyse_start = document.getElementById(\"start\");\n    let analyse_end = document.getElementById(\"end\");\n\n    let urlroot = \"/money/fund_trace_data.html?code=\";\n    let analyes_url = \"/money/fund_analyse_distribution.html?\";\n\n    let analyse_data = {\n        code: \"000001\",\n        step: 100,\n        start: `${new Date().getFullYear()-1}-${new Date().format(\"MM-dd\")}`,\n        end: new Date().format(\"yyyy-MM-dd\")\n    }\n\n    function init() {\n        ifr.src = urlroot + analyse_data.code;\n        analyse_step.value = analyse_data.step;\n        analyse_start.value = analyse_data.start;\n        analyse_end.value = analyse_data.end;\n    }\n\n    init()\n\n    // let dates = [\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\", \"2020-06-01\", \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"]\n    // let date_index = 0\n\n    // setInterval(() => {\n    //     if(date_index < dates.length) {\n    //         analyse_data.start = dates[date_index]\n    //         render_analyse()\n    //         date_index++\n    //     }\n    // }, 1000)\n\n    function render_analyse() {\n        analyse_ifr.src = analyes_url + `code=${analyse_data.code}&step=${analyse_data.step}&start=${analyse_data.start}&end=${analyse_data.end}`\n    }\n\n    fetch(\"/money/fund.json\")\n    .then(res => res.json())\n    .then(data => {\n        let codemap = {};\n        zhishu_data.forEach(item => {\n            codemap[item[\"name\"]] = item[\"code\"]\n        })\n        let now = new Date();\n        now.setFullYear(new Date().getFullYear()-1);\n        data.forEach(d => {\n            if(new Date(d[\"datetime\"]) > now) {\n                codemap[d[\"fund_name\"]] = d[\"fund_code\"];\n            }\n        });\n        let codes = Object.keys(codemap);\n        scode.innerHTML = codes\n        .map(name => `<option value=${codemap[name]}>${name}</option>`)\n        .join(\" \");\n        ifr.src = urlroot + codemap[codes[0]];\n        analyse_data.code = codemap[codes[0]];\n        render_analyse();\n    });\n\n    analyse_step.onchange = function(e){\n        analyse_data.step = e.target.value\n        render_analyse();\n    }\n\n    analyse_start.onchange = function(e){\n        analyse_data.start = e.target.value\n        render_analyse();\n    }\n\n    analyse_end.onchange = function(e){\n        analyse_data.end = e.target.value\n        render_analyse();\n    }\n    \n    scode.onchange = (e) => {\n        analyse_data.code = scode.value;\n        render_analyse();\n        ifr.src = urlroot + scode.value;\n    }\n</script>","excerpt":"","more":"<h1>数据策略</h1>\n<p><a href=\"/money/strategy/\">基于估值和持仓曲线的交易策略</a></p>\n<h1>数据分析</h1>\n<h2>切换基金</h2>\n<div>\n    <select id=\"select_code\"></select>\n</div>\n<h3>查看基金数据与交易</h3>\n<div>\n    <iframe id=\"ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n<h3>点位分布数量</h3>\n<div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">步长</div>\n        <input type=\"number\" id=\"step\" value=10 />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">开始时间</div>\n        <input type=\"date\" id=\"start\" value=\"2020-01-01\" />\n    </div>\n    <div style=\"display: flex; margin-bottom: 20px\">\n        <div style=\"flex: 0 0 80px\">结束时间</div>\n        <input type=\"date\" id=\"end\" value=\"2021-05-01\" />\n    </div>\n    <div style=\"color: red\">注：除指数外，其他净值均放大了1000倍，当前位置显示为紫色</div>\n    <iframe id=\"analyse_ifr_data\" style=\"border: none; width: 100%; min-height: 400px\"></iframe>\n</div>\n<h1>个人记录</h1>\n<h2>下跌在稳住</h2>\n<ul>\n<li>2021-03-15</li>\n</ul>\n<p>年初挣的钱在年后都还回去了，现在还亏了不少，仓位也比较高</p>\n<p>主要还是集中在半导体，还有不多的一些其他行业的，传媒/证券</p>\n<p>但也想逐步转换到沪深300，做做指数比较香</p>\n<p>黄金最近也入手了一些，主要从之前的400跌倒了350，买时成本价在365左右，<br>\n现在价格差不多基本持平，个人觉得跌的差不多了，也可能最低在320。</p>\n<h2>整理基金实际操作记录</h2>\n<ul>\n<li>2020-08-29</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本次的数据来源主要是支付宝查账，</span><br><span class=\"line\">地址为 https://consumeprod.alipay.com/record/standard.htm</span><br><span class=\"line\">通过搜索筛选带蚂蚁财富的近三年账单，筛选出基金的买入卖出操作，</span><br><span class=\"line\">下载为csv文件</span><br><span class=\"line\"></span><br><span class=\"line\">然后通过天天基金接口，获取到基金名称与代码的对应关系(有些关系还得手动补充维护)</span><br><span class=\"line\">通过脚本转换csv到json格式，同时筛选所需的信息(基金，操作，日期)</span><br><span class=\"line\"></span><br><span class=\"line\">最后通过脚本将json生成markdown文本用于hexo渲染成页面</span><br></pre></td></tr></table></figure>\n<h1>其他</h1>\n<h3><a href=\"/article/money/lottery/\">这是一个彩票生成器</a></h3>\n<h1>底部</h1>\n<h2>理财篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当前的理财主要在于基金的买卖，也是第二收入(亏损)来源；</span><br><span class=\"line\">本栏是一些理财思路和方法的整合，主要包含几个方向</span><br><span class=\"line\">1. 基金买入卖出及其来源依据或直觉依据</span><br><span class=\"line\">2. 在一些节点回顾性总结</span><br><span class=\"line\">3. 发现或总结一些方法论</span><br><span class=\"line\">4. 理财工具，分析工具的创造</span><br><span class=\"line\">5. 数据挖掘和分析</span><br><span class=\"line\">6. 分享一些这个方向的文章</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\">\n    Date.prototype.format = function(fmt) { \n        var o = { \n            \"M+\" : this.getMonth()+1,                 //月份 \n            \"d+\" : this.getDate(),                    //日 \n            \"h+\" : this.getHours(),                   //小时 \n            \"m+\" : this.getMinutes(),                 //分 \n            \"s+\" : this.getSeconds(),                 //秒 \n            \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n            \"S\"  : this.getMilliseconds()             //毫秒 \n        }; \n        if(/(y+)/.test(fmt)) {\n                fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n        }\n        for(var k in o) {\n            if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n            }\n        }\n        return fmt; \n    }\n\n    let zhishu_data = [\n        {\n            code: \"000001\",\n            name: \"上证指数\"\n        }\n    ]\n\n    let ifr = document.getElementById(\"ifr_data\");\n    let analyse_ifr = document.getElementById(\"analyse_ifr_data\");\n\n    let scode = document.getElementById(\"select_code\");\n    let analyse_step = document.getElementById(\"step\");\n    let analyse_start = document.getElementById(\"start\");\n    let analyse_end = document.getElementById(\"end\");\n\n    let urlroot = \"/money/fund_trace_data.html?code=\";\n    let analyes_url = \"/money/fund_analyse_distribution.html?\";\n\n    let analyse_data = {\n        code: \"000001\",\n        step: 100,\n        start: `${new Date().getFullYear()-1}-${new Date().format(\"MM-dd\")}`,\n        end: new Date().format(\"yyyy-MM-dd\")\n    }\n\n    function init() {\n        ifr.src = urlroot + analyse_data.code;\n        analyse_step.value = analyse_data.step;\n        analyse_start.value = analyse_data.start;\n        analyse_end.value = analyse_data.end;\n    }\n\n    init()\n\n    // let dates = [\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\", \"2020-06-01\", \"2020-07-01\", \"2020-08-01\", \"2020-09-01\"]\n    // let date_index = 0\n\n    // setInterval(() => {\n    //     if(date_index < dates.length) {\n    //         analyse_data.start = dates[date_index]\n    //         render_analyse()\n    //         date_index++\n    //     }\n    // }, 1000)\n\n    function render_analyse() {\n        analyse_ifr.src = analyes_url + `code=${analyse_data.code}&step=${analyse_data.step}&start=${analyse_data.start}&end=${analyse_data.end}`\n    }\n\n    fetch(\"/money/fund.json\")\n    .then(res => res.json())\n    .then(data => {\n        let codemap = {};\n        zhishu_data.forEach(item => {\n            codemap[item[\"name\"]] = item[\"code\"]\n        })\n        let now = new Date();\n        now.setFullYear(new Date().getFullYear()-1);\n        data.forEach(d => {\n            if(new Date(d[\"datetime\"]) > now) {\n                codemap[d[\"fund_name\"]] = d[\"fund_code\"];\n            }\n        });\n        let codes = Object.keys(codemap);\n        scode.innerHTML = codes\n        .map(name => `<option value=${codemap[name]}>${name}</option>`)\n        .join(\" \");\n        ifr.src = urlroot + codemap[codes[0]];\n        analyse_data.code = codemap[codes[0]];\n        render_analyse();\n    });\n\n    analyse_step.onchange = function(e){\n        analyse_data.step = e.target.value\n        render_analyse();\n    }\n\n    analyse_start.onchange = function(e){\n        analyse_data.start = e.target.value\n        render_analyse();\n    }\n\n    analyse_end.onchange = function(e){\n        analyse_data.end = e.target.value\n        render_analyse();\n    }\n    \n    scode.onchange = (e) => {\n        analyse_data.code = scode.value;\n        render_analyse();\n        ifr.src = urlroot + scode.value;\n    }\n</script>"},{"article":false,"title":"音乐篇","catalog":true,"date":"1020-08-23T11:26:43.000Z","subtitle":"音乐始终陪伴","header-img":"/img/header_img/archive.jpg","_content":"\n<!-- https://github.com/newraina/mePlayer -->\n\n<video src=\"#\" controls=\"controls\" style=\"width: 100%; max-height: 500px\" id=\"movie\" loop=\"loop\">\n您的浏览器不支持 video 标签。\n</video>\n\n<div class=\"music\" id=\"ms\"></div>\n\n## [伯虎说](/music/bohushuo.mp3)\n\n## [fallin flower](/music/fallinflower.mp3)\n\n## [summer](/img/movie/summer.mp4)\n\n## [秋的思念](/img/movie/qiudesinian.mp4)\n\n## [信仰-全职高手](/img/movie/xinyang.mp4)\n\n## [Someone like you](/img/movie/someonelikeyou.mp4)\n\n## [梦中的婚礼](/img/movie/mengzhongdehunli.mp4)\n\n## [烟火里的尘埃](/img/movie/yanhuolidechenai.mp4)\n\n## [青石巷 - 片段](/img/movie/qingshixiang.mp4)\n\n## [海底](/img/movie/haidi.mp4)\n\n## [River flows in you](/img/movie/riverflowsinyou.mp4)\n\n## [夜的钢琴曲11](/img/movie/yedegangqinqu11.mp4)\n\n## [梁祝钢琴曲](/img/movie/liangzhu.mp4)\n\n## 我的纯音乐歌单\n[纯音乐歌单](https://t.kugou.com/355mda6xVV2)（打不开可以尝试手机打开）\n\n很多歌带着一段感情与记忆，还是要经历过才会听得更有滋味\n\n## 音乐篇必读镇楼 \n- 2020-08-23\n```\n音乐自得其乐\n1. 分享音乐与感受\n2. 钢琴学习与弹奏\n```\n\n<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/meplayer.min.js\"></script>\n\n<script type=\"text/javascript\">\n\n    let defaultPlay = \"秋的思念\";\n    let movie = document.getElementById(\"movie\");\n    let ms = document.getElementById(\"ms\");\n    let lks = document.querySelectorAll(\".post-container > h2 > a\");\n    let mePlayerBuilder = mePlayer;\n    let mePlayerOperater = null;\n    let first = true;\n\n    function getQueryVariable(variable){\n       var query = window.location.search.substring(1);\n       var vars = query.split(\"&\");\n       for (var i=0;i<vars.length;i++) {\n            var pair = vars[i].split(\"=\");\n            if(pair[0] == variable){return decodeURI(pair[1]);}\n       }\n       return(false);\n    }\n\n    function playMovie(pmv, play) {\n        ms.style.display = \"none\";\n        movie.style.display = \"block\";\n        if(document.getElementsByTagName(\"audio\")[0]) {\n            document.getElementsByTagName(\"audio\")[0].pause()\n        }\n        movie.src=pmv.href;\n        if(play) {\n            movie.play();\n        }\n    }\n\n    function playMp3(pmp, play) {\n        movie.style.display = \"none\";\n        movie.pause();\n        ms.style.display = \"block\";\n        mePlayerBuilder({\n            music: {\n                src: pmp.href,\n                title: pmp.text,\n                author: \"纯音乐请欣赏\",\n                loop: true\n            },\n            target: '#ms',\n            autoplay: play\n        });\n    }\n\n\n    for(let i = 0; i < lks.length; i++) {\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp4\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMovie(lks[i], true);\n            }\n        }\n\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp3\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMp3(lks[i], true);\n            }\n        }\n    }\n\n    let thePlay;\n    if(getQueryVariable(\"init\")) {\n        thePlay = getQueryVariable(\"init\")\n    } else {\n        thePlay = defaultPlay;\n    }\n    let init = document.getElementById(thePlay);\n    let node = init.children[0];\n    if(node.href.endsWith(\"mp4\")) {\n        playMovie(node, false);\n    }\n    if(node.href.endsWith(\"mp3\")) {\n        playMp3(node, false);\n    }\n</script>","source":"_posts/music/music_1_音乐篇.md","raw":"---\narticle: false\ntitle: 音乐篇\ncatalog: true\ndate: 1020-08-23 19:31:43\nsubtitle: 音乐始终陪伴\nheader-img: \"/img/header_img/archive.jpg\"\n---\n\n<!-- https://github.com/newraina/mePlayer -->\n\n<video src=\"#\" controls=\"controls\" style=\"width: 100%; max-height: 500px\" id=\"movie\" loop=\"loop\">\n您的浏览器不支持 video 标签。\n</video>\n\n<div class=\"music\" id=\"ms\"></div>\n\n## [伯虎说](/music/bohushuo.mp3)\n\n## [fallin flower](/music/fallinflower.mp3)\n\n## [summer](/img/movie/summer.mp4)\n\n## [秋的思念](/img/movie/qiudesinian.mp4)\n\n## [信仰-全职高手](/img/movie/xinyang.mp4)\n\n## [Someone like you](/img/movie/someonelikeyou.mp4)\n\n## [梦中的婚礼](/img/movie/mengzhongdehunli.mp4)\n\n## [烟火里的尘埃](/img/movie/yanhuolidechenai.mp4)\n\n## [青石巷 - 片段](/img/movie/qingshixiang.mp4)\n\n## [海底](/img/movie/haidi.mp4)\n\n## [River flows in you](/img/movie/riverflowsinyou.mp4)\n\n## [夜的钢琴曲11](/img/movie/yedegangqinqu11.mp4)\n\n## [梁祝钢琴曲](/img/movie/liangzhu.mp4)\n\n## 我的纯音乐歌单\n[纯音乐歌单](https://t.kugou.com/355mda6xVV2)（打不开可以尝试手机打开）\n\n很多歌带着一段感情与记忆，还是要经历过才会听得更有滋味\n\n## 音乐篇必读镇楼 \n- 2020-08-23\n```\n音乐自得其乐\n1. 分享音乐与感受\n2. 钢琴学习与弹奏\n```\n\n<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/meplayer.min.js\"></script>\n\n<script type=\"text/javascript\">\n\n    let defaultPlay = \"秋的思念\";\n    let movie = document.getElementById(\"movie\");\n    let ms = document.getElementById(\"ms\");\n    let lks = document.querySelectorAll(\".post-container > h2 > a\");\n    let mePlayerBuilder = mePlayer;\n    let mePlayerOperater = null;\n    let first = true;\n\n    function getQueryVariable(variable){\n       var query = window.location.search.substring(1);\n       var vars = query.split(\"&\");\n       for (var i=0;i<vars.length;i++) {\n            var pair = vars[i].split(\"=\");\n            if(pair[0] == variable){return decodeURI(pair[1]);}\n       }\n       return(false);\n    }\n\n    function playMovie(pmv, play) {\n        ms.style.display = \"none\";\n        movie.style.display = \"block\";\n        if(document.getElementsByTagName(\"audio\")[0]) {\n            document.getElementsByTagName(\"audio\")[0].pause()\n        }\n        movie.src=pmv.href;\n        if(play) {\n            movie.play();\n        }\n    }\n\n    function playMp3(pmp, play) {\n        movie.style.display = \"none\";\n        movie.pause();\n        ms.style.display = \"block\";\n        mePlayerBuilder({\n            music: {\n                src: pmp.href,\n                title: pmp.text,\n                author: \"纯音乐请欣赏\",\n                loop: true\n            },\n            target: '#ms',\n            autoplay: play\n        });\n    }\n\n\n    for(let i = 0; i < lks.length; i++) {\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp4\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMovie(lks[i], true);\n            }\n        }\n\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp3\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMp3(lks[i], true);\n            }\n        }\n    }\n\n    let thePlay;\n    if(getQueryVariable(\"init\")) {\n        thePlay = getQueryVariable(\"init\")\n    } else {\n        thePlay = defaultPlay;\n    }\n    let init = document.getElementById(thePlay);\n    let node = init.children[0];\n    if(node.href.endsWith(\"mp4\")) {\n        playMovie(node, false);\n    }\n    if(node.href.endsWith(\"mp3\")) {\n        playMp3(node, false);\n    }\n</script>","slug":"music/music_1_音乐篇","published":1,"updated":"2021-11-12T16:32:23.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76r005707702tu3t4b0","content":"<!-- https://github.com/newraina/mePlayer -->\n<video src=\"#\" controls=\"controls\" style=\"width: 100%; max-height: 500px\" id=\"movie\" loop=\"loop\">\n您的浏览器不支持 video 标签。\n</video>\n<div class=\"music\" id=\"ms\"></div>\n<h2 id=\"伯虎说\"><a href=\"/music/bohushuo.mp3\">伯虎说</a></h2>\n<h2 id=\"fallin-flower\"><a href=\"/music/fallinflower.mp3\">fallin flower</a></h2>\n<h2 id=\"summer\"><a href=\"/img/movie/summer.mp4\">summer</a></h2>\n<h2 id=\"秋的思念\"><a href=\"/img/movie/qiudesinian.mp4\">秋的思念</a></h2>\n<h2 id=\"信仰-全职高手\"><a href=\"/img/movie/xinyang.mp4\">信仰-全职高手</a></h2>\n<h2 id=\"someone-like-you\"><a href=\"/img/movie/someonelikeyou.mp4\">Someone like you</a></h2>\n<h2 id=\"梦中的婚礼\"><a href=\"/img/movie/mengzhongdehunli.mp4\">梦中的婚礼</a></h2>\n<h2 id=\"烟火里的尘埃\"><a href=\"/img/movie/yanhuolidechenai.mp4\">烟火里的尘埃</a></h2>\n<h2 id=\"青石巷-片段\"><a href=\"/img/movie/qingshixiang.mp4\">青石巷 - 片段</a></h2>\n<h2 id=\"海底\"><a href=\"/img/movie/haidi.mp4\">海底</a></h2>\n<h2 id=\"river-flows-in-you\"><a href=\"/img/movie/riverflowsinyou.mp4\">River flows in you</a></h2>\n<h2 id=\"夜的钢琴曲11\"><a href=\"/img/movie/yedegangqinqu11.mp4\">夜的钢琴曲11</a></h2>\n<h2 id=\"梁祝钢琴曲\"><a href=\"/img/movie/liangzhu.mp4\">梁祝钢琴曲</a></h2>\n<h2 id=\"我的纯音乐歌单\">我的纯音乐歌单</h2>\n<p><a href=\"https://t.kugou.com/355mda6xVV2\" target=\"_blank\" rel=\"external\">纯音乐歌单</a>（打不开可以尝试手机打开）</p>\n<p>很多歌带着一段感情与记忆，还是要经历过才会听得更有滋味</p>\n<h2 id=\"音乐篇必读镇楼\">音乐篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">音乐自得其乐</span><br><span class=\"line\">1. 分享音乐与感受</span><br><span class=\"line\">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/meplayer.min.js\"></script>\n<script type=\"text/javascript\">\n\n    let defaultPlay = \"秋的思念\";\n    let movie = document.getElementById(\"movie\");\n    let ms = document.getElementById(\"ms\");\n    let lks = document.querySelectorAll(\".post-container > h2 > a\");\n    let mePlayerBuilder = mePlayer;\n    let mePlayerOperater = null;\n    let first = true;\n\n    function getQueryVariable(variable){\n       var query = window.location.search.substring(1);\n       var vars = query.split(\"&\");\n       for (var i=0;i<vars.length;i++) {\n            var pair = vars[i].split(\"=\");\n            if(pair[0] == variable){return decodeURI(pair[1]);}\n       }\n       return(false);\n    }\n\n    function playMovie(pmv, play) {\n        ms.style.display = \"none\";\n        movie.style.display = \"block\";\n        if(document.getElementsByTagName(\"audio\")[0]) {\n            document.getElementsByTagName(\"audio\")[0].pause()\n        }\n        movie.src=pmv.href;\n        if(play) {\n            movie.play();\n        }\n    }\n\n    function playMp3(pmp, play) {\n        movie.style.display = \"none\";\n        movie.pause();\n        ms.style.display = \"block\";\n        mePlayerBuilder({\n            music: {\n                src: pmp.href,\n                title: pmp.text,\n                author: \"纯音乐请欣赏\",\n                loop: true\n            },\n            target: '#ms',\n            autoplay: play\n        });\n    }\n\n\n    for(let i = 0; i < lks.length; i++) {\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp4\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMovie(lks[i], true);\n            }\n        }\n\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp3\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMp3(lks[i], true);\n            }\n        }\n    }\n\n    let thePlay;\n    if(getQueryVariable(\"init\")) {\n        thePlay = getQueryVariable(\"init\")\n    } else {\n        thePlay = defaultPlay;\n    }\n    let init = document.getElementById(thePlay);\n    let node = init.children[0];\n    if(node.href.endsWith(\"mp4\")) {\n        playMovie(node, false);\n    }\n    if(node.href.endsWith(\"mp3\")) {\n        playMp3(node, false);\n    }\n</script>","excerpt":"","more":"<!-- https://github.com/newraina/mePlayer -->\n<video src=\"#\" controls=\"controls\" style=\"width: 100%; max-height: 500px\" id=\"movie\" loop=\"loop\">\n您的浏览器不支持 video 标签。\n</video>\n<div class=\"music\" id=\"ms\"></div>\n<h2><a href=\"/music/bohushuo.mp3\">伯虎说</a></h2>\n<h2><a href=\"/music/fallinflower.mp3\">fallin flower</a></h2>\n<h2><a href=\"/img/movie/summer.mp4\">summer</a></h2>\n<h2><a href=\"/img/movie/qiudesinian.mp4\">秋的思念</a></h2>\n<h2><a href=\"/img/movie/xinyang.mp4\">信仰-全职高手</a></h2>\n<h2><a href=\"/img/movie/someonelikeyou.mp4\">Someone like you</a></h2>\n<h2><a href=\"/img/movie/mengzhongdehunli.mp4\">梦中的婚礼</a></h2>\n<h2><a href=\"/img/movie/yanhuolidechenai.mp4\">烟火里的尘埃</a></h2>\n<h2><a href=\"/img/movie/qingshixiang.mp4\">青石巷 - 片段</a></h2>\n<h2><a href=\"/img/movie/haidi.mp4\">海底</a></h2>\n<h2><a href=\"/img/movie/riverflowsinyou.mp4\">River flows in you</a></h2>\n<h2><a href=\"/img/movie/yedegangqinqu11.mp4\">夜的钢琴曲11</a></h2>\n<h2><a href=\"/img/movie/liangzhu.mp4\">梁祝钢琴曲</a></h2>\n<h2>我的纯音乐歌单</h2>\n<p><a href=\"https://t.kugou.com/355mda6xVV2\">纯音乐歌单</a>（打不开可以尝试手机打开）</p>\n<p>很多歌带着一段感情与记忆，还是要经历过才会听得更有滋味</p>\n<h2>音乐篇必读镇楼</h2>\n<ul>\n<li>2020-08-23</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">音乐自得其乐</span><br><span class=\"line\">1. 分享音乐与感受</span><br><span class=\"line\">2. 钢琴学习与弹奏</span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\" src=\"/js/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/meplayer.min.js\"></script>\n<script type=\"text/javascript\">\n\n    let defaultPlay = \"秋的思念\";\n    let movie = document.getElementById(\"movie\");\n    let ms = document.getElementById(\"ms\");\n    let lks = document.querySelectorAll(\".post-container > h2 > a\");\n    let mePlayerBuilder = mePlayer;\n    let mePlayerOperater = null;\n    let first = true;\n\n    function getQueryVariable(variable){\n       var query = window.location.search.substring(1);\n       var vars = query.split(\"&\");\n       for (var i=0;i<vars.length;i++) {\n            var pair = vars[i].split(\"=\");\n            if(pair[0] == variable){return decodeURI(pair[1]);}\n       }\n       return(false);\n    }\n\n    function playMovie(pmv, play) {\n        ms.style.display = \"none\";\n        movie.style.display = \"block\";\n        if(document.getElementsByTagName(\"audio\")[0]) {\n            document.getElementsByTagName(\"audio\")[0].pause()\n        }\n        movie.src=pmv.href;\n        if(play) {\n            movie.play();\n        }\n    }\n\n    function playMp3(pmp, play) {\n        movie.style.display = \"none\";\n        movie.pause();\n        ms.style.display = \"block\";\n        mePlayerBuilder({\n            music: {\n                src: pmp.href,\n                title: pmp.text,\n                author: \"纯音乐请欣赏\",\n                loop: true\n            },\n            target: '#ms',\n            autoplay: play\n        });\n    }\n\n\n    for(let i = 0; i < lks.length; i++) {\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp4\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMovie(lks[i], true);\n            }\n        }\n\n        if(lks[i].className == \"\" && lks[i].href.endsWith(\"mp3\")) {\n            lks[i].onclick = function(e){\n                e.preventDefault();\n                playMp3(lks[i], true);\n            }\n        }\n    }\n\n    let thePlay;\n    if(getQueryVariable(\"init\")) {\n        thePlay = getQueryVariable(\"init\")\n    } else {\n        thePlay = defaultPlay;\n    }\n    let init = document.getElementById(thePlay);\n    let node = init.children[0];\n    if(node.href.endsWith(\"mp4\")) {\n        playMovie(node, false);\n    }\n    if(node.href.endsWith(\"mp3\")) {\n        playMp3(node, false);\n    }\n</script>"},{"article":false,"title":"彩票随机生成器","catalog":true,"date":"1996-09-25T11:31:43.000Z","subtitle":"随机个五百万","header-img":null,"_content":"\n# 大乐透\n\n<form class=\"form-inline\">\n    <div class=\"form-group\">\n        <label for=\"gsize\">组数: </label>\n        <input type=\"number\" class=\"form-control\" value='5' id='gsize'>\n    </div>\n    <button type=\"button\" class='btn btn-default' style='line-height: 0.7' id='generate'>生成</button>\n</form>\n<div id='dlt' style='font-size: 28px'></div>\n\n\n<script type=\"text/javascript\">\n    function getRandom(min, max) {\n        return Math.floor(Math.random()*(max-min+1)+min)\n    }\n\n    function getRandomList(num, min, max) {\n        if(max - min + 1 < num) {\n            return []\n        }\n        let tmp = []\n        while(true) {\n            if(tmp.length >= num) {\n                break\n            }\n            let n = getRandom(min, max);\n            if(tmp.indexOf(n) == -1) {\n                tmp.push(n)\n            }\n            console.log(1)\n        }\n        tmp.sort((a, b) => a-b)\n        return tmp\n    }\n\n    function formatNumList(numList, n) {\n        return numList.map(i => (Array(n).join(0) + i).slice(-n));\n    }\n\n    function writeDaLeTouList(n) {\n        let str = \"\";\n        for(let i = 0;i < n;i++) {\n            str += formatNumList(getRandomList(5, 1, 35), 2).join(\" \") + \" + \" + formatNumList(getRandomList(2, 1, 12), 2).join(\" \") + \"<br />\"\n        }\n        document.getElementById(\"dlt\").innerHTML = str\n    }\n\n    let gbtn = document.getElementById(\"generate\");\n    let gsize = document.getElementById(\"gsize\");\n    gbtn.onclick = function(e) {\n        e.preventDefault();\n        writeDaLeTouList(parseInt(gsize.value));\n    }\n</script>","source":"_posts/money/lottery.md","raw":"---\narticle: false\ntitle: 彩票随机生成器\ncatalog: true\ndate: 1996-09-25 19:31:43\nsubtitle: 随机个五百万\nheader-img:\n---\n\n# 大乐透\n\n<form class=\"form-inline\">\n    <div class=\"form-group\">\n        <label for=\"gsize\">组数: </label>\n        <input type=\"number\" class=\"form-control\" value='5' id='gsize'>\n    </div>\n    <button type=\"button\" class='btn btn-default' style='line-height: 0.7' id='generate'>生成</button>\n</form>\n<div id='dlt' style='font-size: 28px'></div>\n\n\n<script type=\"text/javascript\">\n    function getRandom(min, max) {\n        return Math.floor(Math.random()*(max-min+1)+min)\n    }\n\n    function getRandomList(num, min, max) {\n        if(max - min + 1 < num) {\n            return []\n        }\n        let tmp = []\n        while(true) {\n            if(tmp.length >= num) {\n                break\n            }\n            let n = getRandom(min, max);\n            if(tmp.indexOf(n) == -1) {\n                tmp.push(n)\n            }\n            console.log(1)\n        }\n        tmp.sort((a, b) => a-b)\n        return tmp\n    }\n\n    function formatNumList(numList, n) {\n        return numList.map(i => (Array(n).join(0) + i).slice(-n));\n    }\n\n    function writeDaLeTouList(n) {\n        let str = \"\";\n        for(let i = 0;i < n;i++) {\n            str += formatNumList(getRandomList(5, 1, 35), 2).join(\" \") + \" + \" + formatNumList(getRandomList(2, 1, 12), 2).join(\" \") + \"<br />\"\n        }\n        document.getElementById(\"dlt\").innerHTML = str\n    }\n\n    let gbtn = document.getElementById(\"generate\");\n    let gsize = document.getElementById(\"gsize\");\n    gbtn.onclick = function(e) {\n        e.preventDefault();\n        writeDaLeTouList(parseInt(gsize.value));\n    }\n</script>","slug":"money/lottery","published":1,"updated":"2021-12-06T11:24:03.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2fsh76s005a0770ofn79whf","content":"<h1 id=\"大乐透\">大乐透</h1>\n<form class=\"form-inline\">\n    <div class=\"form-group\">\n        <label for=\"gsize\">组数: </label>\n        <input type=\"number\" class=\"form-control\" value=\"5\" id=\"gsize\">\n    </div>\n    <button type=\"button\" class=\"btn btn-default\" style=\"line-height: 0.7\" id=\"generate\">生成</button>\n</form>\n<div id=\"dlt\" style=\"font-size: 28px\"></div>\n<script type=\"text/javascript\">\n    function getRandom(min, max) {\n        return Math.floor(Math.random()*(max-min+1)+min)\n    }\n\n    function getRandomList(num, min, max) {\n        if(max - min + 1 < num) {\n            return []\n        }\n        let tmp = []\n        while(true) {\n            if(tmp.length >= num) {\n                break\n            }\n            let n = getRandom(min, max);\n            if(tmp.indexOf(n) == -1) {\n                tmp.push(n)\n            }\n            console.log(1)\n        }\n        tmp.sort((a, b) => a-b)\n        return tmp\n    }\n\n    function formatNumList(numList, n) {\n        return numList.map(i => (Array(n).join(0) + i).slice(-n));\n    }\n\n    function writeDaLeTouList(n) {\n        let str = \"\";\n        for(let i = 0;i < n;i++) {\n            str += formatNumList(getRandomList(5, 1, 35), 2).join(\" \") + \" + \" + formatNumList(getRandomList(2, 1, 12), 2).join(\" \") + \"<br />\"\n        }\n        document.getElementById(\"dlt\").innerHTML = str\n    }\n\n    let gbtn = document.getElementById(\"generate\");\n    let gsize = document.getElementById(\"gsize\");\n    gbtn.onclick = function(e) {\n        e.preventDefault();\n        writeDaLeTouList(parseInt(gsize.value));\n    }\n</script>","excerpt":"","more":"<h1>大乐透</h1>\n<form class=\"form-inline\">\n    <div class=\"form-group\">\n        <label for=\"gsize\">组数: </label>\n        <input type=\"number\" class=\"form-control\" value='5' id='gsize'>\n    </div>\n    <button type=\"button\" class='btn btn-default' style='line-height: 0.7' id='generate'>生成</button>\n</form>\n<div id='dlt' style='font-size: 28px'></div>\n<script type=\"text/javascript\">\n    function getRandom(min, max) {\n        return Math.floor(Math.random()*(max-min+1)+min)\n    }\n\n    function getRandomList(num, min, max) {\n        if(max - min + 1 < num) {\n            return []\n        }\n        let tmp = []\n        while(true) {\n            if(tmp.length >= num) {\n                break\n            }\n            let n = getRandom(min, max);\n            if(tmp.indexOf(n) == -1) {\n                tmp.push(n)\n            }\n            console.log(1)\n        }\n        tmp.sort((a, b) => a-b)\n        return tmp\n    }\n\n    function formatNumList(numList, n) {\n        return numList.map(i => (Array(n).join(0) + i).slice(-n));\n    }\n\n    function writeDaLeTouList(n) {\n        let str = \"\";\n        for(let i = 0;i < n;i++) {\n            str += formatNumList(getRandomList(5, 1, 35), 2).join(\" \") + \" + \" + formatNumList(getRandomList(2, 1, 12), 2).join(\" \") + \"<br />\"\n        }\n        document.getElementById(\"dlt\").innerHTML = str\n    }\n\n    let gbtn = document.getElementById(\"generate\");\n    let gsize = document.getElementById(\"gsize\");\n    gbtn.onclick = function(e) {\n        e.preventDefault();\n        writeDaLeTouList(parseInt(gsize.value));\n    }\n</script>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl2fsh734001p0770jet2a5lk","tag_id":"cl2fsh736001r0770mlo4j4tr","_id":"cl2fsh73l001v0770j3gm9p0z"},{"post_id":"cl2fsh74x002i0770zzmqtax7","tag_id":"cl2fsh736001r0770mlo4j4tr","_id":"cl2fsh751002k0770v1dlrosp"},{"post_id":"cl2fsh756002p07704atkccxl","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh75b002s0770lyuppgn9"},{"post_id":"cl2fsh751002l0770rya2fvik","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh75d002u0770yvpuf951"},{"post_id":"cl2fsh757002q0770dt07nnkn","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh75f002x0770h85u37z7"},{"post_id":"cl2fsh753002m0770ukts7y2d","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh75i002z0770xurm41ng"},{"post_id":"cl2fsh754002o0770qffs7run","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh75k00320770jcqqq645"},{"post_id":"cl2fsh75c002t0770nug6rllc","tag_id":"cl2fsh75j00310770odhfj1yr","_id":"cl2fsh75o003707707datiygc"},{"post_id":"cl2fsh75d002v07708dl3itui","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh75r003b0770saruok51"},{"post_id":"cl2fsh75f002y0770osikhivo","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh75v003f0770ksf1ud68"},{"post_id":"cl2fsh75i00300770zqvgsyba","tag_id":"cl2fsh75u003d0770kkgxs44w","_id":"cl2fsh75y003j077008eg8cdq"},{"post_id":"cl2fsh760003n0770lw7eix5i","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh761003q0770grgvs0k8"},{"post_id":"cl2fsh760003n0770lw7eix5i","tag_id":"cl2fsh75z003l077046w79emo","_id":"cl2fsh762003s0770b58c5ps9"},{"post_id":"cl2fsh75k00330770mhl6go7u","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh764003v0770awxg4ri8"},{"post_id":"cl2fsh75k00330770mhl6go7u","tag_id":"cl2fsh75z003l077046w79emo","_id":"cl2fsh765003x0770p6cdbse2"},{"post_id":"cl2fsh760003o0770o910j23y","tag_id":"cl2fsh736001r0770mlo4j4tr","_id":"cl2fsh766004007702a1ae19g"},{"post_id":"cl2fsh762003r0770cz93un2w","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh7670042077046aj8hdo"},{"post_id":"cl2fsh762003r0770cz93un2w","tag_id":"cl2fsh75z003l077046w79emo","_id":"cl2fsh76800450770e8u9s0qw"},{"post_id":"cl2fsh75l00340770csw0f96w","tag_id":"cl2fsh75j00310770odhfj1yr","_id":"cl2fsh76900470770ntuep6la"},{"post_id":"cl2fsh75l00340770csw0f96w","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76b004a0770e47xkh9s"},{"post_id":"cl2fsh762003t0770t92m3gfr","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh76d004c0770og7p8b7i"},{"post_id":"cl2fsh762003t0770t92m3gfr","tag_id":"cl2fsh75z003l077046w79emo","_id":"cl2fsh76e004f07700fngzij8"},{"post_id":"cl2fsh75n003607708js3caay","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76f004h07702tz1kl0g"},{"post_id":"cl2fsh75n003607708js3caay","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76g004j0770donea3sp"},{"post_id":"cl2fsh75p00380770peevgczw","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76h004m0770j3qune84"},{"post_id":"cl2fsh75p00380770peevgczw","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76i004o07706lsdkgen"},{"post_id":"cl2fsh76d004d0770focdw6uk","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh76j004r0770mr9d5lar"},{"post_id":"cl2fsh76d004d0770focdw6uk","tag_id":"cl2fsh75u003d0770kkgxs44w","_id":"cl2fsh76l004t0770j67t5hk7"},{"post_id":"cl2fsh75r003a07704obnt3eh","tag_id":"cl2fsh76d004e077035hx8mta","_id":"cl2fsh76m004w07700596163f"},{"post_id":"cl2fsh75s003c0770gtg2y3k9","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76n004y0770bww3sxin"},{"post_id":"cl2fsh75s003c0770gtg2y3k9","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76o00510770gx5kdwvz"},{"post_id":"cl2fsh76m004x0770jhbajkp1","tag_id":"cl2fsh75m00350770zyj1358l","_id":"cl2fsh76p00530770jn2u79ih"},{"post_id":"cl2fsh76m004x0770jhbajkp1","tag_id":"cl2fsh75z003l077046w79emo","_id":"cl2fsh76q005607704nweoqd5"},{"post_id":"cl2fsh75u003e0770glpdlteq","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76s00580770qu5ao6xg"},{"post_id":"cl2fsh75u003e0770glpdlteq","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76t005b0770i5q9mx34"},{"post_id":"cl2fsh75w003g07700otpgj1q","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76u005d0770zazpfkyz"},{"post_id":"cl2fsh75w003g07700otpgj1q","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76u005e07703ff61x3w"},{"post_id":"cl2fsh75x003i0770fsm05iln","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76v005h07700lkhns69"},{"post_id":"cl2fsh75x003i0770fsm05iln","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76w005i0770p7qi9gdo"},{"post_id":"cl2fsh75y003k0770ygggp3z2","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh76x005l07700e4er9w5"},{"post_id":"cl2fsh75y003k0770ygggp3z2","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76x005m0770q9x5wf2y"},{"post_id":"cl2fsh75z003m077056gzgwe5","tag_id":"cl2fsh76w005k0770xj9zhns5","_id":"cl2fsh76y005p0770iqrz9mg3"},{"post_id":"cl2fsh75z003m077056gzgwe5","tag_id":"cl2fsh766003z0770ef8pv8g9","_id":"cl2fsh76y005q0770kqpviyw1"},{"post_id":"cl2fsh764003w0770bymn59mw","tag_id":"cl2fsh76y005o0770irs6zdsr","_id":"cl2fsh770005t0770z2o8u3ea"},{"post_id":"cl2fsh764003w0770bymn59mw","tag_id":"cl2fsh76y005r0770fy1ikvz8","_id":"cl2fsh770005u07703mibz95v"},{"post_id":"cl2fsh765003y0770c267ncqm","tag_id":"cl2fsh76z005s07701zbar6fp","_id":"cl2fsh772005x0770ev1u4x4g"},{"post_id":"cl2fsh765003y0770c267ncqm","tag_id":"cl2fsh770005v0770nfajng6x","_id":"cl2fsh774005y0770ktqyjyis"},{"post_id":"cl2fsh767004107702yd59k9g","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh7750060077081gkvegt"},{"post_id":"cl2fsh767004107702yd59k9g","tag_id":"cl2fsh772005w0770jtbwsa0v","_id":"cl2fsh775006107706ayk7pwe"},{"post_id":"cl2fsh767004107702yd59k9g","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh77600630770943kwgbu"},{"post_id":"cl2fsh76700430770xwhtf99i","tag_id":"cl2fsh774005z0770tx2hkwly","_id":"cl2fsh7770065077086ftuoid"},{"post_id":"cl2fsh76700430770xwhtf99i","tag_id":"cl2fsh7750062077046dm3ffc","_id":"cl2fsh77700660770qvetj0r0"},{"post_id":"cl2fsh76800460770nl48uszk","tag_id":"cl2fsh772005w0770jtbwsa0v","_id":"cl2fsh7780069077065ug4xcs"},{"post_id":"cl2fsh76800460770nl48uszk","tag_id":"cl2fsh77700670770yvtgtn64","_id":"cl2fsh778006a077074v7mowl"},{"post_id":"cl2fsh76a00480770ie2b5ryp","tag_id":"cl2fsh774005z0770tx2hkwly","_id":"cl2fsh779006e07701qrdlng9"},{"post_id":"cl2fsh76a00480770ie2b5ryp","tag_id":"cl2fsh7750062077046dm3ffc","_id":"cl2fsh779006f0770ep9k8mu6"},{"post_id":"cl2fsh76a00480770ie2b5ryp","tag_id":"cl2fsh770005v0770nfajng6x","_id":"cl2fsh779006h0770fw1f5tis"},{"post_id":"cl2fsh76c004b0770ue9c069a","tag_id":"cl2fsh754002n0770j2ecvuj6","_id":"cl2fsh779006i0770103zhrot"},{"post_id":"cl2fsh76c004b0770ue9c069a","tag_id":"cl2fsh779006d0770oh6un2a5","_id":"cl2fsh77a006k0770i67mne2e"},{"post_id":"cl2fsh76e004g0770g16ub4kk","tag_id":"cl2fsh779006g0770v7jxaz5e","_id":"cl2fsh77a006l0770y7iaxk5g"},{"post_id":"cl2fsh76f004i0770jh7ckv9j","tag_id":"cl2fsh75j00310770odhfj1yr","_id":"cl2fsh77b006n0770wryb88n8"},{"post_id":"cl2fsh76f004i0770jh7ckv9j","tag_id":"cl2fsh774005z0770tx2hkwly","_id":"cl2fsh77b006o0770uswkru9p"},{"post_id":"cl2fsh76f004i0770jh7ckv9j","tag_id":"cl2fsh761003p077098khih69","_id":"cl2fsh77b006q07708xg9s79v"},{"post_id":"cl2fsh76j004q0770kygxxo6x","tag_id":"cl2fsh779006g0770v7jxaz5e","_id":"cl2fsh77b006r0770tjbj1yti"},{"post_id":"cl2fsh76n00500770315cya73","tag_id":"cl2fsh77b006p0770on93kggn","_id":"cl2fsh77f006v0770myj8uu62"},{"post_id":"cl2fsh76n00500770315cya73","tag_id":"cl2fsh77b006s0770qwvf2qd4","_id":"cl2fsh77f006w07709cwvzdws"},{"post_id":"cl2fsh76n00500770315cya73","tag_id":"cl2fsh77f006t077062widm6f","_id":"cl2fsh77f006x0770emrqe0gu"},{"post_id":"cl2fsh76o00520770tlq55zet","tag_id":"cl2fsh77f006u0770x5h8n3xi","_id":"cl2fsh77f006y0770h3pc3azd"},{"post_id":"cl2fsh76o00520770tlq55zet","tag_id":"cl2fsh75u003d0770kkgxs44w","_id":"cl2fsh77g006z0770huvm7a00"}],"Tag":[{"name":"OTHER","_id":"cl2fsh736001r0770mlo4j4tr"},{"name":"HIVE","_id":"cl2fsh754002n0770j2ecvuj6"},{"name":"HQL解析","_id":"cl2fsh75j00310770odhfj1yr"},{"name":"CHROME插件","_id":"cl2fsh75m00350770zyj1358l"},{"name":"HADOOP","_id":"cl2fsh75u003d0770kkgxs44w"},{"name":"自动化","_id":"cl2fsh75z003l077046w79emo"},{"name":"JAVA","_id":"cl2fsh761003p077098khih69"},{"name":"知识积累","_id":"cl2fsh766003z0770ef8pv8g9"},{"name":"其他","_id":"cl2fsh76d004e077035hx8mta"},{"name":"操作系统","_id":"cl2fsh76w005k0770xj9zhns5"},{"name":"HTTP","_id":"cl2fsh76y005o0770irs6zdsr"},{"name":"后端","_id":"cl2fsh76y005r0770fy1ikvz8"},{"name":"SQL","_id":"cl2fsh76z005s07701zbar6fp"},{"name":"MYSQL","_id":"cl2fsh770005v0770nfajng6x"},{"name":"PYTHON","_id":"cl2fsh772005w0770jtbwsa0v"},{"name":"元数据","_id":"cl2fsh774005z0770tx2hkwly"},{"name":"大数据","_id":"cl2fsh7750062077046dm3ffc"},{"name":"脚本","_id":"cl2fsh77700670770yvtgtn64"},{"name":"YARN","_id":"cl2fsh779006d0770oh6un2a5"},{"name":"总结","_id":"cl2fsh779006g0770v7jxaz5e"},{"name":"H3S","_id":"cl2fsh77b006p0770on93kggn"},{"name":"评测","_id":"cl2fsh77b006s0770qwvf2qd4"},{"name":"生活","_id":"cl2fsh77f006t077062widm6f"},{"name":"HDFS","_id":"cl2fsh77f006u0770x5h8n3xi"},{"name":"博客","_id":"cl2fshsqh00011p707xjlwcz4"}]}}